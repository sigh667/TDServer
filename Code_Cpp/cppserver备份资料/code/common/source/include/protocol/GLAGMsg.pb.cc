// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GLAGMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBG2GLTradePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLTradePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLTradeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLTradeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGLAGFindPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGLAGFindPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGLAGFindPlayerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGLAGFindPlayerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGL2GSaleMoneyFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGL2GSaleMoneyFail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGL2GSaleMoneyCancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGL2GSaleMoneyCancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLSaleMoney_salecancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLSaleMoney_salecancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGL2GAuctionSaleFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGL2GAuctionSaleFail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGL2GAuctionSaleCancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGL2GAuctionSaleCancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGL2GAuctionBuyFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGL2GAuctionBuyFail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLAuction_sale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLAuction_sale_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLFriend_AddAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLFriend_AddAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLFriend_Answer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLFriend_Answer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLFriend_Find_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLFriend_Find_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLFriend_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLFriend_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLFriend_Syn_ToGlobal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLFriend_Syn_ToGlobal_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLFriend_Add_ToGlobal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLFriend_Add_ToGlobal_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLFriend_Del_ToGlobal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLFriend_Del_ToGlobal_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGL2GFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGL2GFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGL2GFriendInfoUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGL2GFriendInfoUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGL2GFriendAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGL2GFriendAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGL2GFriendInfoSyn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGL2GFriendInfoSyn_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLCommon_BossInfoUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLCommon_BossInfoUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLCommon_BossListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLCommon_BossListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGLAGCallPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGLAGCallPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGLAGLocatePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGLAGLocatePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGLAGLocatePlayerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGLAGLocatePlayerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWorldBossStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldBossStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLWorldBossStatusReportAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLWorldBossStatusReportAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2GLWorldBossKillInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2GLWorldBossKillInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGL2GWorldBossStatusNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGL2GWorldBossStatusNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGL2GWorldBossKillerInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGL2GWorldBossKillerInfoAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GLAGMsg_2eproto() {
  protobuf_AddDesc_GLAGMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GLAGMsg.proto");
  GOOGLE_CHECK(file != NULL);
  PBG2GLTradePlayer_descriptor_ = file->message_type(0);
  static const int PBG2GLTradePlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradePlayer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradePlayer, tar_),
  };
  PBG2GLTradePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLTradePlayer_descriptor_,
      PBG2GLTradePlayer::default_instance_,
      PBG2GLTradePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLTradePlayer));
  PBG2GLTradeInfo_descriptor_ = file->message_type(1);
  static const int PBG2GLTradeInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradeInfo, tradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradeInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradeInfo, logicworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradeInfo, myitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradeInfo, mymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradeInfo, taritem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradeInfo, tarmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradeInfo, mygetsliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradeInfo, mygivesliver_),
  };
  PBG2GLTradeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLTradeInfo_descriptor_,
      PBG2GLTradeInfo::default_instance_,
      PBG2GLTradeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLTradeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLTradeInfo));
  PBGLAGFindPlayer_descriptor_ = file->message_type(2);
  static const int PBGLAGFindPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGFindPlayer, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGFindPlayer, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGFindPlayer, targetid_),
  };
  PBGLAGFindPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGLAGFindPlayer_descriptor_,
      PBGLAGFindPlayer::default_instance_,
      PBGLAGFindPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGFindPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGFindPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGLAGFindPlayer));
  PBGLAGFindPlayerAck_descriptor_ = file->message_type(3);
  static const int PBGLAGFindPlayerAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGFindPlayerAck, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGFindPlayerAck, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGFindPlayerAck, pbview_),
  };
  PBGLAGFindPlayerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGLAGFindPlayerAck_descriptor_,
      PBGLAGFindPlayerAck::default_instance_,
      PBGLAGFindPlayerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGFindPlayerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGFindPlayerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGLAGFindPlayerAck));
  PBGL2GSaleMoneyFail_descriptor_ = file->message_type(4);
  static const int PBGL2GSaleMoneyFail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyFail, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyFail, logicworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyFail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyFail, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyFail, sliver_),
  };
  PBGL2GSaleMoneyFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGL2GSaleMoneyFail_descriptor_,
      PBGL2GSaleMoneyFail::default_instance_,
      PBGL2GSaleMoneyFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGL2GSaleMoneyFail));
  PBGL2GSaleMoneyCancel_descriptor_ = file->message_type(5);
  static const int PBGL2GSaleMoneyCancel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyCancel, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyCancel, logicworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyCancel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyCancel, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyCancel, sliver_),
  };
  PBGL2GSaleMoneyCancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGL2GSaleMoneyCancel_descriptor_,
      PBGL2GSaleMoneyCancel::default_instance_,
      PBGL2GSaleMoneyCancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyCancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GSaleMoneyCancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGL2GSaleMoneyCancel));
  PBG2GLSaleMoney_salecancel_descriptor_ = file->message_type(6);
  static const int PBG2GLSaleMoney_salecancel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLSaleMoney_salecancel, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLSaleMoney_salecancel, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLSaleMoney_salecancel, can_get_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLSaleMoney_salecancel, can_get_sliver_),
  };
  PBG2GLSaleMoney_salecancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLSaleMoney_salecancel_descriptor_,
      PBG2GLSaleMoney_salecancel::default_instance_,
      PBG2GLSaleMoney_salecancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLSaleMoney_salecancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLSaleMoney_salecancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLSaleMoney_salecancel));
  PBGL2GAuctionSaleFail_descriptor_ = file->message_type(7);
  static const int PBGL2GAuctionSaleFail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionSaleFail, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionSaleFail, logicworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionSaleFail, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionSaleFail, sliver_),
  };
  PBGL2GAuctionSaleFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGL2GAuctionSaleFail_descriptor_,
      PBGL2GAuctionSaleFail::default_instance_,
      PBGL2GAuctionSaleFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionSaleFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionSaleFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGL2GAuctionSaleFail));
  PBGL2GAuctionSaleCancel_descriptor_ = file->message_type(8);
  static const int PBGL2GAuctionSaleCancel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionSaleCancel, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionSaleCancel, logicworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionSaleCancel, item_),
  };
  PBGL2GAuctionSaleCancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGL2GAuctionSaleCancel_descriptor_,
      PBGL2GAuctionSaleCancel::default_instance_,
      PBGL2GAuctionSaleCancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionSaleCancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionSaleCancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGL2GAuctionSaleCancel));
  PBGL2GAuctionBuyFail_descriptor_ = file->message_type(9);
  static const int PBGL2GAuctionBuyFail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionBuyFail, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionBuyFail, logicworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionBuyFail, sliver_),
  };
  PBGL2GAuctionBuyFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGL2GAuctionBuyFail_descriptor_,
      PBGL2GAuctionBuyFail::default_instance_,
      PBGL2GAuctionBuyFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionBuyFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GAuctionBuyFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGL2GAuctionBuyFail));
  PBG2GLAuction_sale_descriptor_ = file->message_type(10);
  static const int PBG2GLAuction_sale_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLAuction_sale, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLAuction_sale, unitsliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLAuction_sale, taxsliver_),
  };
  PBG2GLAuction_sale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLAuction_sale_descriptor_,
      PBG2GLAuction_sale::default_instance_,
      PBG2GLAuction_sale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLAuction_sale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLAuction_sale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLAuction_sale));
  PBG2GLFriend_AddAsk_descriptor_ = file->message_type(11);
  static const int PBG2GLFriend_AddAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_AddAsk, applyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_AddAsk, fithgpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_AddAsk, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_AddAsk, targetid_),
  };
  PBG2GLFriend_AddAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLFriend_AddAsk_descriptor_,
      PBG2GLFriend_AddAsk::default_instance_,
      PBG2GLFriend_AddAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_AddAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_AddAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLFriend_AddAsk));
  PBG2GLFriend_Answer_descriptor_ = file->message_type(12);
  static const int PBG2GLFriend_Answer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Answer, ackplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Answer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Answer, applyerid_),
  };
  PBG2GLFriend_Answer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLFriend_Answer_descriptor_,
      PBG2GLFriend_Answer::default_instance_,
      PBG2GLFriend_Answer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Answer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Answer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLFriend_Answer));
  PBG2GLFriend_Find_descriptor_ = file->message_type(13);
  static const int PBG2GLFriend_Find_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Find, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Find, name_),
  };
  PBG2GLFriend_Find_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLFriend_Find_descriptor_,
      PBG2GLFriend_Find::default_instance_,
      PBG2GLFriend_Find_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Find, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Find, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLFriend_Find));
  PBG2GLFriend_Info_descriptor_ = file->message_type(14);
  static const int PBG2GLFriend_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Info, friendid_),
  };
  PBG2GLFriend_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLFriend_Info_descriptor_,
      PBG2GLFriend_Info::default_instance_,
      PBG2GLFriend_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLFriend_Info));
  PBG2GLFriend_Syn_ToGlobal_descriptor_ = file->message_type(15);
  static const int PBG2GLFriend_Syn_ToGlobal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Syn_ToGlobal, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Syn_ToGlobal, info_),
  };
  PBG2GLFriend_Syn_ToGlobal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLFriend_Syn_ToGlobal_descriptor_,
      PBG2GLFriend_Syn_ToGlobal::default_instance_,
      PBG2GLFriend_Syn_ToGlobal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Syn_ToGlobal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Syn_ToGlobal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLFriend_Syn_ToGlobal));
  PBG2GLFriend_Add_ToGlobal_descriptor_ = file->message_type(16);
  static const int PBG2GLFriend_Add_ToGlobal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Add_ToGlobal, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Add_ToGlobal, info_),
  };
  PBG2GLFriend_Add_ToGlobal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLFriend_Add_ToGlobal_descriptor_,
      PBG2GLFriend_Add_ToGlobal::default_instance_,
      PBG2GLFriend_Add_ToGlobal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Add_ToGlobal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Add_ToGlobal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLFriend_Add_ToGlobal));
  PBG2GLFriend_Del_ToGlobal_descriptor_ = file->message_type(17);
  static const int PBG2GLFriend_Del_ToGlobal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Del_ToGlobal, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Del_ToGlobal, info_),
  };
  PBG2GLFriend_Del_ToGlobal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLFriend_Del_ToGlobal_descriptor_,
      PBG2GLFriend_Del_ToGlobal::default_instance_,
      PBG2GLFriend_Del_ToGlobal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Del_ToGlobal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLFriend_Del_ToGlobal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLFriend_Del_ToGlobal));
  PBGL2GFriendInfo_descriptor_ = file->message_type(18);
  static const int PBGL2GFriendInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfo, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfo, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfo, fightpower_),
  };
  PBGL2GFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGL2GFriendInfo_descriptor_,
      PBGL2GFriendInfo::default_instance_,
      PBGL2GFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGL2GFriendInfo));
  PBGL2GFriendInfoUpdate_descriptor_ = file->message_type(19);
  static const int PBGL2GFriendInfoUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfoUpdate, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfoUpdate, info_),
  };
  PBGL2GFriendInfoUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGL2GFriendInfoUpdate_descriptor_,
      PBGL2GFriendInfoUpdate::default_instance_,
      PBGL2GFriendInfoUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfoUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfoUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGL2GFriendInfoUpdate));
  PBGL2GFriendAdd_descriptor_ = file->message_type(20);
  static const int PBGL2GFriendAdd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendAdd, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendAdd, info_),
  };
  PBGL2GFriendAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGL2GFriendAdd_descriptor_,
      PBGL2GFriendAdd::default_instance_,
      PBGL2GFriendAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGL2GFriendAdd));
  PBGL2GFriendInfoSyn_descriptor_ = file->message_type(21);
  static const int PBGL2GFriendInfoSyn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfoSyn, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfoSyn, info_),
  };
  PBGL2GFriendInfoSyn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGL2GFriendInfoSyn_descriptor_,
      PBGL2GFriendInfoSyn::default_instance_,
      PBGL2GFriendInfoSyn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfoSyn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GFriendInfoSyn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGL2GFriendInfoSyn));
  PBG2GLCommon_BossInfoUpdate_descriptor_ = file->message_type(22);
  static const int PBG2GLCommon_BossInfoUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLCommon_BossInfoUpdate, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLCommon_BossInfoUpdate, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLCommon_BossInfoUpdate, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLCommon_BossInfoUpdate, alive_),
  };
  PBG2GLCommon_BossInfoUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLCommon_BossInfoUpdate_descriptor_,
      PBG2GLCommon_BossInfoUpdate::default_instance_,
      PBG2GLCommon_BossInfoUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLCommon_BossInfoUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLCommon_BossInfoUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLCommon_BossInfoUpdate));
  PBG2GLCommon_BossListAsk_descriptor_ = file->message_type(23);
  static const int PBG2GLCommon_BossListAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLCommon_BossListAsk, playerid_),
  };
  PBG2GLCommon_BossListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLCommon_BossListAsk_descriptor_,
      PBG2GLCommon_BossListAsk::default_instance_,
      PBG2GLCommon_BossListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLCommon_BossListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLCommon_BossListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLCommon_BossListAsk));
  PBGLAGCallPlayer_descriptor_ = file->message_type(24);
  static const int PBGLAGCallPlayer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGCallPlayer, tarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGCallPlayer, tarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGCallPlayer, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGCallPlayer, scenecellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGCallPlayer, scenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGCallPlayer, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGCallPlayer, posy_),
  };
  PBGLAGCallPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGLAGCallPlayer_descriptor_,
      PBGLAGCallPlayer::default_instance_,
      PBGLAGCallPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGCallPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGCallPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGLAGCallPlayer));
  PBGLAGLocatePlayer_descriptor_ = file->message_type(25);
  static const int PBGLAGLocatePlayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayer, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayer, tarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayer, tarid_),
  };
  PBGLAGLocatePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGLAGLocatePlayer_descriptor_,
      PBGLAGLocatePlayer::default_instance_,
      PBGLAGLocatePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGLAGLocatePlayer));
  PBGLAGLocatePlayerAck_descriptor_ = file->message_type(26);
  static const int PBGLAGLocatePlayerAck_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayerAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayerAck, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayerAck, tar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayerAck, suc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayerAck, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayerAck, scenecellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayerAck, scenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayerAck, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayerAck, posy_),
  };
  PBGLAGLocatePlayerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGLAGLocatePlayerAck_descriptor_,
      PBGLAGLocatePlayerAck::default_instance_,
      PBGLAGLocatePlayerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGLAGLocatePlayerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGLAGLocatePlayerAck));
  PBWorldBossStatus_descriptor_ = file->message_type(27);
  static const int PBWorldBossStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossStatus, bossactivityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossStatus, killername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossStatus, lastdeadtimetick_),
  };
  PBWorldBossStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldBossStatus_descriptor_,
      PBWorldBossStatus::default_instance_,
      PBWorldBossStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldBossStatus));
  PBG2GLWorldBossStatusReportAsk_descriptor_ = file->message_type(28);
  static const int PBG2GLWorldBossStatusReportAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLWorldBossStatusReportAsk, bossstatus_),
  };
  PBG2GLWorldBossStatusReportAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLWorldBossStatusReportAsk_descriptor_,
      PBG2GLWorldBossStatusReportAsk::default_instance_,
      PBG2GLWorldBossStatusReportAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLWorldBossStatusReportAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLWorldBossStatusReportAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLWorldBossStatusReportAsk));
  PBG2GLWorldBossKillInfoAsk_descriptor_ = file->message_type(29);
  static const int PBG2GLWorldBossKillInfoAsk_offsets_[1] = {
  };
  PBG2GLWorldBossKillInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2GLWorldBossKillInfoAsk_descriptor_,
      PBG2GLWorldBossKillInfoAsk::default_instance_,
      PBG2GLWorldBossKillInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLWorldBossKillInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2GLWorldBossKillInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2GLWorldBossKillInfoAsk));
  PBGL2GWorldBossStatusNtf_descriptor_ = file->message_type(30);
  static const int PBGL2GWorldBossStatusNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GWorldBossStatusNtf, bossstatus_),
  };
  PBGL2GWorldBossStatusNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGL2GWorldBossStatusNtf_descriptor_,
      PBGL2GWorldBossStatusNtf::default_instance_,
      PBGL2GWorldBossStatusNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GWorldBossStatusNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GWorldBossStatusNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGL2GWorldBossStatusNtf));
  PBGL2GWorldBossKillerInfoAck_descriptor_ = file->message_type(31);
  static const int PBGL2GWorldBossKillerInfoAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GWorldBossKillerInfoAck, worldbosskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GWorldBossKillerInfoAck, dbvalid_),
  };
  PBGL2GWorldBossKillerInfoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGL2GWorldBossKillerInfoAck_descriptor_,
      PBGL2GWorldBossKillerInfoAck::default_instance_,
      PBGL2GWorldBossKillerInfoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GWorldBossKillerInfoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2GWorldBossKillerInfoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGL2GWorldBossKillerInfoAck));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GLAGMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLTradePlayer_descriptor_, &PBG2GLTradePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLTradeInfo_descriptor_, &PBG2GLTradeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGLAGFindPlayer_descriptor_, &PBGLAGFindPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGLAGFindPlayerAck_descriptor_, &PBGLAGFindPlayerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGL2GSaleMoneyFail_descriptor_, &PBGL2GSaleMoneyFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGL2GSaleMoneyCancel_descriptor_, &PBGL2GSaleMoneyCancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLSaleMoney_salecancel_descriptor_, &PBG2GLSaleMoney_salecancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGL2GAuctionSaleFail_descriptor_, &PBGL2GAuctionSaleFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGL2GAuctionSaleCancel_descriptor_, &PBGL2GAuctionSaleCancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGL2GAuctionBuyFail_descriptor_, &PBGL2GAuctionBuyFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLAuction_sale_descriptor_, &PBG2GLAuction_sale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLFriend_AddAsk_descriptor_, &PBG2GLFriend_AddAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLFriend_Answer_descriptor_, &PBG2GLFriend_Answer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLFriend_Find_descriptor_, &PBG2GLFriend_Find::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLFriend_Info_descriptor_, &PBG2GLFriend_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLFriend_Syn_ToGlobal_descriptor_, &PBG2GLFriend_Syn_ToGlobal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLFriend_Add_ToGlobal_descriptor_, &PBG2GLFriend_Add_ToGlobal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLFriend_Del_ToGlobal_descriptor_, &PBG2GLFriend_Del_ToGlobal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGL2GFriendInfo_descriptor_, &PBGL2GFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGL2GFriendInfoUpdate_descriptor_, &PBGL2GFriendInfoUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGL2GFriendAdd_descriptor_, &PBGL2GFriendAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGL2GFriendInfoSyn_descriptor_, &PBGL2GFriendInfoSyn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLCommon_BossInfoUpdate_descriptor_, &PBG2GLCommon_BossInfoUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLCommon_BossListAsk_descriptor_, &PBG2GLCommon_BossListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGLAGCallPlayer_descriptor_, &PBGLAGCallPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGLAGLocatePlayer_descriptor_, &PBGLAGLocatePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGLAGLocatePlayerAck_descriptor_, &PBGLAGLocatePlayerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldBossStatus_descriptor_, &PBWorldBossStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLWorldBossStatusReportAsk_descriptor_, &PBG2GLWorldBossStatusReportAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2GLWorldBossKillInfoAsk_descriptor_, &PBG2GLWorldBossKillInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGL2GWorldBossStatusNtf_descriptor_, &PBGL2GWorldBossStatusNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGL2GWorldBossKillerInfoAck_descriptor_, &PBGL2GWorldBossKillerInfoAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GLAGMsg_2eproto() {
  delete PBG2GLTradePlayer::default_instance_;
  delete PBG2GLTradePlayer_reflection_;
  delete PBG2GLTradeInfo::default_instance_;
  delete PBG2GLTradeInfo_reflection_;
  delete PBGLAGFindPlayer::default_instance_;
  delete PBGLAGFindPlayer_reflection_;
  delete PBGLAGFindPlayerAck::default_instance_;
  delete PBGLAGFindPlayerAck_reflection_;
  delete PBGL2GSaleMoneyFail::default_instance_;
  delete PBGL2GSaleMoneyFail_reflection_;
  delete PBGL2GSaleMoneyCancel::default_instance_;
  delete PBGL2GSaleMoneyCancel_reflection_;
  delete PBG2GLSaleMoney_salecancel::default_instance_;
  delete PBG2GLSaleMoney_salecancel_reflection_;
  delete PBGL2GAuctionSaleFail::default_instance_;
  delete PBGL2GAuctionSaleFail_reflection_;
  delete PBGL2GAuctionSaleCancel::default_instance_;
  delete PBGL2GAuctionSaleCancel_reflection_;
  delete PBGL2GAuctionBuyFail::default_instance_;
  delete PBGL2GAuctionBuyFail_reflection_;
  delete PBG2GLAuction_sale::default_instance_;
  delete PBG2GLAuction_sale_reflection_;
  delete PBG2GLFriend_AddAsk::default_instance_;
  delete PBG2GLFriend_AddAsk_reflection_;
  delete PBG2GLFriend_Answer::default_instance_;
  delete PBG2GLFriend_Answer_reflection_;
  delete PBG2GLFriend_Find::default_instance_;
  delete PBG2GLFriend_Find_reflection_;
  delete PBG2GLFriend_Info::default_instance_;
  delete PBG2GLFriend_Info_reflection_;
  delete PBG2GLFriend_Syn_ToGlobal::default_instance_;
  delete PBG2GLFriend_Syn_ToGlobal_reflection_;
  delete PBG2GLFriend_Add_ToGlobal::default_instance_;
  delete PBG2GLFriend_Add_ToGlobal_reflection_;
  delete PBG2GLFriend_Del_ToGlobal::default_instance_;
  delete PBG2GLFriend_Del_ToGlobal_reflection_;
  delete PBGL2GFriendInfo::default_instance_;
  delete PBGL2GFriendInfo_reflection_;
  delete PBGL2GFriendInfoUpdate::default_instance_;
  delete PBGL2GFriendInfoUpdate_reflection_;
  delete PBGL2GFriendAdd::default_instance_;
  delete PBGL2GFriendAdd_reflection_;
  delete PBGL2GFriendInfoSyn::default_instance_;
  delete PBGL2GFriendInfoSyn_reflection_;
  delete PBG2GLCommon_BossInfoUpdate::default_instance_;
  delete PBG2GLCommon_BossInfoUpdate_reflection_;
  delete PBG2GLCommon_BossListAsk::default_instance_;
  delete PBG2GLCommon_BossListAsk_reflection_;
  delete PBGLAGCallPlayer::default_instance_;
  delete PBGLAGCallPlayer_reflection_;
  delete PBGLAGLocatePlayer::default_instance_;
  delete PBGLAGLocatePlayer_reflection_;
  delete PBGLAGLocatePlayerAck::default_instance_;
  delete PBGLAGLocatePlayerAck_reflection_;
  delete PBWorldBossStatus::default_instance_;
  delete PBWorldBossStatus_reflection_;
  delete PBG2GLWorldBossStatusReportAsk::default_instance_;
  delete PBG2GLWorldBossStatusReportAsk_reflection_;
  delete PBG2GLWorldBossKillInfoAsk::default_instance_;
  delete PBG2GLWorldBossKillInfoAsk_reflection_;
  delete PBGL2GWorldBossStatusNtf::default_instance_;
  delete PBGL2GWorldBossStatusNtf_reflection_;
  delete PBGL2GWorldBossKillerInfoAck::default_instance_;
  delete PBGL2GWorldBossKillerInfoAck_reflection_;
}

void protobuf_AddDesc_GLAGMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_AccountStruct_2eproto();
  ::protobuf_AddDesc_PlayerStruct_2eproto();
  ::protobuf_AddDesc_GameStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rGLAGMsg.proto\032\023AccountStruct.proto\032\022Pl"
    "ayerStruct.proto\032\020GameStruct.proto\"D\n\021PB"
    "G2GLTradePlayer\022\020\n\010playerid\030\001 \001(\r\022\035\n\003tar"
    "\030\002 \001(\0132\020.PBPlayerDisplay\"\337\001\n\017PBG2GLTrade"
    "Info\022\017\n\007tradeid\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\r\022"
    "\024\n\014logicworldid\030\003 \001(\r\022\027\n\006myitem\030\004 \003(\0132\007."
    "PBItem\022\031\n\007mymoney\030\005 \003(\0132\010.PBMoney\022\030\n\007tar"
    "item\030\006 \003(\0132\007.PBItem\022\032\n\010tarmoney\030\007 \003(\0132\010."
    "PBMoney\022\023\n\013mygetsliver\030\010 \001(\004\022\024\n\014mygivesl"
    "iver\030\t \001(\004\"G\n\020PBGLAGFindPlayer\022\020\n\010source"
    "id\030\001 \001(\r\022\017\n\007worldid\030\002 \001(\r\022\020\n\010targetid\030\003 "
    "\001(\r\"X\n\023PBGLAGFindPlayerAck\022\020\n\010sourceid\030\001"
    " \001(\r\022\020\n\010targetid\030\002 \001(\r\022\035\n\006pbView\030\003 \001(\0132\r"
    ".PBPlayerView\"i\n\023PBGL2GSaleMoneyFail\022\020\n\010"
    "playerid\030\001 \001(\r\022\024\n\014logicworldid\030\002 \001(\r\022\014\n\004"
    "type\030\003 \001(\r\022\014\n\004cash\030\004 \001(\r\022\016\n\006sliver\030\005 \001(\004"
    "\"k\n\025PBGL2GSaleMoneyCancel\022\020\n\010playerid\030\001 "
    "\001(\r\022\024\n\014logicworldid\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\022"
    "\014\n\004cash\030\004 \001(\r\022\016\n\006sliver\030\005 \001(\004\"m\n\032PBG2GLS"
    "aleMoney_salecancel\022\020\n\010playerid\030\001 \001(\r\022\017\n"
    "\007orderid\030\002 \001(\004\022\024\n\014can_get_cash\030\003 \001(\004\022\026\n\016"
    "can_get_sliver\030\004 \001(\004\"f\n\025PBGL2GAuctionSal"
    "eFail\022\020\n\010playerid\030\001 \001(\r\022\024\n\014logicworldid\030"
    "\002 \001(\r\022\025\n\004item\030\003 \001(\0132\007.PBItem\022\016\n\006sliver\030\004"
    " \001(\r\"X\n\027PBGL2GAuctionSaleCancel\022\020\n\010playe"
    "rid\030\001 \001(\r\022\024\n\014logicworldid\030\002 \001(\r\022\025\n\004item\030"
    "\003 \001(\0132\007.PBItem\"N\n\024PBGL2GAuctionBuyFail\022\020"
    "\n\010playerid\030\001 \001(\r\022\024\n\014logicworldid\030\002 \001(\r\022\016"
    "\n\006sliver\030\003 \001(\r\"R\n\022PBG2GLAuction_sale\022\025\n\004"
    "item\030\001 \001(\0132\007.PBItem\022\022\n\nunitSliver\030\002 \001(\r\022"
    "\021\n\ttaxSliver\030\003 \001(\r\"l\n\023PBG2GLFriend_AddAs"
    "k\022!\n\007applyer\030\001 \001(\0132\020.PBPlayerDisplay\022\022\n\n"
    "fithgpower\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\022\020\n\010target"
    "id\030\004 \001(\r\"[\n\023PBG2GLFriend_Answer\022#\n\tackpl"
    "ayer\030\001 \001(\0132\020.PBPlayerDisplay\022\014\n\004type\030\002 \001"
    "(\r\022\021\n\tapplyerid\030\003 \001(\r\"3\n\021PBG2GLFriend_Fi"
    "nd\022\020\n\010playerid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\"3\n\021PB"
    "G2GLFriend_Info\022\014\n\004type\030\001 \001(\r\022\020\n\010friendi"
    "d\030\002 \001(\r\"O\n\031PBG2GLFriend_Syn_ToGlobal\022\020\n\010"
    "playerid\030\001 \001(\r\022 \n\004info\030\002 \003(\0132\022.PBG2GLFri"
    "end_Info\"O\n\031PBG2GLFriend_Add_ToGlobal\022\020\n"
    "\010playerid\030\001 \001(\r\022 \n\004info\030\002 \001(\0132\022.PBG2GLFr"
    "iend_Info\"O\n\031PBG2GLFriend_Del_ToGlobal\022\020"
    "\n\010playerid\030\001 \001(\r\022 \n\004info\030\002 \001(\0132\022.PBG2GLF"
    "riend_Info\"g\n\020PBGL2GFriendInfo\022\014\n\004type\030\001"
    " \001(\r\022!\n\007display\030\002 \001(\0132\020.PBPlayerDisplay\022"
    "\016\n\006online\030\003 \001(\010\022\022\n\nfightpower\030\004 \001(\r\"K\n\026P"
    "BGL2GFriendInfoUpdate\022\020\n\010playerid\030\001 \001(\r\022"
    "\037\n\004info\030\002 \001(\0132\021.PBGL2GFriendInfo\"D\n\017PBGL"
    "2GFriendAdd\022\020\n\010playerid\030\001 \001(\r\022\037\n\004info\030\002 "
    "\001(\0132\021.PBGL2GFriendInfo\"H\n\023PBGL2GFriendIn"
    "foSyn\022\020\n\010playerid\030\001 \001(\r\022\037\n\004info\030\002 \003(\0132\021."
    "PBGL2GFriendInfo\"`\n\033PBG2GLCommon_BossInf"
    "oUpdate\022\017\n\007sceneid\030\001 \001(\r\022\016\n\006cellid\030\002 \001(\r"
    "\022\021\n\tmonsterid\030\003 \001(\r\022\r\n\005alive\030\004 \001(\010\",\n\030PB"
    "G2GLCommon_BossListAsk\022\020\n\010playerid\030\001 \001(\r"
    "\"\210\001\n\020PBGLAGCallPlayer\022\017\n\007tarname\030\001 \001(\t\022\r"
    "\n\005tarid\030\002 \001(\r\022\017\n\007sceneid\030\003 \001(\r\022\023\n\013scenec"
    "ellid\030\004 \001(\r\022\022\n\nscenedynid\030\005 \001(\004\022\014\n\004posx\030"
    "\006 \001(\002\022\014\n\004posy\030\007 \001(\002\"V\n\022PBGLAGLocatePlaye"
    "r\022\020\n\010playerid\030\001 \001(\r\022\016\n\006reason\030\002 \001(\r\022\017\n\007t"
    "arname\030\003 \001(\t\022\r\n\005tarid\030\004 \001(\r\"\273\001\n\025PBGLAGLo"
    "catePlayerAck\022\020\n\010playerid\030\001 \001(\r\022\016\n\006reaso"
    "n\030\002 \001(\r\022\035\n\003tar\030\003 \001(\0132\020.PBPlayerDisplay\022\013"
    "\n\003suc\030\004 \001(\010\022\017\n\007sceneid\030\005 \001(\r\022\023\n\013scenecel"
    "lid\030\006 \001(\r\022\022\n\nscenedynid\030\007 \001(\004\022\014\n\004posx\030\010 "
    "\001(\002\022\014\n\004posy\030\t \001(\002\"i\n\021PBWorldBossStatus\022\026"
    "\n\016bossActivityid\030\001 \001(\r\022\016\n\006status\030\002 \001(\r\022\022"
    "\n\nkillerName\030\003 \001(\t\022\030\n\020lastdeadtimetick\030\004"
    " \001(\004\"H\n\036PBG2GLWorldBossStatusReportAsk\022&"
    "\n\nbossStatus\030\001 \003(\0132\022.PBWorldBossStatus\"\034"
    "\n\032PBG2GLWorldBossKillInfoAsk\"B\n\030PBGL2GWo"
    "rldBossStatusNtf\022&\n\nbossStatus\030\001 \003(\0132\022.P"
    "BWorldBossStatus\"X\n\034PBGL2GWorldBossKille"
    "rInfoAck\022\'\n\rworldbosskill\030\001 \001(\0132\020.PBWorl"
    "dBossKill\022\017\n\007dbvalid\030\002 \001(\010", 3026);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GLAGMsg.proto", &protobuf_RegisterTypes);
  PBG2GLTradePlayer::default_instance_ = new PBG2GLTradePlayer();
  PBG2GLTradeInfo::default_instance_ = new PBG2GLTradeInfo();
  PBGLAGFindPlayer::default_instance_ = new PBGLAGFindPlayer();
  PBGLAGFindPlayerAck::default_instance_ = new PBGLAGFindPlayerAck();
  PBGL2GSaleMoneyFail::default_instance_ = new PBGL2GSaleMoneyFail();
  PBGL2GSaleMoneyCancel::default_instance_ = new PBGL2GSaleMoneyCancel();
  PBG2GLSaleMoney_salecancel::default_instance_ = new PBG2GLSaleMoney_salecancel();
  PBGL2GAuctionSaleFail::default_instance_ = new PBGL2GAuctionSaleFail();
  PBGL2GAuctionSaleCancel::default_instance_ = new PBGL2GAuctionSaleCancel();
  PBGL2GAuctionBuyFail::default_instance_ = new PBGL2GAuctionBuyFail();
  PBG2GLAuction_sale::default_instance_ = new PBG2GLAuction_sale();
  PBG2GLFriend_AddAsk::default_instance_ = new PBG2GLFriend_AddAsk();
  PBG2GLFriend_Answer::default_instance_ = new PBG2GLFriend_Answer();
  PBG2GLFriend_Find::default_instance_ = new PBG2GLFriend_Find();
  PBG2GLFriend_Info::default_instance_ = new PBG2GLFriend_Info();
  PBG2GLFriend_Syn_ToGlobal::default_instance_ = new PBG2GLFriend_Syn_ToGlobal();
  PBG2GLFriend_Add_ToGlobal::default_instance_ = new PBG2GLFriend_Add_ToGlobal();
  PBG2GLFriend_Del_ToGlobal::default_instance_ = new PBG2GLFriend_Del_ToGlobal();
  PBGL2GFriendInfo::default_instance_ = new PBGL2GFriendInfo();
  PBGL2GFriendInfoUpdate::default_instance_ = new PBGL2GFriendInfoUpdate();
  PBGL2GFriendAdd::default_instance_ = new PBGL2GFriendAdd();
  PBGL2GFriendInfoSyn::default_instance_ = new PBGL2GFriendInfoSyn();
  PBG2GLCommon_BossInfoUpdate::default_instance_ = new PBG2GLCommon_BossInfoUpdate();
  PBG2GLCommon_BossListAsk::default_instance_ = new PBG2GLCommon_BossListAsk();
  PBGLAGCallPlayer::default_instance_ = new PBGLAGCallPlayer();
  PBGLAGLocatePlayer::default_instance_ = new PBGLAGLocatePlayer();
  PBGLAGLocatePlayerAck::default_instance_ = new PBGLAGLocatePlayerAck();
  PBWorldBossStatus::default_instance_ = new PBWorldBossStatus();
  PBG2GLWorldBossStatusReportAsk::default_instance_ = new PBG2GLWorldBossStatusReportAsk();
  PBG2GLWorldBossKillInfoAsk::default_instance_ = new PBG2GLWorldBossKillInfoAsk();
  PBGL2GWorldBossStatusNtf::default_instance_ = new PBGL2GWorldBossStatusNtf();
  PBGL2GWorldBossKillerInfoAck::default_instance_ = new PBGL2GWorldBossKillerInfoAck();
  PBG2GLTradePlayer::default_instance_->InitAsDefaultInstance();
  PBG2GLTradeInfo::default_instance_->InitAsDefaultInstance();
  PBGLAGFindPlayer::default_instance_->InitAsDefaultInstance();
  PBGLAGFindPlayerAck::default_instance_->InitAsDefaultInstance();
  PBGL2GSaleMoneyFail::default_instance_->InitAsDefaultInstance();
  PBGL2GSaleMoneyCancel::default_instance_->InitAsDefaultInstance();
  PBG2GLSaleMoney_salecancel::default_instance_->InitAsDefaultInstance();
  PBGL2GAuctionSaleFail::default_instance_->InitAsDefaultInstance();
  PBGL2GAuctionSaleCancel::default_instance_->InitAsDefaultInstance();
  PBGL2GAuctionBuyFail::default_instance_->InitAsDefaultInstance();
  PBG2GLAuction_sale::default_instance_->InitAsDefaultInstance();
  PBG2GLFriend_AddAsk::default_instance_->InitAsDefaultInstance();
  PBG2GLFriend_Answer::default_instance_->InitAsDefaultInstance();
  PBG2GLFriend_Find::default_instance_->InitAsDefaultInstance();
  PBG2GLFriend_Info::default_instance_->InitAsDefaultInstance();
  PBG2GLFriend_Syn_ToGlobal::default_instance_->InitAsDefaultInstance();
  PBG2GLFriend_Add_ToGlobal::default_instance_->InitAsDefaultInstance();
  PBG2GLFriend_Del_ToGlobal::default_instance_->InitAsDefaultInstance();
  PBGL2GFriendInfo::default_instance_->InitAsDefaultInstance();
  PBGL2GFriendInfoUpdate::default_instance_->InitAsDefaultInstance();
  PBGL2GFriendAdd::default_instance_->InitAsDefaultInstance();
  PBGL2GFriendInfoSyn::default_instance_->InitAsDefaultInstance();
  PBG2GLCommon_BossInfoUpdate::default_instance_->InitAsDefaultInstance();
  PBG2GLCommon_BossListAsk::default_instance_->InitAsDefaultInstance();
  PBGLAGCallPlayer::default_instance_->InitAsDefaultInstance();
  PBGLAGLocatePlayer::default_instance_->InitAsDefaultInstance();
  PBGLAGLocatePlayerAck::default_instance_->InitAsDefaultInstance();
  PBWorldBossStatus::default_instance_->InitAsDefaultInstance();
  PBG2GLWorldBossStatusReportAsk::default_instance_->InitAsDefaultInstance();
  PBG2GLWorldBossKillInfoAsk::default_instance_->InitAsDefaultInstance();
  PBGL2GWorldBossStatusNtf::default_instance_->InitAsDefaultInstance();
  PBGL2GWorldBossKillerInfoAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GLAGMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GLAGMsg_2eproto {
  StaticDescriptorInitializer_GLAGMsg_2eproto() {
    protobuf_AddDesc_GLAGMsg_2eproto();
  }
} static_descriptor_initializer_GLAGMsg_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLTradePlayer::kPlayeridFieldNumber;
const int PBG2GLTradePlayer::kTarFieldNumber;
#endif  // !_MSC_VER

PBG2GLTradePlayer::PBG2GLTradePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLTradePlayer::InitAsDefaultInstance() {
  tar_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2GLTradePlayer::PBG2GLTradePlayer(const PBG2GLTradePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLTradePlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  tar_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLTradePlayer::~PBG2GLTradePlayer() {
  SharedDtor();
}

void PBG2GLTradePlayer::SharedDtor() {
  if (this != default_instance_) {
    delete tar_;
  }
}

void PBG2GLTradePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLTradePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLTradePlayer_descriptor_;
}

const PBG2GLTradePlayer& PBG2GLTradePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLTradePlayer* PBG2GLTradePlayer::default_instance_ = NULL;

PBG2GLTradePlayer* PBG2GLTradePlayer::New() const {
  return new PBG2GLTradePlayer;
}

void PBG2GLTradePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_tar()) {
      if (tar_ != NULL) tar_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLTradePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tar;
        break;
      }
      
      // optional .PBPlayerDisplay tar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLTradePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional .PBPlayerDisplay tar = 2;
  if (has_tar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tar(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLTradePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional .PBPlayerDisplay tar = 2;
  if (has_tar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tar(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLTradePlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional .PBPlayerDisplay tar = 2;
    if (has_tar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tar());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLTradePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLTradePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLTradePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLTradePlayer::MergeFrom(const PBG2GLTradePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_tar()) {
      mutable_tar()->::PBPlayerDisplay::MergeFrom(from.tar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLTradePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLTradePlayer::CopyFrom(const PBG2GLTradePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLTradePlayer::IsInitialized() const {
  
  return true;
}

void PBG2GLTradePlayer::Swap(PBG2GLTradePlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(tar_, other->tar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLTradePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLTradePlayer_descriptor_;
  metadata.reflection = PBG2GLTradePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLTradeInfo::kTradeidFieldNumber;
const int PBG2GLTradeInfo::kPlayeridFieldNumber;
const int PBG2GLTradeInfo::kLogicworldidFieldNumber;
const int PBG2GLTradeInfo::kMyitemFieldNumber;
const int PBG2GLTradeInfo::kMymoneyFieldNumber;
const int PBG2GLTradeInfo::kTaritemFieldNumber;
const int PBG2GLTradeInfo::kTarmoneyFieldNumber;
const int PBG2GLTradeInfo::kMygetsliverFieldNumber;
const int PBG2GLTradeInfo::kMygivesliverFieldNumber;
#endif  // !_MSC_VER

PBG2GLTradeInfo::PBG2GLTradeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLTradeInfo::InitAsDefaultInstance() {
}

PBG2GLTradeInfo::PBG2GLTradeInfo(const PBG2GLTradeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLTradeInfo::SharedCtor() {
  _cached_size_ = 0;
  tradeid_ = 0u;
  playerid_ = 0u;
  logicworldid_ = 0u;
  mygetsliver_ = GOOGLE_ULONGLONG(0);
  mygivesliver_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLTradeInfo::~PBG2GLTradeInfo() {
  SharedDtor();
}

void PBG2GLTradeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2GLTradeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLTradeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLTradeInfo_descriptor_;
}

const PBG2GLTradeInfo& PBG2GLTradeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLTradeInfo* PBG2GLTradeInfo::default_instance_ = NULL;

PBG2GLTradeInfo* PBG2GLTradeInfo::New() const {
  return new PBG2GLTradeInfo;
}

void PBG2GLTradeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tradeid_ = 0u;
    playerid_ = 0u;
    logicworldid_ = 0u;
    mygetsliver_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mygivesliver_ = GOOGLE_ULONGLONG(0);
  }
  myitem_.Clear();
  mymoney_.Clear();
  taritem_.Clear();
  tarmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLTradeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tradeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradeid_)));
          set_has_tradeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logicworldid;
        break;
      }
      
      // optional uint32 logicworldid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicworldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicworldid_)));
          set_has_logicworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_myitem;
        break;
      }
      
      // repeated .PBItem myitem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_myitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_myitem;
        if (input->ExpectTag(42)) goto parse_mymoney;
        break;
      }
      
      // repeated .PBMoney mymoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mymoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mymoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mymoney;
        if (input->ExpectTag(50)) goto parse_taritem;
        break;
      }
      
      // repeated .PBItem taritem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taritem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taritem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_taritem;
        if (input->ExpectTag(58)) goto parse_tarmoney;
        break;
      }
      
      // repeated .PBMoney tarmoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tarmoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tarmoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tarmoney;
        if (input->ExpectTag(64)) goto parse_mygetsliver;
        break;
      }
      
      // optional uint64 mygetsliver = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mygetsliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mygetsliver_)));
          set_has_mygetsliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mygivesliver;
        break;
      }
      
      // optional uint64 mygivesliver = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mygivesliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mygivesliver_)));
          set_has_mygivesliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLTradeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tradeid = 1;
  if (has_tradeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tradeid(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 logicworldid = 3;
  if (has_logicworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->logicworldid(), output);
  }
  
  // repeated .PBItem myitem = 4;
  for (int i = 0; i < this->myitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->myitem(i), output);
  }
  
  // repeated .PBMoney mymoney = 5;
  for (int i = 0; i < this->mymoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mymoney(i), output);
  }
  
  // repeated .PBItem taritem = 6;
  for (int i = 0; i < this->taritem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->taritem(i), output);
  }
  
  // repeated .PBMoney tarmoney = 7;
  for (int i = 0; i < this->tarmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tarmoney(i), output);
  }
  
  // optional uint64 mygetsliver = 8;
  if (has_mygetsliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->mygetsliver(), output);
  }
  
  // optional uint64 mygivesliver = 9;
  if (has_mygivesliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->mygivesliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLTradeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tradeid = 1;
  if (has_tradeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tradeid(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 logicworldid = 3;
  if (has_logicworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->logicworldid(), target);
  }
  
  // repeated .PBItem myitem = 4;
  for (int i = 0; i < this->myitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->myitem(i), target);
  }
  
  // repeated .PBMoney mymoney = 5;
  for (int i = 0; i < this->mymoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mymoney(i), target);
  }
  
  // repeated .PBItem taritem = 6;
  for (int i = 0; i < this->taritem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->taritem(i), target);
  }
  
  // repeated .PBMoney tarmoney = 7;
  for (int i = 0; i < this->tarmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tarmoney(i), target);
  }
  
  // optional uint64 mygetsliver = 8;
  if (has_mygetsliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->mygetsliver(), target);
  }
  
  // optional uint64 mygivesliver = 9;
  if (has_mygivesliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->mygivesliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLTradeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tradeid = 1;
    if (has_tradeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradeid());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 logicworldid = 3;
    if (has_logicworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicworldid());
    }
    
    // optional uint64 mygetsliver = 8;
    if (has_mygetsliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mygetsliver());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 mygivesliver = 9;
    if (has_mygivesliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mygivesliver());
    }
    
  }
  // repeated .PBItem myitem = 4;
  total_size += 1 * this->myitem_size();
  for (int i = 0; i < this->myitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->myitem(i));
  }
  
  // repeated .PBMoney mymoney = 5;
  total_size += 1 * this->mymoney_size();
  for (int i = 0; i < this->mymoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mymoney(i));
  }
  
  // repeated .PBItem taritem = 6;
  total_size += 1 * this->taritem_size();
  for (int i = 0; i < this->taritem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taritem(i));
  }
  
  // repeated .PBMoney tarmoney = 7;
  total_size += 1 * this->tarmoney_size();
  for (int i = 0; i < this->tarmoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tarmoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLTradeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLTradeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLTradeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLTradeInfo::MergeFrom(const PBG2GLTradeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  myitem_.MergeFrom(from.myitem_);
  mymoney_.MergeFrom(from.mymoney_);
  taritem_.MergeFrom(from.taritem_);
  tarmoney_.MergeFrom(from.tarmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tradeid()) {
      set_tradeid(from.tradeid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_logicworldid()) {
      set_logicworldid(from.logicworldid());
    }
    if (from.has_mygetsliver()) {
      set_mygetsliver(from.mygetsliver());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mygivesliver()) {
      set_mygivesliver(from.mygivesliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLTradeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLTradeInfo::CopyFrom(const PBG2GLTradeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLTradeInfo::IsInitialized() const {
  
  return true;
}

void PBG2GLTradeInfo::Swap(PBG2GLTradeInfo* other) {
  if (other != this) {
    std::swap(tradeid_, other->tradeid_);
    std::swap(playerid_, other->playerid_);
    std::swap(logicworldid_, other->logicworldid_);
    myitem_.Swap(&other->myitem_);
    mymoney_.Swap(&other->mymoney_);
    taritem_.Swap(&other->taritem_);
    tarmoney_.Swap(&other->tarmoney_);
    std::swap(mygetsliver_, other->mygetsliver_);
    std::swap(mygivesliver_, other->mygivesliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLTradeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLTradeInfo_descriptor_;
  metadata.reflection = PBG2GLTradeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGLAGFindPlayer::kSourceidFieldNumber;
const int PBGLAGFindPlayer::kWorldidFieldNumber;
const int PBGLAGFindPlayer::kTargetidFieldNumber;
#endif  // !_MSC_VER

PBGLAGFindPlayer::PBGLAGFindPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGLAGFindPlayer::InitAsDefaultInstance() {
}

PBGLAGFindPlayer::PBGLAGFindPlayer(const PBGLAGFindPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGLAGFindPlayer::SharedCtor() {
  _cached_size_ = 0;
  sourceid_ = 0u;
  worldid_ = 0u;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGLAGFindPlayer::~PBGLAGFindPlayer() {
  SharedDtor();
}

void PBGLAGFindPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGLAGFindPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGLAGFindPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGLAGFindPlayer_descriptor_;
}

const PBGLAGFindPlayer& PBGLAGFindPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGLAGFindPlayer* PBGLAGFindPlayer::default_instance_ = NULL;

PBGLAGFindPlayer* PBGLAGFindPlayer::New() const {
  return new PBGLAGFindPlayer;
}

void PBGLAGFindPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourceid_ = 0u;
    worldid_ = 0u;
    targetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGLAGFindPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sourceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_worldid;
        break;
      }
      
      // optional uint32 worldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGLAGFindPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sourceid = 1;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sourceid(), output);
  }
  
  // optional uint32 worldid = 2;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->worldid(), output);
  }
  
  // optional uint32 targetid = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->targetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGLAGFindPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sourceid = 1;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sourceid(), target);
  }
  
  // optional uint32 worldid = 2;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->worldid(), target);
  }
  
  // optional uint32 targetid = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->targetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGLAGFindPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sourceid = 1;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }
    
    // optional uint32 worldid = 2;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 targetid = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGLAGFindPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGLAGFindPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGLAGFindPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGLAGFindPlayer::MergeFrom(const PBGLAGFindPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGLAGFindPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGLAGFindPlayer::CopyFrom(const PBGLAGFindPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGLAGFindPlayer::IsInitialized() const {
  
  return true;
}

void PBGLAGFindPlayer::Swap(PBGLAGFindPlayer* other) {
  if (other != this) {
    std::swap(sourceid_, other->sourceid_);
    std::swap(worldid_, other->worldid_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGLAGFindPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGLAGFindPlayer_descriptor_;
  metadata.reflection = PBGLAGFindPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGLAGFindPlayerAck::kSourceidFieldNumber;
const int PBGLAGFindPlayerAck::kTargetidFieldNumber;
const int PBGLAGFindPlayerAck::kPbViewFieldNumber;
#endif  // !_MSC_VER

PBGLAGFindPlayerAck::PBGLAGFindPlayerAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGLAGFindPlayerAck::InitAsDefaultInstance() {
  pbview_ = const_cast< ::PBPlayerView*>(&::PBPlayerView::default_instance());
}

PBGLAGFindPlayerAck::PBGLAGFindPlayerAck(const PBGLAGFindPlayerAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGLAGFindPlayerAck::SharedCtor() {
  _cached_size_ = 0;
  sourceid_ = 0u;
  targetid_ = 0u;
  pbview_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGLAGFindPlayerAck::~PBGLAGFindPlayerAck() {
  SharedDtor();
}

void PBGLAGFindPlayerAck::SharedDtor() {
  if (this != default_instance_) {
    delete pbview_;
  }
}

void PBGLAGFindPlayerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGLAGFindPlayerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGLAGFindPlayerAck_descriptor_;
}

const PBGLAGFindPlayerAck& PBGLAGFindPlayerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGLAGFindPlayerAck* PBGLAGFindPlayerAck::default_instance_ = NULL;

PBGLAGFindPlayerAck* PBGLAGFindPlayerAck::New() const {
  return new PBGLAGFindPlayerAck;
}

void PBGLAGFindPlayerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourceid_ = 0u;
    targetid_ = 0u;
    if (has_pbview()) {
      if (pbview_ != NULL) pbview_->::PBPlayerView::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGLAGFindPlayerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sourceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbView;
        break;
      }
      
      // optional .PBPlayerView pbView = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbView:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbview()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGLAGFindPlayerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sourceid = 1;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sourceid(), output);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetid(), output);
  }
  
  // optional .PBPlayerView pbView = 3;
  if (has_pbview()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pbview(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGLAGFindPlayerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sourceid = 1;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sourceid(), target);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetid(), target);
  }
  
  // optional .PBPlayerView pbView = 3;
  if (has_pbview()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pbview(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGLAGFindPlayerAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sourceid = 1;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }
    
    // optional uint32 targetid = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
    // optional .PBPlayerView pbView = 3;
    if (has_pbview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbview());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGLAGFindPlayerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGLAGFindPlayerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGLAGFindPlayerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGLAGFindPlayerAck::MergeFrom(const PBGLAGFindPlayerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_pbview()) {
      mutable_pbview()->::PBPlayerView::MergeFrom(from.pbview());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGLAGFindPlayerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGLAGFindPlayerAck::CopyFrom(const PBGLAGFindPlayerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGLAGFindPlayerAck::IsInitialized() const {
  
  return true;
}

void PBGLAGFindPlayerAck::Swap(PBGLAGFindPlayerAck* other) {
  if (other != this) {
    std::swap(sourceid_, other->sourceid_);
    std::swap(targetid_, other->targetid_);
    std::swap(pbview_, other->pbview_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGLAGFindPlayerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGLAGFindPlayerAck_descriptor_;
  metadata.reflection = PBGLAGFindPlayerAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGL2GSaleMoneyFail::kPlayeridFieldNumber;
const int PBGL2GSaleMoneyFail::kLogicworldidFieldNumber;
const int PBGL2GSaleMoneyFail::kTypeFieldNumber;
const int PBGL2GSaleMoneyFail::kCashFieldNumber;
const int PBGL2GSaleMoneyFail::kSliverFieldNumber;
#endif  // !_MSC_VER

PBGL2GSaleMoneyFail::PBGL2GSaleMoneyFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGL2GSaleMoneyFail::InitAsDefaultInstance() {
}

PBGL2GSaleMoneyFail::PBGL2GSaleMoneyFail(const PBGL2GSaleMoneyFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGL2GSaleMoneyFail::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  logicworldid_ = 0u;
  type_ = 0u;
  cash_ = 0u;
  sliver_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGL2GSaleMoneyFail::~PBGL2GSaleMoneyFail() {
  SharedDtor();
}

void PBGL2GSaleMoneyFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGL2GSaleMoneyFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGL2GSaleMoneyFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGL2GSaleMoneyFail_descriptor_;
}

const PBGL2GSaleMoneyFail& PBGL2GSaleMoneyFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGL2GSaleMoneyFail* PBGL2GSaleMoneyFail::default_instance_ = NULL;

PBGL2GSaleMoneyFail* PBGL2GSaleMoneyFail::New() const {
  return new PBGL2GSaleMoneyFail;
}

void PBGL2GSaleMoneyFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    logicworldid_ = 0u;
    type_ = 0u;
    cash_ = 0u;
    sliver_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGL2GSaleMoneyFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logicworldid;
        break;
      }
      
      // optional uint32 logicworldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicworldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicworldid_)));
          set_has_logicworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cash;
        break;
      }
      
      // optional uint32 cash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sliver;
        break;
      }
      
      // optional uint64 sliver = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGL2GSaleMoneyFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logicworldid(), output);
  }
  
  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // optional uint32 cash = 4;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cash(), output);
  }
  
  // optional uint64 sliver = 5;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGL2GSaleMoneyFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logicworldid(), target);
  }
  
  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // optional uint32 cash = 4;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cash(), target);
  }
  
  // optional uint64 sliver = 5;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGL2GSaleMoneyFail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 logicworldid = 2;
    if (has_logicworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicworldid());
    }
    
    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 cash = 4;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
    // optional uint64 sliver = 5;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGL2GSaleMoneyFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGL2GSaleMoneyFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGL2GSaleMoneyFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGL2GSaleMoneyFail::MergeFrom(const PBGL2GSaleMoneyFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_logicworldid()) {
      set_logicworldid(from.logicworldid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGL2GSaleMoneyFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGL2GSaleMoneyFail::CopyFrom(const PBGL2GSaleMoneyFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGL2GSaleMoneyFail::IsInitialized() const {
  
  return true;
}

void PBGL2GSaleMoneyFail::Swap(PBGL2GSaleMoneyFail* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(logicworldid_, other->logicworldid_);
    std::swap(type_, other->type_);
    std::swap(cash_, other->cash_);
    std::swap(sliver_, other->sliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGL2GSaleMoneyFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGL2GSaleMoneyFail_descriptor_;
  metadata.reflection = PBGL2GSaleMoneyFail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGL2GSaleMoneyCancel::kPlayeridFieldNumber;
const int PBGL2GSaleMoneyCancel::kLogicworldidFieldNumber;
const int PBGL2GSaleMoneyCancel::kTypeFieldNumber;
const int PBGL2GSaleMoneyCancel::kCashFieldNumber;
const int PBGL2GSaleMoneyCancel::kSliverFieldNumber;
#endif  // !_MSC_VER

PBGL2GSaleMoneyCancel::PBGL2GSaleMoneyCancel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGL2GSaleMoneyCancel::InitAsDefaultInstance() {
}

PBGL2GSaleMoneyCancel::PBGL2GSaleMoneyCancel(const PBGL2GSaleMoneyCancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGL2GSaleMoneyCancel::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  logicworldid_ = 0u;
  type_ = 0u;
  cash_ = 0u;
  sliver_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGL2GSaleMoneyCancel::~PBGL2GSaleMoneyCancel() {
  SharedDtor();
}

void PBGL2GSaleMoneyCancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGL2GSaleMoneyCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGL2GSaleMoneyCancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGL2GSaleMoneyCancel_descriptor_;
}

const PBGL2GSaleMoneyCancel& PBGL2GSaleMoneyCancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGL2GSaleMoneyCancel* PBGL2GSaleMoneyCancel::default_instance_ = NULL;

PBGL2GSaleMoneyCancel* PBGL2GSaleMoneyCancel::New() const {
  return new PBGL2GSaleMoneyCancel;
}

void PBGL2GSaleMoneyCancel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    logicworldid_ = 0u;
    type_ = 0u;
    cash_ = 0u;
    sliver_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGL2GSaleMoneyCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logicworldid;
        break;
      }
      
      // optional uint32 logicworldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicworldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicworldid_)));
          set_has_logicworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cash;
        break;
      }
      
      // optional uint32 cash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sliver;
        break;
      }
      
      // optional uint64 sliver = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGL2GSaleMoneyCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logicworldid(), output);
  }
  
  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // optional uint32 cash = 4;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cash(), output);
  }
  
  // optional uint64 sliver = 5;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGL2GSaleMoneyCancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logicworldid(), target);
  }
  
  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // optional uint32 cash = 4;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cash(), target);
  }
  
  // optional uint64 sliver = 5;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGL2GSaleMoneyCancel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 logicworldid = 2;
    if (has_logicworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicworldid());
    }
    
    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 cash = 4;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
    // optional uint64 sliver = 5;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGL2GSaleMoneyCancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGL2GSaleMoneyCancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGL2GSaleMoneyCancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGL2GSaleMoneyCancel::MergeFrom(const PBGL2GSaleMoneyCancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_logicworldid()) {
      set_logicworldid(from.logicworldid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGL2GSaleMoneyCancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGL2GSaleMoneyCancel::CopyFrom(const PBGL2GSaleMoneyCancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGL2GSaleMoneyCancel::IsInitialized() const {
  
  return true;
}

void PBGL2GSaleMoneyCancel::Swap(PBGL2GSaleMoneyCancel* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(logicworldid_, other->logicworldid_);
    std::swap(type_, other->type_);
    std::swap(cash_, other->cash_);
    std::swap(sliver_, other->sliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGL2GSaleMoneyCancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGL2GSaleMoneyCancel_descriptor_;
  metadata.reflection = PBGL2GSaleMoneyCancel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLSaleMoney_salecancel::kPlayeridFieldNumber;
const int PBG2GLSaleMoney_salecancel::kOrderidFieldNumber;
const int PBG2GLSaleMoney_salecancel::kCanGetCashFieldNumber;
const int PBG2GLSaleMoney_salecancel::kCanGetSliverFieldNumber;
#endif  // !_MSC_VER

PBG2GLSaleMoney_salecancel::PBG2GLSaleMoney_salecancel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLSaleMoney_salecancel::InitAsDefaultInstance() {
}

PBG2GLSaleMoney_salecancel::PBG2GLSaleMoney_salecancel(const PBG2GLSaleMoney_salecancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLSaleMoney_salecancel::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  orderid_ = GOOGLE_ULONGLONG(0);
  can_get_cash_ = GOOGLE_ULONGLONG(0);
  can_get_sliver_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLSaleMoney_salecancel::~PBG2GLSaleMoney_salecancel() {
  SharedDtor();
}

void PBG2GLSaleMoney_salecancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2GLSaleMoney_salecancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLSaleMoney_salecancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLSaleMoney_salecancel_descriptor_;
}

const PBG2GLSaleMoney_salecancel& PBG2GLSaleMoney_salecancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLSaleMoney_salecancel* PBG2GLSaleMoney_salecancel::default_instance_ = NULL;

PBG2GLSaleMoney_salecancel* PBG2GLSaleMoney_salecancel::New() const {
  return new PBG2GLSaleMoney_salecancel;
}

void PBG2GLSaleMoney_salecancel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    orderid_ = GOOGLE_ULONGLONG(0);
    can_get_cash_ = GOOGLE_ULONGLONG(0);
    can_get_sliver_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLSaleMoney_salecancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_orderid;
        break;
      }
      
      // optional uint64 orderid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_can_get_cash;
        break;
      }
      
      // optional uint64 can_get_cash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_get_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &can_get_cash_)));
          set_has_can_get_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_can_get_sliver;
        break;
      }
      
      // optional uint64 can_get_sliver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_get_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &can_get_sliver_)));
          set_has_can_get_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLSaleMoney_salecancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint64 orderid = 2;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->orderid(), output);
  }
  
  // optional uint64 can_get_cash = 3;
  if (has_can_get_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->can_get_cash(), output);
  }
  
  // optional uint64 can_get_sliver = 4;
  if (has_can_get_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->can_get_sliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLSaleMoney_salecancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint64 orderid = 2;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->orderid(), target);
  }
  
  // optional uint64 can_get_cash = 3;
  if (has_can_get_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->can_get_cash(), target);
  }
  
  // optional uint64 can_get_sliver = 4;
  if (has_can_get_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->can_get_sliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLSaleMoney_salecancel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint64 orderid = 2;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->orderid());
    }
    
    // optional uint64 can_get_cash = 3;
    if (has_can_get_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->can_get_cash());
    }
    
    // optional uint64 can_get_sliver = 4;
    if (has_can_get_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->can_get_sliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLSaleMoney_salecancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLSaleMoney_salecancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLSaleMoney_salecancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLSaleMoney_salecancel::MergeFrom(const PBG2GLSaleMoney_salecancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_can_get_cash()) {
      set_can_get_cash(from.can_get_cash());
    }
    if (from.has_can_get_sliver()) {
      set_can_get_sliver(from.can_get_sliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLSaleMoney_salecancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLSaleMoney_salecancel::CopyFrom(const PBG2GLSaleMoney_salecancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLSaleMoney_salecancel::IsInitialized() const {
  
  return true;
}

void PBG2GLSaleMoney_salecancel::Swap(PBG2GLSaleMoney_salecancel* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(orderid_, other->orderid_);
    std::swap(can_get_cash_, other->can_get_cash_);
    std::swap(can_get_sliver_, other->can_get_sliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLSaleMoney_salecancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLSaleMoney_salecancel_descriptor_;
  metadata.reflection = PBG2GLSaleMoney_salecancel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGL2GAuctionSaleFail::kPlayeridFieldNumber;
const int PBGL2GAuctionSaleFail::kLogicworldidFieldNumber;
const int PBGL2GAuctionSaleFail::kItemFieldNumber;
const int PBGL2GAuctionSaleFail::kSliverFieldNumber;
#endif  // !_MSC_VER

PBGL2GAuctionSaleFail::PBGL2GAuctionSaleFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGL2GAuctionSaleFail::InitAsDefaultInstance() {
  item_ = const_cast< ::PBItem*>(&::PBItem::default_instance());
}

PBGL2GAuctionSaleFail::PBGL2GAuctionSaleFail(const PBGL2GAuctionSaleFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGL2GAuctionSaleFail::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  logicworldid_ = 0u;
  item_ = NULL;
  sliver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGL2GAuctionSaleFail::~PBGL2GAuctionSaleFail() {
  SharedDtor();
}

void PBGL2GAuctionSaleFail::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void PBGL2GAuctionSaleFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGL2GAuctionSaleFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGL2GAuctionSaleFail_descriptor_;
}

const PBGL2GAuctionSaleFail& PBGL2GAuctionSaleFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGL2GAuctionSaleFail* PBGL2GAuctionSaleFail::default_instance_ = NULL;

PBGL2GAuctionSaleFail* PBGL2GAuctionSaleFail::New() const {
  return new PBGL2GAuctionSaleFail;
}

void PBGL2GAuctionSaleFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    logicworldid_ = 0u;
    if (has_item()) {
      if (item_ != NULL) item_->::PBItem::Clear();
    }
    sliver_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGL2GAuctionSaleFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logicworldid;
        break;
      }
      
      // optional uint32 logicworldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicworldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicworldid_)));
          set_has_logicworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }
      
      // optional .PBItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sliver;
        break;
      }
      
      // optional uint32 sliver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGL2GAuctionSaleFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logicworldid(), output);
  }
  
  // optional .PBItem item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }
  
  // optional uint32 sliver = 4;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGL2GAuctionSaleFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logicworldid(), target);
  }
  
  // optional .PBItem item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }
  
  // optional uint32 sliver = 4;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGL2GAuctionSaleFail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 logicworldid = 2;
    if (has_logicworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicworldid());
    }
    
    // optional .PBItem item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
    // optional uint32 sliver = 4;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGL2GAuctionSaleFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGL2GAuctionSaleFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGL2GAuctionSaleFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGL2GAuctionSaleFail::MergeFrom(const PBGL2GAuctionSaleFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_logicworldid()) {
      set_logicworldid(from.logicworldid());
    }
    if (from.has_item()) {
      mutable_item()->::PBItem::MergeFrom(from.item());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGL2GAuctionSaleFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGL2GAuctionSaleFail::CopyFrom(const PBGL2GAuctionSaleFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGL2GAuctionSaleFail::IsInitialized() const {
  
  return true;
}

void PBGL2GAuctionSaleFail::Swap(PBGL2GAuctionSaleFail* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(logicworldid_, other->logicworldid_);
    std::swap(item_, other->item_);
    std::swap(sliver_, other->sliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGL2GAuctionSaleFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGL2GAuctionSaleFail_descriptor_;
  metadata.reflection = PBGL2GAuctionSaleFail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGL2GAuctionSaleCancel::kPlayeridFieldNumber;
const int PBGL2GAuctionSaleCancel::kLogicworldidFieldNumber;
const int PBGL2GAuctionSaleCancel::kItemFieldNumber;
#endif  // !_MSC_VER

PBGL2GAuctionSaleCancel::PBGL2GAuctionSaleCancel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGL2GAuctionSaleCancel::InitAsDefaultInstance() {
  item_ = const_cast< ::PBItem*>(&::PBItem::default_instance());
}

PBGL2GAuctionSaleCancel::PBGL2GAuctionSaleCancel(const PBGL2GAuctionSaleCancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGL2GAuctionSaleCancel::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  logicworldid_ = 0u;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGL2GAuctionSaleCancel::~PBGL2GAuctionSaleCancel() {
  SharedDtor();
}

void PBGL2GAuctionSaleCancel::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void PBGL2GAuctionSaleCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGL2GAuctionSaleCancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGL2GAuctionSaleCancel_descriptor_;
}

const PBGL2GAuctionSaleCancel& PBGL2GAuctionSaleCancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGL2GAuctionSaleCancel* PBGL2GAuctionSaleCancel::default_instance_ = NULL;

PBGL2GAuctionSaleCancel* PBGL2GAuctionSaleCancel::New() const {
  return new PBGL2GAuctionSaleCancel;
}

void PBGL2GAuctionSaleCancel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    logicworldid_ = 0u;
    if (has_item()) {
      if (item_ != NULL) item_->::PBItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGL2GAuctionSaleCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logicworldid;
        break;
      }
      
      // optional uint32 logicworldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicworldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicworldid_)));
          set_has_logicworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }
      
      // optional .PBItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGL2GAuctionSaleCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logicworldid(), output);
  }
  
  // optional .PBItem item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGL2GAuctionSaleCancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logicworldid(), target);
  }
  
  // optional .PBItem item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGL2GAuctionSaleCancel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 logicworldid = 2;
    if (has_logicworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicworldid());
    }
    
    // optional .PBItem item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGL2GAuctionSaleCancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGL2GAuctionSaleCancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGL2GAuctionSaleCancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGL2GAuctionSaleCancel::MergeFrom(const PBGL2GAuctionSaleCancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_logicworldid()) {
      set_logicworldid(from.logicworldid());
    }
    if (from.has_item()) {
      mutable_item()->::PBItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGL2GAuctionSaleCancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGL2GAuctionSaleCancel::CopyFrom(const PBGL2GAuctionSaleCancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGL2GAuctionSaleCancel::IsInitialized() const {
  
  return true;
}

void PBGL2GAuctionSaleCancel::Swap(PBGL2GAuctionSaleCancel* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(logicworldid_, other->logicworldid_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGL2GAuctionSaleCancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGL2GAuctionSaleCancel_descriptor_;
  metadata.reflection = PBGL2GAuctionSaleCancel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGL2GAuctionBuyFail::kPlayeridFieldNumber;
const int PBGL2GAuctionBuyFail::kLogicworldidFieldNumber;
const int PBGL2GAuctionBuyFail::kSliverFieldNumber;
#endif  // !_MSC_VER

PBGL2GAuctionBuyFail::PBGL2GAuctionBuyFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGL2GAuctionBuyFail::InitAsDefaultInstance() {
}

PBGL2GAuctionBuyFail::PBGL2GAuctionBuyFail(const PBGL2GAuctionBuyFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGL2GAuctionBuyFail::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  logicworldid_ = 0u;
  sliver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGL2GAuctionBuyFail::~PBGL2GAuctionBuyFail() {
  SharedDtor();
}

void PBGL2GAuctionBuyFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGL2GAuctionBuyFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGL2GAuctionBuyFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGL2GAuctionBuyFail_descriptor_;
}

const PBGL2GAuctionBuyFail& PBGL2GAuctionBuyFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGL2GAuctionBuyFail* PBGL2GAuctionBuyFail::default_instance_ = NULL;

PBGL2GAuctionBuyFail* PBGL2GAuctionBuyFail::New() const {
  return new PBGL2GAuctionBuyFail;
}

void PBGL2GAuctionBuyFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    logicworldid_ = 0u;
    sliver_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGL2GAuctionBuyFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logicworldid;
        break;
      }
      
      // optional uint32 logicworldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicworldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicworldid_)));
          set_has_logicworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sliver;
        break;
      }
      
      // optional uint32 sliver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGL2GAuctionBuyFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logicworldid(), output);
  }
  
  // optional uint32 sliver = 3;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGL2GAuctionBuyFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logicworldid(), target);
  }
  
  // optional uint32 sliver = 3;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGL2GAuctionBuyFail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 logicworldid = 2;
    if (has_logicworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicworldid());
    }
    
    // optional uint32 sliver = 3;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGL2GAuctionBuyFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGL2GAuctionBuyFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGL2GAuctionBuyFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGL2GAuctionBuyFail::MergeFrom(const PBGL2GAuctionBuyFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_logicworldid()) {
      set_logicworldid(from.logicworldid());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGL2GAuctionBuyFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGL2GAuctionBuyFail::CopyFrom(const PBGL2GAuctionBuyFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGL2GAuctionBuyFail::IsInitialized() const {
  
  return true;
}

void PBGL2GAuctionBuyFail::Swap(PBGL2GAuctionBuyFail* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(logicworldid_, other->logicworldid_);
    std::swap(sliver_, other->sliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGL2GAuctionBuyFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGL2GAuctionBuyFail_descriptor_;
  metadata.reflection = PBGL2GAuctionBuyFail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLAuction_sale::kItemFieldNumber;
const int PBG2GLAuction_sale::kUnitSliverFieldNumber;
const int PBG2GLAuction_sale::kTaxSliverFieldNumber;
#endif  // !_MSC_VER

PBG2GLAuction_sale::PBG2GLAuction_sale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLAuction_sale::InitAsDefaultInstance() {
  item_ = const_cast< ::PBItem*>(&::PBItem::default_instance());
}

PBG2GLAuction_sale::PBG2GLAuction_sale(const PBG2GLAuction_sale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLAuction_sale::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  unitsliver_ = 0u;
  taxsliver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLAuction_sale::~PBG2GLAuction_sale() {
  SharedDtor();
}

void PBG2GLAuction_sale::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void PBG2GLAuction_sale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLAuction_sale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLAuction_sale_descriptor_;
}

const PBG2GLAuction_sale& PBG2GLAuction_sale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLAuction_sale* PBG2GLAuction_sale::default_instance_ = NULL;

PBG2GLAuction_sale* PBG2GLAuction_sale::New() const {
  return new PBG2GLAuction_sale;
}

void PBG2GLAuction_sale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::PBItem::Clear();
    }
    unitsliver_ = 0u;
    taxsliver_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLAuction_sale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitSliver;
        break;
      }
      
      // optional uint32 unitSliver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitSliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitsliver_)));
          set_has_unitsliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taxSliver;
        break;
      }
      
      // optional uint32 taxSliver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taxSliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taxsliver_)));
          set_has_taxsliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLAuction_sale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }
  
  // optional uint32 unitSliver = 2;
  if (has_unitsliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unitsliver(), output);
  }
  
  // optional uint32 taxSliver = 3;
  if (has_taxsliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->taxsliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLAuction_sale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }
  
  // optional uint32 unitSliver = 2;
  if (has_unitsliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unitsliver(), target);
  }
  
  // optional uint32 taxSliver = 3;
  if (has_taxsliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->taxsliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLAuction_sale::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItem item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
    // optional uint32 unitSliver = 2;
    if (has_unitsliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitsliver());
    }
    
    // optional uint32 taxSliver = 3;
    if (has_taxsliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taxsliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLAuction_sale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLAuction_sale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLAuction_sale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLAuction_sale::MergeFrom(const PBG2GLAuction_sale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::PBItem::MergeFrom(from.item());
    }
    if (from.has_unitsliver()) {
      set_unitsliver(from.unitsliver());
    }
    if (from.has_taxsliver()) {
      set_taxsliver(from.taxsliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLAuction_sale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLAuction_sale::CopyFrom(const PBG2GLAuction_sale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLAuction_sale::IsInitialized() const {
  
  return true;
}

void PBG2GLAuction_sale::Swap(PBG2GLAuction_sale* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(unitsliver_, other->unitsliver_);
    std::swap(taxsliver_, other->taxsliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLAuction_sale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLAuction_sale_descriptor_;
  metadata.reflection = PBG2GLAuction_sale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLFriend_AddAsk::kApplyerFieldNumber;
const int PBG2GLFriend_AddAsk::kFithgpowerFieldNumber;
const int PBG2GLFriend_AddAsk::kTypeFieldNumber;
const int PBG2GLFriend_AddAsk::kTargetidFieldNumber;
#endif  // !_MSC_VER

PBG2GLFriend_AddAsk::PBG2GLFriend_AddAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLFriend_AddAsk::InitAsDefaultInstance() {
  applyer_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2GLFriend_AddAsk::PBG2GLFriend_AddAsk(const PBG2GLFriend_AddAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLFriend_AddAsk::SharedCtor() {
  _cached_size_ = 0;
  applyer_ = NULL;
  fithgpower_ = 0u;
  type_ = 0u;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLFriend_AddAsk::~PBG2GLFriend_AddAsk() {
  SharedDtor();
}

void PBG2GLFriend_AddAsk::SharedDtor() {
  if (this != default_instance_) {
    delete applyer_;
  }
}

void PBG2GLFriend_AddAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLFriend_AddAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLFriend_AddAsk_descriptor_;
}

const PBG2GLFriend_AddAsk& PBG2GLFriend_AddAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLFriend_AddAsk* PBG2GLFriend_AddAsk::default_instance_ = NULL;

PBG2GLFriend_AddAsk* PBG2GLFriend_AddAsk::New() const {
  return new PBG2GLFriend_AddAsk;
}

void PBG2GLFriend_AddAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_applyer()) {
      if (applyer_ != NULL) applyer_->::PBPlayerDisplay::Clear();
    }
    fithgpower_ = 0u;
    type_ = 0u;
    targetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLFriend_AddAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay applyer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_applyer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fithgpower;
        break;
      }
      
      // optional uint32 fithgpower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fithgpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fithgpower_)));
          set_has_fithgpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLFriend_AddAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay applyer = 1;
  if (has_applyer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applyer(), output);
  }
  
  // optional uint32 fithgpower = 2;
  if (has_fithgpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fithgpower(), output);
  }
  
  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // optional uint32 targetid = 4;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->targetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLFriend_AddAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay applyer = 1;
  if (has_applyer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applyer(), target);
  }
  
  // optional uint32 fithgpower = 2;
  if (has_fithgpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fithgpower(), target);
  }
  
  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // optional uint32 targetid = 4;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->targetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLFriend_AddAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay applyer = 1;
    if (has_applyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->applyer());
    }
    
    // optional uint32 fithgpower = 2;
    if (has_fithgpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fithgpower());
    }
    
    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 targetid = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLFriend_AddAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLFriend_AddAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLFriend_AddAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLFriend_AddAsk::MergeFrom(const PBG2GLFriend_AddAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applyer()) {
      mutable_applyer()->::PBPlayerDisplay::MergeFrom(from.applyer());
    }
    if (from.has_fithgpower()) {
      set_fithgpower(from.fithgpower());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLFriend_AddAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLFriend_AddAsk::CopyFrom(const PBG2GLFriend_AddAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLFriend_AddAsk::IsInitialized() const {
  
  return true;
}

void PBG2GLFriend_AddAsk::Swap(PBG2GLFriend_AddAsk* other) {
  if (other != this) {
    std::swap(applyer_, other->applyer_);
    std::swap(fithgpower_, other->fithgpower_);
    std::swap(type_, other->type_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLFriend_AddAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLFriend_AddAsk_descriptor_;
  metadata.reflection = PBG2GLFriend_AddAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLFriend_Answer::kAckplayerFieldNumber;
const int PBG2GLFriend_Answer::kTypeFieldNumber;
const int PBG2GLFriend_Answer::kApplyeridFieldNumber;
#endif  // !_MSC_VER

PBG2GLFriend_Answer::PBG2GLFriend_Answer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLFriend_Answer::InitAsDefaultInstance() {
  ackplayer_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2GLFriend_Answer::PBG2GLFriend_Answer(const PBG2GLFriend_Answer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLFriend_Answer::SharedCtor() {
  _cached_size_ = 0;
  ackplayer_ = NULL;
  type_ = 0u;
  applyerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLFriend_Answer::~PBG2GLFriend_Answer() {
  SharedDtor();
}

void PBG2GLFriend_Answer::SharedDtor() {
  if (this != default_instance_) {
    delete ackplayer_;
  }
}

void PBG2GLFriend_Answer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLFriend_Answer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLFriend_Answer_descriptor_;
}

const PBG2GLFriend_Answer& PBG2GLFriend_Answer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLFriend_Answer* PBG2GLFriend_Answer::default_instance_ = NULL;

PBG2GLFriend_Answer* PBG2GLFriend_Answer::New() const {
  return new PBG2GLFriend_Answer;
}

void PBG2GLFriend_Answer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ackplayer()) {
      if (ackplayer_ != NULL) ackplayer_->::PBPlayerDisplay::Clear();
    }
    type_ = 0u;
    applyerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLFriend_Answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay ackplayer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ackplayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_applyerid;
        break;
      }
      
      // optional uint32 applyerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applyerid_)));
          set_has_applyerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLFriend_Answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay ackplayer = 1;
  if (has_ackplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ackplayer(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 applyerid = 3;
  if (has_applyerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->applyerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLFriend_Answer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay ackplayer = 1;
  if (has_ackplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ackplayer(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 applyerid = 3;
  if (has_applyerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->applyerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLFriend_Answer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay ackplayer = 1;
    if (has_ackplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ackplayer());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 applyerid = 3;
    if (has_applyerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applyerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLFriend_Answer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLFriend_Answer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLFriend_Answer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLFriend_Answer::MergeFrom(const PBG2GLFriend_Answer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ackplayer()) {
      mutable_ackplayer()->::PBPlayerDisplay::MergeFrom(from.ackplayer());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_applyerid()) {
      set_applyerid(from.applyerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLFriend_Answer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLFriend_Answer::CopyFrom(const PBG2GLFriend_Answer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLFriend_Answer::IsInitialized() const {
  
  return true;
}

void PBG2GLFriend_Answer::Swap(PBG2GLFriend_Answer* other) {
  if (other != this) {
    std::swap(ackplayer_, other->ackplayer_);
    std::swap(type_, other->type_);
    std::swap(applyerid_, other->applyerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLFriend_Answer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLFriend_Answer_descriptor_;
  metadata.reflection = PBG2GLFriend_Answer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLFriend_Find::kPlayeridFieldNumber;
const int PBG2GLFriend_Find::kNameFieldNumber;
#endif  // !_MSC_VER

PBG2GLFriend_Find::PBG2GLFriend_Find()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLFriend_Find::InitAsDefaultInstance() {
}

PBG2GLFriend_Find::PBG2GLFriend_Find(const PBG2GLFriend_Find& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLFriend_Find::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLFriend_Find::~PBG2GLFriend_Find() {
  SharedDtor();
}

void PBG2GLFriend_Find::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBG2GLFriend_Find::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLFriend_Find::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLFriend_Find_descriptor_;
}

const PBG2GLFriend_Find& PBG2GLFriend_Find::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLFriend_Find* PBG2GLFriend_Find::default_instance_ = NULL;

PBG2GLFriend_Find* PBG2GLFriend_Find::New() const {
  return new PBG2GLFriend_Find;
}

void PBG2GLFriend_Find::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLFriend_Find::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLFriend_Find::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLFriend_Find::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLFriend_Find::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLFriend_Find::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLFriend_Find* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLFriend_Find*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLFriend_Find::MergeFrom(const PBG2GLFriend_Find& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLFriend_Find::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLFriend_Find::CopyFrom(const PBG2GLFriend_Find& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLFriend_Find::IsInitialized() const {
  
  return true;
}

void PBG2GLFriend_Find::Swap(PBG2GLFriend_Find* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLFriend_Find::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLFriend_Find_descriptor_;
  metadata.reflection = PBG2GLFriend_Find_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLFriend_Info::kTypeFieldNumber;
const int PBG2GLFriend_Info::kFriendidFieldNumber;
#endif  // !_MSC_VER

PBG2GLFriend_Info::PBG2GLFriend_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLFriend_Info::InitAsDefaultInstance() {
}

PBG2GLFriend_Info::PBG2GLFriend_Info(const PBG2GLFriend_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLFriend_Info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  friendid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLFriend_Info::~PBG2GLFriend_Info() {
  SharedDtor();
}

void PBG2GLFriend_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2GLFriend_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLFriend_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLFriend_Info_descriptor_;
}

const PBG2GLFriend_Info& PBG2GLFriend_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLFriend_Info* PBG2GLFriend_Info::default_instance_ = NULL;

PBG2GLFriend_Info* PBG2GLFriend_Info::New() const {
  return new PBG2GLFriend_Info;
}

void PBG2GLFriend_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    friendid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLFriend_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friendid;
        break;
      }
      
      // optional uint32 friendid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLFriend_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 friendid = 2;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->friendid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLFriend_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 friendid = 2;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->friendid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLFriend_Info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 friendid = 2;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLFriend_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLFriend_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLFriend_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLFriend_Info::MergeFrom(const PBG2GLFriend_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLFriend_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLFriend_Info::CopyFrom(const PBG2GLFriend_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLFriend_Info::IsInitialized() const {
  
  return true;
}

void PBG2GLFriend_Info::Swap(PBG2GLFriend_Info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(friendid_, other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLFriend_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLFriend_Info_descriptor_;
  metadata.reflection = PBG2GLFriend_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLFriend_Syn_ToGlobal::kPlayeridFieldNumber;
const int PBG2GLFriend_Syn_ToGlobal::kInfoFieldNumber;
#endif  // !_MSC_VER

PBG2GLFriend_Syn_ToGlobal::PBG2GLFriend_Syn_ToGlobal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLFriend_Syn_ToGlobal::InitAsDefaultInstance() {
}

PBG2GLFriend_Syn_ToGlobal::PBG2GLFriend_Syn_ToGlobal(const PBG2GLFriend_Syn_ToGlobal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLFriend_Syn_ToGlobal::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLFriend_Syn_ToGlobal::~PBG2GLFriend_Syn_ToGlobal() {
  SharedDtor();
}

void PBG2GLFriend_Syn_ToGlobal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2GLFriend_Syn_ToGlobal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLFriend_Syn_ToGlobal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLFriend_Syn_ToGlobal_descriptor_;
}

const PBG2GLFriend_Syn_ToGlobal& PBG2GLFriend_Syn_ToGlobal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLFriend_Syn_ToGlobal* PBG2GLFriend_Syn_ToGlobal::default_instance_ = NULL;

PBG2GLFriend_Syn_ToGlobal* PBG2GLFriend_Syn_ToGlobal::New() const {
  return new PBG2GLFriend_Syn_ToGlobal;
}

void PBG2GLFriend_Syn_ToGlobal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLFriend_Syn_ToGlobal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // repeated .PBG2GLFriend_Info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLFriend_Syn_ToGlobal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // repeated .PBG2GLFriend_Info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLFriend_Syn_ToGlobal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // repeated .PBG2GLFriend_Info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLFriend_Syn_ToGlobal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  // repeated .PBG2GLFriend_Info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLFriend_Syn_ToGlobal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLFriend_Syn_ToGlobal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLFriend_Syn_ToGlobal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLFriend_Syn_ToGlobal::MergeFrom(const PBG2GLFriend_Syn_ToGlobal& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLFriend_Syn_ToGlobal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLFriend_Syn_ToGlobal::CopyFrom(const PBG2GLFriend_Syn_ToGlobal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLFriend_Syn_ToGlobal::IsInitialized() const {
  
  return true;
}

void PBG2GLFriend_Syn_ToGlobal::Swap(PBG2GLFriend_Syn_ToGlobal* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLFriend_Syn_ToGlobal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLFriend_Syn_ToGlobal_descriptor_;
  metadata.reflection = PBG2GLFriend_Syn_ToGlobal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLFriend_Add_ToGlobal::kPlayeridFieldNumber;
const int PBG2GLFriend_Add_ToGlobal::kInfoFieldNumber;
#endif  // !_MSC_VER

PBG2GLFriend_Add_ToGlobal::PBG2GLFriend_Add_ToGlobal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLFriend_Add_ToGlobal::InitAsDefaultInstance() {
  info_ = const_cast< ::PBG2GLFriend_Info*>(&::PBG2GLFriend_Info::default_instance());
}

PBG2GLFriend_Add_ToGlobal::PBG2GLFriend_Add_ToGlobal(const PBG2GLFriend_Add_ToGlobal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLFriend_Add_ToGlobal::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLFriend_Add_ToGlobal::~PBG2GLFriend_Add_ToGlobal() {
  SharedDtor();
}

void PBG2GLFriend_Add_ToGlobal::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PBG2GLFriend_Add_ToGlobal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLFriend_Add_ToGlobal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLFriend_Add_ToGlobal_descriptor_;
}

const PBG2GLFriend_Add_ToGlobal& PBG2GLFriend_Add_ToGlobal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLFriend_Add_ToGlobal* PBG2GLFriend_Add_ToGlobal::default_instance_ = NULL;

PBG2GLFriend_Add_ToGlobal* PBG2GLFriend_Add_ToGlobal::New() const {
  return new PBG2GLFriend_Add_ToGlobal;
}

void PBG2GLFriend_Add_ToGlobal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::PBG2GLFriend_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLFriend_Add_ToGlobal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional .PBG2GLFriend_Info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLFriend_Add_ToGlobal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional .PBG2GLFriend_Info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLFriend_Add_ToGlobal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional .PBG2GLFriend_Info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLFriend_Add_ToGlobal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional .PBG2GLFriend_Info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLFriend_Add_ToGlobal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLFriend_Add_ToGlobal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLFriend_Add_ToGlobal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLFriend_Add_ToGlobal::MergeFrom(const PBG2GLFriend_Add_ToGlobal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_info()) {
      mutable_info()->::PBG2GLFriend_Info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLFriend_Add_ToGlobal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLFriend_Add_ToGlobal::CopyFrom(const PBG2GLFriend_Add_ToGlobal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLFriend_Add_ToGlobal::IsInitialized() const {
  
  return true;
}

void PBG2GLFriend_Add_ToGlobal::Swap(PBG2GLFriend_Add_ToGlobal* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLFriend_Add_ToGlobal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLFriend_Add_ToGlobal_descriptor_;
  metadata.reflection = PBG2GLFriend_Add_ToGlobal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLFriend_Del_ToGlobal::kPlayeridFieldNumber;
const int PBG2GLFriend_Del_ToGlobal::kInfoFieldNumber;
#endif  // !_MSC_VER

PBG2GLFriend_Del_ToGlobal::PBG2GLFriend_Del_ToGlobal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLFriend_Del_ToGlobal::InitAsDefaultInstance() {
  info_ = const_cast< ::PBG2GLFriend_Info*>(&::PBG2GLFriend_Info::default_instance());
}

PBG2GLFriend_Del_ToGlobal::PBG2GLFriend_Del_ToGlobal(const PBG2GLFriend_Del_ToGlobal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLFriend_Del_ToGlobal::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLFriend_Del_ToGlobal::~PBG2GLFriend_Del_ToGlobal() {
  SharedDtor();
}

void PBG2GLFriend_Del_ToGlobal::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PBG2GLFriend_Del_ToGlobal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLFriend_Del_ToGlobal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLFriend_Del_ToGlobal_descriptor_;
}

const PBG2GLFriend_Del_ToGlobal& PBG2GLFriend_Del_ToGlobal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLFriend_Del_ToGlobal* PBG2GLFriend_Del_ToGlobal::default_instance_ = NULL;

PBG2GLFriend_Del_ToGlobal* PBG2GLFriend_Del_ToGlobal::New() const {
  return new PBG2GLFriend_Del_ToGlobal;
}

void PBG2GLFriend_Del_ToGlobal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::PBG2GLFriend_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLFriend_Del_ToGlobal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional .PBG2GLFriend_Info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLFriend_Del_ToGlobal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional .PBG2GLFriend_Info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLFriend_Del_ToGlobal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional .PBG2GLFriend_Info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLFriend_Del_ToGlobal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional .PBG2GLFriend_Info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLFriend_Del_ToGlobal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLFriend_Del_ToGlobal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLFriend_Del_ToGlobal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLFriend_Del_ToGlobal::MergeFrom(const PBG2GLFriend_Del_ToGlobal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_info()) {
      mutable_info()->::PBG2GLFriend_Info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLFriend_Del_ToGlobal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLFriend_Del_ToGlobal::CopyFrom(const PBG2GLFriend_Del_ToGlobal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLFriend_Del_ToGlobal::IsInitialized() const {
  
  return true;
}

void PBG2GLFriend_Del_ToGlobal::Swap(PBG2GLFriend_Del_ToGlobal* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLFriend_Del_ToGlobal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLFriend_Del_ToGlobal_descriptor_;
  metadata.reflection = PBG2GLFriend_Del_ToGlobal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGL2GFriendInfo::kTypeFieldNumber;
const int PBGL2GFriendInfo::kDisplayFieldNumber;
const int PBGL2GFriendInfo::kOnlineFieldNumber;
const int PBGL2GFriendInfo::kFightpowerFieldNumber;
#endif  // !_MSC_VER

PBGL2GFriendInfo::PBGL2GFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGL2GFriendInfo::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBGL2GFriendInfo::PBGL2GFriendInfo(const PBGL2GFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGL2GFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  display_ = NULL;
  online_ = false;
  fightpower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGL2GFriendInfo::~PBGL2GFriendInfo() {
  SharedDtor();
}

void PBGL2GFriendInfo::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBGL2GFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGL2GFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGL2GFriendInfo_descriptor_;
}

const PBGL2GFriendInfo& PBGL2GFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGL2GFriendInfo* PBGL2GFriendInfo::default_instance_ = NULL;

PBGL2GFriendInfo* PBGL2GFriendInfo::New() const {
  return new PBGL2GFriendInfo;
}

void PBGL2GFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    online_ = false;
    fightpower_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGL2GFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_display;
        break;
      }
      
      // optional .PBPlayerDisplay display = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_online;
        break;
      }
      
      // optional bool online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGL2GFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->display(), output);
  }
  
  // optional bool online = 3;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }
  
  // optional uint32 fightpower = 4;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fightpower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGL2GFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->display(), target);
  }
  
  // optional bool online = 3;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->online(), target);
  }
  
  // optional uint32 fightpower = 4;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fightpower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGL2GFriendInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional .PBPlayerDisplay display = 2;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional bool online = 3;
    if (has_online()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 fightpower = 4;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGL2GFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGL2GFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGL2GFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGL2GFriendInfo::MergeFrom(const PBGL2GFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGL2GFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGL2GFriendInfo::CopyFrom(const PBGL2GFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGL2GFriendInfo::IsInitialized() const {
  
  return true;
}

void PBGL2GFriendInfo::Swap(PBGL2GFriendInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(display_, other->display_);
    std::swap(online_, other->online_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGL2GFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGL2GFriendInfo_descriptor_;
  metadata.reflection = PBGL2GFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGL2GFriendInfoUpdate::kPlayeridFieldNumber;
const int PBGL2GFriendInfoUpdate::kInfoFieldNumber;
#endif  // !_MSC_VER

PBGL2GFriendInfoUpdate::PBGL2GFriendInfoUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGL2GFriendInfoUpdate::InitAsDefaultInstance() {
  info_ = const_cast< ::PBGL2GFriendInfo*>(&::PBGL2GFriendInfo::default_instance());
}

PBGL2GFriendInfoUpdate::PBGL2GFriendInfoUpdate(const PBGL2GFriendInfoUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGL2GFriendInfoUpdate::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGL2GFriendInfoUpdate::~PBGL2GFriendInfoUpdate() {
  SharedDtor();
}

void PBGL2GFriendInfoUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PBGL2GFriendInfoUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGL2GFriendInfoUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGL2GFriendInfoUpdate_descriptor_;
}

const PBGL2GFriendInfoUpdate& PBGL2GFriendInfoUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGL2GFriendInfoUpdate* PBGL2GFriendInfoUpdate::default_instance_ = NULL;

PBGL2GFriendInfoUpdate* PBGL2GFriendInfoUpdate::New() const {
  return new PBGL2GFriendInfoUpdate;
}

void PBGL2GFriendInfoUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::PBGL2GFriendInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGL2GFriendInfoUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional .PBGL2GFriendInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGL2GFriendInfoUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional .PBGL2GFriendInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGL2GFriendInfoUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional .PBGL2GFriendInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGL2GFriendInfoUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional .PBGL2GFriendInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGL2GFriendInfoUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGL2GFriendInfoUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGL2GFriendInfoUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGL2GFriendInfoUpdate::MergeFrom(const PBGL2GFriendInfoUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_info()) {
      mutable_info()->::PBGL2GFriendInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGL2GFriendInfoUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGL2GFriendInfoUpdate::CopyFrom(const PBGL2GFriendInfoUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGL2GFriendInfoUpdate::IsInitialized() const {
  
  return true;
}

void PBGL2GFriendInfoUpdate::Swap(PBGL2GFriendInfoUpdate* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGL2GFriendInfoUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGL2GFriendInfoUpdate_descriptor_;
  metadata.reflection = PBGL2GFriendInfoUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGL2GFriendAdd::kPlayeridFieldNumber;
const int PBGL2GFriendAdd::kInfoFieldNumber;
#endif  // !_MSC_VER

PBGL2GFriendAdd::PBGL2GFriendAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGL2GFriendAdd::InitAsDefaultInstance() {
  info_ = const_cast< ::PBGL2GFriendInfo*>(&::PBGL2GFriendInfo::default_instance());
}

PBGL2GFriendAdd::PBGL2GFriendAdd(const PBGL2GFriendAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGL2GFriendAdd::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGL2GFriendAdd::~PBGL2GFriendAdd() {
  SharedDtor();
}

void PBGL2GFriendAdd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PBGL2GFriendAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGL2GFriendAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGL2GFriendAdd_descriptor_;
}

const PBGL2GFriendAdd& PBGL2GFriendAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGL2GFriendAdd* PBGL2GFriendAdd::default_instance_ = NULL;

PBGL2GFriendAdd* PBGL2GFriendAdd::New() const {
  return new PBGL2GFriendAdd;
}

void PBGL2GFriendAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::PBGL2GFriendInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGL2GFriendAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional .PBGL2GFriendInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGL2GFriendAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional .PBGL2GFriendInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGL2GFriendAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional .PBGL2GFriendInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGL2GFriendAdd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional .PBGL2GFriendInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGL2GFriendAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGL2GFriendAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGL2GFriendAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGL2GFriendAdd::MergeFrom(const PBGL2GFriendAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_info()) {
      mutable_info()->::PBGL2GFriendInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGL2GFriendAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGL2GFriendAdd::CopyFrom(const PBGL2GFriendAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGL2GFriendAdd::IsInitialized() const {
  
  return true;
}

void PBGL2GFriendAdd::Swap(PBGL2GFriendAdd* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGL2GFriendAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGL2GFriendAdd_descriptor_;
  metadata.reflection = PBGL2GFriendAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGL2GFriendInfoSyn::kPlayeridFieldNumber;
const int PBGL2GFriendInfoSyn::kInfoFieldNumber;
#endif  // !_MSC_VER

PBGL2GFriendInfoSyn::PBGL2GFriendInfoSyn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGL2GFriendInfoSyn::InitAsDefaultInstance() {
}

PBGL2GFriendInfoSyn::PBGL2GFriendInfoSyn(const PBGL2GFriendInfoSyn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGL2GFriendInfoSyn::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGL2GFriendInfoSyn::~PBGL2GFriendInfoSyn() {
  SharedDtor();
}

void PBGL2GFriendInfoSyn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGL2GFriendInfoSyn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGL2GFriendInfoSyn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGL2GFriendInfoSyn_descriptor_;
}

const PBGL2GFriendInfoSyn& PBGL2GFriendInfoSyn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGL2GFriendInfoSyn* PBGL2GFriendInfoSyn::default_instance_ = NULL;

PBGL2GFriendInfoSyn* PBGL2GFriendInfoSyn::New() const {
  return new PBGL2GFriendInfoSyn;
}

void PBGL2GFriendInfoSyn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGL2GFriendInfoSyn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // repeated .PBGL2GFriendInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGL2GFriendInfoSyn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // repeated .PBGL2GFriendInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGL2GFriendInfoSyn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // repeated .PBGL2GFriendInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGL2GFriendInfoSyn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  // repeated .PBGL2GFriendInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGL2GFriendInfoSyn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGL2GFriendInfoSyn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGL2GFriendInfoSyn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGL2GFriendInfoSyn::MergeFrom(const PBGL2GFriendInfoSyn& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGL2GFriendInfoSyn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGL2GFriendInfoSyn::CopyFrom(const PBGL2GFriendInfoSyn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGL2GFriendInfoSyn::IsInitialized() const {
  
  return true;
}

void PBGL2GFriendInfoSyn::Swap(PBGL2GFriendInfoSyn* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGL2GFriendInfoSyn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGL2GFriendInfoSyn_descriptor_;
  metadata.reflection = PBGL2GFriendInfoSyn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLCommon_BossInfoUpdate::kSceneidFieldNumber;
const int PBG2GLCommon_BossInfoUpdate::kCellidFieldNumber;
const int PBG2GLCommon_BossInfoUpdate::kMonsteridFieldNumber;
const int PBG2GLCommon_BossInfoUpdate::kAliveFieldNumber;
#endif  // !_MSC_VER

PBG2GLCommon_BossInfoUpdate::PBG2GLCommon_BossInfoUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLCommon_BossInfoUpdate::InitAsDefaultInstance() {
}

PBG2GLCommon_BossInfoUpdate::PBG2GLCommon_BossInfoUpdate(const PBG2GLCommon_BossInfoUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLCommon_BossInfoUpdate::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  cellid_ = 0u;
  monsterid_ = 0u;
  alive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLCommon_BossInfoUpdate::~PBG2GLCommon_BossInfoUpdate() {
  SharedDtor();
}

void PBG2GLCommon_BossInfoUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2GLCommon_BossInfoUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLCommon_BossInfoUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLCommon_BossInfoUpdate_descriptor_;
}

const PBG2GLCommon_BossInfoUpdate& PBG2GLCommon_BossInfoUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLCommon_BossInfoUpdate* PBG2GLCommon_BossInfoUpdate::default_instance_ = NULL;

PBG2GLCommon_BossInfoUpdate* PBG2GLCommon_BossInfoUpdate::New() const {
  return new PBG2GLCommon_BossInfoUpdate;
}

void PBG2GLCommon_BossInfoUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    cellid_ = 0u;
    monsterid_ = 0u;
    alive_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLCommon_BossInfoUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cellid;
        break;
      }
      
      // optional uint32 cellid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monsterid;
        break;
      }
      
      // optional uint32 monsterid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_alive;
        break;
      }
      
      // optional bool alive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alive_)));
          set_has_alive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLCommon_BossInfoUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint32 cellid = 2;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cellid(), output);
  }
  
  // optional uint32 monsterid = 3;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monsterid(), output);
  }
  
  // optional bool alive = 4;
  if (has_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->alive(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLCommon_BossInfoUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint32 cellid = 2;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cellid(), target);
  }
  
  // optional uint32 monsterid = 3;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->monsterid(), target);
  }
  
  // optional bool alive = 4;
  if (has_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->alive(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLCommon_BossInfoUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 cellid = 2;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }
    
    // optional uint32 monsterid = 3;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }
    
    // optional bool alive = 4;
    if (has_alive()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLCommon_BossInfoUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLCommon_BossInfoUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLCommon_BossInfoUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLCommon_BossInfoUpdate::MergeFrom(const PBG2GLCommon_BossInfoUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_alive()) {
      set_alive(from.alive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLCommon_BossInfoUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLCommon_BossInfoUpdate::CopyFrom(const PBG2GLCommon_BossInfoUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLCommon_BossInfoUpdate::IsInitialized() const {
  
  return true;
}

void PBG2GLCommon_BossInfoUpdate::Swap(PBG2GLCommon_BossInfoUpdate* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(cellid_, other->cellid_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(alive_, other->alive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLCommon_BossInfoUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLCommon_BossInfoUpdate_descriptor_;
  metadata.reflection = PBG2GLCommon_BossInfoUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLCommon_BossListAsk::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBG2GLCommon_BossListAsk::PBG2GLCommon_BossListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLCommon_BossListAsk::InitAsDefaultInstance() {
}

PBG2GLCommon_BossListAsk::PBG2GLCommon_BossListAsk(const PBG2GLCommon_BossListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLCommon_BossListAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLCommon_BossListAsk::~PBG2GLCommon_BossListAsk() {
  SharedDtor();
}

void PBG2GLCommon_BossListAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2GLCommon_BossListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLCommon_BossListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLCommon_BossListAsk_descriptor_;
}

const PBG2GLCommon_BossListAsk& PBG2GLCommon_BossListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLCommon_BossListAsk* PBG2GLCommon_BossListAsk::default_instance_ = NULL;

PBG2GLCommon_BossListAsk* PBG2GLCommon_BossListAsk::New() const {
  return new PBG2GLCommon_BossListAsk;
}

void PBG2GLCommon_BossListAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLCommon_BossListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLCommon_BossListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLCommon_BossListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLCommon_BossListAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLCommon_BossListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLCommon_BossListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLCommon_BossListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLCommon_BossListAsk::MergeFrom(const PBG2GLCommon_BossListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLCommon_BossListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLCommon_BossListAsk::CopyFrom(const PBG2GLCommon_BossListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLCommon_BossListAsk::IsInitialized() const {
  
  return true;
}

void PBG2GLCommon_BossListAsk::Swap(PBG2GLCommon_BossListAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLCommon_BossListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLCommon_BossListAsk_descriptor_;
  metadata.reflection = PBG2GLCommon_BossListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGLAGCallPlayer::kTarnameFieldNumber;
const int PBGLAGCallPlayer::kTaridFieldNumber;
const int PBGLAGCallPlayer::kSceneidFieldNumber;
const int PBGLAGCallPlayer::kScenecellidFieldNumber;
const int PBGLAGCallPlayer::kScenedynidFieldNumber;
const int PBGLAGCallPlayer::kPosxFieldNumber;
const int PBGLAGCallPlayer::kPosyFieldNumber;
#endif  // !_MSC_VER

PBGLAGCallPlayer::PBGLAGCallPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGLAGCallPlayer::InitAsDefaultInstance() {
}

PBGLAGCallPlayer::PBGLAGCallPlayer(const PBGLAGCallPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGLAGCallPlayer::SharedCtor() {
  _cached_size_ = 0;
  tarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tarid_ = 0u;
  sceneid_ = 0u;
  scenecellid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGLAGCallPlayer::~PBGLAGCallPlayer() {
  SharedDtor();
}

void PBGLAGCallPlayer::SharedDtor() {
  if (tarname_ != &::google::protobuf::internal::kEmptyString) {
    delete tarname_;
  }
  if (this != default_instance_) {
  }
}

void PBGLAGCallPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGLAGCallPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGLAGCallPlayer_descriptor_;
}

const PBGLAGCallPlayer& PBGLAGCallPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGLAGCallPlayer* PBGLAGCallPlayer::default_instance_ = NULL;

PBGLAGCallPlayer* PBGLAGCallPlayer::New() const {
  return new PBGLAGCallPlayer;
}

void PBGLAGCallPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tarname()) {
      if (tarname_ != &::google::protobuf::internal::kEmptyString) {
        tarname_->clear();
      }
    }
    tarid_ = 0u;
    sceneid_ = 0u;
    scenecellid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
    posx_ = 0;
    posy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGLAGCallPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tarname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tarname().data(), this->tarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tarid;
        break;
      }
      
      // optional uint32 tarid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tarid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tarid_)));
          set_has_tarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }
      
      // optional uint32 sceneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scenecellid;
        break;
      }
      
      // optional uint32 scenecellid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenecellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenecellid_)));
          set_has_scenecellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scenedynid;
        break;
      }
      
      // optional uint64 scenedynid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenedynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_posx;
        break;
      }
      
      // optional float posx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_posy;
        break;
      }
      
      // optional float posy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGLAGCallPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tarname = 1;
  if (has_tarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tarname().data(), this->tarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tarname(), output);
  }
  
  // optional uint32 tarid = 2;
  if (has_tarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tarid(), output);
  }
  
  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }
  
  // optional uint32 scenecellid = 4;
  if (has_scenecellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scenecellid(), output);
  }
  
  // optional uint64 scenedynid = 5;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->scenedynid(), output);
  }
  
  // optional float posx = 6;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->posx(), output);
  }
  
  // optional float posy = 7;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGLAGCallPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tarname = 1;
  if (has_tarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tarname().data(), this->tarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tarname(), target);
  }
  
  // optional uint32 tarid = 2;
  if (has_tarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tarid(), target);
  }
  
  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }
  
  // optional uint32 scenecellid = 4;
  if (has_scenecellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scenecellid(), target);
  }
  
  // optional uint64 scenedynid = 5;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->scenedynid(), target);
  }
  
  // optional float posx = 6;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->posx(), target);
  }
  
  // optional float posy = 7;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGLAGCallPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tarname = 1;
    if (has_tarname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tarname());
    }
    
    // optional uint32 tarid = 2;
    if (has_tarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tarid());
    }
    
    // optional uint32 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 scenecellid = 4;
    if (has_scenecellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenecellid());
    }
    
    // optional uint64 scenedynid = 5;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
    // optional float posx = 6;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
    // optional float posy = 7;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGLAGCallPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGLAGCallPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGLAGCallPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGLAGCallPlayer::MergeFrom(const PBGLAGCallPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tarname()) {
      set_tarname(from.tarname());
    }
    if (from.has_tarid()) {
      set_tarid(from.tarid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenecellid()) {
      set_scenecellid(from.scenecellid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGLAGCallPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGLAGCallPlayer::CopyFrom(const PBGLAGCallPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGLAGCallPlayer::IsInitialized() const {
  
  return true;
}

void PBGLAGCallPlayer::Swap(PBGLAGCallPlayer* other) {
  if (other != this) {
    std::swap(tarname_, other->tarname_);
    std::swap(tarid_, other->tarid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenecellid_, other->scenecellid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGLAGCallPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGLAGCallPlayer_descriptor_;
  metadata.reflection = PBGLAGCallPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGLAGLocatePlayer::kPlayeridFieldNumber;
const int PBGLAGLocatePlayer::kReasonFieldNumber;
const int PBGLAGLocatePlayer::kTarnameFieldNumber;
const int PBGLAGLocatePlayer::kTaridFieldNumber;
#endif  // !_MSC_VER

PBGLAGLocatePlayer::PBGLAGLocatePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGLAGLocatePlayer::InitAsDefaultInstance() {
}

PBGLAGLocatePlayer::PBGLAGLocatePlayer(const PBGLAGLocatePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGLAGLocatePlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  reason_ = 0u;
  tarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tarid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGLAGLocatePlayer::~PBGLAGLocatePlayer() {
  SharedDtor();
}

void PBGLAGLocatePlayer::SharedDtor() {
  if (tarname_ != &::google::protobuf::internal::kEmptyString) {
    delete tarname_;
  }
  if (this != default_instance_) {
  }
}

void PBGLAGLocatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGLAGLocatePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGLAGLocatePlayer_descriptor_;
}

const PBGLAGLocatePlayer& PBGLAGLocatePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGLAGLocatePlayer* PBGLAGLocatePlayer::default_instance_ = NULL;

PBGLAGLocatePlayer* PBGLAGLocatePlayer::New() const {
  return new PBGLAGLocatePlayer;
}

void PBGLAGLocatePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    reason_ = 0u;
    if (has_tarname()) {
      if (tarname_ != &::google::protobuf::internal::kEmptyString) {
        tarname_->clear();
      }
    }
    tarid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGLAGLocatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tarname;
        break;
      }
      
      // optional string tarname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tarname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tarname().data(), this->tarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tarid;
        break;
      }
      
      // optional uint32 tarid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tarid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tarid_)));
          set_has_tarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGLAGLocatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }
  
  // optional string tarname = 3;
  if (has_tarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tarname().data(), this->tarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tarname(), output);
  }
  
  // optional uint32 tarid = 4;
  if (has_tarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tarid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGLAGLocatePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }
  
  // optional string tarname = 3;
  if (has_tarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tarname().data(), this->tarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tarname(), target);
  }
  
  // optional uint32 tarid = 4;
  if (has_tarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tarid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGLAGLocatePlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
    // optional string tarname = 3;
    if (has_tarname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tarname());
    }
    
    // optional uint32 tarid = 4;
    if (has_tarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tarid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGLAGLocatePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGLAGLocatePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGLAGLocatePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGLAGLocatePlayer::MergeFrom(const PBGLAGLocatePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_tarname()) {
      set_tarname(from.tarname());
    }
    if (from.has_tarid()) {
      set_tarid(from.tarid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGLAGLocatePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGLAGLocatePlayer::CopyFrom(const PBGLAGLocatePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGLAGLocatePlayer::IsInitialized() const {
  
  return true;
}

void PBGLAGLocatePlayer::Swap(PBGLAGLocatePlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(reason_, other->reason_);
    std::swap(tarname_, other->tarname_);
    std::swap(tarid_, other->tarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGLAGLocatePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGLAGLocatePlayer_descriptor_;
  metadata.reflection = PBGLAGLocatePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGLAGLocatePlayerAck::kPlayeridFieldNumber;
const int PBGLAGLocatePlayerAck::kReasonFieldNumber;
const int PBGLAGLocatePlayerAck::kTarFieldNumber;
const int PBGLAGLocatePlayerAck::kSucFieldNumber;
const int PBGLAGLocatePlayerAck::kSceneidFieldNumber;
const int PBGLAGLocatePlayerAck::kScenecellidFieldNumber;
const int PBGLAGLocatePlayerAck::kScenedynidFieldNumber;
const int PBGLAGLocatePlayerAck::kPosxFieldNumber;
const int PBGLAGLocatePlayerAck::kPosyFieldNumber;
#endif  // !_MSC_VER

PBGLAGLocatePlayerAck::PBGLAGLocatePlayerAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGLAGLocatePlayerAck::InitAsDefaultInstance() {
  tar_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBGLAGLocatePlayerAck::PBGLAGLocatePlayerAck(const PBGLAGLocatePlayerAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGLAGLocatePlayerAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  reason_ = 0u;
  tar_ = NULL;
  suc_ = false;
  sceneid_ = 0u;
  scenecellid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGLAGLocatePlayerAck::~PBGLAGLocatePlayerAck() {
  SharedDtor();
}

void PBGLAGLocatePlayerAck::SharedDtor() {
  if (this != default_instance_) {
    delete tar_;
  }
}

void PBGLAGLocatePlayerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGLAGLocatePlayerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGLAGLocatePlayerAck_descriptor_;
}

const PBGLAGLocatePlayerAck& PBGLAGLocatePlayerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGLAGLocatePlayerAck* PBGLAGLocatePlayerAck::default_instance_ = NULL;

PBGLAGLocatePlayerAck* PBGLAGLocatePlayerAck::New() const {
  return new PBGLAGLocatePlayerAck;
}

void PBGLAGLocatePlayerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    reason_ = 0u;
    if (has_tar()) {
      if (tar_ != NULL) tar_->::PBPlayerDisplay::Clear();
    }
    suc_ = false;
    sceneid_ = 0u;
    scenecellid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
    posx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    posy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGLAGLocatePlayerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tar;
        break;
      }
      
      // optional .PBPlayerDisplay tar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_suc;
        break;
      }
      
      // optional bool suc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suc_)));
          set_has_suc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sceneid;
        break;
      }
      
      // optional uint32 sceneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_scenecellid;
        break;
      }
      
      // optional uint32 scenecellid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenecellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenecellid_)));
          set_has_scenecellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_scenedynid;
        break;
      }
      
      // optional uint64 scenedynid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenedynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_posx;
        break;
      }
      
      // optional float posx = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_posy;
        break;
      }
      
      // optional float posy = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGLAGLocatePlayerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }
  
  // optional .PBPlayerDisplay tar = 3;
  if (has_tar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tar(), output);
  }
  
  // optional bool suc = 4;
  if (has_suc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->suc(), output);
  }
  
  // optional uint32 sceneid = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneid(), output);
  }
  
  // optional uint32 scenecellid = 6;
  if (has_scenecellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scenecellid(), output);
  }
  
  // optional uint64 scenedynid = 7;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->scenedynid(), output);
  }
  
  // optional float posx = 8;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->posx(), output);
  }
  
  // optional float posy = 9;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGLAGLocatePlayerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }
  
  // optional .PBPlayerDisplay tar = 3;
  if (has_tar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tar(), target);
  }
  
  // optional bool suc = 4;
  if (has_suc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->suc(), target);
  }
  
  // optional uint32 sceneid = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneid(), target);
  }
  
  // optional uint32 scenecellid = 6;
  if (has_scenecellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scenecellid(), target);
  }
  
  // optional uint64 scenedynid = 7;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->scenedynid(), target);
  }
  
  // optional float posx = 8;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->posx(), target);
  }
  
  // optional float posy = 9;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGLAGLocatePlayerAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
    // optional .PBPlayerDisplay tar = 3;
    if (has_tar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tar());
    }
    
    // optional bool suc = 4;
    if (has_suc()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 sceneid = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 scenecellid = 6;
    if (has_scenecellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenecellid());
    }
    
    // optional uint64 scenedynid = 7;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
    // optional float posx = 8;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float posy = 9;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGLAGLocatePlayerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGLAGLocatePlayerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGLAGLocatePlayerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGLAGLocatePlayerAck::MergeFrom(const PBGLAGLocatePlayerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_tar()) {
      mutable_tar()->::PBPlayerDisplay::MergeFrom(from.tar());
    }
    if (from.has_suc()) {
      set_suc(from.suc());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenecellid()) {
      set_scenecellid(from.scenecellid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGLAGLocatePlayerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGLAGLocatePlayerAck::CopyFrom(const PBGLAGLocatePlayerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGLAGLocatePlayerAck::IsInitialized() const {
  
  return true;
}

void PBGLAGLocatePlayerAck::Swap(PBGLAGLocatePlayerAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(reason_, other->reason_);
    std::swap(tar_, other->tar_);
    std::swap(suc_, other->suc_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenecellid_, other->scenecellid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGLAGLocatePlayerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGLAGLocatePlayerAck_descriptor_;
  metadata.reflection = PBGLAGLocatePlayerAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWorldBossStatus::kBossActivityidFieldNumber;
const int PBWorldBossStatus::kStatusFieldNumber;
const int PBWorldBossStatus::kKillerNameFieldNumber;
const int PBWorldBossStatus::kLastdeadtimetickFieldNumber;
#endif  // !_MSC_VER

PBWorldBossStatus::PBWorldBossStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldBossStatus::InitAsDefaultInstance() {
}

PBWorldBossStatus::PBWorldBossStatus(const PBWorldBossStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldBossStatus::SharedCtor() {
  _cached_size_ = 0;
  bossactivityid_ = 0u;
  status_ = 0u;
  killername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastdeadtimetick_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldBossStatus::~PBWorldBossStatus() {
  SharedDtor();
}

void PBWorldBossStatus::SharedDtor() {
  if (killername_ != &::google::protobuf::internal::kEmptyString) {
    delete killername_;
  }
  if (this != default_instance_) {
  }
}

void PBWorldBossStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWorldBossStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldBossStatus_descriptor_;
}

const PBWorldBossStatus& PBWorldBossStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBWorldBossStatus* PBWorldBossStatus::default_instance_ = NULL;

PBWorldBossStatus* PBWorldBossStatus::New() const {
  return new PBWorldBossStatus;
}

void PBWorldBossStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossactivityid_ = 0u;
    status_ = 0u;
    if (has_killername()) {
      if (killername_ != &::google::protobuf::internal::kEmptyString) {
        killername_->clear();
      }
    }
    lastdeadtimetick_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldBossStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bossActivityid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossactivityid_)));
          set_has_bossactivityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_killerName;
        break;
      }
      
      // optional string killerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->killername().data(), this->killername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastdeadtimetick;
        break;
      }
      
      // optional uint64 lastdeadtimetick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastdeadtimetick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastdeadtimetick_)));
          set_has_lastdeadtimetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWorldBossStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bossActivityid = 1;
  if (has_bossactivityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossactivityid(), output);
  }
  
  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }
  
  // optional string killerName = 3;
  if (has_killername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killername().data(), this->killername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->killername(), output);
  }
  
  // optional uint64 lastdeadtimetick = 4;
  if (has_lastdeadtimetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lastdeadtimetick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldBossStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bossActivityid = 1;
  if (has_bossactivityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossactivityid(), target);
  }
  
  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }
  
  // optional string killerName = 3;
  if (has_killername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killername().data(), this->killername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->killername(), target);
  }
  
  // optional uint64 lastdeadtimetick = 4;
  if (has_lastdeadtimetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lastdeadtimetick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldBossStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bossActivityid = 1;
    if (has_bossactivityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossactivityid());
    }
    
    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // optional string killerName = 3;
    if (has_killername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killername());
    }
    
    // optional uint64 lastdeadtimetick = 4;
    if (has_lastdeadtimetick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastdeadtimetick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWorldBossStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldBossStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldBossStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldBossStatus::MergeFrom(const PBWorldBossStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossactivityid()) {
      set_bossactivityid(from.bossactivityid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_killername()) {
      set_killername(from.killername());
    }
    if (from.has_lastdeadtimetick()) {
      set_lastdeadtimetick(from.lastdeadtimetick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldBossStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldBossStatus::CopyFrom(const PBWorldBossStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorldBossStatus::IsInitialized() const {
  
  return true;
}

void PBWorldBossStatus::Swap(PBWorldBossStatus* other) {
  if (other != this) {
    std::swap(bossactivityid_, other->bossactivityid_);
    std::swap(status_, other->status_);
    std::swap(killername_, other->killername_);
    std::swap(lastdeadtimetick_, other->lastdeadtimetick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWorldBossStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWorldBossStatus_descriptor_;
  metadata.reflection = PBWorldBossStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2GLWorldBossStatusReportAsk::kBossStatusFieldNumber;
#endif  // !_MSC_VER

PBG2GLWorldBossStatusReportAsk::PBG2GLWorldBossStatusReportAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLWorldBossStatusReportAsk::InitAsDefaultInstance() {
}

PBG2GLWorldBossStatusReportAsk::PBG2GLWorldBossStatusReportAsk(const PBG2GLWorldBossStatusReportAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLWorldBossStatusReportAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLWorldBossStatusReportAsk::~PBG2GLWorldBossStatusReportAsk() {
  SharedDtor();
}

void PBG2GLWorldBossStatusReportAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2GLWorldBossStatusReportAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLWorldBossStatusReportAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLWorldBossStatusReportAsk_descriptor_;
}

const PBG2GLWorldBossStatusReportAsk& PBG2GLWorldBossStatusReportAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLWorldBossStatusReportAsk* PBG2GLWorldBossStatusReportAsk::default_instance_ = NULL;

PBG2GLWorldBossStatusReportAsk* PBG2GLWorldBossStatusReportAsk::New() const {
  return new PBG2GLWorldBossStatusReportAsk;
}

void PBG2GLWorldBossStatusReportAsk::Clear() {
  bossstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLWorldBossStatusReportAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBWorldBossStatus bossStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bossStatus;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2GLWorldBossStatusReportAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBWorldBossStatus bossStatus = 1;
  for (int i = 0; i < this->bossstatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bossstatus(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLWorldBossStatusReportAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBWorldBossStatus bossStatus = 1;
  for (int i = 0; i < this->bossstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bossstatus(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLWorldBossStatusReportAsk::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBWorldBossStatus bossStatus = 1;
  total_size += 1 * this->bossstatus_size();
  for (int i = 0; i < this->bossstatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossstatus(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLWorldBossStatusReportAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLWorldBossStatusReportAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLWorldBossStatusReportAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLWorldBossStatusReportAsk::MergeFrom(const PBG2GLWorldBossStatusReportAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossstatus_.MergeFrom(from.bossstatus_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLWorldBossStatusReportAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLWorldBossStatusReportAsk::CopyFrom(const PBG2GLWorldBossStatusReportAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLWorldBossStatusReportAsk::IsInitialized() const {
  
  return true;
}

void PBG2GLWorldBossStatusReportAsk::Swap(PBG2GLWorldBossStatusReportAsk* other) {
  if (other != this) {
    bossstatus_.Swap(&other->bossstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLWorldBossStatusReportAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLWorldBossStatusReportAsk_descriptor_;
  metadata.reflection = PBG2GLWorldBossStatusReportAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2GLWorldBossKillInfoAsk::PBG2GLWorldBossKillInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2GLWorldBossKillInfoAsk::InitAsDefaultInstance() {
}

PBG2GLWorldBossKillInfoAsk::PBG2GLWorldBossKillInfoAsk(const PBG2GLWorldBossKillInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2GLWorldBossKillInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2GLWorldBossKillInfoAsk::~PBG2GLWorldBossKillInfoAsk() {
  SharedDtor();
}

void PBG2GLWorldBossKillInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2GLWorldBossKillInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2GLWorldBossKillInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2GLWorldBossKillInfoAsk_descriptor_;
}

const PBG2GLWorldBossKillInfoAsk& PBG2GLWorldBossKillInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBG2GLWorldBossKillInfoAsk* PBG2GLWorldBossKillInfoAsk::default_instance_ = NULL;

PBG2GLWorldBossKillInfoAsk* PBG2GLWorldBossKillInfoAsk::New() const {
  return new PBG2GLWorldBossKillInfoAsk;
}

void PBG2GLWorldBossKillInfoAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2GLWorldBossKillInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2GLWorldBossKillInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2GLWorldBossKillInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2GLWorldBossKillInfoAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2GLWorldBossKillInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2GLWorldBossKillInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2GLWorldBossKillInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2GLWorldBossKillInfoAsk::MergeFrom(const PBG2GLWorldBossKillInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2GLWorldBossKillInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2GLWorldBossKillInfoAsk::CopyFrom(const PBG2GLWorldBossKillInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2GLWorldBossKillInfoAsk::IsInitialized() const {
  
  return true;
}

void PBG2GLWorldBossKillInfoAsk::Swap(PBG2GLWorldBossKillInfoAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2GLWorldBossKillInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2GLWorldBossKillInfoAsk_descriptor_;
  metadata.reflection = PBG2GLWorldBossKillInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGL2GWorldBossStatusNtf::kBossStatusFieldNumber;
#endif  // !_MSC_VER

PBGL2GWorldBossStatusNtf::PBGL2GWorldBossStatusNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGL2GWorldBossStatusNtf::InitAsDefaultInstance() {
}

PBGL2GWorldBossStatusNtf::PBGL2GWorldBossStatusNtf(const PBGL2GWorldBossStatusNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGL2GWorldBossStatusNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGL2GWorldBossStatusNtf::~PBGL2GWorldBossStatusNtf() {
  SharedDtor();
}

void PBGL2GWorldBossStatusNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGL2GWorldBossStatusNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGL2GWorldBossStatusNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGL2GWorldBossStatusNtf_descriptor_;
}

const PBGL2GWorldBossStatusNtf& PBGL2GWorldBossStatusNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGL2GWorldBossStatusNtf* PBGL2GWorldBossStatusNtf::default_instance_ = NULL;

PBGL2GWorldBossStatusNtf* PBGL2GWorldBossStatusNtf::New() const {
  return new PBGL2GWorldBossStatusNtf;
}

void PBGL2GWorldBossStatusNtf::Clear() {
  bossstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGL2GWorldBossStatusNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBWorldBossStatus bossStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bossStatus;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGL2GWorldBossStatusNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBWorldBossStatus bossStatus = 1;
  for (int i = 0; i < this->bossstatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bossstatus(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGL2GWorldBossStatusNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBWorldBossStatus bossStatus = 1;
  for (int i = 0; i < this->bossstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bossstatus(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGL2GWorldBossStatusNtf::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBWorldBossStatus bossStatus = 1;
  total_size += 1 * this->bossstatus_size();
  for (int i = 0; i < this->bossstatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossstatus(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGL2GWorldBossStatusNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGL2GWorldBossStatusNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGL2GWorldBossStatusNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGL2GWorldBossStatusNtf::MergeFrom(const PBGL2GWorldBossStatusNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossstatus_.MergeFrom(from.bossstatus_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGL2GWorldBossStatusNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGL2GWorldBossStatusNtf::CopyFrom(const PBGL2GWorldBossStatusNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGL2GWorldBossStatusNtf::IsInitialized() const {
  
  return true;
}

void PBGL2GWorldBossStatusNtf::Swap(PBGL2GWorldBossStatusNtf* other) {
  if (other != this) {
    bossstatus_.Swap(&other->bossstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGL2GWorldBossStatusNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGL2GWorldBossStatusNtf_descriptor_;
  metadata.reflection = PBGL2GWorldBossStatusNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGL2GWorldBossKillerInfoAck::kWorldbosskillFieldNumber;
const int PBGL2GWorldBossKillerInfoAck::kDbvalidFieldNumber;
#endif  // !_MSC_VER

PBGL2GWorldBossKillerInfoAck::PBGL2GWorldBossKillerInfoAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGL2GWorldBossKillerInfoAck::InitAsDefaultInstance() {
  worldbosskill_ = const_cast< ::PBWorldBossKill*>(&::PBWorldBossKill::default_instance());
}

PBGL2GWorldBossKillerInfoAck::PBGL2GWorldBossKillerInfoAck(const PBGL2GWorldBossKillerInfoAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGL2GWorldBossKillerInfoAck::SharedCtor() {
  _cached_size_ = 0;
  worldbosskill_ = NULL;
  dbvalid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGL2GWorldBossKillerInfoAck::~PBGL2GWorldBossKillerInfoAck() {
  SharedDtor();
}

void PBGL2GWorldBossKillerInfoAck::SharedDtor() {
  if (this != default_instance_) {
    delete worldbosskill_;
  }
}

void PBGL2GWorldBossKillerInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGL2GWorldBossKillerInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGL2GWorldBossKillerInfoAck_descriptor_;
}

const PBGL2GWorldBossKillerInfoAck& PBGL2GWorldBossKillerInfoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLAGMsg_2eproto();  return *default_instance_;
}

PBGL2GWorldBossKillerInfoAck* PBGL2GWorldBossKillerInfoAck::default_instance_ = NULL;

PBGL2GWorldBossKillerInfoAck* PBGL2GWorldBossKillerInfoAck::New() const {
  return new PBGL2GWorldBossKillerInfoAck;
}

void PBGL2GWorldBossKillerInfoAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_worldbosskill()) {
      if (worldbosskill_ != NULL) worldbosskill_->::PBWorldBossKill::Clear();
    }
    dbvalid_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGL2GWorldBossKillerInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBWorldBossKill worldbosskill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldbosskill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dbvalid;
        break;
      }
      
      // optional bool dbvalid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dbvalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dbvalid_)));
          set_has_dbvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGL2GWorldBossKillerInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBWorldBossKill worldbosskill = 1;
  if (has_worldbosskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->worldbosskill(), output);
  }
  
  // optional bool dbvalid = 2;
  if (has_dbvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->dbvalid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGL2GWorldBossKillerInfoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBWorldBossKill worldbosskill = 1;
  if (has_worldbosskill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->worldbosskill(), target);
  }
  
  // optional bool dbvalid = 2;
  if (has_dbvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->dbvalid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGL2GWorldBossKillerInfoAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBWorldBossKill worldbosskill = 1;
    if (has_worldbosskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worldbosskill());
    }
    
    // optional bool dbvalid = 2;
    if (has_dbvalid()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGL2GWorldBossKillerInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGL2GWorldBossKillerInfoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGL2GWorldBossKillerInfoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGL2GWorldBossKillerInfoAck::MergeFrom(const PBGL2GWorldBossKillerInfoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worldbosskill()) {
      mutable_worldbosskill()->::PBWorldBossKill::MergeFrom(from.worldbosskill());
    }
    if (from.has_dbvalid()) {
      set_dbvalid(from.dbvalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGL2GWorldBossKillerInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGL2GWorldBossKillerInfoAck::CopyFrom(const PBGL2GWorldBossKillerInfoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGL2GWorldBossKillerInfoAck::IsInitialized() const {
  
  return true;
}

void PBGL2GWorldBossKillerInfoAck::Swap(PBGL2GWorldBossKillerInfoAck* other) {
  if (other != this) {
    std::swap(worldbosskill_, other->worldbosskill_);
    std::swap(dbvalid_, other->dbvalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGL2GWorldBossKillerInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGL2GWorldBossKillerInfoAck_descriptor_;
  metadata.reflection = PBGL2GWorldBossKillerInfoAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
