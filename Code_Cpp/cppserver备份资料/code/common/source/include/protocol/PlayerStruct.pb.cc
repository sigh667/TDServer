// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PlayerStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBPlayerDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerShapeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerShapeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerFashionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerFashionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerAvatar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerAvatar_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEnergy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEnergy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEquipLucky_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEquipLucky_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCopymapDayCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCopymapDayCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamTaskDayCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamTaskDayCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBForbidSpeak_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBForbidSpeak_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCoolingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCoolingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCooling_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCooling_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSystemSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSystemSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSystemBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSystemBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSystemCounter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSystemCounter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSystemSwitch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSystemSwitch_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerColletion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerColletion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerTrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerTrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBQuestItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBQuestItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBQuestCompleted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBQuestCompleted_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWenTaoSchemeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWenTaoSchemeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWenTaoScheme_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWenTaoScheme_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBingFa_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBingFa_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerWenTao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerWenTao_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWulueZhanlue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWulueZhanlue_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWulueScheme_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWulueScheme_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerWulue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerWulue_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCopymapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCopymapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerCopymap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerCopymap_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBIdentitySetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBIdentitySetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBIdentitySkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBIdentitySkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerIdentity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerIdentity_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerWuxuePageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerWuxuePageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerWuxueSchemeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerWuxueSchemeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerWuxue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerWuxue_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerDart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerDart_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerFactionBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerFactionBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerTitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerTitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerClassfiyTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerClassfiyTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerDazuoguaji_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerDazuoguaji_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFashion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFashion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerFashion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerFashion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEquipColumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEquipColumn_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerEquipColumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerEquipColumn_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerGreatWallTrain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerGreatWallTrain_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLlayerRelive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLlayerRelive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerClimbTowerItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerClimbTowerItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerClimbTower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerClimbTower_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerPvpData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerPvpData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerPvp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerPvp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerLoginWealData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerLoginWealData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerWeal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerWeal_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSinglePvpRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSinglePvpRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerSinglePvp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerSinglePvp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerCommon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerCommon_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerManor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerManor_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerGlobalBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerGlobalBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSaleMoneyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSaleMoneyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSaleMoneyLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSaleMoneyLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerGlobalSaleMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerGlobalSaleMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerGlobalSaleMoneySave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerGlobalSaleMoneySave_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSaleMoneyInfoEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSaleMoneyInfoEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSaleMoneyStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSaleMoneyStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSaleMoneyRecentTradeLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSaleMoneyRecentTradeLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSaleMoneyPriceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSaleMoneyPriceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAuctionItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAuctionItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAuctionLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAuctionLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerGlobalAuction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerGlobalAuction_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerGlobalAuctionSave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerGlobalAuctionSave_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAuctionItemAve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAuctionItemAve_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAuctionItemInfoEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAuctionItemInfoEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAuctionPriceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAuctionPriceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerGlobal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerGlobal_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerGlobalData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerGlobalData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemUseCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemUseCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEquipMakeSkilled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEquipMakeSkilled_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEquipMakeVigour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEquipMakeVigour_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEquipMakeOEM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEquipMakeOEM_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClientData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClientData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailSaleMoneyBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailSaleMoneyBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailSaleMoneySale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailSaleMoneySale_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailSaleMoneyBuyReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailSaleMoneyBuyReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailSaleMoneySaleReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailSaleMoneySaleReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailAuctionLockRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailAuctionLockRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailAuctionSaleTimeOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailAuctionSaleTimeOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailAuctionSaleGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailAuctionSaleGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailAuctionBuyGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailAuctionBuyGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailPromote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailPromote_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailFactionBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailFactionBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailWorldBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailWorldBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailCopymapCashReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailCopymapCashReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailSinglePvpFirstPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailSinglePvpFirstPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailSinglePvpDayPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailSinglePvpDayPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailSinglePvpWeekPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailSinglePvpWeekPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailManorTitleGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailManorTitleGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailManorResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailManorResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailFactionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailFactionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailTopListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailTopListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFriendGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFriendGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionBossPersonalTop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionBossPersonalTop_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionBossFactionTop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionBossFactionTop_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionBossUnionTop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionBossUnionTop_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerEquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerEquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostGameAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostGameAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerView_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSinglePvpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSinglePvpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWorldBossKillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldBossKillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWorldBossKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldBossKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWTopListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWTopListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTopListList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTopListList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGlobalServerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGlobalServerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWorldFactionBossData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldFactionBossData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTreasureValueInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTreasureValueInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWorldTreasureData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldTreasureData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWorldCorpsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldCorpsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWorldServerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldServerData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PlayerStruct_2eproto() {
  protobuf_AddDesc_PlayerStruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PlayerStruct.proto");
  GOOGLE_CHECK(file != NULL);
  PBPlayerDisplay_descriptor_ = file->message_type(0);
  static const int PBPlayerDisplay_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, playerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, logicworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, factionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, aliancename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, corps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, factionbanner_),
  };
  PBPlayerDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerDisplay_descriptor_,
      PBPlayerDisplay::default_instance_,
      PBPlayerDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerDisplay));
  PBPlayerShape_descriptor_ = file->message_type(1);
  static const int PBPlayerShape_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerShape, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerShape, id_),
  };
  PBPlayerShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerShape_descriptor_,
      PBPlayerShape::default_instance_,
      PBPlayerShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerShape));
  PBPlayerShapeData_descriptor_ = file->message_type(2);
  static const int PBPlayerShapeData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerShapeData, value_),
  };
  PBPlayerShapeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerShapeData_descriptor_,
      PBPlayerShapeData::default_instance_,
      PBPlayerShapeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerShapeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerShapeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerShapeData));
  PBPlayerFashionData_descriptor_ = file->message_type(3);
  static const int PBPlayerFashionData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFashionData, fashionid_),
  };
  PBPlayerFashionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerFashionData_descriptor_,
      PBPlayerFashionData::default_instance_,
      PBPlayerFashionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFashionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFashionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerFashionData));
  PBPlayerAvatar_descriptor_ = file->message_type(4);
  static const int PBPlayerAvatar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerAvatar, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerAvatar, shapedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerAvatar, fashiondata_),
  };
  PBPlayerAvatar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerAvatar_descriptor_,
      PBPlayerAvatar::default_instance_,
      PBPlayerAvatar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerAvatar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerAvatar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerAvatar));
  PBPlayerMoney_descriptor_ = file->message_type(5);
  static const int PBPlayerMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerMoney, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerMoney, value_),
  };
  PBPlayerMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerMoney_descriptor_,
      PBPlayerMoney::default_instance_,
      PBPlayerMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerMoney));
  PBEnergy_descriptor_ = file->message_type(6);
  static const int PBEnergy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnergy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnergy, value_),
  };
  PBEnergy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEnergy_descriptor_,
      PBEnergy::default_instance_,
      PBEnergy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnergy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnergy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEnergy));
  PBEquipLucky_descriptor_ = file->message_type(7);
  static const int PBEquipLucky_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipLucky, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipLucky, value_),
  };
  PBEquipLucky_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEquipLucky_descriptor_,
      PBEquipLucky::default_instance_,
      PBEquipLucky_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipLucky, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipLucky, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEquipLucky));
  PBCopymapDayCount_descriptor_ = file->message_type(8);
  static const int PBCopymapDayCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapDayCount, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapDayCount, count_),
  };
  PBCopymapDayCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCopymapDayCount_descriptor_,
      PBCopymapDayCount::default_instance_,
      PBCopymapDayCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapDayCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapDayCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCopymapDayCount));
  PBTeamTaskDayCount_descriptor_ = file->message_type(9);
  static const int PBTeamTaskDayCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTaskDayCount, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTaskDayCount, count_),
  };
  PBTeamTaskDayCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamTaskDayCount_descriptor_,
      PBTeamTaskDayCount::default_instance_,
      PBTeamTaskDayCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTaskDayCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTaskDayCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamTaskDayCount));
  PBForbidSpeak_descriptor_ = file->message_type(10);
  static const int PBForbidSpeak_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBForbidSpeak, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBForbidSpeak, nexttime_),
  };
  PBForbidSpeak_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBForbidSpeak_descriptor_,
      PBForbidSpeak::default_instance_,
      PBForbidSpeak_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBForbidSpeak, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBForbidSpeak, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBForbidSpeak));
  PBPlayerBase_descriptor_ = file->message_type(11);
  static const int PBPlayerBase_offsets_[49] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, saveorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, playerdisplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, playermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, scenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, lastlogouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, pktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, pkvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, wisdom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, spawnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, curenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, onlyindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, onlydayindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, onlyweekindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, onlymonthindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, itemsequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, shapedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, killtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, equiplucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, mountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, old_sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, old_cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, old_scenedynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, old_posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, old_posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, old_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, suffervalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, bingfuexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, copymapcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, fashiondata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, teamtaskcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, maxfightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, corpsjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, forbidspeak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, dailycleantime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, weeklycleantime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, monthlycleantime_),
  };
  PBPlayerBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerBase_descriptor_,
      PBPlayerBase::default_instance_,
      PBPlayerBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerBase));
  PBCoolingInfo_descriptor_ = file->message_type(12);
  static const int PBCoolingInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCoolingInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCoolingInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCoolingInfo, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCoolingInfo, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCoolingInfo, time_),
  };
  PBCoolingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCoolingInfo_descriptor_,
      PBCoolingInfo::default_instance_,
      PBCoolingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCoolingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCoolingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCoolingInfo));
  PBCooling_descriptor_ = file->message_type(13);
  static const int PBCooling_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCooling, cooling_),
  };
  PBCooling_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCooling_descriptor_,
      PBCooling::default_instance_,
      PBCooling_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCooling, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCooling, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCooling));
  PBSystemSkill_descriptor_ = file->message_type(14);
  static const int PBSystemSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemSkill, pbskill_),
  };
  PBSystemSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSystemSkill_descriptor_,
      PBSystemSkill::default_instance_,
      PBSystemSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSystemSkill));
  PBSystemBuff_descriptor_ = file->message_type(15);
  static const int PBSystemBuff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemBuff, pbbuff_),
  };
  PBSystemBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSystemBuff_descriptor_,
      PBSystemBuff::default_instance_,
      PBSystemBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSystemBuff));
  PBSystemCounter_descriptor_ = file->message_type(16);
  static const int PBSystemCounter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemCounter, pbcounter_),
  };
  PBSystemCounter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSystemCounter_descriptor_,
      PBSystemCounter::default_instance_,
      PBSystemCounter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemCounter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemCounter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSystemCounter));
  PBSystemSwitch_descriptor_ = file->message_type(17);
  static const int PBSystemSwitch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemSwitch, id_),
  };
  PBSystemSwitch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSystemSwitch_descriptor_,
      PBSystemSwitch::default_instance_,
      PBSystemSwitch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemSwitch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemSwitch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSystemSwitch));
  PBPlayerColletion_descriptor_ = file->message_type(18);
  static const int PBPlayerColletion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerColletion, pbcolletion_),
  };
  PBPlayerColletion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerColletion_descriptor_,
      PBPlayerColletion::default_instance_,
      PBPlayerColletion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerColletion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerColletion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerColletion));
  PBPrize_descriptor_ = file->message_type(19);
  static const int PBPrize_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrize, instancesn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrize, prizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrize, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrize, time_),
  };
  PBPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPrize_descriptor_,
      PBPrize::default_instance_,
      PBPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPrize));
  PBPlayerPrize_descriptor_ = file->message_type(20);
  static const int PBPlayerPrize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPrize, cursn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPrize, pbprize_),
  };
  PBPlayerPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerPrize_descriptor_,
      PBPlayerPrize::default_instance_,
      PBPlayerPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerPrize));
  PBPlayerTrade_descriptor_ = file->message_type(21);
  static const int PBPlayerTrade_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTrade, can_get_sliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTrade, can_give_sliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTrade, recover_get_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTrade, recover_give_time_),
  };
  PBPlayerTrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerTrade_descriptor_,
      PBPlayerTrade::default_instance_,
      PBPlayerTrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerTrade));
  PBQuestItem_descriptor_ = file->message_type(22);
  static const int PBQuestItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestItem, tarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestItem, curcount_),
  };
  PBQuestItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBQuestItem_descriptor_,
      PBQuestItem::default_instance_,
      PBQuestItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBQuestItem));
  PBQuest_descriptor_ = file->message_type(23);
  static const int PBQuest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuest, accepttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuest, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuest, param_),
  };
  PBQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBQuest_descriptor_,
      PBQuest::default_instance_,
      PBQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBQuest));
  PBQuestCompleted_descriptor_ = file->message_type(24);
  static const int PBQuestCompleted_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestCompleted, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestCompleted, count_),
  };
  PBQuestCompleted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBQuestCompleted_descriptor_,
      PBQuestCompleted::default_instance_,
      PBQuestCompleted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestCompleted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQuestCompleted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBQuestCompleted));
  PBPlayerQuest_descriptor_ = file->message_type(25);
  static const int PBPlayerQuest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerQuest, saveorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerQuest, quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerQuest, completedinfo_),
  };
  PBPlayerQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerQuest_descriptor_,
      PBPlayerQuest::default_instance_,
      PBPlayerQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerQuest));
  PBWenTaoSchemeInfo_descriptor_ = file->message_type(26);
  static const int PBWenTaoSchemeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWenTaoSchemeInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWenTaoSchemeInfo, bingfaid_),
  };
  PBWenTaoSchemeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWenTaoSchemeInfo_descriptor_,
      PBWenTaoSchemeInfo::default_instance_,
      PBWenTaoSchemeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWenTaoSchemeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWenTaoSchemeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWenTaoSchemeInfo));
  PBWenTaoScheme_descriptor_ = file->message_type(27);
  static const int PBWenTaoScheme_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWenTaoScheme, schemeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWenTaoScheme, info_),
  };
  PBWenTaoScheme_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWenTaoScheme_descriptor_,
      PBWenTaoScheme::default_instance_,
      PBWenTaoScheme_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWenTaoScheme, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWenTaoScheme, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWenTaoScheme));
  PBBingFa_descriptor_ = file->message_type(28);
  static const int PBBingFa_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBingFa, bingfaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBingFa, qianxiulevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBingFa, tupolevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBingFa, yaodianid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBingFa, yaodianlevel_),
  };
  PBBingFa_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBingFa_descriptor_,
      PBBingFa::default_instance_,
      PBBingFa_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBingFa, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBingFa, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBingFa));
  PBPlayerWenTao_descriptor_ = file->message_type(29);
  static const int PBPlayerWenTao_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWenTao, curschemeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWenTao, bingfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWenTao, scheme_),
  };
  PBPlayerWenTao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerWenTao_descriptor_,
      PBPlayerWenTao::default_instance_,
      PBPlayerWenTao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWenTao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWenTao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerWenTao));
  PBWulueZhanlue_descriptor_ = file->message_type(30);
  static const int PBWulueZhanlue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWulueZhanlue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWulueZhanlue, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWulueZhanlue, level_),
  };
  PBWulueZhanlue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWulueZhanlue_descriptor_,
      PBWulueZhanlue::default_instance_,
      PBWulueZhanlue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWulueZhanlue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWulueZhanlue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWulueZhanlue));
  PBWulueScheme_descriptor_ = file->message_type(31);
  static const int PBWulueScheme_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWulueScheme, schemeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWulueScheme, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWulueScheme, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWulueScheme, bingfusn_),
  };
  PBWulueScheme_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWulueScheme_descriptor_,
      PBWulueScheme::default_instance_,
      PBWulueScheme_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWulueScheme, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWulueScheme, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWulueScheme));
  PBPlayerWulue_descriptor_ = file->message_type(32);
  static const int PBPlayerWulue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWulue, curschemeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWulue, curwuluetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWulue, zhanlueinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWulue, wuluescheme_),
  };
  PBPlayerWulue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerWulue_descriptor_,
      PBPlayerWulue::default_instance_,
      PBPlayerWulue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWulue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWulue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerWulue));
  PBCopymapInfo_descriptor_ = file->message_type(33);
  static const int PBCopymapInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapInfo, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapInfo, entercount_),
  };
  PBCopymapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCopymapInfo_descriptor_,
      PBCopymapInfo::default_instance_,
      PBCopymapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCopymapInfo));
  PBPlayerCopymap_descriptor_ = file->message_type(34);
  static const int PBPlayerCopymap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerCopymap, assistcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerCopymap, info_),
  };
  PBPlayerCopymap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerCopymap_descriptor_,
      PBPlayerCopymap::default_instance_,
      PBPlayerCopymap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerCopymap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerCopymap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerCopymap));
  PBIdentitySetInfo_descriptor_ = file->message_type(35);
  static const int PBIdentitySetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIdentitySetInfo, setid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIdentitySetInfo, identityid_),
  };
  PBIdentitySetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBIdentitySetInfo_descriptor_,
      PBIdentitySetInfo::default_instance_,
      PBIdentitySetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIdentitySetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIdentitySetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBIdentitySetInfo));
  PBIdentitySkillInfo_descriptor_ = file->message_type(36);
  static const int PBIdentitySkillInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIdentitySkillInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIdentitySkillInfo, skilllevel_),
  };
  PBIdentitySkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBIdentitySkillInfo_descriptor_,
      PBIdentitySkillInfo::default_instance_,
      PBIdentitySkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIdentitySkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIdentitySkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBIdentitySkillInfo));
  PBPlayerIdentity_descriptor_ = file->message_type(37);
  static const int PBPlayerIdentity_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerIdentity, resetcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerIdentity, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerIdentity, setinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerIdentity, skillinfo_),
  };
  PBPlayerIdentity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerIdentity_descriptor_,
      PBPlayerIdentity::default_instance_,
      PBPlayerIdentity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerIdentity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerIdentity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerIdentity));
  PBPlayerWuxuePageInfo_descriptor_ = file->message_type(38);
  static const int PBPlayerWuxuePageInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWuxuePageInfo, pageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWuxuePageInfo, skillid_),
  };
  PBPlayerWuxuePageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerWuxuePageInfo_descriptor_,
      PBPlayerWuxuePageInfo::default_instance_,
      PBPlayerWuxuePageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWuxuePageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWuxuePageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerWuxuePageInfo));
  PBPlayerWuxueSchemeInfo_descriptor_ = file->message_type(39);
  static const int PBPlayerWuxueSchemeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWuxueSchemeInfo, nameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWuxueSchemeInfo, allskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWuxueSchemeInfo, useskillid_),
  };
  PBPlayerWuxueSchemeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerWuxueSchemeInfo_descriptor_,
      PBPlayerWuxueSchemeInfo::default_instance_,
      PBPlayerWuxueSchemeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWuxueSchemeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWuxueSchemeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerWuxueSchemeInfo));
  PBPlayerWuxue_descriptor_ = file->message_type(40);
  static const int PBPlayerWuxue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWuxue, curschemenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWuxue, schemeinfo_),
  };
  PBPlayerWuxue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerWuxue_descriptor_,
      PBPlayerWuxue::default_instance_,
      PBPlayerWuxue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWuxue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWuxue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerWuxue));
  PBPlayerDart_descriptor_ = file->message_type(41);
  static const int PBPlayerDart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDart, dartcarglobalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDart, todaynormaldartcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDart, todaytianxiadartcount_),
  };
  PBPlayerDart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerDart_descriptor_,
      PBPlayerDart::default_instance_,
      PBPlayerDart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerDart));
  PBPlayerFactionBoss_descriptor_ = file->message_type(42);
  static const int PBPlayerFactionBoss_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionBoss, entertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionBoss, copymapid_),
  };
  PBPlayerFactionBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerFactionBoss_descriptor_,
      PBPlayerFactionBoss::default_instance_,
      PBPlayerFactionBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerFactionBoss));
  PBPlayerTitleInfo_descriptor_ = file->message_type(43);
  static const int PBPlayerTitleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitleInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitleInfo, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitleInfo, gettime_),
  };
  PBPlayerTitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerTitleInfo_descriptor_,
      PBPlayerTitleInfo::default_instance_,
      PBPlayerTitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerTitleInfo));
  PBPlayerClassfiyTitle_descriptor_ = file->message_type(44);
  static const int PBPlayerClassfiyTitle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClassfiyTitle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClassfiyTitle, info_),
  };
  PBPlayerClassfiyTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerClassfiyTitle_descriptor_,
      PBPlayerClassfiyTitle::default_instance_,
      PBPlayerClassfiyTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClassfiyTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClassfiyTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerClassfiyTitle));
  PBPlayerTitle_descriptor_ = file->message_type(45);
  static const int PBPlayerTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitle, classifytitle_),
  };
  PBPlayerTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerTitle_descriptor_,
      PBPlayerTitle::default_instance_,
      PBPlayerTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerTitle));
  PBPlayerDazuoguaji_descriptor_ = file->message_type(46);
  static const int PBPlayerDazuoguaji_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDazuoguaji, todaydazuoguajiexpcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDazuoguaji, todaydazuoguajiwisdomcount_),
  };
  PBPlayerDazuoguaji_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerDazuoguaji_descriptor_,
      PBPlayerDazuoguaji::default_instance_,
      PBPlayerDazuoguaji_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDazuoguaji, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDazuoguaji, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerDazuoguaji));
  PBFashion_descriptor_ = file->message_type(47);
  static const int PBFashion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFashion, fashionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFashion, time_),
  };
  PBFashion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFashion_descriptor_,
      PBFashion::default_instance_,
      PBFashion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFashion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFashion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFashion));
  PBPlayerFashion_descriptor_ = file->message_type(48);
  static const int PBPlayerFashion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFashion, fashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFashion, equipfashionid_),
  };
  PBPlayerFashion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerFashion_descriptor_,
      PBPlayerFashion::default_instance_,
      PBPlayerFashion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFashion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFashion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerFashion));
  PBEquipColumn_descriptor_ = file->message_type(49);
  static const int PBEquipColumn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipColumn, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipColumn, enhancelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipColumn, forgelevel_),
  };
  PBEquipColumn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEquipColumn_descriptor_,
      PBEquipColumn::default_instance_,
      PBEquipColumn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipColumn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipColumn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEquipColumn));
  PBPlayerEquipColumn_descriptor_ = file->message_type(50);
  static const int PBPlayerEquipColumn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerEquipColumn, info_),
  };
  PBPlayerEquipColumn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerEquipColumn_descriptor_,
      PBPlayerEquipColumn::default_instance_,
      PBPlayerEquipColumn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerEquipColumn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerEquipColumn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerEquipColumn));
  PBPlayerGreatWallTrain_descriptor_ = file->message_type(51);
  static const int PBPlayerGreatWallTrain_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGreatWallTrain, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGreatWallTrain, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGreatWallTrain, time_),
  };
  PBPlayerGreatWallTrain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerGreatWallTrain_descriptor_,
      PBPlayerGreatWallTrain::default_instance_,
      PBPlayerGreatWallTrain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGreatWallTrain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGreatWallTrain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerGreatWallTrain));
  PBActivityInfo_descriptor_ = file->message_type(52);
  static const int PBActivityInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityInfo, count_),
  };
  PBActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBActivityInfo_descriptor_,
      PBActivityInfo::default_instance_,
      PBActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBActivityInfo));
  PBPlayerActivity_descriptor_ = file->message_type(53);
  static const int PBPlayerActivity_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivity, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivity, liveness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivity, setid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivity, cleartime_),
  };
  PBPlayerActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerActivity_descriptor_,
      PBPlayerActivity::default_instance_,
      PBPlayerActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerActivity));
  PBLlayerRelive_descriptor_ = file->message_type(54);
  static const int PBLlayerRelive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLlayerRelive, freemaxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLlayerRelive, costcount_),
  };
  PBLlayerRelive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLlayerRelive_descriptor_,
      PBLlayerRelive::default_instance_,
      PBLlayerRelive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLlayerRelive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLlayerRelive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLlayerRelive));
  PBPlayerClimbTowerItem_descriptor_ = file->message_type(55);
  static const int PBPlayerClimbTowerItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClimbTowerItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClimbTowerItem, count_),
  };
  PBPlayerClimbTowerItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerClimbTowerItem_descriptor_,
      PBPlayerClimbTowerItem::default_instance_,
      PBPlayerClimbTowerItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClimbTowerItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClimbTowerItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerClimbTowerItem));
  PBPlayerClimbTower_descriptor_ = file->message_type(56);
  static const int PBPlayerClimbTower_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClimbTower, daycurrentcopymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClimbTower, dayitemunsettled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClimbTower, dayplaycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClimbTower, weekcurrentclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClimbTower, weekmaxcopyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClimbTower, nextjumpcpymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClimbTower, luckdrawrightnow_),
  };
  PBPlayerClimbTower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerClimbTower_descriptor_,
      PBPlayerClimbTower::default_instance_,
      PBPlayerClimbTower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClimbTower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerClimbTower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerClimbTower));
  PBPlayerPvpData_descriptor_ = file->message_type(57);
  static const int PBPlayerPvpData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, entercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, failnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, capturenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, assistnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, deadnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, megakill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, godlike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, mvpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, exitreadycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, nextentertime_),
  };
  PBPlayerPvpData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerPvpData_descriptor_,
      PBPlayerPvpData::default_instance_,
      PBPlayerPvpData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvpData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerPvpData));
  PBPlayerPvp_descriptor_ = file->message_type(58);
  static const int PBPlayerPvp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvp, pvpdata_),
  };
  PBPlayerPvp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerPvp_descriptor_,
      PBPlayerPvp::default_instance_,
      PBPlayerPvp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerPvp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerPvp));
  PBPlayerLoginWealData_descriptor_ = file->message_type(59);
  static const int PBPlayerLoginWealData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerLoginWealData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerLoginWealData, prizeday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerLoginWealData, prizetime_),
  };
  PBPlayerLoginWealData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerLoginWealData_descriptor_,
      PBPlayerLoginWealData::default_instance_,
      PBPlayerLoginWealData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerLoginWealData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerLoginWealData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerLoginWealData));
  PBPlayerWeal_descriptor_ = file->message_type(60);
  static const int PBPlayerWeal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWeal, logindata_),
  };
  PBPlayerWeal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerWeal_descriptor_,
      PBPlayerWeal::default_instance_,
      PBPlayerWeal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWeal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerWeal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerWeal));
  PBSinglePvpRecord_descriptor_ = file->message_type(61);
  static const int PBSinglePvpRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpRecord, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpRecord, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpRecord, result_),
  };
  PBSinglePvpRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSinglePvpRecord_descriptor_,
      PBSinglePvpRecord::default_instance_,
      PBSinglePvpRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSinglePvpRecord));
  PBPlayerSinglePvp_descriptor_ = file->message_type(62);
  static const int PBPlayerSinglePvp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSinglePvp, dayentercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSinglePvp, wincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSinglePvp, failcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSinglePvp, equalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSinglePvp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSinglePvp, maxscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSinglePvp, firstprizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSinglePvp, dayprize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSinglePvp, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSinglePvp, weekcount_),
  };
  PBPlayerSinglePvp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerSinglePvp_descriptor_,
      PBPlayerSinglePvp::default_instance_,
      PBPlayerSinglePvp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSinglePvp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSinglePvp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerSinglePvp));
  PBPlayerCommon_descriptor_ = file->message_type(63);
  static const int PBPlayerCommon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerCommon, strongerid_),
  };
  PBPlayerCommon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerCommon_descriptor_,
      PBPlayerCommon::default_instance_,
      PBPlayerCommon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerCommon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerCommon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerCommon));
  PBPlayerManor_descriptor_ = file->message_type(64);
  static const int PBPlayerManor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerManor, enterbattlefieldtime_),
  };
  PBPlayerManor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerManor_descriptor_,
      PBPlayerManor::default_instance_,
      PBPlayerManor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerManor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerManor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerManor));
  PBPlayerSystem_descriptor_ = file->message_type(65);
  static const int PBPlayerSystem_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, saveorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, cooling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, trade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, playerstore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, weal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, playerwulue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, wentao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, copymap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, systemswitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, conlletion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, wuxue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, dart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, factionboss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, dazuoguaji_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, fashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, equipcolumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, climbtower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, pvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, gwtrain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, relive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, singlepvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, manor_),
  };
  PBPlayerSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerSystem_descriptor_,
      PBPlayerSystem::default_instance_,
      PBPlayerSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerSystem));
  PBPlayerGlobalBase_descriptor_ = file->message_type(66);
  static const int PBPlayerGlobalBase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalBase, view_),
  };
  PBPlayerGlobalBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerGlobalBase_descriptor_,
      PBPlayerGlobalBase::default_instance_,
      PBPlayerGlobalBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerGlobalBase));
  PBSaleMoneyInfo_descriptor_ = file->message_type(67);
  static const int PBSaleMoneyInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyInfo, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyInfo, sliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyInfo, time_),
  };
  PBSaleMoneyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSaleMoneyInfo_descriptor_,
      PBSaleMoneyInfo::default_instance_,
      PBSaleMoneyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSaleMoneyInfo));
  PBSaleMoneyLog_descriptor_ = file->message_type(68);
  static const int PBSaleMoneyLog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyLog, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyLog, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyLog, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyLog, sliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyLog, time_),
  };
  PBSaleMoneyLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSaleMoneyLog_descriptor_,
      PBSaleMoneyLog::default_instance_,
      PBSaleMoneyLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSaleMoneyLog));
  PBPlayerGlobalSaleMoney_descriptor_ = file->message_type(69);
  static const int PBPlayerGlobalSaleMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalSaleMoney, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalSaleMoney, log_),
  };
  PBPlayerGlobalSaleMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerGlobalSaleMoney_descriptor_,
      PBPlayerGlobalSaleMoney::default_instance_,
      PBPlayerGlobalSaleMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalSaleMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalSaleMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerGlobalSaleMoney));
  PBPlayerGlobalSaleMoneySave_descriptor_ = file->message_type(70);
  static const int PBPlayerGlobalSaleMoneySave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalSaleMoneySave, log_),
  };
  PBPlayerGlobalSaleMoneySave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerGlobalSaleMoneySave_descriptor_,
      PBPlayerGlobalSaleMoneySave::default_instance_,
      PBPlayerGlobalSaleMoneySave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalSaleMoneySave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalSaleMoneySave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerGlobalSaleMoneySave));
  PBSaleMoneyInfoEx_descriptor_ = file->message_type(71);
  static const int PBSaleMoneyInfoEx_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyInfoEx, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyInfoEx, display_),
  };
  PBSaleMoneyInfoEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSaleMoneyInfoEx_descriptor_,
      PBSaleMoneyInfoEx::default_instance_,
      PBSaleMoneyInfoEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyInfoEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyInfoEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSaleMoneyInfoEx));
  PBSaleMoneyStatistics_descriptor_ = file->message_type(72);
  static const int PBSaleMoneyStatistics_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyStatistics, prices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyStatistics, amounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyStatistics, timetotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyStatistics, amounttotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyStatistics, moneytotal_),
  };
  PBSaleMoneyStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSaleMoneyStatistics_descriptor_,
      PBSaleMoneyStatistics::default_instance_,
      PBSaleMoneyStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSaleMoneyStatistics));
  PBSaleMoneyRecentTradeLog_descriptor_ = file->message_type(73);
  static const int PBSaleMoneyRecentTradeLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyRecentTradeLog, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyRecentTradeLog, sliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyRecentTradeLog, time_),
  };
  PBSaleMoneyRecentTradeLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSaleMoneyRecentTradeLog_descriptor_,
      PBSaleMoneyRecentTradeLog::default_instance_,
      PBSaleMoneyRecentTradeLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyRecentTradeLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyRecentTradeLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSaleMoneyRecentTradeLog));
  PBSaleMoneyPriceData_descriptor_ = file->message_type(74);
  static const int PBSaleMoneyPriceData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyPriceData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyPriceData, aveprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyPriceData, statistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyPriceData, curstatistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyPriceData, refprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyPriceData, supplystamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyPriceData, nextsupplystamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyPriceData, lastchkstamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyPriceData, chkstatistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyPriceData, tradelog_),
  };
  PBSaleMoneyPriceData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSaleMoneyPriceData_descriptor_,
      PBSaleMoneyPriceData::default_instance_,
      PBSaleMoneyPriceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyPriceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSaleMoneyPriceData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSaleMoneyPriceData));
  PBAuctionItemInfo_descriptor_ = file->message_type(75);
  static const int PBAuctionItemInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfo, saleorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfo, salesliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfo, unlocktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfo, buysliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfo, buycount_),
  };
  PBAuctionItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAuctionItemInfo_descriptor_,
      PBAuctionItemInfo::default_instance_,
      PBAuctionItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAuctionItemInfo));
  PBAuctionLog_descriptor_ = file->message_type(76);
  static const int PBAuctionLog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionLog, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionLog, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionLog, pbitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionLog, sliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionLog, time_),
  };
  PBAuctionLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAuctionLog_descriptor_,
      PBAuctionLog::default_instance_,
      PBAuctionLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAuctionLog));
  PBPlayerGlobalAuction_descriptor_ = file->message_type(77);
  static const int PBPlayerGlobalAuction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalAuction, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalAuction, lockinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalAuction, log_),
  };
  PBPlayerGlobalAuction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerGlobalAuction_descriptor_,
      PBPlayerGlobalAuction::default_instance_,
      PBPlayerGlobalAuction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalAuction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalAuction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerGlobalAuction));
  PBPlayerGlobalAuctionSave_descriptor_ = file->message_type(78);
  static const int PBPlayerGlobalAuctionSave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalAuctionSave, log_),
  };
  PBPlayerGlobalAuctionSave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerGlobalAuctionSave_descriptor_,
      PBPlayerGlobalAuctionSave::default_instance_,
      PBPlayerGlobalAuctionSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalAuctionSave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalAuctionSave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerGlobalAuctionSave));
  PBAuctionItemAve_descriptor_ = file->message_type(79);
  static const int PBAuctionItemAve_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemAve, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemAve, saledcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemAve, saledtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemAve, allsliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemAve, aveprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemAve, price1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemAve, price2_),
  };
  PBAuctionItemAve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAuctionItemAve_descriptor_,
      PBAuctionItemAve::default_instance_,
      PBAuctionItemAve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemAve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemAve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAuctionItemAve));
  PBAuctionItemInfoEx_descriptor_ = file->message_type(80);
  static const int PBAuctionItemInfoEx_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfoEx, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfoEx, saler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfoEx, locker_),
  };
  PBAuctionItemInfoEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAuctionItemInfoEx_descriptor_,
      PBAuctionItemInfoEx::default_instance_,
      PBAuctionItemInfoEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfoEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionItemInfoEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAuctionItemInfoEx));
  PBAuctionPriceData_descriptor_ = file->message_type(81);
  static const int PBAuctionPriceData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionPriceData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionPriceData, itemave_),
  };
  PBAuctionPriceData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAuctionPriceData_descriptor_,
      PBAuctionPriceData::default_instance_,
      PBAuctionPriceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionPriceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionPriceData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAuctionPriceData));
  PBPlayerGlobal_descriptor_ = file->message_type(82);
  static const int PBPlayerGlobal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobal, salemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobal, auction_),
  };
  PBPlayerGlobal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerGlobal_descriptor_,
      PBPlayerGlobal::default_instance_,
      PBPlayerGlobal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerGlobal));
  PBPlayerGlobalData_descriptor_ = file->message_type(83);
  static const int PBPlayerGlobalData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalData, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalData, salemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalData, auction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalData, toplist_),
  };
  PBPlayerGlobalData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerGlobalData_descriptor_,
      PBPlayerGlobalData::default_instance_,
      PBPlayerGlobalData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerGlobalData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerGlobalData));
  PBItemUseCount_descriptor_ = file->message_type(84);
  static const int PBItemUseCount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUseCount, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUseCount, dayusecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUseCount, weekusecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUseCount, monthusecount_),
  };
  PBItemUseCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemUseCount_descriptor_,
      PBItemUseCount::default_instance_,
      PBItemUseCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUseCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemUseCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemUseCount));
  PBEquipMakeSkilled_descriptor_ = file->message_type(85);
  static const int PBEquipMakeSkilled_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeSkilled, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeSkilled, skilledlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeSkilled, skilledpoint_),
  };
  PBEquipMakeSkilled_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEquipMakeSkilled_descriptor_,
      PBEquipMakeSkilled::default_instance_,
      PBEquipMakeSkilled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeSkilled, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeSkilled, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEquipMakeSkilled));
  PBEquipMakeVigour_descriptor_ = file->message_type(86);
  static const int PBEquipMakeVigour_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeVigour, vigour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeVigour, lastaddtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeVigour, vigourfrozen_),
  };
  PBEquipMakeVigour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEquipMakeVigour_descriptor_,
      PBEquipMakeVigour::default_instance_,
      PBEquipMakeVigour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeVigour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeVigour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEquipMakeVigour));
  PBEquipMakeOEM_descriptor_ = file->message_type(87);
  static const int PBEquipMakeOEM_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeOEM, makeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeOEM, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeOEM, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeOEM, countused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeOEM, validmakeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeOEM, countreal_),
  };
  PBEquipMakeOEM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEquipMakeOEM_descriptor_,
      PBEquipMakeOEM::default_instance_,
      PBEquipMakeOEM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeOEM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquipMakeOEM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEquipMakeOEM));
  PBPlayerBag_descriptor_ = file->message_type(88);
  static const int PBPlayerBag_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBag, saveorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBag, baglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBag, equiplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBag, usecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBag, skilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBag, vigour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBag, oems_),
  };
  PBPlayerBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerBag_descriptor_,
      PBPlayerBag::default_instance_,
      PBPlayerBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerBag));
  PBGoods_descriptor_ = file->message_type(89);
  static const int PBGoods_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoods, store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoods, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoods, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoods, time_),
  };
  PBGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGoods_descriptor_,
      PBGoods::default_instance_,
      PBGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGoods));
  PBPlayerStore_descriptor_ = file->message_type(90);
  static const int PBPlayerStore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStore, saveorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStore, goods_),
  };
  PBPlayerStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerStore_descriptor_,
      PBPlayerStore::default_instance_,
      PBPlayerStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerStore));
  PBClientData_descriptor_ = file->message_type(91);
  static const int PBClientData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClientData, saveorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClientData, clientdata_),
  };
  PBClientData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClientData_descriptor_,
      PBClientData::default_instance_,
      PBClientData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClientData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClientData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClientData));
  PBMailSaleMoneyBuy_descriptor_ = file->message_type(92);
  static const int PBMailSaleMoneyBuy_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneyBuy, saler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneyBuy, getbindcash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneyBuy, expendsliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneyBuy, economizesliver_),
  };
  PBMailSaleMoneyBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailSaleMoneyBuy_descriptor_,
      PBMailSaleMoneyBuy::default_instance_,
      PBMailSaleMoneyBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneyBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneyBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailSaleMoneyBuy));
  PBMailSaleMoneySale_descriptor_ = file->message_type(93);
  static const int PBMailSaleMoneySale_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneySale, buyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneySale, salecash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneySale, getsliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneySale, extrasliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneySale, storescore_),
  };
  PBMailSaleMoneySale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailSaleMoneySale_descriptor_,
      PBMailSaleMoneySale::default_instance_,
      PBMailSaleMoneySale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneySale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneySale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailSaleMoneySale));
  PBMailSaleMoneyBuyReturn_descriptor_ = file->message_type(94);
  static const int PBMailSaleMoneyBuyReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneyBuyReturn, sliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneyBuyReturn, expendsliver_),
  };
  PBMailSaleMoneyBuyReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailSaleMoneyBuyReturn_descriptor_,
      PBMailSaleMoneyBuyReturn::default_instance_,
      PBMailSaleMoneyBuyReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneyBuyReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneyBuyReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailSaleMoneyBuyReturn));
  PBMailSaleMoneySaleReturn_descriptor_ = file->message_type(95);
  static const int PBMailSaleMoneySaleReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneySaleReturn, cash_),
  };
  PBMailSaleMoneySaleReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailSaleMoneySaleReturn_descriptor_,
      PBMailSaleMoneySaleReturn::default_instance_,
      PBMailSaleMoneySaleReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneySaleReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSaleMoneySaleReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailSaleMoneySaleReturn));
  PBMailAuctionLockRet_descriptor_ = file->message_type(96);
  static const int PBMailAuctionLockRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionLockRet, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionLockRet, retsliver_),
  };
  PBMailAuctionLockRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailAuctionLockRet_descriptor_,
      PBMailAuctionLockRet::default_instance_,
      PBMailAuctionLockRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionLockRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionLockRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailAuctionLockRet));
  PBMailAuctionSaleTimeOut_descriptor_ = file->message_type(97);
  static const int PBMailAuctionSaleTimeOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionSaleTimeOut, item_),
  };
  PBMailAuctionSaleTimeOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailAuctionSaleTimeOut_descriptor_,
      PBMailAuctionSaleTimeOut::default_instance_,
      PBMailAuctionSaleTimeOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionSaleTimeOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionSaleTimeOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailAuctionSaleTimeOut));
  PBMailAuctionSaleGet_descriptor_ = file->message_type(98);
  static const int PBMailAuctionSaleGet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionSaleGet, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionSaleGet, getsliver_),
  };
  PBMailAuctionSaleGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailAuctionSaleGet_descriptor_,
      PBMailAuctionSaleGet::default_instance_,
      PBMailAuctionSaleGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionSaleGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionSaleGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailAuctionSaleGet));
  PBMailAuctionBuyGet_descriptor_ = file->message_type(99);
  static const int PBMailAuctionBuyGet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionBuyGet, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionBuyGet, sliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionBuyGet, extrasliver_),
  };
  PBMailAuctionBuyGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailAuctionBuyGet_descriptor_,
      PBMailAuctionBuyGet::default_instance_,
      PBMailAuctionBuyGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionBuyGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailAuctionBuyGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailAuctionBuyGet));
  PBMailPromote_descriptor_ = file->message_type(100);
  static const int PBMailPromote_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailPromote, step_),
  };
  PBMailPromote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailPromote_descriptor_,
      PBMailPromote::default_instance_,
      PBMailPromote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailPromote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailPromote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailPromote));
  PBMailFactionBoss_descriptor_ = file->message_type(101);
  static const int PBMailFactionBoss_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailFactionBoss, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailFactionBoss, score_),
  };
  PBMailFactionBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailFactionBoss_descriptor_,
      PBMailFactionBoss::default_instance_,
      PBMailFactionBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailFactionBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailFactionBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailFactionBoss));
  PBMailWorldBoss_descriptor_ = file->message_type(102);
  static const int PBMailWorldBoss_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailWorldBoss, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailWorldBoss, bossactivityid_),
  };
  PBMailWorldBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailWorldBoss_descriptor_,
      PBMailWorldBoss::default_instance_,
      PBMailWorldBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailWorldBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailWorldBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailWorldBoss));
  PBMailCopymapCashReward_descriptor_ = file->message_type(103);
  static const int PBMailCopymapCashReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailCopymapCashReward, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailCopymapCashReward, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailCopymapCashReward, cash_),
  };
  PBMailCopymapCashReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailCopymapCashReward_descriptor_,
      PBMailCopymapCashReward::default_instance_,
      PBMailCopymapCashReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailCopymapCashReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailCopymapCashReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailCopymapCashReward));
  PBMailSinglePvpFirstPrize_descriptor_ = file->message_type(104);
  static const int PBMailSinglePvpFirstPrize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSinglePvpFirstPrize, id_),
  };
  PBMailSinglePvpFirstPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailSinglePvpFirstPrize_descriptor_,
      PBMailSinglePvpFirstPrize::default_instance_,
      PBMailSinglePvpFirstPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSinglePvpFirstPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSinglePvpFirstPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailSinglePvpFirstPrize));
  PBMailSinglePvpDayPrize_descriptor_ = file->message_type(105);
  static const int PBMailSinglePvpDayPrize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSinglePvpDayPrize, daycount_),
  };
  PBMailSinglePvpDayPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailSinglePvpDayPrize_descriptor_,
      PBMailSinglePvpDayPrize::default_instance_,
      PBMailSinglePvpDayPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSinglePvpDayPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSinglePvpDayPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailSinglePvpDayPrize));
  PBMailSinglePvpWeekPrize_descriptor_ = file->message_type(106);
  static const int PBMailSinglePvpWeekPrize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSinglePvpWeekPrize, id_),
  };
  PBMailSinglePvpWeekPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailSinglePvpWeekPrize_descriptor_,
      PBMailSinglePvpWeekPrize::default_instance_,
      PBMailSinglePvpWeekPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSinglePvpWeekPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailSinglePvpWeekPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailSinglePvpWeekPrize));
  PBMailManorTitleGet_descriptor_ = file->message_type(107);
  static const int PBMailManorTitleGet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailManorTitleGet, title_),
  };
  PBMailManorTitleGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailManorTitleGet_descriptor_,
      PBMailManorTitleGet::default_instance_,
      PBMailManorTitleGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailManorTitleGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailManorTitleGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailManorTitleGet));
  PBMailManorResult_descriptor_ = file->message_type(108);
  static const int PBMailManorResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailManorResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailManorResult, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailManorResult, enemyfactionname_),
  };
  PBMailManorResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailManorResult_descriptor_,
      PBMailManorResult::default_instance_,
      PBMailManorResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailManorResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailManorResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailManorResult));
  PBMailFactionInfo_descriptor_ = file->message_type(109);
  static const int PBMailFactionInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailFactionInfo, name_),
  };
  PBMailFactionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailFactionInfo_descriptor_,
      PBMailFactionInfo::default_instance_,
      PBMailFactionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailFactionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailFactionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailFactionInfo));
  PBMailTopListInfo_descriptor_ = file->message_type(110);
  static const int PBMailTopListInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailTopListInfo, order_),
  };
  PBMailTopListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailTopListInfo_descriptor_,
      PBMailTopListInfo::default_instance_,
      PBMailTopListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailTopListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailTopListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailTopListInfo));
  PBMail_descriptor_ = file->message_type(111);
  static const int PBMail_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, readed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, smbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, smsale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, smbuyret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, smsaleret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, aulockret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, autimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, ausaleget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, aubuyget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, promote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, doingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, factionboss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, worldboss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, copymapcash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, singlepvpfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, singlepvpday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, singlepvpweek_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, manortitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, manorresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, factioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, toplist_),
  };
  PBMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMail_descriptor_,
      PBMail::default_instance_,
      PBMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMail));
  PBPlayerMail_descriptor_ = file->message_type(112);
  static const int PBPlayerMail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerMail, saveorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerMail, maillist_),
  };
  PBPlayerMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerMail_descriptor_,
      PBPlayerMail::default_instance_,
      PBPlayerMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerMail));
  PBFriendInfo_descriptor_ = file->message_type(113);
  static const int PBFriendInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendInfo, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendInfo, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendInfo, friendvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendInfo, fightpower_),
  };
  PBFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFriendInfo_descriptor_,
      PBFriendInfo::default_instance_,
      PBFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFriendInfo));
  PBFriendGroup_descriptor_ = file->message_type(114);
  static const int PBFriendGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendGroup, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendGroup, list_),
  };
  PBFriendGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFriendGroup_descriptor_,
      PBFriendGroup::default_instance_,
      PBFriendGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFriendGroup));
  PBPlayerFriend_descriptor_ = file->message_type(115);
  static const int PBPlayerFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFriend, saveorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFriend, group_),
  };
  PBPlayerFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerFriend_descriptor_,
      PBPlayerFriend::default_instance_,
      PBPlayerFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerFriend));
  PBFactionBossPersonalTop_descriptor_ = file->message_type(116);
  static const int PBFactionBossPersonalTop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossPersonalTop, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossPersonalTop, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossPersonalTop, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossPersonalTop, time_),
  };
  PBFactionBossPersonalTop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionBossPersonalTop_descriptor_,
      PBFactionBossPersonalTop::default_instance_,
      PBFactionBossPersonalTop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossPersonalTop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossPersonalTop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionBossPersonalTop));
  PBFactionBossFactionTop_descriptor_ = file->message_type(117);
  static const int PBFactionBossFactionTop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossFactionTop, faction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossFactionTop, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossFactionTop, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossFactionTop, time_),
  };
  PBFactionBossFactionTop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionBossFactionTop_descriptor_,
      PBFactionBossFactionTop::default_instance_,
      PBFactionBossFactionTop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossFactionTop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossFactionTop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionBossFactionTop));
  PBFactionBossUnionTop_descriptor_ = file->message_type(118);
  static const int PBFactionBossUnionTop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossUnionTop, faction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossUnionTop, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossUnionTop, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossUnionTop, time_),
  };
  PBFactionBossUnionTop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionBossUnionTop_descriptor_,
      PBFactionBossUnionTop::default_instance_,
      PBFactionBossUnionTop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossUnionTop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBossUnionTop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionBossUnionTop));
  PBPlayerData_descriptor_ = file->message_type(119);
  static const int PBPlayerData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerData, accountinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerData, playerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerData, playersystem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerData, playerbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerData, clientdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerData, playerquest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerData, playermail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerData, playerfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerData, playerfaction_),
  };
  PBPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerData_descriptor_,
      PBPlayerData::default_instance_,
      PBPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerData));
  PBPlayerEquipData_descriptor_ = file->message_type(120);
  static const int PBPlayerEquipData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerEquipData, equip_),
  };
  PBPlayerEquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerEquipData_descriptor_,
      PBPlayerEquipData::default_instance_,
      PBPlayerEquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerEquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerEquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerEquipData));
  PBGhostGameAttr_descriptor_ = file->message_type(121);
  static const int PBGhostGameAttr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostGameAttr, attr_),
  };
  PBGhostGameAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostGameAttr_descriptor_,
      PBGhostGameAttr::default_instance_,
      PBGhostGameAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostGameAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostGameAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostGameAttr));
  PBPlayerView_descriptor_ = file->message_type(122);
  static const int PBPlayerView_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerView, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerView, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerView, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerView, attri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerView, pkvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerView, bingfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerView, singlepvpinfo_),
  };
  PBPlayerView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerView_descriptor_,
      PBPlayerView::default_instance_,
      PBPlayerView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerView));
  PBSinglePvpInfo_descriptor_ = file->message_type(123);
  static const int PBSinglePvpInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpInfo, wincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpInfo, failcount_),
  };
  PBSinglePvpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSinglePvpInfo_descriptor_,
      PBSinglePvpInfo::default_instance_,
      PBSinglePvpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSinglePvpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSinglePvpInfo));
  PBWorldBossKillInfo_descriptor_ = file->message_type(124);
  static const int PBWorldBossKillInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossKillInfo, worldbossactivityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossKillInfo, lastkillername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossKillInfo, lastdeadtimetick_),
  };
  PBWorldBossKillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldBossKillInfo_descriptor_,
      PBWorldBossKillInfo::default_instance_,
      PBWorldBossKillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossKillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossKillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldBossKillInfo));
  PBWorldBossKill_descriptor_ = file->message_type(125);
  static const int PBWorldBossKill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossKill, killinfos_),
  };
  PBWorldBossKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldBossKill_descriptor_,
      PBWorldBossKill::default_instance_,
      PBWorldBossKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldBossKill));
  PBWTopListInfo_descriptor_ = file->message_type(126);
  static const int PBWTopListInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWTopListInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWTopListInfo, cleartime_),
  };
  PBWTopListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWTopListInfo_descriptor_,
      PBWTopListInfo::default_instance_,
      PBWTopListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWTopListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWTopListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWTopListInfo));
  PBTopListList_descriptor_ = file->message_type(127);
  static const int PBTopListList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListList, info_list_),
  };
  PBTopListList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTopListList_descriptor_,
      PBTopListList::default_instance_,
      PBTopListList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTopListList));
  PBGlobalServerData_descriptor_ = file->message_type(128);
  static const int PBGlobalServerData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalServerData, salemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalServerData, auction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalServerData, worldbosskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalServerData, toplist_),
  };
  PBGlobalServerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGlobalServerData_descriptor_,
      PBGlobalServerData::default_instance_,
      PBGlobalServerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalServerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGlobalServerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGlobalServerData));
  PBWorldFactionBossData_descriptor_ = file->message_type(129);
  static const int PBWorldFactionBossData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldFactionBossData, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldFactionBossData, wholescore_),
  };
  PBWorldFactionBossData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldFactionBossData_descriptor_,
      PBWorldFactionBossData::default_instance_,
      PBWorldFactionBossData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldFactionBossData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldFactionBossData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldFactionBossData));
  PBTreasureValueInfo_descriptor_ = file->message_type(130);
  static const int PBTreasureValueInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureValueInfo, prizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureValueInfo, dayvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureValueInfo, daycount_),
  };
  PBTreasureValueInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTreasureValueInfo_descriptor_,
      PBTreasureValueInfo::default_instance_,
      PBTreasureValueInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureValueInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTreasureValueInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTreasureValueInfo));
  PBWorldTreasureData_descriptor_ = file->message_type(131);
  static const int PBWorldTreasureData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldTreasureData, treasureinfo_),
  };
  PBWorldTreasureData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldTreasureData_descriptor_,
      PBWorldTreasureData::default_instance_,
      PBWorldTreasureData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldTreasureData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldTreasureData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldTreasureData));
  PBCorpsMemberInfo_descriptor_ = file->message_type(132);
  static const int PBCorpsMemberInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsMemberInfo, corpsjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsMemberInfo, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsMemberInfo, fobitcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsMemberInfo, nextsettime_),
  };
  PBCorpsMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsMemberInfo_descriptor_,
      PBCorpsMemberInfo::default_instance_,
      PBCorpsMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsMemberInfo));
  PBCorpsInfo_descriptor_ = file->message_type(133);
  static const int PBCorpsInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsInfo, corpsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsInfo, memberinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsInfo, declaration_),
  };
  PBCorpsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsInfo_descriptor_,
      PBCorpsInfo::default_instance_,
      PBCorpsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsInfo));
  PBWorldCorpsData_descriptor_ = file->message_type(134);
  static const int PBWorldCorpsData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldCorpsData, corpsinfo_),
  };
  PBWorldCorpsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldCorpsData_descriptor_,
      PBWorldCorpsData::default_instance_,
      PBWorldCorpsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldCorpsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldCorpsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldCorpsData));
  PBWorldServerData_descriptor_ = file->message_type(135);
  static const int PBWorldServerData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldServerData, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldServerData, factionboss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldServerData, treasure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldServerData, cleardaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldServerData, corps_),
  };
  PBWorldServerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldServerData_descriptor_,
      PBWorldServerData::default_instance_,
      PBWorldServerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldServerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldServerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldServerData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PlayerStruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerDisplay_descriptor_, &PBPlayerDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerShape_descriptor_, &PBPlayerShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerShapeData_descriptor_, &PBPlayerShapeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerFashionData_descriptor_, &PBPlayerFashionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerAvatar_descriptor_, &PBPlayerAvatar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerMoney_descriptor_, &PBPlayerMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEnergy_descriptor_, &PBEnergy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEquipLucky_descriptor_, &PBEquipLucky::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCopymapDayCount_descriptor_, &PBCopymapDayCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamTaskDayCount_descriptor_, &PBTeamTaskDayCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBForbidSpeak_descriptor_, &PBForbidSpeak::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerBase_descriptor_, &PBPlayerBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCoolingInfo_descriptor_, &PBCoolingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCooling_descriptor_, &PBCooling::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSystemSkill_descriptor_, &PBSystemSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSystemBuff_descriptor_, &PBSystemBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSystemCounter_descriptor_, &PBSystemCounter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSystemSwitch_descriptor_, &PBSystemSwitch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerColletion_descriptor_, &PBPlayerColletion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPrize_descriptor_, &PBPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerPrize_descriptor_, &PBPlayerPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerTrade_descriptor_, &PBPlayerTrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBQuestItem_descriptor_, &PBQuestItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBQuest_descriptor_, &PBQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBQuestCompleted_descriptor_, &PBQuestCompleted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerQuest_descriptor_, &PBPlayerQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWenTaoSchemeInfo_descriptor_, &PBWenTaoSchemeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWenTaoScheme_descriptor_, &PBWenTaoScheme::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBingFa_descriptor_, &PBBingFa::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerWenTao_descriptor_, &PBPlayerWenTao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWulueZhanlue_descriptor_, &PBWulueZhanlue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWulueScheme_descriptor_, &PBWulueScheme::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerWulue_descriptor_, &PBPlayerWulue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCopymapInfo_descriptor_, &PBCopymapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerCopymap_descriptor_, &PBPlayerCopymap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBIdentitySetInfo_descriptor_, &PBIdentitySetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBIdentitySkillInfo_descriptor_, &PBIdentitySkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerIdentity_descriptor_, &PBPlayerIdentity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerWuxuePageInfo_descriptor_, &PBPlayerWuxuePageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerWuxueSchemeInfo_descriptor_, &PBPlayerWuxueSchemeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerWuxue_descriptor_, &PBPlayerWuxue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerDart_descriptor_, &PBPlayerDart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerFactionBoss_descriptor_, &PBPlayerFactionBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerTitleInfo_descriptor_, &PBPlayerTitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerClassfiyTitle_descriptor_, &PBPlayerClassfiyTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerTitle_descriptor_, &PBPlayerTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerDazuoguaji_descriptor_, &PBPlayerDazuoguaji::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFashion_descriptor_, &PBFashion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerFashion_descriptor_, &PBPlayerFashion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEquipColumn_descriptor_, &PBEquipColumn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerEquipColumn_descriptor_, &PBPlayerEquipColumn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerGreatWallTrain_descriptor_, &PBPlayerGreatWallTrain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBActivityInfo_descriptor_, &PBActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerActivity_descriptor_, &PBPlayerActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLlayerRelive_descriptor_, &PBLlayerRelive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerClimbTowerItem_descriptor_, &PBPlayerClimbTowerItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerClimbTower_descriptor_, &PBPlayerClimbTower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerPvpData_descriptor_, &PBPlayerPvpData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerPvp_descriptor_, &PBPlayerPvp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerLoginWealData_descriptor_, &PBPlayerLoginWealData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerWeal_descriptor_, &PBPlayerWeal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSinglePvpRecord_descriptor_, &PBSinglePvpRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerSinglePvp_descriptor_, &PBPlayerSinglePvp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerCommon_descriptor_, &PBPlayerCommon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerManor_descriptor_, &PBPlayerManor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerSystem_descriptor_, &PBPlayerSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerGlobalBase_descriptor_, &PBPlayerGlobalBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSaleMoneyInfo_descriptor_, &PBSaleMoneyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSaleMoneyLog_descriptor_, &PBSaleMoneyLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerGlobalSaleMoney_descriptor_, &PBPlayerGlobalSaleMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerGlobalSaleMoneySave_descriptor_, &PBPlayerGlobalSaleMoneySave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSaleMoneyInfoEx_descriptor_, &PBSaleMoneyInfoEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSaleMoneyStatistics_descriptor_, &PBSaleMoneyStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSaleMoneyRecentTradeLog_descriptor_, &PBSaleMoneyRecentTradeLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSaleMoneyPriceData_descriptor_, &PBSaleMoneyPriceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAuctionItemInfo_descriptor_, &PBAuctionItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAuctionLog_descriptor_, &PBAuctionLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerGlobalAuction_descriptor_, &PBPlayerGlobalAuction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerGlobalAuctionSave_descriptor_, &PBPlayerGlobalAuctionSave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAuctionItemAve_descriptor_, &PBAuctionItemAve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAuctionItemInfoEx_descriptor_, &PBAuctionItemInfoEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAuctionPriceData_descriptor_, &PBAuctionPriceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerGlobal_descriptor_, &PBPlayerGlobal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerGlobalData_descriptor_, &PBPlayerGlobalData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemUseCount_descriptor_, &PBItemUseCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEquipMakeSkilled_descriptor_, &PBEquipMakeSkilled::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEquipMakeVigour_descriptor_, &PBEquipMakeVigour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEquipMakeOEM_descriptor_, &PBEquipMakeOEM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerBag_descriptor_, &PBPlayerBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGoods_descriptor_, &PBGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerStore_descriptor_, &PBPlayerStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClientData_descriptor_, &PBClientData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailSaleMoneyBuy_descriptor_, &PBMailSaleMoneyBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailSaleMoneySale_descriptor_, &PBMailSaleMoneySale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailSaleMoneyBuyReturn_descriptor_, &PBMailSaleMoneyBuyReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailSaleMoneySaleReturn_descriptor_, &PBMailSaleMoneySaleReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailAuctionLockRet_descriptor_, &PBMailAuctionLockRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailAuctionSaleTimeOut_descriptor_, &PBMailAuctionSaleTimeOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailAuctionSaleGet_descriptor_, &PBMailAuctionSaleGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailAuctionBuyGet_descriptor_, &PBMailAuctionBuyGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailPromote_descriptor_, &PBMailPromote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailFactionBoss_descriptor_, &PBMailFactionBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailWorldBoss_descriptor_, &PBMailWorldBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailCopymapCashReward_descriptor_, &PBMailCopymapCashReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailSinglePvpFirstPrize_descriptor_, &PBMailSinglePvpFirstPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailSinglePvpDayPrize_descriptor_, &PBMailSinglePvpDayPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailSinglePvpWeekPrize_descriptor_, &PBMailSinglePvpWeekPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailManorTitleGet_descriptor_, &PBMailManorTitleGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailManorResult_descriptor_, &PBMailManorResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailFactionInfo_descriptor_, &PBMailFactionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailTopListInfo_descriptor_, &PBMailTopListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMail_descriptor_, &PBMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerMail_descriptor_, &PBPlayerMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFriendInfo_descriptor_, &PBFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFriendGroup_descriptor_, &PBFriendGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerFriend_descriptor_, &PBPlayerFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionBossPersonalTop_descriptor_, &PBFactionBossPersonalTop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionBossFactionTop_descriptor_, &PBFactionBossFactionTop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionBossUnionTop_descriptor_, &PBFactionBossUnionTop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerData_descriptor_, &PBPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerEquipData_descriptor_, &PBPlayerEquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostGameAttr_descriptor_, &PBGhostGameAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerView_descriptor_, &PBPlayerView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSinglePvpInfo_descriptor_, &PBSinglePvpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldBossKillInfo_descriptor_, &PBWorldBossKillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldBossKill_descriptor_, &PBWorldBossKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWTopListInfo_descriptor_, &PBWTopListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTopListList_descriptor_, &PBTopListList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGlobalServerData_descriptor_, &PBGlobalServerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldFactionBossData_descriptor_, &PBWorldFactionBossData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTreasureValueInfo_descriptor_, &PBTreasureValueInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldTreasureData_descriptor_, &PBWorldTreasureData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsMemberInfo_descriptor_, &PBCorpsMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsInfo_descriptor_, &PBCorpsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldCorpsData_descriptor_, &PBWorldCorpsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldServerData_descriptor_, &PBWorldServerData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PlayerStruct_2eproto() {
  delete PBPlayerDisplay::default_instance_;
  delete PBPlayerDisplay_reflection_;
  delete PBPlayerShape::default_instance_;
  delete PBPlayerShape_reflection_;
  delete PBPlayerShapeData::default_instance_;
  delete PBPlayerShapeData_reflection_;
  delete PBPlayerFashionData::default_instance_;
  delete PBPlayerFashionData_reflection_;
  delete PBPlayerAvatar::default_instance_;
  delete PBPlayerAvatar_reflection_;
  delete PBPlayerMoney::default_instance_;
  delete PBPlayerMoney_reflection_;
  delete PBEnergy::default_instance_;
  delete PBEnergy_reflection_;
  delete PBEquipLucky::default_instance_;
  delete PBEquipLucky_reflection_;
  delete PBCopymapDayCount::default_instance_;
  delete PBCopymapDayCount_reflection_;
  delete PBTeamTaskDayCount::default_instance_;
  delete PBTeamTaskDayCount_reflection_;
  delete PBForbidSpeak::default_instance_;
  delete PBForbidSpeak_reflection_;
  delete PBPlayerBase::default_instance_;
  delete PBPlayerBase_reflection_;
  delete PBCoolingInfo::default_instance_;
  delete PBCoolingInfo_reflection_;
  delete PBCooling::default_instance_;
  delete PBCooling_reflection_;
  delete PBSystemSkill::default_instance_;
  delete PBSystemSkill_reflection_;
  delete PBSystemBuff::default_instance_;
  delete PBSystemBuff_reflection_;
  delete PBSystemCounter::default_instance_;
  delete PBSystemCounter_reflection_;
  delete PBSystemSwitch::default_instance_;
  delete PBSystemSwitch_reflection_;
  delete PBPlayerColletion::default_instance_;
  delete PBPlayerColletion_reflection_;
  delete PBPrize::default_instance_;
  delete PBPrize_reflection_;
  delete PBPlayerPrize::default_instance_;
  delete PBPlayerPrize_reflection_;
  delete PBPlayerTrade::default_instance_;
  delete PBPlayerTrade_reflection_;
  delete PBQuestItem::default_instance_;
  delete PBQuestItem_reflection_;
  delete PBQuest::default_instance_;
  delete PBQuest_reflection_;
  delete PBQuestCompleted::default_instance_;
  delete PBQuestCompleted_reflection_;
  delete PBPlayerQuest::default_instance_;
  delete PBPlayerQuest_reflection_;
  delete PBWenTaoSchemeInfo::default_instance_;
  delete PBWenTaoSchemeInfo_reflection_;
  delete PBWenTaoScheme::default_instance_;
  delete PBWenTaoScheme_reflection_;
  delete PBBingFa::default_instance_;
  delete PBBingFa_reflection_;
  delete PBPlayerWenTao::default_instance_;
  delete PBPlayerWenTao_reflection_;
  delete PBWulueZhanlue::default_instance_;
  delete PBWulueZhanlue_reflection_;
  delete PBWulueScheme::default_instance_;
  delete PBWulueScheme_reflection_;
  delete PBPlayerWulue::default_instance_;
  delete PBPlayerWulue_reflection_;
  delete PBCopymapInfo::default_instance_;
  delete PBCopymapInfo_reflection_;
  delete PBPlayerCopymap::default_instance_;
  delete PBPlayerCopymap_reflection_;
  delete PBIdentitySetInfo::default_instance_;
  delete PBIdentitySetInfo_reflection_;
  delete PBIdentitySkillInfo::default_instance_;
  delete PBIdentitySkillInfo_reflection_;
  delete PBPlayerIdentity::default_instance_;
  delete PBPlayerIdentity_reflection_;
  delete PBPlayerWuxuePageInfo::default_instance_;
  delete PBPlayerWuxuePageInfo_reflection_;
  delete PBPlayerWuxueSchemeInfo::default_instance_;
  delete PBPlayerWuxueSchemeInfo_reflection_;
  delete PBPlayerWuxue::default_instance_;
  delete PBPlayerWuxue_reflection_;
  delete PBPlayerDart::default_instance_;
  delete PBPlayerDart_reflection_;
  delete PBPlayerFactionBoss::default_instance_;
  delete PBPlayerFactionBoss_reflection_;
  delete PBPlayerTitleInfo::default_instance_;
  delete PBPlayerTitleInfo_reflection_;
  delete PBPlayerClassfiyTitle::default_instance_;
  delete PBPlayerClassfiyTitle_reflection_;
  delete PBPlayerTitle::default_instance_;
  delete PBPlayerTitle_reflection_;
  delete PBPlayerDazuoguaji::default_instance_;
  delete PBPlayerDazuoguaji_reflection_;
  delete PBFashion::default_instance_;
  delete PBFashion_reflection_;
  delete PBPlayerFashion::default_instance_;
  delete PBPlayerFashion_reflection_;
  delete PBEquipColumn::default_instance_;
  delete PBEquipColumn_reflection_;
  delete PBPlayerEquipColumn::default_instance_;
  delete PBPlayerEquipColumn_reflection_;
  delete PBPlayerGreatWallTrain::default_instance_;
  delete PBPlayerGreatWallTrain_reflection_;
  delete PBActivityInfo::default_instance_;
  delete PBActivityInfo_reflection_;
  delete PBPlayerActivity::default_instance_;
  delete PBPlayerActivity_reflection_;
  delete PBLlayerRelive::default_instance_;
  delete PBLlayerRelive_reflection_;
  delete PBPlayerClimbTowerItem::default_instance_;
  delete PBPlayerClimbTowerItem_reflection_;
  delete PBPlayerClimbTower::default_instance_;
  delete PBPlayerClimbTower_reflection_;
  delete PBPlayerPvpData::default_instance_;
  delete PBPlayerPvpData_reflection_;
  delete PBPlayerPvp::default_instance_;
  delete PBPlayerPvp_reflection_;
  delete PBPlayerLoginWealData::default_instance_;
  delete PBPlayerLoginWealData_reflection_;
  delete PBPlayerWeal::default_instance_;
  delete PBPlayerWeal_reflection_;
  delete PBSinglePvpRecord::default_instance_;
  delete PBSinglePvpRecord_reflection_;
  delete PBPlayerSinglePvp::default_instance_;
  delete PBPlayerSinglePvp_reflection_;
  delete PBPlayerCommon::default_instance_;
  delete PBPlayerCommon_reflection_;
  delete PBPlayerManor::default_instance_;
  delete PBPlayerManor_reflection_;
  delete PBPlayerSystem::default_instance_;
  delete PBPlayerSystem_reflection_;
  delete PBPlayerGlobalBase::default_instance_;
  delete PBPlayerGlobalBase_reflection_;
  delete PBSaleMoneyInfo::default_instance_;
  delete PBSaleMoneyInfo_reflection_;
  delete PBSaleMoneyLog::default_instance_;
  delete PBSaleMoneyLog_reflection_;
  delete PBPlayerGlobalSaleMoney::default_instance_;
  delete PBPlayerGlobalSaleMoney_reflection_;
  delete PBPlayerGlobalSaleMoneySave::default_instance_;
  delete PBPlayerGlobalSaleMoneySave_reflection_;
  delete PBSaleMoneyInfoEx::default_instance_;
  delete PBSaleMoneyInfoEx_reflection_;
  delete PBSaleMoneyStatistics::default_instance_;
  delete PBSaleMoneyStatistics_reflection_;
  delete PBSaleMoneyRecentTradeLog::default_instance_;
  delete PBSaleMoneyRecentTradeLog_reflection_;
  delete PBSaleMoneyPriceData::default_instance_;
  delete PBSaleMoneyPriceData_reflection_;
  delete PBAuctionItemInfo::default_instance_;
  delete PBAuctionItemInfo_reflection_;
  delete PBAuctionLog::default_instance_;
  delete PBAuctionLog_reflection_;
  delete PBPlayerGlobalAuction::default_instance_;
  delete PBPlayerGlobalAuction_reflection_;
  delete PBPlayerGlobalAuctionSave::default_instance_;
  delete PBPlayerGlobalAuctionSave_reflection_;
  delete PBAuctionItemAve::default_instance_;
  delete PBAuctionItemAve_reflection_;
  delete PBAuctionItemInfoEx::default_instance_;
  delete PBAuctionItemInfoEx_reflection_;
  delete PBAuctionPriceData::default_instance_;
  delete PBAuctionPriceData_reflection_;
  delete PBPlayerGlobal::default_instance_;
  delete PBPlayerGlobal_reflection_;
  delete PBPlayerGlobalData::default_instance_;
  delete PBPlayerGlobalData_reflection_;
  delete PBItemUseCount::default_instance_;
  delete PBItemUseCount_reflection_;
  delete PBEquipMakeSkilled::default_instance_;
  delete PBEquipMakeSkilled_reflection_;
  delete PBEquipMakeVigour::default_instance_;
  delete PBEquipMakeVigour_reflection_;
  delete PBEquipMakeOEM::default_instance_;
  delete PBEquipMakeOEM_reflection_;
  delete PBPlayerBag::default_instance_;
  delete PBPlayerBag_reflection_;
  delete PBGoods::default_instance_;
  delete PBGoods_reflection_;
  delete PBPlayerStore::default_instance_;
  delete PBPlayerStore_reflection_;
  delete PBClientData::default_instance_;
  delete PBClientData_reflection_;
  delete PBMailSaleMoneyBuy::default_instance_;
  delete PBMailSaleMoneyBuy_reflection_;
  delete PBMailSaleMoneySale::default_instance_;
  delete PBMailSaleMoneySale_reflection_;
  delete PBMailSaleMoneyBuyReturn::default_instance_;
  delete PBMailSaleMoneyBuyReturn_reflection_;
  delete PBMailSaleMoneySaleReturn::default_instance_;
  delete PBMailSaleMoneySaleReturn_reflection_;
  delete PBMailAuctionLockRet::default_instance_;
  delete PBMailAuctionLockRet_reflection_;
  delete PBMailAuctionSaleTimeOut::default_instance_;
  delete PBMailAuctionSaleTimeOut_reflection_;
  delete PBMailAuctionSaleGet::default_instance_;
  delete PBMailAuctionSaleGet_reflection_;
  delete PBMailAuctionBuyGet::default_instance_;
  delete PBMailAuctionBuyGet_reflection_;
  delete PBMailPromote::default_instance_;
  delete PBMailPromote_reflection_;
  delete PBMailFactionBoss::default_instance_;
  delete PBMailFactionBoss_reflection_;
  delete PBMailWorldBoss::default_instance_;
  delete PBMailWorldBoss_reflection_;
  delete PBMailCopymapCashReward::default_instance_;
  delete PBMailCopymapCashReward_reflection_;
  delete PBMailSinglePvpFirstPrize::default_instance_;
  delete PBMailSinglePvpFirstPrize_reflection_;
  delete PBMailSinglePvpDayPrize::default_instance_;
  delete PBMailSinglePvpDayPrize_reflection_;
  delete PBMailSinglePvpWeekPrize::default_instance_;
  delete PBMailSinglePvpWeekPrize_reflection_;
  delete PBMailManorTitleGet::default_instance_;
  delete PBMailManorTitleGet_reflection_;
  delete PBMailManorResult::default_instance_;
  delete PBMailManorResult_reflection_;
  delete PBMailFactionInfo::default_instance_;
  delete PBMailFactionInfo_reflection_;
  delete PBMailTopListInfo::default_instance_;
  delete PBMailTopListInfo_reflection_;
  delete PBMail::default_instance_;
  delete PBMail_reflection_;
  delete PBPlayerMail::default_instance_;
  delete PBPlayerMail_reflection_;
  delete PBFriendInfo::default_instance_;
  delete PBFriendInfo_reflection_;
  delete PBFriendGroup::default_instance_;
  delete PBFriendGroup_reflection_;
  delete PBPlayerFriend::default_instance_;
  delete PBPlayerFriend_reflection_;
  delete PBFactionBossPersonalTop::default_instance_;
  delete PBFactionBossPersonalTop_reflection_;
  delete PBFactionBossFactionTop::default_instance_;
  delete PBFactionBossFactionTop_reflection_;
  delete PBFactionBossUnionTop::default_instance_;
  delete PBFactionBossUnionTop_reflection_;
  delete PBPlayerData::default_instance_;
  delete PBPlayerData_reflection_;
  delete PBPlayerEquipData::default_instance_;
  delete PBPlayerEquipData_reflection_;
  delete PBGhostGameAttr::default_instance_;
  delete PBGhostGameAttr_reflection_;
  delete PBPlayerView::default_instance_;
  delete PBPlayerView_reflection_;
  delete PBSinglePvpInfo::default_instance_;
  delete PBSinglePvpInfo_reflection_;
  delete PBWorldBossKillInfo::default_instance_;
  delete PBWorldBossKillInfo_reflection_;
  delete PBWorldBossKill::default_instance_;
  delete PBWorldBossKill_reflection_;
  delete PBWTopListInfo::default_instance_;
  delete PBWTopListInfo_reflection_;
  delete PBTopListList::default_instance_;
  delete PBTopListList_reflection_;
  delete PBGlobalServerData::default_instance_;
  delete PBGlobalServerData_reflection_;
  delete PBWorldFactionBossData::default_instance_;
  delete PBWorldFactionBossData_reflection_;
  delete PBTreasureValueInfo::default_instance_;
  delete PBTreasureValueInfo_reflection_;
  delete PBWorldTreasureData::default_instance_;
  delete PBWorldTreasureData_reflection_;
  delete PBCorpsMemberInfo::default_instance_;
  delete PBCorpsMemberInfo_reflection_;
  delete PBCorpsInfo::default_instance_;
  delete PBCorpsInfo_reflection_;
  delete PBWorldCorpsData::default_instance_;
  delete PBWorldCorpsData_reflection_;
  delete PBWorldServerData::default_instance_;
  delete PBWorldServerData_reflection_;
}

void protobuf_AddDesc_PlayerStruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_AccountStruct_2eproto();
  ::protobuf_AddDesc_GameStruct_2eproto();
  ::protobuf_AddDesc_GameDefine_2eproto();
  ::protobuf_AddDesc_Faction_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022PlayerStruct.proto\032\023AccountStruct.prot"
    "o\032\020GameStruct.proto\032\020GameDefine.proto\032\rF"
    "action.proto\"\267\002\n\017PBPlayerDisplay\022\022\n\nplay"
    "ername\030\001 \001(\t\022\020\n\010playerid\030\002 \001(\r\022\023\n\013player"
    "level\030\003 \001(\r\022\017\n\007worldid\030\004 \001(\r\022\024\n\014logicwor"
    "ldid\030\005 \001(\r\022\013\n\003job\030\006 \001(\r\022\016\n\006gender\030\007 \001(\r\022"
    "\016\n\006campid\030\010 \001(\r\022\023\n\013factionname\030\t \001(\t\022\023\n\013"
    "aliancename\030\n \001(\t\022\r\n\005Corps\030\013 \001(\r\022\017\n\007stag"
    "eid\030\014 \001(\r\022\017\n\007titleid\030\r \001(\r\022\021\n\tfactionid\030"
    "\016 \001(\r\022\020\n\010identity\030\017 \001(\r\022\025\n\rfactionbanner"
    "\030\020 \001(\t\")\n\rPBPlayerShape\022\014\n\004type\030\001 \001(\r\022\n\n"
    "\002id\030\002 \001(\r\"\"\n\021PBPlayerShapeData\022\r\n\005value\030"
    "\001 \003(\r\"(\n\023PBPlayerFashionData\022\021\n\tfashioni"
    "d\030\001 \003(\r\"\205\001\n\016PBPlayerAvatar\022!\n\007display\030\001 "
    "\001(\0132\020.PBPlayerDisplay\022%\n\tshapedata\030\002 \001(\013"
    "2\022.PBPlayerShapeData\022)\n\013fashiondata\030\003 \001("
    "\0132\024.PBPlayerFashionData\",\n\rPBPlayerMoney"
    "\022\014\n\004type\030\001 \001(\r\022\r\n\005value\030\002 \001(\004\"\'\n\010PBEnerg"
    "y\022\014\n\004type\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"+\n\014PBEqui"
    "pLucky\022\014\n\004type\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"0\n\021P"
    "BCopymapDayCount\022\014\n\004type\030\001 \001(\005\022\r\n\005count\030"
    "\002 \001(\005\"/\n\022PBTeamTaskDayCount\022\n\n\002id\030\001 \001(\005\022"
    "\r\n\005count\030\002 \001(\005\"2\n\rPBForbidSpeak\022\017\n\007chann"
    "el\030\001 \001(\r\022\020\n\010nexttime\030\002 \001(\r\"\331\010\n\014PBPlayerB"
    "ase\022\021\n\tsaveorder\030\001 \001(\r\022\'\n\rplayerdisplay\030"
    "\002 \001(\0132\020.PBPlayerDisplay\022\021\n\taccountid\030\003 \001"
    "(\r\022\022\n\nplayermark\030\004 \001(\r\022\017\n\007sceneid\030\005 \001(\r\022"
    "\016\n\006cellid\030\006 \001(\r\022\022\n\nscenedynid\030\007 \001(\004\022\014\n\004p"
    "osx\030\010 \001(\002\022\014\n\004posy\030\t \001(\002\022\013\n\003dir\030\n \001(\002\022\025\n\r"
    "lastlogintime\030\013 \001(\r\022\026\n\016lastlogouttime\030\014 "
    "\001(\r\022\022\n\ncreatetime\030\r \001(\r\022\016\n\006pktype\030\016 \001(\r\022"
    "\017\n\007pkvalue\030\017 \001(\r\022\013\n\003exp\030\020 \001(\004\022\016\n\006wisdom\030"
    "\021 \001(\004\022\035\n\005money\030\022 \003(\0132\016.PBPlayerMoney\022\017\n\007"
    "spawnid\030\023 \001(\r\022\r\n\005curhp\030\024 \001(\005\022\034\n\tcurenerg"
    "y\030\025 \003(\0132\t.PBEnergy\022\022\n\nonlinetime\030\026 \001(\r\022\021"
    "\n\tonlyindex\030\027 \001(\014\022\024\n\014onlydayindex\030\030 \001(\014\022"
    "\025\n\ronlyweekindex\030\031 \001(\014\022\026\n\016onlymonthindex"
    "\030\032 \001(\014\022\024\n\014itemsequence\030\033 \001(\r\022%\n\tshapedat"
    "a\030\034 \001(\0132\022.PBPlayerShapeData\022\020\n\010killtime\030"
    "\035 \001(\r\022\022\n\nequiplucky\030\036 \001(\r\022\022\n\nfightpower\030"
    "\037 \001(\r\022\017\n\007mountid\030  \001(\r\022\023\n\013old_sceneid\030! "
    "\001(\r\022\022\n\nold_cellid\030\" \001(\r\022\026\n\016old_scenedyni"
    "d\030# \001(\004\022\020\n\010old_posx\030$ \001(\002\022\020\n\010old_posy\030% "
    "\001(\002\022\017\n\007old_dir\030& \001(\002\022\023\n\013suffervalue\030\' \001("
    "\004\022\021\n\tbingfuexp\030( \001(\004\022(\n\014copymapcount\030) \003"
    "(\0132\022.PBCopymapDayCount\022)\n\013fashiondata\030* "
    "\001(\0132\024.PBPlayerFashionData\022*\n\rteamtaskcou"
    "nt\030, \003(\0132\023.PBTeamTaskDayCount\022\025\n\rmaxfigh"
    "tpower\030- \001(\r\022\020\n\010corpsjob\030. \001(\r\022#\n\013forbid"
    "speak\030/ \003(\0132\016.PBForbidSpeak\022\026\n\016dailyclea"
    "ntime\0300 \001(\r\022\027\n\017weeklycleantime\0301 \001(\r\022\030\n\020"
    "monthlycleantime\0302 \001(\r\"S\n\rPBCoolingInfo\022"
    "\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\r\n\005begin\030\003 \001(\004"
    "\022\013\n\003end\030\004 \001(\004\022\014\n\004time\030\005 \001(\r\",\n\tPBCooling"
    "\022\037\n\007cooling\030\001 \003(\0132\016.PBCoolingInfo\"*\n\rPBS"
    "ystemSkill\022\031\n\007pbskill\030\001 \003(\0132\010.PBSkill\"\'\n"
    "\014PBSystemBuff\022\027\n\006pbbuff\030\001 \003(\0132\007.PBBuff\"0"
    "\n\017PBSystemCounter\022\035\n\tpbcounter\030\001 \003(\0132\n.P"
    "BCounter\"\034\n\016PBSystemSwitch\022\n\n\002id\030\001 \003(\r\":"
    "\n\021PBPlayerColletion\022%\n\013pbcolletion\030\001 \003(\013"
    "2\020.PBColletionData\"K\n\007PBPrize\022\022\n\ninstanc"
    "esn\030\001 \001(\004\022\017\n\007prizeid\030\002 \001(\r\022\r\n\005level\030\003 \001("
    "\r\022\014\n\004time\030\004 \001(\r\"9\n\rPBPlayerPrize\022\r\n\005curs"
    "n\030\001 \001(\004\022\031\n\007pbprize\030\002 \003(\0132\010.PBPrize\"u\n\rPB"
    "PlayerTrade\022\026\n\016can_get_sliver\030\001 \001(\004\022\027\n\017c"
    "an_give_sliver\030\002 \001(\004\022\030\n\020recover_get_time"
    "\030\003 \001(\r\022\031\n\021recover_give_time\030\004 \001(\r\".\n\013PBQ"
    "uestItem\022\r\n\005tarid\030\001 \001(\r\022\020\n\010curcount\030\002 \001("
    "\r\"Y\n\007PBQuest\022\017\n\007questid\030\001 \001(\r\022\022\n\nacceptt"
    "ime\030\002 \001(\r\022\032\n\004item\030\003 \003(\0132\014.PBQuestItem\022\r\n"
    "\005param\030\004 \001(\r\"2\n\020PBQuestCompleted\022\017\n\007ques"
    "tid\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"e\n\rPBPlayerQues"
    "t\022\021\n\tsaveorder\030\001 \001(\r\022\027\n\005quest\030\002 \003(\0132\010.PB"
    "Quest\022(\n\rcompletedinfo\030\003 \003(\0132\021.PBQuestCo"
    "mpleted\"5\n\022PBWenTaoSchemeInfo\022\r\n\005index\030\001"
    " \001(\r\022\020\n\010bingfaid\030\002 \001(\r\"E\n\016PBWenTaoScheme"
    "\022\020\n\010schemeid\030\001 \001(\r\022!\n\004info\030\002 \003(\0132\023.PBWen"
    "TaoSchemeInfo\"n\n\010PBBingFa\022\020\n\010bingfaid\030\001 "
    "\001(\r\022\024\n\014qianxiulevel\030\002 \001(\r\022\021\n\ttupolevel\030\003"
    " \001(\r\022\021\n\tyaodianid\030\004 \001(\r\022\024\n\014yaodianlevel\030"
    "\005 \001(\r\"a\n\016PBPlayerWenTao\022\023\n\013curschemeID\030\001"
    " \001(\r\022\031\n\006bingfa\030\002 \003(\0132\t.PBBingFa\022\037\n\006schem"
    "e\030\003 \003(\0132\017.PBWenTaoScheme\"9\n\016PBWulueZhanl"
    "ue\022\n\n\002id\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\r\n\005level\030\003 "
    "\001(\r\"M\n\rPBWulueScheme\022\020\n\010schemeid\030\001 \001(\r\022\n"
    "\n\002id\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\022\020\n\010bingfusn\030\004 \001"
    "(\004\"\205\001\n\rPBPlayerWulue\022\023\n\013curschemeID\030\001 \001("
    "\r\022\024\n\014curwuluetype\030\002 \001(\r\022$\n\013zhanlueinfo\030\003"
    " \003(\0132\017.PBWulueZhanlue\022#\n\013wuluescheme\030\004 \003"
    "(\0132\016.PBWulueScheme\"6\n\rPBCopymapInfo\022\021\n\tc"
    "opymapid\030\001 \001(\r\022\022\n\nentercount\030\002 \001(\r\"D\n\017PB"
    "PlayerCopymap\022\023\n\013assistcount\030\001 \001(\r\022\034\n\004in"
    "fo\030\002 \003(\0132\016.PBCopymapInfo\"6\n\021PBIdentitySe"
    "tInfo\022\r\n\005setid\030\001 \001(\r\022\022\n\nidentityid\030\002 \001(\r"
    "\":\n\023PBIdentitySkillInfo\022\017\n\007skillid\030\001 \001(\r"
    "\022\022\n\nskilllevel\030\002 \001(\r\"\207\001\n\020PBPlayerIdentit"
    "y\022\022\n\nresetcount\030\001 \001(\r\022\021\n\tresettime\030\002 \001(\r"
    "\022#\n\007setinfo\030\003 \003(\0132\022.PBIdentitySetInfo\022\'\n"
    "\tskillinfo\030\004 \003(\0132\024.PBIdentitySkillInfo\"8"
    "\n\025PBPlayerWuxuePageInfo\022\016\n\006pageid\030\001 \001(\r\022"
    "\017\n\007skillid\030\002 \003(\r\"i\n\027PBPlayerWuxueSchemeI"
    "nfo\022\016\n\006nameid\030\001 \001(\r\022*\n\nallskillid\030\002 \003(\0132"
    "\026.PBPlayerWuxuePageInfo\022\022\n\nuseskillid\030\003 "
    "\003(\r\"S\n\rPBPlayerWuxue\022\024\n\014curschemenum\030\001 \001"
    "(\r\022,\n\nschemeinfo\030\002 \003(\0132\030.PBPlayerWuxueSc"
    "hemeInfo\"d\n\014PBPlayerDart\022\027\n\017dartcarGloba"
    "lID\030\001 \001(\004\022\034\n\024todayNormalDartCount\030\002 \001(\r\022"
    "\035\n\025todayTianxiaDartCount\030\003 \001(\r\";\n\023PBPlay"
    "erFactionBoss\022\021\n\tentertime\030\001 \001(\r\022\021\n\tcopy"
    "mapid\030\002 \001(\r\"D\n\021PBPlayerTitleInfo\022\n\n\002id\030\001"
    " \001(\r\022\022\n\nexpiretime\030\002 \001(\r\022\017\n\007gettime\030\003 \001("
    "\r\"G\n\025PBPlayerClassfiyTitle\022\014\n\004type\030\001 \001(\r"
    "\022 \n\004info\030\002 \003(\0132\022.PBPlayerTitleInfo\">\n\rPB"
    "PlayerTitle\022-\n\rclassifytitle\030\001 \003(\0132\026.PBP"
    "layerClassfiyTitle\"Y\n\022PBPlayerDazuoguaji"
    "\022\037\n\027todayDazuoguajiExpCount\030\001 \001(\r\022\"\n\032tod"
    "ayDazuoguajiWisdomCount\030\002 \001(\r\",\n\tPBFashi"
    "on\022\021\n\tfashionid\030\001 \001(\r\022\014\n\004time\030\002 \001(\r\"F\n\017P"
    "BPlayerFashion\022\033\n\007fashion\030\001 \003(\0132\n.PBFash"
    "ion\022\026\n\016equipfashionid\030\002 \003(\r\"E\n\rPBEquipCo"
    "lumn\022\n\n\002id\030\001 \001(\r\022\024\n\014EnhanceLevel\030\002 \001(\r\022\022"
    "\n\nForgeLevel\030\003 \001(\r\"3\n\023PBPlayerEquipColum"
    "n\022\034\n\004info\030\001 \003(\0132\016.PBEquipColumn\"H\n\026PBPla"
    "yerGreatWallTrain\022\021\n\tCopymapID\030\001 \003(\r\022\r\n\005"
    "layer\030\002 \001(\r\022\014\n\004time\030\003 \001(\r\"+\n\016PBActivityI"
    "nfo\022\n\n\002id\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"e\n\020PBPlay"
    "erActivity\022\035\n\004info\030\001 \003(\0132\017.PBActivityInf"
    "o\022\020\n\010liveness\030\002 \001(\r\022\r\n\005setid\030\003 \003(\r\022\021\n\tcl"
    "eartime\030\004 \003(\r\"9\n\016PBLlayerRelive\022\024\n\014FreeM"
    "axCount\030\001 \001(\r\022\021\n\tCostCount\030\002 \001(\r\"7\n\026PBPl"
    "ayerClimbTowerItem\022\016\n\006itemID\030\001 \001(\r\022\r\n\005co"
    "unt\030\002 \001(\r\"\337\001\n\022PBPlayerClimbTower\022\033\n\023dayC"
    "urrentCopymapID\030\001 \001(\r\0221\n\020dayItemUnsettle"
    "d\030\002 \003(\0132\027.PBPlayerClimbTowerItem\022\024\n\014dayP"
    "layCount\030\003 \001(\r\022\030\n\020weekCurrentClass\030\004 \001(\r"
    "\022\025\n\rweekMaxCopyID\030\005 \001(\r\022\030\n\020nextJumpCpyma"
    "pID\030\006 \001(\r\022\030\n\020luckDrawRightNow\030\007 \001(\r\"\375\001\n\017"
    "PBPlayerPvpData\022\n\n\002id\030\001 \001(\r\022\022\n\nentercoun"
    "t\030\002 \001(\r\022\016\n\006winnum\030\003 \001(\r\022\017\n\007failnum\030\004 \001(\r"
    "\022\022\n\ncapturenum\030\005 \001(\r\022\017\n\007killnum\030\006 \001(\r\022\021\n"
    "\tassistnum\030\007 \001(\r\022\017\n\007deadnum\030\010 \001(\r\022\020\n\010meg"
    "akill\030\t \001(\r\022\017\n\007godlike\030\n \001(\r\022\016\n\006mvpnum\030\013"
    " \001(\r\022\026\n\016exitreadycount\030\014 \001(\r\022\025\n\rnextente"
    "rtime\030\r \001(\r\"0\n\013PBPlayerPvp\022!\n\007pvpdata\030\001 "
    "\003(\0132\020.PBPlayerPvpData\"H\n\025PBPlayerLoginWe"
    "alData\022\n\n\002id\030\001 \001(\r\022\020\n\010prizeday\030\002 \001(\r\022\021\n\t"
    "prizetime\030\003 \001(\r\"9\n\014PBPlayerWeal\022)\n\tlogin"
    "data\030\001 \003(\0132\026.PBPlayerLoginWealData\"U\n\021PB"
    "SinglePvpRecord\022!\n\007display\030\001 \001(\0132\020.PBPla"
    "yerDisplay\022\r\n\005score\030\002 \001(\r\022\016\n\006result\030\003 \001("
    "\r\"\343\001\n\021PBPlayerSinglePvp\022\025\n\rdayentercount"
    "\030\001 \001(\r\022\020\n\010wincount\030\002 \001(\r\022\021\n\tfailcount\030\003 "
    "\001(\r\022\022\n\nequalcount\030\004 \001(\r\022\r\n\005score\030\005 \001(\r\022\020"
    "\n\010maxscore\030\006 \001(\r\022\024\n\014firstprizeid\030\007 \003(\r\022\020"
    "\n\010dayprize\030\010 \003(\r\022\"\n\006record\030\t \003(\0132\022.PBSin"
    "glePvpRecord\022\021\n\tweekcount\030\n \001(\r\"$\n\016PBPla"
    "yerCommon\022\022\n\nstrongerid\030\001 \003(\r\"-\n\rPBPlaye"
    "rManor\022\034\n\024enterbattlefieldtime\030\001 \001(\r\"\224\010\n"
    "\016PBPlayerSystem\022\021\n\tsaveorder\030\001 \001(\r\022\033\n\007co"
    "oling\030\002 \001(\0132\n.PBCooling\022\035\n\005skill\030\003 \001(\0132\016"
    ".PBSystemSkill\022\033\n\004buff\030\004 \001(\0132\r.PBSystemB"
    "uff\022!\n\007counter\030\005 \001(\0132\020.PBSystemCounter\022\035"
    "\n\005prize\030\006 \001(\0132\016.PBPlayerPrize\022\035\n\005trade\030\007"
    " \001(\0132\016.PBPlayerTrade\022#\n\013playerStore\030\010 \001("
    "\0132\016.PBPlayerStore\022\033\n\004weal\030\t \001(\0132\r.PBPlay"
    "erWeal\022#\n\013playerWulue\030\n \001(\0132\016.PBPlayerWu"
    "lue\022\037\n\006wentao\030\013 \001(\0132\017.PBPlayerWenTao\022!\n\007"
    "copymap\030\014 \001(\0132\020.PBPlayerCopymap\022#\n\010ident"
    "ity\030\r \001(\0132\021.PBPlayerIdentity\022%\n\014systemSw"
    "itch\030\016 \001(\0132\017.PBSystemSwitch\022&\n\nconlletio"
    "n\030\017 \001(\0132\022.PBPlayerColletion\022\035\n\005wuxue\030\020 \001"
    "(\0132\016.PBPlayerWuxue\022\033\n\004dart\030\021 \001(\0132\r.PBPla"
    "yerDart\022)\n\013factionboss\030\022 \001(\0132\024.PBPlayerF"
    "actionBoss\022\035\n\005title\030\023 \001(\0132\016.PBPlayerTitl"
    "e\022\'\n\ndazuoguaji\030\024 \001(\0132\023.PBPlayerDazuogua"
    "ji\022!\n\007fashion\030\025 \001(\0132\020.PBPlayerFashion\022)\n"
    "\013equipColumn\030\026 \001(\0132\024.PBPlayerEquipColumn"
    "\022\'\n\nclimbTower\030\027 \001(\0132\023.PBPlayerClimbTowe"
    "r\022\031\n\003pvp\030\030 \001(\0132\014.PBPlayerPvp\022(\n\007gwTrain\030"
    "\031 \001(\0132\027.PBPlayerGreatWallTrain\022#\n\010activi"
    "ty\030\032 \001(\0132\021.PBPlayerActivity\022\037\n\006relive\030\033 "
    "\001(\0132\017.PBLlayerRelive\022%\n\tsinglepvp\030\034 \001(\0132"
    "\022.PBPlayerSinglePvp\022\037\n\006common\030\035 \001(\0132\017.PB"
    "PlayerCommon\022\035\n\005manor\030\036 \001(\0132\016.PBPlayerMa"
    "nor\"1\n\022PBPlayerGlobalBase\022\033\n\004view\030\001 \001(\0132"
    "\r.PBPlayerView\"\\\n\017PBSaleMoneyInfo\022\017\n\007ord"
    "erid\030\001 \001(\004\022\014\n\004type\030\002 \001(\r\022\014\n\004cash\030\003 \001(\r\022\016"
    "\n\006sliver\030\004 \001(\004\022\014\n\004time\030\005 \001(\r\"m\n\016PBSaleMo"
    "neyLog\022\014\n\004type\030\001 \001(\r\022!\n\007display\030\002 \001(\0132\020."
    "PBPlayerDisplay\022\014\n\004cash\030\003 \001(\r\022\016\n\006sliver\030"
    "\004 \001(\004\022\014\n\004time\030\005 \001(\r\"W\n\027PBPlayerGlobalSal"
    "eMoney\022\036\n\004list\030\001 \003(\0132\020.PBSaleMoneyInfo\022\034"
    "\n\003log\030\002 \003(\0132\017.PBSaleMoneyLog\";\n\033PBPlayer"
    "GlobalSaleMoneySave\022\034\n\003log\030\001 \003(\0132\017.PBSal"
    "eMoneyLog\"V\n\021PBSaleMoneyInfoEx\022\036\n\004data\030\001"
    " \001(\0132\020.PBSaleMoneyInfo\022!\n\007display\030\002 \001(\0132"
    "\020.PBPlayerDisplay\"x\n\025PBSaleMoneyStatisti"
    "cs\022\016\n\006prices\030\001 \003(\005\022\023\n\007amounts\030\002 \003(\003B\002\020\001\022"
    "\021\n\ttimetotal\030\003 \001(\005\022\023\n\013amounttotal\030\004 \001(\003\022"
    "\022\n\nmoneytotal\030\005 \001(\003\"G\n\031PBSaleMoneyRecent"
    "TradeLog\022\014\n\004cash\030\002 \001(\r\022\016\n\006sliver\030\003 \001(\004\022\014"
    "\n\004time\030\004 \001(\r\"\304\002\n\024PBSaleMoneyPriceData\022\014\n"
    "\004time\030\001 \001(\004\022\020\n\010aveprice\030\002 \001(\001\022*\n\nstatist"
    "ics\030\003 \003(\0132\026.PBSaleMoneyStatistics\022-\n\rcur"
    "statistics\030\004 \001(\0132\026.PBSaleMoneyStatistics"
    "\022\020\n\010refprice\030\005 \001(\005\022\023\n\013supplystamp\030\006 \001(\004\022"
    "\027\n\017nextsupplystamp\030\007 \001(\004\022\024\n\014lastchkstamp"
    "\030\010 \001(\004\022-\n\rchkstatistics\030\t \001(\0132\026.PBSaleMo"
    "neyStatistics\022,\n\010tradelog\030\n \003(\0132\032.PBSale"
    "MoneyRecentTradeLog\"\232\001\n\021PBAuctionItemInf"
    "o\022\023\n\013saleorderid\030\001 \001(\004\022\022\n\nsalesliver\030\002 \001"
    "(\r\022\025\n\004item\030\003 \001(\0132\007.PBItem\022\014\n\004time\030\004 \001(\r\022"
    "\022\n\nunlocktime\030\005 \001(\r\022\021\n\tbuysliver\030\006 \001(\r\022\020"
    "\n\010buycount\030\007 \001(\r\"v\n\014PBAuctionLog\022\014\n\004type"
    "\030\001 \001(\r\022!\n\007display\030\002 \001(\0132\020.PBPlayerDispla"
    "y\022\027\n\006pbItem\030\003 \001(\0132\007.PBItem\022\016\n\006sliver\030\004 \001"
    "(\004\022\014\n\004time\030\005 \001(\r\"{\n\025PBPlayerGlobalAuctio"
    "n\022 \n\004item\030\001 \003(\0132\022.PBAuctionItemInfo\022$\n\010l"
    "ockinfo\030\002 \003(\0132\022.PBAuctionItemInfo\022\032\n\003log"
    "\030\003 \003(\0132\r.PBAuctionLog\"7\n\031PBPlayerGlobalA"
    "uctionSave\022\032\n\003log\030\001 \003(\0132\r.PBAuctionLog\"\217"
    "\001\n\020PBAuctionItemAve\022\016\n\006itemid\030\001 \001(\r\022\022\n\ns"
    "aledcount\030\002 \001(\004\022\022\n\nsaledtimes\030\003 \001(\004\022\021\n\ta"
    "llsliver\030\004 \001(\004\022\020\n\010aveprice\030\005 \001(\r\022\016\n\006pric"
    "e1\030\006 \001(\r\022\016\n\006price2\030\007 \001(\r\"z\n\023PBAuctionIte"
    "mInfoEx\022 \n\004data\030\001 \001(\0132\022.PBAuctionItemInf"
    "o\022\037\n\005saler\030\002 \001(\0132\020.PBPlayerDisplay\022 \n\006lo"
    "cker\030\003 \001(\0132\020.PBPlayerDisplay\"F\n\022PBAuctio"
    "nPriceData\022\014\n\004time\030\001 \001(\004\022\"\n\007itemave\030\002 \003("
    "\0132\021.PBAuctionItemAve\"f\n\016PBPlayerGlobal\022+"
    "\n\tsalemoney\030\001 \001(\0132\030.PBPlayerGlobalSaleMo"
    "ney\022\'\n\007auction\030\002 \001(\0132\026.PBPlayerGlobalAuc"
    "tion\"\272\001\n\022PBPlayerGlobalData\022%\n\010baseinfo\030"
    "\001 \001(\0132\023.PBPlayerGlobalBase\022/\n\tsalemoney\030"
    "\002 \001(\0132\034.PBPlayerGlobalSaleMoneySave\022+\n\007a"
    "uction\030\003 \001(\0132\032.PBPlayerGlobalAuctionSave"
    "\022\037\n\007toplist\030\004 \001(\0132\016.PBTopListData\"b\n\016PBI"
    "temUseCount\022\016\n\006itemId\030\001 \001(\r\022\023\n\013dayusecou"
    "nt\030\002 \001(\r\022\024\n\014weekusecount\030\003 \001(\r\022\025\n\rmonthu"
    "secount\030\004 \001(\r\"S\n\022PBEquipMakeSkilled\022\021\n\te"
    "quipType\030\001 \001(\r\022\024\n\014skilledLevel\030\002 \001(\r\022\024\n\014"
    "skilledPoint\030\003 \001(\r\"N\n\021PBEquipMakeVigour\022"
    "\016\n\006vigour\030\001 \001(\r\022\023\n\013lastAddTime\030\002 \001(\004\022\024\n\014"
    "vigourFrozen\030\003 \001(\r\"w\n\016PBEquipMakeOEM\022\016\n\006"
    "makeID\030\001 \001(\r\022\013\n\003fee\030\002 \001(\r\022\r\n\005count\030\003 \001(\r"
    "\022\021\n\tcountUsed\030\004 \001(\r\022\023\n\013validMakeID\030\005 \003(\r"
    "\022\021\n\tcountReal\030\006 \001(\r\"\342\001\n\013PBPlayerBag\022\021\n\ts"
    "aveorder\030\001 \001(\r\022\030\n\007bagList\030\002 \003(\0132\007.PBItem"
    "\022\032\n\tequipList\030\003 \003(\0132\007.PBItem\022!\n\010usecount"
    "\030\004 \003(\0132\017.PBItemUseCount\022$\n\007skilled\030\005 \003(\013"
    "2\023.PBEquipMakeSkilled\022\"\n\006vigour\030\006 \001(\0132\022."
    "PBEquipMakeVigour\022\035\n\004oems\030\007 \003(\0132\017.PBEqui"
    "pMakeOEM\"D\n\007PBGoods\022\r\n\005store\030\001 \001(\r\022\r\n\005in"
    "dex\030\002 \001(\r\022\r\n\005count\030\003 \001(\r\022\014\n\004time\030\004 \001(\r\";"
    "\n\rPBPlayerStore\022\021\n\tsaveorder\030\001 \001(\r\022\027\n\005go"
    "ods\030\002 \003(\0132\010.PBGoods\"5\n\014PBClientData\022\021\n\ts"
    "aveorder\030\001 \001(\r\022\022\n\nclientdata\030\002 \001(\014\"y\n\022PB"
    "MailSaleMoneyBuy\022\037\n\005saler\030\001 \001(\0132\020.PBPlay"
    "erDisplay\022\023\n\013getbindcash\030\002 \001(\004\022\024\n\014expend"
    "sliver\030\003 \001(\004\022\027\n\017economizesliver\030\004 \001(\004\"\204\001"
    "\n\023PBMailSaleMoneySale\022\037\n\005buyer\030\001 \001(\0132\020.P"
    "BPlayerDisplay\022\020\n\010salecash\030\002 \001(\004\022\021\n\tgets"
    "liver\030\003 \001(\004\022\023\n\013extrasliver\030\004 \001(\004\022\022\n\nstor"
    "escore\030\005 \001(\004\"@\n\030PBMailSaleMoneyBuyReturn"
    "\022\016\n\006sliver\030\001 \001(\004\022\024\n\014expendsliver\030\002 \001(\004\")"
    "\n\031PBMailSaleMoneySaleReturn\022\014\n\004cash\030\001 \001("
    "\004\"@\n\024PBMailAuctionLockRet\022\025\n\004item\030\001 \001(\0132"
    "\007.PBItem\022\021\n\tretsliver\030\002 \001(\r\"1\n\030PBMailAuc"
    "tionSaleTimeOut\022\025\n\004item\030\001 \001(\0132\007.PBItem\"@"
    "\n\024PBMailAuctionSaleGet\022\025\n\004item\030\001 \001(\0132\007.P"
    "BItem\022\021\n\tgetsliver\030\002 \001(\004\"Q\n\023PBMailAuctio"
    "nBuyGet\022\025\n\004item\030\001 \001(\0132\007.PBItem\022\016\n\006sliver"
    "\030\002 \001(\004\022\023\n\013extrasliver\030\003 \001(\004\"\035\n\rPBMailPro"
    "mote\022\014\n\004step\030\001 \001(\r\"1\n\021PBMailFactionBoss\022"
    "\r\n\005order\030\001 \001(\r\022\r\n\005score\030\002 \001(\004\"8\n\017PBMailW"
    "orldBoss\022\r\n\005order\030\001 \001(\r\022\026\n\016bossActivityI"
    "d\030\002 \001(\r\"\\\n\027PBMailCopymapCashReward\022 \n\006le"
    "ader\030\001 \001(\0132\020.PBPlayerDisplay\022\021\n\tcopymapi"
    "d\030\002 \001(\r\022\014\n\004cash\030\003 \001(\r\"\'\n\031PBMailSinglePvp"
    "FirstPrize\022\n\n\002id\030\001 \001(\r\"+\n\027PBMailSinglePv"
    "pDayPrize\022\020\n\010daycount\030\001 \001(\r\"&\n\030PBMailSin"
    "glePvpWeekPrize\022\n\n\002id\030\001 \001(\r\"$\n\023PBMailMan"
    "orTitleGet\022\r\n\005title\030\001 \001(\r\"L\n\021PBMailManor"
    "Result\022\014\n\004type\030\001 \001(\r\022\017\n\007manorid\030\002 \001(\r\022\030\n"
    "\020enemyfactionname\030\003 \001(\t\"!\n\021PBMailFaction"
    "Info\022\014\n\004name\030\001 \001(\t\"\"\n\021PBMailTopListInfo\022"
    "\r\n\005order\030\001 \001(\005\"\222\010\n\006PBMail\022\017\n\007worldid\030\001 \001"
    "(\r\022\020\n\010playerid\030\002 \001(\r\022\016\n\006mailid\030\003 \001(\r\022\014\n\004"
    "type\030\004 \001(\005\022\020\n\010sendtime\030\005 \001(\004\022\020\n\010senderid"
    "\030\006 \001(\r\022\016\n\006sender\030\007 \001(\t\022\r\n\005title\030\010 \001(\t\022\014\n"
    "\004text\030\t \001(\t\022\016\n\006readed\030\n \001(\r\022\027\n\005money\030\013 \003"
    "(\0132\010.PBMoney\022\025\n\004item\030\014 \003(\0132\007.PBItem\022\"\n\005s"
    "mbuy\030\r \001(\0132\023.PBMailSaleMoneyBuy\022$\n\006smsal"
    "e\030\016 \001(\0132\024.PBMailSaleMoneySale\022+\n\010smbuyre"
    "t\030\017 \001(\0132\031.PBMailSaleMoneyBuyReturn\022-\n\tsm"
    "saleret\030\020 \001(\0132\032.PBMailSaleMoneySaleRetur"
    "n\022(\n\taulockret\030\021 \001(\0132\025.PBMailAuctionLock"
    "Ret\022,\n\tautimeout\030\022 \001(\0132\031.PBMailAuctionSa"
    "leTimeOut\022(\n\tausaleget\030\023 \001(\0132\025.PBMailAuc"
    "tionSaleGet\022&\n\010aubuyget\030\024 \001(\0132\024.PBMailAu"
    "ctionBuyGet\022\037\n\007promote\030\025 \001(\0132\016.PBMailPro"
    "mote\022\021\n\tDoingType\030\026 \001(\r\022\'\n\013factionboss\030\027"
    " \001(\0132\022.PBMailFactionBoss\022#\n\tworldboss\030\030 "
    "\001(\0132\020.PBMailWorldBoss\022-\n\013copymapcash\030\031 \001"
    "(\0132\030.PBMailCopymapCashReward\0222\n\016singlepv"
    "pfirst\030\032 \001(\0132\032.PBMailSinglePvpFirstPrize"
    "\022.\n\014singlepvpday\030\033 \001(\0132\030.PBMailSinglePvp"
    "DayPrize\0220\n\rsinglepvpweek\030\034 \001(\0132\031.PBMail"
    "SinglePvpWeekPrize\022(\n\nmanortitle\030\035 \001(\0132\024"
    ".PBMailManorTitleGet\022\'\n\013manorresult\030\036 \001("
    "\0132\022.PBMailManorResult\022\'\n\013factioninfo\030\037 \001"
    "(\0132\022.PBMailFactionInfo\022#\n\007toplist\030  \001(\0132"
    "\022.PBMailTopListInfo\"<\n\014PBPlayerMail\022\021\n\ts"
    "aveorder\030\001 \001(\r\022\031\n\010maillist\030\002 \003(\0132\007.PBMai"
    "l\"\232\001\n\014PBFriendInfo\022!\n\007display\030\001 \001(\0132\020.PB"
    "PlayerDisplay\022\014\n\004type\030\002 \001(\r\022\016\n\006online\030\003 "
    "\001(\010\022\023\n\013friendvalue\030\004 \001(\r\022\014\n\004time\030\005 \001(\r\022\022"
    "\n\nupdatetime\030\006 \001(\r\022\022\n\nfightpower\030\007 \001(\r\":"
    "\n\rPBFriendGroup\022\014\n\004type\030\001 \001(\r\022\033\n\004list\030\002 "
    "\003(\0132\r.PBFriendInfo\"B\n\016PBPlayerFriend\022\021\n\t"
    "saveorder\030\001 \001(\r\022\035\n\005group\030\002 \003(\0132\016.PBFrien"
    "dGroup\"i\n\030PBFactionBossPersonalTop\022!\n\007di"
    "splay\030\001 \001(\0132\020.PBPlayerDisplay\022\r\n\005order\030\002"
    " \001(\r\022\r\n\005score\030\003 \001(\004\022\014\n\004time\030\004 \001(\r\"i\n\027PBF"
    "actionBossFactionTop\022\"\n\007faction\030\001 \001(\0132\021."
    "PBFactionDisplay\022\r\n\005order\030\002 \001(\r\022\r\n\005score"
    "\030\003 \001(\004\022\014\n\004time\030\004 \001(\r\"g\n\025PBFactionBossUni"
    "onTop\022\"\n\007faction\030\001 \001(\0132\021.PBFactionDispla"
    "y\022\r\n\005order\030\002 \001(\r\022\r\n\005score\030\003 \001(\004\022\014\n\004time\030"
    "\004 \001(\r\"\325\002\n\014PBPlayerData\022\037\n\013accountinfo\030\001 "
    "\001(\0132\n.PBAccount\022!\n\nplayerbase\030\002 \001(\0132\r.PB"
    "PlayerBase\022%\n\014playersystem\030\003 \001(\0132\017.PBPla"
    "yerSystem\022\037\n\tplayerBag\030\004 \001(\0132\014.PBPlayerB"
    "ag\022!\n\nclientdata\030\005 \001(\0132\r.PBClientData\022#\n"
    "\013playerquest\030\006 \001(\0132\016.PBPlayerQuest\022!\n\npl"
    "ayermail\030\007 \001(\0132\r.PBPlayerMail\022%\n\014playerf"
    "riend\030\010 \001(\0132\017.PBPlayerFriend\022\'\n\rplayerfa"
    "ction\030\t \001(\0132\020.PBPlayerFaction\"+\n\021PBPlaye"
    "rEquipData\022\026\n\005equip\030\001 \003(\0132\007.PBItem\"\037\n\017PB"
    "GhostGameAttr\022\014\n\004attr\030\001 \003(\005\"\334\001\n\014PBPlayer"
    "View\022\037\n\006avatar\030\001 \001(\0132\017.PBPlayerAvatar\022!\n"
    "\005equip\030\002 \001(\0132\022.PBPlayerEquipData\022\022\n\nfigh"
    "tpower\030\003 \001(\r\022\037\n\005attri\030\004 \001(\0132\020.PBGhostGam"
    "eAttr\022\017\n\007pkvalue\030\005 \001(\r\022\031\n\006bingfa\030\006 \003(\0132\t"
    ".PBBingFa\022\'\n\rsinglePvpInfo\030\007 \001(\0132\020.PBSin"
    "glePvpInfo\"6\n\017PBSinglePvpInfo\022\020\n\010wincoun"
    "t\030\001 \001(\r\022\021\n\tfailcount\030\002 \001(\r\"d\n\023PBWorldBos"
    "sKillInfo\022\033\n\023worldbossactivityid\030\001 \001(\r\022\026"
    "\n\016lastkillername\030\002 \001(\t\022\030\n\020lastdeadtimeti"
    "ck\030\003 \001(\004\":\n\017PBWorldBossKill\022\'\n\tkillinfos"
    "\030\001 \003(\0132\024.PBWorldBossKillInfo\"1\n\016PBWTopLi"
    "stInfo\022\014\n\004type\030\001 \001(\r\022\021\n\tcleartime\030\002 \001(\r\""
    "3\n\rPBTopListList\022\"\n\tinfo_list\030\001 \003(\0132\017.PB"
    "WTopListInfo\"\256\001\n\022PBGlobalServerData\022(\n\ts"
    "alemoney\030\001 \001(\0132\025.PBSaleMoneyPriceData\022$\n"
    "\007auction\030\002 \001(\0132\023.PBAuctionPriceData\022\'\n\rw"
    "orldbosskill\030\003 \001(\0132\020.PBWorldBossKill\022\037\n\007"
    "toplist\030\004 \001(\0132\016.PBTopListList\">\n\026PBWorld"
    "FactionBossData\022\020\n\010lasttime\030\001 \001(\r\022\022\n\nwho"
    "lescore\030\002 \001(\004\"J\n\023PBTreasureValueInfo\022\017\n\007"
    "prizeid\030\001 \001(\r\022\020\n\010dayvalue\030\002 \001(\r\022\020\n\010dayco"
    "unt\030\003 \001(\r\"A\n\023PBWorldTreasureData\022*\n\014trea"
    "sureinfo\030\001 \003(\0132\024.PBTreasureValueInfo\"o\n\021"
    "PBCorpsMemberInfo\022\020\n\010corpsjob\030\001 \001(\r\022\037\n\006a"
    "vatar\030\002 \001(\0132\017.PBPlayerAvatar\022\022\n\nfobitcou"
    "nt\030\003 \001(\r\022\023\n\013nextsettime\030\004 \001(\r\"[\n\013PBCorps"
    "Info\022\017\n\007corpsid\030\001 \001(\r\022&\n\nmemberinfo\030\002 \003("
    "\0132\022.PBCorpsMemberInfo\022\023\n\013declaration\030\003 \001"
    "(\t\"3\n\020PBWorldCorpsData\022\037\n\tcorpsinfo\030\001 \003("
    "\0132\014.PBCorpsInfo\"\264\001\n\021PBWorldServerData\022\021\n"
    "\tstarttime\030\001 \001(\r\022,\n\013factionboss\030\002 \001(\0132\027."
    "PBWorldFactionBossData\022&\n\010treasure\030\003 \001(\013"
    "2\024.PBWorldTreasureData\022\024\n\014cleardaytime\030\004"
    " \001(\r\022 \n\005corps\030\005 \001(\0132\021.PBWorldCorpsData", 14958);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PlayerStruct.proto", &protobuf_RegisterTypes);
  PBPlayerDisplay::default_instance_ = new PBPlayerDisplay();
  PBPlayerShape::default_instance_ = new PBPlayerShape();
  PBPlayerShapeData::default_instance_ = new PBPlayerShapeData();
  PBPlayerFashionData::default_instance_ = new PBPlayerFashionData();
  PBPlayerAvatar::default_instance_ = new PBPlayerAvatar();
  PBPlayerMoney::default_instance_ = new PBPlayerMoney();
  PBEnergy::default_instance_ = new PBEnergy();
  PBEquipLucky::default_instance_ = new PBEquipLucky();
  PBCopymapDayCount::default_instance_ = new PBCopymapDayCount();
  PBTeamTaskDayCount::default_instance_ = new PBTeamTaskDayCount();
  PBForbidSpeak::default_instance_ = new PBForbidSpeak();
  PBPlayerBase::default_instance_ = new PBPlayerBase();
  PBCoolingInfo::default_instance_ = new PBCoolingInfo();
  PBCooling::default_instance_ = new PBCooling();
  PBSystemSkill::default_instance_ = new PBSystemSkill();
  PBSystemBuff::default_instance_ = new PBSystemBuff();
  PBSystemCounter::default_instance_ = new PBSystemCounter();
  PBSystemSwitch::default_instance_ = new PBSystemSwitch();
  PBPlayerColletion::default_instance_ = new PBPlayerColletion();
  PBPrize::default_instance_ = new PBPrize();
  PBPlayerPrize::default_instance_ = new PBPlayerPrize();
  PBPlayerTrade::default_instance_ = new PBPlayerTrade();
  PBQuestItem::default_instance_ = new PBQuestItem();
  PBQuest::default_instance_ = new PBQuest();
  PBQuestCompleted::default_instance_ = new PBQuestCompleted();
  PBPlayerQuest::default_instance_ = new PBPlayerQuest();
  PBWenTaoSchemeInfo::default_instance_ = new PBWenTaoSchemeInfo();
  PBWenTaoScheme::default_instance_ = new PBWenTaoScheme();
  PBBingFa::default_instance_ = new PBBingFa();
  PBPlayerWenTao::default_instance_ = new PBPlayerWenTao();
  PBWulueZhanlue::default_instance_ = new PBWulueZhanlue();
  PBWulueScheme::default_instance_ = new PBWulueScheme();
  PBPlayerWulue::default_instance_ = new PBPlayerWulue();
  PBCopymapInfo::default_instance_ = new PBCopymapInfo();
  PBPlayerCopymap::default_instance_ = new PBPlayerCopymap();
  PBIdentitySetInfo::default_instance_ = new PBIdentitySetInfo();
  PBIdentitySkillInfo::default_instance_ = new PBIdentitySkillInfo();
  PBPlayerIdentity::default_instance_ = new PBPlayerIdentity();
  PBPlayerWuxuePageInfo::default_instance_ = new PBPlayerWuxuePageInfo();
  PBPlayerWuxueSchemeInfo::default_instance_ = new PBPlayerWuxueSchemeInfo();
  PBPlayerWuxue::default_instance_ = new PBPlayerWuxue();
  PBPlayerDart::default_instance_ = new PBPlayerDart();
  PBPlayerFactionBoss::default_instance_ = new PBPlayerFactionBoss();
  PBPlayerTitleInfo::default_instance_ = new PBPlayerTitleInfo();
  PBPlayerClassfiyTitle::default_instance_ = new PBPlayerClassfiyTitle();
  PBPlayerTitle::default_instance_ = new PBPlayerTitle();
  PBPlayerDazuoguaji::default_instance_ = new PBPlayerDazuoguaji();
  PBFashion::default_instance_ = new PBFashion();
  PBPlayerFashion::default_instance_ = new PBPlayerFashion();
  PBEquipColumn::default_instance_ = new PBEquipColumn();
  PBPlayerEquipColumn::default_instance_ = new PBPlayerEquipColumn();
  PBPlayerGreatWallTrain::default_instance_ = new PBPlayerGreatWallTrain();
  PBActivityInfo::default_instance_ = new PBActivityInfo();
  PBPlayerActivity::default_instance_ = new PBPlayerActivity();
  PBLlayerRelive::default_instance_ = new PBLlayerRelive();
  PBPlayerClimbTowerItem::default_instance_ = new PBPlayerClimbTowerItem();
  PBPlayerClimbTower::default_instance_ = new PBPlayerClimbTower();
  PBPlayerPvpData::default_instance_ = new PBPlayerPvpData();
  PBPlayerPvp::default_instance_ = new PBPlayerPvp();
  PBPlayerLoginWealData::default_instance_ = new PBPlayerLoginWealData();
  PBPlayerWeal::default_instance_ = new PBPlayerWeal();
  PBSinglePvpRecord::default_instance_ = new PBSinglePvpRecord();
  PBPlayerSinglePvp::default_instance_ = new PBPlayerSinglePvp();
  PBPlayerCommon::default_instance_ = new PBPlayerCommon();
  PBPlayerManor::default_instance_ = new PBPlayerManor();
  PBPlayerSystem::default_instance_ = new PBPlayerSystem();
  PBPlayerGlobalBase::default_instance_ = new PBPlayerGlobalBase();
  PBSaleMoneyInfo::default_instance_ = new PBSaleMoneyInfo();
  PBSaleMoneyLog::default_instance_ = new PBSaleMoneyLog();
  PBPlayerGlobalSaleMoney::default_instance_ = new PBPlayerGlobalSaleMoney();
  PBPlayerGlobalSaleMoneySave::default_instance_ = new PBPlayerGlobalSaleMoneySave();
  PBSaleMoneyInfoEx::default_instance_ = new PBSaleMoneyInfoEx();
  PBSaleMoneyStatistics::default_instance_ = new PBSaleMoneyStatistics();
  PBSaleMoneyRecentTradeLog::default_instance_ = new PBSaleMoneyRecentTradeLog();
  PBSaleMoneyPriceData::default_instance_ = new PBSaleMoneyPriceData();
  PBAuctionItemInfo::default_instance_ = new PBAuctionItemInfo();
  PBAuctionLog::default_instance_ = new PBAuctionLog();
  PBPlayerGlobalAuction::default_instance_ = new PBPlayerGlobalAuction();
  PBPlayerGlobalAuctionSave::default_instance_ = new PBPlayerGlobalAuctionSave();
  PBAuctionItemAve::default_instance_ = new PBAuctionItemAve();
  PBAuctionItemInfoEx::default_instance_ = new PBAuctionItemInfoEx();
  PBAuctionPriceData::default_instance_ = new PBAuctionPriceData();
  PBPlayerGlobal::default_instance_ = new PBPlayerGlobal();
  PBPlayerGlobalData::default_instance_ = new PBPlayerGlobalData();
  PBItemUseCount::default_instance_ = new PBItemUseCount();
  PBEquipMakeSkilled::default_instance_ = new PBEquipMakeSkilled();
  PBEquipMakeVigour::default_instance_ = new PBEquipMakeVigour();
  PBEquipMakeOEM::default_instance_ = new PBEquipMakeOEM();
  PBPlayerBag::default_instance_ = new PBPlayerBag();
  PBGoods::default_instance_ = new PBGoods();
  PBPlayerStore::default_instance_ = new PBPlayerStore();
  PBClientData::default_instance_ = new PBClientData();
  PBMailSaleMoneyBuy::default_instance_ = new PBMailSaleMoneyBuy();
  PBMailSaleMoneySale::default_instance_ = new PBMailSaleMoneySale();
  PBMailSaleMoneyBuyReturn::default_instance_ = new PBMailSaleMoneyBuyReturn();
  PBMailSaleMoneySaleReturn::default_instance_ = new PBMailSaleMoneySaleReturn();
  PBMailAuctionLockRet::default_instance_ = new PBMailAuctionLockRet();
  PBMailAuctionSaleTimeOut::default_instance_ = new PBMailAuctionSaleTimeOut();
  PBMailAuctionSaleGet::default_instance_ = new PBMailAuctionSaleGet();
  PBMailAuctionBuyGet::default_instance_ = new PBMailAuctionBuyGet();
  PBMailPromote::default_instance_ = new PBMailPromote();
  PBMailFactionBoss::default_instance_ = new PBMailFactionBoss();
  PBMailWorldBoss::default_instance_ = new PBMailWorldBoss();
  PBMailCopymapCashReward::default_instance_ = new PBMailCopymapCashReward();
  PBMailSinglePvpFirstPrize::default_instance_ = new PBMailSinglePvpFirstPrize();
  PBMailSinglePvpDayPrize::default_instance_ = new PBMailSinglePvpDayPrize();
  PBMailSinglePvpWeekPrize::default_instance_ = new PBMailSinglePvpWeekPrize();
  PBMailManorTitleGet::default_instance_ = new PBMailManorTitleGet();
  PBMailManorResult::default_instance_ = new PBMailManorResult();
  PBMailFactionInfo::default_instance_ = new PBMailFactionInfo();
  PBMailTopListInfo::default_instance_ = new PBMailTopListInfo();
  PBMail::default_instance_ = new PBMail();
  PBPlayerMail::default_instance_ = new PBPlayerMail();
  PBFriendInfo::default_instance_ = new PBFriendInfo();
  PBFriendGroup::default_instance_ = new PBFriendGroup();
  PBPlayerFriend::default_instance_ = new PBPlayerFriend();
  PBFactionBossPersonalTop::default_instance_ = new PBFactionBossPersonalTop();
  PBFactionBossFactionTop::default_instance_ = new PBFactionBossFactionTop();
  PBFactionBossUnionTop::default_instance_ = new PBFactionBossUnionTop();
  PBPlayerData::default_instance_ = new PBPlayerData();
  PBPlayerEquipData::default_instance_ = new PBPlayerEquipData();
  PBGhostGameAttr::default_instance_ = new PBGhostGameAttr();
  PBPlayerView::default_instance_ = new PBPlayerView();
  PBSinglePvpInfo::default_instance_ = new PBSinglePvpInfo();
  PBWorldBossKillInfo::default_instance_ = new PBWorldBossKillInfo();
  PBWorldBossKill::default_instance_ = new PBWorldBossKill();
  PBWTopListInfo::default_instance_ = new PBWTopListInfo();
  PBTopListList::default_instance_ = new PBTopListList();
  PBGlobalServerData::default_instance_ = new PBGlobalServerData();
  PBWorldFactionBossData::default_instance_ = new PBWorldFactionBossData();
  PBTreasureValueInfo::default_instance_ = new PBTreasureValueInfo();
  PBWorldTreasureData::default_instance_ = new PBWorldTreasureData();
  PBCorpsMemberInfo::default_instance_ = new PBCorpsMemberInfo();
  PBCorpsInfo::default_instance_ = new PBCorpsInfo();
  PBWorldCorpsData::default_instance_ = new PBWorldCorpsData();
  PBWorldServerData::default_instance_ = new PBWorldServerData();
  PBPlayerDisplay::default_instance_->InitAsDefaultInstance();
  PBPlayerShape::default_instance_->InitAsDefaultInstance();
  PBPlayerShapeData::default_instance_->InitAsDefaultInstance();
  PBPlayerFashionData::default_instance_->InitAsDefaultInstance();
  PBPlayerAvatar::default_instance_->InitAsDefaultInstance();
  PBPlayerMoney::default_instance_->InitAsDefaultInstance();
  PBEnergy::default_instance_->InitAsDefaultInstance();
  PBEquipLucky::default_instance_->InitAsDefaultInstance();
  PBCopymapDayCount::default_instance_->InitAsDefaultInstance();
  PBTeamTaskDayCount::default_instance_->InitAsDefaultInstance();
  PBForbidSpeak::default_instance_->InitAsDefaultInstance();
  PBPlayerBase::default_instance_->InitAsDefaultInstance();
  PBCoolingInfo::default_instance_->InitAsDefaultInstance();
  PBCooling::default_instance_->InitAsDefaultInstance();
  PBSystemSkill::default_instance_->InitAsDefaultInstance();
  PBSystemBuff::default_instance_->InitAsDefaultInstance();
  PBSystemCounter::default_instance_->InitAsDefaultInstance();
  PBSystemSwitch::default_instance_->InitAsDefaultInstance();
  PBPlayerColletion::default_instance_->InitAsDefaultInstance();
  PBPrize::default_instance_->InitAsDefaultInstance();
  PBPlayerPrize::default_instance_->InitAsDefaultInstance();
  PBPlayerTrade::default_instance_->InitAsDefaultInstance();
  PBQuestItem::default_instance_->InitAsDefaultInstance();
  PBQuest::default_instance_->InitAsDefaultInstance();
  PBQuestCompleted::default_instance_->InitAsDefaultInstance();
  PBPlayerQuest::default_instance_->InitAsDefaultInstance();
  PBWenTaoSchemeInfo::default_instance_->InitAsDefaultInstance();
  PBWenTaoScheme::default_instance_->InitAsDefaultInstance();
  PBBingFa::default_instance_->InitAsDefaultInstance();
  PBPlayerWenTao::default_instance_->InitAsDefaultInstance();
  PBWulueZhanlue::default_instance_->InitAsDefaultInstance();
  PBWulueScheme::default_instance_->InitAsDefaultInstance();
  PBPlayerWulue::default_instance_->InitAsDefaultInstance();
  PBCopymapInfo::default_instance_->InitAsDefaultInstance();
  PBPlayerCopymap::default_instance_->InitAsDefaultInstance();
  PBIdentitySetInfo::default_instance_->InitAsDefaultInstance();
  PBIdentitySkillInfo::default_instance_->InitAsDefaultInstance();
  PBPlayerIdentity::default_instance_->InitAsDefaultInstance();
  PBPlayerWuxuePageInfo::default_instance_->InitAsDefaultInstance();
  PBPlayerWuxueSchemeInfo::default_instance_->InitAsDefaultInstance();
  PBPlayerWuxue::default_instance_->InitAsDefaultInstance();
  PBPlayerDart::default_instance_->InitAsDefaultInstance();
  PBPlayerFactionBoss::default_instance_->InitAsDefaultInstance();
  PBPlayerTitleInfo::default_instance_->InitAsDefaultInstance();
  PBPlayerClassfiyTitle::default_instance_->InitAsDefaultInstance();
  PBPlayerTitle::default_instance_->InitAsDefaultInstance();
  PBPlayerDazuoguaji::default_instance_->InitAsDefaultInstance();
  PBFashion::default_instance_->InitAsDefaultInstance();
  PBPlayerFashion::default_instance_->InitAsDefaultInstance();
  PBEquipColumn::default_instance_->InitAsDefaultInstance();
  PBPlayerEquipColumn::default_instance_->InitAsDefaultInstance();
  PBPlayerGreatWallTrain::default_instance_->InitAsDefaultInstance();
  PBActivityInfo::default_instance_->InitAsDefaultInstance();
  PBPlayerActivity::default_instance_->InitAsDefaultInstance();
  PBLlayerRelive::default_instance_->InitAsDefaultInstance();
  PBPlayerClimbTowerItem::default_instance_->InitAsDefaultInstance();
  PBPlayerClimbTower::default_instance_->InitAsDefaultInstance();
  PBPlayerPvpData::default_instance_->InitAsDefaultInstance();
  PBPlayerPvp::default_instance_->InitAsDefaultInstance();
  PBPlayerLoginWealData::default_instance_->InitAsDefaultInstance();
  PBPlayerWeal::default_instance_->InitAsDefaultInstance();
  PBSinglePvpRecord::default_instance_->InitAsDefaultInstance();
  PBPlayerSinglePvp::default_instance_->InitAsDefaultInstance();
  PBPlayerCommon::default_instance_->InitAsDefaultInstance();
  PBPlayerManor::default_instance_->InitAsDefaultInstance();
  PBPlayerSystem::default_instance_->InitAsDefaultInstance();
  PBPlayerGlobalBase::default_instance_->InitAsDefaultInstance();
  PBSaleMoneyInfo::default_instance_->InitAsDefaultInstance();
  PBSaleMoneyLog::default_instance_->InitAsDefaultInstance();
  PBPlayerGlobalSaleMoney::default_instance_->InitAsDefaultInstance();
  PBPlayerGlobalSaleMoneySave::default_instance_->InitAsDefaultInstance();
  PBSaleMoneyInfoEx::default_instance_->InitAsDefaultInstance();
  PBSaleMoneyStatistics::default_instance_->InitAsDefaultInstance();
  PBSaleMoneyRecentTradeLog::default_instance_->InitAsDefaultInstance();
  PBSaleMoneyPriceData::default_instance_->InitAsDefaultInstance();
  PBAuctionItemInfo::default_instance_->InitAsDefaultInstance();
  PBAuctionLog::default_instance_->InitAsDefaultInstance();
  PBPlayerGlobalAuction::default_instance_->InitAsDefaultInstance();
  PBPlayerGlobalAuctionSave::default_instance_->InitAsDefaultInstance();
  PBAuctionItemAve::default_instance_->InitAsDefaultInstance();
  PBAuctionItemInfoEx::default_instance_->InitAsDefaultInstance();
  PBAuctionPriceData::default_instance_->InitAsDefaultInstance();
  PBPlayerGlobal::default_instance_->InitAsDefaultInstance();
  PBPlayerGlobalData::default_instance_->InitAsDefaultInstance();
  PBItemUseCount::default_instance_->InitAsDefaultInstance();
  PBEquipMakeSkilled::default_instance_->InitAsDefaultInstance();
  PBEquipMakeVigour::default_instance_->InitAsDefaultInstance();
  PBEquipMakeOEM::default_instance_->InitAsDefaultInstance();
  PBPlayerBag::default_instance_->InitAsDefaultInstance();
  PBGoods::default_instance_->InitAsDefaultInstance();
  PBPlayerStore::default_instance_->InitAsDefaultInstance();
  PBClientData::default_instance_->InitAsDefaultInstance();
  PBMailSaleMoneyBuy::default_instance_->InitAsDefaultInstance();
  PBMailSaleMoneySale::default_instance_->InitAsDefaultInstance();
  PBMailSaleMoneyBuyReturn::default_instance_->InitAsDefaultInstance();
  PBMailSaleMoneySaleReturn::default_instance_->InitAsDefaultInstance();
  PBMailAuctionLockRet::default_instance_->InitAsDefaultInstance();
  PBMailAuctionSaleTimeOut::default_instance_->InitAsDefaultInstance();
  PBMailAuctionSaleGet::default_instance_->InitAsDefaultInstance();
  PBMailAuctionBuyGet::default_instance_->InitAsDefaultInstance();
  PBMailPromote::default_instance_->InitAsDefaultInstance();
  PBMailFactionBoss::default_instance_->InitAsDefaultInstance();
  PBMailWorldBoss::default_instance_->InitAsDefaultInstance();
  PBMailCopymapCashReward::default_instance_->InitAsDefaultInstance();
  PBMailSinglePvpFirstPrize::default_instance_->InitAsDefaultInstance();
  PBMailSinglePvpDayPrize::default_instance_->InitAsDefaultInstance();
  PBMailSinglePvpWeekPrize::default_instance_->InitAsDefaultInstance();
  PBMailManorTitleGet::default_instance_->InitAsDefaultInstance();
  PBMailManorResult::default_instance_->InitAsDefaultInstance();
  PBMailFactionInfo::default_instance_->InitAsDefaultInstance();
  PBMailTopListInfo::default_instance_->InitAsDefaultInstance();
  PBMail::default_instance_->InitAsDefaultInstance();
  PBPlayerMail::default_instance_->InitAsDefaultInstance();
  PBFriendInfo::default_instance_->InitAsDefaultInstance();
  PBFriendGroup::default_instance_->InitAsDefaultInstance();
  PBPlayerFriend::default_instance_->InitAsDefaultInstance();
  PBFactionBossPersonalTop::default_instance_->InitAsDefaultInstance();
  PBFactionBossFactionTop::default_instance_->InitAsDefaultInstance();
  PBFactionBossUnionTop::default_instance_->InitAsDefaultInstance();
  PBPlayerData::default_instance_->InitAsDefaultInstance();
  PBPlayerEquipData::default_instance_->InitAsDefaultInstance();
  PBGhostGameAttr::default_instance_->InitAsDefaultInstance();
  PBPlayerView::default_instance_->InitAsDefaultInstance();
  PBSinglePvpInfo::default_instance_->InitAsDefaultInstance();
  PBWorldBossKillInfo::default_instance_->InitAsDefaultInstance();
  PBWorldBossKill::default_instance_->InitAsDefaultInstance();
  PBWTopListInfo::default_instance_->InitAsDefaultInstance();
  PBTopListList::default_instance_->InitAsDefaultInstance();
  PBGlobalServerData::default_instance_->InitAsDefaultInstance();
  PBWorldFactionBossData::default_instance_->InitAsDefaultInstance();
  PBTreasureValueInfo::default_instance_->InitAsDefaultInstance();
  PBWorldTreasureData::default_instance_->InitAsDefaultInstance();
  PBCorpsMemberInfo::default_instance_->InitAsDefaultInstance();
  PBCorpsInfo::default_instance_->InitAsDefaultInstance();
  PBWorldCorpsData::default_instance_->InitAsDefaultInstance();
  PBWorldServerData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PlayerStruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PlayerStruct_2eproto {
  StaticDescriptorInitializer_PlayerStruct_2eproto() {
    protobuf_AddDesc_PlayerStruct_2eproto();
  }
} static_descriptor_initializer_PlayerStruct_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerDisplay::kPlayernameFieldNumber;
const int PBPlayerDisplay::kPlayeridFieldNumber;
const int PBPlayerDisplay::kPlayerlevelFieldNumber;
const int PBPlayerDisplay::kWorldidFieldNumber;
const int PBPlayerDisplay::kLogicworldidFieldNumber;
const int PBPlayerDisplay::kJobFieldNumber;
const int PBPlayerDisplay::kGenderFieldNumber;
const int PBPlayerDisplay::kCampidFieldNumber;
const int PBPlayerDisplay::kFactionnameFieldNumber;
const int PBPlayerDisplay::kAliancenameFieldNumber;
const int PBPlayerDisplay::kCorpsFieldNumber;
const int PBPlayerDisplay::kStageidFieldNumber;
const int PBPlayerDisplay::kTitleidFieldNumber;
const int PBPlayerDisplay::kFactionidFieldNumber;
const int PBPlayerDisplay::kIdentityFieldNumber;
const int PBPlayerDisplay::kFactionbannerFieldNumber;
#endif  // !_MSC_VER

PBPlayerDisplay::PBPlayerDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerDisplay::InitAsDefaultInstance() {
}

PBPlayerDisplay::PBPlayerDisplay(const PBPlayerDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerDisplay::SharedCtor() {
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0u;
  playerlevel_ = 0u;
  worldid_ = 0u;
  logicworldid_ = 0u;
  job_ = 0u;
  gender_ = 0u;
  campid_ = 0u;
  factionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  corps_ = 0u;
  stageid_ = 0u;
  titleid_ = 0u;
  factionid_ = 0u;
  identity_ = 0u;
  factionbanner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerDisplay::~PBPlayerDisplay() {
  SharedDtor();
}

void PBPlayerDisplay::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (factionname_ != &::google::protobuf::internal::kEmptyString) {
    delete factionname_;
  }
  if (aliancename_ != &::google::protobuf::internal::kEmptyString) {
    delete aliancename_;
  }
  if (factionbanner_ != &::google::protobuf::internal::kEmptyString) {
    delete factionbanner_;
  }
  if (this != default_instance_) {
  }
}

void PBPlayerDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerDisplay_descriptor_;
}

const PBPlayerDisplay& PBPlayerDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerDisplay* PBPlayerDisplay::default_instance_ = NULL;

PBPlayerDisplay* PBPlayerDisplay::New() const {
  return new PBPlayerDisplay;
}

void PBPlayerDisplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    playerid_ = 0u;
    playerlevel_ = 0u;
    worldid_ = 0u;
    logicworldid_ = 0u;
    job_ = 0u;
    gender_ = 0u;
    campid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_factionname()) {
      if (factionname_ != &::google::protobuf::internal::kEmptyString) {
        factionname_->clear();
      }
    }
    if (has_aliancename()) {
      if (aliancename_ != &::google::protobuf::internal::kEmptyString) {
        aliancename_->clear();
      }
    }
    corps_ = 0u;
    stageid_ = 0u;
    titleid_ = 0u;
    factionid_ = 0u;
    identity_ = 0u;
    if (has_factionbanner()) {
      if (factionbanner_ != &::google::protobuf::internal::kEmptyString) {
        factionbanner_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerlevel;
        break;
      }
      
      // optional uint32 playerlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerlevel_)));
          set_has_playerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_worldid;
        break;
      }
      
      // optional uint32 worldid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_logicworldid;
        break;
      }
      
      // optional uint32 logicworldid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicworldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicworldid_)));
          set_has_logicworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_job;
        break;
      }
      
      // optional uint32 job = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender;
        break;
      }
      
      // optional uint32 gender = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_campid;
        break;
      }
      
      // optional uint32 campid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_factionname;
        break;
      }
      
      // optional string factionname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factionname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_factionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->factionname().data(), this->factionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_aliancename;
        break;
      }
      
      // optional string aliancename = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aliancename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aliancename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aliancename().data(), this->aliancename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Corps;
        break;
      }
      
      // optional uint32 Corps = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Corps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_)));
          set_has_corps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_stageid;
        break;
      }
      
      // optional uint32 stageid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_titleid;
        break;
      }
      
      // optional uint32 titleid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_factionid;
        break;
      }
      
      // optional uint32 factionid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_identity;
        break;
      }
      
      // optional uint32 identity = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identity_)));
          set_has_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_factionbanner;
        break;
      }
      
      // optional string factionbanner = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factionbanner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_factionbanner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->factionbanner().data(), this->factionbanner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playername = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playername(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 playerlevel = 3;
  if (has_playerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerlevel(), output);
  }
  
  // optional uint32 worldid = 4;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->worldid(), output);
  }
  
  // optional uint32 logicworldid = 5;
  if (has_logicworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->logicworldid(), output);
  }
  
  // optional uint32 job = 6;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->job(), output);
  }
  
  // optional uint32 gender = 7;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gender(), output);
  }
  
  // optional uint32 campid = 8;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->campid(), output);
  }
  
  // optional string factionname = 9;
  if (has_factionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionname().data(), this->factionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->factionname(), output);
  }
  
  // optional string aliancename = 10;
  if (has_aliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aliancename().data(), this->aliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->aliancename(), output);
  }
  
  // optional uint32 Corps = 11;
  if (has_corps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->corps(), output);
  }
  
  // optional uint32 stageid = 12;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->stageid(), output);
  }
  
  // optional uint32 titleid = 13;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->titleid(), output);
  }
  
  // optional uint32 factionid = 14;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->factionid(), output);
  }
  
  // optional uint32 identity = 15;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->identity(), output);
  }
  
  // optional string factionbanner = 16;
  if (has_factionbanner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionbanner().data(), this->factionbanner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->factionbanner(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playername = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playername(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 playerlevel = 3;
  if (has_playerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerlevel(), target);
  }
  
  // optional uint32 worldid = 4;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->worldid(), target);
  }
  
  // optional uint32 logicworldid = 5;
  if (has_logicworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->logicworldid(), target);
  }
  
  // optional uint32 job = 6;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->job(), target);
  }
  
  // optional uint32 gender = 7;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gender(), target);
  }
  
  // optional uint32 campid = 8;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->campid(), target);
  }
  
  // optional string factionname = 9;
  if (has_factionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionname().data(), this->factionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->factionname(), target);
  }
  
  // optional string aliancename = 10;
  if (has_aliancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aliancename().data(), this->aliancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->aliancename(), target);
  }
  
  // optional uint32 Corps = 11;
  if (has_corps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->corps(), target);
  }
  
  // optional uint32 stageid = 12;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->stageid(), target);
  }
  
  // optional uint32 titleid = 13;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->titleid(), target);
  }
  
  // optional uint32 factionid = 14;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->factionid(), target);
  }
  
  // optional uint32 identity = 15;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->identity(), target);
  }
  
  // optional string factionbanner = 16;
  if (has_factionbanner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionbanner().data(), this->factionbanner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->factionbanner(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerDisplay::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playername = 1;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 playerlevel = 3;
    if (has_playerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerlevel());
    }
    
    // optional uint32 worldid = 4;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 logicworldid = 5;
    if (has_logicworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicworldid());
    }
    
    // optional uint32 job = 6;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }
    
    // optional uint32 gender = 7;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }
    
    // optional uint32 campid = 8;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string factionname = 9;
    if (has_factionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->factionname());
    }
    
    // optional string aliancename = 10;
    if (has_aliancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aliancename());
    }
    
    // optional uint32 Corps = 11;
    if (has_corps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps());
    }
    
    // optional uint32 stageid = 12;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }
    
    // optional uint32 titleid = 13;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleid());
    }
    
    // optional uint32 factionid = 14;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
    // optional uint32 identity = 15;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identity());
    }
    
    // optional string factionbanner = 16;
    if (has_factionbanner()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->factionbanner());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerDisplay::MergeFrom(const PBPlayerDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playerlevel()) {
      set_playerlevel(from.playerlevel());
    }
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_logicworldid()) {
      set_logicworldid(from.logicworldid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_factionname()) {
      set_factionname(from.factionname());
    }
    if (from.has_aliancename()) {
      set_aliancename(from.aliancename());
    }
    if (from.has_corps()) {
      set_corps(from.corps());
    }
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_factionbanner()) {
      set_factionbanner(from.factionbanner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerDisplay::CopyFrom(const PBPlayerDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerDisplay::IsInitialized() const {
  
  return true;
}

void PBPlayerDisplay::Swap(PBPlayerDisplay* other) {
  if (other != this) {
    std::swap(playername_, other->playername_);
    std::swap(playerid_, other->playerid_);
    std::swap(playerlevel_, other->playerlevel_);
    std::swap(worldid_, other->worldid_);
    std::swap(logicworldid_, other->logicworldid_);
    std::swap(job_, other->job_);
    std::swap(gender_, other->gender_);
    std::swap(campid_, other->campid_);
    std::swap(factionname_, other->factionname_);
    std::swap(aliancename_, other->aliancename_);
    std::swap(corps_, other->corps_);
    std::swap(stageid_, other->stageid_);
    std::swap(titleid_, other->titleid_);
    std::swap(factionid_, other->factionid_);
    std::swap(identity_, other->identity_);
    std::swap(factionbanner_, other->factionbanner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerDisplay_descriptor_;
  metadata.reflection = PBPlayerDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerShape::kTypeFieldNumber;
const int PBPlayerShape::kIdFieldNumber;
#endif  // !_MSC_VER

PBPlayerShape::PBPlayerShape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerShape::InitAsDefaultInstance() {
}

PBPlayerShape::PBPlayerShape(const PBPlayerShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerShape::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerShape::~PBPlayerShape() {
  SharedDtor();
}

void PBPlayerShape::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerShape_descriptor_;
}

const PBPlayerShape& PBPlayerShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerShape* PBPlayerShape::default_instance_ = NULL;

PBPlayerShape* PBPlayerShape::New() const {
  return new PBPlayerShape;
}

void PBPlayerShape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerShape::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerShape::MergeFrom(const PBPlayerShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerShape::CopyFrom(const PBPlayerShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerShape::IsInitialized() const {
  
  return true;
}

void PBPlayerShape::Swap(PBPlayerShape* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerShape_descriptor_;
  metadata.reflection = PBPlayerShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerShapeData::kValueFieldNumber;
#endif  // !_MSC_VER

PBPlayerShapeData::PBPlayerShapeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerShapeData::InitAsDefaultInstance() {
}

PBPlayerShapeData::PBPlayerShapeData(const PBPlayerShapeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerShapeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerShapeData::~PBPlayerShapeData() {
  SharedDtor();
}

void PBPlayerShapeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerShapeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerShapeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerShapeData_descriptor_;
}

const PBPlayerShapeData& PBPlayerShapeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerShapeData* PBPlayerShapeData::default_instance_ = NULL;

PBPlayerShapeData* PBPlayerShapeData::New() const {
  return new PBPlayerShapeData;
}

void PBPlayerShapeData::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerShapeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerShapeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerShapeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerShapeData::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerShapeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerShapeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerShapeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerShapeData::MergeFrom(const PBPlayerShapeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerShapeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerShapeData::CopyFrom(const PBPlayerShapeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerShapeData::IsInitialized() const {
  
  return true;
}

void PBPlayerShapeData::Swap(PBPlayerShapeData* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerShapeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerShapeData_descriptor_;
  metadata.reflection = PBPlayerShapeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerFashionData::kFashionidFieldNumber;
#endif  // !_MSC_VER

PBPlayerFashionData::PBPlayerFashionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerFashionData::InitAsDefaultInstance() {
}

PBPlayerFashionData::PBPlayerFashionData(const PBPlayerFashionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerFashionData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerFashionData::~PBPlayerFashionData() {
  SharedDtor();
}

void PBPlayerFashionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerFashionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerFashionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerFashionData_descriptor_;
}

const PBPlayerFashionData& PBPlayerFashionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerFashionData* PBPlayerFashionData::default_instance_ = NULL;

PBPlayerFashionData* PBPlayerFashionData::New() const {
  return new PBPlayerFashionData;
}

void PBPlayerFashionData::Clear() {
  fashionid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerFashionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 fashionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_fashionid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fashionid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fashionid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerFashionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 fashionid = 1;
  for (int i = 0; i < this->fashionid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->fashionid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerFashionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 fashionid = 1;
  for (int i = 0; i < this->fashionid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->fashionid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerFashionData::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 fashionid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fashionid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fashionid(i));
    }
    total_size += 1 * this->fashionid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerFashionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerFashionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerFashionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerFashionData::MergeFrom(const PBPlayerFashionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fashionid_.MergeFrom(from.fashionid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerFashionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerFashionData::CopyFrom(const PBPlayerFashionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerFashionData::IsInitialized() const {
  
  return true;
}

void PBPlayerFashionData::Swap(PBPlayerFashionData* other) {
  if (other != this) {
    fashionid_.Swap(&other->fashionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerFashionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerFashionData_descriptor_;
  metadata.reflection = PBPlayerFashionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerAvatar::kDisplayFieldNumber;
const int PBPlayerAvatar::kShapedataFieldNumber;
const int PBPlayerAvatar::kFashiondataFieldNumber;
#endif  // !_MSC_VER

PBPlayerAvatar::PBPlayerAvatar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerAvatar::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
  shapedata_ = const_cast< ::PBPlayerShapeData*>(&::PBPlayerShapeData::default_instance());
  fashiondata_ = const_cast< ::PBPlayerFashionData*>(&::PBPlayerFashionData::default_instance());
}

PBPlayerAvatar::PBPlayerAvatar(const PBPlayerAvatar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerAvatar::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  shapedata_ = NULL;
  fashiondata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerAvatar::~PBPlayerAvatar() {
  SharedDtor();
}

void PBPlayerAvatar::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
    delete shapedata_;
    delete fashiondata_;
  }
}

void PBPlayerAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerAvatar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerAvatar_descriptor_;
}

const PBPlayerAvatar& PBPlayerAvatar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerAvatar* PBPlayerAvatar::default_instance_ = NULL;

PBPlayerAvatar* PBPlayerAvatar::New() const {
  return new PBPlayerAvatar;
}

void PBPlayerAvatar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    if (has_shapedata()) {
      if (shapedata_ != NULL) shapedata_->::PBPlayerShapeData::Clear();
    }
    if (has_fashiondata()) {
      if (fashiondata_ != NULL) fashiondata_->::PBPlayerFashionData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shapedata;
        break;
      }
      
      // optional .PBPlayerShapeData shapedata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shapedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shapedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fashiondata;
        break;
      }
      
      // optional .PBPlayerFashionData fashiondata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashiondata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashiondata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional .PBPlayerShapeData shapedata = 2;
  if (has_shapedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shapedata(), output);
  }
  
  // optional .PBPlayerFashionData fashiondata = 3;
  if (has_fashiondata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fashiondata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerAvatar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional .PBPlayerShapeData shapedata = 2;
  if (has_shapedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shapedata(), target);
  }
  
  // optional .PBPlayerFashionData fashiondata = 3;
  if (has_fashiondata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fashiondata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerAvatar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional .PBPlayerShapeData shapedata = 2;
    if (has_shapedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shapedata());
    }
    
    // optional .PBPlayerFashionData fashiondata = 3;
    if (has_fashiondata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashiondata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerAvatar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerAvatar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerAvatar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerAvatar::MergeFrom(const PBPlayerAvatar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_shapedata()) {
      mutable_shapedata()->::PBPlayerShapeData::MergeFrom(from.shapedata());
    }
    if (from.has_fashiondata()) {
      mutable_fashiondata()->::PBPlayerFashionData::MergeFrom(from.fashiondata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerAvatar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerAvatar::CopyFrom(const PBPlayerAvatar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerAvatar::IsInitialized() const {
  
  return true;
}

void PBPlayerAvatar::Swap(PBPlayerAvatar* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(shapedata_, other->shapedata_);
    std::swap(fashiondata_, other->fashiondata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerAvatar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerAvatar_descriptor_;
  metadata.reflection = PBPlayerAvatar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerMoney::kTypeFieldNumber;
const int PBPlayerMoney::kValueFieldNumber;
#endif  // !_MSC_VER

PBPlayerMoney::PBPlayerMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerMoney::InitAsDefaultInstance() {
}

PBPlayerMoney::PBPlayerMoney(const PBPlayerMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerMoney::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerMoney::~PBPlayerMoney() {
  SharedDtor();
}

void PBPlayerMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerMoney_descriptor_;
}

const PBPlayerMoney& PBPlayerMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerMoney* PBPlayerMoney::default_instance_ = NULL;

PBPlayerMoney* PBPlayerMoney::New() const {
  return new PBPlayerMoney;
}

void PBPlayerMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerMoney::MergeFrom(const PBPlayerMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerMoney::CopyFrom(const PBPlayerMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerMoney::IsInitialized() const {
  
  return true;
}

void PBPlayerMoney::Swap(PBPlayerMoney* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerMoney_descriptor_;
  metadata.reflection = PBPlayerMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBEnergy::kTypeFieldNumber;
const int PBEnergy::kValueFieldNumber;
#endif  // !_MSC_VER

PBEnergy::PBEnergy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEnergy::InitAsDefaultInstance() {
}

PBEnergy::PBEnergy(const PBEnergy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEnergy::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEnergy::~PBEnergy() {
  SharedDtor();
}

void PBEnergy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBEnergy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBEnergy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEnergy_descriptor_;
}

const PBEnergy& PBEnergy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBEnergy* PBEnergy::default_instance_ = NULL;

PBEnergy* PBEnergy::New() const {
  return new PBEnergy;
}

void PBEnergy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEnergy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEnergy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEnergy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEnergy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBEnergy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEnergy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEnergy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEnergy::MergeFrom(const PBEnergy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEnergy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEnergy::CopyFrom(const PBEnergy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBEnergy::IsInitialized() const {
  
  return true;
}

void PBEnergy::Swap(PBEnergy* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBEnergy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBEnergy_descriptor_;
  metadata.reflection = PBEnergy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBEquipLucky::kTypeFieldNumber;
const int PBEquipLucky::kValueFieldNumber;
#endif  // !_MSC_VER

PBEquipLucky::PBEquipLucky()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEquipLucky::InitAsDefaultInstance() {
}

PBEquipLucky::PBEquipLucky(const PBEquipLucky& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEquipLucky::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEquipLucky::~PBEquipLucky() {
  SharedDtor();
}

void PBEquipLucky::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBEquipLucky::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBEquipLucky::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEquipLucky_descriptor_;
}

const PBEquipLucky& PBEquipLucky::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBEquipLucky* PBEquipLucky::default_instance_ = NULL;

PBEquipLucky* PBEquipLucky::New() const {
  return new PBEquipLucky;
}

void PBEquipLucky::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEquipLucky::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEquipLucky::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEquipLucky::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEquipLucky::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBEquipLucky::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEquipLucky* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEquipLucky*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEquipLucky::MergeFrom(const PBEquipLucky& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEquipLucky::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipLucky::CopyFrom(const PBEquipLucky& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBEquipLucky::IsInitialized() const {
  
  return true;
}

void PBEquipLucky::Swap(PBEquipLucky* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBEquipLucky::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBEquipLucky_descriptor_;
  metadata.reflection = PBEquipLucky_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCopymapDayCount::kTypeFieldNumber;
const int PBCopymapDayCount::kCountFieldNumber;
#endif  // !_MSC_VER

PBCopymapDayCount::PBCopymapDayCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCopymapDayCount::InitAsDefaultInstance() {
}

PBCopymapDayCount::PBCopymapDayCount(const PBCopymapDayCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCopymapDayCount::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCopymapDayCount::~PBCopymapDayCount() {
  SharedDtor();
}

void PBCopymapDayCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCopymapDayCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCopymapDayCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCopymapDayCount_descriptor_;
}

const PBCopymapDayCount& PBCopymapDayCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBCopymapDayCount* PBCopymapDayCount::default_instance_ = NULL;

PBCopymapDayCount* PBCopymapDayCount::New() const {
  return new PBCopymapDayCount;
}

void PBCopymapDayCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCopymapDayCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCopymapDayCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCopymapDayCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCopymapDayCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCopymapDayCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCopymapDayCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCopymapDayCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCopymapDayCount::MergeFrom(const PBCopymapDayCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCopymapDayCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCopymapDayCount::CopyFrom(const PBCopymapDayCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCopymapDayCount::IsInitialized() const {
  
  return true;
}

void PBCopymapDayCount::Swap(PBCopymapDayCount* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCopymapDayCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCopymapDayCount_descriptor_;
  metadata.reflection = PBCopymapDayCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamTaskDayCount::kIdFieldNumber;
const int PBTeamTaskDayCount::kCountFieldNumber;
#endif  // !_MSC_VER

PBTeamTaskDayCount::PBTeamTaskDayCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamTaskDayCount::InitAsDefaultInstance() {
}

PBTeamTaskDayCount::PBTeamTaskDayCount(const PBTeamTaskDayCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamTaskDayCount::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamTaskDayCount::~PBTeamTaskDayCount() {
  SharedDtor();
}

void PBTeamTaskDayCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTeamTaskDayCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamTaskDayCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamTaskDayCount_descriptor_;
}

const PBTeamTaskDayCount& PBTeamTaskDayCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBTeamTaskDayCount* PBTeamTaskDayCount::default_instance_ = NULL;

PBTeamTaskDayCount* PBTeamTaskDayCount::New() const {
  return new PBTeamTaskDayCount;
}

void PBTeamTaskDayCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamTaskDayCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamTaskDayCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamTaskDayCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamTaskDayCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamTaskDayCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamTaskDayCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamTaskDayCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamTaskDayCount::MergeFrom(const PBTeamTaskDayCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamTaskDayCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamTaskDayCount::CopyFrom(const PBTeamTaskDayCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamTaskDayCount::IsInitialized() const {
  
  return true;
}

void PBTeamTaskDayCount::Swap(PBTeamTaskDayCount* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamTaskDayCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamTaskDayCount_descriptor_;
  metadata.reflection = PBTeamTaskDayCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBForbidSpeak::kChannelFieldNumber;
const int PBForbidSpeak::kNexttimeFieldNumber;
#endif  // !_MSC_VER

PBForbidSpeak::PBForbidSpeak()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBForbidSpeak::InitAsDefaultInstance() {
}

PBForbidSpeak::PBForbidSpeak(const PBForbidSpeak& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBForbidSpeak::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
  nexttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBForbidSpeak::~PBForbidSpeak() {
  SharedDtor();
}

void PBForbidSpeak::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBForbidSpeak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBForbidSpeak::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBForbidSpeak_descriptor_;
}

const PBForbidSpeak& PBForbidSpeak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBForbidSpeak* PBForbidSpeak::default_instance_ = NULL;

PBForbidSpeak* PBForbidSpeak::New() const {
  return new PBForbidSpeak;
}

void PBForbidSpeak::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0u;
    nexttime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBForbidSpeak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nexttime;
        break;
      }
      
      // optional uint32 nexttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nexttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexttime_)));
          set_has_nexttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBForbidSpeak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }
  
  // optional uint32 nexttime = 2;
  if (has_nexttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nexttime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBForbidSpeak::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }
  
  // optional uint32 nexttime = 2;
  if (has_nexttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nexttime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBForbidSpeak::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }
    
    // optional uint32 nexttime = 2;
    if (has_nexttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nexttime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBForbidSpeak::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBForbidSpeak* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBForbidSpeak*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBForbidSpeak::MergeFrom(const PBForbidSpeak& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_nexttime()) {
      set_nexttime(from.nexttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBForbidSpeak::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBForbidSpeak::CopyFrom(const PBForbidSpeak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBForbidSpeak::IsInitialized() const {
  
  return true;
}

void PBForbidSpeak::Swap(PBForbidSpeak* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(nexttime_, other->nexttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBForbidSpeak::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBForbidSpeak_descriptor_;
  metadata.reflection = PBForbidSpeak_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerBase::kSaveorderFieldNumber;
const int PBPlayerBase::kPlayerdisplayFieldNumber;
const int PBPlayerBase::kAccountidFieldNumber;
const int PBPlayerBase::kPlayermarkFieldNumber;
const int PBPlayerBase::kSceneidFieldNumber;
const int PBPlayerBase::kCellidFieldNumber;
const int PBPlayerBase::kScenedynidFieldNumber;
const int PBPlayerBase::kPosxFieldNumber;
const int PBPlayerBase::kPosyFieldNumber;
const int PBPlayerBase::kDirFieldNumber;
const int PBPlayerBase::kLastlogintimeFieldNumber;
const int PBPlayerBase::kLastlogouttimeFieldNumber;
const int PBPlayerBase::kCreatetimeFieldNumber;
const int PBPlayerBase::kPktypeFieldNumber;
const int PBPlayerBase::kPkvalueFieldNumber;
const int PBPlayerBase::kExpFieldNumber;
const int PBPlayerBase::kWisdomFieldNumber;
const int PBPlayerBase::kMoneyFieldNumber;
const int PBPlayerBase::kSpawnidFieldNumber;
const int PBPlayerBase::kCurhpFieldNumber;
const int PBPlayerBase::kCurenergyFieldNumber;
const int PBPlayerBase::kOnlinetimeFieldNumber;
const int PBPlayerBase::kOnlyindexFieldNumber;
const int PBPlayerBase::kOnlydayindexFieldNumber;
const int PBPlayerBase::kOnlyweekindexFieldNumber;
const int PBPlayerBase::kOnlymonthindexFieldNumber;
const int PBPlayerBase::kItemsequenceFieldNumber;
const int PBPlayerBase::kShapedataFieldNumber;
const int PBPlayerBase::kKilltimeFieldNumber;
const int PBPlayerBase::kEquipluckyFieldNumber;
const int PBPlayerBase::kFightpowerFieldNumber;
const int PBPlayerBase::kMountidFieldNumber;
const int PBPlayerBase::kOldSceneidFieldNumber;
const int PBPlayerBase::kOldCellidFieldNumber;
const int PBPlayerBase::kOldScenedynidFieldNumber;
const int PBPlayerBase::kOldPosxFieldNumber;
const int PBPlayerBase::kOldPosyFieldNumber;
const int PBPlayerBase::kOldDirFieldNumber;
const int PBPlayerBase::kSuffervalueFieldNumber;
const int PBPlayerBase::kBingfuexpFieldNumber;
const int PBPlayerBase::kCopymapcountFieldNumber;
const int PBPlayerBase::kFashiondataFieldNumber;
const int PBPlayerBase::kTeamtaskcountFieldNumber;
const int PBPlayerBase::kMaxfightpowerFieldNumber;
const int PBPlayerBase::kCorpsjobFieldNumber;
const int PBPlayerBase::kForbidspeakFieldNumber;
const int PBPlayerBase::kDailycleantimeFieldNumber;
const int PBPlayerBase::kWeeklycleantimeFieldNumber;
const int PBPlayerBase::kMonthlycleantimeFieldNumber;
#endif  // !_MSC_VER

PBPlayerBase::PBPlayerBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerBase::InitAsDefaultInstance() {
  playerdisplay_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
  shapedata_ = const_cast< ::PBPlayerShapeData*>(&::PBPlayerShapeData::default_instance());
  fashiondata_ = const_cast< ::PBPlayerFashionData*>(&::PBPlayerFashionData::default_instance());
}

PBPlayerBase::PBPlayerBase(const PBPlayerBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerBase::SharedCtor() {
  _cached_size_ = 0;
  saveorder_ = 0u;
  playerdisplay_ = NULL;
  accountid_ = 0u;
  playermark_ = 0u;
  sceneid_ = 0u;
  cellid_ = 0u;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  posx_ = 0;
  posy_ = 0;
  dir_ = 0;
  lastlogintime_ = 0u;
  lastlogouttime_ = 0u;
  createtime_ = 0u;
  pktype_ = 0u;
  pkvalue_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  wisdom_ = GOOGLE_ULONGLONG(0);
  spawnid_ = 0u;
  curhp_ = 0;
  onlinetime_ = 0u;
  onlyindex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onlydayindex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onlyweekindex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onlymonthindex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemsequence_ = 0u;
  shapedata_ = NULL;
  killtime_ = 0u;
  equiplucky_ = 0u;
  fightpower_ = 0u;
  mountid_ = 0u;
  old_sceneid_ = 0u;
  old_cellid_ = 0u;
  old_scenedynid_ = GOOGLE_ULONGLONG(0);
  old_posx_ = 0;
  old_posy_ = 0;
  old_dir_ = 0;
  suffervalue_ = GOOGLE_ULONGLONG(0);
  bingfuexp_ = GOOGLE_ULONGLONG(0);
  fashiondata_ = NULL;
  maxfightpower_ = 0u;
  corpsjob_ = 0u;
  dailycleantime_ = 0u;
  weeklycleantime_ = 0u;
  monthlycleantime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerBase::~PBPlayerBase() {
  SharedDtor();
}

void PBPlayerBase::SharedDtor() {
  if (onlyindex_ != &::google::protobuf::internal::kEmptyString) {
    delete onlyindex_;
  }
  if (onlydayindex_ != &::google::protobuf::internal::kEmptyString) {
    delete onlydayindex_;
  }
  if (onlyweekindex_ != &::google::protobuf::internal::kEmptyString) {
    delete onlyweekindex_;
  }
  if (onlymonthindex_ != &::google::protobuf::internal::kEmptyString) {
    delete onlymonthindex_;
  }
  if (this != default_instance_) {
    delete playerdisplay_;
    delete shapedata_;
    delete fashiondata_;
  }
}

void PBPlayerBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerBase_descriptor_;
}

const PBPlayerBase& PBPlayerBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerBase* PBPlayerBase::default_instance_ = NULL;

PBPlayerBase* PBPlayerBase::New() const {
  return new PBPlayerBase;
}

void PBPlayerBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveorder_ = 0u;
    if (has_playerdisplay()) {
      if (playerdisplay_ != NULL) playerdisplay_->::PBPlayerDisplay::Clear();
    }
    accountid_ = 0u;
    playermark_ = 0u;
    sceneid_ = 0u;
    cellid_ = 0u;
    scenedynid_ = GOOGLE_ULONGLONG(0);
    posx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    posy_ = 0;
    dir_ = 0;
    lastlogintime_ = 0u;
    lastlogouttime_ = 0u;
    createtime_ = 0u;
    pktype_ = 0u;
    pkvalue_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    wisdom_ = GOOGLE_ULONGLONG(0);
    spawnid_ = 0u;
    curhp_ = 0;
    onlinetime_ = 0u;
    if (has_onlyindex()) {
      if (onlyindex_ != &::google::protobuf::internal::kEmptyString) {
        onlyindex_->clear();
      }
    }
    if (has_onlydayindex()) {
      if (onlydayindex_ != &::google::protobuf::internal::kEmptyString) {
        onlydayindex_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_onlyweekindex()) {
      if (onlyweekindex_ != &::google::protobuf::internal::kEmptyString) {
        onlyweekindex_->clear();
      }
    }
    if (has_onlymonthindex()) {
      if (onlymonthindex_ != &::google::protobuf::internal::kEmptyString) {
        onlymonthindex_->clear();
      }
    }
    itemsequence_ = 0u;
    if (has_shapedata()) {
      if (shapedata_ != NULL) shapedata_->::PBPlayerShapeData::Clear();
    }
    killtime_ = 0u;
    equiplucky_ = 0u;
    fightpower_ = 0u;
    mountid_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    old_sceneid_ = 0u;
    old_cellid_ = 0u;
    old_scenedynid_ = GOOGLE_ULONGLONG(0);
    old_posx_ = 0;
    old_posy_ = 0;
    old_dir_ = 0;
    suffervalue_ = GOOGLE_ULONGLONG(0);
    bingfuexp_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    if (has_fashiondata()) {
      if (fashiondata_ != NULL) fashiondata_->::PBPlayerFashionData::Clear();
    }
    maxfightpower_ = 0u;
    corpsjob_ = 0u;
    dailycleantime_ = 0u;
    weeklycleantime_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    monthlycleantime_ = 0u;
  }
  money_.Clear();
  curenergy_.Clear();
  copymapcount_.Clear();
  teamtaskcount_.Clear();
  forbidspeak_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveorder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveorder_)));
          set_has_saveorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerdisplay;
        break;
      }
      
      // optional .PBPlayerDisplay playerdisplay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerdisplay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdisplay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accountid;
        break;
      }
      
      // optional uint32 accountid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playermark;
        break;
      }
      
      // optional uint32 playermark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playermark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermark_)));
          set_has_playermark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sceneid;
        break;
      }
      
      // optional uint32 sceneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cellid;
        break;
      }
      
      // optional uint32 cellid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_scenedynid;
        break;
      }
      
      // optional uint64 scenedynid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenedynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_posx;
        break;
      }
      
      // optional float posx = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_posy;
        break;
      }
      
      // optional float posy = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_dir;
        break;
      }
      
      // optional float dir = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lastlogintime;
        break;
      }
      
      // optional uint32 lastlogintime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastlogintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lastlogouttime;
        break;
      }
      
      // optional uint32 lastlogouttime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastlogouttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogouttime_)));
          set_has_lastlogouttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_createtime;
        break;
      }
      
      // optional uint32 createtime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_pktype;
        break;
      }
      
      // optional uint32 pktype = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pktype_)));
          set_has_pktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pkvalue;
        break;
      }
      
      // optional uint32 pkvalue = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkvalue_)));
          set_has_pkvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_exp;
        break;
      }
      
      // optional uint64 exp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_wisdom;
        break;
      }
      
      // optional uint64 wisdom = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wisdom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wisdom_)));
          set_has_wisdom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_money;
        break;
      }
      
      // repeated .PBPlayerMoney money = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_money;
        if (input->ExpectTag(152)) goto parse_spawnid;
        break;
      }
      
      // optional uint32 spawnid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spawnid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawnid_)));
          set_has_spawnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_curhp;
        break;
      }
      
      // optional int32 curhp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_curenergy;
        break;
      }
      
      // repeated .PBEnergy curenergy = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curenergy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curenergy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_curenergy;
        if (input->ExpectTag(176)) goto parse_onlinetime;
        break;
      }
      
      // optional uint32 onlinetime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_onlyindex;
        break;
      }
      
      // optional bytes onlyindex = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onlyindex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_onlyindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_onlydayindex;
        break;
      }
      
      // optional bytes onlydayindex = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onlydayindex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_onlydayindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_onlyweekindex;
        break;
      }
      
      // optional bytes onlyweekindex = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onlyweekindex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_onlyweekindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_onlymonthindex;
        break;
      }
      
      // optional bytes onlymonthindex = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onlymonthindex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_onlymonthindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_itemsequence;
        break;
      }
      
      // optional uint32 itemsequence = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemsequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemsequence_)));
          set_has_itemsequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_shapedata;
        break;
      }
      
      // optional .PBPlayerShapeData shapedata = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shapedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shapedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_killtime;
        break;
      }
      
      // optional uint32 killtime = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killtime_)));
          set_has_killtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_equiplucky;
        break;
      }
      
      // optional uint32 equiplucky = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiplucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiplucky_)));
          set_has_equiplucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_mountid;
        break;
      }
      
      // optional uint32 mountid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mountid_)));
          set_has_mountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_old_sceneid;
        break;
      }
      
      // optional uint32 old_sceneid = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_sceneid_)));
          set_has_old_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_old_cellid;
        break;
      }
      
      // optional uint32 old_cellid = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_cellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_cellid_)));
          set_has_old_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_old_scenedynid;
        break;
      }
      
      // optional uint64 old_scenedynid = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_scenedynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_scenedynid_)));
          set_has_old_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(293)) goto parse_old_posx;
        break;
      }
      
      // optional float old_posx = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_old_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &old_posx_)));
          set_has_old_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(301)) goto parse_old_posy;
        break;
      }
      
      // optional float old_posy = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_old_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &old_posy_)));
          set_has_old_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(309)) goto parse_old_dir;
        break;
      }
      
      // optional float old_dir = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_old_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &old_dir_)));
          set_has_old_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_suffervalue;
        break;
      }
      
      // optional uint64 suffervalue = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suffervalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &suffervalue_)));
          set_has_suffervalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_bingfuexp;
        break;
      }
      
      // optional uint64 bingfuexp = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bingfuexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bingfuexp_)));
          set_has_bingfuexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_copymapcount;
        break;
      }
      
      // repeated .PBCopymapDayCount copymapcount = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copymapcount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_copymapcount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_copymapcount;
        if (input->ExpectTag(338)) goto parse_fashiondata;
        break;
      }
      
      // optional .PBPlayerFashionData fashiondata = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashiondata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashiondata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_teamtaskcount;
        break;
      }
      
      // repeated .PBTeamTaskDayCount teamtaskcount = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamtaskcount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamtaskcount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_teamtaskcount;
        if (input->ExpectTag(360)) goto parse_maxfightpower;
        break;
      }
      
      // optional uint32 maxfightpower = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxfightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxfightpower_)));
          set_has_maxfightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_corpsjob;
        break;
      }
      
      // optional uint32 corpsjob = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corpsjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corpsjob_)));
          set_has_corpsjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_forbidspeak;
        break;
      }
      
      // repeated .PBForbidSpeak forbidspeak = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forbidspeak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forbidspeak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_forbidspeak;
        if (input->ExpectTag(384)) goto parse_dailycleantime;
        break;
      }
      
      // optional uint32 dailycleantime = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailycleantime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailycleantime_)));
          set_has_dailycleantime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_weeklycleantime;
        break;
      }
      
      // optional uint32 weeklycleantime = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weeklycleantime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weeklycleantime_)));
          set_has_weeklycleantime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_monthlycleantime;
        break;
      }
      
      // optional uint32 monthlycleantime = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monthlycleantime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monthlycleantime_)));
          set_has_monthlycleantime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveorder(), output);
  }
  
  // optional .PBPlayerDisplay playerdisplay = 2;
  if (has_playerdisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerdisplay(), output);
  }
  
  // optional uint32 accountid = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid(), output);
  }
  
  // optional uint32 playermark = 4;
  if (has_playermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playermark(), output);
  }
  
  // optional uint32 sceneid = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneid(), output);
  }
  
  // optional uint32 cellid = 6;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cellid(), output);
  }
  
  // optional uint64 scenedynid = 7;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->scenedynid(), output);
  }
  
  // optional float posx = 8;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->posx(), output);
  }
  
  // optional float posy = 9;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->posy(), output);
  }
  
  // optional float dir = 10;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->dir(), output);
  }
  
  // optional uint32 lastlogintime = 11;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lastlogintime(), output);
  }
  
  // optional uint32 lastlogouttime = 12;
  if (has_lastlogouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->lastlogouttime(), output);
  }
  
  // optional uint32 createtime = 13;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->createtime(), output);
  }
  
  // optional uint32 pktype = 14;
  if (has_pktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->pktype(), output);
  }
  
  // optional uint32 pkvalue = 15;
  if (has_pkvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->pkvalue(), output);
  }
  
  // optional uint64 exp = 16;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->exp(), output);
  }
  
  // optional uint64 wisdom = 17;
  if (has_wisdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->wisdom(), output);
  }
  
  // repeated .PBPlayerMoney money = 18;
  for (int i = 0; i < this->money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->money(i), output);
  }
  
  // optional uint32 spawnid = 19;
  if (has_spawnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->spawnid(), output);
  }
  
  // optional int32 curhp = 20;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->curhp(), output);
  }
  
  // repeated .PBEnergy curenergy = 21;
  for (int i = 0; i < this->curenergy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->curenergy(i), output);
  }
  
  // optional uint32 onlinetime = 22;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->onlinetime(), output);
  }
  
  // optional bytes onlyindex = 23;
  if (has_onlyindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      23, this->onlyindex(), output);
  }
  
  // optional bytes onlydayindex = 24;
  if (has_onlydayindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      24, this->onlydayindex(), output);
  }
  
  // optional bytes onlyweekindex = 25;
  if (has_onlyweekindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      25, this->onlyweekindex(), output);
  }
  
  // optional bytes onlymonthindex = 26;
  if (has_onlymonthindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      26, this->onlymonthindex(), output);
  }
  
  // optional uint32 itemsequence = 27;
  if (has_itemsequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->itemsequence(), output);
  }
  
  // optional .PBPlayerShapeData shapedata = 28;
  if (has_shapedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->shapedata(), output);
  }
  
  // optional uint32 killtime = 29;
  if (has_killtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->killtime(), output);
  }
  
  // optional uint32 equiplucky = 30;
  if (has_equiplucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->equiplucky(), output);
  }
  
  // optional uint32 fightpower = 31;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->fightpower(), output);
  }
  
  // optional uint32 mountid = 32;
  if (has_mountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->mountid(), output);
  }
  
  // optional uint32 old_sceneid = 33;
  if (has_old_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->old_sceneid(), output);
  }
  
  // optional uint32 old_cellid = 34;
  if (has_old_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->old_cellid(), output);
  }
  
  // optional uint64 old_scenedynid = 35;
  if (has_old_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->old_scenedynid(), output);
  }
  
  // optional float old_posx = 36;
  if (has_old_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->old_posx(), output);
  }
  
  // optional float old_posy = 37;
  if (has_old_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->old_posy(), output);
  }
  
  // optional float old_dir = 38;
  if (has_old_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->old_dir(), output);
  }
  
  // optional uint64 suffervalue = 39;
  if (has_suffervalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(39, this->suffervalue(), output);
  }
  
  // optional uint64 bingfuexp = 40;
  if (has_bingfuexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->bingfuexp(), output);
  }
  
  // repeated .PBCopymapDayCount copymapcount = 41;
  for (int i = 0; i < this->copymapcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->copymapcount(i), output);
  }
  
  // optional .PBPlayerFashionData fashiondata = 42;
  if (has_fashiondata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->fashiondata(), output);
  }
  
  // repeated .PBTeamTaskDayCount teamtaskcount = 44;
  for (int i = 0; i < this->teamtaskcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->teamtaskcount(i), output);
  }
  
  // optional uint32 maxfightpower = 45;
  if (has_maxfightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->maxfightpower(), output);
  }
  
  // optional uint32 corpsjob = 46;
  if (has_corpsjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->corpsjob(), output);
  }
  
  // repeated .PBForbidSpeak forbidspeak = 47;
  for (int i = 0; i < this->forbidspeak_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->forbidspeak(i), output);
  }
  
  // optional uint32 dailycleantime = 48;
  if (has_dailycleantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->dailycleantime(), output);
  }
  
  // optional uint32 weeklycleantime = 49;
  if (has_weeklycleantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->weeklycleantime(), output);
  }
  
  // optional uint32 monthlycleantime = 50;
  if (has_monthlycleantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->monthlycleantime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveorder(), target);
  }
  
  // optional .PBPlayerDisplay playerdisplay = 2;
  if (has_playerdisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerdisplay(), target);
  }
  
  // optional uint32 accountid = 3;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid(), target);
  }
  
  // optional uint32 playermark = 4;
  if (has_playermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playermark(), target);
  }
  
  // optional uint32 sceneid = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneid(), target);
  }
  
  // optional uint32 cellid = 6;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cellid(), target);
  }
  
  // optional uint64 scenedynid = 7;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->scenedynid(), target);
  }
  
  // optional float posx = 8;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->posx(), target);
  }
  
  // optional float posy = 9;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->posy(), target);
  }
  
  // optional float dir = 10;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->dir(), target);
  }
  
  // optional uint32 lastlogintime = 11;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lastlogintime(), target);
  }
  
  // optional uint32 lastlogouttime = 12;
  if (has_lastlogouttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->lastlogouttime(), target);
  }
  
  // optional uint32 createtime = 13;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->createtime(), target);
  }
  
  // optional uint32 pktype = 14;
  if (has_pktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->pktype(), target);
  }
  
  // optional uint32 pkvalue = 15;
  if (has_pkvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->pkvalue(), target);
  }
  
  // optional uint64 exp = 16;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->exp(), target);
  }
  
  // optional uint64 wisdom = 17;
  if (has_wisdom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->wisdom(), target);
  }
  
  // repeated .PBPlayerMoney money = 18;
  for (int i = 0; i < this->money_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->money(i), target);
  }
  
  // optional uint32 spawnid = 19;
  if (has_spawnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->spawnid(), target);
  }
  
  // optional int32 curhp = 20;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->curhp(), target);
  }
  
  // repeated .PBEnergy curenergy = 21;
  for (int i = 0; i < this->curenergy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->curenergy(i), target);
  }
  
  // optional uint32 onlinetime = 22;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->onlinetime(), target);
  }
  
  // optional bytes onlyindex = 23;
  if (has_onlyindex()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->onlyindex(), target);
  }
  
  // optional bytes onlydayindex = 24;
  if (has_onlydayindex()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->onlydayindex(), target);
  }
  
  // optional bytes onlyweekindex = 25;
  if (has_onlyweekindex()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->onlyweekindex(), target);
  }
  
  // optional bytes onlymonthindex = 26;
  if (has_onlymonthindex()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->onlymonthindex(), target);
  }
  
  // optional uint32 itemsequence = 27;
  if (has_itemsequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->itemsequence(), target);
  }
  
  // optional .PBPlayerShapeData shapedata = 28;
  if (has_shapedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->shapedata(), target);
  }
  
  // optional uint32 killtime = 29;
  if (has_killtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->killtime(), target);
  }
  
  // optional uint32 equiplucky = 30;
  if (has_equiplucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->equiplucky(), target);
  }
  
  // optional uint32 fightpower = 31;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->fightpower(), target);
  }
  
  // optional uint32 mountid = 32;
  if (has_mountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->mountid(), target);
  }
  
  // optional uint32 old_sceneid = 33;
  if (has_old_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->old_sceneid(), target);
  }
  
  // optional uint32 old_cellid = 34;
  if (has_old_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->old_cellid(), target);
  }
  
  // optional uint64 old_scenedynid = 35;
  if (has_old_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(35, this->old_scenedynid(), target);
  }
  
  // optional float old_posx = 36;
  if (has_old_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->old_posx(), target);
  }
  
  // optional float old_posy = 37;
  if (has_old_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->old_posy(), target);
  }
  
  // optional float old_dir = 38;
  if (has_old_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->old_dir(), target);
  }
  
  // optional uint64 suffervalue = 39;
  if (has_suffervalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(39, this->suffervalue(), target);
  }
  
  // optional uint64 bingfuexp = 40;
  if (has_bingfuexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->bingfuexp(), target);
  }
  
  // repeated .PBCopymapDayCount copymapcount = 41;
  for (int i = 0; i < this->copymapcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->copymapcount(i), target);
  }
  
  // optional .PBPlayerFashionData fashiondata = 42;
  if (has_fashiondata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->fashiondata(), target);
  }
  
  // repeated .PBTeamTaskDayCount teamtaskcount = 44;
  for (int i = 0; i < this->teamtaskcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->teamtaskcount(i), target);
  }
  
  // optional uint32 maxfightpower = 45;
  if (has_maxfightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->maxfightpower(), target);
  }
  
  // optional uint32 corpsjob = 46;
  if (has_corpsjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->corpsjob(), target);
  }
  
  // repeated .PBForbidSpeak forbidspeak = 47;
  for (int i = 0; i < this->forbidspeak_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->forbidspeak(i), target);
  }
  
  // optional uint32 dailycleantime = 48;
  if (has_dailycleantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->dailycleantime(), target);
  }
  
  // optional uint32 weeklycleantime = 49;
  if (has_weeklycleantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->weeklycleantime(), target);
  }
  
  // optional uint32 monthlycleantime = 50;
  if (has_monthlycleantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->monthlycleantime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveorder = 1;
    if (has_saveorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveorder());
    }
    
    // optional .PBPlayerDisplay playerdisplay = 2;
    if (has_playerdisplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdisplay());
    }
    
    // optional uint32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 playermark = 4;
    if (has_playermark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playermark());
    }
    
    // optional uint32 sceneid = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 cellid = 6;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }
    
    // optional uint64 scenedynid = 7;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
    // optional float posx = 8;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float posy = 9;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
    // optional float dir = 10;
    if (has_dir()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 lastlogintime = 11;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastlogintime());
    }
    
    // optional uint32 lastlogouttime = 12;
    if (has_lastlogouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastlogouttime());
    }
    
    // optional uint32 createtime = 13;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }
    
    // optional uint32 pktype = 14;
    if (has_pktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pktype());
    }
    
    // optional uint32 pkvalue = 15;
    if (has_pkvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkvalue());
    }
    
    // optional uint64 exp = 16;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 wisdom = 17;
    if (has_wisdom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wisdom());
    }
    
    // optional uint32 spawnid = 19;
    if (has_spawnid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawnid());
    }
    
    // optional int32 curhp = 20;
    if (has_curhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }
    
    // optional uint32 onlinetime = 22;
    if (has_onlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetime());
    }
    
    // optional bytes onlyindex = 23;
    if (has_onlyindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->onlyindex());
    }
    
    // optional bytes onlydayindex = 24;
    if (has_onlydayindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->onlydayindex());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bytes onlyweekindex = 25;
    if (has_onlyweekindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->onlyweekindex());
    }
    
    // optional bytes onlymonthindex = 26;
    if (has_onlymonthindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->onlymonthindex());
    }
    
    // optional uint32 itemsequence = 27;
    if (has_itemsequence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemsequence());
    }
    
    // optional .PBPlayerShapeData shapedata = 28;
    if (has_shapedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shapedata());
    }
    
    // optional uint32 killtime = 29;
    if (has_killtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killtime());
    }
    
    // optional uint32 equiplucky = 30;
    if (has_equiplucky()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiplucky());
    }
    
    // optional uint32 fightpower = 31;
    if (has_fightpower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
    // optional uint32 mountid = 32;
    if (has_mountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mountid());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 old_sceneid = 33;
    if (has_old_sceneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_sceneid());
    }
    
    // optional uint32 old_cellid = 34;
    if (has_old_cellid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_cellid());
    }
    
    // optional uint64 old_scenedynid = 35;
    if (has_old_scenedynid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_scenedynid());
    }
    
    // optional float old_posx = 36;
    if (has_old_posx()) {
      total_size += 2 + 4;
    }
    
    // optional float old_posy = 37;
    if (has_old_posy()) {
      total_size += 2 + 4;
    }
    
    // optional float old_dir = 38;
    if (has_old_dir()) {
      total_size += 2 + 4;
    }
    
    // optional uint64 suffervalue = 39;
    if (has_suffervalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->suffervalue());
    }
    
    // optional uint64 bingfuexp = 40;
    if (has_bingfuexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bingfuexp());
    }
    
  }
  if (_has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    // optional .PBPlayerFashionData fashiondata = 42;
    if (has_fashiondata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashiondata());
    }
    
    // optional uint32 maxfightpower = 45;
    if (has_maxfightpower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxfightpower());
    }
    
    // optional uint32 corpsjob = 46;
    if (has_corpsjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corpsjob());
    }
    
    // optional uint32 dailycleantime = 48;
    if (has_dailycleantime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailycleantime());
    }
    
    // optional uint32 weeklycleantime = 49;
    if (has_weeklycleantime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weeklycleantime());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 monthlycleantime = 50;
    if (has_monthlycleantime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monthlycleantime());
    }
    
  }
  // repeated .PBPlayerMoney money = 18;
  total_size += 2 * this->money_size();
  for (int i = 0; i < this->money_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->money(i));
  }
  
  // repeated .PBEnergy curenergy = 21;
  total_size += 2 * this->curenergy_size();
  for (int i = 0; i < this->curenergy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curenergy(i));
  }
  
  // repeated .PBCopymapDayCount copymapcount = 41;
  total_size += 2 * this->copymapcount_size();
  for (int i = 0; i < this->copymapcount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->copymapcount(i));
  }
  
  // repeated .PBTeamTaskDayCount teamtaskcount = 44;
  total_size += 2 * this->teamtaskcount_size();
  for (int i = 0; i < this->teamtaskcount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamtaskcount(i));
  }
  
  // repeated .PBForbidSpeak forbidspeak = 47;
  total_size += 2 * this->forbidspeak_size();
  for (int i = 0; i < this->forbidspeak_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forbidspeak(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerBase::MergeFrom(const PBPlayerBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  money_.MergeFrom(from.money_);
  curenergy_.MergeFrom(from.curenergy_);
  copymapcount_.MergeFrom(from.copymapcount_);
  teamtaskcount_.MergeFrom(from.teamtaskcount_);
  forbidspeak_.MergeFrom(from.forbidspeak_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveorder()) {
      set_saveorder(from.saveorder());
    }
    if (from.has_playerdisplay()) {
      mutable_playerdisplay()->::PBPlayerDisplay::MergeFrom(from.playerdisplay());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_playermark()) {
      set_playermark(from.playermark());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_lastlogouttime()) {
      set_lastlogouttime(from.lastlogouttime());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_pktype()) {
      set_pktype(from.pktype());
    }
    if (from.has_pkvalue()) {
      set_pkvalue(from.pkvalue());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wisdom()) {
      set_wisdom(from.wisdom());
    }
    if (from.has_spawnid()) {
      set_spawnid(from.spawnid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_onlyindex()) {
      set_onlyindex(from.onlyindex());
    }
    if (from.has_onlydayindex()) {
      set_onlydayindex(from.onlydayindex());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_onlyweekindex()) {
      set_onlyweekindex(from.onlyweekindex());
    }
    if (from.has_onlymonthindex()) {
      set_onlymonthindex(from.onlymonthindex());
    }
    if (from.has_itemsequence()) {
      set_itemsequence(from.itemsequence());
    }
    if (from.has_shapedata()) {
      mutable_shapedata()->::PBPlayerShapeData::MergeFrom(from.shapedata());
    }
    if (from.has_killtime()) {
      set_killtime(from.killtime());
    }
    if (from.has_equiplucky()) {
      set_equiplucky(from.equiplucky());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_mountid()) {
      set_mountid(from.mountid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_old_sceneid()) {
      set_old_sceneid(from.old_sceneid());
    }
    if (from.has_old_cellid()) {
      set_old_cellid(from.old_cellid());
    }
    if (from.has_old_scenedynid()) {
      set_old_scenedynid(from.old_scenedynid());
    }
    if (from.has_old_posx()) {
      set_old_posx(from.old_posx());
    }
    if (from.has_old_posy()) {
      set_old_posy(from.old_posy());
    }
    if (from.has_old_dir()) {
      set_old_dir(from.old_dir());
    }
    if (from.has_suffervalue()) {
      set_suffervalue(from.suffervalue());
    }
    if (from.has_bingfuexp()) {
      set_bingfuexp(from.bingfuexp());
    }
  }
  if (from._has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    if (from.has_fashiondata()) {
      mutable_fashiondata()->::PBPlayerFashionData::MergeFrom(from.fashiondata());
    }
    if (from.has_maxfightpower()) {
      set_maxfightpower(from.maxfightpower());
    }
    if (from.has_corpsjob()) {
      set_corpsjob(from.corpsjob());
    }
    if (from.has_dailycleantime()) {
      set_dailycleantime(from.dailycleantime());
    }
    if (from.has_weeklycleantime()) {
      set_weeklycleantime(from.weeklycleantime());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_monthlycleantime()) {
      set_monthlycleantime(from.monthlycleantime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerBase::CopyFrom(const PBPlayerBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerBase::IsInitialized() const {
  
  return true;
}

void PBPlayerBase::Swap(PBPlayerBase* other) {
  if (other != this) {
    std::swap(saveorder_, other->saveorder_);
    std::swap(playerdisplay_, other->playerdisplay_);
    std::swap(accountid_, other->accountid_);
    std::swap(playermark_, other->playermark_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(cellid_, other->cellid_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(dir_, other->dir_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(lastlogouttime_, other->lastlogouttime_);
    std::swap(createtime_, other->createtime_);
    std::swap(pktype_, other->pktype_);
    std::swap(pkvalue_, other->pkvalue_);
    std::swap(exp_, other->exp_);
    std::swap(wisdom_, other->wisdom_);
    money_.Swap(&other->money_);
    std::swap(spawnid_, other->spawnid_);
    std::swap(curhp_, other->curhp_);
    curenergy_.Swap(&other->curenergy_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(onlyindex_, other->onlyindex_);
    std::swap(onlydayindex_, other->onlydayindex_);
    std::swap(onlyweekindex_, other->onlyweekindex_);
    std::swap(onlymonthindex_, other->onlymonthindex_);
    std::swap(itemsequence_, other->itemsequence_);
    std::swap(shapedata_, other->shapedata_);
    std::swap(killtime_, other->killtime_);
    std::swap(equiplucky_, other->equiplucky_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(mountid_, other->mountid_);
    std::swap(old_sceneid_, other->old_sceneid_);
    std::swap(old_cellid_, other->old_cellid_);
    std::swap(old_scenedynid_, other->old_scenedynid_);
    std::swap(old_posx_, other->old_posx_);
    std::swap(old_posy_, other->old_posy_);
    std::swap(old_dir_, other->old_dir_);
    std::swap(suffervalue_, other->suffervalue_);
    std::swap(bingfuexp_, other->bingfuexp_);
    copymapcount_.Swap(&other->copymapcount_);
    std::swap(fashiondata_, other->fashiondata_);
    teamtaskcount_.Swap(&other->teamtaskcount_);
    std::swap(maxfightpower_, other->maxfightpower_);
    std::swap(corpsjob_, other->corpsjob_);
    forbidspeak_.Swap(&other->forbidspeak_);
    std::swap(dailycleantime_, other->dailycleantime_);
    std::swap(weeklycleantime_, other->weeklycleantime_);
    std::swap(monthlycleantime_, other->monthlycleantime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerBase_descriptor_;
  metadata.reflection = PBPlayerBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCoolingInfo::kTypeFieldNumber;
const int PBCoolingInfo::kIdFieldNumber;
const int PBCoolingInfo::kBeginFieldNumber;
const int PBCoolingInfo::kEndFieldNumber;
const int PBCoolingInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

PBCoolingInfo::PBCoolingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCoolingInfo::InitAsDefaultInstance() {
}

PBCoolingInfo::PBCoolingInfo(const PBCoolingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCoolingInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  begin_ = GOOGLE_ULONGLONG(0);
  end_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCoolingInfo::~PBCoolingInfo() {
  SharedDtor();
}

void PBCoolingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCoolingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCoolingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCoolingInfo_descriptor_;
}

const PBCoolingInfo& PBCoolingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBCoolingInfo* PBCoolingInfo::default_instance_ = NULL;

PBCoolingInfo* PBCoolingInfo::New() const {
  return new PBCoolingInfo;
}

void PBCoolingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
    begin_ = GOOGLE_ULONGLONG(0);
    end_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCoolingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begin;
        break;
      }
      
      // optional uint64 begin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end;
        break;
      }
      
      // optional uint64 end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCoolingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  // optional uint64 begin = 3;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->begin(), output);
  }
  
  // optional uint64 end = 4;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->end(), output);
  }
  
  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCoolingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  // optional uint64 begin = 3;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->begin(), target);
  }
  
  // optional uint64 end = 4;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->end(), target);
  }
  
  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCoolingInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint64 begin = 3;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin());
    }
    
    // optional uint64 end = 4;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end());
    }
    
    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCoolingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCoolingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCoolingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCoolingInfo::MergeFrom(const PBCoolingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCoolingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCoolingInfo::CopyFrom(const PBCoolingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCoolingInfo::IsInitialized() const {
  
  return true;
}

void PBCoolingInfo::Swap(PBCoolingInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCoolingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCoolingInfo_descriptor_;
  metadata.reflection = PBCoolingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCooling::kCoolingFieldNumber;
#endif  // !_MSC_VER

PBCooling::PBCooling()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCooling::InitAsDefaultInstance() {
}

PBCooling::PBCooling(const PBCooling& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCooling::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCooling::~PBCooling() {
  SharedDtor();
}

void PBCooling::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCooling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCooling::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCooling_descriptor_;
}

const PBCooling& PBCooling::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBCooling* PBCooling::default_instance_ = NULL;

PBCooling* PBCooling::New() const {
  return new PBCooling;
}

void PBCooling::Clear() {
  cooling_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCooling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBCoolingInfo cooling = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cooling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cooling()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cooling;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCooling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBCoolingInfo cooling = 1;
  for (int i = 0; i < this->cooling_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cooling(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCooling::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCoolingInfo cooling = 1;
  for (int i = 0; i < this->cooling_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cooling(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCooling::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBCoolingInfo cooling = 1;
  total_size += 1 * this->cooling_size();
  for (int i = 0; i < this->cooling_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cooling(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCooling::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCooling* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCooling*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCooling::MergeFrom(const PBCooling& from) {
  GOOGLE_CHECK_NE(&from, this);
  cooling_.MergeFrom(from.cooling_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCooling::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCooling::CopyFrom(const PBCooling& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCooling::IsInitialized() const {
  
  return true;
}

void PBCooling::Swap(PBCooling* other) {
  if (other != this) {
    cooling_.Swap(&other->cooling_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCooling::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCooling_descriptor_;
  metadata.reflection = PBCooling_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSystemSkill::kPbskillFieldNumber;
#endif  // !_MSC_VER

PBSystemSkill::PBSystemSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSystemSkill::InitAsDefaultInstance() {
}

PBSystemSkill::PBSystemSkill(const PBSystemSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSystemSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSystemSkill::~PBSystemSkill() {
  SharedDtor();
}

void PBSystemSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSystemSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSystemSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSystemSkill_descriptor_;
}

const PBSystemSkill& PBSystemSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBSystemSkill* PBSystemSkill::default_instance_ = NULL;

PBSystemSkill* PBSystemSkill::New() const {
  return new PBSystemSkill;
}

void PBSystemSkill::Clear() {
  pbskill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSystemSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBSkill pbskill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbskill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbskill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pbskill;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSystemSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBSkill pbskill = 1;
  for (int i = 0; i < this->pbskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbskill(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSystemSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSkill pbskill = 1;
  for (int i = 0; i < this->pbskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbskill(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSystemSkill::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBSkill pbskill = 1;
  total_size += 1 * this->pbskill_size();
  for (int i = 0; i < this->pbskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbskill(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSystemSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSystemSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSystemSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSystemSkill::MergeFrom(const PBSystemSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbskill_.MergeFrom(from.pbskill_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSystemSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSystemSkill::CopyFrom(const PBSystemSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSystemSkill::IsInitialized() const {
  
  return true;
}

void PBSystemSkill::Swap(PBSystemSkill* other) {
  if (other != this) {
    pbskill_.Swap(&other->pbskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSystemSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSystemSkill_descriptor_;
  metadata.reflection = PBSystemSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSystemBuff::kPbbuffFieldNumber;
#endif  // !_MSC_VER

PBSystemBuff::PBSystemBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSystemBuff::InitAsDefaultInstance() {
}

PBSystemBuff::PBSystemBuff(const PBSystemBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSystemBuff::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSystemBuff::~PBSystemBuff() {
  SharedDtor();
}

void PBSystemBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSystemBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSystemBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSystemBuff_descriptor_;
}

const PBSystemBuff& PBSystemBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBSystemBuff* PBSystemBuff::default_instance_ = NULL;

PBSystemBuff* PBSystemBuff::New() const {
  return new PBSystemBuff;
}

void PBSystemBuff::Clear() {
  pbbuff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSystemBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBBuff pbbuff = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbbuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbbuff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pbbuff;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSystemBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBBuff pbbuff = 1;
  for (int i = 0; i < this->pbbuff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbbuff(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSystemBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBBuff pbbuff = 1;
  for (int i = 0; i < this->pbbuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbbuff(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSystemBuff::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBBuff pbbuff = 1;
  total_size += 1 * this->pbbuff_size();
  for (int i = 0; i < this->pbbuff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbbuff(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSystemBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSystemBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSystemBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSystemBuff::MergeFrom(const PBSystemBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbbuff_.MergeFrom(from.pbbuff_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSystemBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSystemBuff::CopyFrom(const PBSystemBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSystemBuff::IsInitialized() const {
  
  return true;
}

void PBSystemBuff::Swap(PBSystemBuff* other) {
  if (other != this) {
    pbbuff_.Swap(&other->pbbuff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSystemBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSystemBuff_descriptor_;
  metadata.reflection = PBSystemBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSystemCounter::kPbcounterFieldNumber;
#endif  // !_MSC_VER

PBSystemCounter::PBSystemCounter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSystemCounter::InitAsDefaultInstance() {
}

PBSystemCounter::PBSystemCounter(const PBSystemCounter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSystemCounter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSystemCounter::~PBSystemCounter() {
  SharedDtor();
}

void PBSystemCounter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSystemCounter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSystemCounter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSystemCounter_descriptor_;
}

const PBSystemCounter& PBSystemCounter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBSystemCounter* PBSystemCounter::default_instance_ = NULL;

PBSystemCounter* PBSystemCounter::New() const {
  return new PBSystemCounter;
}

void PBSystemCounter::Clear() {
  pbcounter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSystemCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBCounter pbcounter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbcounter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbcounter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pbcounter;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSystemCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBCounter pbcounter = 1;
  for (int i = 0; i < this->pbcounter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbcounter(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSystemCounter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCounter pbcounter = 1;
  for (int i = 0; i < this->pbcounter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbcounter(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSystemCounter::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBCounter pbcounter = 1;
  total_size += 1 * this->pbcounter_size();
  for (int i = 0; i < this->pbcounter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbcounter(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSystemCounter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSystemCounter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSystemCounter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSystemCounter::MergeFrom(const PBSystemCounter& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbcounter_.MergeFrom(from.pbcounter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSystemCounter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSystemCounter::CopyFrom(const PBSystemCounter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSystemCounter::IsInitialized() const {
  
  return true;
}

void PBSystemCounter::Swap(PBSystemCounter* other) {
  if (other != this) {
    pbcounter_.Swap(&other->pbcounter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSystemCounter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSystemCounter_descriptor_;
  metadata.reflection = PBSystemCounter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSystemSwitch::kIdFieldNumber;
#endif  // !_MSC_VER

PBSystemSwitch::PBSystemSwitch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSystemSwitch::InitAsDefaultInstance() {
}

PBSystemSwitch::PBSystemSwitch(const PBSystemSwitch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSystemSwitch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSystemSwitch::~PBSystemSwitch() {
  SharedDtor();
}

void PBSystemSwitch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSystemSwitch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSystemSwitch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSystemSwitch_descriptor_;
}

const PBSystemSwitch& PBSystemSwitch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBSystemSwitch* PBSystemSwitch::default_instance_ = NULL;

PBSystemSwitch* PBSystemSwitch::New() const {
  return new PBSystemSwitch;
}

void PBSystemSwitch::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSystemSwitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSystemSwitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSystemSwitch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSystemSwitch::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSystemSwitch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSystemSwitch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSystemSwitch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSystemSwitch::MergeFrom(const PBSystemSwitch& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSystemSwitch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSystemSwitch::CopyFrom(const PBSystemSwitch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSystemSwitch::IsInitialized() const {
  
  return true;
}

void PBSystemSwitch::Swap(PBSystemSwitch* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSystemSwitch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSystemSwitch_descriptor_;
  metadata.reflection = PBSystemSwitch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerColletion::kPbcolletionFieldNumber;
#endif  // !_MSC_VER

PBPlayerColletion::PBPlayerColletion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerColletion::InitAsDefaultInstance() {
}

PBPlayerColletion::PBPlayerColletion(const PBPlayerColletion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerColletion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerColletion::~PBPlayerColletion() {
  SharedDtor();
}

void PBPlayerColletion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerColletion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerColletion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerColletion_descriptor_;
}

const PBPlayerColletion& PBPlayerColletion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerColletion* PBPlayerColletion::default_instance_ = NULL;

PBPlayerColletion* PBPlayerColletion::New() const {
  return new PBPlayerColletion;
}

void PBPlayerColletion::Clear() {
  pbcolletion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerColletion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBColletionData pbcolletion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbcolletion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbcolletion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pbcolletion;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerColletion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBColletionData pbcolletion = 1;
  for (int i = 0; i < this->pbcolletion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbcolletion(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerColletion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBColletionData pbcolletion = 1;
  for (int i = 0; i < this->pbcolletion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbcolletion(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerColletion::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBColletionData pbcolletion = 1;
  total_size += 1 * this->pbcolletion_size();
  for (int i = 0; i < this->pbcolletion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbcolletion(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerColletion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerColletion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerColletion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerColletion::MergeFrom(const PBPlayerColletion& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbcolletion_.MergeFrom(from.pbcolletion_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerColletion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerColletion::CopyFrom(const PBPlayerColletion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerColletion::IsInitialized() const {
  
  return true;
}

void PBPlayerColletion::Swap(PBPlayerColletion* other) {
  if (other != this) {
    pbcolletion_.Swap(&other->pbcolletion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerColletion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerColletion_descriptor_;
  metadata.reflection = PBPlayerColletion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPrize::kInstancesnFieldNumber;
const int PBPrize::kPrizeidFieldNumber;
const int PBPrize::kLevelFieldNumber;
const int PBPrize::kTimeFieldNumber;
#endif  // !_MSC_VER

PBPrize::PBPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPrize::InitAsDefaultInstance() {
}

PBPrize::PBPrize(const PBPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPrize::SharedCtor() {
  _cached_size_ = 0;
  instancesn_ = GOOGLE_ULONGLONG(0);
  prizeid_ = 0u;
  level_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPrize::~PBPrize() {
  SharedDtor();
}

void PBPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPrize_descriptor_;
}

const PBPrize& PBPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPrize* PBPrize::default_instance_ = NULL;

PBPrize* PBPrize::New() const {
  return new PBPrize;
}

void PBPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instancesn_ = GOOGLE_ULONGLONG(0);
    prizeid_ = 0u;
    level_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 instancesn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instancesn_)));
          set_has_instancesn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prizeid;
        break;
      }
      
      // optional uint32 prizeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizeid_)));
          set_has_prizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 instancesn = 1;
  if (has_instancesn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instancesn(), output);
  }
  
  // optional uint32 prizeid = 2;
  if (has_prizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prizeid(), output);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 instancesn = 1;
  if (has_instancesn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instancesn(), target);
  }
  
  // optional uint32 prizeid = 2;
  if (has_prizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prizeid(), target);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPrize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 instancesn = 1;
    if (has_instancesn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instancesn());
    }
    
    // optional uint32 prizeid = 2;
    if (has_prizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizeid());
    }
    
    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPrize::MergeFrom(const PBPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instancesn()) {
      set_instancesn(from.instancesn());
    }
    if (from.has_prizeid()) {
      set_prizeid(from.prizeid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPrize::CopyFrom(const PBPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPrize::IsInitialized() const {
  
  return true;
}

void PBPrize::Swap(PBPrize* other) {
  if (other != this) {
    std::swap(instancesn_, other->instancesn_);
    std::swap(prizeid_, other->prizeid_);
    std::swap(level_, other->level_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPrize_descriptor_;
  metadata.reflection = PBPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerPrize::kCursnFieldNumber;
const int PBPlayerPrize::kPbprizeFieldNumber;
#endif  // !_MSC_VER

PBPlayerPrize::PBPlayerPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerPrize::InitAsDefaultInstance() {
}

PBPlayerPrize::PBPlayerPrize(const PBPlayerPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerPrize::SharedCtor() {
  _cached_size_ = 0;
  cursn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerPrize::~PBPlayerPrize() {
  SharedDtor();
}

void PBPlayerPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerPrize_descriptor_;
}

const PBPlayerPrize& PBPlayerPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerPrize* PBPlayerPrize::default_instance_ = NULL;

PBPlayerPrize* PBPlayerPrize::New() const {
  return new PBPlayerPrize;
}

void PBPlayerPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cursn_ = GOOGLE_ULONGLONG(0);
  }
  pbprize_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cursn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursn_)));
          set_has_cursn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbprize;
        break;
      }
      
      // repeated .PBPrize pbprize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbprize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbprize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbprize;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cursn = 1;
  if (has_cursn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursn(), output);
  }
  
  // repeated .PBPrize pbprize = 2;
  for (int i = 0; i < this->pbprize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbprize(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cursn = 1;
  if (has_cursn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cursn(), target);
  }
  
  // repeated .PBPrize pbprize = 2;
  for (int i = 0; i < this->pbprize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbprize(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerPrize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cursn = 1;
    if (has_cursn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursn());
    }
    
  }
  // repeated .PBPrize pbprize = 2;
  total_size += 1 * this->pbprize_size();
  for (int i = 0; i < this->pbprize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbprize(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerPrize::MergeFrom(const PBPlayerPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbprize_.MergeFrom(from.pbprize_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursn()) {
      set_cursn(from.cursn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerPrize::CopyFrom(const PBPlayerPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerPrize::IsInitialized() const {
  
  return true;
}

void PBPlayerPrize::Swap(PBPlayerPrize* other) {
  if (other != this) {
    std::swap(cursn_, other->cursn_);
    pbprize_.Swap(&other->pbprize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerPrize_descriptor_;
  metadata.reflection = PBPlayerPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerTrade::kCanGetSliverFieldNumber;
const int PBPlayerTrade::kCanGiveSliverFieldNumber;
const int PBPlayerTrade::kRecoverGetTimeFieldNumber;
const int PBPlayerTrade::kRecoverGiveTimeFieldNumber;
#endif  // !_MSC_VER

PBPlayerTrade::PBPlayerTrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerTrade::InitAsDefaultInstance() {
}

PBPlayerTrade::PBPlayerTrade(const PBPlayerTrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerTrade::SharedCtor() {
  _cached_size_ = 0;
  can_get_sliver_ = GOOGLE_ULONGLONG(0);
  can_give_sliver_ = GOOGLE_ULONGLONG(0);
  recover_get_time_ = 0u;
  recover_give_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerTrade::~PBPlayerTrade() {
  SharedDtor();
}

void PBPlayerTrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerTrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerTrade_descriptor_;
}

const PBPlayerTrade& PBPlayerTrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerTrade* PBPlayerTrade::default_instance_ = NULL;

PBPlayerTrade* PBPlayerTrade::New() const {
  return new PBPlayerTrade;
}

void PBPlayerTrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    can_get_sliver_ = GOOGLE_ULONGLONG(0);
    can_give_sliver_ = GOOGLE_ULONGLONG(0);
    recover_get_time_ = 0u;
    recover_give_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 can_get_sliver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &can_get_sliver_)));
          set_has_can_get_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_can_give_sliver;
        break;
      }
      
      // optional uint64 can_give_sliver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_give_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &can_give_sliver_)));
          set_has_can_give_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recover_get_time;
        break;
      }
      
      // optional uint32 recover_get_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recover_get_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recover_get_time_)));
          set_has_recover_get_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recover_give_time;
        break;
      }
      
      // optional uint32 recover_give_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recover_give_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recover_give_time_)));
          set_has_recover_give_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 can_get_sliver = 1;
  if (has_can_get_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->can_get_sliver(), output);
  }
  
  // optional uint64 can_give_sliver = 2;
  if (has_can_give_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->can_give_sliver(), output);
  }
  
  // optional uint32 recover_get_time = 3;
  if (has_recover_get_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recover_get_time(), output);
  }
  
  // optional uint32 recover_give_time = 4;
  if (has_recover_give_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->recover_give_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerTrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 can_get_sliver = 1;
  if (has_can_get_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->can_get_sliver(), target);
  }
  
  // optional uint64 can_give_sliver = 2;
  if (has_can_give_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->can_give_sliver(), target);
  }
  
  // optional uint32 recover_get_time = 3;
  if (has_recover_get_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recover_get_time(), target);
  }
  
  // optional uint32 recover_give_time = 4;
  if (has_recover_give_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->recover_give_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerTrade::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 can_get_sliver = 1;
    if (has_can_get_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->can_get_sliver());
    }
    
    // optional uint64 can_give_sliver = 2;
    if (has_can_give_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->can_give_sliver());
    }
    
    // optional uint32 recover_get_time = 3;
    if (has_recover_get_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recover_get_time());
    }
    
    // optional uint32 recover_give_time = 4;
    if (has_recover_give_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recover_give_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerTrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerTrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerTrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerTrade::MergeFrom(const PBPlayerTrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_can_get_sliver()) {
      set_can_get_sliver(from.can_get_sliver());
    }
    if (from.has_can_give_sliver()) {
      set_can_give_sliver(from.can_give_sliver());
    }
    if (from.has_recover_get_time()) {
      set_recover_get_time(from.recover_get_time());
    }
    if (from.has_recover_give_time()) {
      set_recover_give_time(from.recover_give_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerTrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerTrade::CopyFrom(const PBPlayerTrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerTrade::IsInitialized() const {
  
  return true;
}

void PBPlayerTrade::Swap(PBPlayerTrade* other) {
  if (other != this) {
    std::swap(can_get_sliver_, other->can_get_sliver_);
    std::swap(can_give_sliver_, other->can_give_sliver_);
    std::swap(recover_get_time_, other->recover_get_time_);
    std::swap(recover_give_time_, other->recover_give_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerTrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerTrade_descriptor_;
  metadata.reflection = PBPlayerTrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBQuestItem::kTaridFieldNumber;
const int PBQuestItem::kCurcountFieldNumber;
#endif  // !_MSC_VER

PBQuestItem::PBQuestItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBQuestItem::InitAsDefaultInstance() {
}

PBQuestItem::PBQuestItem(const PBQuestItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBQuestItem::SharedCtor() {
  _cached_size_ = 0;
  tarid_ = 0u;
  curcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBQuestItem::~PBQuestItem() {
  SharedDtor();
}

void PBQuestItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBQuestItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBQuestItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBQuestItem_descriptor_;
}

const PBQuestItem& PBQuestItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBQuestItem* PBQuestItem::default_instance_ = NULL;

PBQuestItem* PBQuestItem::New() const {
  return new PBQuestItem;
}

void PBQuestItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tarid_ = 0u;
    curcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBQuestItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tarid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tarid_)));
          set_has_tarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curcount;
        break;
      }
      
      // optional uint32 curcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curcount_)));
          set_has_curcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBQuestItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tarid = 1;
  if (has_tarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tarid(), output);
  }
  
  // optional uint32 curcount = 2;
  if (has_curcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBQuestItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tarid = 1;
  if (has_tarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tarid(), target);
  }
  
  // optional uint32 curcount = 2;
  if (has_curcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBQuestItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tarid = 1;
    if (has_tarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tarid());
    }
    
    // optional uint32 curcount = 2;
    if (has_curcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBQuestItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBQuestItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBQuestItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBQuestItem::MergeFrom(const PBQuestItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tarid()) {
      set_tarid(from.tarid());
    }
    if (from.has_curcount()) {
      set_curcount(from.curcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBQuestItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBQuestItem::CopyFrom(const PBQuestItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBQuestItem::IsInitialized() const {
  
  return true;
}

void PBQuestItem::Swap(PBQuestItem* other) {
  if (other != this) {
    std::swap(tarid_, other->tarid_);
    std::swap(curcount_, other->curcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBQuestItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBQuestItem_descriptor_;
  metadata.reflection = PBQuestItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBQuest::kQuestidFieldNumber;
const int PBQuest::kAccepttimeFieldNumber;
const int PBQuest::kItemFieldNumber;
const int PBQuest::kParamFieldNumber;
#endif  // !_MSC_VER

PBQuest::PBQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBQuest::InitAsDefaultInstance() {
}

PBQuest::PBQuest(const PBQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  accepttime_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBQuest::~PBQuest() {
  SharedDtor();
}

void PBQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBQuest_descriptor_;
}

const PBQuest& PBQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBQuest* PBQuest::default_instance_ = NULL;

PBQuest* PBQuest::New() const {
  return new PBQuest;
}

void PBQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
    accepttime_ = 0u;
    param_ = 0u;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accepttime;
        break;
      }
      
      // optional uint32 accepttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accepttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accepttime_)));
          set_has_accepttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }
      
      // repeated .PBQuestItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectTag(32)) goto parse_param;
        break;
      }
      
      // optional uint32 param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }
  
  // optional uint32 accepttime = 2;
  if (has_accepttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accepttime(), output);
  }
  
  // repeated .PBQuestItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }
  
  // optional uint32 param = 4;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }
  
  // optional uint32 accepttime = 2;
  if (has_accepttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accepttime(), target);
  }
  
  // repeated .PBQuestItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }
  
  // optional uint32 param = 4;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBQuest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }
    
    // optional uint32 accepttime = 2;
    if (has_accepttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accepttime());
    }
    
    // optional uint32 param = 4;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }
    
  }
  // repeated .PBQuestItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBQuest::MergeFrom(const PBQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_accepttime()) {
      set_accepttime(from.accepttime());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBQuest::CopyFrom(const PBQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBQuest::IsInitialized() const {
  
  return true;
}

void PBQuest::Swap(PBQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(accepttime_, other->accepttime_);
    item_.Swap(&other->item_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBQuest_descriptor_;
  metadata.reflection = PBQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBQuestCompleted::kQuestidFieldNumber;
const int PBQuestCompleted::kCountFieldNumber;
#endif  // !_MSC_VER

PBQuestCompleted::PBQuestCompleted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBQuestCompleted::InitAsDefaultInstance() {
}

PBQuestCompleted::PBQuestCompleted(const PBQuestCompleted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBQuestCompleted::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBQuestCompleted::~PBQuestCompleted() {
  SharedDtor();
}

void PBQuestCompleted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBQuestCompleted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBQuestCompleted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBQuestCompleted_descriptor_;
}

const PBQuestCompleted& PBQuestCompleted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBQuestCompleted* PBQuestCompleted::default_instance_ = NULL;

PBQuestCompleted* PBQuestCompleted::New() const {
  return new PBQuestCompleted;
}

void PBQuestCompleted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBQuestCompleted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBQuestCompleted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBQuestCompleted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBQuestCompleted::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBQuestCompleted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBQuestCompleted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBQuestCompleted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBQuestCompleted::MergeFrom(const PBQuestCompleted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBQuestCompleted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBQuestCompleted::CopyFrom(const PBQuestCompleted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBQuestCompleted::IsInitialized() const {
  
  return true;
}

void PBQuestCompleted::Swap(PBQuestCompleted* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBQuestCompleted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBQuestCompleted_descriptor_;
  metadata.reflection = PBQuestCompleted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerQuest::kSaveorderFieldNumber;
const int PBPlayerQuest::kQuestFieldNumber;
const int PBPlayerQuest::kCompletedinfoFieldNumber;
#endif  // !_MSC_VER

PBPlayerQuest::PBPlayerQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerQuest::InitAsDefaultInstance() {
}

PBPlayerQuest::PBPlayerQuest(const PBPlayerQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerQuest::SharedCtor() {
  _cached_size_ = 0;
  saveorder_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerQuest::~PBPlayerQuest() {
  SharedDtor();
}

void PBPlayerQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerQuest_descriptor_;
}

const PBPlayerQuest& PBPlayerQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerQuest* PBPlayerQuest::default_instance_ = NULL;

PBPlayerQuest* PBPlayerQuest::New() const {
  return new PBPlayerQuest;
}

void PBPlayerQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveorder_ = 0u;
  }
  quest_.Clear();
  completedinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveorder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveorder_)));
          set_has_saveorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quest;
        break;
      }
      
      // repeated .PBQuest quest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quest;
        if (input->ExpectTag(26)) goto parse_completedinfo;
        break;
      }
      
      // repeated .PBQuestCompleted completedinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_completedinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_completedinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_completedinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveorder(), output);
  }
  
  // repeated .PBQuest quest = 2;
  for (int i = 0; i < this->quest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quest(i), output);
  }
  
  // repeated .PBQuestCompleted completedinfo = 3;
  for (int i = 0; i < this->completedinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->completedinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveorder(), target);
  }
  
  // repeated .PBQuest quest = 2;
  for (int i = 0; i < this->quest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quest(i), target);
  }
  
  // repeated .PBQuestCompleted completedinfo = 3;
  for (int i = 0; i < this->completedinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->completedinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerQuest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveorder = 1;
    if (has_saveorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveorder());
    }
    
  }
  // repeated .PBQuest quest = 2;
  total_size += 1 * this->quest_size();
  for (int i = 0; i < this->quest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quest(i));
  }
  
  // repeated .PBQuestCompleted completedinfo = 3;
  total_size += 1 * this->completedinfo_size();
  for (int i = 0; i < this->completedinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->completedinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerQuest::MergeFrom(const PBPlayerQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  quest_.MergeFrom(from.quest_);
  completedinfo_.MergeFrom(from.completedinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveorder()) {
      set_saveorder(from.saveorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerQuest::CopyFrom(const PBPlayerQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerQuest::IsInitialized() const {
  
  return true;
}

void PBPlayerQuest::Swap(PBPlayerQuest* other) {
  if (other != this) {
    std::swap(saveorder_, other->saveorder_);
    quest_.Swap(&other->quest_);
    completedinfo_.Swap(&other->completedinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerQuest_descriptor_;
  metadata.reflection = PBPlayerQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWenTaoSchemeInfo::kIndexFieldNumber;
const int PBWenTaoSchemeInfo::kBingfaidFieldNumber;
#endif  // !_MSC_VER

PBWenTaoSchemeInfo::PBWenTaoSchemeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWenTaoSchemeInfo::InitAsDefaultInstance() {
}

PBWenTaoSchemeInfo::PBWenTaoSchemeInfo(const PBWenTaoSchemeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWenTaoSchemeInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  bingfaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWenTaoSchemeInfo::~PBWenTaoSchemeInfo() {
  SharedDtor();
}

void PBWenTaoSchemeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWenTaoSchemeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWenTaoSchemeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWenTaoSchemeInfo_descriptor_;
}

const PBWenTaoSchemeInfo& PBWenTaoSchemeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBWenTaoSchemeInfo* PBWenTaoSchemeInfo::default_instance_ = NULL;

PBWenTaoSchemeInfo* PBWenTaoSchemeInfo::New() const {
  return new PBWenTaoSchemeInfo;
}

void PBWenTaoSchemeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    bingfaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWenTaoSchemeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bingfaid;
        break;
      }
      
      // optional uint32 bingfaid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bingfaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfaid_)));
          set_has_bingfaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWenTaoSchemeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // optional uint32 bingfaid = 2;
  if (has_bingfaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bingfaid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWenTaoSchemeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // optional uint32 bingfaid = 2;
  if (has_bingfaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bingfaid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWenTaoSchemeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // optional uint32 bingfaid = 2;
    if (has_bingfaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfaid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWenTaoSchemeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWenTaoSchemeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWenTaoSchemeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWenTaoSchemeInfo::MergeFrom(const PBWenTaoSchemeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_bingfaid()) {
      set_bingfaid(from.bingfaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWenTaoSchemeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWenTaoSchemeInfo::CopyFrom(const PBWenTaoSchemeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWenTaoSchemeInfo::IsInitialized() const {
  
  return true;
}

void PBWenTaoSchemeInfo::Swap(PBWenTaoSchemeInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(bingfaid_, other->bingfaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWenTaoSchemeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWenTaoSchemeInfo_descriptor_;
  metadata.reflection = PBWenTaoSchemeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWenTaoScheme::kSchemeidFieldNumber;
const int PBWenTaoScheme::kInfoFieldNumber;
#endif  // !_MSC_VER

PBWenTaoScheme::PBWenTaoScheme()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWenTaoScheme::InitAsDefaultInstance() {
}

PBWenTaoScheme::PBWenTaoScheme(const PBWenTaoScheme& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWenTaoScheme::SharedCtor() {
  _cached_size_ = 0;
  schemeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWenTaoScheme::~PBWenTaoScheme() {
  SharedDtor();
}

void PBWenTaoScheme::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWenTaoScheme::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWenTaoScheme::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWenTaoScheme_descriptor_;
}

const PBWenTaoScheme& PBWenTaoScheme::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBWenTaoScheme* PBWenTaoScheme::default_instance_ = NULL;

PBWenTaoScheme* PBWenTaoScheme::New() const {
  return new PBWenTaoScheme;
}

void PBWenTaoScheme::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemeid_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWenTaoScheme::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemeid_)));
          set_has_schemeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // repeated .PBWenTaoSchemeInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWenTaoScheme::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemeid = 1;
  if (has_schemeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemeid(), output);
  }
  
  // repeated .PBWenTaoSchemeInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWenTaoScheme::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemeid = 1;
  if (has_schemeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemeid(), target);
  }
  
  // repeated .PBWenTaoSchemeInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWenTaoScheme::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemeid = 1;
    if (has_schemeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemeid());
    }
    
  }
  // repeated .PBWenTaoSchemeInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWenTaoScheme::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWenTaoScheme* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWenTaoScheme*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWenTaoScheme::MergeFrom(const PBWenTaoScheme& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemeid()) {
      set_schemeid(from.schemeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWenTaoScheme::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWenTaoScheme::CopyFrom(const PBWenTaoScheme& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWenTaoScheme::IsInitialized() const {
  
  return true;
}

void PBWenTaoScheme::Swap(PBWenTaoScheme* other) {
  if (other != this) {
    std::swap(schemeid_, other->schemeid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWenTaoScheme::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWenTaoScheme_descriptor_;
  metadata.reflection = PBWenTaoScheme_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBingFa::kBingfaidFieldNumber;
const int PBBingFa::kQianxiulevelFieldNumber;
const int PBBingFa::kTupolevelFieldNumber;
const int PBBingFa::kYaodianidFieldNumber;
const int PBBingFa::kYaodianlevelFieldNumber;
#endif  // !_MSC_VER

PBBingFa::PBBingFa()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBingFa::InitAsDefaultInstance() {
}

PBBingFa::PBBingFa(const PBBingFa& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBingFa::SharedCtor() {
  _cached_size_ = 0;
  bingfaid_ = 0u;
  qianxiulevel_ = 0u;
  tupolevel_ = 0u;
  yaodianid_ = 0u;
  yaodianlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBingFa::~PBBingFa() {
  SharedDtor();
}

void PBBingFa::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBingFa::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBingFa::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBingFa_descriptor_;
}

const PBBingFa& PBBingFa::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBBingFa* PBBingFa::default_instance_ = NULL;

PBBingFa* PBBingFa::New() const {
  return new PBBingFa;
}

void PBBingFa::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bingfaid_ = 0u;
    qianxiulevel_ = 0u;
    tupolevel_ = 0u;
    yaodianid_ = 0u;
    yaodianlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBingFa::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bingfaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfaid_)));
          set_has_bingfaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_qianxiulevel;
        break;
      }
      
      // optional uint32 qianxiulevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qianxiulevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qianxiulevel_)));
          set_has_qianxiulevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tupolevel;
        break;
      }
      
      // optional uint32 tupolevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tupolevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tupolevel_)));
          set_has_tupolevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_yaodianid;
        break;
      }
      
      // optional uint32 yaodianid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaodianid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaodianid_)));
          set_has_yaodianid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_yaodianlevel;
        break;
      }
      
      // optional uint32 yaodianlevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaodianlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaodianlevel_)));
          set_has_yaodianlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBingFa::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bingfaid(), output);
  }
  
  // optional uint32 qianxiulevel = 2;
  if (has_qianxiulevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qianxiulevel(), output);
  }
  
  // optional uint32 tupolevel = 3;
  if (has_tupolevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tupolevel(), output);
  }
  
  // optional uint32 yaodianid = 4;
  if (has_yaodianid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->yaodianid(), output);
  }
  
  // optional uint32 yaodianlevel = 5;
  if (has_yaodianlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->yaodianlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBingFa::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bingfaid(), target);
  }
  
  // optional uint32 qianxiulevel = 2;
  if (has_qianxiulevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qianxiulevel(), target);
  }
  
  // optional uint32 tupolevel = 3;
  if (has_tupolevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tupolevel(), target);
  }
  
  // optional uint32 yaodianid = 4;
  if (has_yaodianid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->yaodianid(), target);
  }
  
  // optional uint32 yaodianlevel = 5;
  if (has_yaodianlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->yaodianlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBingFa::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bingfaid = 1;
    if (has_bingfaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfaid());
    }
    
    // optional uint32 qianxiulevel = 2;
    if (has_qianxiulevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qianxiulevel());
    }
    
    // optional uint32 tupolevel = 3;
    if (has_tupolevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tupolevel());
    }
    
    // optional uint32 yaodianid = 4;
    if (has_yaodianid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yaodianid());
    }
    
    // optional uint32 yaodianlevel = 5;
    if (has_yaodianlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yaodianlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBingFa::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBingFa* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBingFa*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBingFa::MergeFrom(const PBBingFa& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bingfaid()) {
      set_bingfaid(from.bingfaid());
    }
    if (from.has_qianxiulevel()) {
      set_qianxiulevel(from.qianxiulevel());
    }
    if (from.has_tupolevel()) {
      set_tupolevel(from.tupolevel());
    }
    if (from.has_yaodianid()) {
      set_yaodianid(from.yaodianid());
    }
    if (from.has_yaodianlevel()) {
      set_yaodianlevel(from.yaodianlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBingFa::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBingFa::CopyFrom(const PBBingFa& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBingFa::IsInitialized() const {
  
  return true;
}

void PBBingFa::Swap(PBBingFa* other) {
  if (other != this) {
    std::swap(bingfaid_, other->bingfaid_);
    std::swap(qianxiulevel_, other->qianxiulevel_);
    std::swap(tupolevel_, other->tupolevel_);
    std::swap(yaodianid_, other->yaodianid_);
    std::swap(yaodianlevel_, other->yaodianlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBingFa::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBingFa_descriptor_;
  metadata.reflection = PBBingFa_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerWenTao::kCurschemeIDFieldNumber;
const int PBPlayerWenTao::kBingfaFieldNumber;
const int PBPlayerWenTao::kSchemeFieldNumber;
#endif  // !_MSC_VER

PBPlayerWenTao::PBPlayerWenTao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerWenTao::InitAsDefaultInstance() {
}

PBPlayerWenTao::PBPlayerWenTao(const PBPlayerWenTao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerWenTao::SharedCtor() {
  _cached_size_ = 0;
  curschemeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerWenTao::~PBPlayerWenTao() {
  SharedDtor();
}

void PBPlayerWenTao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerWenTao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerWenTao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerWenTao_descriptor_;
}

const PBPlayerWenTao& PBPlayerWenTao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerWenTao* PBPlayerWenTao::default_instance_ = NULL;

PBPlayerWenTao* PBPlayerWenTao::New() const {
  return new PBPlayerWenTao;
}

void PBPlayerWenTao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curschemeid_ = 0u;
  }
  bingfa_.Clear();
  scheme_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerWenTao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curschemeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curschemeid_)));
          set_has_curschemeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bingfa;
        break;
      }
      
      // repeated .PBBingFa bingfa = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bingfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bingfa()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bingfa;
        if (input->ExpectTag(26)) goto parse_scheme;
        break;
      }
      
      // repeated .PBWenTaoScheme scheme = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scheme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scheme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scheme;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerWenTao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curschemeID = 1;
  if (has_curschemeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curschemeid(), output);
  }
  
  // repeated .PBBingFa bingfa = 2;
  for (int i = 0; i < this->bingfa_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bingfa(i), output);
  }
  
  // repeated .PBWenTaoScheme scheme = 3;
  for (int i = 0; i < this->scheme_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scheme(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerWenTao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curschemeID = 1;
  if (has_curschemeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curschemeid(), target);
  }
  
  // repeated .PBBingFa bingfa = 2;
  for (int i = 0; i < this->bingfa_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bingfa(i), target);
  }
  
  // repeated .PBWenTaoScheme scheme = 3;
  for (int i = 0; i < this->scheme_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scheme(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerWenTao::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curschemeID = 1;
    if (has_curschemeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curschemeid());
    }
    
  }
  // repeated .PBBingFa bingfa = 2;
  total_size += 1 * this->bingfa_size();
  for (int i = 0; i < this->bingfa_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bingfa(i));
  }
  
  // repeated .PBWenTaoScheme scheme = 3;
  total_size += 1 * this->scheme_size();
  for (int i = 0; i < this->scheme_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scheme(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerWenTao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerWenTao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerWenTao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerWenTao::MergeFrom(const PBPlayerWenTao& from) {
  GOOGLE_CHECK_NE(&from, this);
  bingfa_.MergeFrom(from.bingfa_);
  scheme_.MergeFrom(from.scheme_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curschemeid()) {
      set_curschemeid(from.curschemeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerWenTao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerWenTao::CopyFrom(const PBPlayerWenTao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerWenTao::IsInitialized() const {
  
  return true;
}

void PBPlayerWenTao::Swap(PBPlayerWenTao* other) {
  if (other != this) {
    std::swap(curschemeid_, other->curschemeid_);
    bingfa_.Swap(&other->bingfa_);
    scheme_.Swap(&other->scheme_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerWenTao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerWenTao_descriptor_;
  metadata.reflection = PBPlayerWenTao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWulueZhanlue::kIdFieldNumber;
const int PBWulueZhanlue::kTypeFieldNumber;
const int PBWulueZhanlue::kLevelFieldNumber;
#endif  // !_MSC_VER

PBWulueZhanlue::PBWulueZhanlue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWulueZhanlue::InitAsDefaultInstance() {
}

PBWulueZhanlue::PBWulueZhanlue(const PBWulueZhanlue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWulueZhanlue::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWulueZhanlue::~PBWulueZhanlue() {
  SharedDtor();
}

void PBWulueZhanlue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWulueZhanlue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWulueZhanlue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWulueZhanlue_descriptor_;
}

const PBWulueZhanlue& PBWulueZhanlue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBWulueZhanlue* PBWulueZhanlue::default_instance_ = NULL;

PBWulueZhanlue* PBWulueZhanlue::New() const {
  return new PBWulueZhanlue;
}

void PBWulueZhanlue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWulueZhanlue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWulueZhanlue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWulueZhanlue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWulueZhanlue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWulueZhanlue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWulueZhanlue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWulueZhanlue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWulueZhanlue::MergeFrom(const PBWulueZhanlue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWulueZhanlue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWulueZhanlue::CopyFrom(const PBWulueZhanlue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWulueZhanlue::IsInitialized() const {
  
  return true;
}

void PBWulueZhanlue::Swap(PBWulueZhanlue* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWulueZhanlue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWulueZhanlue_descriptor_;
  metadata.reflection = PBWulueZhanlue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWulueScheme::kSchemeidFieldNumber;
const int PBWulueScheme::kIdFieldNumber;
const int PBWulueScheme::kTypeFieldNumber;
const int PBWulueScheme::kBingfusnFieldNumber;
#endif  // !_MSC_VER

PBWulueScheme::PBWulueScheme()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWulueScheme::InitAsDefaultInstance() {
}

PBWulueScheme::PBWulueScheme(const PBWulueScheme& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWulueScheme::SharedCtor() {
  _cached_size_ = 0;
  schemeid_ = 0u;
  id_ = 0u;
  type_ = 0u;
  bingfusn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWulueScheme::~PBWulueScheme() {
  SharedDtor();
}

void PBWulueScheme::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWulueScheme::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWulueScheme::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWulueScheme_descriptor_;
}

const PBWulueScheme& PBWulueScheme::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBWulueScheme* PBWulueScheme::default_instance_ = NULL;

PBWulueScheme* PBWulueScheme::New() const {
  return new PBWulueScheme;
}

void PBWulueScheme::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemeid_ = 0u;
    id_ = 0u;
    type_ = 0u;
    bingfusn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWulueScheme::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemeid_)));
          set_has_schemeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bingfusn;
        break;
      }
      
      // optional uint64 bingfusn = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bingfusn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bingfusn_)));
          set_has_bingfusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWulueScheme::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemeid = 1;
  if (has_schemeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemeid(), output);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // optional uint64 bingfusn = 4;
  if (has_bingfusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bingfusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWulueScheme::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemeid = 1;
  if (has_schemeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemeid(), target);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // optional uint64 bingfusn = 4;
  if (has_bingfusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bingfusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWulueScheme::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemeid = 1;
    if (has_schemeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemeid());
    }
    
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint64 bingfusn = 4;
    if (has_bingfusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bingfusn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWulueScheme::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWulueScheme* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWulueScheme*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWulueScheme::MergeFrom(const PBWulueScheme& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemeid()) {
      set_schemeid(from.schemeid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bingfusn()) {
      set_bingfusn(from.bingfusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWulueScheme::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWulueScheme::CopyFrom(const PBWulueScheme& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWulueScheme::IsInitialized() const {
  
  return true;
}

void PBWulueScheme::Swap(PBWulueScheme* other) {
  if (other != this) {
    std::swap(schemeid_, other->schemeid_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(bingfusn_, other->bingfusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWulueScheme::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWulueScheme_descriptor_;
  metadata.reflection = PBWulueScheme_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerWulue::kCurschemeIDFieldNumber;
const int PBPlayerWulue::kCurwuluetypeFieldNumber;
const int PBPlayerWulue::kZhanlueinfoFieldNumber;
const int PBPlayerWulue::kWulueschemeFieldNumber;
#endif  // !_MSC_VER

PBPlayerWulue::PBPlayerWulue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerWulue::InitAsDefaultInstance() {
}

PBPlayerWulue::PBPlayerWulue(const PBPlayerWulue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerWulue::SharedCtor() {
  _cached_size_ = 0;
  curschemeid_ = 0u;
  curwuluetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerWulue::~PBPlayerWulue() {
  SharedDtor();
}

void PBPlayerWulue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerWulue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerWulue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerWulue_descriptor_;
}

const PBPlayerWulue& PBPlayerWulue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerWulue* PBPlayerWulue::default_instance_ = NULL;

PBPlayerWulue* PBPlayerWulue::New() const {
  return new PBPlayerWulue;
}

void PBPlayerWulue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curschemeid_ = 0u;
    curwuluetype_ = 0u;
  }
  zhanlueinfo_.Clear();
  wuluescheme_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerWulue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curschemeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curschemeid_)));
          set_has_curschemeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curwuluetype;
        break;
      }
      
      // optional uint32 curwuluetype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curwuluetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curwuluetype_)));
          set_has_curwuluetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_zhanlueinfo;
        break;
      }
      
      // repeated .PBWulueZhanlue zhanlueinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zhanlueinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zhanlueinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_zhanlueinfo;
        if (input->ExpectTag(34)) goto parse_wuluescheme;
        break;
      }
      
      // repeated .PBWulueScheme wuluescheme = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wuluescheme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wuluescheme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_wuluescheme;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerWulue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curschemeID = 1;
  if (has_curschemeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curschemeid(), output);
  }
  
  // optional uint32 curwuluetype = 2;
  if (has_curwuluetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curwuluetype(), output);
  }
  
  // repeated .PBWulueZhanlue zhanlueinfo = 3;
  for (int i = 0; i < this->zhanlueinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->zhanlueinfo(i), output);
  }
  
  // repeated .PBWulueScheme wuluescheme = 4;
  for (int i = 0; i < this->wuluescheme_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->wuluescheme(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerWulue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curschemeID = 1;
  if (has_curschemeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curschemeid(), target);
  }
  
  // optional uint32 curwuluetype = 2;
  if (has_curwuluetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curwuluetype(), target);
  }
  
  // repeated .PBWulueZhanlue zhanlueinfo = 3;
  for (int i = 0; i < this->zhanlueinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->zhanlueinfo(i), target);
  }
  
  // repeated .PBWulueScheme wuluescheme = 4;
  for (int i = 0; i < this->wuluescheme_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->wuluescheme(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerWulue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curschemeID = 1;
    if (has_curschemeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curschemeid());
    }
    
    // optional uint32 curwuluetype = 2;
    if (has_curwuluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curwuluetype());
    }
    
  }
  // repeated .PBWulueZhanlue zhanlueinfo = 3;
  total_size += 1 * this->zhanlueinfo_size();
  for (int i = 0; i < this->zhanlueinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zhanlueinfo(i));
  }
  
  // repeated .PBWulueScheme wuluescheme = 4;
  total_size += 1 * this->wuluescheme_size();
  for (int i = 0; i < this->wuluescheme_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wuluescheme(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerWulue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerWulue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerWulue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerWulue::MergeFrom(const PBPlayerWulue& from) {
  GOOGLE_CHECK_NE(&from, this);
  zhanlueinfo_.MergeFrom(from.zhanlueinfo_);
  wuluescheme_.MergeFrom(from.wuluescheme_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curschemeid()) {
      set_curschemeid(from.curschemeid());
    }
    if (from.has_curwuluetype()) {
      set_curwuluetype(from.curwuluetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerWulue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerWulue::CopyFrom(const PBPlayerWulue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerWulue::IsInitialized() const {
  
  return true;
}

void PBPlayerWulue::Swap(PBPlayerWulue* other) {
  if (other != this) {
    std::swap(curschemeid_, other->curschemeid_);
    std::swap(curwuluetype_, other->curwuluetype_);
    zhanlueinfo_.Swap(&other->zhanlueinfo_);
    wuluescheme_.Swap(&other->wuluescheme_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerWulue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerWulue_descriptor_;
  metadata.reflection = PBPlayerWulue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCopymapInfo::kCopymapidFieldNumber;
const int PBCopymapInfo::kEntercountFieldNumber;
#endif  // !_MSC_VER

PBCopymapInfo::PBCopymapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCopymapInfo::InitAsDefaultInstance() {
}

PBCopymapInfo::PBCopymapInfo(const PBCopymapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCopymapInfo::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  entercount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCopymapInfo::~PBCopymapInfo() {
  SharedDtor();
}

void PBCopymapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCopymapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCopymapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCopymapInfo_descriptor_;
}

const PBCopymapInfo& PBCopymapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBCopymapInfo* PBCopymapInfo::default_instance_ = NULL;

PBCopymapInfo* PBCopymapInfo::New() const {
  return new PBCopymapInfo;
}

void PBCopymapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    entercount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCopymapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entercount;
        break;
      }
      
      // optional uint32 entercount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entercount_)));
          set_has_entercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCopymapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional uint32 entercount = 2;
  if (has_entercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entercount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCopymapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional uint32 entercount = 2;
  if (has_entercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entercount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCopymapInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 entercount = 2;
    if (has_entercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entercount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCopymapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCopymapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCopymapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCopymapInfo::MergeFrom(const PBCopymapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_entercount()) {
      set_entercount(from.entercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCopymapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCopymapInfo::CopyFrom(const PBCopymapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCopymapInfo::IsInitialized() const {
  
  return true;
}

void PBCopymapInfo::Swap(PBCopymapInfo* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(entercount_, other->entercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCopymapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCopymapInfo_descriptor_;
  metadata.reflection = PBCopymapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerCopymap::kAssistcountFieldNumber;
const int PBPlayerCopymap::kInfoFieldNumber;
#endif  // !_MSC_VER

PBPlayerCopymap::PBPlayerCopymap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerCopymap::InitAsDefaultInstance() {
}

PBPlayerCopymap::PBPlayerCopymap(const PBPlayerCopymap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerCopymap::SharedCtor() {
  _cached_size_ = 0;
  assistcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerCopymap::~PBPlayerCopymap() {
  SharedDtor();
}

void PBPlayerCopymap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerCopymap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerCopymap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerCopymap_descriptor_;
}

const PBPlayerCopymap& PBPlayerCopymap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerCopymap* PBPlayerCopymap::default_instance_ = NULL;

PBPlayerCopymap* PBPlayerCopymap::New() const {
  return new PBPlayerCopymap;
}

void PBPlayerCopymap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    assistcount_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerCopymap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 assistcount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assistcount_)));
          set_has_assistcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // repeated .PBCopymapInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerCopymap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 assistcount = 1;
  if (has_assistcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->assistcount(), output);
  }
  
  // repeated .PBCopymapInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerCopymap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 assistcount = 1;
  if (has_assistcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->assistcount(), target);
  }
  
  // repeated .PBCopymapInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerCopymap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 assistcount = 1;
    if (has_assistcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assistcount());
    }
    
  }
  // repeated .PBCopymapInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerCopymap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerCopymap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerCopymap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerCopymap::MergeFrom(const PBPlayerCopymap& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assistcount()) {
      set_assistcount(from.assistcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerCopymap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerCopymap::CopyFrom(const PBPlayerCopymap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerCopymap::IsInitialized() const {
  
  return true;
}

void PBPlayerCopymap::Swap(PBPlayerCopymap* other) {
  if (other != this) {
    std::swap(assistcount_, other->assistcount_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerCopymap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerCopymap_descriptor_;
  metadata.reflection = PBPlayerCopymap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBIdentitySetInfo::kSetidFieldNumber;
const int PBIdentitySetInfo::kIdentityidFieldNumber;
#endif  // !_MSC_VER

PBIdentitySetInfo::PBIdentitySetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBIdentitySetInfo::InitAsDefaultInstance() {
}

PBIdentitySetInfo::PBIdentitySetInfo(const PBIdentitySetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBIdentitySetInfo::SharedCtor() {
  _cached_size_ = 0;
  setid_ = 0u;
  identityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBIdentitySetInfo::~PBIdentitySetInfo() {
  SharedDtor();
}

void PBIdentitySetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBIdentitySetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBIdentitySetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBIdentitySetInfo_descriptor_;
}

const PBIdentitySetInfo& PBIdentitySetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBIdentitySetInfo* PBIdentitySetInfo::default_instance_ = NULL;

PBIdentitySetInfo* PBIdentitySetInfo::New() const {
  return new PBIdentitySetInfo;
}

void PBIdentitySetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    setid_ = 0u;
    identityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBIdentitySetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 setid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setid_)));
          set_has_setid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_identityid;
        break;
      }
      
      // optional uint32 identityid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identityid_)));
          set_has_identityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBIdentitySetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->setid(), output);
  }
  
  // optional uint32 identityid = 2;
  if (has_identityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->identityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBIdentitySetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->setid(), target);
  }
  
  // optional uint32 identityid = 2;
  if (has_identityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->identityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBIdentitySetInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 setid = 1;
    if (has_setid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setid());
    }
    
    // optional uint32 identityid = 2;
    if (has_identityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBIdentitySetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBIdentitySetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBIdentitySetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBIdentitySetInfo::MergeFrom(const PBIdentitySetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setid()) {
      set_setid(from.setid());
    }
    if (from.has_identityid()) {
      set_identityid(from.identityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBIdentitySetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBIdentitySetInfo::CopyFrom(const PBIdentitySetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBIdentitySetInfo::IsInitialized() const {
  
  return true;
}

void PBIdentitySetInfo::Swap(PBIdentitySetInfo* other) {
  if (other != this) {
    std::swap(setid_, other->setid_);
    std::swap(identityid_, other->identityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBIdentitySetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBIdentitySetInfo_descriptor_;
  metadata.reflection = PBIdentitySetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBIdentitySkillInfo::kSkillidFieldNumber;
const int PBIdentitySkillInfo::kSkilllevelFieldNumber;
#endif  // !_MSC_VER

PBIdentitySkillInfo::PBIdentitySkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBIdentitySkillInfo::InitAsDefaultInstance() {
}

PBIdentitySkillInfo::PBIdentitySkillInfo(const PBIdentitySkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBIdentitySkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  skilllevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBIdentitySkillInfo::~PBIdentitySkillInfo() {
  SharedDtor();
}

void PBIdentitySkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBIdentitySkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBIdentitySkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBIdentitySkillInfo_descriptor_;
}

const PBIdentitySkillInfo& PBIdentitySkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBIdentitySkillInfo* PBIdentitySkillInfo::default_instance_ = NULL;

PBIdentitySkillInfo* PBIdentitySkillInfo::New() const {
  return new PBIdentitySkillInfo;
}

void PBIdentitySkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    skilllevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBIdentitySkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skilllevel;
        break;
      }
      
      // optional uint32 skilllevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilllevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBIdentitySkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 skilllevel = 2;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skilllevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBIdentitySkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 skilllevel = 2;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skilllevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBIdentitySkillInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 skilllevel = 2;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBIdentitySkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBIdentitySkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBIdentitySkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBIdentitySkillInfo::MergeFrom(const PBIdentitySkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBIdentitySkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBIdentitySkillInfo::CopyFrom(const PBIdentitySkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBIdentitySkillInfo::IsInitialized() const {
  
  return true;
}

void PBIdentitySkillInfo::Swap(PBIdentitySkillInfo* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBIdentitySkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBIdentitySkillInfo_descriptor_;
  metadata.reflection = PBIdentitySkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerIdentity::kResetcountFieldNumber;
const int PBPlayerIdentity::kResettimeFieldNumber;
const int PBPlayerIdentity::kSetinfoFieldNumber;
const int PBPlayerIdentity::kSkillinfoFieldNumber;
#endif  // !_MSC_VER

PBPlayerIdentity::PBPlayerIdentity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerIdentity::InitAsDefaultInstance() {
}

PBPlayerIdentity::PBPlayerIdentity(const PBPlayerIdentity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerIdentity::SharedCtor() {
  _cached_size_ = 0;
  resetcount_ = 0u;
  resettime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerIdentity::~PBPlayerIdentity() {
  SharedDtor();
}

void PBPlayerIdentity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerIdentity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerIdentity_descriptor_;
}

const PBPlayerIdentity& PBPlayerIdentity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerIdentity* PBPlayerIdentity::default_instance_ = NULL;

PBPlayerIdentity* PBPlayerIdentity::New() const {
  return new PBPlayerIdentity;
}

void PBPlayerIdentity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resetcount_ = 0u;
    resettime_ = 0u;
  }
  setinfo_.Clear();
  skillinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 resetcount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resetcount_)));
          set_has_resetcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resettime;
        break;
      }
      
      // optional uint32 resettime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_setinfo;
        break;
      }
      
      // repeated .PBIdentitySetInfo setinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_setinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_setinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_setinfo;
        if (input->ExpectTag(34)) goto parse_skillinfo;
        break;
      }
      
      // repeated .PBIdentitySkillInfo skillinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skillinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 resetcount = 1;
  if (has_resetcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resetcount(), output);
  }
  
  // optional uint32 resettime = 2;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resettime(), output);
  }
  
  // repeated .PBIdentitySetInfo setinfo = 3;
  for (int i = 0; i < this->setinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->setinfo(i), output);
  }
  
  // repeated .PBIdentitySkillInfo skillinfo = 4;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skillinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerIdentity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 resetcount = 1;
  if (has_resetcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resetcount(), target);
  }
  
  // optional uint32 resettime = 2;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resettime(), target);
  }
  
  // repeated .PBIdentitySetInfo setinfo = 3;
  for (int i = 0; i < this->setinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->setinfo(i), target);
  }
  
  // repeated .PBIdentitySkillInfo skillinfo = 4;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skillinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerIdentity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 resetcount = 1;
    if (has_resetcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resetcount());
    }
    
    // optional uint32 resettime = 2;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettime());
    }
    
  }
  // repeated .PBIdentitySetInfo setinfo = 3;
  total_size += 1 * this->setinfo_size();
  for (int i = 0; i < this->setinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->setinfo(i));
  }
  
  // repeated .PBIdentitySkillInfo skillinfo = 4;
  total_size += 1 * this->skillinfo_size();
  for (int i = 0; i < this->skillinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerIdentity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerIdentity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerIdentity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerIdentity::MergeFrom(const PBPlayerIdentity& from) {
  GOOGLE_CHECK_NE(&from, this);
  setinfo_.MergeFrom(from.setinfo_);
  skillinfo_.MergeFrom(from.skillinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resetcount()) {
      set_resetcount(from.resetcount());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerIdentity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerIdentity::CopyFrom(const PBPlayerIdentity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerIdentity::IsInitialized() const {
  
  return true;
}

void PBPlayerIdentity::Swap(PBPlayerIdentity* other) {
  if (other != this) {
    std::swap(resetcount_, other->resetcount_);
    std::swap(resettime_, other->resettime_);
    setinfo_.Swap(&other->setinfo_);
    skillinfo_.Swap(&other->skillinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerIdentity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerIdentity_descriptor_;
  metadata.reflection = PBPlayerIdentity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerWuxuePageInfo::kPageidFieldNumber;
const int PBPlayerWuxuePageInfo::kSkillidFieldNumber;
#endif  // !_MSC_VER

PBPlayerWuxuePageInfo::PBPlayerWuxuePageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerWuxuePageInfo::InitAsDefaultInstance() {
}

PBPlayerWuxuePageInfo::PBPlayerWuxuePageInfo(const PBPlayerWuxuePageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerWuxuePageInfo::SharedCtor() {
  _cached_size_ = 0;
  pageid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerWuxuePageInfo::~PBPlayerWuxuePageInfo() {
  SharedDtor();
}

void PBPlayerWuxuePageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerWuxuePageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerWuxuePageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerWuxuePageInfo_descriptor_;
}

const PBPlayerWuxuePageInfo& PBPlayerWuxuePageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerWuxuePageInfo* PBPlayerWuxuePageInfo::default_instance_ = NULL;

PBPlayerWuxuePageInfo* PBPlayerWuxuePageInfo::New() const {
  return new PBPlayerWuxuePageInfo;
}

void PBPlayerWuxuePageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pageid_ = 0u;
  }
  skillid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerWuxuePageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pageid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageid_)));
          set_has_pageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillid;
        break;
      }
      
      // repeated uint32 skillid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_skillid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skillid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerWuxuePageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pageid = 1;
  if (has_pageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pageid(), output);
  }
  
  // repeated uint32 skillid = 2;
  for (int i = 0; i < this->skillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->skillid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerWuxuePageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pageid = 1;
  if (has_pageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pageid(), target);
  }
  
  // repeated uint32 skillid = 2;
  for (int i = 0; i < this->skillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->skillid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerWuxuePageInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pageid = 1;
    if (has_pageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageid());
    }
    
  }
  // repeated uint32 skillid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skillid(i));
    }
    total_size += 1 * this->skillid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerWuxuePageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerWuxuePageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerWuxuePageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerWuxuePageInfo::MergeFrom(const PBPlayerWuxuePageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillid_.MergeFrom(from.skillid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pageid()) {
      set_pageid(from.pageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerWuxuePageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerWuxuePageInfo::CopyFrom(const PBPlayerWuxuePageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerWuxuePageInfo::IsInitialized() const {
  
  return true;
}

void PBPlayerWuxuePageInfo::Swap(PBPlayerWuxuePageInfo* other) {
  if (other != this) {
    std::swap(pageid_, other->pageid_);
    skillid_.Swap(&other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerWuxuePageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerWuxuePageInfo_descriptor_;
  metadata.reflection = PBPlayerWuxuePageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerWuxueSchemeInfo::kNameidFieldNumber;
const int PBPlayerWuxueSchemeInfo::kAllskillidFieldNumber;
const int PBPlayerWuxueSchemeInfo::kUseskillidFieldNumber;
#endif  // !_MSC_VER

PBPlayerWuxueSchemeInfo::PBPlayerWuxueSchemeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerWuxueSchemeInfo::InitAsDefaultInstance() {
}

PBPlayerWuxueSchemeInfo::PBPlayerWuxueSchemeInfo(const PBPlayerWuxueSchemeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerWuxueSchemeInfo::SharedCtor() {
  _cached_size_ = 0;
  nameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerWuxueSchemeInfo::~PBPlayerWuxueSchemeInfo() {
  SharedDtor();
}

void PBPlayerWuxueSchemeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerWuxueSchemeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerWuxueSchemeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerWuxueSchemeInfo_descriptor_;
}

const PBPlayerWuxueSchemeInfo& PBPlayerWuxueSchemeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerWuxueSchemeInfo* PBPlayerWuxueSchemeInfo::default_instance_ = NULL;

PBPlayerWuxueSchemeInfo* PBPlayerWuxueSchemeInfo::New() const {
  return new PBPlayerWuxueSchemeInfo;
}

void PBPlayerWuxueSchemeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nameid_ = 0u;
  }
  allskillid_.Clear();
  useskillid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerWuxueSchemeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nameid_)));
          set_has_nameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allskillid;
        break;
      }
      
      // repeated .PBPlayerWuxuePageInfo allskillid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allskillid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allskillid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allskillid;
        if (input->ExpectTag(24)) goto parse_useskillid;
        break;
      }
      
      // repeated uint32 useskillid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useskillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_useskillid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_useskillid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_useskillid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerWuxueSchemeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nameid = 1;
  if (has_nameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nameid(), output);
  }
  
  // repeated .PBPlayerWuxuePageInfo allskillid = 2;
  for (int i = 0; i < this->allskillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allskillid(i), output);
  }
  
  // repeated uint32 useskillid = 3;
  for (int i = 0; i < this->useskillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->useskillid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerWuxueSchemeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nameid = 1;
  if (has_nameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nameid(), target);
  }
  
  // repeated .PBPlayerWuxuePageInfo allskillid = 2;
  for (int i = 0; i < this->allskillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allskillid(i), target);
  }
  
  // repeated uint32 useskillid = 3;
  for (int i = 0; i < this->useskillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->useskillid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerWuxueSchemeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nameid = 1;
    if (has_nameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nameid());
    }
    
  }
  // repeated .PBPlayerWuxuePageInfo allskillid = 2;
  total_size += 1 * this->allskillid_size();
  for (int i = 0; i < this->allskillid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allskillid(i));
  }
  
  // repeated uint32 useskillid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->useskillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->useskillid(i));
    }
    total_size += 1 * this->useskillid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerWuxueSchemeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerWuxueSchemeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerWuxueSchemeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerWuxueSchemeInfo::MergeFrom(const PBPlayerWuxueSchemeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  allskillid_.MergeFrom(from.allskillid_);
  useskillid_.MergeFrom(from.useskillid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nameid()) {
      set_nameid(from.nameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerWuxueSchemeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerWuxueSchemeInfo::CopyFrom(const PBPlayerWuxueSchemeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerWuxueSchemeInfo::IsInitialized() const {
  
  return true;
}

void PBPlayerWuxueSchemeInfo::Swap(PBPlayerWuxueSchemeInfo* other) {
  if (other != this) {
    std::swap(nameid_, other->nameid_);
    allskillid_.Swap(&other->allskillid_);
    useskillid_.Swap(&other->useskillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerWuxueSchemeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerWuxueSchemeInfo_descriptor_;
  metadata.reflection = PBPlayerWuxueSchemeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerWuxue::kCurschemenumFieldNumber;
const int PBPlayerWuxue::kSchemeinfoFieldNumber;
#endif  // !_MSC_VER

PBPlayerWuxue::PBPlayerWuxue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerWuxue::InitAsDefaultInstance() {
}

PBPlayerWuxue::PBPlayerWuxue(const PBPlayerWuxue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerWuxue::SharedCtor() {
  _cached_size_ = 0;
  curschemenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerWuxue::~PBPlayerWuxue() {
  SharedDtor();
}

void PBPlayerWuxue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerWuxue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerWuxue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerWuxue_descriptor_;
}

const PBPlayerWuxue& PBPlayerWuxue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerWuxue* PBPlayerWuxue::default_instance_ = NULL;

PBPlayerWuxue* PBPlayerWuxue::New() const {
  return new PBPlayerWuxue;
}

void PBPlayerWuxue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curschemenum_ = 0u;
  }
  schemeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerWuxue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curschemenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curschemenum_)));
          set_has_curschemenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_schemeinfo;
        break;
      }
      
      // repeated .PBPlayerWuxueSchemeInfo schemeinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schemeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schemeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_schemeinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerWuxue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curschemenum = 1;
  if (has_curschemenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curschemenum(), output);
  }
  
  // repeated .PBPlayerWuxueSchemeInfo schemeinfo = 2;
  for (int i = 0; i < this->schemeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->schemeinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerWuxue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curschemenum = 1;
  if (has_curschemenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curschemenum(), target);
  }
  
  // repeated .PBPlayerWuxueSchemeInfo schemeinfo = 2;
  for (int i = 0; i < this->schemeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->schemeinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerWuxue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curschemenum = 1;
    if (has_curschemenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curschemenum());
    }
    
  }
  // repeated .PBPlayerWuxueSchemeInfo schemeinfo = 2;
  total_size += 1 * this->schemeinfo_size();
  for (int i = 0; i < this->schemeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->schemeinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerWuxue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerWuxue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerWuxue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerWuxue::MergeFrom(const PBPlayerWuxue& from) {
  GOOGLE_CHECK_NE(&from, this);
  schemeinfo_.MergeFrom(from.schemeinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curschemenum()) {
      set_curschemenum(from.curschemenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerWuxue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerWuxue::CopyFrom(const PBPlayerWuxue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerWuxue::IsInitialized() const {
  
  return true;
}

void PBPlayerWuxue::Swap(PBPlayerWuxue* other) {
  if (other != this) {
    std::swap(curschemenum_, other->curschemenum_);
    schemeinfo_.Swap(&other->schemeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerWuxue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerWuxue_descriptor_;
  metadata.reflection = PBPlayerWuxue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerDart::kDartcarGlobalIDFieldNumber;
const int PBPlayerDart::kTodayNormalDartCountFieldNumber;
const int PBPlayerDart::kTodayTianxiaDartCountFieldNumber;
#endif  // !_MSC_VER

PBPlayerDart::PBPlayerDart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerDart::InitAsDefaultInstance() {
}

PBPlayerDart::PBPlayerDart(const PBPlayerDart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerDart::SharedCtor() {
  _cached_size_ = 0;
  dartcarglobalid_ = GOOGLE_ULONGLONG(0);
  todaynormaldartcount_ = 0u;
  todaytianxiadartcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerDart::~PBPlayerDart() {
  SharedDtor();
}

void PBPlayerDart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerDart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerDart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerDart_descriptor_;
}

const PBPlayerDart& PBPlayerDart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerDart* PBPlayerDart::default_instance_ = NULL;

PBPlayerDart* PBPlayerDart::New() const {
  return new PBPlayerDart;
}

void PBPlayerDart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dartcarglobalid_ = GOOGLE_ULONGLONG(0);
    todaynormaldartcount_ = 0u;
    todaytianxiadartcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerDart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dartcarGlobalID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dartcarglobalid_)));
          set_has_dartcarglobalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_todayNormalDartCount;
        break;
      }
      
      // optional uint32 todayNormalDartCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayNormalDartCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaynormaldartcount_)));
          set_has_todaynormaldartcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_todayTianxiaDartCount;
        break;
      }
      
      // optional uint32 todayTianxiaDartCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayTianxiaDartCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaytianxiadartcount_)));
          set_has_todaytianxiadartcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerDart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dartcarGlobalID = 1;
  if (has_dartcarglobalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dartcarglobalid(), output);
  }
  
  // optional uint32 todayNormalDartCount = 2;
  if (has_todaynormaldartcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->todaynormaldartcount(), output);
  }
  
  // optional uint32 todayTianxiaDartCount = 3;
  if (has_todaytianxiadartcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->todaytianxiadartcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerDart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dartcarGlobalID = 1;
  if (has_dartcarglobalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dartcarglobalid(), target);
  }
  
  // optional uint32 todayNormalDartCount = 2;
  if (has_todaynormaldartcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->todaynormaldartcount(), target);
  }
  
  // optional uint32 todayTianxiaDartCount = 3;
  if (has_todaytianxiadartcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->todaytianxiadartcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerDart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dartcarGlobalID = 1;
    if (has_dartcarglobalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dartcarglobalid());
    }
    
    // optional uint32 todayNormalDartCount = 2;
    if (has_todaynormaldartcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaynormaldartcount());
    }
    
    // optional uint32 todayTianxiaDartCount = 3;
    if (has_todaytianxiadartcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaytianxiadartcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerDart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerDart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerDart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerDart::MergeFrom(const PBPlayerDart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dartcarglobalid()) {
      set_dartcarglobalid(from.dartcarglobalid());
    }
    if (from.has_todaynormaldartcount()) {
      set_todaynormaldartcount(from.todaynormaldartcount());
    }
    if (from.has_todaytianxiadartcount()) {
      set_todaytianxiadartcount(from.todaytianxiadartcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerDart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerDart::CopyFrom(const PBPlayerDart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerDart::IsInitialized() const {
  
  return true;
}

void PBPlayerDart::Swap(PBPlayerDart* other) {
  if (other != this) {
    std::swap(dartcarglobalid_, other->dartcarglobalid_);
    std::swap(todaynormaldartcount_, other->todaynormaldartcount_);
    std::swap(todaytianxiadartcount_, other->todaytianxiadartcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerDart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerDart_descriptor_;
  metadata.reflection = PBPlayerDart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerFactionBoss::kEntertimeFieldNumber;
const int PBPlayerFactionBoss::kCopymapidFieldNumber;
#endif  // !_MSC_VER

PBPlayerFactionBoss::PBPlayerFactionBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerFactionBoss::InitAsDefaultInstance() {
}

PBPlayerFactionBoss::PBPlayerFactionBoss(const PBPlayerFactionBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerFactionBoss::SharedCtor() {
  _cached_size_ = 0;
  entertime_ = 0u;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerFactionBoss::~PBPlayerFactionBoss() {
  SharedDtor();
}

void PBPlayerFactionBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerFactionBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerFactionBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerFactionBoss_descriptor_;
}

const PBPlayerFactionBoss& PBPlayerFactionBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerFactionBoss* PBPlayerFactionBoss::default_instance_ = NULL;

PBPlayerFactionBoss* PBPlayerFactionBoss::New() const {
  return new PBPlayerFactionBoss;
}

void PBPlayerFactionBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entertime_ = 0u;
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerFactionBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 entertime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entertime_)));
          set_has_entertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copymapid;
        break;
      }
      
      // optional uint32 copymapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerFactionBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 entertime = 1;
  if (has_entertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entertime(), output);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerFactionBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 entertime = 1;
  if (has_entertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entertime(), target);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerFactionBoss::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 entertime = 1;
    if (has_entertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entertime());
    }
    
    // optional uint32 copymapid = 2;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerFactionBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerFactionBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerFactionBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerFactionBoss::MergeFrom(const PBPlayerFactionBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entertime()) {
      set_entertime(from.entertime());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerFactionBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerFactionBoss::CopyFrom(const PBPlayerFactionBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerFactionBoss::IsInitialized() const {
  
  return true;
}

void PBPlayerFactionBoss::Swap(PBPlayerFactionBoss* other) {
  if (other != this) {
    std::swap(entertime_, other->entertime_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerFactionBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerFactionBoss_descriptor_;
  metadata.reflection = PBPlayerFactionBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerTitleInfo::kIdFieldNumber;
const int PBPlayerTitleInfo::kExpiretimeFieldNumber;
const int PBPlayerTitleInfo::kGettimeFieldNumber;
#endif  // !_MSC_VER

PBPlayerTitleInfo::PBPlayerTitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerTitleInfo::InitAsDefaultInstance() {
}

PBPlayerTitleInfo::PBPlayerTitleInfo(const PBPlayerTitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerTitleInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  expiretime_ = 0u;
  gettime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerTitleInfo::~PBPlayerTitleInfo() {
  SharedDtor();
}

void PBPlayerTitleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerTitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerTitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerTitleInfo_descriptor_;
}

const PBPlayerTitleInfo& PBPlayerTitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerTitleInfo* PBPlayerTitleInfo::default_instance_ = NULL;

PBPlayerTitleInfo* PBPlayerTitleInfo::New() const {
  return new PBPlayerTitleInfo;
}

void PBPlayerTitleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    expiretime_ = 0u;
    gettime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerTitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expiretime;
        break;
      }
      
      // optional uint32 expiretime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gettime;
        break;
      }
      
      // optional uint32 gettime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gettime_)));
          set_has_gettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerTitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 expiretime = 2;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expiretime(), output);
  }
  
  // optional uint32 gettime = 3;
  if (has_gettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gettime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerTitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 expiretime = 2;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expiretime(), target);
  }
  
  // optional uint32 gettime = 3;
  if (has_gettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gettime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerTitleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 expiretime = 2;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiretime());
    }
    
    // optional uint32 gettime = 3;
    if (has_gettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gettime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerTitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerTitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerTitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerTitleInfo::MergeFrom(const PBPlayerTitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_gettime()) {
      set_gettime(from.gettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerTitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerTitleInfo::CopyFrom(const PBPlayerTitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerTitleInfo::IsInitialized() const {
  
  return true;
}

void PBPlayerTitleInfo::Swap(PBPlayerTitleInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(gettime_, other->gettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerTitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerTitleInfo_descriptor_;
  metadata.reflection = PBPlayerTitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerClassfiyTitle::kTypeFieldNumber;
const int PBPlayerClassfiyTitle::kInfoFieldNumber;
#endif  // !_MSC_VER

PBPlayerClassfiyTitle::PBPlayerClassfiyTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerClassfiyTitle::InitAsDefaultInstance() {
}

PBPlayerClassfiyTitle::PBPlayerClassfiyTitle(const PBPlayerClassfiyTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerClassfiyTitle::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerClassfiyTitle::~PBPlayerClassfiyTitle() {
  SharedDtor();
}

void PBPlayerClassfiyTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerClassfiyTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerClassfiyTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerClassfiyTitle_descriptor_;
}

const PBPlayerClassfiyTitle& PBPlayerClassfiyTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerClassfiyTitle* PBPlayerClassfiyTitle::default_instance_ = NULL;

PBPlayerClassfiyTitle* PBPlayerClassfiyTitle::New() const {
  return new PBPlayerClassfiyTitle;
}

void PBPlayerClassfiyTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerClassfiyTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // repeated .PBPlayerTitleInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerClassfiyTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // repeated .PBPlayerTitleInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerClassfiyTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // repeated .PBPlayerTitleInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerClassfiyTitle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  // repeated .PBPlayerTitleInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerClassfiyTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerClassfiyTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerClassfiyTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerClassfiyTitle::MergeFrom(const PBPlayerClassfiyTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerClassfiyTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerClassfiyTitle::CopyFrom(const PBPlayerClassfiyTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerClassfiyTitle::IsInitialized() const {
  
  return true;
}

void PBPlayerClassfiyTitle::Swap(PBPlayerClassfiyTitle* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerClassfiyTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerClassfiyTitle_descriptor_;
  metadata.reflection = PBPlayerClassfiyTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerTitle::kClassifytitleFieldNumber;
#endif  // !_MSC_VER

PBPlayerTitle::PBPlayerTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerTitle::InitAsDefaultInstance() {
}

PBPlayerTitle::PBPlayerTitle(const PBPlayerTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerTitle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerTitle::~PBPlayerTitle() {
  SharedDtor();
}

void PBPlayerTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerTitle_descriptor_;
}

const PBPlayerTitle& PBPlayerTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerTitle* PBPlayerTitle::default_instance_ = NULL;

PBPlayerTitle* PBPlayerTitle::New() const {
  return new PBPlayerTitle;
}

void PBPlayerTitle::Clear() {
  classifytitle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBPlayerClassfiyTitle classifytitle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classifytitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_classifytitle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_classifytitle;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBPlayerClassfiyTitle classifytitle = 1;
  for (int i = 0; i < this->classifytitle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->classifytitle(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBPlayerClassfiyTitle classifytitle = 1;
  for (int i = 0; i < this->classifytitle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->classifytitle(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerTitle::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBPlayerClassfiyTitle classifytitle = 1;
  total_size += 1 * this->classifytitle_size();
  for (int i = 0; i < this->classifytitle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->classifytitle(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerTitle::MergeFrom(const PBPlayerTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  classifytitle_.MergeFrom(from.classifytitle_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerTitle::CopyFrom(const PBPlayerTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerTitle::IsInitialized() const {
  
  return true;
}

void PBPlayerTitle::Swap(PBPlayerTitle* other) {
  if (other != this) {
    classifytitle_.Swap(&other->classifytitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerTitle_descriptor_;
  metadata.reflection = PBPlayerTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerDazuoguaji::kTodayDazuoguajiExpCountFieldNumber;
const int PBPlayerDazuoguaji::kTodayDazuoguajiWisdomCountFieldNumber;
#endif  // !_MSC_VER

PBPlayerDazuoguaji::PBPlayerDazuoguaji()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerDazuoguaji::InitAsDefaultInstance() {
}

PBPlayerDazuoguaji::PBPlayerDazuoguaji(const PBPlayerDazuoguaji& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerDazuoguaji::SharedCtor() {
  _cached_size_ = 0;
  todaydazuoguajiexpcount_ = 0u;
  todaydazuoguajiwisdomcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerDazuoguaji::~PBPlayerDazuoguaji() {
  SharedDtor();
}

void PBPlayerDazuoguaji::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerDazuoguaji::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerDazuoguaji::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerDazuoguaji_descriptor_;
}

const PBPlayerDazuoguaji& PBPlayerDazuoguaji::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerDazuoguaji* PBPlayerDazuoguaji::default_instance_ = NULL;

PBPlayerDazuoguaji* PBPlayerDazuoguaji::New() const {
  return new PBPlayerDazuoguaji;
}

void PBPlayerDazuoguaji::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    todaydazuoguajiexpcount_ = 0u;
    todaydazuoguajiwisdomcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerDazuoguaji::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 todayDazuoguajiExpCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaydazuoguajiexpcount_)));
          set_has_todaydazuoguajiexpcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_todayDazuoguajiWisdomCount;
        break;
      }
      
      // optional uint32 todayDazuoguajiWisdomCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayDazuoguajiWisdomCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaydazuoguajiwisdomcount_)));
          set_has_todaydazuoguajiwisdomcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerDazuoguaji::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 todayDazuoguajiExpCount = 1;
  if (has_todaydazuoguajiexpcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->todaydazuoguajiexpcount(), output);
  }
  
  // optional uint32 todayDazuoguajiWisdomCount = 2;
  if (has_todaydazuoguajiwisdomcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->todaydazuoguajiwisdomcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerDazuoguaji::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 todayDazuoguajiExpCount = 1;
  if (has_todaydazuoguajiexpcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->todaydazuoguajiexpcount(), target);
  }
  
  // optional uint32 todayDazuoguajiWisdomCount = 2;
  if (has_todaydazuoguajiwisdomcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->todaydazuoguajiwisdomcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerDazuoguaji::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 todayDazuoguajiExpCount = 1;
    if (has_todaydazuoguajiexpcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaydazuoguajiexpcount());
    }
    
    // optional uint32 todayDazuoguajiWisdomCount = 2;
    if (has_todaydazuoguajiwisdomcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaydazuoguajiwisdomcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerDazuoguaji::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerDazuoguaji* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerDazuoguaji*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerDazuoguaji::MergeFrom(const PBPlayerDazuoguaji& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_todaydazuoguajiexpcount()) {
      set_todaydazuoguajiexpcount(from.todaydazuoguajiexpcount());
    }
    if (from.has_todaydazuoguajiwisdomcount()) {
      set_todaydazuoguajiwisdomcount(from.todaydazuoguajiwisdomcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerDazuoguaji::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerDazuoguaji::CopyFrom(const PBPlayerDazuoguaji& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerDazuoguaji::IsInitialized() const {
  
  return true;
}

void PBPlayerDazuoguaji::Swap(PBPlayerDazuoguaji* other) {
  if (other != this) {
    std::swap(todaydazuoguajiexpcount_, other->todaydazuoguajiexpcount_);
    std::swap(todaydazuoguajiwisdomcount_, other->todaydazuoguajiwisdomcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerDazuoguaji::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerDazuoguaji_descriptor_;
  metadata.reflection = PBPlayerDazuoguaji_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFashion::kFashionidFieldNumber;
const int PBFashion::kTimeFieldNumber;
#endif  // !_MSC_VER

PBFashion::PBFashion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFashion::InitAsDefaultInstance() {
}

PBFashion::PBFashion(const PBFashion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFashion::SharedCtor() {
  _cached_size_ = 0;
  fashionid_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFashion::~PBFashion() {
  SharedDtor();
}

void PBFashion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFashion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFashion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFashion_descriptor_;
}

const PBFashion& PBFashion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBFashion* PBFashion::default_instance_ = NULL;

PBFashion* PBFashion::New() const {
  return new PBFashion;
}

void PBFashion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fashionid_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFashion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fashionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionid_)));
          set_has_fashionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFashion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fashionid = 1;
  if (has_fashionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fashionid(), output);
  }
  
  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFashion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fashionid = 1;
  if (has_fashionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fashionid(), target);
  }
  
  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFashion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fashionid = 1;
    if (has_fashionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionid());
    }
    
    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFashion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFashion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFashion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFashion::MergeFrom(const PBFashion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fashionid()) {
      set_fashionid(from.fashionid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFashion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFashion::CopyFrom(const PBFashion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFashion::IsInitialized() const {
  
  return true;
}

void PBFashion::Swap(PBFashion* other) {
  if (other != this) {
    std::swap(fashionid_, other->fashionid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFashion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFashion_descriptor_;
  metadata.reflection = PBFashion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerFashion::kFashionFieldNumber;
const int PBPlayerFashion::kEquipfashionidFieldNumber;
#endif  // !_MSC_VER

PBPlayerFashion::PBPlayerFashion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerFashion::InitAsDefaultInstance() {
}

PBPlayerFashion::PBPlayerFashion(const PBPlayerFashion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerFashion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerFashion::~PBPlayerFashion() {
  SharedDtor();
}

void PBPlayerFashion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerFashion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerFashion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerFashion_descriptor_;
}

const PBPlayerFashion& PBPlayerFashion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerFashion* PBPlayerFashion::default_instance_ = NULL;

PBPlayerFashion* PBPlayerFashion::New() const {
  return new PBPlayerFashion;
}

void PBPlayerFashion::Clear() {
  fashion_.Clear();
  equipfashionid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerFashion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFashion fashion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fashion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fashion;
        if (input->ExpectTag(16)) goto parse_equipfashionid;
        break;
      }
      
      // repeated uint32 equipfashionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipfashionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_equipfashionid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equipfashionid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipfashionid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerFashion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFashion fashion = 1;
  for (int i = 0; i < this->fashion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fashion(i), output);
  }
  
  // repeated uint32 equipfashionid = 2;
  for (int i = 0; i < this->equipfashionid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->equipfashionid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerFashion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFashion fashion = 1;
  for (int i = 0; i < this->fashion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fashion(i), target);
  }
  
  // repeated uint32 equipfashionid = 2;
  for (int i = 0; i < this->equipfashionid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->equipfashionid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerFashion::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFashion fashion = 1;
  total_size += 1 * this->fashion_size();
  for (int i = 0; i < this->fashion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fashion(i));
  }
  
  // repeated uint32 equipfashionid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipfashionid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equipfashionid(i));
    }
    total_size += 1 * this->equipfashionid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerFashion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerFashion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerFashion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerFashion::MergeFrom(const PBPlayerFashion& from) {
  GOOGLE_CHECK_NE(&from, this);
  fashion_.MergeFrom(from.fashion_);
  equipfashionid_.MergeFrom(from.equipfashionid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerFashion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerFashion::CopyFrom(const PBPlayerFashion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerFashion::IsInitialized() const {
  
  return true;
}

void PBPlayerFashion::Swap(PBPlayerFashion* other) {
  if (other != this) {
    fashion_.Swap(&other->fashion_);
    equipfashionid_.Swap(&other->equipfashionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerFashion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerFashion_descriptor_;
  metadata.reflection = PBPlayerFashion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBEquipColumn::kIdFieldNumber;
const int PBEquipColumn::kEnhanceLevelFieldNumber;
const int PBEquipColumn::kForgeLevelFieldNumber;
#endif  // !_MSC_VER

PBEquipColumn::PBEquipColumn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEquipColumn::InitAsDefaultInstance() {
}

PBEquipColumn::PBEquipColumn(const PBEquipColumn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEquipColumn::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  enhancelevel_ = 0u;
  forgelevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEquipColumn::~PBEquipColumn() {
  SharedDtor();
}

void PBEquipColumn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBEquipColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBEquipColumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEquipColumn_descriptor_;
}

const PBEquipColumn& PBEquipColumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBEquipColumn* PBEquipColumn::default_instance_ = NULL;

PBEquipColumn* PBEquipColumn::New() const {
  return new PBEquipColumn;
}

void PBEquipColumn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    enhancelevel_ = 0u;
    forgelevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEquipColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EnhanceLevel;
        break;
      }
      
      // optional uint32 EnhanceLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EnhanceLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhancelevel_)));
          set_has_enhancelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ForgeLevel;
        break;
      }
      
      // optional uint32 ForgeLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ForgeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forgelevel_)));
          set_has_forgelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEquipColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 EnhanceLevel = 2;
  if (has_enhancelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->enhancelevel(), output);
  }
  
  // optional uint32 ForgeLevel = 3;
  if (has_forgelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->forgelevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEquipColumn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 EnhanceLevel = 2;
  if (has_enhancelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->enhancelevel(), target);
  }
  
  // optional uint32 ForgeLevel = 3;
  if (has_forgelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->forgelevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEquipColumn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 EnhanceLevel = 2;
    if (has_enhancelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhancelevel());
    }
    
    // optional uint32 ForgeLevel = 3;
    if (has_forgelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forgelevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBEquipColumn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEquipColumn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEquipColumn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEquipColumn::MergeFrom(const PBEquipColumn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_enhancelevel()) {
      set_enhancelevel(from.enhancelevel());
    }
    if (from.has_forgelevel()) {
      set_forgelevel(from.forgelevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEquipColumn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipColumn::CopyFrom(const PBEquipColumn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBEquipColumn::IsInitialized() const {
  
  return true;
}

void PBEquipColumn::Swap(PBEquipColumn* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(enhancelevel_, other->enhancelevel_);
    std::swap(forgelevel_, other->forgelevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBEquipColumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBEquipColumn_descriptor_;
  metadata.reflection = PBEquipColumn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerEquipColumn::kInfoFieldNumber;
#endif  // !_MSC_VER

PBPlayerEquipColumn::PBPlayerEquipColumn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerEquipColumn::InitAsDefaultInstance() {
}

PBPlayerEquipColumn::PBPlayerEquipColumn(const PBPlayerEquipColumn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerEquipColumn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerEquipColumn::~PBPlayerEquipColumn() {
  SharedDtor();
}

void PBPlayerEquipColumn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerEquipColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerEquipColumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerEquipColumn_descriptor_;
}

const PBPlayerEquipColumn& PBPlayerEquipColumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerEquipColumn* PBPlayerEquipColumn::default_instance_ = NULL;

PBPlayerEquipColumn* PBPlayerEquipColumn::New() const {
  return new PBPlayerEquipColumn;
}

void PBPlayerEquipColumn::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerEquipColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBEquipColumn info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerEquipColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBEquipColumn info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerEquipColumn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBEquipColumn info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerEquipColumn::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBEquipColumn info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerEquipColumn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerEquipColumn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerEquipColumn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerEquipColumn::MergeFrom(const PBPlayerEquipColumn& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerEquipColumn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerEquipColumn::CopyFrom(const PBPlayerEquipColumn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerEquipColumn::IsInitialized() const {
  
  return true;
}

void PBPlayerEquipColumn::Swap(PBPlayerEquipColumn* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerEquipColumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerEquipColumn_descriptor_;
  metadata.reflection = PBPlayerEquipColumn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerGreatWallTrain::kCopymapIDFieldNumber;
const int PBPlayerGreatWallTrain::kLayerFieldNumber;
const int PBPlayerGreatWallTrain::kTimeFieldNumber;
#endif  // !_MSC_VER

PBPlayerGreatWallTrain::PBPlayerGreatWallTrain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerGreatWallTrain::InitAsDefaultInstance() {
}

PBPlayerGreatWallTrain::PBPlayerGreatWallTrain(const PBPlayerGreatWallTrain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerGreatWallTrain::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerGreatWallTrain::~PBPlayerGreatWallTrain() {
  SharedDtor();
}

void PBPlayerGreatWallTrain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerGreatWallTrain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerGreatWallTrain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerGreatWallTrain_descriptor_;
}

const PBPlayerGreatWallTrain& PBPlayerGreatWallTrain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerGreatWallTrain* PBPlayerGreatWallTrain::default_instance_ = NULL;

PBPlayerGreatWallTrain* PBPlayerGreatWallTrain::New() const {
  return new PBPlayerGreatWallTrain;
}

void PBPlayerGreatWallTrain::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    layer_ = 0u;
    time_ = 0u;
  }
  copymapid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerGreatWallTrain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 CopymapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CopymapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_copymapid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_copymapid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_CopymapID;
        if (input->ExpectTag(16)) goto parse_layer;
        break;
      }
      
      // optional uint32 layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerGreatWallTrain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 CopymapID = 1;
  for (int i = 0; i < this->copymapid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->copymapid(i), output);
  }
  
  // optional uint32 layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layer(), output);
  }
  
  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerGreatWallTrain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 CopymapID = 1;
  for (int i = 0; i < this->copymapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->copymapid(i), target);
  }
  
  // optional uint32 layer = 2;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layer(), target);
  }
  
  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerGreatWallTrain::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }
    
    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  // repeated uint32 CopymapID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->copymapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->copymapid(i));
    }
    total_size += 1 * this->copymapid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerGreatWallTrain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerGreatWallTrain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerGreatWallTrain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerGreatWallTrain::MergeFrom(const PBPlayerGreatWallTrain& from) {
  GOOGLE_CHECK_NE(&from, this);
  copymapid_.MergeFrom(from.copymapid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerGreatWallTrain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerGreatWallTrain::CopyFrom(const PBPlayerGreatWallTrain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerGreatWallTrain::IsInitialized() const {
  
  return true;
}

void PBPlayerGreatWallTrain::Swap(PBPlayerGreatWallTrain* other) {
  if (other != this) {
    copymapid_.Swap(&other->copymapid_);
    std::swap(layer_, other->layer_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerGreatWallTrain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerGreatWallTrain_descriptor_;
  metadata.reflection = PBPlayerGreatWallTrain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBActivityInfo::kIdFieldNumber;
const int PBActivityInfo::kCountFieldNumber;
#endif  // !_MSC_VER

PBActivityInfo::PBActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBActivityInfo::InitAsDefaultInstance() {
}

PBActivityInfo::PBActivityInfo(const PBActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBActivityInfo::~PBActivityInfo() {
  SharedDtor();
}

void PBActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBActivityInfo_descriptor_;
}

const PBActivityInfo& PBActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBActivityInfo* PBActivityInfo::default_instance_ = NULL;

PBActivityInfo* PBActivityInfo::New() const {
  return new PBActivityInfo;
}

void PBActivityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBActivityInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBActivityInfo::MergeFrom(const PBActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBActivityInfo::CopyFrom(const PBActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBActivityInfo::IsInitialized() const {
  
  return true;
}

void PBActivityInfo::Swap(PBActivityInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBActivityInfo_descriptor_;
  metadata.reflection = PBActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerActivity::kInfoFieldNumber;
const int PBPlayerActivity::kLivenessFieldNumber;
const int PBPlayerActivity::kSetidFieldNumber;
const int PBPlayerActivity::kCleartimeFieldNumber;
#endif  // !_MSC_VER

PBPlayerActivity::PBPlayerActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerActivity::InitAsDefaultInstance() {
}

PBPlayerActivity::PBPlayerActivity(const PBPlayerActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerActivity::SharedCtor() {
  _cached_size_ = 0;
  liveness_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerActivity::~PBPlayerActivity() {
  SharedDtor();
}

void PBPlayerActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerActivity_descriptor_;
}

const PBPlayerActivity& PBPlayerActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerActivity* PBPlayerActivity::default_instance_ = NULL;

PBPlayerActivity* PBPlayerActivity::New() const {
  return new PBPlayerActivity;
}

void PBPlayerActivity::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    liveness_ = 0u;
  }
  info_.Clear();
  setid_.Clear();
  cleartime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBActivityInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_liveness;
        break;
      }
      
      // optional uint32 liveness = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liveness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &liveness_)));
          set_has_liveness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_setid;
        break;
      }
      
      // repeated uint32 setid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_setid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_setid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_setid;
        if (input->ExpectTag(32)) goto parse_cleartime;
        break;
      }
      
      // repeated uint32 cleartime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleartime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_cleartime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cleartime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cleartime;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBActivityInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  // optional uint32 liveness = 2;
  if (has_liveness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->liveness(), output);
  }
  
  // repeated uint32 setid = 3;
  for (int i = 0; i < this->setid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->setid(i), output);
  }
  
  // repeated uint32 cleartime = 4;
  for (int i = 0; i < this->cleartime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->cleartime(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBActivityInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  // optional uint32 liveness = 2;
  if (has_liveness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->liveness(), target);
  }
  
  // repeated uint32 setid = 3;
  for (int i = 0; i < this->setid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->setid(i), target);
  }
  
  // repeated uint32 cleartime = 4;
  for (int i = 0; i < this->cleartime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->cleartime(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerActivity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 liveness = 2;
    if (has_liveness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->liveness());
    }
    
  }
  // repeated .PBActivityInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  // repeated uint32 setid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->setid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->setid(i));
    }
    total_size += 1 * this->setid_size() + data_size;
  }
  
  // repeated uint32 cleartime = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cleartime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cleartime(i));
    }
    total_size += 1 * this->cleartime_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerActivity::MergeFrom(const PBPlayerActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  setid_.MergeFrom(from.setid_);
  cleartime_.MergeFrom(from.cleartime_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_liveness()) {
      set_liveness(from.liveness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerActivity::CopyFrom(const PBPlayerActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerActivity::IsInitialized() const {
  
  return true;
}

void PBPlayerActivity::Swap(PBPlayerActivity* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(liveness_, other->liveness_);
    setid_.Swap(&other->setid_);
    cleartime_.Swap(&other->cleartime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerActivity_descriptor_;
  metadata.reflection = PBPlayerActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLlayerRelive::kFreeMaxCountFieldNumber;
const int PBLlayerRelive::kCostCountFieldNumber;
#endif  // !_MSC_VER

PBLlayerRelive::PBLlayerRelive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLlayerRelive::InitAsDefaultInstance() {
}

PBLlayerRelive::PBLlayerRelive(const PBLlayerRelive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLlayerRelive::SharedCtor() {
  _cached_size_ = 0;
  freemaxcount_ = 0u;
  costcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLlayerRelive::~PBLlayerRelive() {
  SharedDtor();
}

void PBLlayerRelive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBLlayerRelive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLlayerRelive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLlayerRelive_descriptor_;
}

const PBLlayerRelive& PBLlayerRelive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBLlayerRelive* PBLlayerRelive::default_instance_ = NULL;

PBLlayerRelive* PBLlayerRelive::New() const {
  return new PBLlayerRelive;
}

void PBLlayerRelive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    freemaxcount_ = 0u;
    costcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLlayerRelive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FreeMaxCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freemaxcount_)));
          set_has_freemaxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CostCount;
        break;
      }
      
      // optional uint32 CostCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CostCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costcount_)));
          set_has_costcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLlayerRelive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 FreeMaxCount = 1;
  if (has_freemaxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->freemaxcount(), output);
  }
  
  // optional uint32 CostCount = 2;
  if (has_costcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->costcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLlayerRelive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FreeMaxCount = 1;
  if (has_freemaxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->freemaxcount(), target);
  }
  
  // optional uint32 CostCount = 2;
  if (has_costcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->costcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLlayerRelive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FreeMaxCount = 1;
    if (has_freemaxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freemaxcount());
    }
    
    // optional uint32 CostCount = 2;
    if (has_costcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLlayerRelive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLlayerRelive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLlayerRelive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLlayerRelive::MergeFrom(const PBLlayerRelive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freemaxcount()) {
      set_freemaxcount(from.freemaxcount());
    }
    if (from.has_costcount()) {
      set_costcount(from.costcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLlayerRelive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLlayerRelive::CopyFrom(const PBLlayerRelive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLlayerRelive::IsInitialized() const {
  
  return true;
}

void PBLlayerRelive::Swap(PBLlayerRelive* other) {
  if (other != this) {
    std::swap(freemaxcount_, other->freemaxcount_);
    std::swap(costcount_, other->costcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLlayerRelive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLlayerRelive_descriptor_;
  metadata.reflection = PBLlayerRelive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerClimbTowerItem::kItemIDFieldNumber;
const int PBPlayerClimbTowerItem::kCountFieldNumber;
#endif  // !_MSC_VER

PBPlayerClimbTowerItem::PBPlayerClimbTowerItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerClimbTowerItem::InitAsDefaultInstance() {
}

PBPlayerClimbTowerItem::PBPlayerClimbTowerItem(const PBPlayerClimbTowerItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerClimbTowerItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerClimbTowerItem::~PBPlayerClimbTowerItem() {
  SharedDtor();
}

void PBPlayerClimbTowerItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerClimbTowerItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerClimbTowerItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerClimbTowerItem_descriptor_;
}

const PBPlayerClimbTowerItem& PBPlayerClimbTowerItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerClimbTowerItem* PBPlayerClimbTowerItem::default_instance_ = NULL;

PBPlayerClimbTowerItem* PBPlayerClimbTowerItem::New() const {
  return new PBPlayerClimbTowerItem;
}

void PBPlayerClimbTowerItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerClimbTowerItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerClimbTowerItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerClimbTowerItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerClimbTowerItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerClimbTowerItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerClimbTowerItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerClimbTowerItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerClimbTowerItem::MergeFrom(const PBPlayerClimbTowerItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerClimbTowerItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerClimbTowerItem::CopyFrom(const PBPlayerClimbTowerItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerClimbTowerItem::IsInitialized() const {
  
  return true;
}

void PBPlayerClimbTowerItem::Swap(PBPlayerClimbTowerItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerClimbTowerItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerClimbTowerItem_descriptor_;
  metadata.reflection = PBPlayerClimbTowerItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerClimbTower::kDayCurrentCopymapIDFieldNumber;
const int PBPlayerClimbTower::kDayItemUnsettledFieldNumber;
const int PBPlayerClimbTower::kDayPlayCountFieldNumber;
const int PBPlayerClimbTower::kWeekCurrentClassFieldNumber;
const int PBPlayerClimbTower::kWeekMaxCopyIDFieldNumber;
const int PBPlayerClimbTower::kNextJumpCpymapIDFieldNumber;
const int PBPlayerClimbTower::kLuckDrawRightNowFieldNumber;
#endif  // !_MSC_VER

PBPlayerClimbTower::PBPlayerClimbTower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerClimbTower::InitAsDefaultInstance() {
}

PBPlayerClimbTower::PBPlayerClimbTower(const PBPlayerClimbTower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerClimbTower::SharedCtor() {
  _cached_size_ = 0;
  daycurrentcopymapid_ = 0u;
  dayplaycount_ = 0u;
  weekcurrentclass_ = 0u;
  weekmaxcopyid_ = 0u;
  nextjumpcpymapid_ = 0u;
  luckdrawrightnow_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerClimbTower::~PBPlayerClimbTower() {
  SharedDtor();
}

void PBPlayerClimbTower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerClimbTower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerClimbTower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerClimbTower_descriptor_;
}

const PBPlayerClimbTower& PBPlayerClimbTower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerClimbTower* PBPlayerClimbTower::default_instance_ = NULL;

PBPlayerClimbTower* PBPlayerClimbTower::New() const {
  return new PBPlayerClimbTower;
}

void PBPlayerClimbTower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daycurrentcopymapid_ = 0u;
    dayplaycount_ = 0u;
    weekcurrentclass_ = 0u;
    weekmaxcopyid_ = 0u;
    nextjumpcpymapid_ = 0u;
    luckdrawrightnow_ = 0u;
  }
  dayitemunsettled_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerClimbTower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dayCurrentCopymapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daycurrentcopymapid_)));
          set_has_daycurrentcopymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dayItemUnsettled;
        break;
      }
      
      // repeated .PBPlayerClimbTowerItem dayItemUnsettled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dayItemUnsettled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dayitemunsettled()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dayItemUnsettled;
        if (input->ExpectTag(24)) goto parse_dayPlayCount;
        break;
      }
      
      // optional uint32 dayPlayCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayPlayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayplaycount_)));
          set_has_dayplaycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_weekCurrentClass;
        break;
      }
      
      // optional uint32 weekCurrentClass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekCurrentClass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekcurrentclass_)));
          set_has_weekcurrentclass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_weekMaxCopyID;
        break;
      }
      
      // optional uint32 weekMaxCopyID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekMaxCopyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekmaxcopyid_)));
          set_has_weekmaxcopyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nextJumpCpymapID;
        break;
      }
      
      // optional uint32 nextJumpCpymapID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextJumpCpymapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextjumpcpymapid_)));
          set_has_nextjumpcpymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_luckDrawRightNow;
        break;
      }
      
      // optional uint32 luckDrawRightNow = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luckDrawRightNow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &luckdrawrightnow_)));
          set_has_luckdrawrightnow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerClimbTower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dayCurrentCopymapID = 1;
  if (has_daycurrentcopymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->daycurrentcopymapid(), output);
  }
  
  // repeated .PBPlayerClimbTowerItem dayItemUnsettled = 2;
  for (int i = 0; i < this->dayitemunsettled_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dayitemunsettled(i), output);
  }
  
  // optional uint32 dayPlayCount = 3;
  if (has_dayplaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dayplaycount(), output);
  }
  
  // optional uint32 weekCurrentClass = 4;
  if (has_weekcurrentclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->weekcurrentclass(), output);
  }
  
  // optional uint32 weekMaxCopyID = 5;
  if (has_weekmaxcopyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->weekmaxcopyid(), output);
  }
  
  // optional uint32 nextJumpCpymapID = 6;
  if (has_nextjumpcpymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nextjumpcpymapid(), output);
  }
  
  // optional uint32 luckDrawRightNow = 7;
  if (has_luckdrawrightnow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->luckdrawrightnow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerClimbTower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dayCurrentCopymapID = 1;
  if (has_daycurrentcopymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->daycurrentcopymapid(), target);
  }
  
  // repeated .PBPlayerClimbTowerItem dayItemUnsettled = 2;
  for (int i = 0; i < this->dayitemunsettled_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dayitemunsettled(i), target);
  }
  
  // optional uint32 dayPlayCount = 3;
  if (has_dayplaycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dayplaycount(), target);
  }
  
  // optional uint32 weekCurrentClass = 4;
  if (has_weekcurrentclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->weekcurrentclass(), target);
  }
  
  // optional uint32 weekMaxCopyID = 5;
  if (has_weekmaxcopyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->weekmaxcopyid(), target);
  }
  
  // optional uint32 nextJumpCpymapID = 6;
  if (has_nextjumpcpymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->nextjumpcpymapid(), target);
  }
  
  // optional uint32 luckDrawRightNow = 7;
  if (has_luckdrawrightnow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->luckdrawrightnow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerClimbTower::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dayCurrentCopymapID = 1;
    if (has_daycurrentcopymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daycurrentcopymapid());
    }
    
    // optional uint32 dayPlayCount = 3;
    if (has_dayplaycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayplaycount());
    }
    
    // optional uint32 weekCurrentClass = 4;
    if (has_weekcurrentclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekcurrentclass());
    }
    
    // optional uint32 weekMaxCopyID = 5;
    if (has_weekmaxcopyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekmaxcopyid());
    }
    
    // optional uint32 nextJumpCpymapID = 6;
    if (has_nextjumpcpymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextjumpcpymapid());
    }
    
    // optional uint32 luckDrawRightNow = 7;
    if (has_luckdrawrightnow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->luckdrawrightnow());
    }
    
  }
  // repeated .PBPlayerClimbTowerItem dayItemUnsettled = 2;
  total_size += 1 * this->dayitemunsettled_size();
  for (int i = 0; i < this->dayitemunsettled_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dayitemunsettled(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerClimbTower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerClimbTower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerClimbTower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerClimbTower::MergeFrom(const PBPlayerClimbTower& from) {
  GOOGLE_CHECK_NE(&from, this);
  dayitemunsettled_.MergeFrom(from.dayitemunsettled_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daycurrentcopymapid()) {
      set_daycurrentcopymapid(from.daycurrentcopymapid());
    }
    if (from.has_dayplaycount()) {
      set_dayplaycount(from.dayplaycount());
    }
    if (from.has_weekcurrentclass()) {
      set_weekcurrentclass(from.weekcurrentclass());
    }
    if (from.has_weekmaxcopyid()) {
      set_weekmaxcopyid(from.weekmaxcopyid());
    }
    if (from.has_nextjumpcpymapid()) {
      set_nextjumpcpymapid(from.nextjumpcpymapid());
    }
    if (from.has_luckdrawrightnow()) {
      set_luckdrawrightnow(from.luckdrawrightnow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerClimbTower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerClimbTower::CopyFrom(const PBPlayerClimbTower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerClimbTower::IsInitialized() const {
  
  return true;
}

void PBPlayerClimbTower::Swap(PBPlayerClimbTower* other) {
  if (other != this) {
    std::swap(daycurrentcopymapid_, other->daycurrentcopymapid_);
    dayitemunsettled_.Swap(&other->dayitemunsettled_);
    std::swap(dayplaycount_, other->dayplaycount_);
    std::swap(weekcurrentclass_, other->weekcurrentclass_);
    std::swap(weekmaxcopyid_, other->weekmaxcopyid_);
    std::swap(nextjumpcpymapid_, other->nextjumpcpymapid_);
    std::swap(luckdrawrightnow_, other->luckdrawrightnow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerClimbTower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerClimbTower_descriptor_;
  metadata.reflection = PBPlayerClimbTower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerPvpData::kIdFieldNumber;
const int PBPlayerPvpData::kEntercountFieldNumber;
const int PBPlayerPvpData::kWinnumFieldNumber;
const int PBPlayerPvpData::kFailnumFieldNumber;
const int PBPlayerPvpData::kCapturenumFieldNumber;
const int PBPlayerPvpData::kKillnumFieldNumber;
const int PBPlayerPvpData::kAssistnumFieldNumber;
const int PBPlayerPvpData::kDeadnumFieldNumber;
const int PBPlayerPvpData::kMegakillFieldNumber;
const int PBPlayerPvpData::kGodlikeFieldNumber;
const int PBPlayerPvpData::kMvpnumFieldNumber;
const int PBPlayerPvpData::kExitreadycountFieldNumber;
const int PBPlayerPvpData::kNextentertimeFieldNumber;
#endif  // !_MSC_VER

PBPlayerPvpData::PBPlayerPvpData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerPvpData::InitAsDefaultInstance() {
}

PBPlayerPvpData::PBPlayerPvpData(const PBPlayerPvpData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerPvpData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  entercount_ = 0u;
  winnum_ = 0u;
  failnum_ = 0u;
  capturenum_ = 0u;
  killnum_ = 0u;
  assistnum_ = 0u;
  deadnum_ = 0u;
  megakill_ = 0u;
  godlike_ = 0u;
  mvpnum_ = 0u;
  exitreadycount_ = 0u;
  nextentertime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerPvpData::~PBPlayerPvpData() {
  SharedDtor();
}

void PBPlayerPvpData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerPvpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerPvpData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerPvpData_descriptor_;
}

const PBPlayerPvpData& PBPlayerPvpData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerPvpData* PBPlayerPvpData::default_instance_ = NULL;

PBPlayerPvpData* PBPlayerPvpData::New() const {
  return new PBPlayerPvpData;
}

void PBPlayerPvpData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    entercount_ = 0u;
    winnum_ = 0u;
    failnum_ = 0u;
    capturenum_ = 0u;
    killnum_ = 0u;
    assistnum_ = 0u;
    deadnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    megakill_ = 0u;
    godlike_ = 0u;
    mvpnum_ = 0u;
    exitreadycount_ = 0u;
    nextentertime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerPvpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entercount;
        break;
      }
      
      // optional uint32 entercount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entercount_)));
          set_has_entercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winnum;
        break;
      }
      
      // optional uint32 winnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_failnum;
        break;
      }
      
      // optional uint32 failnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &failnum_)));
          set_has_failnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_capturenum;
        break;
      }
      
      // optional uint32 capturenum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capturenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capturenum_)));
          set_has_capturenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_killnum;
        break;
      }
      
      // optional uint32 killnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_assistnum;
        break;
      }
      
      // optional uint32 assistnum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assistnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assistnum_)));
          set_has_assistnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_deadnum;
        break;
      }
      
      // optional uint32 deadnum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadnum_)));
          set_has_deadnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_megakill;
        break;
      }
      
      // optional uint32 megakill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_megakill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &megakill_)));
          set_has_megakill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_godlike;
        break;
      }
      
      // optional uint32 godlike = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godlike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &godlike_)));
          set_has_godlike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mvpnum;
        break;
      }
      
      // optional uint32 mvpnum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mvpnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mvpnum_)));
          set_has_mvpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_exitreadycount;
        break;
      }
      
      // optional uint32 exitreadycount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exitreadycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exitreadycount_)));
          set_has_exitreadycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_nextentertime;
        break;
      }
      
      // optional uint32 nextentertime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextentertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextentertime_)));
          set_has_nextentertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerPvpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 entercount = 2;
  if (has_entercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entercount(), output);
  }
  
  // optional uint32 winnum = 3;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->winnum(), output);
  }
  
  // optional uint32 failnum = 4;
  if (has_failnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->failnum(), output);
  }
  
  // optional uint32 capturenum = 5;
  if (has_capturenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->capturenum(), output);
  }
  
  // optional uint32 killnum = 6;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->killnum(), output);
  }
  
  // optional uint32 assistnum = 7;
  if (has_assistnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->assistnum(), output);
  }
  
  // optional uint32 deadnum = 8;
  if (has_deadnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->deadnum(), output);
  }
  
  // optional uint32 megakill = 9;
  if (has_megakill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->megakill(), output);
  }
  
  // optional uint32 godlike = 10;
  if (has_godlike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->godlike(), output);
  }
  
  // optional uint32 mvpnum = 11;
  if (has_mvpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mvpnum(), output);
  }
  
  // optional uint32 exitreadycount = 12;
  if (has_exitreadycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->exitreadycount(), output);
  }
  
  // optional uint32 nextentertime = 13;
  if (has_nextentertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->nextentertime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerPvpData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 entercount = 2;
  if (has_entercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entercount(), target);
  }
  
  // optional uint32 winnum = 3;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->winnum(), target);
  }
  
  // optional uint32 failnum = 4;
  if (has_failnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->failnum(), target);
  }
  
  // optional uint32 capturenum = 5;
  if (has_capturenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->capturenum(), target);
  }
  
  // optional uint32 killnum = 6;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->killnum(), target);
  }
  
  // optional uint32 assistnum = 7;
  if (has_assistnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->assistnum(), target);
  }
  
  // optional uint32 deadnum = 8;
  if (has_deadnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->deadnum(), target);
  }
  
  // optional uint32 megakill = 9;
  if (has_megakill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->megakill(), target);
  }
  
  // optional uint32 godlike = 10;
  if (has_godlike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->godlike(), target);
  }
  
  // optional uint32 mvpnum = 11;
  if (has_mvpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mvpnum(), target);
  }
  
  // optional uint32 exitreadycount = 12;
  if (has_exitreadycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->exitreadycount(), target);
  }
  
  // optional uint32 nextentertime = 13;
  if (has_nextentertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->nextentertime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerPvpData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 entercount = 2;
    if (has_entercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entercount());
    }
    
    // optional uint32 winnum = 3;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnum());
    }
    
    // optional uint32 failnum = 4;
    if (has_failnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->failnum());
    }
    
    // optional uint32 capturenum = 5;
    if (has_capturenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capturenum());
    }
    
    // optional uint32 killnum = 6;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }
    
    // optional uint32 assistnum = 7;
    if (has_assistnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assistnum());
    }
    
    // optional uint32 deadnum = 8;
    if (has_deadnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadnum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 megakill = 9;
    if (has_megakill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->megakill());
    }
    
    // optional uint32 godlike = 10;
    if (has_godlike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->godlike());
    }
    
    // optional uint32 mvpnum = 11;
    if (has_mvpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mvpnum());
    }
    
    // optional uint32 exitreadycount = 12;
    if (has_exitreadycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exitreadycount());
    }
    
    // optional uint32 nextentertime = 13;
    if (has_nextentertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextentertime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerPvpData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerPvpData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerPvpData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerPvpData::MergeFrom(const PBPlayerPvpData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_entercount()) {
      set_entercount(from.entercount());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_failnum()) {
      set_failnum(from.failnum());
    }
    if (from.has_capturenum()) {
      set_capturenum(from.capturenum());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_assistnum()) {
      set_assistnum(from.assistnum());
    }
    if (from.has_deadnum()) {
      set_deadnum(from.deadnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_megakill()) {
      set_megakill(from.megakill());
    }
    if (from.has_godlike()) {
      set_godlike(from.godlike());
    }
    if (from.has_mvpnum()) {
      set_mvpnum(from.mvpnum());
    }
    if (from.has_exitreadycount()) {
      set_exitreadycount(from.exitreadycount());
    }
    if (from.has_nextentertime()) {
      set_nextentertime(from.nextentertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerPvpData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerPvpData::CopyFrom(const PBPlayerPvpData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerPvpData::IsInitialized() const {
  
  return true;
}

void PBPlayerPvpData::Swap(PBPlayerPvpData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(entercount_, other->entercount_);
    std::swap(winnum_, other->winnum_);
    std::swap(failnum_, other->failnum_);
    std::swap(capturenum_, other->capturenum_);
    std::swap(killnum_, other->killnum_);
    std::swap(assistnum_, other->assistnum_);
    std::swap(deadnum_, other->deadnum_);
    std::swap(megakill_, other->megakill_);
    std::swap(godlike_, other->godlike_);
    std::swap(mvpnum_, other->mvpnum_);
    std::swap(exitreadycount_, other->exitreadycount_);
    std::swap(nextentertime_, other->nextentertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerPvpData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerPvpData_descriptor_;
  metadata.reflection = PBPlayerPvpData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerPvp::kPvpdataFieldNumber;
#endif  // !_MSC_VER

PBPlayerPvp::PBPlayerPvp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerPvp::InitAsDefaultInstance() {
}

PBPlayerPvp::PBPlayerPvp(const PBPlayerPvp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerPvp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerPvp::~PBPlayerPvp() {
  SharedDtor();
}

void PBPlayerPvp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerPvp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerPvp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerPvp_descriptor_;
}

const PBPlayerPvp& PBPlayerPvp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerPvp* PBPlayerPvp::default_instance_ = NULL;

PBPlayerPvp* PBPlayerPvp::New() const {
  return new PBPlayerPvp;
}

void PBPlayerPvp::Clear() {
  pvpdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerPvp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBPlayerPvpData pvpdata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvpdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pvpdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pvpdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerPvp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBPlayerPvpData pvpdata = 1;
  for (int i = 0; i < this->pvpdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pvpdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerPvp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBPlayerPvpData pvpdata = 1;
  for (int i = 0; i < this->pvpdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pvpdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerPvp::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBPlayerPvpData pvpdata = 1;
  total_size += 1 * this->pvpdata_size();
  for (int i = 0; i < this->pvpdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pvpdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerPvp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerPvp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerPvp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerPvp::MergeFrom(const PBPlayerPvp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pvpdata_.MergeFrom(from.pvpdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerPvp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerPvp::CopyFrom(const PBPlayerPvp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerPvp::IsInitialized() const {
  
  return true;
}

void PBPlayerPvp::Swap(PBPlayerPvp* other) {
  if (other != this) {
    pvpdata_.Swap(&other->pvpdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerPvp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerPvp_descriptor_;
  metadata.reflection = PBPlayerPvp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerLoginWealData::kIdFieldNumber;
const int PBPlayerLoginWealData::kPrizedayFieldNumber;
const int PBPlayerLoginWealData::kPrizetimeFieldNumber;
#endif  // !_MSC_VER

PBPlayerLoginWealData::PBPlayerLoginWealData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerLoginWealData::InitAsDefaultInstance() {
}

PBPlayerLoginWealData::PBPlayerLoginWealData(const PBPlayerLoginWealData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerLoginWealData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  prizeday_ = 0u;
  prizetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerLoginWealData::~PBPlayerLoginWealData() {
  SharedDtor();
}

void PBPlayerLoginWealData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerLoginWealData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerLoginWealData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerLoginWealData_descriptor_;
}

const PBPlayerLoginWealData& PBPlayerLoginWealData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerLoginWealData* PBPlayerLoginWealData::default_instance_ = NULL;

PBPlayerLoginWealData* PBPlayerLoginWealData::New() const {
  return new PBPlayerLoginWealData;
}

void PBPlayerLoginWealData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    prizeday_ = 0u;
    prizetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerLoginWealData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prizeday;
        break;
      }
      
      // optional uint32 prizeday = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizeday_)));
          set_has_prizeday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prizetime;
        break;
      }
      
      // optional uint32 prizetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizetime_)));
          set_has_prizetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerLoginWealData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 prizeday = 2;
  if (has_prizeday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prizeday(), output);
  }
  
  // optional uint32 prizetime = 3;
  if (has_prizetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prizetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerLoginWealData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 prizeday = 2;
  if (has_prizeday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prizeday(), target);
  }
  
  // optional uint32 prizetime = 3;
  if (has_prizetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prizetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerLoginWealData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 prizeday = 2;
    if (has_prizeday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizeday());
    }
    
    // optional uint32 prizetime = 3;
    if (has_prizetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerLoginWealData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerLoginWealData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerLoginWealData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerLoginWealData::MergeFrom(const PBPlayerLoginWealData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_prizeday()) {
      set_prizeday(from.prizeday());
    }
    if (from.has_prizetime()) {
      set_prizetime(from.prizetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerLoginWealData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerLoginWealData::CopyFrom(const PBPlayerLoginWealData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerLoginWealData::IsInitialized() const {
  
  return true;
}

void PBPlayerLoginWealData::Swap(PBPlayerLoginWealData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(prizeday_, other->prizeday_);
    std::swap(prizetime_, other->prizetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerLoginWealData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerLoginWealData_descriptor_;
  metadata.reflection = PBPlayerLoginWealData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerWeal::kLogindataFieldNumber;
#endif  // !_MSC_VER

PBPlayerWeal::PBPlayerWeal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerWeal::InitAsDefaultInstance() {
}

PBPlayerWeal::PBPlayerWeal(const PBPlayerWeal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerWeal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerWeal::~PBPlayerWeal() {
  SharedDtor();
}

void PBPlayerWeal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerWeal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerWeal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerWeal_descriptor_;
}

const PBPlayerWeal& PBPlayerWeal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerWeal* PBPlayerWeal::default_instance_ = NULL;

PBPlayerWeal* PBPlayerWeal::New() const {
  return new PBPlayerWeal;
}

void PBPlayerWeal::Clear() {
  logindata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerWeal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBPlayerLoginWealData logindata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logindata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logindata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logindata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerWeal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBPlayerLoginWealData logindata = 1;
  for (int i = 0; i < this->logindata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logindata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerWeal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBPlayerLoginWealData logindata = 1;
  for (int i = 0; i < this->logindata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logindata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerWeal::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBPlayerLoginWealData logindata = 1;
  total_size += 1 * this->logindata_size();
  for (int i = 0; i < this->logindata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logindata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerWeal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerWeal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerWeal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerWeal::MergeFrom(const PBPlayerWeal& from) {
  GOOGLE_CHECK_NE(&from, this);
  logindata_.MergeFrom(from.logindata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerWeal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerWeal::CopyFrom(const PBPlayerWeal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerWeal::IsInitialized() const {
  
  return true;
}

void PBPlayerWeal::Swap(PBPlayerWeal* other) {
  if (other != this) {
    logindata_.Swap(&other->logindata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerWeal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerWeal_descriptor_;
  metadata.reflection = PBPlayerWeal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSinglePvpRecord::kDisplayFieldNumber;
const int PBSinglePvpRecord::kScoreFieldNumber;
const int PBSinglePvpRecord::kResultFieldNumber;
#endif  // !_MSC_VER

PBSinglePvpRecord::PBSinglePvpRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSinglePvpRecord::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBSinglePvpRecord::PBSinglePvpRecord(const PBSinglePvpRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSinglePvpRecord::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  score_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSinglePvpRecord::~PBSinglePvpRecord() {
  SharedDtor();
}

void PBSinglePvpRecord::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBSinglePvpRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSinglePvpRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSinglePvpRecord_descriptor_;
}

const PBSinglePvpRecord& PBSinglePvpRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBSinglePvpRecord* PBSinglePvpRecord::default_instance_ = NULL;

PBSinglePvpRecord* PBSinglePvpRecord::New() const {
  return new PBSinglePvpRecord;
}

void PBSinglePvpRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    score_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSinglePvpRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSinglePvpRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }
  
  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSinglePvpRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }
  
  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSinglePvpRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSinglePvpRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSinglePvpRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSinglePvpRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSinglePvpRecord::MergeFrom(const PBSinglePvpRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSinglePvpRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSinglePvpRecord::CopyFrom(const PBSinglePvpRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSinglePvpRecord::IsInitialized() const {
  
  return true;
}

void PBSinglePvpRecord::Swap(PBSinglePvpRecord* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(score_, other->score_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSinglePvpRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSinglePvpRecord_descriptor_;
  metadata.reflection = PBSinglePvpRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerSinglePvp::kDayentercountFieldNumber;
const int PBPlayerSinglePvp::kWincountFieldNumber;
const int PBPlayerSinglePvp::kFailcountFieldNumber;
const int PBPlayerSinglePvp::kEqualcountFieldNumber;
const int PBPlayerSinglePvp::kScoreFieldNumber;
const int PBPlayerSinglePvp::kMaxscoreFieldNumber;
const int PBPlayerSinglePvp::kFirstprizeidFieldNumber;
const int PBPlayerSinglePvp::kDayprizeFieldNumber;
const int PBPlayerSinglePvp::kRecordFieldNumber;
const int PBPlayerSinglePvp::kWeekcountFieldNumber;
#endif  // !_MSC_VER

PBPlayerSinglePvp::PBPlayerSinglePvp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerSinglePvp::InitAsDefaultInstance() {
}

PBPlayerSinglePvp::PBPlayerSinglePvp(const PBPlayerSinglePvp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerSinglePvp::SharedCtor() {
  _cached_size_ = 0;
  dayentercount_ = 0u;
  wincount_ = 0u;
  failcount_ = 0u;
  equalcount_ = 0u;
  score_ = 0u;
  maxscore_ = 0u;
  weekcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerSinglePvp::~PBPlayerSinglePvp() {
  SharedDtor();
}

void PBPlayerSinglePvp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerSinglePvp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerSinglePvp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerSinglePvp_descriptor_;
}

const PBPlayerSinglePvp& PBPlayerSinglePvp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerSinglePvp* PBPlayerSinglePvp::default_instance_ = NULL;

PBPlayerSinglePvp* PBPlayerSinglePvp::New() const {
  return new PBPlayerSinglePvp;
}

void PBPlayerSinglePvp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dayentercount_ = 0u;
    wincount_ = 0u;
    failcount_ = 0u;
    equalcount_ = 0u;
    score_ = 0u;
    maxscore_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    weekcount_ = 0u;
  }
  firstprizeid_.Clear();
  dayprize_.Clear();
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerSinglePvp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dayentercount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayentercount_)));
          set_has_dayentercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wincount;
        break;
      }
      
      // optional uint32 wincount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wincount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_failcount;
        break;
      }
      
      // optional uint32 failcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &failcount_)));
          set_has_failcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_equalcount;
        break;
      }
      
      // optional uint32 equalcount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equalcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equalcount_)));
          set_has_equalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maxscore;
        break;
      }
      
      // optional uint32 maxscore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxscore_)));
          set_has_maxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_firstprizeid;
        break;
      }
      
      // repeated uint32 firstprizeid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstprizeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_firstprizeid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_firstprizeid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_firstprizeid;
        if (input->ExpectTag(64)) goto parse_dayprize;
        break;
      }
      
      // repeated uint32 dayprize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayprize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_dayprize())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dayprize())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dayprize;
        if (input->ExpectTag(74)) goto parse_record;
        break;
      }
      
      // repeated .PBSinglePvpRecord record = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_record;
        if (input->ExpectTag(80)) goto parse_weekcount;
        break;
      }
      
      // optional uint32 weekcount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekcount_)));
          set_has_weekcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerSinglePvp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dayentercount = 1;
  if (has_dayentercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dayentercount(), output);
  }
  
  // optional uint32 wincount = 2;
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wincount(), output);
  }
  
  // optional uint32 failcount = 3;
  if (has_failcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->failcount(), output);
  }
  
  // optional uint32 equalcount = 4;
  if (has_equalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->equalcount(), output);
  }
  
  // optional uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }
  
  // optional uint32 maxscore = 6;
  if (has_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maxscore(), output);
  }
  
  // repeated uint32 firstprizeid = 7;
  for (int i = 0; i < this->firstprizeid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->firstprizeid(i), output);
  }
  
  // repeated uint32 dayprize = 8;
  for (int i = 0; i < this->dayprize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->dayprize(i), output);
  }
  
  // repeated .PBSinglePvpRecord record = 9;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->record(i), output);
  }
  
  // optional uint32 weekcount = 10;
  if (has_weekcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->weekcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerSinglePvp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dayentercount = 1;
  if (has_dayentercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dayentercount(), target);
  }
  
  // optional uint32 wincount = 2;
  if (has_wincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wincount(), target);
  }
  
  // optional uint32 failcount = 3;
  if (has_failcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->failcount(), target);
  }
  
  // optional uint32 equalcount = 4;
  if (has_equalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->equalcount(), target);
  }
  
  // optional uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }
  
  // optional uint32 maxscore = 6;
  if (has_maxscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->maxscore(), target);
  }
  
  // repeated uint32 firstprizeid = 7;
  for (int i = 0; i < this->firstprizeid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->firstprizeid(i), target);
  }
  
  // repeated uint32 dayprize = 8;
  for (int i = 0; i < this->dayprize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->dayprize(i), target);
  }
  
  // repeated .PBSinglePvpRecord record = 9;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->record(i), target);
  }
  
  // optional uint32 weekcount = 10;
  if (has_weekcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->weekcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerSinglePvp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dayentercount = 1;
    if (has_dayentercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayentercount());
    }
    
    // optional uint32 wincount = 2;
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wincount());
    }
    
    // optional uint32 failcount = 3;
    if (has_failcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->failcount());
    }
    
    // optional uint32 equalcount = 4;
    if (has_equalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equalcount());
    }
    
    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
    // optional uint32 maxscore = 6;
    if (has_maxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxscore());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 weekcount = 10;
    if (has_weekcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekcount());
    }
    
  }
  // repeated uint32 firstprizeid = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->firstprizeid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->firstprizeid(i));
    }
    total_size += 1 * this->firstprizeid_size() + data_size;
  }
  
  // repeated uint32 dayprize = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->dayprize_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dayprize(i));
    }
    total_size += 1 * this->dayprize_size() + data_size;
  }
  
  // repeated .PBSinglePvpRecord record = 9;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerSinglePvp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerSinglePvp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerSinglePvp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerSinglePvp::MergeFrom(const PBPlayerSinglePvp& from) {
  GOOGLE_CHECK_NE(&from, this);
  firstprizeid_.MergeFrom(from.firstprizeid_);
  dayprize_.MergeFrom(from.dayprize_);
  record_.MergeFrom(from.record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dayentercount()) {
      set_dayentercount(from.dayentercount());
    }
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
    if (from.has_failcount()) {
      set_failcount(from.failcount());
    }
    if (from.has_equalcount()) {
      set_equalcount(from.equalcount());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_maxscore()) {
      set_maxscore(from.maxscore());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_weekcount()) {
      set_weekcount(from.weekcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerSinglePvp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerSinglePvp::CopyFrom(const PBPlayerSinglePvp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerSinglePvp::IsInitialized() const {
  
  return true;
}

void PBPlayerSinglePvp::Swap(PBPlayerSinglePvp* other) {
  if (other != this) {
    std::swap(dayentercount_, other->dayentercount_);
    std::swap(wincount_, other->wincount_);
    std::swap(failcount_, other->failcount_);
    std::swap(equalcount_, other->equalcount_);
    std::swap(score_, other->score_);
    std::swap(maxscore_, other->maxscore_);
    firstprizeid_.Swap(&other->firstprizeid_);
    dayprize_.Swap(&other->dayprize_);
    record_.Swap(&other->record_);
    std::swap(weekcount_, other->weekcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerSinglePvp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerSinglePvp_descriptor_;
  metadata.reflection = PBPlayerSinglePvp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerCommon::kStrongeridFieldNumber;
#endif  // !_MSC_VER

PBPlayerCommon::PBPlayerCommon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerCommon::InitAsDefaultInstance() {
}

PBPlayerCommon::PBPlayerCommon(const PBPlayerCommon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerCommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerCommon::~PBPlayerCommon() {
  SharedDtor();
}

void PBPlayerCommon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerCommon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerCommon_descriptor_;
}

const PBPlayerCommon& PBPlayerCommon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerCommon* PBPlayerCommon::default_instance_ = NULL;

PBPlayerCommon* PBPlayerCommon::New() const {
  return new PBPlayerCommon;
}

void PBPlayerCommon::Clear() {
  strongerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 strongerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strongerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_strongerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_strongerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_strongerid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 strongerid = 1;
  for (int i = 0; i < this->strongerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->strongerid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerCommon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 strongerid = 1;
  for (int i = 0; i < this->strongerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->strongerid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerCommon::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 strongerid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->strongerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->strongerid(i));
    }
    total_size += 1 * this->strongerid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerCommon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerCommon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerCommon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerCommon::MergeFrom(const PBPlayerCommon& from) {
  GOOGLE_CHECK_NE(&from, this);
  strongerid_.MergeFrom(from.strongerid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerCommon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerCommon::CopyFrom(const PBPlayerCommon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerCommon::IsInitialized() const {
  
  return true;
}

void PBPlayerCommon::Swap(PBPlayerCommon* other) {
  if (other != this) {
    strongerid_.Swap(&other->strongerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerCommon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerCommon_descriptor_;
  metadata.reflection = PBPlayerCommon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerManor::kEnterbattlefieldtimeFieldNumber;
#endif  // !_MSC_VER

PBPlayerManor::PBPlayerManor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerManor::InitAsDefaultInstance() {
}

PBPlayerManor::PBPlayerManor(const PBPlayerManor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerManor::SharedCtor() {
  _cached_size_ = 0;
  enterbattlefieldtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerManor::~PBPlayerManor() {
  SharedDtor();
}

void PBPlayerManor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerManor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerManor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerManor_descriptor_;
}

const PBPlayerManor& PBPlayerManor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerManor* PBPlayerManor::default_instance_ = NULL;

PBPlayerManor* PBPlayerManor::New() const {
  return new PBPlayerManor;
}

void PBPlayerManor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enterbattlefieldtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerManor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 enterbattlefieldtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enterbattlefieldtime_)));
          set_has_enterbattlefieldtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerManor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 enterbattlefieldtime = 1;
  if (has_enterbattlefieldtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enterbattlefieldtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerManor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 enterbattlefieldtime = 1;
  if (has_enterbattlefieldtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enterbattlefieldtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerManor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 enterbattlefieldtime = 1;
    if (has_enterbattlefieldtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enterbattlefieldtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerManor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerManor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerManor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerManor::MergeFrom(const PBPlayerManor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enterbattlefieldtime()) {
      set_enterbattlefieldtime(from.enterbattlefieldtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerManor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerManor::CopyFrom(const PBPlayerManor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerManor::IsInitialized() const {
  
  return true;
}

void PBPlayerManor::Swap(PBPlayerManor* other) {
  if (other != this) {
    std::swap(enterbattlefieldtime_, other->enterbattlefieldtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerManor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerManor_descriptor_;
  metadata.reflection = PBPlayerManor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerSystem::kSaveorderFieldNumber;
const int PBPlayerSystem::kCoolingFieldNumber;
const int PBPlayerSystem::kSkillFieldNumber;
const int PBPlayerSystem::kBuffFieldNumber;
const int PBPlayerSystem::kCounterFieldNumber;
const int PBPlayerSystem::kPrizeFieldNumber;
const int PBPlayerSystem::kTradeFieldNumber;
const int PBPlayerSystem::kPlayerStoreFieldNumber;
const int PBPlayerSystem::kWealFieldNumber;
const int PBPlayerSystem::kPlayerWulueFieldNumber;
const int PBPlayerSystem::kWentaoFieldNumber;
const int PBPlayerSystem::kCopymapFieldNumber;
const int PBPlayerSystem::kIdentityFieldNumber;
const int PBPlayerSystem::kSystemSwitchFieldNumber;
const int PBPlayerSystem::kConlletionFieldNumber;
const int PBPlayerSystem::kWuxueFieldNumber;
const int PBPlayerSystem::kDartFieldNumber;
const int PBPlayerSystem::kFactionbossFieldNumber;
const int PBPlayerSystem::kTitleFieldNumber;
const int PBPlayerSystem::kDazuoguajiFieldNumber;
const int PBPlayerSystem::kFashionFieldNumber;
const int PBPlayerSystem::kEquipColumnFieldNumber;
const int PBPlayerSystem::kClimbTowerFieldNumber;
const int PBPlayerSystem::kPvpFieldNumber;
const int PBPlayerSystem::kGwTrainFieldNumber;
const int PBPlayerSystem::kActivityFieldNumber;
const int PBPlayerSystem::kReliveFieldNumber;
const int PBPlayerSystem::kSinglepvpFieldNumber;
const int PBPlayerSystem::kCommonFieldNumber;
const int PBPlayerSystem::kManorFieldNumber;
#endif  // !_MSC_VER

PBPlayerSystem::PBPlayerSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerSystem::InitAsDefaultInstance() {
  cooling_ = const_cast< ::PBCooling*>(&::PBCooling::default_instance());
  skill_ = const_cast< ::PBSystemSkill*>(&::PBSystemSkill::default_instance());
  buff_ = const_cast< ::PBSystemBuff*>(&::PBSystemBuff::default_instance());
  counter_ = const_cast< ::PBSystemCounter*>(&::PBSystemCounter::default_instance());
  prize_ = const_cast< ::PBPlayerPrize*>(&::PBPlayerPrize::default_instance());
  trade_ = const_cast< ::PBPlayerTrade*>(&::PBPlayerTrade::default_instance());
  playerstore_ = const_cast< ::PBPlayerStore*>(&::PBPlayerStore::default_instance());
  weal_ = const_cast< ::PBPlayerWeal*>(&::PBPlayerWeal::default_instance());
  playerwulue_ = const_cast< ::PBPlayerWulue*>(&::PBPlayerWulue::default_instance());
  wentao_ = const_cast< ::PBPlayerWenTao*>(&::PBPlayerWenTao::default_instance());
  copymap_ = const_cast< ::PBPlayerCopymap*>(&::PBPlayerCopymap::default_instance());
  identity_ = const_cast< ::PBPlayerIdentity*>(&::PBPlayerIdentity::default_instance());
  systemswitch_ = const_cast< ::PBSystemSwitch*>(&::PBSystemSwitch::default_instance());
  conlletion_ = const_cast< ::PBPlayerColletion*>(&::PBPlayerColletion::default_instance());
  wuxue_ = const_cast< ::PBPlayerWuxue*>(&::PBPlayerWuxue::default_instance());
  dart_ = const_cast< ::PBPlayerDart*>(&::PBPlayerDart::default_instance());
  factionboss_ = const_cast< ::PBPlayerFactionBoss*>(&::PBPlayerFactionBoss::default_instance());
  title_ = const_cast< ::PBPlayerTitle*>(&::PBPlayerTitle::default_instance());
  dazuoguaji_ = const_cast< ::PBPlayerDazuoguaji*>(&::PBPlayerDazuoguaji::default_instance());
  fashion_ = const_cast< ::PBPlayerFashion*>(&::PBPlayerFashion::default_instance());
  equipcolumn_ = const_cast< ::PBPlayerEquipColumn*>(&::PBPlayerEquipColumn::default_instance());
  climbtower_ = const_cast< ::PBPlayerClimbTower*>(&::PBPlayerClimbTower::default_instance());
  pvp_ = const_cast< ::PBPlayerPvp*>(&::PBPlayerPvp::default_instance());
  gwtrain_ = const_cast< ::PBPlayerGreatWallTrain*>(&::PBPlayerGreatWallTrain::default_instance());
  activity_ = const_cast< ::PBPlayerActivity*>(&::PBPlayerActivity::default_instance());
  relive_ = const_cast< ::PBLlayerRelive*>(&::PBLlayerRelive::default_instance());
  singlepvp_ = const_cast< ::PBPlayerSinglePvp*>(&::PBPlayerSinglePvp::default_instance());
  common_ = const_cast< ::PBPlayerCommon*>(&::PBPlayerCommon::default_instance());
  manor_ = const_cast< ::PBPlayerManor*>(&::PBPlayerManor::default_instance());
}

PBPlayerSystem::PBPlayerSystem(const PBPlayerSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerSystem::SharedCtor() {
  _cached_size_ = 0;
  saveorder_ = 0u;
  cooling_ = NULL;
  skill_ = NULL;
  buff_ = NULL;
  counter_ = NULL;
  prize_ = NULL;
  trade_ = NULL;
  playerstore_ = NULL;
  weal_ = NULL;
  playerwulue_ = NULL;
  wentao_ = NULL;
  copymap_ = NULL;
  identity_ = NULL;
  systemswitch_ = NULL;
  conlletion_ = NULL;
  wuxue_ = NULL;
  dart_ = NULL;
  factionboss_ = NULL;
  title_ = NULL;
  dazuoguaji_ = NULL;
  fashion_ = NULL;
  equipcolumn_ = NULL;
  climbtower_ = NULL;
  pvp_ = NULL;
  gwtrain_ = NULL;
  activity_ = NULL;
  relive_ = NULL;
  singlepvp_ = NULL;
  common_ = NULL;
  manor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerSystem::~PBPlayerSystem() {
  SharedDtor();
}

void PBPlayerSystem::SharedDtor() {
  if (this != default_instance_) {
    delete cooling_;
    delete skill_;
    delete buff_;
    delete counter_;
    delete prize_;
    delete trade_;
    delete playerstore_;
    delete weal_;
    delete playerwulue_;
    delete wentao_;
    delete copymap_;
    delete identity_;
    delete systemswitch_;
    delete conlletion_;
    delete wuxue_;
    delete dart_;
    delete factionboss_;
    delete title_;
    delete dazuoguaji_;
    delete fashion_;
    delete equipcolumn_;
    delete climbtower_;
    delete pvp_;
    delete gwtrain_;
    delete activity_;
    delete relive_;
    delete singlepvp_;
    delete common_;
    delete manor_;
  }
}

void PBPlayerSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerSystem_descriptor_;
}

const PBPlayerSystem& PBPlayerSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerSystem* PBPlayerSystem::default_instance_ = NULL;

PBPlayerSystem* PBPlayerSystem::New() const {
  return new PBPlayerSystem;
}

void PBPlayerSystem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveorder_ = 0u;
    if (has_cooling()) {
      if (cooling_ != NULL) cooling_->::PBCooling::Clear();
    }
    if (has_skill()) {
      if (skill_ != NULL) skill_->::PBSystemSkill::Clear();
    }
    if (has_buff()) {
      if (buff_ != NULL) buff_->::PBSystemBuff::Clear();
    }
    if (has_counter()) {
      if (counter_ != NULL) counter_->::PBSystemCounter::Clear();
    }
    if (has_prize()) {
      if (prize_ != NULL) prize_->::PBPlayerPrize::Clear();
    }
    if (has_trade()) {
      if (trade_ != NULL) trade_->::PBPlayerTrade::Clear();
    }
    if (has_playerstore()) {
      if (playerstore_ != NULL) playerstore_->::PBPlayerStore::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_weal()) {
      if (weal_ != NULL) weal_->::PBPlayerWeal::Clear();
    }
    if (has_playerwulue()) {
      if (playerwulue_ != NULL) playerwulue_->::PBPlayerWulue::Clear();
    }
    if (has_wentao()) {
      if (wentao_ != NULL) wentao_->::PBPlayerWenTao::Clear();
    }
    if (has_copymap()) {
      if (copymap_ != NULL) copymap_->::PBPlayerCopymap::Clear();
    }
    if (has_identity()) {
      if (identity_ != NULL) identity_->::PBPlayerIdentity::Clear();
    }
    if (has_systemswitch()) {
      if (systemswitch_ != NULL) systemswitch_->::PBSystemSwitch::Clear();
    }
    if (has_conlletion()) {
      if (conlletion_ != NULL) conlletion_->::PBPlayerColletion::Clear();
    }
    if (has_wuxue()) {
      if (wuxue_ != NULL) wuxue_->::PBPlayerWuxue::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_dart()) {
      if (dart_ != NULL) dart_->::PBPlayerDart::Clear();
    }
    if (has_factionboss()) {
      if (factionboss_ != NULL) factionboss_->::PBPlayerFactionBoss::Clear();
    }
    if (has_title()) {
      if (title_ != NULL) title_->::PBPlayerTitle::Clear();
    }
    if (has_dazuoguaji()) {
      if (dazuoguaji_ != NULL) dazuoguaji_->::PBPlayerDazuoguaji::Clear();
    }
    if (has_fashion()) {
      if (fashion_ != NULL) fashion_->::PBPlayerFashion::Clear();
    }
    if (has_equipcolumn()) {
      if (equipcolumn_ != NULL) equipcolumn_->::PBPlayerEquipColumn::Clear();
    }
    if (has_climbtower()) {
      if (climbtower_ != NULL) climbtower_->::PBPlayerClimbTower::Clear();
    }
    if (has_pvp()) {
      if (pvp_ != NULL) pvp_->::PBPlayerPvp::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_gwtrain()) {
      if (gwtrain_ != NULL) gwtrain_->::PBPlayerGreatWallTrain::Clear();
    }
    if (has_activity()) {
      if (activity_ != NULL) activity_->::PBPlayerActivity::Clear();
    }
    if (has_relive()) {
      if (relive_ != NULL) relive_->::PBLlayerRelive::Clear();
    }
    if (has_singlepvp()) {
      if (singlepvp_ != NULL) singlepvp_->::PBPlayerSinglePvp::Clear();
    }
    if (has_common()) {
      if (common_ != NULL) common_->::PBPlayerCommon::Clear();
    }
    if (has_manor()) {
      if (manor_ != NULL) manor_->::PBPlayerManor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveorder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveorder_)));
          set_has_saveorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cooling;
        break;
      }
      
      // optional .PBCooling cooling = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cooling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cooling()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill;
        break;
      }
      
      // optional .PBSystemSkill skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_buff;
        break;
      }
      
      // optional .PBSystemBuff buff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_counter;
        break;
      }
      
      // optional .PBSystemCounter counter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_prize;
        break;
      }
      
      // optional .PBPlayerPrize prize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_trade;
        break;
      }
      
      // optional .PBPlayerTrade trade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_playerStore;
        break;
      }
      
      // optional .PBPlayerStore playerStore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerStore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerstore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_weal;
        break;
      }
      
      // optional .PBPlayerWeal weal = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_playerWulue;
        break;
      }
      
      // optional .PBPlayerWulue playerWulue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerWulue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerwulue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_wentao;
        break;
      }
      
      // optional .PBPlayerWenTao wentao = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wentao:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wentao()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_copymap;
        break;
      }
      
      // optional .PBPlayerCopymap copymap = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copymap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_copymap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_identity;
        break;
      }
      
      // optional .PBPlayerIdentity identity = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_identity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_systemSwitch;
        break;
      }
      
      // optional .PBSystemSwitch systemSwitch = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_systemSwitch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_systemswitch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_conlletion;
        break;
      }
      
      // optional .PBPlayerColletion conlletion = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conlletion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conlletion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_wuxue;
        break;
      }
      
      // optional .PBPlayerWuxue wuxue = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wuxue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wuxue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_dart;
        break;
      }
      
      // optional .PBPlayerDart dart = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dart()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_factionboss;
        break;
      }
      
      // optional .PBPlayerFactionBoss factionboss = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factionboss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_factionboss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_title;
        break;
      }
      
      // optional .PBPlayerTitle title = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_dazuoguaji;
        break;
      }
      
      // optional .PBPlayerDazuoguaji dazuoguaji = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dazuoguaji:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dazuoguaji()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_fashion;
        break;
      }
      
      // optional .PBPlayerFashion fashion = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_equipColumn;
        break;
      }
      
      // optional .PBPlayerEquipColumn equipColumn = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipColumn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipcolumn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_climbTower;
        break;
      }
      
      // optional .PBPlayerClimbTower climbTower = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_climbTower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_climbtower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_pvp;
        break;
      }
      
      // optional .PBPlayerPvp pvp = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_gwTrain;
        break;
      }
      
      // optional .PBPlayerGreatWallTrain gwTrain = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gwTrain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gwtrain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_activity;
        break;
      }
      
      // optional .PBPlayerActivity activity = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_relive;
        break;
      }
      
      // optional .PBLlayerRelive relive = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_singlepvp;
        break;
      }
      
      // optional .PBPlayerSinglePvp singlepvp = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_singlepvp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_singlepvp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_common;
        break;
      }
      
      // optional .PBPlayerCommon common = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_common:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_manor;
        break;
      }
      
      // optional .PBPlayerManor manor = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveorder(), output);
  }
  
  // optional .PBCooling cooling = 2;
  if (has_cooling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cooling(), output);
  }
  
  // optional .PBSystemSkill skill = 3;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill(), output);
  }
  
  // optional .PBSystemBuff buff = 4;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buff(), output);
  }
  
  // optional .PBSystemCounter counter = 5;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->counter(), output);
  }
  
  // optional .PBPlayerPrize prize = 6;
  if (has_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->prize(), output);
  }
  
  // optional .PBPlayerTrade trade = 7;
  if (has_trade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->trade(), output);
  }
  
  // optional .PBPlayerStore playerStore = 8;
  if (has_playerstore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->playerstore(), output);
  }
  
  // optional .PBPlayerWeal weal = 9;
  if (has_weal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->weal(), output);
  }
  
  // optional .PBPlayerWulue playerWulue = 10;
  if (has_playerwulue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->playerwulue(), output);
  }
  
  // optional .PBPlayerWenTao wentao = 11;
  if (has_wentao()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->wentao(), output);
  }
  
  // optional .PBPlayerCopymap copymap = 12;
  if (has_copymap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->copymap(), output);
  }
  
  // optional .PBPlayerIdentity identity = 13;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->identity(), output);
  }
  
  // optional .PBSystemSwitch systemSwitch = 14;
  if (has_systemswitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->systemswitch(), output);
  }
  
  // optional .PBPlayerColletion conlletion = 15;
  if (has_conlletion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->conlletion(), output);
  }
  
  // optional .PBPlayerWuxue wuxue = 16;
  if (has_wuxue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->wuxue(), output);
  }
  
  // optional .PBPlayerDart dart = 17;
  if (has_dart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->dart(), output);
  }
  
  // optional .PBPlayerFactionBoss factionboss = 18;
  if (has_factionboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->factionboss(), output);
  }
  
  // optional .PBPlayerTitle title = 19;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->title(), output);
  }
  
  // optional .PBPlayerDazuoguaji dazuoguaji = 20;
  if (has_dazuoguaji()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->dazuoguaji(), output);
  }
  
  // optional .PBPlayerFashion fashion = 21;
  if (has_fashion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->fashion(), output);
  }
  
  // optional .PBPlayerEquipColumn equipColumn = 22;
  if (has_equipcolumn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->equipcolumn(), output);
  }
  
  // optional .PBPlayerClimbTower climbTower = 23;
  if (has_climbtower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->climbtower(), output);
  }
  
  // optional .PBPlayerPvp pvp = 24;
  if (has_pvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->pvp(), output);
  }
  
  // optional .PBPlayerGreatWallTrain gwTrain = 25;
  if (has_gwtrain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->gwtrain(), output);
  }
  
  // optional .PBPlayerActivity activity = 26;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->activity(), output);
  }
  
  // optional .PBLlayerRelive relive = 27;
  if (has_relive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->relive(), output);
  }
  
  // optional .PBPlayerSinglePvp singlepvp = 28;
  if (has_singlepvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->singlepvp(), output);
  }
  
  // optional .PBPlayerCommon common = 29;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->common(), output);
  }
  
  // optional .PBPlayerManor manor = 30;
  if (has_manor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->manor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveorder(), target);
  }
  
  // optional .PBCooling cooling = 2;
  if (has_cooling()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cooling(), target);
  }
  
  // optional .PBSystemSkill skill = 3;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill(), target);
  }
  
  // optional .PBSystemBuff buff = 4;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buff(), target);
  }
  
  // optional .PBSystemCounter counter = 5;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->counter(), target);
  }
  
  // optional .PBPlayerPrize prize = 6;
  if (has_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->prize(), target);
  }
  
  // optional .PBPlayerTrade trade = 7;
  if (has_trade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->trade(), target);
  }
  
  // optional .PBPlayerStore playerStore = 8;
  if (has_playerstore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->playerstore(), target);
  }
  
  // optional .PBPlayerWeal weal = 9;
  if (has_weal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->weal(), target);
  }
  
  // optional .PBPlayerWulue playerWulue = 10;
  if (has_playerwulue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->playerwulue(), target);
  }
  
  // optional .PBPlayerWenTao wentao = 11;
  if (has_wentao()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->wentao(), target);
  }
  
  // optional .PBPlayerCopymap copymap = 12;
  if (has_copymap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->copymap(), target);
  }
  
  // optional .PBPlayerIdentity identity = 13;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->identity(), target);
  }
  
  // optional .PBSystemSwitch systemSwitch = 14;
  if (has_systemswitch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->systemswitch(), target);
  }
  
  // optional .PBPlayerColletion conlletion = 15;
  if (has_conlletion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->conlletion(), target);
  }
  
  // optional .PBPlayerWuxue wuxue = 16;
  if (has_wuxue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->wuxue(), target);
  }
  
  // optional .PBPlayerDart dart = 17;
  if (has_dart()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->dart(), target);
  }
  
  // optional .PBPlayerFactionBoss factionboss = 18;
  if (has_factionboss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->factionboss(), target);
  }
  
  // optional .PBPlayerTitle title = 19;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->title(), target);
  }
  
  // optional .PBPlayerDazuoguaji dazuoguaji = 20;
  if (has_dazuoguaji()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->dazuoguaji(), target);
  }
  
  // optional .PBPlayerFashion fashion = 21;
  if (has_fashion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->fashion(), target);
  }
  
  // optional .PBPlayerEquipColumn equipColumn = 22;
  if (has_equipcolumn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->equipcolumn(), target);
  }
  
  // optional .PBPlayerClimbTower climbTower = 23;
  if (has_climbtower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->climbtower(), target);
  }
  
  // optional .PBPlayerPvp pvp = 24;
  if (has_pvp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->pvp(), target);
  }
  
  // optional .PBPlayerGreatWallTrain gwTrain = 25;
  if (has_gwtrain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->gwtrain(), target);
  }
  
  // optional .PBPlayerActivity activity = 26;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->activity(), target);
  }
  
  // optional .PBLlayerRelive relive = 27;
  if (has_relive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->relive(), target);
  }
  
  // optional .PBPlayerSinglePvp singlepvp = 28;
  if (has_singlepvp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->singlepvp(), target);
  }
  
  // optional .PBPlayerCommon common = 29;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->common(), target);
  }
  
  // optional .PBPlayerManor manor = 30;
  if (has_manor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->manor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerSystem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveorder = 1;
    if (has_saveorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveorder());
    }
    
    // optional .PBCooling cooling = 2;
    if (has_cooling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cooling());
    }
    
    // optional .PBSystemSkill skill = 3;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }
    
    // optional .PBSystemBuff buff = 4;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }
    
    // optional .PBSystemCounter counter = 5;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counter());
    }
    
    // optional .PBPlayerPrize prize = 6;
    if (has_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prize());
    }
    
    // optional .PBPlayerTrade trade = 7;
    if (has_trade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trade());
    }
    
    // optional .PBPlayerStore playerStore = 8;
    if (has_playerstore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerstore());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBPlayerWeal weal = 9;
    if (has_weal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weal());
    }
    
    // optional .PBPlayerWulue playerWulue = 10;
    if (has_playerwulue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerwulue());
    }
    
    // optional .PBPlayerWenTao wentao = 11;
    if (has_wentao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wentao());
    }
    
    // optional .PBPlayerCopymap copymap = 12;
    if (has_copymap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->copymap());
    }
    
    // optional .PBPlayerIdentity identity = 13;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->identity());
    }
    
    // optional .PBSystemSwitch systemSwitch = 14;
    if (has_systemswitch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->systemswitch());
    }
    
    // optional .PBPlayerColletion conlletion = 15;
    if (has_conlletion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conlletion());
    }
    
    // optional .PBPlayerWuxue wuxue = 16;
    if (has_wuxue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wuxue());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PBPlayerDart dart = 17;
    if (has_dart()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dart());
    }
    
    // optional .PBPlayerFactionBoss factionboss = 18;
    if (has_factionboss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->factionboss());
    }
    
    // optional .PBPlayerTitle title = 19;
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }
    
    // optional .PBPlayerDazuoguaji dazuoguaji = 20;
    if (has_dazuoguaji()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dazuoguaji());
    }
    
    // optional .PBPlayerFashion fashion = 21;
    if (has_fashion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashion());
    }
    
    // optional .PBPlayerEquipColumn equipColumn = 22;
    if (has_equipcolumn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipcolumn());
    }
    
    // optional .PBPlayerClimbTower climbTower = 23;
    if (has_climbtower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->climbtower());
    }
    
    // optional .PBPlayerPvp pvp = 24;
    if (has_pvp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvp());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .PBPlayerGreatWallTrain gwTrain = 25;
    if (has_gwtrain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gwtrain());
    }
    
    // optional .PBPlayerActivity activity = 26;
    if (has_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }
    
    // optional .PBLlayerRelive relive = 27;
    if (has_relive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relive());
    }
    
    // optional .PBPlayerSinglePvp singlepvp = 28;
    if (has_singlepvp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singlepvp());
    }
    
    // optional .PBPlayerCommon common = 29;
    if (has_common()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
    // optional .PBPlayerManor manor = 30;
    if (has_manor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerSystem::MergeFrom(const PBPlayerSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveorder()) {
      set_saveorder(from.saveorder());
    }
    if (from.has_cooling()) {
      mutable_cooling()->::PBCooling::MergeFrom(from.cooling());
    }
    if (from.has_skill()) {
      mutable_skill()->::PBSystemSkill::MergeFrom(from.skill());
    }
    if (from.has_buff()) {
      mutable_buff()->::PBSystemBuff::MergeFrom(from.buff());
    }
    if (from.has_counter()) {
      mutable_counter()->::PBSystemCounter::MergeFrom(from.counter());
    }
    if (from.has_prize()) {
      mutable_prize()->::PBPlayerPrize::MergeFrom(from.prize());
    }
    if (from.has_trade()) {
      mutable_trade()->::PBPlayerTrade::MergeFrom(from.trade());
    }
    if (from.has_playerstore()) {
      mutable_playerstore()->::PBPlayerStore::MergeFrom(from.playerstore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_weal()) {
      mutable_weal()->::PBPlayerWeal::MergeFrom(from.weal());
    }
    if (from.has_playerwulue()) {
      mutable_playerwulue()->::PBPlayerWulue::MergeFrom(from.playerwulue());
    }
    if (from.has_wentao()) {
      mutable_wentao()->::PBPlayerWenTao::MergeFrom(from.wentao());
    }
    if (from.has_copymap()) {
      mutable_copymap()->::PBPlayerCopymap::MergeFrom(from.copymap());
    }
    if (from.has_identity()) {
      mutable_identity()->::PBPlayerIdentity::MergeFrom(from.identity());
    }
    if (from.has_systemswitch()) {
      mutable_systemswitch()->::PBSystemSwitch::MergeFrom(from.systemswitch());
    }
    if (from.has_conlletion()) {
      mutable_conlletion()->::PBPlayerColletion::MergeFrom(from.conlletion());
    }
    if (from.has_wuxue()) {
      mutable_wuxue()->::PBPlayerWuxue::MergeFrom(from.wuxue());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dart()) {
      mutable_dart()->::PBPlayerDart::MergeFrom(from.dart());
    }
    if (from.has_factionboss()) {
      mutable_factionboss()->::PBPlayerFactionBoss::MergeFrom(from.factionboss());
    }
    if (from.has_title()) {
      mutable_title()->::PBPlayerTitle::MergeFrom(from.title());
    }
    if (from.has_dazuoguaji()) {
      mutable_dazuoguaji()->::PBPlayerDazuoguaji::MergeFrom(from.dazuoguaji());
    }
    if (from.has_fashion()) {
      mutable_fashion()->::PBPlayerFashion::MergeFrom(from.fashion());
    }
    if (from.has_equipcolumn()) {
      mutable_equipcolumn()->::PBPlayerEquipColumn::MergeFrom(from.equipcolumn());
    }
    if (from.has_climbtower()) {
      mutable_climbtower()->::PBPlayerClimbTower::MergeFrom(from.climbtower());
    }
    if (from.has_pvp()) {
      mutable_pvp()->::PBPlayerPvp::MergeFrom(from.pvp());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_gwtrain()) {
      mutable_gwtrain()->::PBPlayerGreatWallTrain::MergeFrom(from.gwtrain());
    }
    if (from.has_activity()) {
      mutable_activity()->::PBPlayerActivity::MergeFrom(from.activity());
    }
    if (from.has_relive()) {
      mutable_relive()->::PBLlayerRelive::MergeFrom(from.relive());
    }
    if (from.has_singlepvp()) {
      mutable_singlepvp()->::PBPlayerSinglePvp::MergeFrom(from.singlepvp());
    }
    if (from.has_common()) {
      mutable_common()->::PBPlayerCommon::MergeFrom(from.common());
    }
    if (from.has_manor()) {
      mutable_manor()->::PBPlayerManor::MergeFrom(from.manor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerSystem::CopyFrom(const PBPlayerSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerSystem::IsInitialized() const {
  
  return true;
}

void PBPlayerSystem::Swap(PBPlayerSystem* other) {
  if (other != this) {
    std::swap(saveorder_, other->saveorder_);
    std::swap(cooling_, other->cooling_);
    std::swap(skill_, other->skill_);
    std::swap(buff_, other->buff_);
    std::swap(counter_, other->counter_);
    std::swap(prize_, other->prize_);
    std::swap(trade_, other->trade_);
    std::swap(playerstore_, other->playerstore_);
    std::swap(weal_, other->weal_);
    std::swap(playerwulue_, other->playerwulue_);
    std::swap(wentao_, other->wentao_);
    std::swap(copymap_, other->copymap_);
    std::swap(identity_, other->identity_);
    std::swap(systemswitch_, other->systemswitch_);
    std::swap(conlletion_, other->conlletion_);
    std::swap(wuxue_, other->wuxue_);
    std::swap(dart_, other->dart_);
    std::swap(factionboss_, other->factionboss_);
    std::swap(title_, other->title_);
    std::swap(dazuoguaji_, other->dazuoguaji_);
    std::swap(fashion_, other->fashion_);
    std::swap(equipcolumn_, other->equipcolumn_);
    std::swap(climbtower_, other->climbtower_);
    std::swap(pvp_, other->pvp_);
    std::swap(gwtrain_, other->gwtrain_);
    std::swap(activity_, other->activity_);
    std::swap(relive_, other->relive_);
    std::swap(singlepvp_, other->singlepvp_);
    std::swap(common_, other->common_);
    std::swap(manor_, other->manor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerSystem_descriptor_;
  metadata.reflection = PBPlayerSystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerGlobalBase::kViewFieldNumber;
#endif  // !_MSC_VER

PBPlayerGlobalBase::PBPlayerGlobalBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerGlobalBase::InitAsDefaultInstance() {
  view_ = const_cast< ::PBPlayerView*>(&::PBPlayerView::default_instance());
}

PBPlayerGlobalBase::PBPlayerGlobalBase(const PBPlayerGlobalBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerGlobalBase::SharedCtor() {
  _cached_size_ = 0;
  view_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerGlobalBase::~PBPlayerGlobalBase() {
  SharedDtor();
}

void PBPlayerGlobalBase::SharedDtor() {
  if (this != default_instance_) {
    delete view_;
  }
}

void PBPlayerGlobalBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerGlobalBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerGlobalBase_descriptor_;
}

const PBPlayerGlobalBase& PBPlayerGlobalBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerGlobalBase* PBPlayerGlobalBase::default_instance_ = NULL;

PBPlayerGlobalBase* PBPlayerGlobalBase::New() const {
  return new PBPlayerGlobalBase;
}

void PBPlayerGlobalBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_view()) {
      if (view_ != NULL) view_->::PBPlayerView::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerGlobalBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerView view = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerGlobalBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerView view = 1;
  if (has_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->view(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerGlobalBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerView view = 1;
  if (has_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->view(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerGlobalBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerView view = 1;
    if (has_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->view());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerGlobalBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerGlobalBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerGlobalBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerGlobalBase::MergeFrom(const PBPlayerGlobalBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_view()) {
      mutable_view()->::PBPlayerView::MergeFrom(from.view());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerGlobalBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerGlobalBase::CopyFrom(const PBPlayerGlobalBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerGlobalBase::IsInitialized() const {
  
  return true;
}

void PBPlayerGlobalBase::Swap(PBPlayerGlobalBase* other) {
  if (other != this) {
    std::swap(view_, other->view_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerGlobalBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerGlobalBase_descriptor_;
  metadata.reflection = PBPlayerGlobalBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSaleMoneyInfo::kOrderidFieldNumber;
const int PBSaleMoneyInfo::kTypeFieldNumber;
const int PBSaleMoneyInfo::kCashFieldNumber;
const int PBSaleMoneyInfo::kSliverFieldNumber;
const int PBSaleMoneyInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

PBSaleMoneyInfo::PBSaleMoneyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSaleMoneyInfo::InitAsDefaultInstance() {
}

PBSaleMoneyInfo::PBSaleMoneyInfo(const PBSaleMoneyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSaleMoneyInfo::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  cash_ = 0u;
  sliver_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSaleMoneyInfo::~PBSaleMoneyInfo() {
  SharedDtor();
}

void PBSaleMoneyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSaleMoneyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSaleMoneyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSaleMoneyInfo_descriptor_;
}

const PBSaleMoneyInfo& PBSaleMoneyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBSaleMoneyInfo* PBSaleMoneyInfo::default_instance_ = NULL;

PBSaleMoneyInfo* PBSaleMoneyInfo::New() const {
  return new PBSaleMoneyInfo;
}

void PBSaleMoneyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    cash_ = 0u;
    sliver_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSaleMoneyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 orderid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cash;
        break;
      }
      
      // optional uint32 cash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sliver;
        break;
      }
      
      // optional uint64 sliver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSaleMoneyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 orderid = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->orderid(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 cash = 3;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cash(), output);
  }
  
  // optional uint64 sliver = 4;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sliver(), output);
  }
  
  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSaleMoneyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 orderid = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->orderid(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 cash = 3;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cash(), target);
  }
  
  // optional uint64 sliver = 4;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sliver(), target);
  }
  
  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSaleMoneyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 orderid = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->orderid());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 cash = 3;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
    // optional uint64 sliver = 4;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sliver());
    }
    
    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSaleMoneyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSaleMoneyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSaleMoneyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSaleMoneyInfo::MergeFrom(const PBSaleMoneyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSaleMoneyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSaleMoneyInfo::CopyFrom(const PBSaleMoneyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSaleMoneyInfo::IsInitialized() const {
  
  return true;
}

void PBSaleMoneyInfo::Swap(PBSaleMoneyInfo* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(type_, other->type_);
    std::swap(cash_, other->cash_);
    std::swap(sliver_, other->sliver_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSaleMoneyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSaleMoneyInfo_descriptor_;
  metadata.reflection = PBSaleMoneyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSaleMoneyLog::kTypeFieldNumber;
const int PBSaleMoneyLog::kDisplayFieldNumber;
const int PBSaleMoneyLog::kCashFieldNumber;
const int PBSaleMoneyLog::kSliverFieldNumber;
const int PBSaleMoneyLog::kTimeFieldNumber;
#endif  // !_MSC_VER

PBSaleMoneyLog::PBSaleMoneyLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSaleMoneyLog::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBSaleMoneyLog::PBSaleMoneyLog(const PBSaleMoneyLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSaleMoneyLog::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  display_ = NULL;
  cash_ = 0u;
  sliver_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSaleMoneyLog::~PBSaleMoneyLog() {
  SharedDtor();
}

void PBSaleMoneyLog::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBSaleMoneyLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSaleMoneyLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSaleMoneyLog_descriptor_;
}

const PBSaleMoneyLog& PBSaleMoneyLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBSaleMoneyLog* PBSaleMoneyLog::default_instance_ = NULL;

PBSaleMoneyLog* PBSaleMoneyLog::New() const {
  return new PBSaleMoneyLog;
}

void PBSaleMoneyLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    cash_ = 0u;
    sliver_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSaleMoneyLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_display;
        break;
      }
      
      // optional .PBPlayerDisplay display = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cash;
        break;
      }
      
      // optional uint32 cash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sliver;
        break;
      }
      
      // optional uint64 sliver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSaleMoneyLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->display(), output);
  }
  
  // optional uint32 cash = 3;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cash(), output);
  }
  
  // optional uint64 sliver = 4;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sliver(), output);
  }
  
  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSaleMoneyLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->display(), target);
  }
  
  // optional uint32 cash = 3;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cash(), target);
  }
  
  // optional uint64 sliver = 4;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sliver(), target);
  }
  
  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSaleMoneyLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional .PBPlayerDisplay display = 2;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 cash = 3;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
    // optional uint64 sliver = 4;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sliver());
    }
    
    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSaleMoneyLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSaleMoneyLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSaleMoneyLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSaleMoneyLog::MergeFrom(const PBSaleMoneyLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSaleMoneyLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSaleMoneyLog::CopyFrom(const PBSaleMoneyLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSaleMoneyLog::IsInitialized() const {
  
  return true;
}

void PBSaleMoneyLog::Swap(PBSaleMoneyLog* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(display_, other->display_);
    std::swap(cash_, other->cash_);
    std::swap(sliver_, other->sliver_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSaleMoneyLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSaleMoneyLog_descriptor_;
  metadata.reflection = PBSaleMoneyLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerGlobalSaleMoney::kListFieldNumber;
const int PBPlayerGlobalSaleMoney::kLogFieldNumber;
#endif  // !_MSC_VER

PBPlayerGlobalSaleMoney::PBPlayerGlobalSaleMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerGlobalSaleMoney::InitAsDefaultInstance() {
}

PBPlayerGlobalSaleMoney::PBPlayerGlobalSaleMoney(const PBPlayerGlobalSaleMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerGlobalSaleMoney::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerGlobalSaleMoney::~PBPlayerGlobalSaleMoney() {
  SharedDtor();
}

void PBPlayerGlobalSaleMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerGlobalSaleMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerGlobalSaleMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerGlobalSaleMoney_descriptor_;
}

const PBPlayerGlobalSaleMoney& PBPlayerGlobalSaleMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerGlobalSaleMoney* PBPlayerGlobalSaleMoney::default_instance_ = NULL;

PBPlayerGlobalSaleMoney* PBPlayerGlobalSaleMoney::New() const {
  return new PBPlayerGlobalSaleMoney;
}

void PBPlayerGlobalSaleMoney::Clear() {
  list_.Clear();
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerGlobalSaleMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBSaleMoneyInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_log;
        break;
      }
      
      // repeated .PBSaleMoneyLog log = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerGlobalSaleMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBSaleMoneyInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  // repeated .PBSaleMoneyLog log = 2;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->log(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerGlobalSaleMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSaleMoneyInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  // repeated .PBSaleMoneyLog log = 2;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->log(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerGlobalSaleMoney::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBSaleMoneyInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  // repeated .PBSaleMoneyLog log = 2;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerGlobalSaleMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerGlobalSaleMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerGlobalSaleMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerGlobalSaleMoney::MergeFrom(const PBPlayerGlobalSaleMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  log_.MergeFrom(from.log_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerGlobalSaleMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerGlobalSaleMoney::CopyFrom(const PBPlayerGlobalSaleMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerGlobalSaleMoney::IsInitialized() const {
  
  return true;
}

void PBPlayerGlobalSaleMoney::Swap(PBPlayerGlobalSaleMoney* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerGlobalSaleMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerGlobalSaleMoney_descriptor_;
  metadata.reflection = PBPlayerGlobalSaleMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerGlobalSaleMoneySave::kLogFieldNumber;
#endif  // !_MSC_VER

PBPlayerGlobalSaleMoneySave::PBPlayerGlobalSaleMoneySave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerGlobalSaleMoneySave::InitAsDefaultInstance() {
}

PBPlayerGlobalSaleMoneySave::PBPlayerGlobalSaleMoneySave(const PBPlayerGlobalSaleMoneySave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerGlobalSaleMoneySave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerGlobalSaleMoneySave::~PBPlayerGlobalSaleMoneySave() {
  SharedDtor();
}

void PBPlayerGlobalSaleMoneySave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerGlobalSaleMoneySave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerGlobalSaleMoneySave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerGlobalSaleMoneySave_descriptor_;
}

const PBPlayerGlobalSaleMoneySave& PBPlayerGlobalSaleMoneySave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerGlobalSaleMoneySave* PBPlayerGlobalSaleMoneySave::default_instance_ = NULL;

PBPlayerGlobalSaleMoneySave* PBPlayerGlobalSaleMoneySave::New() const {
  return new PBPlayerGlobalSaleMoneySave;
}

void PBPlayerGlobalSaleMoneySave::Clear() {
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerGlobalSaleMoneySave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBSaleMoneyLog log = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerGlobalSaleMoneySave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBSaleMoneyLog log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerGlobalSaleMoneySave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSaleMoneyLog log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerGlobalSaleMoneySave::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBSaleMoneyLog log = 1;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerGlobalSaleMoneySave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerGlobalSaleMoneySave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerGlobalSaleMoneySave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerGlobalSaleMoneySave::MergeFrom(const PBPlayerGlobalSaleMoneySave& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerGlobalSaleMoneySave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerGlobalSaleMoneySave::CopyFrom(const PBPlayerGlobalSaleMoneySave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerGlobalSaleMoneySave::IsInitialized() const {
  
  return true;
}

void PBPlayerGlobalSaleMoneySave::Swap(PBPlayerGlobalSaleMoneySave* other) {
  if (other != this) {
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerGlobalSaleMoneySave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerGlobalSaleMoneySave_descriptor_;
  metadata.reflection = PBPlayerGlobalSaleMoneySave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSaleMoneyInfoEx::kDataFieldNumber;
const int PBSaleMoneyInfoEx::kDisplayFieldNumber;
#endif  // !_MSC_VER

PBSaleMoneyInfoEx::PBSaleMoneyInfoEx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSaleMoneyInfoEx::InitAsDefaultInstance() {
  data_ = const_cast< ::PBSaleMoneyInfo*>(&::PBSaleMoneyInfo::default_instance());
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBSaleMoneyInfoEx::PBSaleMoneyInfoEx(const PBSaleMoneyInfoEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSaleMoneyInfoEx::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  display_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSaleMoneyInfoEx::~PBSaleMoneyInfoEx() {
  SharedDtor();
}

void PBSaleMoneyInfoEx::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete display_;
  }
}

void PBSaleMoneyInfoEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSaleMoneyInfoEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSaleMoneyInfoEx_descriptor_;
}

const PBSaleMoneyInfoEx& PBSaleMoneyInfoEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBSaleMoneyInfoEx* PBSaleMoneyInfoEx::default_instance_ = NULL;

PBSaleMoneyInfoEx* PBSaleMoneyInfoEx::New() const {
  return new PBSaleMoneyInfoEx;
}

void PBSaleMoneyInfoEx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::PBSaleMoneyInfo::Clear();
    }
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSaleMoneyInfoEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBSaleMoneyInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_display;
        break;
      }
      
      // optional .PBPlayerDisplay display = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSaleMoneyInfoEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBSaleMoneyInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->display(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSaleMoneyInfoEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBSaleMoneyInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->display(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSaleMoneyInfoEx::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBSaleMoneyInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
    // optional .PBPlayerDisplay display = 2;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSaleMoneyInfoEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSaleMoneyInfoEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSaleMoneyInfoEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSaleMoneyInfoEx::MergeFrom(const PBSaleMoneyInfoEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::PBSaleMoneyInfo::MergeFrom(from.data());
    }
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSaleMoneyInfoEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSaleMoneyInfoEx::CopyFrom(const PBSaleMoneyInfoEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSaleMoneyInfoEx::IsInitialized() const {
  
  return true;
}

void PBSaleMoneyInfoEx::Swap(PBSaleMoneyInfoEx* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(display_, other->display_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSaleMoneyInfoEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSaleMoneyInfoEx_descriptor_;
  metadata.reflection = PBSaleMoneyInfoEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSaleMoneyStatistics::kPricesFieldNumber;
const int PBSaleMoneyStatistics::kAmountsFieldNumber;
const int PBSaleMoneyStatistics::kTimetotalFieldNumber;
const int PBSaleMoneyStatistics::kAmounttotalFieldNumber;
const int PBSaleMoneyStatistics::kMoneytotalFieldNumber;
#endif  // !_MSC_VER

PBSaleMoneyStatistics::PBSaleMoneyStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSaleMoneyStatistics::InitAsDefaultInstance() {
}

PBSaleMoneyStatistics::PBSaleMoneyStatistics(const PBSaleMoneyStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSaleMoneyStatistics::SharedCtor() {
  _cached_size_ = 0;
  timetotal_ = 0;
  amounttotal_ = GOOGLE_LONGLONG(0);
  moneytotal_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSaleMoneyStatistics::~PBSaleMoneyStatistics() {
  SharedDtor();
}

void PBSaleMoneyStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSaleMoneyStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSaleMoneyStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSaleMoneyStatistics_descriptor_;
}

const PBSaleMoneyStatistics& PBSaleMoneyStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBSaleMoneyStatistics* PBSaleMoneyStatistics::default_instance_ = NULL;

PBSaleMoneyStatistics* PBSaleMoneyStatistics::New() const {
  return new PBSaleMoneyStatistics;
}

void PBSaleMoneyStatistics::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    timetotal_ = 0;
    amounttotal_ = GOOGLE_LONGLONG(0);
    moneytotal_ = GOOGLE_LONGLONG(0);
  }
  prices_.Clear();
  amounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSaleMoneyStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 prices = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_prices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_prices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_prices;
        if (input->ExpectTag(18)) goto parse_amounts;
        break;
      }
      
      // repeated int64 amounts = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_amounts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_amounts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timetotal;
        break;
      }
      
      // optional int32 timetotal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timetotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timetotal_)));
          set_has_timetotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amounttotal;
        break;
      }
      
      // optional int64 amounttotal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amounttotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amounttotal_)));
          set_has_amounttotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_moneytotal;
        break;
      }
      
      // optional int64 moneytotal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneytotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &moneytotal_)));
          set_has_moneytotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSaleMoneyStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 prices = 1;
  for (int i = 0; i < this->prices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->prices(i), output);
  }
  
  // repeated int64 amounts = 2 [packed = true];
  if (this->amounts_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_amounts_cached_byte_size_);
  }
  for (int i = 0; i < this->amounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->amounts(i), output);
  }
  
  // optional int32 timetotal = 3;
  if (has_timetotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timetotal(), output);
  }
  
  // optional int64 amounttotal = 4;
  if (has_amounttotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->amounttotal(), output);
  }
  
  // optional int64 moneytotal = 5;
  if (has_moneytotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->moneytotal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSaleMoneyStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 prices = 1;
  for (int i = 0; i < this->prices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->prices(i), target);
  }
  
  // repeated int64 amounts = 2 [packed = true];
  if (this->amounts_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _amounts_cached_byte_size_, target);
  }
  for (int i = 0; i < this->amounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->amounts(i), target);
  }
  
  // optional int32 timetotal = 3;
  if (has_timetotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timetotal(), target);
  }
  
  // optional int64 amounttotal = 4;
  if (has_amounttotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->amounttotal(), target);
  }
  
  // optional int64 moneytotal = 5;
  if (has_moneytotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->moneytotal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSaleMoneyStatistics::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 timetotal = 3;
    if (has_timetotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timetotal());
    }
    
    // optional int64 amounttotal = 4;
    if (has_amounttotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amounttotal());
    }
    
    // optional int64 moneytotal = 5;
    if (has_moneytotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->moneytotal());
    }
    
  }
  // repeated int32 prices = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->prices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->prices(i));
    }
    total_size += 1 * this->prices_size() + data_size;
  }
  
  // repeated int64 amounts = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->amounts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->amounts(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _amounts_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSaleMoneyStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSaleMoneyStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSaleMoneyStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSaleMoneyStatistics::MergeFrom(const PBSaleMoneyStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  prices_.MergeFrom(from.prices_);
  amounts_.MergeFrom(from.amounts_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_timetotal()) {
      set_timetotal(from.timetotal());
    }
    if (from.has_amounttotal()) {
      set_amounttotal(from.amounttotal());
    }
    if (from.has_moneytotal()) {
      set_moneytotal(from.moneytotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSaleMoneyStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSaleMoneyStatistics::CopyFrom(const PBSaleMoneyStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSaleMoneyStatistics::IsInitialized() const {
  
  return true;
}

void PBSaleMoneyStatistics::Swap(PBSaleMoneyStatistics* other) {
  if (other != this) {
    prices_.Swap(&other->prices_);
    amounts_.Swap(&other->amounts_);
    std::swap(timetotal_, other->timetotal_);
    std::swap(amounttotal_, other->amounttotal_);
    std::swap(moneytotal_, other->moneytotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSaleMoneyStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSaleMoneyStatistics_descriptor_;
  metadata.reflection = PBSaleMoneyStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSaleMoneyRecentTradeLog::kCashFieldNumber;
const int PBSaleMoneyRecentTradeLog::kSliverFieldNumber;
const int PBSaleMoneyRecentTradeLog::kTimeFieldNumber;
#endif  // !_MSC_VER

PBSaleMoneyRecentTradeLog::PBSaleMoneyRecentTradeLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSaleMoneyRecentTradeLog::InitAsDefaultInstance() {
}

PBSaleMoneyRecentTradeLog::PBSaleMoneyRecentTradeLog(const PBSaleMoneyRecentTradeLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSaleMoneyRecentTradeLog::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  sliver_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSaleMoneyRecentTradeLog::~PBSaleMoneyRecentTradeLog() {
  SharedDtor();
}

void PBSaleMoneyRecentTradeLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSaleMoneyRecentTradeLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSaleMoneyRecentTradeLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSaleMoneyRecentTradeLog_descriptor_;
}

const PBSaleMoneyRecentTradeLog& PBSaleMoneyRecentTradeLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBSaleMoneyRecentTradeLog* PBSaleMoneyRecentTradeLog::default_instance_ = NULL;

PBSaleMoneyRecentTradeLog* PBSaleMoneyRecentTradeLog::New() const {
  return new PBSaleMoneyRecentTradeLog;
}

void PBSaleMoneyRecentTradeLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cash_ = 0u;
    sliver_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSaleMoneyRecentTradeLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sliver;
        break;
      }
      
      // optional uint64 sliver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSaleMoneyRecentTradeLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cash = 2;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cash(), output);
  }
  
  // optional uint64 sliver = 3;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sliver(), output);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSaleMoneyRecentTradeLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cash = 2;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cash(), target);
  }
  
  // optional uint64 sliver = 3;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sliver(), target);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSaleMoneyRecentTradeLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cash = 2;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
    // optional uint64 sliver = 3;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sliver());
    }
    
    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSaleMoneyRecentTradeLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSaleMoneyRecentTradeLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSaleMoneyRecentTradeLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSaleMoneyRecentTradeLog::MergeFrom(const PBSaleMoneyRecentTradeLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSaleMoneyRecentTradeLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSaleMoneyRecentTradeLog::CopyFrom(const PBSaleMoneyRecentTradeLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSaleMoneyRecentTradeLog::IsInitialized() const {
  
  return true;
}

void PBSaleMoneyRecentTradeLog::Swap(PBSaleMoneyRecentTradeLog* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(sliver_, other->sliver_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSaleMoneyRecentTradeLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSaleMoneyRecentTradeLog_descriptor_;
  metadata.reflection = PBSaleMoneyRecentTradeLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSaleMoneyPriceData::kTimeFieldNumber;
const int PBSaleMoneyPriceData::kAvepriceFieldNumber;
const int PBSaleMoneyPriceData::kStatisticsFieldNumber;
const int PBSaleMoneyPriceData::kCurstatisticsFieldNumber;
const int PBSaleMoneyPriceData::kRefpriceFieldNumber;
const int PBSaleMoneyPriceData::kSupplystampFieldNumber;
const int PBSaleMoneyPriceData::kNextsupplystampFieldNumber;
const int PBSaleMoneyPriceData::kLastchkstampFieldNumber;
const int PBSaleMoneyPriceData::kChkstatisticsFieldNumber;
const int PBSaleMoneyPriceData::kTradelogFieldNumber;
#endif  // !_MSC_VER

PBSaleMoneyPriceData::PBSaleMoneyPriceData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSaleMoneyPriceData::InitAsDefaultInstance() {
  curstatistics_ = const_cast< ::PBSaleMoneyStatistics*>(&::PBSaleMoneyStatistics::default_instance());
  chkstatistics_ = const_cast< ::PBSaleMoneyStatistics*>(&::PBSaleMoneyStatistics::default_instance());
}

PBSaleMoneyPriceData::PBSaleMoneyPriceData(const PBSaleMoneyPriceData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSaleMoneyPriceData::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  aveprice_ = 0;
  curstatistics_ = NULL;
  refprice_ = 0;
  supplystamp_ = GOOGLE_ULONGLONG(0);
  nextsupplystamp_ = GOOGLE_ULONGLONG(0);
  lastchkstamp_ = GOOGLE_ULONGLONG(0);
  chkstatistics_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSaleMoneyPriceData::~PBSaleMoneyPriceData() {
  SharedDtor();
}

void PBSaleMoneyPriceData::SharedDtor() {
  if (this != default_instance_) {
    delete curstatistics_;
    delete chkstatistics_;
  }
}

void PBSaleMoneyPriceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSaleMoneyPriceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSaleMoneyPriceData_descriptor_;
}

const PBSaleMoneyPriceData& PBSaleMoneyPriceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBSaleMoneyPriceData* PBSaleMoneyPriceData::default_instance_ = NULL;

PBSaleMoneyPriceData* PBSaleMoneyPriceData::New() const {
  return new PBSaleMoneyPriceData;
}

void PBSaleMoneyPriceData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_ULONGLONG(0);
    aveprice_ = 0;
    if (has_curstatistics()) {
      if (curstatistics_ != NULL) curstatistics_->::PBSaleMoneyStatistics::Clear();
    }
    refprice_ = 0;
    supplystamp_ = GOOGLE_ULONGLONG(0);
    nextsupplystamp_ = GOOGLE_ULONGLONG(0);
    lastchkstamp_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_chkstatistics()) {
      if (chkstatistics_ != NULL) chkstatistics_->::PBSaleMoneyStatistics::Clear();
    }
  }
  statistics_.Clear();
  tradelog_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSaleMoneyPriceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_aveprice;
        break;
      }
      
      // optional double aveprice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_aveprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aveprice_)));
          set_has_aveprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_statistics;
        break;
      }
      
      // repeated .PBSaleMoneyStatistics statistics = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statistics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_statistics;
        if (input->ExpectTag(34)) goto parse_curstatistics;
        break;
      }
      
      // optional .PBSaleMoneyStatistics curstatistics = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curstatistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curstatistics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refprice;
        break;
      }
      
      // optional int32 refprice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refprice_)));
          set_has_refprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_supplystamp;
        break;
      }
      
      // optional uint64 supplystamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supplystamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &supplystamp_)));
          set_has_supplystamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nextsupplystamp;
        break;
      }
      
      // optional uint64 nextsupplystamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextsupplystamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nextsupplystamp_)));
          set_has_nextsupplystamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lastchkstamp;
        break;
      }
      
      // optional uint64 lastchkstamp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastchkstamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastchkstamp_)));
          set_has_lastchkstamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_chkstatistics;
        break;
      }
      
      // optional .PBSaleMoneyStatistics chkstatistics = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chkstatistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chkstatistics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tradelog;
        break;
      }
      
      // repeated .PBSaleMoneyRecentTradeLog tradelog = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tradelog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tradelog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tradelog;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSaleMoneyPriceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }
  
  // optional double aveprice = 2;
  if (has_aveprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->aveprice(), output);
  }
  
  // repeated .PBSaleMoneyStatistics statistics = 3;
  for (int i = 0; i < this->statistics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->statistics(i), output);
  }
  
  // optional .PBSaleMoneyStatistics curstatistics = 4;
  if (has_curstatistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->curstatistics(), output);
  }
  
  // optional int32 refprice = 5;
  if (has_refprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->refprice(), output);
  }
  
  // optional uint64 supplystamp = 6;
  if (has_supplystamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->supplystamp(), output);
  }
  
  // optional uint64 nextsupplystamp = 7;
  if (has_nextsupplystamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->nextsupplystamp(), output);
  }
  
  // optional uint64 lastchkstamp = 8;
  if (has_lastchkstamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->lastchkstamp(), output);
  }
  
  // optional .PBSaleMoneyStatistics chkstatistics = 9;
  if (has_chkstatistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->chkstatistics(), output);
  }
  
  // repeated .PBSaleMoneyRecentTradeLog tradelog = 10;
  for (int i = 0; i < this->tradelog_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tradelog(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSaleMoneyPriceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }
  
  // optional double aveprice = 2;
  if (has_aveprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->aveprice(), target);
  }
  
  // repeated .PBSaleMoneyStatistics statistics = 3;
  for (int i = 0; i < this->statistics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->statistics(i), target);
  }
  
  // optional .PBSaleMoneyStatistics curstatistics = 4;
  if (has_curstatistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->curstatistics(), target);
  }
  
  // optional int32 refprice = 5;
  if (has_refprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->refprice(), target);
  }
  
  // optional uint64 supplystamp = 6;
  if (has_supplystamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->supplystamp(), target);
  }
  
  // optional uint64 nextsupplystamp = 7;
  if (has_nextsupplystamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->nextsupplystamp(), target);
  }
  
  // optional uint64 lastchkstamp = 8;
  if (has_lastchkstamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->lastchkstamp(), target);
  }
  
  // optional .PBSaleMoneyStatistics chkstatistics = 9;
  if (has_chkstatistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->chkstatistics(), target);
  }
  
  // repeated .PBSaleMoneyRecentTradeLog tradelog = 10;
  for (int i = 0; i < this->tradelog_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tradelog(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSaleMoneyPriceData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }
    
    // optional double aveprice = 2;
    if (has_aveprice()) {
      total_size += 1 + 8;
    }
    
    // optional .PBSaleMoneyStatistics curstatistics = 4;
    if (has_curstatistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curstatistics());
    }
    
    // optional int32 refprice = 5;
    if (has_refprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refprice());
    }
    
    // optional uint64 supplystamp = 6;
    if (has_supplystamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->supplystamp());
    }
    
    // optional uint64 nextsupplystamp = 7;
    if (has_nextsupplystamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nextsupplystamp());
    }
    
    // optional uint64 lastchkstamp = 8;
    if (has_lastchkstamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastchkstamp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBSaleMoneyStatistics chkstatistics = 9;
    if (has_chkstatistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chkstatistics());
    }
    
  }
  // repeated .PBSaleMoneyStatistics statistics = 3;
  total_size += 1 * this->statistics_size();
  for (int i = 0; i < this->statistics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statistics(i));
  }
  
  // repeated .PBSaleMoneyRecentTradeLog tradelog = 10;
  total_size += 1 * this->tradelog_size();
  for (int i = 0; i < this->tradelog_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tradelog(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSaleMoneyPriceData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSaleMoneyPriceData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSaleMoneyPriceData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSaleMoneyPriceData::MergeFrom(const PBSaleMoneyPriceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  statistics_.MergeFrom(from.statistics_);
  tradelog_.MergeFrom(from.tradelog_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_aveprice()) {
      set_aveprice(from.aveprice());
    }
    if (from.has_curstatistics()) {
      mutable_curstatistics()->::PBSaleMoneyStatistics::MergeFrom(from.curstatistics());
    }
    if (from.has_refprice()) {
      set_refprice(from.refprice());
    }
    if (from.has_supplystamp()) {
      set_supplystamp(from.supplystamp());
    }
    if (from.has_nextsupplystamp()) {
      set_nextsupplystamp(from.nextsupplystamp());
    }
    if (from.has_lastchkstamp()) {
      set_lastchkstamp(from.lastchkstamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_chkstatistics()) {
      mutable_chkstatistics()->::PBSaleMoneyStatistics::MergeFrom(from.chkstatistics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSaleMoneyPriceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSaleMoneyPriceData::CopyFrom(const PBSaleMoneyPriceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSaleMoneyPriceData::IsInitialized() const {
  
  return true;
}

void PBSaleMoneyPriceData::Swap(PBSaleMoneyPriceData* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(aveprice_, other->aveprice_);
    statistics_.Swap(&other->statistics_);
    std::swap(curstatistics_, other->curstatistics_);
    std::swap(refprice_, other->refprice_);
    std::swap(supplystamp_, other->supplystamp_);
    std::swap(nextsupplystamp_, other->nextsupplystamp_);
    std::swap(lastchkstamp_, other->lastchkstamp_);
    std::swap(chkstatistics_, other->chkstatistics_);
    tradelog_.Swap(&other->tradelog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSaleMoneyPriceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSaleMoneyPriceData_descriptor_;
  metadata.reflection = PBSaleMoneyPriceData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAuctionItemInfo::kSaleorderidFieldNumber;
const int PBAuctionItemInfo::kSalesliverFieldNumber;
const int PBAuctionItemInfo::kItemFieldNumber;
const int PBAuctionItemInfo::kTimeFieldNumber;
const int PBAuctionItemInfo::kUnlocktimeFieldNumber;
const int PBAuctionItemInfo::kBuysliverFieldNumber;
const int PBAuctionItemInfo::kBuycountFieldNumber;
#endif  // !_MSC_VER

PBAuctionItemInfo::PBAuctionItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAuctionItemInfo::InitAsDefaultInstance() {
  item_ = const_cast< ::PBItem*>(&::PBItem::default_instance());
}

PBAuctionItemInfo::PBAuctionItemInfo(const PBAuctionItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAuctionItemInfo::SharedCtor() {
  _cached_size_ = 0;
  saleorderid_ = GOOGLE_ULONGLONG(0);
  salesliver_ = 0u;
  item_ = NULL;
  time_ = 0u;
  unlocktime_ = 0u;
  buysliver_ = 0u;
  buycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAuctionItemInfo::~PBAuctionItemInfo() {
  SharedDtor();
}

void PBAuctionItemInfo::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void PBAuctionItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAuctionItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAuctionItemInfo_descriptor_;
}

const PBAuctionItemInfo& PBAuctionItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBAuctionItemInfo* PBAuctionItemInfo::default_instance_ = NULL;

PBAuctionItemInfo* PBAuctionItemInfo::New() const {
  return new PBAuctionItemInfo;
}

void PBAuctionItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saleorderid_ = GOOGLE_ULONGLONG(0);
    salesliver_ = 0u;
    if (has_item()) {
      if (item_ != NULL) item_->::PBItem::Clear();
    }
    time_ = 0u;
    unlocktime_ = 0u;
    buysliver_ = 0u;
    buycount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAuctionItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 saleorderid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &saleorderid_)));
          set_has_saleorderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_salesliver;
        break;
      }
      
      // optional uint32 salesliver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_salesliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &salesliver_)));
          set_has_salesliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }
      
      // optional .PBItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unlocktime;
        break;
      }
      
      // optional uint32 unlocktime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlocktime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlocktime_)));
          set_has_unlocktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_buysliver;
        break;
      }
      
      // optional uint32 buysliver = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buysliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buysliver_)));
          set_has_buysliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buycount;
        break;
      }
      
      // optional uint32 buycount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAuctionItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 saleorderid = 1;
  if (has_saleorderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->saleorderid(), output);
  }
  
  // optional uint32 salesliver = 2;
  if (has_salesliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->salesliver(), output);
  }
  
  // optional .PBItem item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }
  
  // optional uint32 unlocktime = 5;
  if (has_unlocktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unlocktime(), output);
  }
  
  // optional uint32 buysliver = 6;
  if (has_buysliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buysliver(), output);
  }
  
  // optional uint32 buycount = 7;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buycount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAuctionItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 saleorderid = 1;
  if (has_saleorderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->saleorderid(), target);
  }
  
  // optional uint32 salesliver = 2;
  if (has_salesliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->salesliver(), target);
  }
  
  // optional .PBItem item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }
  
  // optional uint32 unlocktime = 5;
  if (has_unlocktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->unlocktime(), target);
  }
  
  // optional uint32 buysliver = 6;
  if (has_buysliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->buysliver(), target);
  }
  
  // optional uint32 buycount = 7;
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->buycount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAuctionItemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 saleorderid = 1;
    if (has_saleorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->saleorderid());
    }
    
    // optional uint32 salesliver = 2;
    if (has_salesliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->salesliver());
    }
    
    // optional .PBItem item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // optional uint32 unlocktime = 5;
    if (has_unlocktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlocktime());
    }
    
    // optional uint32 buysliver = 6;
    if (has_buysliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buysliver());
    }
    
    // optional uint32 buycount = 7;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buycount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAuctionItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAuctionItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAuctionItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAuctionItemInfo::MergeFrom(const PBAuctionItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saleorderid()) {
      set_saleorderid(from.saleorderid());
    }
    if (from.has_salesliver()) {
      set_salesliver(from.salesliver());
    }
    if (from.has_item()) {
      mutable_item()->::PBItem::MergeFrom(from.item());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_unlocktime()) {
      set_unlocktime(from.unlocktime());
    }
    if (from.has_buysliver()) {
      set_buysliver(from.buysliver());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAuctionItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAuctionItemInfo::CopyFrom(const PBAuctionItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAuctionItemInfo::IsInitialized() const {
  
  return true;
}

void PBAuctionItemInfo::Swap(PBAuctionItemInfo* other) {
  if (other != this) {
    std::swap(saleorderid_, other->saleorderid_);
    std::swap(salesliver_, other->salesliver_);
    std::swap(item_, other->item_);
    std::swap(time_, other->time_);
    std::swap(unlocktime_, other->unlocktime_);
    std::swap(buysliver_, other->buysliver_);
    std::swap(buycount_, other->buycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAuctionItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAuctionItemInfo_descriptor_;
  metadata.reflection = PBAuctionItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAuctionLog::kTypeFieldNumber;
const int PBAuctionLog::kDisplayFieldNumber;
const int PBAuctionLog::kPbItemFieldNumber;
const int PBAuctionLog::kSliverFieldNumber;
const int PBAuctionLog::kTimeFieldNumber;
#endif  // !_MSC_VER

PBAuctionLog::PBAuctionLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAuctionLog::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
  pbitem_ = const_cast< ::PBItem*>(&::PBItem::default_instance());
}

PBAuctionLog::PBAuctionLog(const PBAuctionLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAuctionLog::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  display_ = NULL;
  pbitem_ = NULL;
  sliver_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAuctionLog::~PBAuctionLog() {
  SharedDtor();
}

void PBAuctionLog::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
    delete pbitem_;
  }
}

void PBAuctionLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAuctionLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAuctionLog_descriptor_;
}

const PBAuctionLog& PBAuctionLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBAuctionLog* PBAuctionLog::default_instance_ = NULL;

PBAuctionLog* PBAuctionLog::New() const {
  return new PBAuctionLog;
}

void PBAuctionLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    if (has_pbitem()) {
      if (pbitem_ != NULL) pbitem_->::PBItem::Clear();
    }
    sliver_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAuctionLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_display;
        break;
      }
      
      // optional .PBPlayerDisplay display = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbItem;
        break;
      }
      
      // optional .PBItem pbItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sliver;
        break;
      }
      
      // optional uint64 sliver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAuctionLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->display(), output);
  }
  
  // optional .PBItem pbItem = 3;
  if (has_pbitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pbitem(), output);
  }
  
  // optional uint64 sliver = 4;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sliver(), output);
  }
  
  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAuctionLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->display(), target);
  }
  
  // optional .PBItem pbItem = 3;
  if (has_pbitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pbitem(), target);
  }
  
  // optional uint64 sliver = 4;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sliver(), target);
  }
  
  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAuctionLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional .PBPlayerDisplay display = 2;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional .PBItem pbItem = 3;
    if (has_pbitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbitem());
    }
    
    // optional uint64 sliver = 4;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sliver());
    }
    
    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAuctionLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAuctionLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAuctionLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAuctionLog::MergeFrom(const PBAuctionLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_pbitem()) {
      mutable_pbitem()->::PBItem::MergeFrom(from.pbitem());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAuctionLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAuctionLog::CopyFrom(const PBAuctionLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAuctionLog::IsInitialized() const {
  
  return true;
}

void PBAuctionLog::Swap(PBAuctionLog* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(display_, other->display_);
    std::swap(pbitem_, other->pbitem_);
    std::swap(sliver_, other->sliver_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAuctionLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAuctionLog_descriptor_;
  metadata.reflection = PBAuctionLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerGlobalAuction::kItemFieldNumber;
const int PBPlayerGlobalAuction::kLockinfoFieldNumber;
const int PBPlayerGlobalAuction::kLogFieldNumber;
#endif  // !_MSC_VER

PBPlayerGlobalAuction::PBPlayerGlobalAuction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerGlobalAuction::InitAsDefaultInstance() {
}

PBPlayerGlobalAuction::PBPlayerGlobalAuction(const PBPlayerGlobalAuction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerGlobalAuction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerGlobalAuction::~PBPlayerGlobalAuction() {
  SharedDtor();
}

void PBPlayerGlobalAuction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerGlobalAuction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerGlobalAuction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerGlobalAuction_descriptor_;
}

const PBPlayerGlobalAuction& PBPlayerGlobalAuction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerGlobalAuction* PBPlayerGlobalAuction::default_instance_ = NULL;

PBPlayerGlobalAuction* PBPlayerGlobalAuction::New() const {
  return new PBPlayerGlobalAuction;
}

void PBPlayerGlobalAuction::Clear() {
  item_.Clear();
  lockinfo_.Clear();
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerGlobalAuction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBAuctionItemInfo item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectTag(18)) goto parse_lockinfo;
        break;
      }
      
      // repeated .PBAuctionItemInfo lockinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lockinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lockinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lockinfo;
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }
      
      // repeated .PBAuctionLog log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerGlobalAuction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBAuctionItemInfo item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }
  
  // repeated .PBAuctionItemInfo lockinfo = 2;
  for (int i = 0; i < this->lockinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lockinfo(i), output);
  }
  
  // repeated .PBAuctionLog log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerGlobalAuction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBAuctionItemInfo item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }
  
  // repeated .PBAuctionItemInfo lockinfo = 2;
  for (int i = 0; i < this->lockinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lockinfo(i), target);
  }
  
  // repeated .PBAuctionLog log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerGlobalAuction::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBAuctionItemInfo item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  // repeated .PBAuctionItemInfo lockinfo = 2;
  total_size += 1 * this->lockinfo_size();
  for (int i = 0; i < this->lockinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lockinfo(i));
  }
  
  // repeated .PBAuctionLog log = 3;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerGlobalAuction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerGlobalAuction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerGlobalAuction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerGlobalAuction::MergeFrom(const PBPlayerGlobalAuction& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  lockinfo_.MergeFrom(from.lockinfo_);
  log_.MergeFrom(from.log_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerGlobalAuction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerGlobalAuction::CopyFrom(const PBPlayerGlobalAuction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerGlobalAuction::IsInitialized() const {
  
  return true;
}

void PBPlayerGlobalAuction::Swap(PBPlayerGlobalAuction* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    lockinfo_.Swap(&other->lockinfo_);
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerGlobalAuction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerGlobalAuction_descriptor_;
  metadata.reflection = PBPlayerGlobalAuction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerGlobalAuctionSave::kLogFieldNumber;
#endif  // !_MSC_VER

PBPlayerGlobalAuctionSave::PBPlayerGlobalAuctionSave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerGlobalAuctionSave::InitAsDefaultInstance() {
}

PBPlayerGlobalAuctionSave::PBPlayerGlobalAuctionSave(const PBPlayerGlobalAuctionSave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerGlobalAuctionSave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerGlobalAuctionSave::~PBPlayerGlobalAuctionSave() {
  SharedDtor();
}

void PBPlayerGlobalAuctionSave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerGlobalAuctionSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerGlobalAuctionSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerGlobalAuctionSave_descriptor_;
}

const PBPlayerGlobalAuctionSave& PBPlayerGlobalAuctionSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerGlobalAuctionSave* PBPlayerGlobalAuctionSave::default_instance_ = NULL;

PBPlayerGlobalAuctionSave* PBPlayerGlobalAuctionSave::New() const {
  return new PBPlayerGlobalAuctionSave;
}

void PBPlayerGlobalAuctionSave::Clear() {
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerGlobalAuctionSave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBAuctionLog log = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerGlobalAuctionSave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBAuctionLog log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerGlobalAuctionSave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBAuctionLog log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerGlobalAuctionSave::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBAuctionLog log = 1;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerGlobalAuctionSave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerGlobalAuctionSave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerGlobalAuctionSave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerGlobalAuctionSave::MergeFrom(const PBPlayerGlobalAuctionSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerGlobalAuctionSave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerGlobalAuctionSave::CopyFrom(const PBPlayerGlobalAuctionSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerGlobalAuctionSave::IsInitialized() const {
  
  return true;
}

void PBPlayerGlobalAuctionSave::Swap(PBPlayerGlobalAuctionSave* other) {
  if (other != this) {
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerGlobalAuctionSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerGlobalAuctionSave_descriptor_;
  metadata.reflection = PBPlayerGlobalAuctionSave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAuctionItemAve::kItemidFieldNumber;
const int PBAuctionItemAve::kSaledcountFieldNumber;
const int PBAuctionItemAve::kSaledtimesFieldNumber;
const int PBAuctionItemAve::kAllsliverFieldNumber;
const int PBAuctionItemAve::kAvepriceFieldNumber;
const int PBAuctionItemAve::kPrice1FieldNumber;
const int PBAuctionItemAve::kPrice2FieldNumber;
#endif  // !_MSC_VER

PBAuctionItemAve::PBAuctionItemAve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAuctionItemAve::InitAsDefaultInstance() {
}

PBAuctionItemAve::PBAuctionItemAve(const PBAuctionItemAve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAuctionItemAve::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  saledcount_ = GOOGLE_ULONGLONG(0);
  saledtimes_ = GOOGLE_ULONGLONG(0);
  allsliver_ = GOOGLE_ULONGLONG(0);
  aveprice_ = 0u;
  price1_ = 0u;
  price2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAuctionItemAve::~PBAuctionItemAve() {
  SharedDtor();
}

void PBAuctionItemAve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAuctionItemAve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAuctionItemAve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAuctionItemAve_descriptor_;
}

const PBAuctionItemAve& PBAuctionItemAve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBAuctionItemAve* PBAuctionItemAve::default_instance_ = NULL;

PBAuctionItemAve* PBAuctionItemAve::New() const {
  return new PBAuctionItemAve;
}

void PBAuctionItemAve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    saledcount_ = GOOGLE_ULONGLONG(0);
    saledtimes_ = GOOGLE_ULONGLONG(0);
    allsliver_ = GOOGLE_ULONGLONG(0);
    aveprice_ = 0u;
    price1_ = 0u;
    price2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAuctionItemAve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_saledcount;
        break;
      }
      
      // optional uint64 saledcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saledcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &saledcount_)));
          set_has_saledcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_saledtimes;
        break;
      }
      
      // optional uint64 saledtimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saledtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &saledtimes_)));
          set_has_saledtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_allsliver;
        break;
      }
      
      // optional uint64 allsliver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allsliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allsliver_)));
          set_has_allsliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_aveprice;
        break;
      }
      
      // optional uint32 aveprice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aveprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aveprice_)));
          set_has_aveprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_price1;
        break;
      }
      
      // optional uint32 price1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price1_)));
          set_has_price1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_price2;
        break;
      }
      
      // optional uint32 price2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price2_)));
          set_has_price2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAuctionItemAve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint64 saledcount = 2;
  if (has_saledcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->saledcount(), output);
  }
  
  // optional uint64 saledtimes = 3;
  if (has_saledtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->saledtimes(), output);
  }
  
  // optional uint64 allsliver = 4;
  if (has_allsliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->allsliver(), output);
  }
  
  // optional uint32 aveprice = 5;
  if (has_aveprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->aveprice(), output);
  }
  
  // optional uint32 price1 = 6;
  if (has_price1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->price1(), output);
  }
  
  // optional uint32 price2 = 7;
  if (has_price2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->price2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAuctionItemAve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint64 saledcount = 2;
  if (has_saledcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->saledcount(), target);
  }
  
  // optional uint64 saledtimes = 3;
  if (has_saledtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->saledtimes(), target);
  }
  
  // optional uint64 allsliver = 4;
  if (has_allsliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->allsliver(), target);
  }
  
  // optional uint32 aveprice = 5;
  if (has_aveprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->aveprice(), target);
  }
  
  // optional uint32 price1 = 6;
  if (has_price1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->price1(), target);
  }
  
  // optional uint32 price2 = 7;
  if (has_price2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->price2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAuctionItemAve::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }
    
    // optional uint64 saledcount = 2;
    if (has_saledcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->saledcount());
    }
    
    // optional uint64 saledtimes = 3;
    if (has_saledtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->saledtimes());
    }
    
    // optional uint64 allsliver = 4;
    if (has_allsliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allsliver());
    }
    
    // optional uint32 aveprice = 5;
    if (has_aveprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aveprice());
    }
    
    // optional uint32 price1 = 6;
    if (has_price1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price1());
    }
    
    // optional uint32 price2 = 7;
    if (has_price2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAuctionItemAve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAuctionItemAve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAuctionItemAve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAuctionItemAve::MergeFrom(const PBAuctionItemAve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_saledcount()) {
      set_saledcount(from.saledcount());
    }
    if (from.has_saledtimes()) {
      set_saledtimes(from.saledtimes());
    }
    if (from.has_allsliver()) {
      set_allsliver(from.allsliver());
    }
    if (from.has_aveprice()) {
      set_aveprice(from.aveprice());
    }
    if (from.has_price1()) {
      set_price1(from.price1());
    }
    if (from.has_price2()) {
      set_price2(from.price2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAuctionItemAve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAuctionItemAve::CopyFrom(const PBAuctionItemAve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAuctionItemAve::IsInitialized() const {
  
  return true;
}

void PBAuctionItemAve::Swap(PBAuctionItemAve* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(saledcount_, other->saledcount_);
    std::swap(saledtimes_, other->saledtimes_);
    std::swap(allsliver_, other->allsliver_);
    std::swap(aveprice_, other->aveprice_);
    std::swap(price1_, other->price1_);
    std::swap(price2_, other->price2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAuctionItemAve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAuctionItemAve_descriptor_;
  metadata.reflection = PBAuctionItemAve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAuctionItemInfoEx::kDataFieldNumber;
const int PBAuctionItemInfoEx::kSalerFieldNumber;
const int PBAuctionItemInfoEx::kLockerFieldNumber;
#endif  // !_MSC_VER

PBAuctionItemInfoEx::PBAuctionItemInfoEx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAuctionItemInfoEx::InitAsDefaultInstance() {
  data_ = const_cast< ::PBAuctionItemInfo*>(&::PBAuctionItemInfo::default_instance());
  saler_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
  locker_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBAuctionItemInfoEx::PBAuctionItemInfoEx(const PBAuctionItemInfoEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAuctionItemInfoEx::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  saler_ = NULL;
  locker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAuctionItemInfoEx::~PBAuctionItemInfoEx() {
  SharedDtor();
}

void PBAuctionItemInfoEx::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete saler_;
    delete locker_;
  }
}

void PBAuctionItemInfoEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAuctionItemInfoEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAuctionItemInfoEx_descriptor_;
}

const PBAuctionItemInfoEx& PBAuctionItemInfoEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBAuctionItemInfoEx* PBAuctionItemInfoEx::default_instance_ = NULL;

PBAuctionItemInfoEx* PBAuctionItemInfoEx::New() const {
  return new PBAuctionItemInfoEx;
}

void PBAuctionItemInfoEx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::PBAuctionItemInfo::Clear();
    }
    if (has_saler()) {
      if (saler_ != NULL) saler_->::PBPlayerDisplay::Clear();
    }
    if (has_locker()) {
      if (locker_ != NULL) locker_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAuctionItemInfoEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBAuctionItemInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_saler;
        break;
      }
      
      // optional .PBPlayerDisplay saler = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_saler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_locker;
        break;
      }
      
      // optional .PBPlayerDisplay locker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAuctionItemInfoEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBAuctionItemInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }
  
  // optional .PBPlayerDisplay saler = 2;
  if (has_saler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->saler(), output);
  }
  
  // optional .PBPlayerDisplay locker = 3;
  if (has_locker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->locker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAuctionItemInfoEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBAuctionItemInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }
  
  // optional .PBPlayerDisplay saler = 2;
  if (has_saler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->saler(), target);
  }
  
  // optional .PBPlayerDisplay locker = 3;
  if (has_locker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->locker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAuctionItemInfoEx::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBAuctionItemInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
    // optional .PBPlayerDisplay saler = 2;
    if (has_saler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->saler());
    }
    
    // optional .PBPlayerDisplay locker = 3;
    if (has_locker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->locker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAuctionItemInfoEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAuctionItemInfoEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAuctionItemInfoEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAuctionItemInfoEx::MergeFrom(const PBAuctionItemInfoEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::PBAuctionItemInfo::MergeFrom(from.data());
    }
    if (from.has_saler()) {
      mutable_saler()->::PBPlayerDisplay::MergeFrom(from.saler());
    }
    if (from.has_locker()) {
      mutable_locker()->::PBPlayerDisplay::MergeFrom(from.locker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAuctionItemInfoEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAuctionItemInfoEx::CopyFrom(const PBAuctionItemInfoEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAuctionItemInfoEx::IsInitialized() const {
  
  return true;
}

void PBAuctionItemInfoEx::Swap(PBAuctionItemInfoEx* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(saler_, other->saler_);
    std::swap(locker_, other->locker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAuctionItemInfoEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAuctionItemInfoEx_descriptor_;
  metadata.reflection = PBAuctionItemInfoEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAuctionPriceData::kTimeFieldNumber;
const int PBAuctionPriceData::kItemaveFieldNumber;
#endif  // !_MSC_VER

PBAuctionPriceData::PBAuctionPriceData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAuctionPriceData::InitAsDefaultInstance() {
}

PBAuctionPriceData::PBAuctionPriceData(const PBAuctionPriceData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAuctionPriceData::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAuctionPriceData::~PBAuctionPriceData() {
  SharedDtor();
}

void PBAuctionPriceData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAuctionPriceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAuctionPriceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAuctionPriceData_descriptor_;
}

const PBAuctionPriceData& PBAuctionPriceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBAuctionPriceData* PBAuctionPriceData::default_instance_ = NULL;

PBAuctionPriceData* PBAuctionPriceData::New() const {
  return new PBAuctionPriceData;
}

void PBAuctionPriceData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_ULONGLONG(0);
  }
  itemave_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAuctionPriceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemave;
        break;
      }
      
      // repeated .PBAuctionItemAve itemave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemave:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemave()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemave;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAuctionPriceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }
  
  // repeated .PBAuctionItemAve itemave = 2;
  for (int i = 0; i < this->itemave_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemave(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAuctionPriceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }
  
  // repeated .PBAuctionItemAve itemave = 2;
  for (int i = 0; i < this->itemave_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemave(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAuctionPriceData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }
    
  }
  // repeated .PBAuctionItemAve itemave = 2;
  total_size += 1 * this->itemave_size();
  for (int i = 0; i < this->itemave_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemave(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAuctionPriceData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAuctionPriceData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAuctionPriceData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAuctionPriceData::MergeFrom(const PBAuctionPriceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemave_.MergeFrom(from.itemave_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAuctionPriceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAuctionPriceData::CopyFrom(const PBAuctionPriceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAuctionPriceData::IsInitialized() const {
  
  return true;
}

void PBAuctionPriceData::Swap(PBAuctionPriceData* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    itemave_.Swap(&other->itemave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAuctionPriceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAuctionPriceData_descriptor_;
  metadata.reflection = PBAuctionPriceData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerGlobal::kSalemoneyFieldNumber;
const int PBPlayerGlobal::kAuctionFieldNumber;
#endif  // !_MSC_VER

PBPlayerGlobal::PBPlayerGlobal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerGlobal::InitAsDefaultInstance() {
  salemoney_ = const_cast< ::PBPlayerGlobalSaleMoney*>(&::PBPlayerGlobalSaleMoney::default_instance());
  auction_ = const_cast< ::PBPlayerGlobalAuction*>(&::PBPlayerGlobalAuction::default_instance());
}

PBPlayerGlobal::PBPlayerGlobal(const PBPlayerGlobal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerGlobal::SharedCtor() {
  _cached_size_ = 0;
  salemoney_ = NULL;
  auction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerGlobal::~PBPlayerGlobal() {
  SharedDtor();
}

void PBPlayerGlobal::SharedDtor() {
  if (this != default_instance_) {
    delete salemoney_;
    delete auction_;
  }
}

void PBPlayerGlobal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerGlobal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerGlobal_descriptor_;
}

const PBPlayerGlobal& PBPlayerGlobal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerGlobal* PBPlayerGlobal::default_instance_ = NULL;

PBPlayerGlobal* PBPlayerGlobal::New() const {
  return new PBPlayerGlobal;
}

void PBPlayerGlobal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_salemoney()) {
      if (salemoney_ != NULL) salemoney_->::PBPlayerGlobalSaleMoney::Clear();
    }
    if (has_auction()) {
      if (auction_ != NULL) auction_->::PBPlayerGlobalAuction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerGlobal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerGlobalSaleMoney salemoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salemoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_auction;
        break;
      }
      
      // optional .PBPlayerGlobalAuction auction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerGlobal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerGlobalSaleMoney salemoney = 1;
  if (has_salemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->salemoney(), output);
  }
  
  // optional .PBPlayerGlobalAuction auction = 2;
  if (has_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->auction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerGlobal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerGlobalSaleMoney salemoney = 1;
  if (has_salemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->salemoney(), target);
  }
  
  // optional .PBPlayerGlobalAuction auction = 2;
  if (has_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->auction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerGlobal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerGlobalSaleMoney salemoney = 1;
    if (has_salemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salemoney());
    }
    
    // optional .PBPlayerGlobalAuction auction = 2;
    if (has_auction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerGlobal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerGlobal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerGlobal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerGlobal::MergeFrom(const PBPlayerGlobal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_salemoney()) {
      mutable_salemoney()->::PBPlayerGlobalSaleMoney::MergeFrom(from.salemoney());
    }
    if (from.has_auction()) {
      mutable_auction()->::PBPlayerGlobalAuction::MergeFrom(from.auction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerGlobal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerGlobal::CopyFrom(const PBPlayerGlobal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerGlobal::IsInitialized() const {
  
  return true;
}

void PBPlayerGlobal::Swap(PBPlayerGlobal* other) {
  if (other != this) {
    std::swap(salemoney_, other->salemoney_);
    std::swap(auction_, other->auction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerGlobal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerGlobal_descriptor_;
  metadata.reflection = PBPlayerGlobal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerGlobalData::kBaseinfoFieldNumber;
const int PBPlayerGlobalData::kSalemoneyFieldNumber;
const int PBPlayerGlobalData::kAuctionFieldNumber;
const int PBPlayerGlobalData::kToplistFieldNumber;
#endif  // !_MSC_VER

PBPlayerGlobalData::PBPlayerGlobalData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerGlobalData::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::PBPlayerGlobalBase*>(&::PBPlayerGlobalBase::default_instance());
  salemoney_ = const_cast< ::PBPlayerGlobalSaleMoneySave*>(&::PBPlayerGlobalSaleMoneySave::default_instance());
  auction_ = const_cast< ::PBPlayerGlobalAuctionSave*>(&::PBPlayerGlobalAuctionSave::default_instance());
  toplist_ = const_cast< ::PBTopListData*>(&::PBTopListData::default_instance());
}

PBPlayerGlobalData::PBPlayerGlobalData(const PBPlayerGlobalData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerGlobalData::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  salemoney_ = NULL;
  auction_ = NULL;
  toplist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerGlobalData::~PBPlayerGlobalData() {
  SharedDtor();
}

void PBPlayerGlobalData::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete salemoney_;
    delete auction_;
    delete toplist_;
  }
}

void PBPlayerGlobalData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerGlobalData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerGlobalData_descriptor_;
}

const PBPlayerGlobalData& PBPlayerGlobalData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerGlobalData* PBPlayerGlobalData::default_instance_ = NULL;

PBPlayerGlobalData* PBPlayerGlobalData::New() const {
  return new PBPlayerGlobalData;
}

void PBPlayerGlobalData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::PBPlayerGlobalBase::Clear();
    }
    if (has_salemoney()) {
      if (salemoney_ != NULL) salemoney_->::PBPlayerGlobalSaleMoneySave::Clear();
    }
    if (has_auction()) {
      if (auction_ != NULL) auction_->::PBPlayerGlobalAuctionSave::Clear();
    }
    if (has_toplist()) {
      if (toplist_ != NULL) toplist_->::PBTopListData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerGlobalData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerGlobalBase baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_salemoney;
        break;
      }
      
      // optional .PBPlayerGlobalSaleMoneySave salemoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_salemoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salemoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_auction;
        break;
      }
      
      // optional .PBPlayerGlobalAuctionSave auction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_toplist;
        break;
      }
      
      // optional .PBTopListData toplist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toplist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerGlobalData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerGlobalBase baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }
  
  // optional .PBPlayerGlobalSaleMoneySave salemoney = 2;
  if (has_salemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->salemoney(), output);
  }
  
  // optional .PBPlayerGlobalAuctionSave auction = 3;
  if (has_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->auction(), output);
  }
  
  // optional .PBTopListData toplist = 4;
  if (has_toplist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->toplist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerGlobalData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerGlobalBase baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }
  
  // optional .PBPlayerGlobalSaleMoneySave salemoney = 2;
  if (has_salemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->salemoney(), target);
  }
  
  // optional .PBPlayerGlobalAuctionSave auction = 3;
  if (has_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->auction(), target);
  }
  
  // optional .PBTopListData toplist = 4;
  if (has_toplist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->toplist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerGlobalData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerGlobalBase baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional .PBPlayerGlobalSaleMoneySave salemoney = 2;
    if (has_salemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salemoney());
    }
    
    // optional .PBPlayerGlobalAuctionSave auction = 3;
    if (has_auction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auction());
    }
    
    // optional .PBTopListData toplist = 4;
    if (has_toplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toplist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerGlobalData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerGlobalData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerGlobalData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerGlobalData::MergeFrom(const PBPlayerGlobalData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::PBPlayerGlobalBase::MergeFrom(from.baseinfo());
    }
    if (from.has_salemoney()) {
      mutable_salemoney()->::PBPlayerGlobalSaleMoneySave::MergeFrom(from.salemoney());
    }
    if (from.has_auction()) {
      mutable_auction()->::PBPlayerGlobalAuctionSave::MergeFrom(from.auction());
    }
    if (from.has_toplist()) {
      mutable_toplist()->::PBTopListData::MergeFrom(from.toplist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerGlobalData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerGlobalData::CopyFrom(const PBPlayerGlobalData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerGlobalData::IsInitialized() const {
  
  return true;
}

void PBPlayerGlobalData::Swap(PBPlayerGlobalData* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(salemoney_, other->salemoney_);
    std::swap(auction_, other->auction_);
    std::swap(toplist_, other->toplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerGlobalData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerGlobalData_descriptor_;
  metadata.reflection = PBPlayerGlobalData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBItemUseCount::kItemIdFieldNumber;
const int PBItemUseCount::kDayusecountFieldNumber;
const int PBItemUseCount::kWeekusecountFieldNumber;
const int PBItemUseCount::kMonthusecountFieldNumber;
#endif  // !_MSC_VER

PBItemUseCount::PBItemUseCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemUseCount::InitAsDefaultInstance() {
}

PBItemUseCount::PBItemUseCount(const PBItemUseCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemUseCount::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  dayusecount_ = 0u;
  weekusecount_ = 0u;
  monthusecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemUseCount::~PBItemUseCount() {
  SharedDtor();
}

void PBItemUseCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBItemUseCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBItemUseCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemUseCount_descriptor_;
}

const PBItemUseCount& PBItemUseCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBItemUseCount* PBItemUseCount::default_instance_ = NULL;

PBItemUseCount* PBItemUseCount::New() const {
  return new PBItemUseCount;
}

void PBItemUseCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    dayusecount_ = 0u;
    weekusecount_ = 0u;
    monthusecount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemUseCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dayusecount;
        break;
      }
      
      // optional uint32 dayusecount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayusecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayusecount_)));
          set_has_dayusecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weekusecount;
        break;
      }
      
      // optional uint32 weekusecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekusecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekusecount_)));
          set_has_weekusecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_monthusecount;
        break;
      }
      
      // optional uint32 monthusecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monthusecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monthusecount_)));
          set_has_monthusecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemUseCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 dayusecount = 2;
  if (has_dayusecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dayusecount(), output);
  }
  
  // optional uint32 weekusecount = 3;
  if (has_weekusecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->weekusecount(), output);
  }
  
  // optional uint32 monthusecount = 4;
  if (has_monthusecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->monthusecount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemUseCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 dayusecount = 2;
  if (has_dayusecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dayusecount(), target);
  }
  
  // optional uint32 weekusecount = 3;
  if (has_weekusecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->weekusecount(), target);
  }
  
  // optional uint32 monthusecount = 4;
  if (has_monthusecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->monthusecount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemUseCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 dayusecount = 2;
    if (has_dayusecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayusecount());
    }
    
    // optional uint32 weekusecount = 3;
    if (has_weekusecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekusecount());
    }
    
    // optional uint32 monthusecount = 4;
    if (has_monthusecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monthusecount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBItemUseCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemUseCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemUseCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemUseCount::MergeFrom(const PBItemUseCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_dayusecount()) {
      set_dayusecount(from.dayusecount());
    }
    if (from.has_weekusecount()) {
      set_weekusecount(from.weekusecount());
    }
    if (from.has_monthusecount()) {
      set_monthusecount(from.monthusecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemUseCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemUseCount::CopyFrom(const PBItemUseCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBItemUseCount::IsInitialized() const {
  
  return true;
}

void PBItemUseCount::Swap(PBItemUseCount* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(dayusecount_, other->dayusecount_);
    std::swap(weekusecount_, other->weekusecount_);
    std::swap(monthusecount_, other->monthusecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBItemUseCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBItemUseCount_descriptor_;
  metadata.reflection = PBItemUseCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBEquipMakeSkilled::kEquipTypeFieldNumber;
const int PBEquipMakeSkilled::kSkilledLevelFieldNumber;
const int PBEquipMakeSkilled::kSkilledPointFieldNumber;
#endif  // !_MSC_VER

PBEquipMakeSkilled::PBEquipMakeSkilled()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEquipMakeSkilled::InitAsDefaultInstance() {
}

PBEquipMakeSkilled::PBEquipMakeSkilled(const PBEquipMakeSkilled& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEquipMakeSkilled::SharedCtor() {
  _cached_size_ = 0;
  equiptype_ = 0u;
  skilledlevel_ = 0u;
  skilledpoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEquipMakeSkilled::~PBEquipMakeSkilled() {
  SharedDtor();
}

void PBEquipMakeSkilled::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBEquipMakeSkilled::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBEquipMakeSkilled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEquipMakeSkilled_descriptor_;
}

const PBEquipMakeSkilled& PBEquipMakeSkilled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBEquipMakeSkilled* PBEquipMakeSkilled::default_instance_ = NULL;

PBEquipMakeSkilled* PBEquipMakeSkilled::New() const {
  return new PBEquipMakeSkilled;
}

void PBEquipMakeSkilled::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equiptype_ = 0u;
    skilledlevel_ = 0u;
    skilledpoint_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEquipMakeSkilled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 equipType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiptype_)));
          set_has_equiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skilledLevel;
        break;
      }
      
      // optional uint32 skilledLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilledLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilledlevel_)));
          set_has_skilledlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skilledPoint;
        break;
      }
      
      // optional uint32 skilledPoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilledPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilledpoint_)));
          set_has_skilledpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEquipMakeSkilled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 equipType = 1;
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equiptype(), output);
  }
  
  // optional uint32 skilledLevel = 2;
  if (has_skilledlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skilledlevel(), output);
  }
  
  // optional uint32 skilledPoint = 3;
  if (has_skilledpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skilledpoint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEquipMakeSkilled::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 equipType = 1;
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equiptype(), target);
  }
  
  // optional uint32 skilledLevel = 2;
  if (has_skilledlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skilledlevel(), target);
  }
  
  // optional uint32 skilledPoint = 3;
  if (has_skilledpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skilledpoint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEquipMakeSkilled::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 equipType = 1;
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiptype());
    }
    
    // optional uint32 skilledLevel = 2;
    if (has_skilledlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilledlevel());
    }
    
    // optional uint32 skilledPoint = 3;
    if (has_skilledpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilledpoint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBEquipMakeSkilled::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEquipMakeSkilled* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEquipMakeSkilled*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEquipMakeSkilled::MergeFrom(const PBEquipMakeSkilled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
    if (from.has_skilledlevel()) {
      set_skilledlevel(from.skilledlevel());
    }
    if (from.has_skilledpoint()) {
      set_skilledpoint(from.skilledpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEquipMakeSkilled::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipMakeSkilled::CopyFrom(const PBEquipMakeSkilled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBEquipMakeSkilled::IsInitialized() const {
  
  return true;
}

void PBEquipMakeSkilled::Swap(PBEquipMakeSkilled* other) {
  if (other != this) {
    std::swap(equiptype_, other->equiptype_);
    std::swap(skilledlevel_, other->skilledlevel_);
    std::swap(skilledpoint_, other->skilledpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBEquipMakeSkilled::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBEquipMakeSkilled_descriptor_;
  metadata.reflection = PBEquipMakeSkilled_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBEquipMakeVigour::kVigourFieldNumber;
const int PBEquipMakeVigour::kLastAddTimeFieldNumber;
const int PBEquipMakeVigour::kVigourFrozenFieldNumber;
#endif  // !_MSC_VER

PBEquipMakeVigour::PBEquipMakeVigour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEquipMakeVigour::InitAsDefaultInstance() {
}

PBEquipMakeVigour::PBEquipMakeVigour(const PBEquipMakeVigour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEquipMakeVigour::SharedCtor() {
  _cached_size_ = 0;
  vigour_ = 0u;
  lastaddtime_ = GOOGLE_ULONGLONG(0);
  vigourfrozen_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEquipMakeVigour::~PBEquipMakeVigour() {
  SharedDtor();
}

void PBEquipMakeVigour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBEquipMakeVigour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBEquipMakeVigour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEquipMakeVigour_descriptor_;
}

const PBEquipMakeVigour& PBEquipMakeVigour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBEquipMakeVigour* PBEquipMakeVigour::default_instance_ = NULL;

PBEquipMakeVigour* PBEquipMakeVigour::New() const {
  return new PBEquipMakeVigour;
}

void PBEquipMakeVigour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vigour_ = 0u;
    lastaddtime_ = GOOGLE_ULONGLONG(0);
    vigourfrozen_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEquipMakeVigour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vigour = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vigour_)));
          set_has_vigour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastAddTime;
        break;
      }
      
      // optional uint64 lastAddTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastAddTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastaddtime_)));
          set_has_lastaddtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vigourFrozen;
        break;
      }
      
      // optional uint32 vigourFrozen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vigourFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vigourfrozen_)));
          set_has_vigourfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEquipMakeVigour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 vigour = 1;
  if (has_vigour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vigour(), output);
  }
  
  // optional uint64 lastAddTime = 2;
  if (has_lastaddtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastaddtime(), output);
  }
  
  // optional uint32 vigourFrozen = 3;
  if (has_vigourfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vigourfrozen(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEquipMakeVigour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 vigour = 1;
  if (has_vigour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vigour(), target);
  }
  
  // optional uint64 lastAddTime = 2;
  if (has_lastaddtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastaddtime(), target);
  }
  
  // optional uint32 vigourFrozen = 3;
  if (has_vigourfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vigourfrozen(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEquipMakeVigour::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 vigour = 1;
    if (has_vigour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vigour());
    }
    
    // optional uint64 lastAddTime = 2;
    if (has_lastaddtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastaddtime());
    }
    
    // optional uint32 vigourFrozen = 3;
    if (has_vigourfrozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vigourfrozen());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBEquipMakeVigour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEquipMakeVigour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEquipMakeVigour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEquipMakeVigour::MergeFrom(const PBEquipMakeVigour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vigour()) {
      set_vigour(from.vigour());
    }
    if (from.has_lastaddtime()) {
      set_lastaddtime(from.lastaddtime());
    }
    if (from.has_vigourfrozen()) {
      set_vigourfrozen(from.vigourfrozen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEquipMakeVigour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipMakeVigour::CopyFrom(const PBEquipMakeVigour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBEquipMakeVigour::IsInitialized() const {
  
  return true;
}

void PBEquipMakeVigour::Swap(PBEquipMakeVigour* other) {
  if (other != this) {
    std::swap(vigour_, other->vigour_);
    std::swap(lastaddtime_, other->lastaddtime_);
    std::swap(vigourfrozen_, other->vigourfrozen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBEquipMakeVigour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBEquipMakeVigour_descriptor_;
  metadata.reflection = PBEquipMakeVigour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBEquipMakeOEM::kMakeIDFieldNumber;
const int PBEquipMakeOEM::kFeeFieldNumber;
const int PBEquipMakeOEM::kCountFieldNumber;
const int PBEquipMakeOEM::kCountUsedFieldNumber;
const int PBEquipMakeOEM::kValidMakeIDFieldNumber;
const int PBEquipMakeOEM::kCountRealFieldNumber;
#endif  // !_MSC_VER

PBEquipMakeOEM::PBEquipMakeOEM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEquipMakeOEM::InitAsDefaultInstance() {
}

PBEquipMakeOEM::PBEquipMakeOEM(const PBEquipMakeOEM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEquipMakeOEM::SharedCtor() {
  _cached_size_ = 0;
  makeid_ = 0u;
  fee_ = 0u;
  count_ = 0u;
  countused_ = 0u;
  countreal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEquipMakeOEM::~PBEquipMakeOEM() {
  SharedDtor();
}

void PBEquipMakeOEM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBEquipMakeOEM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBEquipMakeOEM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEquipMakeOEM_descriptor_;
}

const PBEquipMakeOEM& PBEquipMakeOEM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBEquipMakeOEM* PBEquipMakeOEM::default_instance_ = NULL;

PBEquipMakeOEM* PBEquipMakeOEM::New() const {
  return new PBEquipMakeOEM;
}

void PBEquipMakeOEM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    makeid_ = 0u;
    fee_ = 0u;
    count_ = 0u;
    countused_ = 0u;
    countreal_ = 0u;
  }
  validmakeid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEquipMakeOEM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 makeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &makeid_)));
          set_has_makeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fee;
        break;
      }
      
      // optional uint32 fee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fee_)));
          set_has_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_countUsed;
        break;
      }
      
      // optional uint32 countUsed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countUsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countused_)));
          set_has_countused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_validMakeID;
        break;
      }
      
      // repeated uint32 validMakeID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validMakeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_validmakeid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_validmakeid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_validMakeID;
        if (input->ExpectTag(48)) goto parse_countReal;
        break;
      }
      
      // optional uint32 countReal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countReal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countreal_)));
          set_has_countreal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEquipMakeOEM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 makeID = 1;
  if (has_makeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->makeid(), output);
  }
  
  // optional uint32 fee = 2;
  if (has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fee(), output);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  // optional uint32 countUsed = 4;
  if (has_countused()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->countused(), output);
  }
  
  // repeated uint32 validMakeID = 5;
  for (int i = 0; i < this->validmakeid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->validmakeid(i), output);
  }
  
  // optional uint32 countReal = 6;
  if (has_countreal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->countreal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEquipMakeOEM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 makeID = 1;
  if (has_makeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->makeid(), target);
  }
  
  // optional uint32 fee = 2;
  if (has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fee(), target);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  // optional uint32 countUsed = 4;
  if (has_countused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->countused(), target);
  }
  
  // repeated uint32 validMakeID = 5;
  for (int i = 0; i < this->validmakeid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->validmakeid(i), target);
  }
  
  // optional uint32 countReal = 6;
  if (has_countreal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->countreal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEquipMakeOEM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 makeID = 1;
    if (has_makeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->makeid());
    }
    
    // optional uint32 fee = 2;
    if (has_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fee());
    }
    
    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 countUsed = 4;
    if (has_countused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countused());
    }
    
    // optional uint32 countReal = 6;
    if (has_countreal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countreal());
    }
    
  }
  // repeated uint32 validMakeID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->validmakeid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->validmakeid(i));
    }
    total_size += 1 * this->validmakeid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBEquipMakeOEM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEquipMakeOEM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEquipMakeOEM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEquipMakeOEM::MergeFrom(const PBEquipMakeOEM& from) {
  GOOGLE_CHECK_NE(&from, this);
  validmakeid_.MergeFrom(from.validmakeid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_makeid()) {
      set_makeid(from.makeid());
    }
    if (from.has_fee()) {
      set_fee(from.fee());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_countused()) {
      set_countused(from.countused());
    }
    if (from.has_countreal()) {
      set_countreal(from.countreal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEquipMakeOEM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquipMakeOEM::CopyFrom(const PBEquipMakeOEM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBEquipMakeOEM::IsInitialized() const {
  
  return true;
}

void PBEquipMakeOEM::Swap(PBEquipMakeOEM* other) {
  if (other != this) {
    std::swap(makeid_, other->makeid_);
    std::swap(fee_, other->fee_);
    std::swap(count_, other->count_);
    std::swap(countused_, other->countused_);
    validmakeid_.Swap(&other->validmakeid_);
    std::swap(countreal_, other->countreal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBEquipMakeOEM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBEquipMakeOEM_descriptor_;
  metadata.reflection = PBEquipMakeOEM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerBag::kSaveorderFieldNumber;
const int PBPlayerBag::kBagListFieldNumber;
const int PBPlayerBag::kEquipListFieldNumber;
const int PBPlayerBag::kUsecountFieldNumber;
const int PBPlayerBag::kSkilledFieldNumber;
const int PBPlayerBag::kVigourFieldNumber;
const int PBPlayerBag::kOemsFieldNumber;
#endif  // !_MSC_VER

PBPlayerBag::PBPlayerBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerBag::InitAsDefaultInstance() {
  vigour_ = const_cast< ::PBEquipMakeVigour*>(&::PBEquipMakeVigour::default_instance());
}

PBPlayerBag::PBPlayerBag(const PBPlayerBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerBag::SharedCtor() {
  _cached_size_ = 0;
  saveorder_ = 0u;
  vigour_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerBag::~PBPlayerBag() {
  SharedDtor();
}

void PBPlayerBag::SharedDtor() {
  if (this != default_instance_) {
    delete vigour_;
  }
}

void PBPlayerBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerBag_descriptor_;
}

const PBPlayerBag& PBPlayerBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerBag* PBPlayerBag::default_instance_ = NULL;

PBPlayerBag* PBPlayerBag::New() const {
  return new PBPlayerBag;
}

void PBPlayerBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveorder_ = 0u;
    if (has_vigour()) {
      if (vigour_ != NULL) vigour_->::PBEquipMakeVigour::Clear();
    }
  }
  baglist_.Clear();
  equiplist_.Clear();
  usecount_.Clear();
  skilled_.Clear();
  oems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveorder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveorder_)));
          set_has_saveorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bagList;
        break;
      }
      
      // repeated .PBItem bagList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bagList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bagList;
        if (input->ExpectTag(26)) goto parse_equipList;
        break;
      }
      
      // repeated .PBItem equipList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equiplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equipList;
        if (input->ExpectTag(34)) goto parse_usecount;
        break;
      }
      
      // repeated .PBItemUseCount usecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usecount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usecount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_usecount;
        if (input->ExpectTag(42)) goto parse_skilled;
        break;
      }
      
      // repeated .PBEquipMakeSkilled skilled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skilled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilled()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skilled;
        if (input->ExpectTag(50)) goto parse_vigour;
        break;
      }
      
      // optional .PBEquipMakeVigour vigour = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vigour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vigour()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_oems;
        break;
      }
      
      // repeated .PBEquipMakeOEM oems = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_oems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_oems;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveorder(), output);
  }
  
  // repeated .PBItem bagList = 2;
  for (int i = 0; i < this->baglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->baglist(i), output);
  }
  
  // repeated .PBItem equipList = 3;
  for (int i = 0; i < this->equiplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equiplist(i), output);
  }
  
  // repeated .PBItemUseCount usecount = 4;
  for (int i = 0; i < this->usecount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->usecount(i), output);
  }
  
  // repeated .PBEquipMakeSkilled skilled = 5;
  for (int i = 0; i < this->skilled_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skilled(i), output);
  }
  
  // optional .PBEquipMakeVigour vigour = 6;
  if (has_vigour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vigour(), output);
  }
  
  // repeated .PBEquipMakeOEM oems = 7;
  for (int i = 0; i < this->oems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->oems(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveorder(), target);
  }
  
  // repeated .PBItem bagList = 2;
  for (int i = 0; i < this->baglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->baglist(i), target);
  }
  
  // repeated .PBItem equipList = 3;
  for (int i = 0; i < this->equiplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equiplist(i), target);
  }
  
  // repeated .PBItemUseCount usecount = 4;
  for (int i = 0; i < this->usecount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->usecount(i), target);
  }
  
  // repeated .PBEquipMakeSkilled skilled = 5;
  for (int i = 0; i < this->skilled_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skilled(i), target);
  }
  
  // optional .PBEquipMakeVigour vigour = 6;
  if (has_vigour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->vigour(), target);
  }
  
  // repeated .PBEquipMakeOEM oems = 7;
  for (int i = 0; i < this->oems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->oems(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerBag::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveorder = 1;
    if (has_saveorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveorder());
    }
    
    // optional .PBEquipMakeVigour vigour = 6;
    if (has_vigour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vigour());
    }
    
  }
  // repeated .PBItem bagList = 2;
  total_size += 1 * this->baglist_size();
  for (int i = 0; i < this->baglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baglist(i));
  }
  
  // repeated .PBItem equipList = 3;
  total_size += 1 * this->equiplist_size();
  for (int i = 0; i < this->equiplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equiplist(i));
  }
  
  // repeated .PBItemUseCount usecount = 4;
  total_size += 1 * this->usecount_size();
  for (int i = 0; i < this->usecount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usecount(i));
  }
  
  // repeated .PBEquipMakeSkilled skilled = 5;
  total_size += 1 * this->skilled_size();
  for (int i = 0; i < this->skilled_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilled(i));
  }
  
  // repeated .PBEquipMakeOEM oems = 7;
  total_size += 1 * this->oems_size();
  for (int i = 0; i < this->oems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->oems(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerBag::MergeFrom(const PBPlayerBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  baglist_.MergeFrom(from.baglist_);
  equiplist_.MergeFrom(from.equiplist_);
  usecount_.MergeFrom(from.usecount_);
  skilled_.MergeFrom(from.skilled_);
  oems_.MergeFrom(from.oems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveorder()) {
      set_saveorder(from.saveorder());
    }
    if (from.has_vigour()) {
      mutable_vigour()->::PBEquipMakeVigour::MergeFrom(from.vigour());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerBag::CopyFrom(const PBPlayerBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerBag::IsInitialized() const {
  
  return true;
}

void PBPlayerBag::Swap(PBPlayerBag* other) {
  if (other != this) {
    std::swap(saveorder_, other->saveorder_);
    baglist_.Swap(&other->baglist_);
    equiplist_.Swap(&other->equiplist_);
    usecount_.Swap(&other->usecount_);
    skilled_.Swap(&other->skilled_);
    std::swap(vigour_, other->vigour_);
    oems_.Swap(&other->oems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerBag_descriptor_;
  metadata.reflection = PBPlayerBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGoods::kStoreFieldNumber;
const int PBGoods::kIndexFieldNumber;
const int PBGoods::kCountFieldNumber;
const int PBGoods::kTimeFieldNumber;
#endif  // !_MSC_VER

PBGoods::PBGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGoods::InitAsDefaultInstance() {
}

PBGoods::PBGoods(const PBGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGoods::SharedCtor() {
  _cached_size_ = 0;
  store_ = 0u;
  index_ = 0u;
  count_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGoods::~PBGoods() {
  SharedDtor();
}

void PBGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGoods_descriptor_;
}

const PBGoods& PBGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBGoods* PBGoods::default_instance_ = NULL;

PBGoods* PBGoods::New() const {
  return new PBGoods;
}

void PBGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    store_ = 0u;
    index_ = 0u;
    count_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 store = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_)));
          set_has_store();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 store = 1;
  if (has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->store(), output);
  }
  
  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 store = 1;
  if (has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->store(), target);
  }
  
  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGoods::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 store = 1;
    if (has_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store());
    }
    
    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGoods::MergeFrom(const PBGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store()) {
      set_store(from.store());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGoods::CopyFrom(const PBGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGoods::IsInitialized() const {
  
  return true;
}

void PBGoods::Swap(PBGoods* other) {
  if (other != this) {
    std::swap(store_, other->store_);
    std::swap(index_, other->index_);
    std::swap(count_, other->count_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGoods_descriptor_;
  metadata.reflection = PBGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerStore::kSaveorderFieldNumber;
const int PBPlayerStore::kGoodsFieldNumber;
#endif  // !_MSC_VER

PBPlayerStore::PBPlayerStore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerStore::InitAsDefaultInstance() {
}

PBPlayerStore::PBPlayerStore(const PBPlayerStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerStore::SharedCtor() {
  _cached_size_ = 0;
  saveorder_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerStore::~PBPlayerStore() {
  SharedDtor();
}

void PBPlayerStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerStore_descriptor_;
}

const PBPlayerStore& PBPlayerStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerStore* PBPlayerStore::default_instance_ = NULL;

PBPlayerStore* PBPlayerStore::New() const {
  return new PBPlayerStore;
}

void PBPlayerStore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveorder_ = 0u;
  }
  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveorder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveorder_)));
          set_has_saveorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goods;
        break;
      }
      
      // repeated .PBGoods goods = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goods;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveorder(), output);
  }
  
  // repeated .PBGoods goods = 2;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goods(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveorder(), target);
  }
  
  // repeated .PBGoods goods = 2;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goods(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerStore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveorder = 1;
    if (has_saveorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveorder());
    }
    
  }
  // repeated .PBGoods goods = 2;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerStore::MergeFrom(const PBPlayerStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveorder()) {
      set_saveorder(from.saveorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerStore::CopyFrom(const PBPlayerStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerStore::IsInitialized() const {
  
  return true;
}

void PBPlayerStore::Swap(PBPlayerStore* other) {
  if (other != this) {
    std::swap(saveorder_, other->saveorder_);
    goods_.Swap(&other->goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerStore_descriptor_;
  metadata.reflection = PBPlayerStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBClientData::kSaveorderFieldNumber;
const int PBClientData::kClientdataFieldNumber;
#endif  // !_MSC_VER

PBClientData::PBClientData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClientData::InitAsDefaultInstance() {
}

PBClientData::PBClientData(const PBClientData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClientData::SharedCtor() {
  _cached_size_ = 0;
  saveorder_ = 0u;
  clientdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClientData::~PBClientData() {
  SharedDtor();
}

void PBClientData::SharedDtor() {
  if (clientdata_ != &::google::protobuf::internal::kEmptyString) {
    delete clientdata_;
  }
  if (this != default_instance_) {
  }
}

void PBClientData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClientData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClientData_descriptor_;
}

const PBClientData& PBClientData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBClientData* PBClientData::default_instance_ = NULL;

PBClientData* PBClientData::New() const {
  return new PBClientData;
}

void PBClientData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveorder_ = 0u;
    if (has_clientdata()) {
      if (clientdata_ != &::google::protobuf::internal::kEmptyString) {
        clientdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClientData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveorder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveorder_)));
          set_has_saveorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientdata;
        break;
      }
      
      // optional bytes clientdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBClientData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveorder(), output);
  }
  
  // optional bytes clientdata = 2;
  if (has_clientdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->clientdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClientData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveorder(), target);
  }
  
  // optional bytes clientdata = 2;
  if (has_clientdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->clientdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClientData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveorder = 1;
    if (has_saveorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveorder());
    }
    
    // optional bytes clientdata = 2;
    if (has_clientdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clientdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClientData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClientData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClientData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClientData::MergeFrom(const PBClientData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveorder()) {
      set_saveorder(from.saveorder());
    }
    if (from.has_clientdata()) {
      set_clientdata(from.clientdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClientData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClientData::CopyFrom(const PBClientData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClientData::IsInitialized() const {
  
  return true;
}

void PBClientData::Swap(PBClientData* other) {
  if (other != this) {
    std::swap(saveorder_, other->saveorder_);
    std::swap(clientdata_, other->clientdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClientData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClientData_descriptor_;
  metadata.reflection = PBClientData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailSaleMoneyBuy::kSalerFieldNumber;
const int PBMailSaleMoneyBuy::kGetbindcashFieldNumber;
const int PBMailSaleMoneyBuy::kExpendsliverFieldNumber;
const int PBMailSaleMoneyBuy::kEconomizesliverFieldNumber;
#endif  // !_MSC_VER

PBMailSaleMoneyBuy::PBMailSaleMoneyBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailSaleMoneyBuy::InitAsDefaultInstance() {
  saler_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBMailSaleMoneyBuy::PBMailSaleMoneyBuy(const PBMailSaleMoneyBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailSaleMoneyBuy::SharedCtor() {
  _cached_size_ = 0;
  saler_ = NULL;
  getbindcash_ = GOOGLE_ULONGLONG(0);
  expendsliver_ = GOOGLE_ULONGLONG(0);
  economizesliver_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailSaleMoneyBuy::~PBMailSaleMoneyBuy() {
  SharedDtor();
}

void PBMailSaleMoneyBuy::SharedDtor() {
  if (this != default_instance_) {
    delete saler_;
  }
}

void PBMailSaleMoneyBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailSaleMoneyBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailSaleMoneyBuy_descriptor_;
}

const PBMailSaleMoneyBuy& PBMailSaleMoneyBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailSaleMoneyBuy* PBMailSaleMoneyBuy::default_instance_ = NULL;

PBMailSaleMoneyBuy* PBMailSaleMoneyBuy::New() const {
  return new PBMailSaleMoneyBuy;
}

void PBMailSaleMoneyBuy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_saler()) {
      if (saler_ != NULL) saler_->::PBPlayerDisplay::Clear();
    }
    getbindcash_ = GOOGLE_ULONGLONG(0);
    expendsliver_ = GOOGLE_ULONGLONG(0);
    economizesliver_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailSaleMoneyBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay saler = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_saler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getbindcash;
        break;
      }
      
      // optional uint64 getbindcash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getbindcash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &getbindcash_)));
          set_has_getbindcash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expendsliver;
        break;
      }
      
      // optional uint64 expendsliver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expendsliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expendsliver_)));
          set_has_expendsliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_economizesliver;
        break;
      }
      
      // optional uint64 economizesliver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_economizesliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &economizesliver_)));
          set_has_economizesliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailSaleMoneyBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay saler = 1;
  if (has_saler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->saler(), output);
  }
  
  // optional uint64 getbindcash = 2;
  if (has_getbindcash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->getbindcash(), output);
  }
  
  // optional uint64 expendsliver = 3;
  if (has_expendsliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->expendsliver(), output);
  }
  
  // optional uint64 economizesliver = 4;
  if (has_economizesliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->economizesliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailSaleMoneyBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay saler = 1;
  if (has_saler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->saler(), target);
  }
  
  // optional uint64 getbindcash = 2;
  if (has_getbindcash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->getbindcash(), target);
  }
  
  // optional uint64 expendsliver = 3;
  if (has_expendsliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->expendsliver(), target);
  }
  
  // optional uint64 economizesliver = 4;
  if (has_economizesliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->economizesliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailSaleMoneyBuy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay saler = 1;
    if (has_saler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->saler());
    }
    
    // optional uint64 getbindcash = 2;
    if (has_getbindcash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->getbindcash());
    }
    
    // optional uint64 expendsliver = 3;
    if (has_expendsliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expendsliver());
    }
    
    // optional uint64 economizesliver = 4;
    if (has_economizesliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->economizesliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailSaleMoneyBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailSaleMoneyBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailSaleMoneyBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailSaleMoneyBuy::MergeFrom(const PBMailSaleMoneyBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saler()) {
      mutable_saler()->::PBPlayerDisplay::MergeFrom(from.saler());
    }
    if (from.has_getbindcash()) {
      set_getbindcash(from.getbindcash());
    }
    if (from.has_expendsliver()) {
      set_expendsliver(from.expendsliver());
    }
    if (from.has_economizesliver()) {
      set_economizesliver(from.economizesliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailSaleMoneyBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailSaleMoneyBuy::CopyFrom(const PBMailSaleMoneyBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailSaleMoneyBuy::IsInitialized() const {
  
  return true;
}

void PBMailSaleMoneyBuy::Swap(PBMailSaleMoneyBuy* other) {
  if (other != this) {
    std::swap(saler_, other->saler_);
    std::swap(getbindcash_, other->getbindcash_);
    std::swap(expendsliver_, other->expendsliver_);
    std::swap(economizesliver_, other->economizesliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailSaleMoneyBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailSaleMoneyBuy_descriptor_;
  metadata.reflection = PBMailSaleMoneyBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailSaleMoneySale::kBuyerFieldNumber;
const int PBMailSaleMoneySale::kSalecashFieldNumber;
const int PBMailSaleMoneySale::kGetsliverFieldNumber;
const int PBMailSaleMoneySale::kExtrasliverFieldNumber;
const int PBMailSaleMoneySale::kStorescoreFieldNumber;
#endif  // !_MSC_VER

PBMailSaleMoneySale::PBMailSaleMoneySale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailSaleMoneySale::InitAsDefaultInstance() {
  buyer_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBMailSaleMoneySale::PBMailSaleMoneySale(const PBMailSaleMoneySale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailSaleMoneySale::SharedCtor() {
  _cached_size_ = 0;
  buyer_ = NULL;
  salecash_ = GOOGLE_ULONGLONG(0);
  getsliver_ = GOOGLE_ULONGLONG(0);
  extrasliver_ = GOOGLE_ULONGLONG(0);
  storescore_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailSaleMoneySale::~PBMailSaleMoneySale() {
  SharedDtor();
}

void PBMailSaleMoneySale::SharedDtor() {
  if (this != default_instance_) {
    delete buyer_;
  }
}

void PBMailSaleMoneySale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailSaleMoneySale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailSaleMoneySale_descriptor_;
}

const PBMailSaleMoneySale& PBMailSaleMoneySale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailSaleMoneySale* PBMailSaleMoneySale::default_instance_ = NULL;

PBMailSaleMoneySale* PBMailSaleMoneySale::New() const {
  return new PBMailSaleMoneySale;
}

void PBMailSaleMoneySale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_buyer()) {
      if (buyer_ != NULL) buyer_->::PBPlayerDisplay::Clear();
    }
    salecash_ = GOOGLE_ULONGLONG(0);
    getsliver_ = GOOGLE_ULONGLONG(0);
    extrasliver_ = GOOGLE_ULONGLONG(0);
    storescore_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailSaleMoneySale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay buyer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_salecash;
        break;
      }
      
      // optional uint64 salecash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_salecash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &salecash_)));
          set_has_salecash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getsliver;
        break;
      }
      
      // optional uint64 getsliver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getsliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &getsliver_)));
          set_has_getsliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_extrasliver;
        break;
      }
      
      // optional uint64 extrasliver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extrasliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &extrasliver_)));
          set_has_extrasliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_storescore;
        break;
      }
      
      // optional uint64 storescore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &storescore_)));
          set_has_storescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailSaleMoneySale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay buyer = 1;
  if (has_buyer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buyer(), output);
  }
  
  // optional uint64 salecash = 2;
  if (has_salecash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->salecash(), output);
  }
  
  // optional uint64 getsliver = 3;
  if (has_getsliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->getsliver(), output);
  }
  
  // optional uint64 extrasliver = 4;
  if (has_extrasliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->extrasliver(), output);
  }
  
  // optional uint64 storescore = 5;
  if (has_storescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->storescore(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailSaleMoneySale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay buyer = 1;
  if (has_buyer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buyer(), target);
  }
  
  // optional uint64 salecash = 2;
  if (has_salecash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->salecash(), target);
  }
  
  // optional uint64 getsliver = 3;
  if (has_getsliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->getsliver(), target);
  }
  
  // optional uint64 extrasliver = 4;
  if (has_extrasliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->extrasliver(), target);
  }
  
  // optional uint64 storescore = 5;
  if (has_storescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->storescore(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailSaleMoneySale::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay buyer = 1;
    if (has_buyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyer());
    }
    
    // optional uint64 salecash = 2;
    if (has_salecash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->salecash());
    }
    
    // optional uint64 getsliver = 3;
    if (has_getsliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->getsliver());
    }
    
    // optional uint64 extrasliver = 4;
    if (has_extrasliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->extrasliver());
    }
    
    // optional uint64 storescore = 5;
    if (has_storescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->storescore());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailSaleMoneySale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailSaleMoneySale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailSaleMoneySale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailSaleMoneySale::MergeFrom(const PBMailSaleMoneySale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buyer()) {
      mutable_buyer()->::PBPlayerDisplay::MergeFrom(from.buyer());
    }
    if (from.has_salecash()) {
      set_salecash(from.salecash());
    }
    if (from.has_getsliver()) {
      set_getsliver(from.getsliver());
    }
    if (from.has_extrasliver()) {
      set_extrasliver(from.extrasliver());
    }
    if (from.has_storescore()) {
      set_storescore(from.storescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailSaleMoneySale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailSaleMoneySale::CopyFrom(const PBMailSaleMoneySale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailSaleMoneySale::IsInitialized() const {
  
  return true;
}

void PBMailSaleMoneySale::Swap(PBMailSaleMoneySale* other) {
  if (other != this) {
    std::swap(buyer_, other->buyer_);
    std::swap(salecash_, other->salecash_);
    std::swap(getsliver_, other->getsliver_);
    std::swap(extrasliver_, other->extrasliver_);
    std::swap(storescore_, other->storescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailSaleMoneySale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailSaleMoneySale_descriptor_;
  metadata.reflection = PBMailSaleMoneySale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailSaleMoneyBuyReturn::kSliverFieldNumber;
const int PBMailSaleMoneyBuyReturn::kExpendsliverFieldNumber;
#endif  // !_MSC_VER

PBMailSaleMoneyBuyReturn::PBMailSaleMoneyBuyReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailSaleMoneyBuyReturn::InitAsDefaultInstance() {
}

PBMailSaleMoneyBuyReturn::PBMailSaleMoneyBuyReturn(const PBMailSaleMoneyBuyReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailSaleMoneyBuyReturn::SharedCtor() {
  _cached_size_ = 0;
  sliver_ = GOOGLE_ULONGLONG(0);
  expendsliver_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailSaleMoneyBuyReturn::~PBMailSaleMoneyBuyReturn() {
  SharedDtor();
}

void PBMailSaleMoneyBuyReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMailSaleMoneyBuyReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailSaleMoneyBuyReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailSaleMoneyBuyReturn_descriptor_;
}

const PBMailSaleMoneyBuyReturn& PBMailSaleMoneyBuyReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailSaleMoneyBuyReturn* PBMailSaleMoneyBuyReturn::default_instance_ = NULL;

PBMailSaleMoneyBuyReturn* PBMailSaleMoneyBuyReturn::New() const {
  return new PBMailSaleMoneyBuyReturn;
}

void PBMailSaleMoneyBuyReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sliver_ = GOOGLE_ULONGLONG(0);
    expendsliver_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailSaleMoneyBuyReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sliver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expendsliver;
        break;
      }
      
      // optional uint64 expendsliver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expendsliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expendsliver_)));
          set_has_expendsliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailSaleMoneyBuyReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sliver = 1;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sliver(), output);
  }
  
  // optional uint64 expendsliver = 2;
  if (has_expendsliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->expendsliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailSaleMoneyBuyReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sliver = 1;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sliver(), target);
  }
  
  // optional uint64 expendsliver = 2;
  if (has_expendsliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->expendsliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailSaleMoneyBuyReturn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sliver = 1;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sliver());
    }
    
    // optional uint64 expendsliver = 2;
    if (has_expendsliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expendsliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailSaleMoneyBuyReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailSaleMoneyBuyReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailSaleMoneyBuyReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailSaleMoneyBuyReturn::MergeFrom(const PBMailSaleMoneyBuyReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
    if (from.has_expendsliver()) {
      set_expendsliver(from.expendsliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailSaleMoneyBuyReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailSaleMoneyBuyReturn::CopyFrom(const PBMailSaleMoneyBuyReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailSaleMoneyBuyReturn::IsInitialized() const {
  
  return true;
}

void PBMailSaleMoneyBuyReturn::Swap(PBMailSaleMoneyBuyReturn* other) {
  if (other != this) {
    std::swap(sliver_, other->sliver_);
    std::swap(expendsliver_, other->expendsliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailSaleMoneyBuyReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailSaleMoneyBuyReturn_descriptor_;
  metadata.reflection = PBMailSaleMoneyBuyReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailSaleMoneySaleReturn::kCashFieldNumber;
#endif  // !_MSC_VER

PBMailSaleMoneySaleReturn::PBMailSaleMoneySaleReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailSaleMoneySaleReturn::InitAsDefaultInstance() {
}

PBMailSaleMoneySaleReturn::PBMailSaleMoneySaleReturn(const PBMailSaleMoneySaleReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailSaleMoneySaleReturn::SharedCtor() {
  _cached_size_ = 0;
  cash_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailSaleMoneySaleReturn::~PBMailSaleMoneySaleReturn() {
  SharedDtor();
}

void PBMailSaleMoneySaleReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMailSaleMoneySaleReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailSaleMoneySaleReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailSaleMoneySaleReturn_descriptor_;
}

const PBMailSaleMoneySaleReturn& PBMailSaleMoneySaleReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailSaleMoneySaleReturn* PBMailSaleMoneySaleReturn::default_instance_ = NULL;

PBMailSaleMoneySaleReturn* PBMailSaleMoneySaleReturn::New() const {
  return new PBMailSaleMoneySaleReturn;
}

void PBMailSaleMoneySaleReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cash_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailSaleMoneySaleReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailSaleMoneySaleReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailSaleMoneySaleReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailSaleMoneySaleReturn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailSaleMoneySaleReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailSaleMoneySaleReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailSaleMoneySaleReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailSaleMoneySaleReturn::MergeFrom(const PBMailSaleMoneySaleReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailSaleMoneySaleReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailSaleMoneySaleReturn::CopyFrom(const PBMailSaleMoneySaleReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailSaleMoneySaleReturn::IsInitialized() const {
  
  return true;
}

void PBMailSaleMoneySaleReturn::Swap(PBMailSaleMoneySaleReturn* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailSaleMoneySaleReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailSaleMoneySaleReturn_descriptor_;
  metadata.reflection = PBMailSaleMoneySaleReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailAuctionLockRet::kItemFieldNumber;
const int PBMailAuctionLockRet::kRetsliverFieldNumber;
#endif  // !_MSC_VER

PBMailAuctionLockRet::PBMailAuctionLockRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailAuctionLockRet::InitAsDefaultInstance() {
  item_ = const_cast< ::PBItem*>(&::PBItem::default_instance());
}

PBMailAuctionLockRet::PBMailAuctionLockRet(const PBMailAuctionLockRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailAuctionLockRet::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  retsliver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailAuctionLockRet::~PBMailAuctionLockRet() {
  SharedDtor();
}

void PBMailAuctionLockRet::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void PBMailAuctionLockRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailAuctionLockRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailAuctionLockRet_descriptor_;
}

const PBMailAuctionLockRet& PBMailAuctionLockRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailAuctionLockRet* PBMailAuctionLockRet::default_instance_ = NULL;

PBMailAuctionLockRet* PBMailAuctionLockRet::New() const {
  return new PBMailAuctionLockRet;
}

void PBMailAuctionLockRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::PBItem::Clear();
    }
    retsliver_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailAuctionLockRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retsliver;
        break;
      }
      
      // optional uint32 retsliver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retsliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retsliver_)));
          set_has_retsliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailAuctionLockRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }
  
  // optional uint32 retsliver = 2;
  if (has_retsliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->retsliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailAuctionLockRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }
  
  // optional uint32 retsliver = 2;
  if (has_retsliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->retsliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailAuctionLockRet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItem item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
    // optional uint32 retsliver = 2;
    if (has_retsliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retsliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailAuctionLockRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailAuctionLockRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailAuctionLockRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailAuctionLockRet::MergeFrom(const PBMailAuctionLockRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::PBItem::MergeFrom(from.item());
    }
    if (from.has_retsliver()) {
      set_retsliver(from.retsliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailAuctionLockRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailAuctionLockRet::CopyFrom(const PBMailAuctionLockRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailAuctionLockRet::IsInitialized() const {
  
  return true;
}

void PBMailAuctionLockRet::Swap(PBMailAuctionLockRet* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(retsliver_, other->retsliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailAuctionLockRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailAuctionLockRet_descriptor_;
  metadata.reflection = PBMailAuctionLockRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailAuctionSaleTimeOut::kItemFieldNumber;
#endif  // !_MSC_VER

PBMailAuctionSaleTimeOut::PBMailAuctionSaleTimeOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailAuctionSaleTimeOut::InitAsDefaultInstance() {
  item_ = const_cast< ::PBItem*>(&::PBItem::default_instance());
}

PBMailAuctionSaleTimeOut::PBMailAuctionSaleTimeOut(const PBMailAuctionSaleTimeOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailAuctionSaleTimeOut::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailAuctionSaleTimeOut::~PBMailAuctionSaleTimeOut() {
  SharedDtor();
}

void PBMailAuctionSaleTimeOut::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void PBMailAuctionSaleTimeOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailAuctionSaleTimeOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailAuctionSaleTimeOut_descriptor_;
}

const PBMailAuctionSaleTimeOut& PBMailAuctionSaleTimeOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailAuctionSaleTimeOut* PBMailAuctionSaleTimeOut::default_instance_ = NULL;

PBMailAuctionSaleTimeOut* PBMailAuctionSaleTimeOut::New() const {
  return new PBMailAuctionSaleTimeOut;
}

void PBMailAuctionSaleTimeOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::PBItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailAuctionSaleTimeOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailAuctionSaleTimeOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailAuctionSaleTimeOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailAuctionSaleTimeOut::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItem item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailAuctionSaleTimeOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailAuctionSaleTimeOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailAuctionSaleTimeOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailAuctionSaleTimeOut::MergeFrom(const PBMailAuctionSaleTimeOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::PBItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailAuctionSaleTimeOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailAuctionSaleTimeOut::CopyFrom(const PBMailAuctionSaleTimeOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailAuctionSaleTimeOut::IsInitialized() const {
  
  return true;
}

void PBMailAuctionSaleTimeOut::Swap(PBMailAuctionSaleTimeOut* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailAuctionSaleTimeOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailAuctionSaleTimeOut_descriptor_;
  metadata.reflection = PBMailAuctionSaleTimeOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailAuctionSaleGet::kItemFieldNumber;
const int PBMailAuctionSaleGet::kGetsliverFieldNumber;
#endif  // !_MSC_VER

PBMailAuctionSaleGet::PBMailAuctionSaleGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailAuctionSaleGet::InitAsDefaultInstance() {
  item_ = const_cast< ::PBItem*>(&::PBItem::default_instance());
}

PBMailAuctionSaleGet::PBMailAuctionSaleGet(const PBMailAuctionSaleGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailAuctionSaleGet::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  getsliver_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailAuctionSaleGet::~PBMailAuctionSaleGet() {
  SharedDtor();
}

void PBMailAuctionSaleGet::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void PBMailAuctionSaleGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailAuctionSaleGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailAuctionSaleGet_descriptor_;
}

const PBMailAuctionSaleGet& PBMailAuctionSaleGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailAuctionSaleGet* PBMailAuctionSaleGet::default_instance_ = NULL;

PBMailAuctionSaleGet* PBMailAuctionSaleGet::New() const {
  return new PBMailAuctionSaleGet;
}

void PBMailAuctionSaleGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::PBItem::Clear();
    }
    getsliver_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailAuctionSaleGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getsliver;
        break;
      }
      
      // optional uint64 getsliver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getsliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &getsliver_)));
          set_has_getsliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailAuctionSaleGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }
  
  // optional uint64 getsliver = 2;
  if (has_getsliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->getsliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailAuctionSaleGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }
  
  // optional uint64 getsliver = 2;
  if (has_getsliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->getsliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailAuctionSaleGet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItem item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
    // optional uint64 getsliver = 2;
    if (has_getsliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->getsliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailAuctionSaleGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailAuctionSaleGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailAuctionSaleGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailAuctionSaleGet::MergeFrom(const PBMailAuctionSaleGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::PBItem::MergeFrom(from.item());
    }
    if (from.has_getsliver()) {
      set_getsliver(from.getsliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailAuctionSaleGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailAuctionSaleGet::CopyFrom(const PBMailAuctionSaleGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailAuctionSaleGet::IsInitialized() const {
  
  return true;
}

void PBMailAuctionSaleGet::Swap(PBMailAuctionSaleGet* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(getsliver_, other->getsliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailAuctionSaleGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailAuctionSaleGet_descriptor_;
  metadata.reflection = PBMailAuctionSaleGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailAuctionBuyGet::kItemFieldNumber;
const int PBMailAuctionBuyGet::kSliverFieldNumber;
const int PBMailAuctionBuyGet::kExtrasliverFieldNumber;
#endif  // !_MSC_VER

PBMailAuctionBuyGet::PBMailAuctionBuyGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailAuctionBuyGet::InitAsDefaultInstance() {
  item_ = const_cast< ::PBItem*>(&::PBItem::default_instance());
}

PBMailAuctionBuyGet::PBMailAuctionBuyGet(const PBMailAuctionBuyGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailAuctionBuyGet::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  sliver_ = GOOGLE_ULONGLONG(0);
  extrasliver_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailAuctionBuyGet::~PBMailAuctionBuyGet() {
  SharedDtor();
}

void PBMailAuctionBuyGet::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void PBMailAuctionBuyGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailAuctionBuyGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailAuctionBuyGet_descriptor_;
}

const PBMailAuctionBuyGet& PBMailAuctionBuyGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailAuctionBuyGet* PBMailAuctionBuyGet::default_instance_ = NULL;

PBMailAuctionBuyGet* PBMailAuctionBuyGet::New() const {
  return new PBMailAuctionBuyGet;
}

void PBMailAuctionBuyGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::PBItem::Clear();
    }
    sliver_ = GOOGLE_ULONGLONG(0);
    extrasliver_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailAuctionBuyGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sliver;
        break;
      }
      
      // optional uint64 sliver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_extrasliver;
        break;
      }
      
      // optional uint64 extrasliver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extrasliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &extrasliver_)));
          set_has_extrasliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailAuctionBuyGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }
  
  // optional uint64 sliver = 2;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sliver(), output);
  }
  
  // optional uint64 extrasliver = 3;
  if (has_extrasliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->extrasliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailAuctionBuyGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }
  
  // optional uint64 sliver = 2;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sliver(), target);
  }
  
  // optional uint64 extrasliver = 3;
  if (has_extrasliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->extrasliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailAuctionBuyGet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItem item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
    // optional uint64 sliver = 2;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sliver());
    }
    
    // optional uint64 extrasliver = 3;
    if (has_extrasliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->extrasliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailAuctionBuyGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailAuctionBuyGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailAuctionBuyGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailAuctionBuyGet::MergeFrom(const PBMailAuctionBuyGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::PBItem::MergeFrom(from.item());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
    if (from.has_extrasliver()) {
      set_extrasliver(from.extrasliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailAuctionBuyGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailAuctionBuyGet::CopyFrom(const PBMailAuctionBuyGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailAuctionBuyGet::IsInitialized() const {
  
  return true;
}

void PBMailAuctionBuyGet::Swap(PBMailAuctionBuyGet* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(sliver_, other->sliver_);
    std::swap(extrasliver_, other->extrasliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailAuctionBuyGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailAuctionBuyGet_descriptor_;
  metadata.reflection = PBMailAuctionBuyGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailPromote::kStepFieldNumber;
#endif  // !_MSC_VER

PBMailPromote::PBMailPromote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailPromote::InitAsDefaultInstance() {
}

PBMailPromote::PBMailPromote(const PBMailPromote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailPromote::SharedCtor() {
  _cached_size_ = 0;
  step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailPromote::~PBMailPromote() {
  SharedDtor();
}

void PBMailPromote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMailPromote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailPromote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailPromote_descriptor_;
}

const PBMailPromote& PBMailPromote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailPromote* PBMailPromote::default_instance_ = NULL;

PBMailPromote* PBMailPromote::New() const {
  return new PBMailPromote;
}

void PBMailPromote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    step_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailPromote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 step = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailPromote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->step(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailPromote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->step(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailPromote::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailPromote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailPromote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailPromote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailPromote::MergeFrom(const PBMailPromote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailPromote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailPromote::CopyFrom(const PBMailPromote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailPromote::IsInitialized() const {
  
  return true;
}

void PBMailPromote::Swap(PBMailPromote* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailPromote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailPromote_descriptor_;
  metadata.reflection = PBMailPromote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailFactionBoss::kOrderFieldNumber;
const int PBMailFactionBoss::kScoreFieldNumber;
#endif  // !_MSC_VER

PBMailFactionBoss::PBMailFactionBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailFactionBoss::InitAsDefaultInstance() {
}

PBMailFactionBoss::PBMailFactionBoss(const PBMailFactionBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailFactionBoss::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0u;
  score_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailFactionBoss::~PBMailFactionBoss() {
  SharedDtor();
}

void PBMailFactionBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMailFactionBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailFactionBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailFactionBoss_descriptor_;
}

const PBMailFactionBoss& PBMailFactionBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailFactionBoss* PBMailFactionBoss::default_instance_ = NULL;

PBMailFactionBoss* PBMailFactionBoss::New() const {
  return new PBMailFactionBoss;
}

void PBMailFactionBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_ = 0u;
    score_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailFactionBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }
      
      // optional uint64 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailFactionBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->order(), output);
  }
  
  // optional uint64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailFactionBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->order(), target);
  }
  
  // optional uint64 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailFactionBoss::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }
    
    // optional uint64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailFactionBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailFactionBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailFactionBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailFactionBoss::MergeFrom(const PBMailFactionBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailFactionBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailFactionBoss::CopyFrom(const PBMailFactionBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailFactionBoss::IsInitialized() const {
  
  return true;
}

void PBMailFactionBoss::Swap(PBMailFactionBoss* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailFactionBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailFactionBoss_descriptor_;
  metadata.reflection = PBMailFactionBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailWorldBoss::kOrderFieldNumber;
const int PBMailWorldBoss::kBossActivityIdFieldNumber;
#endif  // !_MSC_VER

PBMailWorldBoss::PBMailWorldBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailWorldBoss::InitAsDefaultInstance() {
}

PBMailWorldBoss::PBMailWorldBoss(const PBMailWorldBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailWorldBoss::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0u;
  bossactivityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailWorldBoss::~PBMailWorldBoss() {
  SharedDtor();
}

void PBMailWorldBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMailWorldBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailWorldBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailWorldBoss_descriptor_;
}

const PBMailWorldBoss& PBMailWorldBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailWorldBoss* PBMailWorldBoss::default_instance_ = NULL;

PBMailWorldBoss* PBMailWorldBoss::New() const {
  return new PBMailWorldBoss;
}

void PBMailWorldBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_ = 0u;
    bossactivityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailWorldBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossActivityId;
        break;
      }
      
      // optional uint32 bossActivityId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossActivityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossactivityid_)));
          set_has_bossactivityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailWorldBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->order(), output);
  }
  
  // optional uint32 bossActivityId = 2;
  if (has_bossactivityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossactivityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailWorldBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->order(), target);
  }
  
  // optional uint32 bossActivityId = 2;
  if (has_bossactivityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bossactivityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailWorldBoss::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }
    
    // optional uint32 bossActivityId = 2;
    if (has_bossactivityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossactivityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailWorldBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailWorldBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailWorldBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailWorldBoss::MergeFrom(const PBMailWorldBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_bossactivityid()) {
      set_bossactivityid(from.bossactivityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailWorldBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailWorldBoss::CopyFrom(const PBMailWorldBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailWorldBoss::IsInitialized() const {
  
  return true;
}

void PBMailWorldBoss::Swap(PBMailWorldBoss* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(bossactivityid_, other->bossactivityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailWorldBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailWorldBoss_descriptor_;
  metadata.reflection = PBMailWorldBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailCopymapCashReward::kLeaderFieldNumber;
const int PBMailCopymapCashReward::kCopymapidFieldNumber;
const int PBMailCopymapCashReward::kCashFieldNumber;
#endif  // !_MSC_VER

PBMailCopymapCashReward::PBMailCopymapCashReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailCopymapCashReward::InitAsDefaultInstance() {
  leader_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBMailCopymapCashReward::PBMailCopymapCashReward(const PBMailCopymapCashReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailCopymapCashReward::SharedCtor() {
  _cached_size_ = 0;
  leader_ = NULL;
  copymapid_ = 0u;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailCopymapCashReward::~PBMailCopymapCashReward() {
  SharedDtor();
}

void PBMailCopymapCashReward::SharedDtor() {
  if (this != default_instance_) {
    delete leader_;
  }
}

void PBMailCopymapCashReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailCopymapCashReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailCopymapCashReward_descriptor_;
}

const PBMailCopymapCashReward& PBMailCopymapCashReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailCopymapCashReward* PBMailCopymapCashReward::default_instance_ = NULL;

PBMailCopymapCashReward* PBMailCopymapCashReward::New() const {
  return new PBMailCopymapCashReward;
}

void PBMailCopymapCashReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_leader()) {
      if (leader_ != NULL) leader_->::PBPlayerDisplay::Clear();
    }
    copymapid_ = 0u;
    cash_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailCopymapCashReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay leader = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copymapid;
        break;
      }
      
      // optional uint32 copymapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cash;
        break;
      }
      
      // optional uint32 cash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailCopymapCashReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay leader = 1;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->leader(), output);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymapid(), output);
  }
  
  // optional uint32 cash = 3;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailCopymapCashReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay leader = 1;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->leader(), target);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymapid(), target);
  }
  
  // optional uint32 cash = 3;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailCopymapCashReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay leader = 1;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader());
    }
    
    // optional uint32 copymapid = 2;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 cash = 3;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailCopymapCashReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailCopymapCashReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailCopymapCashReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailCopymapCashReward::MergeFrom(const PBMailCopymapCashReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader()) {
      mutable_leader()->::PBPlayerDisplay::MergeFrom(from.leader());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailCopymapCashReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailCopymapCashReward::CopyFrom(const PBMailCopymapCashReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailCopymapCashReward::IsInitialized() const {
  
  return true;
}

void PBMailCopymapCashReward::Swap(PBMailCopymapCashReward* other) {
  if (other != this) {
    std::swap(leader_, other->leader_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailCopymapCashReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailCopymapCashReward_descriptor_;
  metadata.reflection = PBMailCopymapCashReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailSinglePvpFirstPrize::kIdFieldNumber;
#endif  // !_MSC_VER

PBMailSinglePvpFirstPrize::PBMailSinglePvpFirstPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailSinglePvpFirstPrize::InitAsDefaultInstance() {
}

PBMailSinglePvpFirstPrize::PBMailSinglePvpFirstPrize(const PBMailSinglePvpFirstPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailSinglePvpFirstPrize::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailSinglePvpFirstPrize::~PBMailSinglePvpFirstPrize() {
  SharedDtor();
}

void PBMailSinglePvpFirstPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMailSinglePvpFirstPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailSinglePvpFirstPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailSinglePvpFirstPrize_descriptor_;
}

const PBMailSinglePvpFirstPrize& PBMailSinglePvpFirstPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailSinglePvpFirstPrize* PBMailSinglePvpFirstPrize::default_instance_ = NULL;

PBMailSinglePvpFirstPrize* PBMailSinglePvpFirstPrize::New() const {
  return new PBMailSinglePvpFirstPrize;
}

void PBMailSinglePvpFirstPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailSinglePvpFirstPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailSinglePvpFirstPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailSinglePvpFirstPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailSinglePvpFirstPrize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailSinglePvpFirstPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailSinglePvpFirstPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailSinglePvpFirstPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailSinglePvpFirstPrize::MergeFrom(const PBMailSinglePvpFirstPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailSinglePvpFirstPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailSinglePvpFirstPrize::CopyFrom(const PBMailSinglePvpFirstPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailSinglePvpFirstPrize::IsInitialized() const {
  
  return true;
}

void PBMailSinglePvpFirstPrize::Swap(PBMailSinglePvpFirstPrize* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailSinglePvpFirstPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailSinglePvpFirstPrize_descriptor_;
  metadata.reflection = PBMailSinglePvpFirstPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailSinglePvpDayPrize::kDaycountFieldNumber;
#endif  // !_MSC_VER

PBMailSinglePvpDayPrize::PBMailSinglePvpDayPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailSinglePvpDayPrize::InitAsDefaultInstance() {
}

PBMailSinglePvpDayPrize::PBMailSinglePvpDayPrize(const PBMailSinglePvpDayPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailSinglePvpDayPrize::SharedCtor() {
  _cached_size_ = 0;
  daycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailSinglePvpDayPrize::~PBMailSinglePvpDayPrize() {
  SharedDtor();
}

void PBMailSinglePvpDayPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMailSinglePvpDayPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailSinglePvpDayPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailSinglePvpDayPrize_descriptor_;
}

const PBMailSinglePvpDayPrize& PBMailSinglePvpDayPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailSinglePvpDayPrize* PBMailSinglePvpDayPrize::default_instance_ = NULL;

PBMailSinglePvpDayPrize* PBMailSinglePvpDayPrize::New() const {
  return new PBMailSinglePvpDayPrize;
}

void PBMailSinglePvpDayPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daycount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailSinglePvpDayPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 daycount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daycount_)));
          set_has_daycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailSinglePvpDayPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 daycount = 1;
  if (has_daycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->daycount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailSinglePvpDayPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 daycount = 1;
  if (has_daycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->daycount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailSinglePvpDayPrize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 daycount = 1;
    if (has_daycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daycount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailSinglePvpDayPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailSinglePvpDayPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailSinglePvpDayPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailSinglePvpDayPrize::MergeFrom(const PBMailSinglePvpDayPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daycount()) {
      set_daycount(from.daycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailSinglePvpDayPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailSinglePvpDayPrize::CopyFrom(const PBMailSinglePvpDayPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailSinglePvpDayPrize::IsInitialized() const {
  
  return true;
}

void PBMailSinglePvpDayPrize::Swap(PBMailSinglePvpDayPrize* other) {
  if (other != this) {
    std::swap(daycount_, other->daycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailSinglePvpDayPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailSinglePvpDayPrize_descriptor_;
  metadata.reflection = PBMailSinglePvpDayPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailSinglePvpWeekPrize::kIdFieldNumber;
#endif  // !_MSC_VER

PBMailSinglePvpWeekPrize::PBMailSinglePvpWeekPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailSinglePvpWeekPrize::InitAsDefaultInstance() {
}

PBMailSinglePvpWeekPrize::PBMailSinglePvpWeekPrize(const PBMailSinglePvpWeekPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailSinglePvpWeekPrize::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailSinglePvpWeekPrize::~PBMailSinglePvpWeekPrize() {
  SharedDtor();
}

void PBMailSinglePvpWeekPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMailSinglePvpWeekPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailSinglePvpWeekPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailSinglePvpWeekPrize_descriptor_;
}

const PBMailSinglePvpWeekPrize& PBMailSinglePvpWeekPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailSinglePvpWeekPrize* PBMailSinglePvpWeekPrize::default_instance_ = NULL;

PBMailSinglePvpWeekPrize* PBMailSinglePvpWeekPrize::New() const {
  return new PBMailSinglePvpWeekPrize;
}

void PBMailSinglePvpWeekPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailSinglePvpWeekPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailSinglePvpWeekPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailSinglePvpWeekPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailSinglePvpWeekPrize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailSinglePvpWeekPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailSinglePvpWeekPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailSinglePvpWeekPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailSinglePvpWeekPrize::MergeFrom(const PBMailSinglePvpWeekPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailSinglePvpWeekPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailSinglePvpWeekPrize::CopyFrom(const PBMailSinglePvpWeekPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailSinglePvpWeekPrize::IsInitialized() const {
  
  return true;
}

void PBMailSinglePvpWeekPrize::Swap(PBMailSinglePvpWeekPrize* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailSinglePvpWeekPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailSinglePvpWeekPrize_descriptor_;
  metadata.reflection = PBMailSinglePvpWeekPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailManorTitleGet::kTitleFieldNumber;
#endif  // !_MSC_VER

PBMailManorTitleGet::PBMailManorTitleGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailManorTitleGet::InitAsDefaultInstance() {
}

PBMailManorTitleGet::PBMailManorTitleGet(const PBMailManorTitleGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailManorTitleGet::SharedCtor() {
  _cached_size_ = 0;
  title_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailManorTitleGet::~PBMailManorTitleGet() {
  SharedDtor();
}

void PBMailManorTitleGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMailManorTitleGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailManorTitleGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailManorTitleGet_descriptor_;
}

const PBMailManorTitleGet& PBMailManorTitleGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailManorTitleGet* PBMailManorTitleGet::default_instance_ = NULL;

PBMailManorTitleGet* PBMailManorTitleGet::New() const {
  return new PBMailManorTitleGet;
}

void PBMailManorTitleGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    title_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailManorTitleGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailManorTitleGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->title(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailManorTitleGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 title = 1;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->title(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailManorTitleGet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailManorTitleGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailManorTitleGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailManorTitleGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailManorTitleGet::MergeFrom(const PBMailManorTitleGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailManorTitleGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailManorTitleGet::CopyFrom(const PBMailManorTitleGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailManorTitleGet::IsInitialized() const {
  
  return true;
}

void PBMailManorTitleGet::Swap(PBMailManorTitleGet* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailManorTitleGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailManorTitleGet_descriptor_;
  metadata.reflection = PBMailManorTitleGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailManorResult::kTypeFieldNumber;
const int PBMailManorResult::kManoridFieldNumber;
const int PBMailManorResult::kEnemyfactionnameFieldNumber;
#endif  // !_MSC_VER

PBMailManorResult::PBMailManorResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailManorResult::InitAsDefaultInstance() {
}

PBMailManorResult::PBMailManorResult(const PBMailManorResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailManorResult::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  manorid_ = 0u;
  enemyfactionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailManorResult::~PBMailManorResult() {
  SharedDtor();
}

void PBMailManorResult::SharedDtor() {
  if (enemyfactionname_ != &::google::protobuf::internal::kEmptyString) {
    delete enemyfactionname_;
  }
  if (this != default_instance_) {
  }
}

void PBMailManorResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailManorResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailManorResult_descriptor_;
}

const PBMailManorResult& PBMailManorResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailManorResult* PBMailManorResult::default_instance_ = NULL;

PBMailManorResult* PBMailManorResult::New() const {
  return new PBMailManorResult;
}

void PBMailManorResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    manorid_ = 0u;
    if (has_enemyfactionname()) {
      if (enemyfactionname_ != &::google::protobuf::internal::kEmptyString) {
        enemyfactionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailManorResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_manorid;
        break;
      }
      
      // optional uint32 manorid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_enemyfactionname;
        break;
      }
      
      // optional string enemyfactionname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyfactionname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enemyfactionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enemyfactionname().data(), this->enemyfactionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailManorResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 manorid = 2;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->manorid(), output);
  }
  
  // optional string enemyfactionname = 3;
  if (has_enemyfactionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyfactionname().data(), this->enemyfactionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->enemyfactionname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailManorResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 manorid = 2;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->manorid(), target);
  }
  
  // optional string enemyfactionname = 3;
  if (has_enemyfactionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyfactionname().data(), this->enemyfactionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->enemyfactionname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailManorResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 manorid = 2;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }
    
    // optional string enemyfactionname = 3;
    if (has_enemyfactionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enemyfactionname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailManorResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailManorResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailManorResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailManorResult::MergeFrom(const PBMailManorResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_enemyfactionname()) {
      set_enemyfactionname(from.enemyfactionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailManorResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailManorResult::CopyFrom(const PBMailManorResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailManorResult::IsInitialized() const {
  
  return true;
}

void PBMailManorResult::Swap(PBMailManorResult* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(manorid_, other->manorid_);
    std::swap(enemyfactionname_, other->enemyfactionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailManorResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailManorResult_descriptor_;
  metadata.reflection = PBMailManorResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailFactionInfo::kNameFieldNumber;
#endif  // !_MSC_VER

PBMailFactionInfo::PBMailFactionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailFactionInfo::InitAsDefaultInstance() {
}

PBMailFactionInfo::PBMailFactionInfo(const PBMailFactionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailFactionInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailFactionInfo::~PBMailFactionInfo() {
  SharedDtor();
}

void PBMailFactionInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBMailFactionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailFactionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailFactionInfo_descriptor_;
}

const PBMailFactionInfo& PBMailFactionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailFactionInfo* PBMailFactionInfo::default_instance_ = NULL;

PBMailFactionInfo* PBMailFactionInfo::New() const {
  return new PBMailFactionInfo;
}

void PBMailFactionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailFactionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailFactionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailFactionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailFactionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailFactionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailFactionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailFactionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailFactionInfo::MergeFrom(const PBMailFactionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailFactionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailFactionInfo::CopyFrom(const PBMailFactionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailFactionInfo::IsInitialized() const {
  
  return true;
}

void PBMailFactionInfo::Swap(PBMailFactionInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailFactionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailFactionInfo_descriptor_;
  metadata.reflection = PBMailFactionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailTopListInfo::kOrderFieldNumber;
#endif  // !_MSC_VER

PBMailTopListInfo::PBMailTopListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailTopListInfo::InitAsDefaultInstance() {
}

PBMailTopListInfo::PBMailTopListInfo(const PBMailTopListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailTopListInfo::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailTopListInfo::~PBMailTopListInfo() {
  SharedDtor();
}

void PBMailTopListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMailTopListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailTopListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailTopListInfo_descriptor_;
}

const PBMailTopListInfo& PBMailTopListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMailTopListInfo* PBMailTopListInfo::default_instance_ = NULL;

PBMailTopListInfo* PBMailTopListInfo::New() const {
  return new PBMailTopListInfo;
}

void PBMailTopListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailTopListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailTopListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailTopListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->order(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailTopListInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailTopListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailTopListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailTopListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailTopListInfo::MergeFrom(const PBMailTopListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailTopListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailTopListInfo::CopyFrom(const PBMailTopListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailTopListInfo::IsInitialized() const {
  
  return true;
}

void PBMailTopListInfo::Swap(PBMailTopListInfo* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailTopListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailTopListInfo_descriptor_;
  metadata.reflection = PBMailTopListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMail::kWorldidFieldNumber;
const int PBMail::kPlayeridFieldNumber;
const int PBMail::kMailidFieldNumber;
const int PBMail::kTypeFieldNumber;
const int PBMail::kSendtimeFieldNumber;
const int PBMail::kSenderidFieldNumber;
const int PBMail::kSenderFieldNumber;
const int PBMail::kTitleFieldNumber;
const int PBMail::kTextFieldNumber;
const int PBMail::kReadedFieldNumber;
const int PBMail::kMoneyFieldNumber;
const int PBMail::kItemFieldNumber;
const int PBMail::kSmbuyFieldNumber;
const int PBMail::kSmsaleFieldNumber;
const int PBMail::kSmbuyretFieldNumber;
const int PBMail::kSmsaleretFieldNumber;
const int PBMail::kAulockretFieldNumber;
const int PBMail::kAutimeoutFieldNumber;
const int PBMail::kAusalegetFieldNumber;
const int PBMail::kAubuygetFieldNumber;
const int PBMail::kPromoteFieldNumber;
const int PBMail::kDoingTypeFieldNumber;
const int PBMail::kFactionbossFieldNumber;
const int PBMail::kWorldbossFieldNumber;
const int PBMail::kCopymapcashFieldNumber;
const int PBMail::kSinglepvpfirstFieldNumber;
const int PBMail::kSinglepvpdayFieldNumber;
const int PBMail::kSinglepvpweekFieldNumber;
const int PBMail::kManortitleFieldNumber;
const int PBMail::kManorresultFieldNumber;
const int PBMail::kFactioninfoFieldNumber;
const int PBMail::kToplistFieldNumber;
#endif  // !_MSC_VER

PBMail::PBMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMail::InitAsDefaultInstance() {
  smbuy_ = const_cast< ::PBMailSaleMoneyBuy*>(&::PBMailSaleMoneyBuy::default_instance());
  smsale_ = const_cast< ::PBMailSaleMoneySale*>(&::PBMailSaleMoneySale::default_instance());
  smbuyret_ = const_cast< ::PBMailSaleMoneyBuyReturn*>(&::PBMailSaleMoneyBuyReturn::default_instance());
  smsaleret_ = const_cast< ::PBMailSaleMoneySaleReturn*>(&::PBMailSaleMoneySaleReturn::default_instance());
  aulockret_ = const_cast< ::PBMailAuctionLockRet*>(&::PBMailAuctionLockRet::default_instance());
  autimeout_ = const_cast< ::PBMailAuctionSaleTimeOut*>(&::PBMailAuctionSaleTimeOut::default_instance());
  ausaleget_ = const_cast< ::PBMailAuctionSaleGet*>(&::PBMailAuctionSaleGet::default_instance());
  aubuyget_ = const_cast< ::PBMailAuctionBuyGet*>(&::PBMailAuctionBuyGet::default_instance());
  promote_ = const_cast< ::PBMailPromote*>(&::PBMailPromote::default_instance());
  factionboss_ = const_cast< ::PBMailFactionBoss*>(&::PBMailFactionBoss::default_instance());
  worldboss_ = const_cast< ::PBMailWorldBoss*>(&::PBMailWorldBoss::default_instance());
  copymapcash_ = const_cast< ::PBMailCopymapCashReward*>(&::PBMailCopymapCashReward::default_instance());
  singlepvpfirst_ = const_cast< ::PBMailSinglePvpFirstPrize*>(&::PBMailSinglePvpFirstPrize::default_instance());
  singlepvpday_ = const_cast< ::PBMailSinglePvpDayPrize*>(&::PBMailSinglePvpDayPrize::default_instance());
  singlepvpweek_ = const_cast< ::PBMailSinglePvpWeekPrize*>(&::PBMailSinglePvpWeekPrize::default_instance());
  manortitle_ = const_cast< ::PBMailManorTitleGet*>(&::PBMailManorTitleGet::default_instance());
  manorresult_ = const_cast< ::PBMailManorResult*>(&::PBMailManorResult::default_instance());
  factioninfo_ = const_cast< ::PBMailFactionInfo*>(&::PBMailFactionInfo::default_instance());
  toplist_ = const_cast< ::PBMailTopListInfo*>(&::PBMailTopListInfo::default_instance());
}

PBMail::PBMail(const PBMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMail::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  playerid_ = 0u;
  mailid_ = 0u;
  type_ = 0;
  sendtime_ = GOOGLE_ULONGLONG(0);
  senderid_ = 0u;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  readed_ = 0u;
  smbuy_ = NULL;
  smsale_ = NULL;
  smbuyret_ = NULL;
  smsaleret_ = NULL;
  aulockret_ = NULL;
  autimeout_ = NULL;
  ausaleget_ = NULL;
  aubuyget_ = NULL;
  promote_ = NULL;
  doingtype_ = 0u;
  factionboss_ = NULL;
  worldboss_ = NULL;
  copymapcash_ = NULL;
  singlepvpfirst_ = NULL;
  singlepvpday_ = NULL;
  singlepvpweek_ = NULL;
  manortitle_ = NULL;
  manorresult_ = NULL;
  factioninfo_ = NULL;
  toplist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMail::~PBMail() {
  SharedDtor();
}

void PBMail::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
    delete smbuy_;
    delete smsale_;
    delete smbuyret_;
    delete smsaleret_;
    delete aulockret_;
    delete autimeout_;
    delete ausaleget_;
    delete aubuyget_;
    delete promote_;
    delete factionboss_;
    delete worldboss_;
    delete copymapcash_;
    delete singlepvpfirst_;
    delete singlepvpday_;
    delete singlepvpweek_;
    delete manortitle_;
    delete manorresult_;
    delete factioninfo_;
    delete toplist_;
  }
}

void PBMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMail_descriptor_;
}

const PBMail& PBMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBMail* PBMail::default_instance_ = NULL;

PBMail* PBMail::New() const {
  return new PBMail;
}

void PBMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    playerid_ = 0u;
    mailid_ = 0u;
    type_ = 0;
    sendtime_ = GOOGLE_ULONGLONG(0);
    senderid_ = 0u;
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    readed_ = 0u;
    if (has_smbuy()) {
      if (smbuy_ != NULL) smbuy_->::PBMailSaleMoneyBuy::Clear();
    }
    if (has_smsale()) {
      if (smsale_ != NULL) smsale_->::PBMailSaleMoneySale::Clear();
    }
    if (has_smbuyret()) {
      if (smbuyret_ != NULL) smbuyret_->::PBMailSaleMoneyBuyReturn::Clear();
    }
    if (has_smsaleret()) {
      if (smsaleret_ != NULL) smsaleret_->::PBMailSaleMoneySaleReturn::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_aulockret()) {
      if (aulockret_ != NULL) aulockret_->::PBMailAuctionLockRet::Clear();
    }
    if (has_autimeout()) {
      if (autimeout_ != NULL) autimeout_->::PBMailAuctionSaleTimeOut::Clear();
    }
    if (has_ausaleget()) {
      if (ausaleget_ != NULL) ausaleget_->::PBMailAuctionSaleGet::Clear();
    }
    if (has_aubuyget()) {
      if (aubuyget_ != NULL) aubuyget_->::PBMailAuctionBuyGet::Clear();
    }
    if (has_promote()) {
      if (promote_ != NULL) promote_->::PBMailPromote::Clear();
    }
    doingtype_ = 0u;
    if (has_factionboss()) {
      if (factionboss_ != NULL) factionboss_->::PBMailFactionBoss::Clear();
    }
    if (has_worldboss()) {
      if (worldboss_ != NULL) worldboss_->::PBMailWorldBoss::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_copymapcash()) {
      if (copymapcash_ != NULL) copymapcash_->::PBMailCopymapCashReward::Clear();
    }
    if (has_singlepvpfirst()) {
      if (singlepvpfirst_ != NULL) singlepvpfirst_->::PBMailSinglePvpFirstPrize::Clear();
    }
    if (has_singlepvpday()) {
      if (singlepvpday_ != NULL) singlepvpday_->::PBMailSinglePvpDayPrize::Clear();
    }
    if (has_singlepvpweek()) {
      if (singlepvpweek_ != NULL) singlepvpweek_->::PBMailSinglePvpWeekPrize::Clear();
    }
    if (has_manortitle()) {
      if (manortitle_ != NULL) manortitle_->::PBMailManorTitleGet::Clear();
    }
    if (has_manorresult()) {
      if (manorresult_ != NULL) manorresult_->::PBMailManorResult::Clear();
    }
    if (has_factioninfo()) {
      if (factioninfo_ != NULL) factioninfo_->::PBMailFactionInfo::Clear();
    }
    if (has_toplist()) {
      if (toplist_ != NULL) toplist_->::PBMailTopListInfo::Clear();
    }
  }
  money_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mailid;
        break;
      }
      
      // optional uint32 mailid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sendtime;
        break;
      }
      
      // optional uint64 sendtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_senderid;
        break;
      }
      
      // optional uint32 senderid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sender;
        break;
      }
      
      // optional string sender = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_title;
        break;
      }
      
      // optional string title = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_text;
        break;
      }
      
      // optional string text = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_readed;
        break;
      }
      
      // optional uint32 readed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &readed_)));
          set_has_readed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_money;
        break;
      }
      
      // repeated .PBMoney money = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_money;
        if (input->ExpectTag(98)) goto parse_item;
        break;
      }
      
      // repeated .PBItem item = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_item;
        if (input->ExpectTag(106)) goto parse_smbuy;
        break;
      }
      
      // optional .PBMailSaleMoneyBuy smbuy = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smbuy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smbuy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_smsale;
        break;
      }
      
      // optional .PBMailSaleMoneySale smsale = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smsale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smsale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_smbuyret;
        break;
      }
      
      // optional .PBMailSaleMoneyBuyReturn smbuyret = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smbuyret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smbuyret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_smsaleret;
        break;
      }
      
      // optional .PBMailSaleMoneySaleReturn smsaleret = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smsaleret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smsaleret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_aulockret;
        break;
      }
      
      // optional .PBMailAuctionLockRet aulockret = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aulockret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aulockret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_autimeout;
        break;
      }
      
      // optional .PBMailAuctionSaleTimeOut autimeout = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_autimeout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autimeout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_ausaleget;
        break;
      }
      
      // optional .PBMailAuctionSaleGet ausaleget = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ausaleget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ausaleget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_aubuyget;
        break;
      }
      
      // optional .PBMailAuctionBuyGet aubuyget = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aubuyget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aubuyget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_promote;
        break;
      }
      
      // optional .PBMailPromote promote = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_promote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_promote()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_DoingType;
        break;
      }
      
      // optional uint32 DoingType = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoingType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doingtype_)));
          set_has_doingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_factionboss;
        break;
      }
      
      // optional .PBMailFactionBoss factionboss = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factionboss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_factionboss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_worldboss;
        break;
      }
      
      // optional .PBMailWorldBoss worldboss = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worldboss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldboss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_copymapcash;
        break;
      }
      
      // optional .PBMailCopymapCashReward copymapcash = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copymapcash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_copymapcash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_singlepvpfirst;
        break;
      }
      
      // optional .PBMailSinglePvpFirstPrize singlepvpfirst = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_singlepvpfirst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_singlepvpfirst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_singlepvpday;
        break;
      }
      
      // optional .PBMailSinglePvpDayPrize singlepvpday = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_singlepvpday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_singlepvpday()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_singlepvpweek;
        break;
      }
      
      // optional .PBMailSinglePvpWeekPrize singlepvpweek = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_singlepvpweek:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_singlepvpweek()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_manortitle;
        break;
      }
      
      // optional .PBMailManorTitleGet manortitle = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manortitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manortitle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_manorresult;
        break;
      }
      
      // optional .PBMailManorResult manorresult = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorresult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manorresult()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_factioninfo;
        break;
      }
      
      // optional .PBMailFactionInfo factioninfo = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factioninfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_factioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_toplist;
        break;
      }
      
      // optional .PBMailTopListInfo toplist = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toplist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 worldid = 1;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldid(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 mailid = 3;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mailid(), output);
  }
  
  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }
  
  // optional uint64 sendtime = 5;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sendtime(), output);
  }
  
  // optional uint32 senderid = 6;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->senderid(), output);
  }
  
  // optional string sender = 7;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sender(), output);
  }
  
  // optional string title = 8;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->title(), output);
  }
  
  // optional string text = 9;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->text(), output);
  }
  
  // optional uint32 readed = 10;
  if (has_readed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->readed(), output);
  }
  
  // repeated .PBMoney money = 11;
  for (int i = 0; i < this->money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->money(i), output);
  }
  
  // repeated .PBItem item = 12;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->item(i), output);
  }
  
  // optional .PBMailSaleMoneyBuy smbuy = 13;
  if (has_smbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->smbuy(), output);
  }
  
  // optional .PBMailSaleMoneySale smsale = 14;
  if (has_smsale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->smsale(), output);
  }
  
  // optional .PBMailSaleMoneyBuyReturn smbuyret = 15;
  if (has_smbuyret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->smbuyret(), output);
  }
  
  // optional .PBMailSaleMoneySaleReturn smsaleret = 16;
  if (has_smsaleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->smsaleret(), output);
  }
  
  // optional .PBMailAuctionLockRet aulockret = 17;
  if (has_aulockret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->aulockret(), output);
  }
  
  // optional .PBMailAuctionSaleTimeOut autimeout = 18;
  if (has_autimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->autimeout(), output);
  }
  
  // optional .PBMailAuctionSaleGet ausaleget = 19;
  if (has_ausaleget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->ausaleget(), output);
  }
  
  // optional .PBMailAuctionBuyGet aubuyget = 20;
  if (has_aubuyget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->aubuyget(), output);
  }
  
  // optional .PBMailPromote promote = 21;
  if (has_promote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->promote(), output);
  }
  
  // optional uint32 DoingType = 22;
  if (has_doingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->doingtype(), output);
  }
  
  // optional .PBMailFactionBoss factionboss = 23;
  if (has_factionboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->factionboss(), output);
  }
  
  // optional .PBMailWorldBoss worldboss = 24;
  if (has_worldboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->worldboss(), output);
  }
  
  // optional .PBMailCopymapCashReward copymapcash = 25;
  if (has_copymapcash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->copymapcash(), output);
  }
  
  // optional .PBMailSinglePvpFirstPrize singlepvpfirst = 26;
  if (has_singlepvpfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->singlepvpfirst(), output);
  }
  
  // optional .PBMailSinglePvpDayPrize singlepvpday = 27;
  if (has_singlepvpday()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->singlepvpday(), output);
  }
  
  // optional .PBMailSinglePvpWeekPrize singlepvpweek = 28;
  if (has_singlepvpweek()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->singlepvpweek(), output);
  }
  
  // optional .PBMailManorTitleGet manortitle = 29;
  if (has_manortitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->manortitle(), output);
  }
  
  // optional .PBMailManorResult manorresult = 30;
  if (has_manorresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->manorresult(), output);
  }
  
  // optional .PBMailFactionInfo factioninfo = 31;
  if (has_factioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->factioninfo(), output);
  }
  
  // optional .PBMailTopListInfo toplist = 32;
  if (has_toplist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->toplist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 worldid = 1;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 mailid = 3;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mailid(), target);
  }
  
  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }
  
  // optional uint64 sendtime = 5;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sendtime(), target);
  }
  
  // optional uint32 senderid = 6;
  if (has_senderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->senderid(), target);
  }
  
  // optional string sender = 7;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sender(), target);
  }
  
  // optional string title = 8;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->title(), target);
  }
  
  // optional string text = 9;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->text(), target);
  }
  
  // optional uint32 readed = 10;
  if (has_readed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->readed(), target);
  }
  
  // repeated .PBMoney money = 11;
  for (int i = 0; i < this->money_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->money(i), target);
  }
  
  // repeated .PBItem item = 12;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->item(i), target);
  }
  
  // optional .PBMailSaleMoneyBuy smbuy = 13;
  if (has_smbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->smbuy(), target);
  }
  
  // optional .PBMailSaleMoneySale smsale = 14;
  if (has_smsale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->smsale(), target);
  }
  
  // optional .PBMailSaleMoneyBuyReturn smbuyret = 15;
  if (has_smbuyret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->smbuyret(), target);
  }
  
  // optional .PBMailSaleMoneySaleReturn smsaleret = 16;
  if (has_smsaleret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->smsaleret(), target);
  }
  
  // optional .PBMailAuctionLockRet aulockret = 17;
  if (has_aulockret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->aulockret(), target);
  }
  
  // optional .PBMailAuctionSaleTimeOut autimeout = 18;
  if (has_autimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->autimeout(), target);
  }
  
  // optional .PBMailAuctionSaleGet ausaleget = 19;
  if (has_ausaleget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->ausaleget(), target);
  }
  
  // optional .PBMailAuctionBuyGet aubuyget = 20;
  if (has_aubuyget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->aubuyget(), target);
  }
  
  // optional .PBMailPromote promote = 21;
  if (has_promote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->promote(), target);
  }
  
  // optional uint32 DoingType = 22;
  if (has_doingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->doingtype(), target);
  }
  
  // optional .PBMailFactionBoss factionboss = 23;
  if (has_factionboss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->factionboss(), target);
  }
  
  // optional .PBMailWorldBoss worldboss = 24;
  if (has_worldboss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->worldboss(), target);
  }
  
  // optional .PBMailCopymapCashReward copymapcash = 25;
  if (has_copymapcash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->copymapcash(), target);
  }
  
  // optional .PBMailSinglePvpFirstPrize singlepvpfirst = 26;
  if (has_singlepvpfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->singlepvpfirst(), target);
  }
  
  // optional .PBMailSinglePvpDayPrize singlepvpday = 27;
  if (has_singlepvpday()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->singlepvpday(), target);
  }
  
  // optional .PBMailSinglePvpWeekPrize singlepvpweek = 28;
  if (has_singlepvpweek()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->singlepvpweek(), target);
  }
  
  // optional .PBMailManorTitleGet manortitle = 29;
  if (has_manortitle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->manortitle(), target);
  }
  
  // optional .PBMailManorResult manorresult = 30;
  if (has_manorresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->manorresult(), target);
  }
  
  // optional .PBMailFactionInfo factioninfo = 31;
  if (has_factioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->factioninfo(), target);
  }
  
  // optional .PBMailTopListInfo toplist = 32;
  if (has_toplist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->toplist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 worldid = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 mailid = 3;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional uint64 sendtime = 5;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendtime());
    }
    
    // optional uint32 senderid = 6;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->senderid());
    }
    
    // optional string sender = 7;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }
    
    // optional string title = 8;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string text = 9;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional uint32 readed = 10;
    if (has_readed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->readed());
    }
    
    // optional .PBMailSaleMoneyBuy smbuy = 13;
    if (has_smbuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smbuy());
    }
    
    // optional .PBMailSaleMoneySale smsale = 14;
    if (has_smsale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smsale());
    }
    
    // optional .PBMailSaleMoneyBuyReturn smbuyret = 15;
    if (has_smbuyret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smbuyret());
    }
    
    // optional .PBMailSaleMoneySaleReturn smsaleret = 16;
    if (has_smsaleret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smsaleret());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PBMailAuctionLockRet aulockret = 17;
    if (has_aulockret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aulockret());
    }
    
    // optional .PBMailAuctionSaleTimeOut autimeout = 18;
    if (has_autimeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->autimeout());
    }
    
    // optional .PBMailAuctionSaleGet ausaleget = 19;
    if (has_ausaleget()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ausaleget());
    }
    
    // optional .PBMailAuctionBuyGet aubuyget = 20;
    if (has_aubuyget()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aubuyget());
    }
    
    // optional .PBMailPromote promote = 21;
    if (has_promote()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->promote());
    }
    
    // optional uint32 DoingType = 22;
    if (has_doingtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->doingtype());
    }
    
    // optional .PBMailFactionBoss factionboss = 23;
    if (has_factionboss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->factionboss());
    }
    
    // optional .PBMailWorldBoss worldboss = 24;
    if (has_worldboss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worldboss());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .PBMailCopymapCashReward copymapcash = 25;
    if (has_copymapcash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->copymapcash());
    }
    
    // optional .PBMailSinglePvpFirstPrize singlepvpfirst = 26;
    if (has_singlepvpfirst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singlepvpfirst());
    }
    
    // optional .PBMailSinglePvpDayPrize singlepvpday = 27;
    if (has_singlepvpday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singlepvpday());
    }
    
    // optional .PBMailSinglePvpWeekPrize singlepvpweek = 28;
    if (has_singlepvpweek()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singlepvpweek());
    }
    
    // optional .PBMailManorTitleGet manortitle = 29;
    if (has_manortitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manortitle());
    }
    
    // optional .PBMailManorResult manorresult = 30;
    if (has_manorresult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manorresult());
    }
    
    // optional .PBMailFactionInfo factioninfo = 31;
    if (has_factioninfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->factioninfo());
    }
    
    // optional .PBMailTopListInfo toplist = 32;
    if (has_toplist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toplist());
    }
    
  }
  // repeated .PBMoney money = 11;
  total_size += 1 * this->money_size();
  for (int i = 0; i < this->money_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->money(i));
  }
  
  // repeated .PBItem item = 12;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMail::MergeFrom(const PBMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  money_.MergeFrom(from.money_);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_readed()) {
      set_readed(from.readed());
    }
    if (from.has_smbuy()) {
      mutable_smbuy()->::PBMailSaleMoneyBuy::MergeFrom(from.smbuy());
    }
    if (from.has_smsale()) {
      mutable_smsale()->::PBMailSaleMoneySale::MergeFrom(from.smsale());
    }
    if (from.has_smbuyret()) {
      mutable_smbuyret()->::PBMailSaleMoneyBuyReturn::MergeFrom(from.smbuyret());
    }
    if (from.has_smsaleret()) {
      mutable_smsaleret()->::PBMailSaleMoneySaleReturn::MergeFrom(from.smsaleret());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_aulockret()) {
      mutable_aulockret()->::PBMailAuctionLockRet::MergeFrom(from.aulockret());
    }
    if (from.has_autimeout()) {
      mutable_autimeout()->::PBMailAuctionSaleTimeOut::MergeFrom(from.autimeout());
    }
    if (from.has_ausaleget()) {
      mutable_ausaleget()->::PBMailAuctionSaleGet::MergeFrom(from.ausaleget());
    }
    if (from.has_aubuyget()) {
      mutable_aubuyget()->::PBMailAuctionBuyGet::MergeFrom(from.aubuyget());
    }
    if (from.has_promote()) {
      mutable_promote()->::PBMailPromote::MergeFrom(from.promote());
    }
    if (from.has_doingtype()) {
      set_doingtype(from.doingtype());
    }
    if (from.has_factionboss()) {
      mutable_factionboss()->::PBMailFactionBoss::MergeFrom(from.factionboss());
    }
    if (from.has_worldboss()) {
      mutable_worldboss()->::PBMailWorldBoss::MergeFrom(from.worldboss());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_copymapcash()) {
      mutable_copymapcash()->::PBMailCopymapCashReward::MergeFrom(from.copymapcash());
    }
    if (from.has_singlepvpfirst()) {
      mutable_singlepvpfirst()->::PBMailSinglePvpFirstPrize::MergeFrom(from.singlepvpfirst());
    }
    if (from.has_singlepvpday()) {
      mutable_singlepvpday()->::PBMailSinglePvpDayPrize::MergeFrom(from.singlepvpday());
    }
    if (from.has_singlepvpweek()) {
      mutable_singlepvpweek()->::PBMailSinglePvpWeekPrize::MergeFrom(from.singlepvpweek());
    }
    if (from.has_manortitle()) {
      mutable_manortitle()->::PBMailManorTitleGet::MergeFrom(from.manortitle());
    }
    if (from.has_manorresult()) {
      mutable_manorresult()->::PBMailManorResult::MergeFrom(from.manorresult());
    }
    if (from.has_factioninfo()) {
      mutable_factioninfo()->::PBMailFactionInfo::MergeFrom(from.factioninfo());
    }
    if (from.has_toplist()) {
      mutable_toplist()->::PBMailTopListInfo::MergeFrom(from.toplist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMail::CopyFrom(const PBMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMail::IsInitialized() const {
  
  return true;
}

void PBMail::Swap(PBMail* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(playerid_, other->playerid_);
    std::swap(mailid_, other->mailid_);
    std::swap(type_, other->type_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(senderid_, other->senderid_);
    std::swap(sender_, other->sender_);
    std::swap(title_, other->title_);
    std::swap(text_, other->text_);
    std::swap(readed_, other->readed_);
    money_.Swap(&other->money_);
    item_.Swap(&other->item_);
    std::swap(smbuy_, other->smbuy_);
    std::swap(smsale_, other->smsale_);
    std::swap(smbuyret_, other->smbuyret_);
    std::swap(smsaleret_, other->smsaleret_);
    std::swap(aulockret_, other->aulockret_);
    std::swap(autimeout_, other->autimeout_);
    std::swap(ausaleget_, other->ausaleget_);
    std::swap(aubuyget_, other->aubuyget_);
    std::swap(promote_, other->promote_);
    std::swap(doingtype_, other->doingtype_);
    std::swap(factionboss_, other->factionboss_);
    std::swap(worldboss_, other->worldboss_);
    std::swap(copymapcash_, other->copymapcash_);
    std::swap(singlepvpfirst_, other->singlepvpfirst_);
    std::swap(singlepvpday_, other->singlepvpday_);
    std::swap(singlepvpweek_, other->singlepvpweek_);
    std::swap(manortitle_, other->manortitle_);
    std::swap(manorresult_, other->manorresult_);
    std::swap(factioninfo_, other->factioninfo_);
    std::swap(toplist_, other->toplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMail_descriptor_;
  metadata.reflection = PBMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerMail::kSaveorderFieldNumber;
const int PBPlayerMail::kMaillistFieldNumber;
#endif  // !_MSC_VER

PBPlayerMail::PBPlayerMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerMail::InitAsDefaultInstance() {
}

PBPlayerMail::PBPlayerMail(const PBPlayerMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerMail::SharedCtor() {
  _cached_size_ = 0;
  saveorder_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerMail::~PBPlayerMail() {
  SharedDtor();
}

void PBPlayerMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerMail_descriptor_;
}

const PBPlayerMail& PBPlayerMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerMail* PBPlayerMail::default_instance_ = NULL;

PBPlayerMail* PBPlayerMail::New() const {
  return new PBPlayerMail;
}

void PBPlayerMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveorder_ = 0u;
  }
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveorder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveorder_)));
          set_has_saveorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_maillist;
        break;
      }
      
      // repeated .PBMail maillist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maillist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_maillist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveorder(), output);
  }
  
  // repeated .PBMail maillist = 2;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->maillist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveorder(), target);
  }
  
  // repeated .PBMail maillist = 2;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->maillist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveorder = 1;
    if (has_saveorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveorder());
    }
    
  }
  // repeated .PBMail maillist = 2;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerMail::MergeFrom(const PBPlayerMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveorder()) {
      set_saveorder(from.saveorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerMail::CopyFrom(const PBPlayerMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerMail::IsInitialized() const {
  
  return true;
}

void PBPlayerMail::Swap(PBPlayerMail* other) {
  if (other != this) {
    std::swap(saveorder_, other->saveorder_);
    maillist_.Swap(&other->maillist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerMail_descriptor_;
  metadata.reflection = PBPlayerMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFriendInfo::kDisplayFieldNumber;
const int PBFriendInfo::kTypeFieldNumber;
const int PBFriendInfo::kOnlineFieldNumber;
const int PBFriendInfo::kFriendvalueFieldNumber;
const int PBFriendInfo::kTimeFieldNumber;
const int PBFriendInfo::kUpdatetimeFieldNumber;
const int PBFriendInfo::kFightpowerFieldNumber;
#endif  // !_MSC_VER

PBFriendInfo::PBFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFriendInfo::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBFriendInfo::PBFriendInfo(const PBFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  type_ = 0u;
  online_ = false;
  friendvalue_ = 0u;
  time_ = 0u;
  updatetime_ = 0u;
  fightpower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFriendInfo::~PBFriendInfo() {
  SharedDtor();
}

void PBFriendInfo::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFriendInfo_descriptor_;
}

const PBFriendInfo& PBFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBFriendInfo* PBFriendInfo::default_instance_ = NULL;

PBFriendInfo* PBFriendInfo::New() const {
  return new PBFriendInfo;
}

void PBFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    type_ = 0u;
    online_ = false;
    friendvalue_ = 0u;
    time_ = 0u;
    updatetime_ = 0u;
    fightpower_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_online;
        break;
      }
      
      // optional bool online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_friendvalue;
        break;
      }
      
      // optional uint32 friendvalue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendvalue_)));
          set_has_friendvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_updatetime;
        break;
      }
      
      // optional uint32 updatetime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updatetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional bool online = 3;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }
  
  // optional uint32 friendvalue = 4;
  if (has_friendvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->friendvalue(), output);
  }
  
  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }
  
  // optional uint32 updatetime = 6;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->updatetime(), output);
  }
  
  // optional uint32 fightpower = 7;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fightpower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional bool online = 3;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->online(), target);
  }
  
  // optional uint32 friendvalue = 4;
  if (has_friendvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->friendvalue(), target);
  }
  
  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }
  
  // optional uint32 updatetime = 6;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->updatetime(), target);
  }
  
  // optional uint32 fightpower = 7;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fightpower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFriendInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional bool online = 3;
    if (has_online()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 friendvalue = 4;
    if (has_friendvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendvalue());
    }
    
    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // optional uint32 updatetime = 6;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatetime());
    }
    
    // optional uint32 fightpower = 7;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFriendInfo::MergeFrom(const PBFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_friendvalue()) {
      set_friendvalue(from.friendvalue());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriendInfo::CopyFrom(const PBFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFriendInfo::IsInitialized() const {
  
  return true;
}

void PBFriendInfo::Swap(PBFriendInfo* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(type_, other->type_);
    std::swap(online_, other->online_);
    std::swap(friendvalue_, other->friendvalue_);
    std::swap(time_, other->time_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFriendInfo_descriptor_;
  metadata.reflection = PBFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFriendGroup::kTypeFieldNumber;
const int PBFriendGroup::kListFieldNumber;
#endif  // !_MSC_VER

PBFriendGroup::PBFriendGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFriendGroup::InitAsDefaultInstance() {
}

PBFriendGroup::PBFriendGroup(const PBFriendGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFriendGroup::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFriendGroup::~PBFriendGroup() {
  SharedDtor();
}

void PBFriendGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFriendGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFriendGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFriendGroup_descriptor_;
}

const PBFriendGroup& PBFriendGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBFriendGroup* PBFriendGroup::default_instance_ = NULL;

PBFriendGroup* PBFriendGroup::New() const {
  return new PBFriendGroup;
}

void PBFriendGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFriendGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }
      
      // repeated .PBFriendInfo list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFriendGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // repeated .PBFriendInfo list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFriendGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // repeated .PBFriendInfo list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFriendGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  // repeated .PBFriendInfo list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFriendGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFriendGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFriendGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFriendGroup::MergeFrom(const PBFriendGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFriendGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriendGroup::CopyFrom(const PBFriendGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFriendGroup::IsInitialized() const {
  
  return true;
}

void PBFriendGroup::Swap(PBFriendGroup* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFriendGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFriendGroup_descriptor_;
  metadata.reflection = PBFriendGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerFriend::kSaveorderFieldNumber;
const int PBPlayerFriend::kGroupFieldNumber;
#endif  // !_MSC_VER

PBPlayerFriend::PBPlayerFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerFriend::InitAsDefaultInstance() {
}

PBPlayerFriend::PBPlayerFriend(const PBPlayerFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerFriend::SharedCtor() {
  _cached_size_ = 0;
  saveorder_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerFriend::~PBPlayerFriend() {
  SharedDtor();
}

void PBPlayerFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerFriend_descriptor_;
}

const PBPlayerFriend& PBPlayerFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerFriend* PBPlayerFriend::default_instance_ = NULL;

PBPlayerFriend* PBPlayerFriend::New() const {
  return new PBPlayerFriend;
}

void PBPlayerFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveorder_ = 0u;
  }
  group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveorder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveorder_)));
          set_has_saveorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group;
        break;
      }
      
      // repeated .PBFriendGroup group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveorder(), output);
  }
  
  // repeated .PBFriendGroup group = 2;
  for (int i = 0; i < this->group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveorder(), target);
  }
  
  // repeated .PBFriendGroup group = 2;
  for (int i = 0; i < this->group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveorder = 1;
    if (has_saveorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveorder());
    }
    
  }
  // repeated .PBFriendGroup group = 2;
  total_size += 1 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerFriend::MergeFrom(const PBPlayerFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_.MergeFrom(from.group_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveorder()) {
      set_saveorder(from.saveorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerFriend::CopyFrom(const PBPlayerFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerFriend::IsInitialized() const {
  
  return true;
}

void PBPlayerFriend::Swap(PBPlayerFriend* other) {
  if (other != this) {
    std::swap(saveorder_, other->saveorder_);
    group_.Swap(&other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerFriend_descriptor_;
  metadata.reflection = PBPlayerFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionBossPersonalTop::kDisplayFieldNumber;
const int PBFactionBossPersonalTop::kOrderFieldNumber;
const int PBFactionBossPersonalTop::kScoreFieldNumber;
const int PBFactionBossPersonalTop::kTimeFieldNumber;
#endif  // !_MSC_VER

PBFactionBossPersonalTop::PBFactionBossPersonalTop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionBossPersonalTop::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBFactionBossPersonalTop::PBFactionBossPersonalTop(const PBFactionBossPersonalTop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionBossPersonalTop::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  order_ = 0u;
  score_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionBossPersonalTop::~PBFactionBossPersonalTop() {
  SharedDtor();
}

void PBFactionBossPersonalTop::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBFactionBossPersonalTop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionBossPersonalTop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionBossPersonalTop_descriptor_;
}

const PBFactionBossPersonalTop& PBFactionBossPersonalTop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBFactionBossPersonalTop* PBFactionBossPersonalTop::default_instance_ = NULL;

PBFactionBossPersonalTop* PBFactionBossPersonalTop::New() const {
  return new PBFactionBossPersonalTop;
}

void PBFactionBossPersonalTop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    order_ = 0u;
    score_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionBossPersonalTop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }
      
      // optional uint32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }
      
      // optional uint64 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionBossPersonalTop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order(), output);
  }
  
  // optional uint64 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->score(), output);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionBossPersonalTop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->order(), target);
  }
  
  // optional uint64 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->score(), target);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionBossPersonalTop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }
    
    // optional uint64 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }
    
    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionBossPersonalTop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionBossPersonalTop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionBossPersonalTop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionBossPersonalTop::MergeFrom(const PBFactionBossPersonalTop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionBossPersonalTop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionBossPersonalTop::CopyFrom(const PBFactionBossPersonalTop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionBossPersonalTop::IsInitialized() const {
  
  return true;
}

void PBFactionBossPersonalTop::Swap(PBFactionBossPersonalTop* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(order_, other->order_);
    std::swap(score_, other->score_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionBossPersonalTop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionBossPersonalTop_descriptor_;
  metadata.reflection = PBFactionBossPersonalTop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionBossFactionTop::kFactionFieldNumber;
const int PBFactionBossFactionTop::kOrderFieldNumber;
const int PBFactionBossFactionTop::kScoreFieldNumber;
const int PBFactionBossFactionTop::kTimeFieldNumber;
#endif  // !_MSC_VER

PBFactionBossFactionTop::PBFactionBossFactionTop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionBossFactionTop::InitAsDefaultInstance() {
  faction_ = const_cast< ::PBFactionDisplay*>(&::PBFactionDisplay::default_instance());
}

PBFactionBossFactionTop::PBFactionBossFactionTop(const PBFactionBossFactionTop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionBossFactionTop::SharedCtor() {
  _cached_size_ = 0;
  faction_ = NULL;
  order_ = 0u;
  score_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionBossFactionTop::~PBFactionBossFactionTop() {
  SharedDtor();
}

void PBFactionBossFactionTop::SharedDtor() {
  if (this != default_instance_) {
    delete faction_;
  }
}

void PBFactionBossFactionTop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionBossFactionTop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionBossFactionTop_descriptor_;
}

const PBFactionBossFactionTop& PBFactionBossFactionTop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBFactionBossFactionTop* PBFactionBossFactionTop::default_instance_ = NULL;

PBFactionBossFactionTop* PBFactionBossFactionTop::New() const {
  return new PBFactionBossFactionTop;
}

void PBFactionBossFactionTop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_faction()) {
      if (faction_ != NULL) faction_->::PBFactionDisplay::Clear();
    }
    order_ = 0u;
    score_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionBossFactionTop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionDisplay faction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_faction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }
      
      // optional uint32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }
      
      // optional uint64 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionBossFactionTop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionDisplay faction = 1;
  if (has_faction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->faction(), output);
  }
  
  // optional uint32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order(), output);
  }
  
  // optional uint64 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->score(), output);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionBossFactionTop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionDisplay faction = 1;
  if (has_faction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->faction(), target);
  }
  
  // optional uint32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->order(), target);
  }
  
  // optional uint64 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->score(), target);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionBossFactionTop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionDisplay faction = 1;
    if (has_faction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->faction());
    }
    
    // optional uint32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }
    
    // optional uint64 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }
    
    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionBossFactionTop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionBossFactionTop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionBossFactionTop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionBossFactionTop::MergeFrom(const PBFactionBossFactionTop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction()) {
      mutable_faction()->::PBFactionDisplay::MergeFrom(from.faction());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionBossFactionTop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionBossFactionTop::CopyFrom(const PBFactionBossFactionTop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionBossFactionTop::IsInitialized() const {
  
  return true;
}

void PBFactionBossFactionTop::Swap(PBFactionBossFactionTop* other) {
  if (other != this) {
    std::swap(faction_, other->faction_);
    std::swap(order_, other->order_);
    std::swap(score_, other->score_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionBossFactionTop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionBossFactionTop_descriptor_;
  metadata.reflection = PBFactionBossFactionTop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionBossUnionTop::kFactionFieldNumber;
const int PBFactionBossUnionTop::kOrderFieldNumber;
const int PBFactionBossUnionTop::kScoreFieldNumber;
const int PBFactionBossUnionTop::kTimeFieldNumber;
#endif  // !_MSC_VER

PBFactionBossUnionTop::PBFactionBossUnionTop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionBossUnionTop::InitAsDefaultInstance() {
  faction_ = const_cast< ::PBFactionDisplay*>(&::PBFactionDisplay::default_instance());
}

PBFactionBossUnionTop::PBFactionBossUnionTop(const PBFactionBossUnionTop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionBossUnionTop::SharedCtor() {
  _cached_size_ = 0;
  faction_ = NULL;
  order_ = 0u;
  score_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionBossUnionTop::~PBFactionBossUnionTop() {
  SharedDtor();
}

void PBFactionBossUnionTop::SharedDtor() {
  if (this != default_instance_) {
    delete faction_;
  }
}

void PBFactionBossUnionTop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionBossUnionTop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionBossUnionTop_descriptor_;
}

const PBFactionBossUnionTop& PBFactionBossUnionTop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBFactionBossUnionTop* PBFactionBossUnionTop::default_instance_ = NULL;

PBFactionBossUnionTop* PBFactionBossUnionTop::New() const {
  return new PBFactionBossUnionTop;
}

void PBFactionBossUnionTop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_faction()) {
      if (faction_ != NULL) faction_->::PBFactionDisplay::Clear();
    }
    order_ = 0u;
    score_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionBossUnionTop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionDisplay faction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_faction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }
      
      // optional uint32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }
      
      // optional uint64 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionBossUnionTop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionDisplay faction = 1;
  if (has_faction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->faction(), output);
  }
  
  // optional uint32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order(), output);
  }
  
  // optional uint64 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->score(), output);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionBossUnionTop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionDisplay faction = 1;
  if (has_faction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->faction(), target);
  }
  
  // optional uint32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->order(), target);
  }
  
  // optional uint64 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->score(), target);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionBossUnionTop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionDisplay faction = 1;
    if (has_faction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->faction());
    }
    
    // optional uint32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }
    
    // optional uint64 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }
    
    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionBossUnionTop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionBossUnionTop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionBossUnionTop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionBossUnionTop::MergeFrom(const PBFactionBossUnionTop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction()) {
      mutable_faction()->::PBFactionDisplay::MergeFrom(from.faction());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionBossUnionTop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionBossUnionTop::CopyFrom(const PBFactionBossUnionTop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionBossUnionTop::IsInitialized() const {
  
  return true;
}

void PBFactionBossUnionTop::Swap(PBFactionBossUnionTop* other) {
  if (other != this) {
    std::swap(faction_, other->faction_);
    std::swap(order_, other->order_);
    std::swap(score_, other->score_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionBossUnionTop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionBossUnionTop_descriptor_;
  metadata.reflection = PBFactionBossUnionTop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerData::kAccountinfoFieldNumber;
const int PBPlayerData::kPlayerbaseFieldNumber;
const int PBPlayerData::kPlayersystemFieldNumber;
const int PBPlayerData::kPlayerBagFieldNumber;
const int PBPlayerData::kClientdataFieldNumber;
const int PBPlayerData::kPlayerquestFieldNumber;
const int PBPlayerData::kPlayermailFieldNumber;
const int PBPlayerData::kPlayerfriendFieldNumber;
const int PBPlayerData::kPlayerfactionFieldNumber;
#endif  // !_MSC_VER

PBPlayerData::PBPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerData::InitAsDefaultInstance() {
  accountinfo_ = const_cast< ::PBAccount*>(&::PBAccount::default_instance());
  playerbase_ = const_cast< ::PBPlayerBase*>(&::PBPlayerBase::default_instance());
  playersystem_ = const_cast< ::PBPlayerSystem*>(&::PBPlayerSystem::default_instance());
  playerbag_ = const_cast< ::PBPlayerBag*>(&::PBPlayerBag::default_instance());
  clientdata_ = const_cast< ::PBClientData*>(&::PBClientData::default_instance());
  playerquest_ = const_cast< ::PBPlayerQuest*>(&::PBPlayerQuest::default_instance());
  playermail_ = const_cast< ::PBPlayerMail*>(&::PBPlayerMail::default_instance());
  playerfriend_ = const_cast< ::PBPlayerFriend*>(&::PBPlayerFriend::default_instance());
  playerfaction_ = const_cast< ::PBPlayerFaction*>(&::PBPlayerFaction::default_instance());
}

PBPlayerData::PBPlayerData(const PBPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerData::SharedCtor() {
  _cached_size_ = 0;
  accountinfo_ = NULL;
  playerbase_ = NULL;
  playersystem_ = NULL;
  playerbag_ = NULL;
  clientdata_ = NULL;
  playerquest_ = NULL;
  playermail_ = NULL;
  playerfriend_ = NULL;
  playerfaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerData::~PBPlayerData() {
  SharedDtor();
}

void PBPlayerData::SharedDtor() {
  if (this != default_instance_) {
    delete accountinfo_;
    delete playerbase_;
    delete playersystem_;
    delete playerbag_;
    delete clientdata_;
    delete playerquest_;
    delete playermail_;
    delete playerfriend_;
    delete playerfaction_;
  }
}

void PBPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerData_descriptor_;
}

const PBPlayerData& PBPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerData* PBPlayerData::default_instance_ = NULL;

PBPlayerData* PBPlayerData::New() const {
  return new PBPlayerData;
}

void PBPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountinfo()) {
      if (accountinfo_ != NULL) accountinfo_->::PBAccount::Clear();
    }
    if (has_playerbase()) {
      if (playerbase_ != NULL) playerbase_->::PBPlayerBase::Clear();
    }
    if (has_playersystem()) {
      if (playersystem_ != NULL) playersystem_->::PBPlayerSystem::Clear();
    }
    if (has_playerbag()) {
      if (playerbag_ != NULL) playerbag_->::PBPlayerBag::Clear();
    }
    if (has_clientdata()) {
      if (clientdata_ != NULL) clientdata_->::PBClientData::Clear();
    }
    if (has_playerquest()) {
      if (playerquest_ != NULL) playerquest_->::PBPlayerQuest::Clear();
    }
    if (has_playermail()) {
      if (playermail_ != NULL) playermail_->::PBPlayerMail::Clear();
    }
    if (has_playerfriend()) {
      if (playerfriend_ != NULL) playerfriend_->::PBPlayerFriend::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_playerfaction()) {
      if (playerfaction_ != NULL) playerfaction_->::PBPlayerFaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBAccount accountinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accountinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerbase;
        break;
      }
      
      // optional .PBPlayerBase playerbase = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerbase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playersystem;
        break;
      }
      
      // optional .PBPlayerSystem playersystem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playersystem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playersystem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playerBag;
        break;
      }
      
      // optional .PBPlayerBag playerBag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerbag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_clientdata;
        break;
      }
      
      // optional .PBClientData clientdata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerquest;
        break;
      }
      
      // optional .PBPlayerQuest playerquest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerquest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerquest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_playermail;
        break;
      }
      
      // optional .PBPlayerMail playermail = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playermail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playermail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_playerfriend;
        break;
      }
      
      // optional .PBPlayerFriend playerfriend = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerfriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_playerfaction;
        break;
      }
      
      // optional .PBPlayerFaction playerfaction = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerfaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerfaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBAccount accountinfo = 1;
  if (has_accountinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accountinfo(), output);
  }
  
  // optional .PBPlayerBase playerbase = 2;
  if (has_playerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerbase(), output);
  }
  
  // optional .PBPlayerSystem playersystem = 3;
  if (has_playersystem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playersystem(), output);
  }
  
  // optional .PBPlayerBag playerBag = 4;
  if (has_playerbag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->playerbag(), output);
  }
  
  // optional .PBClientData clientdata = 5;
  if (has_clientdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->clientdata(), output);
  }
  
  // optional .PBPlayerQuest playerquest = 6;
  if (has_playerquest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->playerquest(), output);
  }
  
  // optional .PBPlayerMail playermail = 7;
  if (has_playermail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->playermail(), output);
  }
  
  // optional .PBPlayerFriend playerfriend = 8;
  if (has_playerfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->playerfriend(), output);
  }
  
  // optional .PBPlayerFaction playerfaction = 9;
  if (has_playerfaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->playerfaction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBAccount accountinfo = 1;
  if (has_accountinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accountinfo(), target);
  }
  
  // optional .PBPlayerBase playerbase = 2;
  if (has_playerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerbase(), target);
  }
  
  // optional .PBPlayerSystem playersystem = 3;
  if (has_playersystem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playersystem(), target);
  }
  
  // optional .PBPlayerBag playerBag = 4;
  if (has_playerbag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->playerbag(), target);
  }
  
  // optional .PBClientData clientdata = 5;
  if (has_clientdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->clientdata(), target);
  }
  
  // optional .PBPlayerQuest playerquest = 6;
  if (has_playerquest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->playerquest(), target);
  }
  
  // optional .PBPlayerMail playermail = 7;
  if (has_playermail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->playermail(), target);
  }
  
  // optional .PBPlayerFriend playerfriend = 8;
  if (has_playerfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->playerfriend(), target);
  }
  
  // optional .PBPlayerFaction playerfaction = 9;
  if (has_playerfaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->playerfaction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBAccount accountinfo = 1;
    if (has_accountinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accountinfo());
    }
    
    // optional .PBPlayerBase playerbase = 2;
    if (has_playerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerbase());
    }
    
    // optional .PBPlayerSystem playersystem = 3;
    if (has_playersystem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playersystem());
    }
    
    // optional .PBPlayerBag playerBag = 4;
    if (has_playerbag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerbag());
    }
    
    // optional .PBClientData clientdata = 5;
    if (has_clientdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientdata());
    }
    
    // optional .PBPlayerQuest playerquest = 6;
    if (has_playerquest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerquest());
    }
    
    // optional .PBPlayerMail playermail = 7;
    if (has_playermail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playermail());
    }
    
    // optional .PBPlayerFriend playerfriend = 8;
    if (has_playerfriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerfriend());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBPlayerFaction playerfaction = 9;
    if (has_playerfaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerfaction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerData::MergeFrom(const PBPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountinfo()) {
      mutable_accountinfo()->::PBAccount::MergeFrom(from.accountinfo());
    }
    if (from.has_playerbase()) {
      mutable_playerbase()->::PBPlayerBase::MergeFrom(from.playerbase());
    }
    if (from.has_playersystem()) {
      mutable_playersystem()->::PBPlayerSystem::MergeFrom(from.playersystem());
    }
    if (from.has_playerbag()) {
      mutable_playerbag()->::PBPlayerBag::MergeFrom(from.playerbag());
    }
    if (from.has_clientdata()) {
      mutable_clientdata()->::PBClientData::MergeFrom(from.clientdata());
    }
    if (from.has_playerquest()) {
      mutable_playerquest()->::PBPlayerQuest::MergeFrom(from.playerquest());
    }
    if (from.has_playermail()) {
      mutable_playermail()->::PBPlayerMail::MergeFrom(from.playermail());
    }
    if (from.has_playerfriend()) {
      mutable_playerfriend()->::PBPlayerFriend::MergeFrom(from.playerfriend());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerfaction()) {
      mutable_playerfaction()->::PBPlayerFaction::MergeFrom(from.playerfaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerData::CopyFrom(const PBPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerData::IsInitialized() const {
  
  return true;
}

void PBPlayerData::Swap(PBPlayerData* other) {
  if (other != this) {
    std::swap(accountinfo_, other->accountinfo_);
    std::swap(playerbase_, other->playerbase_);
    std::swap(playersystem_, other->playersystem_);
    std::swap(playerbag_, other->playerbag_);
    std::swap(clientdata_, other->clientdata_);
    std::swap(playerquest_, other->playerquest_);
    std::swap(playermail_, other->playermail_);
    std::swap(playerfriend_, other->playerfriend_);
    std::swap(playerfaction_, other->playerfaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerData_descriptor_;
  metadata.reflection = PBPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerEquipData::kEquipFieldNumber;
#endif  // !_MSC_VER

PBPlayerEquipData::PBPlayerEquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerEquipData::InitAsDefaultInstance() {
}

PBPlayerEquipData::PBPlayerEquipData(const PBPlayerEquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerEquipData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerEquipData::~PBPlayerEquipData() {
  SharedDtor();
}

void PBPlayerEquipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerEquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerEquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerEquipData_descriptor_;
}

const PBPlayerEquipData& PBPlayerEquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerEquipData* PBPlayerEquipData::default_instance_ = NULL;

PBPlayerEquipData* PBPlayerEquipData::New() const {
  return new PBPlayerEquipData;
}

void PBPlayerEquipData::Clear() {
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerEquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBItem equip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equip;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerEquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBItem equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equip(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerEquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBItem equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equip(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerEquipData::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBItem equip = 1;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerEquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerEquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerEquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerEquipData::MergeFrom(const PBPlayerEquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerEquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerEquipData::CopyFrom(const PBPlayerEquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerEquipData::IsInitialized() const {
  
  return true;
}

void PBPlayerEquipData::Swap(PBPlayerEquipData* other) {
  if (other != this) {
    equip_.Swap(&other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerEquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerEquipData_descriptor_;
  metadata.reflection = PBPlayerEquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostGameAttr::kAttrFieldNumber;
#endif  // !_MSC_VER

PBGhostGameAttr::PBGhostGameAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostGameAttr::InitAsDefaultInstance() {
}

PBGhostGameAttr::PBGhostGameAttr(const PBGhostGameAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostGameAttr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostGameAttr::~PBGhostGameAttr() {
  SharedDtor();
}

void PBGhostGameAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGhostGameAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostGameAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostGameAttr_descriptor_;
}

const PBGhostGameAttr& PBGhostGameAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBGhostGameAttr* PBGhostGameAttr::default_instance_ = NULL;

PBGhostGameAttr* PBGhostGameAttr::New() const {
  return new PBGhostGameAttr;
}

void PBGhostGameAttr::Clear() {
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostGameAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 attr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_attr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostGameAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 attr = 1;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->attr(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostGameAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 attr = 1;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->attr(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostGameAttr::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 attr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attr(i));
    }
    total_size += 1 * this->attr_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostGameAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostGameAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostGameAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostGameAttr::MergeFrom(const PBGhostGameAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostGameAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostGameAttr::CopyFrom(const PBGhostGameAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostGameAttr::IsInitialized() const {
  
  return true;
}

void PBGhostGameAttr::Swap(PBGhostGameAttr* other) {
  if (other != this) {
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostGameAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostGameAttr_descriptor_;
  metadata.reflection = PBGhostGameAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerView::kAvatarFieldNumber;
const int PBPlayerView::kEquipFieldNumber;
const int PBPlayerView::kFightpowerFieldNumber;
const int PBPlayerView::kAttriFieldNumber;
const int PBPlayerView::kPkvalueFieldNumber;
const int PBPlayerView::kBingfaFieldNumber;
const int PBPlayerView::kSinglePvpInfoFieldNumber;
#endif  // !_MSC_VER

PBPlayerView::PBPlayerView()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerView::InitAsDefaultInstance() {
  avatar_ = const_cast< ::PBPlayerAvatar*>(&::PBPlayerAvatar::default_instance());
  equip_ = const_cast< ::PBPlayerEquipData*>(&::PBPlayerEquipData::default_instance());
  attri_ = const_cast< ::PBGhostGameAttr*>(&::PBGhostGameAttr::default_instance());
  singlepvpinfo_ = const_cast< ::PBSinglePvpInfo*>(&::PBSinglePvpInfo::default_instance());
}

PBPlayerView::PBPlayerView(const PBPlayerView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerView::SharedCtor() {
  _cached_size_ = 0;
  avatar_ = NULL;
  equip_ = NULL;
  fightpower_ = 0u;
  attri_ = NULL;
  pkvalue_ = 0u;
  singlepvpinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerView::~PBPlayerView() {
  SharedDtor();
}

void PBPlayerView::SharedDtor() {
  if (this != default_instance_) {
    delete avatar_;
    delete equip_;
    delete attri_;
    delete singlepvpinfo_;
  }
}

void PBPlayerView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerView_descriptor_;
}

const PBPlayerView& PBPlayerView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBPlayerView* PBPlayerView::default_instance_ = NULL;

PBPlayerView* PBPlayerView::New() const {
  return new PBPlayerView;
}

void PBPlayerView::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::PBPlayerAvatar::Clear();
    }
    if (has_equip()) {
      if (equip_ != NULL) equip_->::PBPlayerEquipData::Clear();
    }
    fightpower_ = 0u;
    if (has_attri()) {
      if (attri_ != NULL) attri_->::PBGhostGameAttr::Clear();
    }
    pkvalue_ = 0u;
    if (has_singlepvpinfo()) {
      if (singlepvpinfo_ != NULL) singlepvpinfo_->::PBSinglePvpInfo::Clear();
    }
  }
  bingfa_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerAvatar avatar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }
      
      // optional .PBPlayerEquipData equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attri;
        break;
      }
      
      // optional .PBGhostGameAttr attri = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pkvalue;
        break;
      }
      
      // optional uint32 pkvalue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkvalue_)));
          set_has_pkvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bingfa;
        break;
      }
      
      // repeated .PBBingFa bingfa = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bingfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bingfa()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bingfa;
        if (input->ExpectTag(58)) goto parse_singlePvpInfo;
        break;
      }
      
      // optional .PBSinglePvpInfo singlePvpInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_singlePvpInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_singlepvpinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerAvatar avatar = 1;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->avatar(), output);
  }
  
  // optional .PBPlayerEquipData equip = 2;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(), output);
  }
  
  // optional uint32 fightpower = 3;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fightpower(), output);
  }
  
  // optional .PBGhostGameAttr attri = 4;
  if (has_attri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attri(), output);
  }
  
  // optional uint32 pkvalue = 5;
  if (has_pkvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pkvalue(), output);
  }
  
  // repeated .PBBingFa bingfa = 6;
  for (int i = 0; i < this->bingfa_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bingfa(i), output);
  }
  
  // optional .PBSinglePvpInfo singlePvpInfo = 7;
  if (has_singlepvpinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->singlepvpinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerAvatar avatar = 1;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->avatar(), target);
  }
  
  // optional .PBPlayerEquipData equip = 2;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(), target);
  }
  
  // optional uint32 fightpower = 3;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fightpower(), target);
  }
  
  // optional .PBGhostGameAttr attri = 4;
  if (has_attri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attri(), target);
  }
  
  // optional uint32 pkvalue = 5;
  if (has_pkvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pkvalue(), target);
  }
  
  // repeated .PBBingFa bingfa = 6;
  for (int i = 0; i < this->bingfa_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bingfa(i), target);
  }
  
  // optional .PBSinglePvpInfo singlePvpInfo = 7;
  if (has_singlepvpinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->singlepvpinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerView::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerAvatar avatar = 1;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }
    
    // optional .PBPlayerEquipData equip = 2;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }
    
    // optional uint32 fightpower = 3;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
    // optional .PBGhostGameAttr attri = 4;
    if (has_attri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attri());
    }
    
    // optional uint32 pkvalue = 5;
    if (has_pkvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkvalue());
    }
    
    // optional .PBSinglePvpInfo singlePvpInfo = 7;
    if (has_singlepvpinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singlepvpinfo());
    }
    
  }
  // repeated .PBBingFa bingfa = 6;
  total_size += 1 * this->bingfa_size();
  for (int i = 0; i < this->bingfa_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bingfa(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerView::MergeFrom(const PBPlayerView& from) {
  GOOGLE_CHECK_NE(&from, this);
  bingfa_.MergeFrom(from.bingfa_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar()) {
      mutable_avatar()->::PBPlayerAvatar::MergeFrom(from.avatar());
    }
    if (from.has_equip()) {
      mutable_equip()->::PBPlayerEquipData::MergeFrom(from.equip());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_attri()) {
      mutable_attri()->::PBGhostGameAttr::MergeFrom(from.attri());
    }
    if (from.has_pkvalue()) {
      set_pkvalue(from.pkvalue());
    }
    if (from.has_singlepvpinfo()) {
      mutable_singlepvpinfo()->::PBSinglePvpInfo::MergeFrom(from.singlepvpinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerView::CopyFrom(const PBPlayerView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerView::IsInitialized() const {
  
  return true;
}

void PBPlayerView::Swap(PBPlayerView* other) {
  if (other != this) {
    std::swap(avatar_, other->avatar_);
    std::swap(equip_, other->equip_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(attri_, other->attri_);
    std::swap(pkvalue_, other->pkvalue_);
    bingfa_.Swap(&other->bingfa_);
    std::swap(singlepvpinfo_, other->singlepvpinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerView_descriptor_;
  metadata.reflection = PBPlayerView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSinglePvpInfo::kWincountFieldNumber;
const int PBSinglePvpInfo::kFailcountFieldNumber;
#endif  // !_MSC_VER

PBSinglePvpInfo::PBSinglePvpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSinglePvpInfo::InitAsDefaultInstance() {
}

PBSinglePvpInfo::PBSinglePvpInfo(const PBSinglePvpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSinglePvpInfo::SharedCtor() {
  _cached_size_ = 0;
  wincount_ = 0u;
  failcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSinglePvpInfo::~PBSinglePvpInfo() {
  SharedDtor();
}

void PBSinglePvpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSinglePvpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSinglePvpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSinglePvpInfo_descriptor_;
}

const PBSinglePvpInfo& PBSinglePvpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBSinglePvpInfo* PBSinglePvpInfo::default_instance_ = NULL;

PBSinglePvpInfo* PBSinglePvpInfo::New() const {
  return new PBSinglePvpInfo;
}

void PBSinglePvpInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wincount_ = 0u;
    failcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSinglePvpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wincount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_failcount;
        break;
      }
      
      // optional uint32 failcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &failcount_)));
          set_has_failcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSinglePvpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 wincount = 1;
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wincount(), output);
  }
  
  // optional uint32 failcount = 2;
  if (has_failcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->failcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSinglePvpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 wincount = 1;
  if (has_wincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wincount(), target);
  }
  
  // optional uint32 failcount = 2;
  if (has_failcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->failcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSinglePvpInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 wincount = 1;
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wincount());
    }
    
    // optional uint32 failcount = 2;
    if (has_failcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->failcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSinglePvpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSinglePvpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSinglePvpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSinglePvpInfo::MergeFrom(const PBSinglePvpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
    if (from.has_failcount()) {
      set_failcount(from.failcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSinglePvpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSinglePvpInfo::CopyFrom(const PBSinglePvpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSinglePvpInfo::IsInitialized() const {
  
  return true;
}

void PBSinglePvpInfo::Swap(PBSinglePvpInfo* other) {
  if (other != this) {
    std::swap(wincount_, other->wincount_);
    std::swap(failcount_, other->failcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSinglePvpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSinglePvpInfo_descriptor_;
  metadata.reflection = PBSinglePvpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWorldBossKillInfo::kWorldbossactivityidFieldNumber;
const int PBWorldBossKillInfo::kLastkillernameFieldNumber;
const int PBWorldBossKillInfo::kLastdeadtimetickFieldNumber;
#endif  // !_MSC_VER

PBWorldBossKillInfo::PBWorldBossKillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldBossKillInfo::InitAsDefaultInstance() {
}

PBWorldBossKillInfo::PBWorldBossKillInfo(const PBWorldBossKillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldBossKillInfo::SharedCtor() {
  _cached_size_ = 0;
  worldbossactivityid_ = 0u;
  lastkillername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastdeadtimetick_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldBossKillInfo::~PBWorldBossKillInfo() {
  SharedDtor();
}

void PBWorldBossKillInfo::SharedDtor() {
  if (lastkillername_ != &::google::protobuf::internal::kEmptyString) {
    delete lastkillername_;
  }
  if (this != default_instance_) {
  }
}

void PBWorldBossKillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWorldBossKillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldBossKillInfo_descriptor_;
}

const PBWorldBossKillInfo& PBWorldBossKillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBWorldBossKillInfo* PBWorldBossKillInfo::default_instance_ = NULL;

PBWorldBossKillInfo* PBWorldBossKillInfo::New() const {
  return new PBWorldBossKillInfo;
}

void PBWorldBossKillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldbossactivityid_ = 0u;
    if (has_lastkillername()) {
      if (lastkillername_ != &::google::protobuf::internal::kEmptyString) {
        lastkillername_->clear();
      }
    }
    lastdeadtimetick_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldBossKillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldbossactivityid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldbossactivityid_)));
          set_has_worldbossactivityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lastkillername;
        break;
      }
      
      // optional string lastkillername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastkillername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastkillername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastkillername().data(), this->lastkillername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastdeadtimetick;
        break;
      }
      
      // optional uint64 lastdeadtimetick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastdeadtimetick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastdeadtimetick_)));
          set_has_lastdeadtimetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWorldBossKillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 worldbossactivityid = 1;
  if (has_worldbossactivityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldbossactivityid(), output);
  }
  
  // optional string lastkillername = 2;
  if (has_lastkillername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastkillername().data(), this->lastkillername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lastkillername(), output);
  }
  
  // optional uint64 lastdeadtimetick = 3;
  if (has_lastdeadtimetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lastdeadtimetick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldBossKillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 worldbossactivityid = 1;
  if (has_worldbossactivityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldbossactivityid(), target);
  }
  
  // optional string lastkillername = 2;
  if (has_lastkillername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastkillername().data(), this->lastkillername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lastkillername(), target);
  }
  
  // optional uint64 lastdeadtimetick = 3;
  if (has_lastdeadtimetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lastdeadtimetick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldBossKillInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 worldbossactivityid = 1;
    if (has_worldbossactivityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldbossactivityid());
    }
    
    // optional string lastkillername = 2;
    if (has_lastkillername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastkillername());
    }
    
    // optional uint64 lastdeadtimetick = 3;
    if (has_lastdeadtimetick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastdeadtimetick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWorldBossKillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldBossKillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldBossKillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldBossKillInfo::MergeFrom(const PBWorldBossKillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worldbossactivityid()) {
      set_worldbossactivityid(from.worldbossactivityid());
    }
    if (from.has_lastkillername()) {
      set_lastkillername(from.lastkillername());
    }
    if (from.has_lastdeadtimetick()) {
      set_lastdeadtimetick(from.lastdeadtimetick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldBossKillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldBossKillInfo::CopyFrom(const PBWorldBossKillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorldBossKillInfo::IsInitialized() const {
  
  return true;
}

void PBWorldBossKillInfo::Swap(PBWorldBossKillInfo* other) {
  if (other != this) {
    std::swap(worldbossactivityid_, other->worldbossactivityid_);
    std::swap(lastkillername_, other->lastkillername_);
    std::swap(lastdeadtimetick_, other->lastdeadtimetick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWorldBossKillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWorldBossKillInfo_descriptor_;
  metadata.reflection = PBWorldBossKillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWorldBossKill::kKillinfosFieldNumber;
#endif  // !_MSC_VER

PBWorldBossKill::PBWorldBossKill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldBossKill::InitAsDefaultInstance() {
}

PBWorldBossKill::PBWorldBossKill(const PBWorldBossKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldBossKill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldBossKill::~PBWorldBossKill() {
  SharedDtor();
}

void PBWorldBossKill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWorldBossKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWorldBossKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldBossKill_descriptor_;
}

const PBWorldBossKill& PBWorldBossKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBWorldBossKill* PBWorldBossKill::default_instance_ = NULL;

PBWorldBossKill* PBWorldBossKill::New() const {
  return new PBWorldBossKill;
}

void PBWorldBossKill::Clear() {
  killinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldBossKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBWorldBossKillInfo killinfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_killinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_killinfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWorldBossKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBWorldBossKillInfo killinfos = 1;
  for (int i = 0; i < this->killinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->killinfos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldBossKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBWorldBossKillInfo killinfos = 1;
  for (int i = 0; i < this->killinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->killinfos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldBossKill::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBWorldBossKillInfo killinfos = 1;
  total_size += 1 * this->killinfos_size();
  for (int i = 0; i < this->killinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->killinfos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWorldBossKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldBossKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldBossKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldBossKill::MergeFrom(const PBWorldBossKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  killinfos_.MergeFrom(from.killinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldBossKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldBossKill::CopyFrom(const PBWorldBossKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorldBossKill::IsInitialized() const {
  
  return true;
}

void PBWorldBossKill::Swap(PBWorldBossKill* other) {
  if (other != this) {
    killinfos_.Swap(&other->killinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWorldBossKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWorldBossKill_descriptor_;
  metadata.reflection = PBWorldBossKill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWTopListInfo::kTypeFieldNumber;
const int PBWTopListInfo::kCleartimeFieldNumber;
#endif  // !_MSC_VER

PBWTopListInfo::PBWTopListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWTopListInfo::InitAsDefaultInstance() {
}

PBWTopListInfo::PBWTopListInfo(const PBWTopListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWTopListInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  cleartime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWTopListInfo::~PBWTopListInfo() {
  SharedDtor();
}

void PBWTopListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWTopListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWTopListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWTopListInfo_descriptor_;
}

const PBWTopListInfo& PBWTopListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBWTopListInfo* PBWTopListInfo::default_instance_ = NULL;

PBWTopListInfo* PBWTopListInfo::New() const {
  return new PBWTopListInfo;
}

void PBWTopListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    cleartime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWTopListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cleartime;
        break;
      }
      
      // optional uint32 cleartime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleartime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cleartime_)));
          set_has_cleartime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWTopListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 cleartime = 2;
  if (has_cleartime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cleartime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWTopListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 cleartime = 2;
  if (has_cleartime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cleartime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWTopListInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 cleartime = 2;
    if (has_cleartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cleartime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWTopListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWTopListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWTopListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWTopListInfo::MergeFrom(const PBWTopListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cleartime()) {
      set_cleartime(from.cleartime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWTopListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWTopListInfo::CopyFrom(const PBWTopListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWTopListInfo::IsInitialized() const {
  
  return true;
}

void PBWTopListInfo::Swap(PBWTopListInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cleartime_, other->cleartime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWTopListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWTopListInfo_descriptor_;
  metadata.reflection = PBWTopListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTopListList::kInfoListFieldNumber;
#endif  // !_MSC_VER

PBTopListList::PBTopListList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTopListList::InitAsDefaultInstance() {
}

PBTopListList::PBTopListList(const PBTopListList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTopListList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTopListList::~PBTopListList() {
  SharedDtor();
}

void PBTopListList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTopListList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTopListList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTopListList_descriptor_;
}

const PBTopListList& PBTopListList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBTopListList* PBTopListList::default_instance_ = NULL;

PBTopListList* PBTopListList::New() const {
  return new PBTopListList;
}

void PBTopListList::Clear() {
  info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTopListList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBWTopListInfo info_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTopListList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBWTopListInfo info_list = 1;
  for (int i = 0; i < this->info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTopListList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBWTopListInfo info_list = 1;
  for (int i = 0; i < this->info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTopListList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBWTopListInfo info_list = 1;
  total_size += 1 * this->info_list_size();
  for (int i = 0; i < this->info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTopListList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTopListList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTopListList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTopListList::MergeFrom(const PBTopListList& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_list_.MergeFrom(from.info_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTopListList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTopListList::CopyFrom(const PBTopListList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTopListList::IsInitialized() const {
  
  return true;
}

void PBTopListList::Swap(PBTopListList* other) {
  if (other != this) {
    info_list_.Swap(&other->info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTopListList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTopListList_descriptor_;
  metadata.reflection = PBTopListList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGlobalServerData::kSalemoneyFieldNumber;
const int PBGlobalServerData::kAuctionFieldNumber;
const int PBGlobalServerData::kWorldbosskillFieldNumber;
const int PBGlobalServerData::kToplistFieldNumber;
#endif  // !_MSC_VER

PBGlobalServerData::PBGlobalServerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGlobalServerData::InitAsDefaultInstance() {
  salemoney_ = const_cast< ::PBSaleMoneyPriceData*>(&::PBSaleMoneyPriceData::default_instance());
  auction_ = const_cast< ::PBAuctionPriceData*>(&::PBAuctionPriceData::default_instance());
  worldbosskill_ = const_cast< ::PBWorldBossKill*>(&::PBWorldBossKill::default_instance());
  toplist_ = const_cast< ::PBTopListList*>(&::PBTopListList::default_instance());
}

PBGlobalServerData::PBGlobalServerData(const PBGlobalServerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGlobalServerData::SharedCtor() {
  _cached_size_ = 0;
  salemoney_ = NULL;
  auction_ = NULL;
  worldbosskill_ = NULL;
  toplist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGlobalServerData::~PBGlobalServerData() {
  SharedDtor();
}

void PBGlobalServerData::SharedDtor() {
  if (this != default_instance_) {
    delete salemoney_;
    delete auction_;
    delete worldbosskill_;
    delete toplist_;
  }
}

void PBGlobalServerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGlobalServerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGlobalServerData_descriptor_;
}

const PBGlobalServerData& PBGlobalServerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBGlobalServerData* PBGlobalServerData::default_instance_ = NULL;

PBGlobalServerData* PBGlobalServerData::New() const {
  return new PBGlobalServerData;
}

void PBGlobalServerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_salemoney()) {
      if (salemoney_ != NULL) salemoney_->::PBSaleMoneyPriceData::Clear();
    }
    if (has_auction()) {
      if (auction_ != NULL) auction_->::PBAuctionPriceData::Clear();
    }
    if (has_worldbosskill()) {
      if (worldbosskill_ != NULL) worldbosskill_->::PBWorldBossKill::Clear();
    }
    if (has_toplist()) {
      if (toplist_ != NULL) toplist_->::PBTopListList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGlobalServerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBSaleMoneyPriceData salemoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salemoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_auction;
        break;
      }
      
      // optional .PBAuctionPriceData auction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_worldbosskill;
        break;
      }
      
      // optional .PBWorldBossKill worldbosskill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worldbosskill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldbosskill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_toplist;
        break;
      }
      
      // optional .PBTopListList toplist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toplist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGlobalServerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBSaleMoneyPriceData salemoney = 1;
  if (has_salemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->salemoney(), output);
  }
  
  // optional .PBAuctionPriceData auction = 2;
  if (has_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->auction(), output);
  }
  
  // optional .PBWorldBossKill worldbosskill = 3;
  if (has_worldbosskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->worldbosskill(), output);
  }
  
  // optional .PBTopListList toplist = 4;
  if (has_toplist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->toplist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGlobalServerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBSaleMoneyPriceData salemoney = 1;
  if (has_salemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->salemoney(), target);
  }
  
  // optional .PBAuctionPriceData auction = 2;
  if (has_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->auction(), target);
  }
  
  // optional .PBWorldBossKill worldbosskill = 3;
  if (has_worldbosskill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->worldbosskill(), target);
  }
  
  // optional .PBTopListList toplist = 4;
  if (has_toplist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->toplist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGlobalServerData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBSaleMoneyPriceData salemoney = 1;
    if (has_salemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->salemoney());
    }
    
    // optional .PBAuctionPriceData auction = 2;
    if (has_auction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auction());
    }
    
    // optional .PBWorldBossKill worldbosskill = 3;
    if (has_worldbosskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worldbosskill());
    }
    
    // optional .PBTopListList toplist = 4;
    if (has_toplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toplist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGlobalServerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGlobalServerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGlobalServerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGlobalServerData::MergeFrom(const PBGlobalServerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_salemoney()) {
      mutable_salemoney()->::PBSaleMoneyPriceData::MergeFrom(from.salemoney());
    }
    if (from.has_auction()) {
      mutable_auction()->::PBAuctionPriceData::MergeFrom(from.auction());
    }
    if (from.has_worldbosskill()) {
      mutable_worldbosskill()->::PBWorldBossKill::MergeFrom(from.worldbosskill());
    }
    if (from.has_toplist()) {
      mutable_toplist()->::PBTopListList::MergeFrom(from.toplist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGlobalServerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGlobalServerData::CopyFrom(const PBGlobalServerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGlobalServerData::IsInitialized() const {
  
  return true;
}

void PBGlobalServerData::Swap(PBGlobalServerData* other) {
  if (other != this) {
    std::swap(salemoney_, other->salemoney_);
    std::swap(auction_, other->auction_);
    std::swap(worldbosskill_, other->worldbosskill_);
    std::swap(toplist_, other->toplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGlobalServerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGlobalServerData_descriptor_;
  metadata.reflection = PBGlobalServerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWorldFactionBossData::kLasttimeFieldNumber;
const int PBWorldFactionBossData::kWholescoreFieldNumber;
#endif  // !_MSC_VER

PBWorldFactionBossData::PBWorldFactionBossData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldFactionBossData::InitAsDefaultInstance() {
}

PBWorldFactionBossData::PBWorldFactionBossData(const PBWorldFactionBossData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldFactionBossData::SharedCtor() {
  _cached_size_ = 0;
  lasttime_ = 0u;
  wholescore_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldFactionBossData::~PBWorldFactionBossData() {
  SharedDtor();
}

void PBWorldFactionBossData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWorldFactionBossData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWorldFactionBossData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldFactionBossData_descriptor_;
}

const PBWorldFactionBossData& PBWorldFactionBossData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBWorldFactionBossData* PBWorldFactionBossData::default_instance_ = NULL;

PBWorldFactionBossData* PBWorldFactionBossData::New() const {
  return new PBWorldFactionBossData;
}

void PBWorldFactionBossData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lasttime_ = 0u;
    wholescore_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldFactionBossData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lasttime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wholescore;
        break;
      }
      
      // optional uint64 wholescore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wholescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wholescore_)));
          set_has_wholescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWorldFactionBossData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lasttime = 1;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lasttime(), output);
  }
  
  // optional uint64 wholescore = 2;
  if (has_wholescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->wholescore(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldFactionBossData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lasttime = 1;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lasttime(), target);
  }
  
  // optional uint64 wholescore = 2;
  if (has_wholescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->wholescore(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldFactionBossData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lasttime = 1;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lasttime());
    }
    
    // optional uint64 wholescore = 2;
    if (has_wholescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wholescore());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWorldFactionBossData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldFactionBossData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldFactionBossData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldFactionBossData::MergeFrom(const PBWorldFactionBossData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_wholescore()) {
      set_wholescore(from.wholescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldFactionBossData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldFactionBossData::CopyFrom(const PBWorldFactionBossData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorldFactionBossData::IsInitialized() const {
  
  return true;
}

void PBWorldFactionBossData::Swap(PBWorldFactionBossData* other) {
  if (other != this) {
    std::swap(lasttime_, other->lasttime_);
    std::swap(wholescore_, other->wholescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWorldFactionBossData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWorldFactionBossData_descriptor_;
  metadata.reflection = PBWorldFactionBossData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTreasureValueInfo::kPrizeidFieldNumber;
const int PBTreasureValueInfo::kDayvalueFieldNumber;
const int PBTreasureValueInfo::kDaycountFieldNumber;
#endif  // !_MSC_VER

PBTreasureValueInfo::PBTreasureValueInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTreasureValueInfo::InitAsDefaultInstance() {
}

PBTreasureValueInfo::PBTreasureValueInfo(const PBTreasureValueInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTreasureValueInfo::SharedCtor() {
  _cached_size_ = 0;
  prizeid_ = 0u;
  dayvalue_ = 0u;
  daycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTreasureValueInfo::~PBTreasureValueInfo() {
  SharedDtor();
}

void PBTreasureValueInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTreasureValueInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTreasureValueInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTreasureValueInfo_descriptor_;
}

const PBTreasureValueInfo& PBTreasureValueInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBTreasureValueInfo* PBTreasureValueInfo::default_instance_ = NULL;

PBTreasureValueInfo* PBTreasureValueInfo::New() const {
  return new PBTreasureValueInfo;
}

void PBTreasureValueInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prizeid_ = 0u;
    dayvalue_ = 0u;
    daycount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTreasureValueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prizeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizeid_)));
          set_has_prizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dayvalue;
        break;
      }
      
      // optional uint32 dayvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayvalue_)));
          set_has_dayvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_daycount;
        break;
      }
      
      // optional uint32 daycount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daycount_)));
          set_has_daycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTreasureValueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 prizeid = 1;
  if (has_prizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prizeid(), output);
  }
  
  // optional uint32 dayvalue = 2;
  if (has_dayvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dayvalue(), output);
  }
  
  // optional uint32 daycount = 3;
  if (has_daycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->daycount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTreasureValueInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 prizeid = 1;
  if (has_prizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prizeid(), target);
  }
  
  // optional uint32 dayvalue = 2;
  if (has_dayvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dayvalue(), target);
  }
  
  // optional uint32 daycount = 3;
  if (has_daycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->daycount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTreasureValueInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 prizeid = 1;
    if (has_prizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizeid());
    }
    
    // optional uint32 dayvalue = 2;
    if (has_dayvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayvalue());
    }
    
    // optional uint32 daycount = 3;
    if (has_daycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daycount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTreasureValueInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTreasureValueInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTreasureValueInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTreasureValueInfo::MergeFrom(const PBTreasureValueInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prizeid()) {
      set_prizeid(from.prizeid());
    }
    if (from.has_dayvalue()) {
      set_dayvalue(from.dayvalue());
    }
    if (from.has_daycount()) {
      set_daycount(from.daycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTreasureValueInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTreasureValueInfo::CopyFrom(const PBTreasureValueInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTreasureValueInfo::IsInitialized() const {
  
  return true;
}

void PBTreasureValueInfo::Swap(PBTreasureValueInfo* other) {
  if (other != this) {
    std::swap(prizeid_, other->prizeid_);
    std::swap(dayvalue_, other->dayvalue_);
    std::swap(daycount_, other->daycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTreasureValueInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTreasureValueInfo_descriptor_;
  metadata.reflection = PBTreasureValueInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWorldTreasureData::kTreasureinfoFieldNumber;
#endif  // !_MSC_VER

PBWorldTreasureData::PBWorldTreasureData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldTreasureData::InitAsDefaultInstance() {
}

PBWorldTreasureData::PBWorldTreasureData(const PBWorldTreasureData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldTreasureData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldTreasureData::~PBWorldTreasureData() {
  SharedDtor();
}

void PBWorldTreasureData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWorldTreasureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWorldTreasureData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldTreasureData_descriptor_;
}

const PBWorldTreasureData& PBWorldTreasureData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBWorldTreasureData* PBWorldTreasureData::default_instance_ = NULL;

PBWorldTreasureData* PBWorldTreasureData::New() const {
  return new PBWorldTreasureData;
}

void PBWorldTreasureData::Clear() {
  treasureinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldTreasureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBTreasureValueInfo treasureinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasureinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasureinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_treasureinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWorldTreasureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBTreasureValueInfo treasureinfo = 1;
  for (int i = 0; i < this->treasureinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->treasureinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldTreasureData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBTreasureValueInfo treasureinfo = 1;
  for (int i = 0; i < this->treasureinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->treasureinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldTreasureData::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBTreasureValueInfo treasureinfo = 1;
  total_size += 1 * this->treasureinfo_size();
  for (int i = 0; i < this->treasureinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasureinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWorldTreasureData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldTreasureData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldTreasureData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldTreasureData::MergeFrom(const PBWorldTreasureData& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasureinfo_.MergeFrom(from.treasureinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldTreasureData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldTreasureData::CopyFrom(const PBWorldTreasureData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorldTreasureData::IsInitialized() const {
  
  return true;
}

void PBWorldTreasureData::Swap(PBWorldTreasureData* other) {
  if (other != this) {
    treasureinfo_.Swap(&other->treasureinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWorldTreasureData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWorldTreasureData_descriptor_;
  metadata.reflection = PBWorldTreasureData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCorpsMemberInfo::kCorpsjobFieldNumber;
const int PBCorpsMemberInfo::kAvatarFieldNumber;
const int PBCorpsMemberInfo::kFobitcountFieldNumber;
const int PBCorpsMemberInfo::kNextsettimeFieldNumber;
#endif  // !_MSC_VER

PBCorpsMemberInfo::PBCorpsMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsMemberInfo::InitAsDefaultInstance() {
  avatar_ = const_cast< ::PBPlayerAvatar*>(&::PBPlayerAvatar::default_instance());
}

PBCorpsMemberInfo::PBCorpsMemberInfo(const PBCorpsMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  corpsjob_ = 0u;
  avatar_ = NULL;
  fobitcount_ = 0u;
  nextsettime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsMemberInfo::~PBCorpsMemberInfo() {
  SharedDtor();
}

void PBCorpsMemberInfo::SharedDtor() {
  if (this != default_instance_) {
    delete avatar_;
  }
}

void PBCorpsMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCorpsMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsMemberInfo_descriptor_;
}

const PBCorpsMemberInfo& PBCorpsMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBCorpsMemberInfo* PBCorpsMemberInfo::default_instance_ = NULL;

PBCorpsMemberInfo* PBCorpsMemberInfo::New() const {
  return new PBCorpsMemberInfo;
}

void PBCorpsMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    corpsjob_ = 0u;
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::PBPlayerAvatar::Clear();
    }
    fobitcount_ = 0u;
    nextsettime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 corpsjob = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corpsjob_)));
          set_has_corpsjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_avatar;
        break;
      }
      
      // optional .PBPlayerAvatar avatar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fobitcount;
        break;
      }
      
      // optional uint32 fobitcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fobitcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fobitcount_)));
          set_has_fobitcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nextsettime;
        break;
      }
      
      // optional uint32 nextsettime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextsettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextsettime_)));
          set_has_nextsettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 corpsjob = 1;
  if (has_corpsjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->corpsjob(), output);
  }
  
  // optional .PBPlayerAvatar avatar = 2;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->avatar(), output);
  }
  
  // optional uint32 fobitcount = 3;
  if (has_fobitcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fobitcount(), output);
  }
  
  // optional uint32 nextsettime = 4;
  if (has_nextsettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nextsettime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 corpsjob = 1;
  if (has_corpsjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->corpsjob(), target);
  }
  
  // optional .PBPlayerAvatar avatar = 2;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->avatar(), target);
  }
  
  // optional uint32 fobitcount = 3;
  if (has_fobitcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fobitcount(), target);
  }
  
  // optional uint32 nextsettime = 4;
  if (has_nextsettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nextsettime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsMemberInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 corpsjob = 1;
    if (has_corpsjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corpsjob());
    }
    
    // optional .PBPlayerAvatar avatar = 2;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }
    
    // optional uint32 fobitcount = 3;
    if (has_fobitcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fobitcount());
    }
    
    // optional uint32 nextsettime = 4;
    if (has_nextsettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextsettime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCorpsMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsMemberInfo::MergeFrom(const PBCorpsMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_corpsjob()) {
      set_corpsjob(from.corpsjob());
    }
    if (from.has_avatar()) {
      mutable_avatar()->::PBPlayerAvatar::MergeFrom(from.avatar());
    }
    if (from.has_fobitcount()) {
      set_fobitcount(from.fobitcount());
    }
    if (from.has_nextsettime()) {
      set_nextsettime(from.nextsettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsMemberInfo::CopyFrom(const PBCorpsMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCorpsMemberInfo::IsInitialized() const {
  
  return true;
}

void PBCorpsMemberInfo::Swap(PBCorpsMemberInfo* other) {
  if (other != this) {
    std::swap(corpsjob_, other->corpsjob_);
    std::swap(avatar_, other->avatar_);
    std::swap(fobitcount_, other->fobitcount_);
    std::swap(nextsettime_, other->nextsettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCorpsMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCorpsMemberInfo_descriptor_;
  metadata.reflection = PBCorpsMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCorpsInfo::kCorpsidFieldNumber;
const int PBCorpsInfo::kMemberinfoFieldNumber;
const int PBCorpsInfo::kDeclarationFieldNumber;
#endif  // !_MSC_VER

PBCorpsInfo::PBCorpsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsInfo::InitAsDefaultInstance() {
}

PBCorpsInfo::PBCorpsInfo(const PBCorpsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsInfo::SharedCtor() {
  _cached_size_ = 0;
  corpsid_ = 0u;
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsInfo::~PBCorpsInfo() {
  SharedDtor();
}

void PBCorpsInfo::SharedDtor() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (this != default_instance_) {
  }
}

void PBCorpsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCorpsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsInfo_descriptor_;
}

const PBCorpsInfo& PBCorpsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBCorpsInfo* PBCorpsInfo::default_instance_ = NULL;

PBCorpsInfo* PBCorpsInfo::New() const {
  return new PBCorpsInfo;
}

void PBCorpsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    corpsid_ = 0u;
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
  }
  memberinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 corpsid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corpsid_)));
          set_has_corpsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberinfo;
        break;
      }
      
      // repeated .PBCorpsMemberInfo memberinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberinfo;
        if (input->ExpectTag(26)) goto parse_declaration;
        break;
      }
      
      // optional string declaration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_declaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 corpsid = 1;
  if (has_corpsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->corpsid(), output);
  }
  
  // repeated .PBCorpsMemberInfo memberinfo = 2;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->memberinfo(i), output);
  }
  
  // optional string declaration = 3;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->declaration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 corpsid = 1;
  if (has_corpsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->corpsid(), target);
  }
  
  // repeated .PBCorpsMemberInfo memberinfo = 2;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->memberinfo(i), target);
  }
  
  // optional string declaration = 3;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->declaration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 corpsid = 1;
    if (has_corpsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corpsid());
    }
    
    // optional string declaration = 3;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }
    
  }
  // repeated .PBCorpsMemberInfo memberinfo = 2;
  total_size += 1 * this->memberinfo_size();
  for (int i = 0; i < this->memberinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCorpsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsInfo::MergeFrom(const PBCorpsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberinfo_.MergeFrom(from.memberinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_corpsid()) {
      set_corpsid(from.corpsid());
    }
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsInfo::CopyFrom(const PBCorpsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCorpsInfo::IsInitialized() const {
  
  return true;
}

void PBCorpsInfo::Swap(PBCorpsInfo* other) {
  if (other != this) {
    std::swap(corpsid_, other->corpsid_);
    memberinfo_.Swap(&other->memberinfo_);
    std::swap(declaration_, other->declaration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCorpsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCorpsInfo_descriptor_;
  metadata.reflection = PBCorpsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWorldCorpsData::kCorpsinfoFieldNumber;
#endif  // !_MSC_VER

PBWorldCorpsData::PBWorldCorpsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldCorpsData::InitAsDefaultInstance() {
}

PBWorldCorpsData::PBWorldCorpsData(const PBWorldCorpsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldCorpsData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldCorpsData::~PBWorldCorpsData() {
  SharedDtor();
}

void PBWorldCorpsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWorldCorpsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWorldCorpsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldCorpsData_descriptor_;
}

const PBWorldCorpsData& PBWorldCorpsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBWorldCorpsData* PBWorldCorpsData::default_instance_ = NULL;

PBWorldCorpsData* PBWorldCorpsData::New() const {
  return new PBWorldCorpsData;
}

void PBWorldCorpsData::Clear() {
  corpsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldCorpsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBCorpsInfo corpsinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corpsinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_corpsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_corpsinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWorldCorpsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBCorpsInfo corpsinfo = 1;
  for (int i = 0; i < this->corpsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->corpsinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldCorpsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCorpsInfo corpsinfo = 1;
  for (int i = 0; i < this->corpsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->corpsinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldCorpsData::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBCorpsInfo corpsinfo = 1;
  total_size += 1 * this->corpsinfo_size();
  for (int i = 0; i < this->corpsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->corpsinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWorldCorpsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldCorpsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldCorpsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldCorpsData::MergeFrom(const PBWorldCorpsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  corpsinfo_.MergeFrom(from.corpsinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldCorpsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldCorpsData::CopyFrom(const PBWorldCorpsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorldCorpsData::IsInitialized() const {
  
  return true;
}

void PBWorldCorpsData::Swap(PBWorldCorpsData* other) {
  if (other != this) {
    corpsinfo_.Swap(&other->corpsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWorldCorpsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWorldCorpsData_descriptor_;
  metadata.reflection = PBWorldCorpsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWorldServerData::kStarttimeFieldNumber;
const int PBWorldServerData::kFactionbossFieldNumber;
const int PBWorldServerData::kTreasureFieldNumber;
const int PBWorldServerData::kCleardaytimeFieldNumber;
const int PBWorldServerData::kCorpsFieldNumber;
#endif  // !_MSC_VER

PBWorldServerData::PBWorldServerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldServerData::InitAsDefaultInstance() {
  factionboss_ = const_cast< ::PBWorldFactionBossData*>(&::PBWorldFactionBossData::default_instance());
  treasure_ = const_cast< ::PBWorldTreasureData*>(&::PBWorldTreasureData::default_instance());
  corps_ = const_cast< ::PBWorldCorpsData*>(&::PBWorldCorpsData::default_instance());
}

PBWorldServerData::PBWorldServerData(const PBWorldServerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldServerData::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0u;
  factionboss_ = NULL;
  treasure_ = NULL;
  cleardaytime_ = 0u;
  corps_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldServerData::~PBWorldServerData() {
  SharedDtor();
}

void PBWorldServerData::SharedDtor() {
  if (this != default_instance_) {
    delete factionboss_;
    delete treasure_;
    delete corps_;
  }
}

void PBWorldServerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWorldServerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldServerData_descriptor_;
}

const PBWorldServerData& PBWorldServerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerStruct_2eproto();  return *default_instance_;
}

PBWorldServerData* PBWorldServerData::default_instance_ = NULL;

PBWorldServerData* PBWorldServerData::New() const {
  return new PBWorldServerData;
}

void PBWorldServerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0u;
    if (has_factionboss()) {
      if (factionboss_ != NULL) factionboss_->::PBWorldFactionBossData::Clear();
    }
    if (has_treasure()) {
      if (treasure_ != NULL) treasure_->::PBWorldTreasureData::Clear();
    }
    cleardaytime_ = 0u;
    if (has_corps()) {
      if (corps_ != NULL) corps_->::PBWorldCorpsData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldServerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 starttime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_factionboss;
        break;
      }
      
      // optional .PBWorldFactionBossData factionboss = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factionboss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_factionboss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_treasure;
        break;
      }
      
      // optional .PBWorldTreasureData treasure = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cleardaytime;
        break;
      }
      
      // optional uint32 cleardaytime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleardaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cleardaytime_)));
          set_has_cleardaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_corps;
        break;
      }
      
      // optional .PBWorldCorpsData corps = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_corps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWorldServerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starttime(), output);
  }
  
  // optional .PBWorldFactionBossData factionboss = 2;
  if (has_factionboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->factionboss(), output);
  }
  
  // optional .PBWorldTreasureData treasure = 3;
  if (has_treasure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->treasure(), output);
  }
  
  // optional uint32 cleardaytime = 4;
  if (has_cleardaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cleardaytime(), output);
  }
  
  // optional .PBWorldCorpsData corps = 5;
  if (has_corps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->corps(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldServerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 starttime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->starttime(), target);
  }
  
  // optional .PBWorldFactionBossData factionboss = 2;
  if (has_factionboss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->factionboss(), target);
  }
  
  // optional .PBWorldTreasureData treasure = 3;
  if (has_treasure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->treasure(), target);
  }
  
  // optional uint32 cleardaytime = 4;
  if (has_cleardaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cleardaytime(), target);
  }
  
  // optional .PBWorldCorpsData corps = 5;
  if (has_corps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->corps(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldServerData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 starttime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }
    
    // optional .PBWorldFactionBossData factionboss = 2;
    if (has_factionboss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->factionboss());
    }
    
    // optional .PBWorldTreasureData treasure = 3;
    if (has_treasure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasure());
    }
    
    // optional uint32 cleardaytime = 4;
    if (has_cleardaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cleardaytime());
    }
    
    // optional .PBWorldCorpsData corps = 5;
    if (has_corps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->corps());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWorldServerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldServerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldServerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldServerData::MergeFrom(const PBWorldServerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_factionboss()) {
      mutable_factionboss()->::PBWorldFactionBossData::MergeFrom(from.factionboss());
    }
    if (from.has_treasure()) {
      mutable_treasure()->::PBWorldTreasureData::MergeFrom(from.treasure());
    }
    if (from.has_cleardaytime()) {
      set_cleardaytime(from.cleardaytime());
    }
    if (from.has_corps()) {
      mutable_corps()->::PBWorldCorpsData::MergeFrom(from.corps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldServerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldServerData::CopyFrom(const PBWorldServerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorldServerData::IsInitialized() const {
  
  return true;
}

void PBWorldServerData::Swap(PBWorldServerData* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(factionboss_, other->factionboss_);
    std::swap(treasure_, other->treasure_);
    std::swap(cleardaytime_, other->cleardaytime_);
    std::swap(corps_, other->corps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWorldServerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWorldServerData_descriptor_;
  metadata.reflection = PBWorldServerData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
