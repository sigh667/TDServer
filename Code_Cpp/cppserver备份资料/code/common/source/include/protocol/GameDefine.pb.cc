// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* _emPlayerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emFactionDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emAccountMark_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emClientPF_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emEnterFightReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emGameSystemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _em_GameUnitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _em_GameUnitJob_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emHatredType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTeamAllotType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTeamLeaveReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBattleAttrAffectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBattleAttribute_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emExpendType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emPreConditionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emMonsterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emMonsterSubType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emMonsterCollectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emMonsterMark_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emMoveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCoolingType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emGameStateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emStateBuffAttr_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emRangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSkillMark_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSkillSpareParamType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSkillBehavior_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTargetSelectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTargetCategory_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSkillNoticeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSkillUseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSkillType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSkillDirStrategy_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSkillCompositeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSkillTimeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSkillEffectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBuffDifRepeatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBuffSameRepeatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBuffMark_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBuffCat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBuffCriticalConditionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBuffType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBuffMoveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBuffMoveTargetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emEffectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBuffMutualType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emDirectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emEffectAddMoveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emEffectTargetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBuffDeleteTriggerEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTrapAngleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTrapMoveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTrapStopType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTrapSpareParamType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emPKType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emModifyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emMailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emItemFlag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emItemMark_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emItemQualityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTreasureType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBingfuType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emMaterialType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emEquipType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emEquipSubType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emItemUseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emItemPackType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCopymapType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCopymapMainType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCopymapResetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCopymapEnterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCopymapEnterCopyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCopymapTeamRemainConfirmType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCopymapCopymapTimeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCopymapEnterReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCopymapState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCopymapDifficulty_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCopymapPrefectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTradeEndReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSaleMoneyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emPlayerShapeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSaleMoneyLogType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTopListType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTopListTimeResetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emAuctionLogType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emFriendType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emAuctionSortType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emWulueSchemeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emWulueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emReliveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emWulueYaodianType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emQuestTargetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emQuestTargetAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emEquipInheritMark_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emEquipMakeMark_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emQuestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emFlyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSystemSwitchState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSystemSwitchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emAIStateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emAIIdleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emAISelectTargetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTrapDestroyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCorps_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCorpsJob_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emFactionJob_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emFactionPrivilege_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emFactionMoneyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emFactionSkillState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emFactionEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emDoingType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emDoingObject_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emLocatePlayerReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emGoodModel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emStoreCircleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCopymapCompleteType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTeamMark_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emPrizeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emPrizeAcceptType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emPrizeMark_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emPrizeKeyCopymapType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSceneMapMarkType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emDartHardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emDartBuffType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emDartBuffLayerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emDartPrizeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emDartActivityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emDartPVPType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emDartLogType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emMonsterDeadDropDistribute_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emMonsterDeadQuestDistribute_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emFactionBossTopType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emFactionBossAwardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emQinggongActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emGameBattleAttrFromType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCollectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTeamTargetMainType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTitleConditionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTeamMemberRelationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emClimbTowerClass_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emClimbTowerPrizeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emClimbTowerLogType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emStoreType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTreasurePrizeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emCastMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emWorldBossEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emActivityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emManorOccupyStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emManorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emManorFactionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emManorBroadcastPromptType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emManorMailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emPvpWarType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emPvpCamp_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameDefine_2eproto() {
  protobuf_AddDesc_GameDefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameDefine.proto");
  GOOGLE_CHECK(file != NULL);
  _emPlayerType_descriptor_ = file->enum_type(0);
  _emFactionDataType_descriptor_ = file->enum_type(1);
  _emAccountMark_descriptor_ = file->enum_type(2);
  _emClientPF_descriptor_ = file->enum_type(3);
  _emEnterFightReason_descriptor_ = file->enum_type(4);
  _emGameSystemType_descriptor_ = file->enum_type(5);
  _em_GameUnitType_descriptor_ = file->enum_type(6);
  _em_GameUnitJob_descriptor_ = file->enum_type(7);
  _emHatredType_descriptor_ = file->enum_type(8);
  _emTeamAllotType_descriptor_ = file->enum_type(9);
  _emTeamLeaveReason_descriptor_ = file->enum_type(10);
  _emBattleAttrAffectType_descriptor_ = file->enum_type(11);
  _emBattleAttribute_descriptor_ = file->enum_type(12);
  _emExpendType_descriptor_ = file->enum_type(13);
  _emPreConditionType_descriptor_ = file->enum_type(14);
  _emMonsterType_descriptor_ = file->enum_type(15);
  _emMonsterSubType_descriptor_ = file->enum_type(16);
  _emMonsterCollectionType_descriptor_ = file->enum_type(17);
  _emMonsterMark_descriptor_ = file->enum_type(18);
  _emMoveType_descriptor_ = file->enum_type(19);
  _emCoolingType_descriptor_ = file->enum_type(20);
  _emGameStateType_descriptor_ = file->enum_type(21);
  _emStateBuffAttr_descriptor_ = file->enum_type(22);
  _emRangeType_descriptor_ = file->enum_type(23);
  _emSkillMark_descriptor_ = file->enum_type(24);
  _emSkillSpareParamType_descriptor_ = file->enum_type(25);
  _emSkillBehavior_descriptor_ = file->enum_type(26);
  _emTargetSelectType_descriptor_ = file->enum_type(27);
  _emTargetCategory_descriptor_ = file->enum_type(28);
  _emSkillNoticeType_descriptor_ = file->enum_type(29);
  _emSkillUseType_descriptor_ = file->enum_type(30);
  _emSkillType_descriptor_ = file->enum_type(31);
  _emSkillDirStrategy_descriptor_ = file->enum_type(32);
  _emSkillCompositeType_descriptor_ = file->enum_type(33);
  _emSkillTimeType_descriptor_ = file->enum_type(34);
  _emSkillEffectType_descriptor_ = file->enum_type(35);
  _emBuffDifRepeatType_descriptor_ = file->enum_type(36);
  _emBuffSameRepeatType_descriptor_ = file->enum_type(37);
  _emBuffMark_descriptor_ = file->enum_type(38);
  _emBuffCat_descriptor_ = file->enum_type(39);
  _emBuffCriticalConditionType_descriptor_ = file->enum_type(40);
  _emBuffType_descriptor_ = file->enum_type(41);
  _emBuffMoveType_descriptor_ = file->enum_type(42);
  _emBuffMoveTargetType_descriptor_ = file->enum_type(43);
  _emEffectType_descriptor_ = file->enum_type(44);
  _emBuffMutualType_descriptor_ = file->enum_type(45);
  _emDirectionType_descriptor_ = file->enum_type(46);
  _emEffectAddMoveType_descriptor_ = file->enum_type(47);
  _emEffectTargetType_descriptor_ = file->enum_type(48);
  _emBuffDeleteTriggerEventType_descriptor_ = file->enum_type(49);
  _emTrapAngleType_descriptor_ = file->enum_type(50);
  _emTrapMoveType_descriptor_ = file->enum_type(51);
  _emTrapStopType_descriptor_ = file->enum_type(52);
  _emTrapSpareParamType_descriptor_ = file->enum_type(53);
  _emPKType_descriptor_ = file->enum_type(54);
  _emModifyType_descriptor_ = file->enum_type(55);
  _emMailType_descriptor_ = file->enum_type(56);
  _emItemFlag_descriptor_ = file->enum_type(57);
  _emItemMark_descriptor_ = file->enum_type(58);
  _emItemQualityType_descriptor_ = file->enum_type(59);
  _emItemType_descriptor_ = file->enum_type(60);
  _emTreasureType_descriptor_ = file->enum_type(61);
  _emBingfuType_descriptor_ = file->enum_type(62);
  _emMaterialType_descriptor_ = file->enum_type(63);
  _emEquipType_descriptor_ = file->enum_type(64);
  _emEquipSubType_descriptor_ = file->enum_type(65);
  _emItemUseType_descriptor_ = file->enum_type(66);
  _emItemPackType_descriptor_ = file->enum_type(67);
  _emCopymapType_descriptor_ = file->enum_type(68);
  _emCopymapMainType_descriptor_ = file->enum_type(69);
  _emCopymapResetType_descriptor_ = file->enum_type(70);
  _emCopymapEnterType_descriptor_ = file->enum_type(71);
  _emCopymapEnterCopyType_descriptor_ = file->enum_type(72);
  _emCopymapTeamRemainConfirmType_descriptor_ = file->enum_type(73);
  _emCopymapCopymapTimeType_descriptor_ = file->enum_type(74);
  _emCopymapEnterReason_descriptor_ = file->enum_type(75);
  _emCopymapState_descriptor_ = file->enum_type(76);
  _emCopymapDifficulty_descriptor_ = file->enum_type(77);
  _emCopymapPrefectType_descriptor_ = file->enum_type(78);
  _emTradeEndReason_descriptor_ = file->enum_type(79);
  _emSaleMoneyType_descriptor_ = file->enum_type(80);
  _emPlayerShapeType_descriptor_ = file->enum_type(81);
  _emSaleMoneyLogType_descriptor_ = file->enum_type(82);
  _emTopListType_descriptor_ = file->enum_type(83);
  _emTopListTimeResetType_descriptor_ = file->enum_type(84);
  _emAuctionLogType_descriptor_ = file->enum_type(85);
  _emFriendType_descriptor_ = file->enum_type(86);
  _emAuctionSortType_descriptor_ = file->enum_type(87);
  _emWulueSchemeType_descriptor_ = file->enum_type(88);
  _emWulueType_descriptor_ = file->enum_type(89);
  _emReliveType_descriptor_ = file->enum_type(90);
  _emWulueYaodianType_descriptor_ = file->enum_type(91);
  _emQuestTargetType_descriptor_ = file->enum_type(92);
  _emQuestTargetAction_descriptor_ = file->enum_type(93);
  _emEquipInheritMark_descriptor_ = file->enum_type(94);
  _emEquipMakeMark_descriptor_ = file->enum_type(95);
  _emQuestType_descriptor_ = file->enum_type(96);
  _emFlyType_descriptor_ = file->enum_type(97);
  _emSystemSwitchState_descriptor_ = file->enum_type(98);
  _emSystemSwitchType_descriptor_ = file->enum_type(99);
  _emAIStateType_descriptor_ = file->enum_type(100);
  _emAIIdleType_descriptor_ = file->enum_type(101);
  _emAISelectTargetType_descriptor_ = file->enum_type(102);
  _emTrapDestroyType_descriptor_ = file->enum_type(103);
  _emCorps_descriptor_ = file->enum_type(104);
  _emCorpsJob_descriptor_ = file->enum_type(105);
  _emFactionJob_descriptor_ = file->enum_type(106);
  _emFactionPrivilege_descriptor_ = file->enum_type(107);
  _emFactionMoneyType_descriptor_ = file->enum_type(108);
  _emFactionSkillState_descriptor_ = file->enum_type(109);
  _emFactionEvent_descriptor_ = file->enum_type(110);
  _emDoingType_descriptor_ = file->enum_type(111);
  _emDoingObject_descriptor_ = file->enum_type(112);
  _emLocatePlayerReason_descriptor_ = file->enum_type(113);
  _emGoodModel_descriptor_ = file->enum_type(114);
  _emStoreCircleType_descriptor_ = file->enum_type(115);
  _emCopymapCompleteType_descriptor_ = file->enum_type(116);
  _emTeamMark_descriptor_ = file->enum_type(117);
  _emPrizeType_descriptor_ = file->enum_type(118);
  _emPrizeAcceptType_descriptor_ = file->enum_type(119);
  _emPrizeMark_descriptor_ = file->enum_type(120);
  _emPrizeKeyCopymapType_descriptor_ = file->enum_type(121);
  _emSceneMapMarkType_descriptor_ = file->enum_type(122);
  _emDartHardType_descriptor_ = file->enum_type(123);
  _emDartBuffType_descriptor_ = file->enum_type(124);
  _emDartBuffLayerType_descriptor_ = file->enum_type(125);
  _emDartPrizeType_descriptor_ = file->enum_type(126);
  _emDartActivityType_descriptor_ = file->enum_type(127);
  _emDartPVPType_descriptor_ = file->enum_type(128);
  _emDartLogType_descriptor_ = file->enum_type(129);
  _emMonsterDeadDropDistribute_descriptor_ = file->enum_type(130);
  _emMonsterDeadQuestDistribute_descriptor_ = file->enum_type(131);
  _emFactionBossTopType_descriptor_ = file->enum_type(132);
  _emFactionBossAwardType_descriptor_ = file->enum_type(133);
  _emQinggongActionType_descriptor_ = file->enum_type(134);
  _emGameBattleAttrFromType_descriptor_ = file->enum_type(135);
  _emCollectionType_descriptor_ = file->enum_type(136);
  _emTeamTargetMainType_descriptor_ = file->enum_type(137);
  _emTitleConditionType_descriptor_ = file->enum_type(138);
  _emTeamMemberRelationType_descriptor_ = file->enum_type(139);
  _emClimbTowerClass_descriptor_ = file->enum_type(140);
  _emClimbTowerPrizeType_descriptor_ = file->enum_type(141);
  _emClimbTowerLogType_descriptor_ = file->enum_type(142);
  _emStoreType_descriptor_ = file->enum_type(143);
  _emTreasurePrizeType_descriptor_ = file->enum_type(144);
  _emCastMessageType_descriptor_ = file->enum_type(145);
  _emWorldBossEventType_descriptor_ = file->enum_type(146);
  _emActivityType_descriptor_ = file->enum_type(147);
  _emManorOccupyStatus_descriptor_ = file->enum_type(148);
  _emManorType_descriptor_ = file->enum_type(149);
  _emManorFactionType_descriptor_ = file->enum_type(150);
  _emManorBroadcastPromptType_descriptor_ = file->enum_type(151);
  _emManorMailType_descriptor_ = file->enum_type(152);
  _emPvpWarType_descriptor_ = file->enum_type(153);
  _emPvpCamp_descriptor_ = file->enum_type(154);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameDefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_GameDefine_2eproto() {
}

void protobuf_AddDesc_GameDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GameDefine.proto*\264\001\n\r_emPlayerType\022\022\n\016"
    "_PInfo_Account\020\000\022\017\n\013_PInfo_Base\020\001\022\021\n\r_PI"
    "nfo_System\020\002\022\016\n\n_PInfo_Bag\020\003\022\021\n\r_PInfo_C"
    "lient\020\004\022\020\n\014_PInfo_Quest\020\005\022\017\n\013_PInfo_Mail"
    "\020\006\022\021\n\r_PInfo_Friend\020\007\022\022\n\016_PInfo_Faction\020"
    "\010*\\\n\022_emFactionDataType\022\025\n\021_FactionData_"
    "Base\020\000\022\026\n\022_FactionData_Depot\020\001\022\027\n\023_Facti"
    "onData_Events\020\002*T\n\016_emAccountMark\022\023\n\017Acc"
    "ountMask_New\020\001\022\025\n\021AccountMark_Adult\020\002\022\026\n"
    "\022AccountMark_NotVip\020\003*.\n\013_emClientPF\022\016\n\n"
    "Client_Web\020\001\022\017\n\013Client_Tool\020\002*\202\002\n\023_emEnt"
    "erFightReason\022\035\n\031EnterFightReason_UseSki"
    "ll\020\001\022!\n\035EnterFightReason_AttackPlayer\020\002\022"
    "#\n\037EnterFightReason_BeAttackPlayer\020\003\022\"\n\036"
    "EnterFightReason_AttackMonster\020\004\022$\n Ente"
    "rFightReason_BeAttackMonster\020\005\022\033\n\027EnterF"
    "ightReason_Hatred\020\006\022\035\n\031EnterFightReason_"
    "BeHatred\020\007*\346\010\n\021_emGameSystemType\022\031\n\025Game"
    "SystemType_Common\020\000\022\030\n\024GameSystemType_Sk"
    "ill\020\001\022\027\n\023GameSystemType_Buff\020\002\022\032\n\026GameSy"
    "stemType_Counter\020\003\022\027\n\023GameSystemType_Tea"
    "m\020\004\022\030\n\024GameSystemType_Prize\020\005\022\027\n\023GameSys"
    "temType_Item\020\006\022\030\n\024GameSystemType_Quest\020\007"
    "\022\027\n\023GameSystemType_Mail\020\010\022\032\n\026GameSystemT"
    "ype_Copymap\020\t\022\032\n\026GameSystemType_Auction\020"
    "\n\022\030\n\024GameSystemType_Trade\020\013\022\034\n\030GameSyste"
    "mType_SaleMoney\020\014\022\030\n\024GameSystemType_Stor"
    "e\020\r\022\032\n\026GameSystemType_Faction\020\016\022\032\n\026GameS"
    "ystemType_TopList\020\017\022\031\n\025GameSystemType_Fr"
    "iend\020\020\022\031\n\025GameSystemType_PvpWar\020\021\022\030\n\024Gam"
    "eSystemType_Wulue\020\022\022\031\n\025GameSystemType_We"
    "nTao\020\023\022\033\n\027GameSystemType_DropItem\020\024\022\033\n\027G"
    "ameSystemType_Identity\020\025\022\031\n\025GameSystemTy"
    "pe_Switch\020\026\022\034\n\030GameSystemType_Colletion\020"
    "\027\022\030\n\024GameSystemType_Wuxue\020\030\022\027\n\023GameSyste"
    "mType_Dart\020\031\022\036\n\032GameSystemType_FactionBo"
    "ss\020\032\022\030\n\024GameSystemType_Title\020\033\022\032\n\026GameSy"
    "stemType_Fashion\020\034\022\036\n\032GameSystemType_Eqi"
    "upColumn\020\035\022\035\n\031GameSystemType_ClimbTower\020"
    "\036\022!\n\035GameSystemType_GreatWallTrain\020\037\022\033\n\027"
    "GameSystemType_Question\020 \022\034\n\030GameSystemT"
    "ype_WorldBoss\020!\022\033\n\027GameSystemType_Activi"
    "ty\020\"\022\032\n\026GameSystemType_Relives\020#\022\030\n\024Game"
    "SystemType_Corps\020$\022\027\n\023GameSystemType_Wea"
    "l\020%\022\030\n\024GameSystemType_Manor\020&\022\034\n\030GameSys"
    "temType_SinglePvp\020\'*\254\001\n\020_em_GameUnitType"
    "\022\023\n\017GameObject_None\020\000\022\025\n\021GameObject_Play"
    "er\020\001\022\026\n\022GameObject_Monster\020\002\022\022\n\016GameObje"
    "ct_Pet\020\003\022\023\n\017GameObject_Trap\020\004\022\023\n\017GameObj"
    "ect_Item\020\005\022\026\n\022GameObject_DartCar\020\006*~\n\017_e"
    "m_GameUnitJob\022\017\n\013GameJob_All\020\000\022\020\n\014GameJo"
    "b_Bear\020\001\022\021\n\rGameJob_Tiger\020\002\022\021\n\rGameJob_C"
    "rane\020\003\022\020\n\014GameJob_Hawk\020\004\022\020\n\014GameJob_Deer"
    "\020\005*V\n\r_emHatredType\022\026\n\022HatredType_Passiv"
    "e\020\000\022\030\n\024HatredType_Proactive\020\001\022\023\n\017HatredT"
    "ype_Task\020\002*P\n\020_emTeamAllotType\022\022\n\016AllotT"
    "ype_None\020\000\022\022\n\016AllotType_Dice\020\001\022\024\n\020AllotT"
    "ype_Assign\020\002*h\n\022_emTeamLeaveReason\022\031\n\025Te"
    "amLeaveReason_Leave\020\000\022\032\n\026TeamLeaveReason"
    "_BeKick\020\001\022\033\n\027TeamLeaveReason_Copymap\020\002*\201"
    "\001\n\027_emBattleAttrAffectType\022!\n\035BattleAttr"
    "AffectType_Multiply\020\001\022\037\n\033BattleAttrAffec"
    "tType_Divide\020\002\022\"\n\036BattleAttrAffectType_D"
    "ivideSum\020\003*\306\013\n\022_emBattleAttribute\022\034\n\030Bat"
    "tleAttribute_Strength\020\001\022\030\n\024BattleAttribu"
    "te_Bone\020\002\022\031\n\025BattleAttribute_Blood\020\003\022\030\n\024"
    "BattleAttribute_Body\020\004\022\032\n\026BattleAttribut"
    "e_Murder\020\005\022\031\n\025BattleAttribute_HPMax\020\006\022\032\n"
    "\026BattleAttribute_Attack\020\007\022\033\n\027BattleAttri"
    "bute_Defense\020\010\022\027\n\023BattleAttribute_Hit\020\t\022"
    "\031\n\025BattleAttribute_Dodge\020\n\022\030\n\024BattleAttr"
    "ibute_Crit\020\013\022\034\n\030BattleAttribute_Tenacity"
    "\020\014\022\034\n\030BattleAttribute_RunSpeed\020\r\022\035\n\031Batt"
    "leAttribute_WalkSpeed\020\016\022\031\n\025BattleAttribu"
    "te_Thump\020\017\022\031\n\025BattleAttribute_Parry\020\020\022\032\n"
    "\026BattleAttribute_SuckHP\020\021\022\032\n\026BattleAttri"
    "bute_Afraid\020\022\022\033\n\027BattleAttribute_Overawe"
    "\020\023\022\032\n\026BattleAttribute_Exempt\020\024\022!\n\035Battle"
    "Attribute_DamageImprove\020\025\022\037\n\033BattleAttri"
    "bute_DamageRemit\020\026\022\034\n\030BattleAttribute_Cr"
    "itRate\020\027\022 \n\034BattleAttribute_CritMultiple"
    "\020\030\022\036\n\032BattleAttribute_CritImmune\020\031\022\033\n\027Ba"
    "ttleAttribute_HitRate\020\032\022\035\n\031BattleAttribu"
    "te_DodgeRate\020\033\022\036\n\032BattleAttribute_SuckHP"
    "Rate\020\034\022\036\n\032BattleAttribute_AfraidRate\020\035\022\037"
    "\n\033BattleAttribute_OveraweRate\020\036\022\036\n\032Battl"
    "eAttribute_ExemptRate\020\037\022\037\n\033BattleAttribu"
    "te_EnergyAnger\020 \022\037\n\033BattleAttribute_Ener"
    "gyVigor\020!\022\037\n\033BattleAttribute_EnergyPower"
    "\020\"\022\035\n\031BattleAttribute_EnergyHit\020#\022\036\n\032Bat"
    "tleAttribute_EnergyDark\020$\022!\n\035BattleAttri"
    "bute_EnergyCrystal\020%\022\037\n\033BattleAttribute_"
    "EnergyPsych\020&\022\036\n\032BattleAttribute_EnergyR"
    "oll\020\'\022\"\n\036BattleAttribute_MaxEnergyAnger\020"
    "(\022\"\n\036BattleAttribute_MaxEnergyVigor\020)\022\"\n"
    "\036BattleAttribute_MaxEnergyPower\020*\022 \n\034Bat"
    "tleAttribute_MaxEnergyHit\020+\022!\n\035BattleAtt"
    "ribute_MaxEnergyDark\020,\022$\n BattleAttribut"
    "e_MaxEnergyCrystal\020-\022\"\n\036BattleAttribute_"
    "MaxEnergyPsych\020.\022!\n\035BattleAttribute_MaxE"
    "nergyRoll\020/*\206\005\n\r_emExpendType\022\024\n\020MoneyTy"
    "pe_Sliver\020\001\022\030\n\024MoneyType_BindSliver\020\002\022\022\n"
    "\016MoneyType_Cash\020\003\022\026\n\022MoneyType_BindCash\020"
    "\004\022\030\n\024MoneyType_StoreScore\020\005\022\031\n\025MoneyType"
    "_BattleScore\020\006\022\033\n\027ExpendType_Contributio"
    "n\020\007\022\027\n\023MoneyType_BingfuExp\020\010\022\021\n\rMoneyTyp"
    "e_Max\020d\022\021\n\rExpendType_HP\020e\022\032\n\026ExpendType"
    "_EnergyAnger\020f\022\032\n\026ExpendType_EnergyVigor"
    "\020g\022\032\n\026ExpendType_EnergyPower\020h\022\030\n\024Expend"
    "Type_EnergyHit\020i\022\031\n\025ExpendType_EnergyDar"
    "k\020j\022\034\n\030ExpendType_EnergyCrystal\020k\022\032\n\026Exp"
    "endType_EnergyPsych\020l\022\025\n\021ExpendType_Wisd"
    "om\020m\022\022\n\016ExpendType_Exp\020n\022\035\n\031ExpendType_S"
    "inglePvpScore\020o\022\024\n\020ExpendType_Level\020p\022\023\n"
    "\017ExpendType_Roll\020q\022\031\n\025ExpendType_EquipLu"
    "cky\020r\022\032\n\026ExpendType_SufferValue\020s\022\031\n\025Exp"
    "endType_MakeVigour\020t*\245\001\n\023_emPreCondition"
    "Type\022\032\n\026PreConditionType_Count\020\001\022\036\n\032PreC"
    "onditionType_OnlyIndex\020\002\022\030\n\024PreCondition"
    "Type_Job\020\003\022\032\n\026PreConditionType_Level\020\004\022\034"
    "\n\030PreConditionType_SysOpen\020\005*\251\002\n\016_emMons"
    "terType\022\027\n\023MonsterType_Monster\020\000\022\023\n\017Mons"
    "terType_NPC\020\001\022\032\n\026MonsterType_Collection\020"
    "\002\022\025\n\021MonsterType_Block\020\003\022\027\n\023MonsterType_"
    "Capture\020\004\022\026\n\022MonsterType_Active\020\005\022\036\n\032Mon"
    "sterType_RewardZhenshen\020\t\022\037\n\033MonsterType"
    "_RewardThugElite\020\n\022\036\n\032MonsterType_Reward"
    "ThugBoss\020\013\022$\n MonsterType_RewardSpecialM"
    "onster\020\014*L\n\021_emMonsterSubType\022\022\n\016Monster"
    "_Normal\020\000\022\021\n\rMonster_Elite\020\001\022\020\n\014Monster_"
    "Boss\020\002*\307\001\n\030_emMonsterCollectionType\022\035\n\031M"
    "onsterCollectType_Normal\020\000\022\"\n\036MonsterCol"
    "lectType_WenQuShibei\020\001\022!\n\035MonsterCollect"
    "Type_LiangyiNum\020\002\022\"\n\036MonsterCollectType_"
    "SixiangMain\020\003\022!\n\035MonsterCollectType_Sixi"
    "angSub\020\004*\325\001\n\016_emMonsterMark\022\032\n\026MonsterMa"
    "rk_NoBeChoose\020\001\022\032\n\026MonsterMark_NoBeAttac"
    "k\020\002\022\031\n\025MonsterMark_DialogNpc\020\004\022\025\n\021Monste"
    "rMark_Guard\020\005\022\032\n\026MonsterMark_LimitOwner\020"
    "\006\022\037\n\033MonsterMark_EnterCopymapDel\020\007\022\034\n\030Mo"
    "nsterMark_PvpWarBanner\020\010*k\n\013_emMoveType\022"
    "\021\n\rMoveType_Idle\020\001\022\021\n\rMoveType_Walk\020\002\022\020\n"
    "\014MoveType_Run\020\003\022\021\n\rMoveType_Rush\020\004\022\021\n\rMo"
    "veType_Jump\020\005*\201\001\n\016_emCoolingType\022\025\n\021Cool"
    "ingType_Group\020\001\022\025\n\021CoolingType_Skill\020\002\022\024"
    "\n\020CoolingType_Item\020\003\022\023\n\017CoolingType_Fly\020"
    "\004\022\026\n\022CoolingType_Relive\020\005*\335\002\n\020_emGameSta"
    "teType\022\027\n\023StateType_WaitReady\020\000\022\023\n\017State"
    "Type_Trade\020\003\022\025\n\021StateType_Singing\020\004\022\025\n\021S"
    "tateType_Skiling\020\005\022\023\n\017StateType_Plane\020\006\022"
    "\023\n\017StateType_Match\020\007\022\022\n\016StateType_Dead\020\010"
    "\022\023\n\017StateType_Fight\020\t\022\022\n\016StateType_Dart\020"
    "\013\022\031\n\025StateType_Dartcar_Rob\020\014\022\026\n\022StateTyp"
    "e_Qinggong\020\r\022\022\n\016StateType_Hide\020\016\022\022\n\016Stat"
    "eType_Rest\020\017\022\027\n\023StateType_DrinkWine\020\020\022\022\n"
    "\016StateType_Hold\020\027*\250\002\n\020_emStateBuffAttr\022\034"
    "\n\030StateBuffAttr_ForbidMove\020\000\022!\n\035StateBuf"
    "fAttr_ForbidDirection\020\001\022!\n\035StateBuffAttr"
    "_ForbidAnimation\020\002\022\035\n\031StateBuffAttr_Forb"
    "idSkill\020\003\022\036\n\032StateBuffAttr_ForbidDamage\020"
    "\004\022\034\n\030StateBuffAttr_ForbidDead\020\005\022\026\n\022State"
    "BuffAttr_Hide\020\006\022\034\n\030StateBuffAttr_AttackM"
    "iss\020\007\022\035\n\031StateBuffAttr_ForbidMount\020\010*K\n\014"
    "_emRangeType\022\023\n\017RangeType_Round\020\001\022\022\n\016Ran"
    "geType_Rect\020\002\022\022\n\016RangeType_Ring\020\003*\325\003\n\014_e"
    "mSkillMark\022\024\n\020SkillMark_Charge\020\001\022\022\n\016Skil"
    "lMark_Sing\020\002\022\026\n\022SkillMark_Continue\020\003\022\036\n\032"
    "SkillMark_ChargeEnableMove\020\004\022\035\n\031SkillMar"
    "k_SkillEnableMove\020\005\022\022\n\016SkillMark_Dash\020\006\022"
    "\031\n\025SkillMark_NoTargeStop\020\007\022\037\n\033SkillMark_"
    "SkillEnableRotate\020\010\022\025\n\021SkillMark_Average"
    "\0203\022\032\n\026SkillMark_IgnorDefense\0204\022\031\n\025SkillM"
    "ark_IgnoreDodge\0205\022\026\n\022SkillMark_NowDeath\020"
    "6\022\030\n\024SkillMark_TargetOnce\0207\022!\n\035SkillMark"
    "_CastEndNoStopByMove\0209\022\027\n\023SkillMark_NoBe"
    "Break\020:\022\034\n\030SkillMark_SingLockTarget\020;\022\032\n"
    "\026SkillMark_NoTarNoSkill\020<*\354\002\n\026_emSkillSp"
    "areParamType\022!\n\035SkillSpareParamType_Dash"
    "Speed\020\001\022(\n$SkillSpareParamType_InheritTa"
    "rgetPos\020\002\022 \n\034SkillSpareParamType_AddStat"
    "e\020\003\022&\n\"SkillSpareParamType_ExpendInterva"
    "l\020\004\022(\n$SkillSpareParamType_DelaySkillEff"
    "ect\020\005\022\'\n#SkillSpareParamType_criticalAdd"
    "Buff\020\006\022#\n\037SkillSpareParamType_doneDelBuf"
    "f\020\007\022%\n!SkillSpareParamType_DamageUpByNum"
    "\020\010\022\034\n\030SkillSpareParamType_Dash\020\t*c\n\020_emS"
    "killBehavior\022\032\n\026SkillBehavior_HaveAnim\020\001"
    "\022\030\n\024SkillBehavior_NoAnim\020\002\022\031\n\025SkillBehav"
    "ior_NoAnim1\020\003*f\n\023_emTargetSelectType\022\031\n\025"
    "TargetSelectType_Near\020\000\022\031\n\025TargetSelectT"
    "ype_Rand\020\001\022\031\n\025TargetSelectType_Long\020\002*\233\001"
    "\n\021_emTargetCategory\022\030\n\024TargetCategory_En"
    "emy\020\000\022\031\n\025TargetCategory_Friend\020\001\022\027\n\023Targ"
    "etCategory_Self\020\002\022 \n\034TargetCategory_Frie"
    "ndAndSelf\020\003\022\026\n\022TargetCategory_All\020\004*.\n\022_"
    "emSkillNoticeType\022\030\n\024SkillNoticeType_Mis"
    "s\020\001*\373\001\n\017_emSkillUseType\022\032\n\026SkillUseType_"
    "Proactive\020\000\022\030\n\024SkillUseType_Passive\020\001\022\032\n"
    "\026SkillUseType_AtkTriger\020\002\022\034\n\030SkillUseTyp"
    "e_BeAtkTriger\020\003\022\035\n\031SkillUseType_BeKillTr"
    "iger\020\004\022\036\n\032SkillUseType_HpLimitTriger\020\005\022\030"
    "\n\024SkillUseType_UseItem\020\006\022\037\n\033SkillUseType"
    "_ContinueNotHit\020\007*\274\001\n\014_emSkillType\022\027\n\023Sk"
    "illType_NormalAtk\020\001\022\031\n\025SkillType_CommonS"
    "kill\020\002\022\027\n\023SkillType_RollSkill\020\003\022\037\n\033Skill"
    "Type_MonsterCollletion\020\004\022\024\n\020SkillType_Ar"
    "rest\020\005\022\024\n\020SkillType_Active\020\006\022\022\n\016SkillTyp"
    "e_Thug\020\007*\236\003\n\023_emSkillDirStrategy\022\032\n\026Skil"
    "lDirStrategy_NoDir\020\001\022\033\n\027SkillDirStrategy"
    "_TarDir\020\002\022\036\n\032SkillDirStrategy_ButtonDir\020"
    "\003\022\036\n\032SkillDirStrategy_ButtonPos\020\004\022\037\n\033Ski"
    "llDirStrategy_ReleasePos\020\005\022\034\n\030SkillDirSt"
    "rategy_PoleDir\020\006\022#\n\037SkillDirStrategy_Pol"
    "eReleasePos\020\007\022\037\n\033SkillDirStrategy_Develo"
    "pPos\020\010\022\036\n\032SkillDirStrategy_TargetPos\020\t\022%"
    "\n!SkillDirStrategy_ApoointTargetDir\020\n\022%\n"
    "!SkillDirStrategy_ApoointTargetPos\020\013\022\033\n\027"
    "SkillDirStrategy_Target\020\014*u\n\025_emSkillCom"
    "positeType\022\035\n\031SkillCompositeType_Combat\020"
    "\001\022\034\n\030SkillCompositeType_Child\020\002\022\037\n\033Skill"
    "CompositeType_Continue\020\003*^\n\020_emSkillTime"
    "Type\022\024\n\020SkillTimeType_CD\020\001\022\030\n\024SkillTimeT"
    "ype_Charge\020\002\022\032\n\026SkillTimeType_Continue\020\003"
    "*\257\003\n\022_emSkillEffectType\022\032\n\026SkillEffectTy"
    "pe_Damage\020\001\022\030\n\024SkillEffectType_Cure\020\002\022\033\n"
    "\027SkillEffectType_AddBuff\020\003\022\035\n\031SkillEffec"
    "tType_AddExpend\020\004\022\035\n\031SkillEffectType_Add"
    "Object\020\005\022#\n\037SkillEffectType_ClearUsefulB"
    "uff\020\006\022$\n SkillEffectType_ClearHarmfulBuf"
    "f\020\007\022 \n\034SkillEffectType_ClearSkillCD\020\010\022\030\n"
    "\024SkillEffectType_Move\020\t\022\034\n\030SkillEffectTy"
    "pe_StopMove\020\n\022\034\n\030SkillEffectType_AddSkil"
    "l\020\013\022\"\n\036SkillEffectType_OutRingAddBuff\020\014\022"
    "!\n\035SkillEffectType_ResetBuffTime\020\r*m\n\024_e"
    "mBuffDifRepeatType\022\032\n\026BuffDifRepeatType_"
    "Drop\020\001\022\035\n\031BuffDifRepeatType_Refresh\020\002\022\032\n"
    "\026BuffDifRepeatType_Save\020\003*q\n\025_emBuffSame"
    "RepeatType\022\033\n\027BuffSameRepeatType_Drop\020\001\022"
    "\036\n\032BuffSameRepeatType_Refresh\020\002\022\033\n\027BuffS"
    "ameRepeatType_Time\020\003*\331\002\n\013_emBuffMark\022\035\n\031"
    "BuffMark_CriticalAddLayer\020\001\022\024\n\020BuffMark_"
    "NoClear\020\002\022\030\n\024BuffMark_OfflineStop\020\003\022\035\n\031B"
    "uffMark_OnlineClearBroad\020\004\022\024\n\020BuffMark_I"
    "sBroad\020\005\022\030\n\024BuffMark_UseSkillDel\020\006\022\030\n\024Bu"
    "ffMark_IsDeadClear\020\007\022\033\n\027BuffMark_UseSkil"
    "lEndDel\020\010\022\037\n\033BuffMark_TrapAddBuffOneTime"
    "\020\t\022\032\n\026BuffMark_OfflineDelete\020\n\022\031\n\025BuffMa"
    "rk_FlyMapDelete\020\013\022\035\n\031BuffMark_BeSkillHit"
    "Delete\020\014*N\n\n_emBuffCat\022\022\n\016BuffCat_Battle"
    "\020\001\022\022\n\016BuffCat_Normal\020\002\022\030\n\024BuffCat_Passiv"
    "eSkill\020\003*p\n\034_emBuffCriticalConditionType"
    "\022\'\n#BuffCriticalConditionType_HPPercent\020"
    "\001\022\'\n#BuffCriticalConditionType_BuffGroup"
    "\020\002*\261\005\n\013_emBuffType\022\035\n\031BuffType_ContiueAd"
    "dExpend\020\001\022\033\n\027BuffType_ContiueAddBuff\020\002\022\022"
    "\n\016BuffType_Attri\020\003\022\025\n\021BuffType_AddState\020"
    "\004\022\021\n\rBuffType_Move\020\005\022\034\n\030BuffType_Contiue"
    "UseSkill\020\006\022\034\n\030BuffType_AttackAddExpend\020\007"
    "\022\035\n\031BuffType_SkillExtraDamage\020\010\022\034\n\030BuffT"
    "ype_ChangeSkillTime\020\t\022\036\n\032BuffType_SkillE"
    "xpendReduce\020\n\022\031\n\025BuffType_AddCureEffet\020\013"
    "\022\031\n\025BuffType_AddHarmEffet\020\014\022\035\n\031BuffType_"
    "AddCriticalEffet\020\r\022\030\n\024BuffType_AddBuffTi"
    "me\020\016\022\023\n\017BuffType_SuckHP\020\017\022\033\n\027BuffType_Ad"
    "dHarmMonster\020\020\022\035\n\031BuffType_AddSkillBuffT"
    "ime\020\021\022\032\n\026BuffType_AddTargetHarm\020\022\022\034\n\030Buf"
    "fType_ExpendAddExpend\020\023\022 \n\034BuffType_BeSk"
    "illHitSUseSkill\020\024\022\036\n\032BuffType_BeSkillHit"
    "DelBuff\020\025\022\030\n\024BuffType_HatredLevel\020\026\022 \n\034B"
    "uffType_BeSkillHitTUseSkill\020\027\022\027\n\023BuffTyp"
    "e_Dazuoguaji\020\030*X\n\017_emBuffMoveType\022\025\n\021Buf"
    "fMoveType_Back\020\001\022\030\n\024BuffMoveType_BackFly"
    "\020\002\022\024\n\020BuffMoveType_Fly\020\003*t\n\025_emBuffMoveT"
    "argetType\022\033\n\027BuffMoveTargetType_Back\020\000\022\036"
    "\n\032BuffMoveTargetType_BackFly\020\001\022\036\n\032BuffMo"
    "veTargetType_TrapEnd\020\002*>\n\r_emEffectType\022"
    "\025\n\021EffectType_Useful\020\001\022\026\n\022EffectType_Har"
    "mful\020\002*O\n\021_emBuffMutualType\022\034\n\030_emBuffMu"
    "tualType_DelNew\020\001\022\034\n\030_emBuffMutualType_D"
    "elOld\020\002*\312\001\n\020_emDirectionType\022\033\n\027Directio"
    "nType_SkillSame\020\001\022\032\n\026DirectionType_Skill"
    "Dif\020\002\022\036\n\032DirectionType_SkillTarSame\020\003\022\035\n"
    "\031DirectionType_SkillTarDif\020\004\022\037\n\033Directio"
    "nType_SkillVertical\020\005\022\035\n\031DirectionType_S"
    "killSource\020\006*[\n\024_emEffectAddMoveType\022!\n\035"
    "EffectAddMoveType_UseDistance\020\001\022 \n\034Effec"
    "tAddMoveType_UseRelease\020\002*L\n\023_emEffectTa"
    "rgetType\022\031\n\025EffectTargetType_Self\020\001\022\032\n\026E"
    "ffectTargetType_Other\020\002*j\n\035_emBuffDelete"
    "TriggerEventType\022$\n BuffDeleteTriggerEve"
    "ntType_Skill\020\001\022#\n\037BuffDeleteTriggerEvent"
    "Type_Buff\020\002*\227\001\n\020_emTrapAngleType\022\030\n\024Trap"
    "AngleType_OneDir\020\001\022\027\n\023TrapAngleType_Equa"
    "l\020\002\022\026\n\022TrapAngleType_Rand\020\003\022\030\n\024TrapAngle"
    "Type_Static\020\004\022\036\n\032TrapAngleType_RandNoRep"
    "eat\020\005*\335\001\n\017_emTrapMoveType\022\025\n\021TrapMoveTyp"
    "e_None\020\001\022\031\n\025TrapMoveType_Straight\020\002\022\031\n\025T"
    "rapMoveType_Parabola\020\003\022\026\n\022TrapMoveType_T"
    "rack\020\004\022\032\n\026TrapMoveType_Boomerang\020\005\022 \n\034Tr"
    "apMoveType_SpiralClockWise\020\006\022\'\n#TrapMove"
    "Type_SpiralCounterClockWise\020\007*A\n\017_emTrap"
    "StopType\022\024\n\020TrapStopType_Pen\020\001\022\030\n\024TrapSt"
    "opType_Through\020\002*d\n\025_emTrapSpareParamTyp"
    "e\022#\n\037TrapSpareParamType_FirstAddBuff\020\001\022&"
    "\n\"TrapSpareParamType_FindTarDistance\020\002*\233"
    "\001\n\t_emPKType\022\020\n\014PKType_Peace\020\001\022\017\n\013PKType"
    "_Evil\020\002\022\017\n\013PKType_Team\020\003\022\022\n\016PKType_Facti"
    "on\020\004\022\023\n\017PKType_Alliance\020\005\022\020\n\014PKType_Corp"
    "s\020\006\022\016\n\nPKType_All\020\007\022\017\n\013PKType_Camp\020\010*N\n\r"
    "_emModifyType\022\022\n\016ModifyType_Add\020\001\022\022\n\016Mod"
    "ifyType_Del\020\002\022\025\n\021ModifyType_Update\020\003*\225\t\n"
    "\013_emMailType\022\023\n\017MailType_Normal\020\000\022\017\n\013Mai"
    "lType_GM\020\001\022\026\n\022MailType_SysRemind\020\002\022\025\n\021Ma"
    "ilType_SysAward\020\003\022\031\n\025MailType_SaleMoneyB"
    "uy\020\004\022\032\n\026MailType_SaleMoneySale\020\005\022\034\n\030Mail"
    "Type_SaleMoneyBuyRet\020\006\022\035\n\031MailType_SaleM"
    "oneySaleRet\020\007\022\033\n\027MailType_AuctionLockRet"
    "\020\010\022\037\n\033MailType_AuctionSaleTimeOut\020\t\022\033\n\027M"
    "ailType_AuctionSaleGet\020\n\022\032\n\026MailType_Auc"
    "tionBuyGet\020\013\022\025\n\021MailType_DropItem\020\014\022\024\n\020M"
    "ailType_Promote\020\r\022\024\n\020MailType_FullBag\020\016\022"
    "\021\n\rMailType_Gift\020\017\022\030\n\024MailType_FactionBo"
    "ss\020\020\022\031\n\025MailType_DartCarPrize\020\021\022\027\n\023MailT"
    "ype_ClimbTower\020\022\022\026\n\022MailType_WorldBoss\020\023"
    "\022\032\n\026MailType_FactionAlloct\020\024\022\027\n\023MailType"
    "_CashReward\020\025\022\027\n\023MailType_LeaderAway\020\026\022 "
    "\n\034MailType_SinglePvpFirstPrize\020\027\022\036\n\032Mail"
    "Type_SinglePvpDayPrize\020\030\022\037\n\033MailType_Sin"
    "glePvpWeekPrize\020\031\022\031\n\025MailType_ManorProdu"
    "ct\020\032\022\033\n\027MailType_ManorTitle_Get\020\033\022\030\n\024Mai"
    "lType_ManorResult\020\034\022\035\n\031MailType_ManorRes"
    "ultPrize\020\035\022\034\n\030MailType_ManorScorePrize\020\036"
    "\022\032\n\026MailType_FactionRemove\020\037\022\036\n\032MailType"
    "_FactionImpeachSuc\020 \022\037\n\033MailType_Faction"
    "ImpeachFai1\020!\022\037\n\033MailType_FactionImpeach"
    "Fai2\020\"\022\032\n\026MailType_TopListFigtht\020#\022\031\n\025Ma"
    "ilType_TopListLevel\020$\022\032\n\026MailType_TopLis"
    "tWealth\020%\022\035\n\031MailType_TopListSinglePvp\020&"
    "\022\036\n\032MailType_TopListClimbTower\020\'\022\035\n\031Mail"
    "Type_TopListCopymapGW\020(\022\033\n\027MailType_TopL"
    "istFaction\020)*\215\001\n\013_emItemFlag\022\023\n\017ItemFlag"
    "_Binded\020\000\022\025\n\021ItemFlag_Sequence\020\001\022\035\n\031Item"
    "Flag_IsInheritEnhance\020\002\022\033\n\027ItemFlag_IsIn"
    "heritForge\020\003\022\026\n\022ItemFlag_IsInWulue\020\004*\263\002\n"
    "\013_emItemMark\022\023\n\017ItemMark_NoSell\020\000\022\033\n\027Ite"
    "mMark_BuyBackConfirm\020\001\022\025\n\021ItemMark_UseBa"
    "tch\020\002\022\021\n\rItemMark_Show\020\003\022\025\n\021ItemMark_Sho"
    "rtcut\020\004\022\032\n\026ItemMark_DropBroadcast\020\005\022\024\n\020I"
    "temMark_SaveLog\020\006\022\027\n\023ItemMark_GetAutoUse"
    "\020\007\022\031\n\025ItemMark_GetTimeLimit\020\010\022\031\n\025ItemMar"
    "k_UseTimeLimit\020\t\022\032\n\026ItemMark_OfflineNoTi"
    "me\020\n\022\024\n\020ItemMark_GetBind\020\013*\265\001\n\022_emItemQu"
    "alityType\022\031\n\025ItemQualityType_White\020\000\022\031\n\025"
    "ItemQualityType_Green\020\001\022\030\n\024ItemQualityTy"
    "pe_Blue\020\002\022\032\n\026ItemQualityType_Purple\020\003\022\032\n"
    "\026ItemQualityType_Orange\020\004\022\027\n\023ItemQuality"
    "Type_Red\020\005*\236\002\n\013_emItemType\022\025\n\021ItemType_R"
    "esource\020\000\022\022\n\016ItemType_Equip\020\001\022\023\n\017ItemTyp"
    "e_Expend\020\002\022\021\n\rItemType_Pack\020\003\022\022\n\016ItemTyp"
    "e_Panel\020\004\022\023\n\017ItemType_Normal\020\005\022\022\n\016ItemTy"
    "pe_Quest\020\006\022\025\n\021ItemType_Material\020\007\022\023\n\017Ite"
    "mType_BingFu\020\010\022\023\n\017ItemType_Fasion\020\t\022\022\n\016I"
    "temType_Mount\020\n\022\023\n\017ItemType_BingFa\020\013\022\025\n\021"
    "ItemType_Treasure\020\014*\277\001\n\017_emTreasureType\022"
    "\027\n\023TreasureType_Junior\020\001\022\027\n\023TreasureType"
    "_Middle\020\002\022\030\n\024TreasureType_Advance\020\003\022\025\n\021T"
    "reasureType_Gold\020\004\022\027\n\023TreasureType_Super"
    "A\020\005\022\027\n\023TreasureType_SuperB\020\006\022\027\n\023Treasure"
    "Type_SuperC\020\007*w\n\r_emBingfuType\022\023\n\017Bingfu"
    "Type_Yuan\020\001\022\023\n\017BingfuType_Fang\020\002\022\023\n\017Bing"
    "fuType_Jiao\020\003\022\023\n\017BingfuType_Zhui\020\004\022\022\n\016Bi"
    "ngfuType_Exp\020\005*\314\001\n\017_emMaterialType\022\032\n\026Ma"
    "terial_EnhanceWeapon\020\001\022\031\n\025Material_Enhan"
    "ceArmor\020\002\022\034\n\030Material_EnhanceOrnament\020\003\022"
    "\030\n\024Material_ForgeWeapon\020\004\022\027\n\023Material_Fo"
    "rgeArmor\020\005\022\032\n\026Material_ForgeOrnament\020\006\022\025"
    "\n\021Material_Compound\020\007*\350\001\n\014_emEquipType\022\024"
    "\n\020EquipType_Weapon\020\001\022\026\n\022EquipType_Neckla"
    "ce\020\002\022\026\n\022EquipType_Bracelet\020\003\022\022\n\016EquipTyp"
    "e_Ring\020\004\022\023\n\017EquipType_Mount\020\005\022\022\n\016EquipTy"
    "pe_Head\020\006\022\026\n\022EquipType_Shoulder\020\007\022\024\n\020Equ"
    "ipType_Blouse\020\010\022\023\n\017EquipType_Pants\020\t\022\022\n\016"
    "EquipType_Shoe\020\n*]\n\017_emEquipSubType\022\027\n\023E"
    "quipSubType_Weapon\020\001\022\026\n\022EquipSubType_Arm"
    "or\020\002\022\031\n\025EquipSubType_Ornament\020\003*\243\001\n\016_emI"
    "temUseType\022\026\n\022ItemUseType_Expend\020\001\022\024\n\020It"
    "emUseType_Buff\020\002\022\030\n\024ItemUseType_Transfer"
    "\020\003\022\026\n\022ItemUseType_Packet\020\004\022\030\n\024ItemUseTyp"
    "e_Treasure\020\005\022\027\n\023ItemUseType_Fashion\020\006*o\n"
    "\017_emItemPackType\022\025\n\021ItemPacket_Normal\020\001\022"
    "\023\n\017ItemPacket_Rate\020\002\022\027\n\023ItemPacket_Mutua"
    "lly\020\003\022\027\n\023ItemPacket_CountGet\020\004*\330\005\n\016_emCo"
    "pymapType\022\026\n\022CopymapType_Normal\020\000\022\037\n\033Cop"
    "ymapType_NormalNoDisplay\020\001\022\027\n\023CopymapTyp"
    "e_DartRob\020\002\022\033\n\027CopymapType_FactionBoss\020\003"
    "\022\032\n\026CopymapType_ClimbTower\020\004\022\027\n\023CopymapT"
    "ype_GwTrain\020\005\022\031\n\025CopymapType_PvpBanner\020\006"
    "\022\032\n\026CopymapType_ManorLobby\020\007\022 \n\034CopymapT"
    "ype_ManorBattleField\020\010\022\031\n\025CopymapType_Si"
    "nglePvp\020\t\022\033\n\027CopymapType_FactionHome\020\n\022\032"
    "\n\026CopymapType_TrapArrest\020d\022\035\n\031CopymapTyp"
    "e_CaptureArrest\020e\022\037\n\033CopymapType_LimitTi"
    "meArrest\020f\022\034\n\030CopymapType_DialogArrest\020g"
    "\022\033\n\027CopymapType_GuardArrest\020h\022\036\n\031Copymap"
    "Type_WenquTreasure\020\310\001\022 \n\033CopymapType_Lia"
    "ngyiTreasure\020\311\001\022 \n\033CopymapType_SixiangTr"
    "easure\020\312\001\022\036\n\031CopymapType_FeibiaoReward\020\254"
    "\002\022\035\n\030CopymapType_PaihuoReward\020\255\002\022\034\n\027Copy"
    "mapType_AnshaReward\020\256\002\022\037\n\032CopymapType_Zh"
    "enshenReward\020\257\002\022\030\n\023CopymapType_Shoulie\020\220"
    "\003*\244\001\n\022_emCopymapMainType\022\033\n\027CopymapMainT"
    "ype_Normalt\020\000\022\032\n\026CopymapMainType_Arrest\020"
    "\001\022\032\n\026CopymapMainType_Reward\020\002\022\034\n\030Copymap"
    "MainType_Treasure\020\003\022\033\n\027CopymapMainType_S"
    "houlie\020\004*c\n\023_emCopymapResetType\022\027\n\023Copym"
    "apResetType_No\020\000\022\030\n\024CopymapResetType_Day"
    "\020\001\022\031\n\025CopymapResetType_Week\020\002*M\n\023_emCopy"
    "mapEnterType\022\031\n\025CopymapEnterType_Team\020\000\022"
    "\033\n\027CopymapEnterType_Single\020\001*\206\001\n\027_emCopy"
    "mapEnterCopyType\022\036\n\032CopymapEnterCopyType"
    "_Force\020\000\022&\n\"CopymapEnterCopyType_LeaderC"
    "onfirm\020\001\022#\n\037CopymapEnterCopyType_AllConf"
    "irm\020\002*\230\001\n\037_emCopymapTeamRemainConfirmTyp"
    "e\022%\n!CopymapTeamRemainConfirmType_None\020\000"
    "\022(\n$CopymapTeamRemainConfirmType_Copymap"
    "\020\001\022$\n CopymapTeamRemainConfirmType_PVP\020\002"
    "*\202\001\n\031_emCopymapCopymapTimeType\022\037\n\033Copyma"
    "pCopymapTimeType_None\020\000\022 \n\034CopymapCopyma"
    "pTimeType_Enter\020\001\022\"\n\036CopymapCopymapTimeT"
    "ype_OneBoss\020\002*U\n\025_emCopymapEnterReason\022\035"
    "\n\031CopymapEnterReason_Normal\020\001\022\035\n\031Copymap"
    "EnterReason_Assist\020\002*X\n\017_emCopymapState\022"
    "\024\n\020CopymapState_Ing\020\000\022\025\n\021CopymapState_Do"
    "ne\020\001\022\030\n\024CopymapState_Closing\020\002*l\n\024_emCop"
    "ymapDifficulty\022\032\n\026CopymapDifficulty_Easy"
    "\020\001\022\034\n\030CopymapDifficulty_Middle\020\002\022\032\n\026Copy"
    "mapDifficulty_Hard\020\003*T\n\025_emCopymapPrefec"
    "tType\022\033\n\027CopymapPrefectType_Time\020\001\022\036\n\032Co"
    "pymapPrefectType_DeadNum\020\002*\332\002\n\021_emTradeE"
    "ndReason\022\027\n\023TradeEndReason_Done\020\000\022\031\n\025Tra"
    "deEndReason_Cancel\020\001\022\031\n\025TradeEndReason_L"
    "ogout\020\002\022\031\n\025TradeEndReason_Battle\020\003\022\034\n\030Tr"
    "adeEndReason_ServerErr\020\004\022\033\n\027TradeEndReas"
    "on_CheckErr\020\005\022\031\n\025TradeEndReason_DelErr\020\006"
    "\022!\n\035TradeEndReason_GetSliverLimit\020\007\022\"\n\036T"
    "radeEndReason_GiveSliverLimit\020\010\022\033\n\027Trade"
    "EndReason_BagLimit\020\t\022!\n\035TradeEndReason_M"
    "axSliverLimit\020\n*A\n\020_emSaleMoneyType\022\026\n\022S"
    "aleMoneyType_Sale\020\001\022\025\n\021SaleMoneyType_Buy"
    "\020\002*\316\001\n\022_emPlayerShapeType\022\026\n\022PlayerShape"
    "_Weapon\020\000\022\024\n\020PlayerShape_Head\020\001\022\030\n\024Playe"
    "rShape_Shoulder\020\002\022\026\n\022PlayerShape_Blouse\020"
    "\003\022\025\n\021PlayerShape_Mount\020\004\022 \n\034PlayerShape_"
    "WeaponForgeLevel\020\005\022\037\n\033PlayerShape_EquipF"
    "orgeLevel\020\006*J\n\023_emSaleMoneyLogType\022\031\n\025Sa"
    "leMoneyLogType_Sale\020\001\022\030\n\024SaleMoneyLogTyp"
    "e_Buy\020\002*\302\001\n\016_emTopListType\022\026\n\022TopListTyp"
    "e_Figtht\020\000\022\025\n\021TopListType_Level\020\001\022\026\n\022Top"
    "ListType_Wealth\020\002\022\031\n\025TopListType_SingleP"
    "vp\020\003\022\032\n\026TopListType_ClimbTower\020\004\022\031\n\025TopL"
    "istType_CopymapGW\020\005\022\027\n\023TopListType_Facti"
    "on\020\006*\225\001\n\027_emTopListTimeResetType\022\035\n\031TopL"
    "istTimeResetType_None\020\000\022\034\n\030TopListTimeRe"
    "setType_Day\020\001\022\035\n\031TopListTimeResetType_We"
    "ek\020\002\022\036\n\032TopListTimeResetType_Month\020\003*>\n\021"
    "_emAuctionLogType\022\024\n\020AuctionType_Sale\020\001\022"
    "\023\n\017AuctionType_Buy\020\002*p\n\r_emFriendType\022\025\n"
    "\021FriendType_Friend\020\000\022\024\n\020FriendType_Enemy"
    "\020\001\022\030\n\024FriendType_TmpFriend\020\002\022\030\n\024FriendTy"
    "pe_Blacklist\020\003*l\n\022_emAuctionSortType\022\031\n\025"
    "AuctionSortType_Level\020\000\022\035\n\031AuctionSortTy"
    "pe_UnitMoney\020\001\022\034\n\030AuctionSortType_AllMon"
    "ey\020\002*f\n\022_emWulueSchemeType\022\031\n\025WulueSchem"
    "eType_First\020\001\022\032\n\026WulueSchemeType_Second\020"
    "\002\022\031\n\025WulueSchemeType_Third\020\003*\252\001\n\014_emWulu"
    "eType\022\022\n\016WulueType_Feng\020\001\022\021\n\rWulueType_L"
    "in\020\002\022\021\n\rWulueType_Huo\020\003\022\022\n\016WulueType_Sha"
    "n\020\004\022\022\n\016WulueType_Ling\020\005\022\022\n\016WulueType_Bin"
    "g\020\006\022\021\n\rWulueType_Dou\020\007\022\021\n\rWulueType_Zhe\020"
    "\010*W\n\r_emReliveType\022\025\n\021ReliveType_Origin\020"
    "\000\022\032\n\026ReliveType_RelivePoint\020\001\022\023\n\017ReliveT"
    "ype_City\020\002*P\n\023_emWulueYaodianType\022\034\n\030Wul"
    "ueYaodianType_Zhanlue\020\001\022\033\n\027WulueYaodianT"
    "ype_Bingfu\020\002*\220\n\n\022_emQuestTargetType\022\037\n\033Q"
    "uestTargetType_KillMonster\020\001\022\036\n\032QuestTar"
    "getType_DepotGoods\020\002\022 \n\034QuestTargetType_"
    "CollectGoods\020\003\022$\n QuestTargetType_Monste"
    "rDropGoods\020\004\022\034\n\030QuestTargetType_Location"
    "\020\005\022\035\n\031QuestTargetType_EscortNPC\020\006\022\033\n\027Que"
    "stTargetType_UseItem\020\007\022 \n\034QuestTargetTyp"
    "e_UpgradeLevel\020\010\022\035\n\031QuestTargetType_Prom"
    "otion\020\t\022\031\n\025QuestTargetType_Force\020\n\022\034\n\030Qu"
    "estTargetType_Identity\020\013\022!\n\035QuestTargetT"
    "ype_IdentityDaily\020\014\022 \n\034QuestTargetType_F"
    "actionDaily\020\r\022#\n\037QuestTargetType_Complet"
    "eCopymap\020\016\022\034\n\030QuestTargetType_SceneFly\020\017"
    "\022!\n\035QuestTargetType_UpgradeLevel1\020\020\022\033\n\027Q"
    "uestTargetType_Enhance\020\021\022\035\n\031QuestTargetT"
    "ype_ItemForge\020\022\022\034\n\030QuestTargetType_ItemM"
    "ake\020\023\022\033\n\027QuestTargetType_Qianxiu\020\024\022\"\n\036Qu"
    "estTargetType_WulueActivated\020\025\022!\n\035QuestT"
    "argetType_BingfuUpgrade\020\026\022(\n$QuestTarget"
    "Type_IdentitySkillUpgrade\020\027\022\034\n\030QuestTarg"
    "etType_Treasure\020\030\022\030\n\024QuestTargetType_Pvp"
    "5\020\031\022\035\n\031QuestTargetType_WorldBoss\020\032\022$\n Qu"
    "estTargetType_FactionDrinkWine\020\033\022\035\n\031Ques"
    "tTargetType_TakeASeat\020\034\022\031\n\025QuestTargetTy"
    "pe_Store\020\035\022\032\n\026QuestTargetType_Client\020\036\022\034"
    "\n\030QuestTargetType_ReplyNPC\020\037\022\035\n\031QuestTar"
    "getType_WatchShow\020 \022\030\n\024QuestTargetType_H"
    "unt\020!\022\035\n\031QuestTargetType_NewFriend\020\"\022\033\n\027"
    "QuestTargetType_Weapons\020#\022\035\n\031QuestTarget"
    "Type_Challenge\020$\022$\n QuestTargetType_Prom"
    "otionSuccess\020%\022\035\n\031QuestTargetType_HuntCo"
    "unt\020&\022 \n\034QuestTargetType_CopymapCount\020\'\022"
    "\036\n\032QuestTargetType_AddFaction\020(*\330\002\n\024_emQ"
    "uestTargetAction\022 \n\034QuestTargetAction_Ad"
    "dMonster\020\001\022#\n\037QuestTargetAction_RemoveMo"
    "nster\020\002\022 \n\034QuestTargetAction_ChangeCamp\020"
    "\003\022\"\n\036QuestTargetAction_ActivePaoPao\020\004\022$\n"
    " QuestTargetAction_CompleteDialog\020\005\022!\n\035Q"
    "uestTargetAction_ChangeScene\020\006\022\"\n\036QuestT"
    "argetAction_ChangeCamera\020\007\022\"\n\036QuestTarge"
    "tAction_AddSceneArea\020\010\022\"\n\036QuestTargetAct"
    "ion_DelSceneArea\020\t*m\n\023_emEquipInheritMar"
    "k\022\034\n\030EquipInheritMark_Enhance\020\001\022\032\n\026Equip"
    "InheritMark_Forge\020\002\022\034\n\030EquipInheritMark_"
    "Special\020\003*`\n\020_emEquipMakeMark\022\030\n\024EquipMa"
    "keMark_NoBind\020\001\022\027\n\023EquipMakeMark_Lucky\020\002"
    "\022\031\n\025EquipMakeMark_Special\020\003*\333\001\n\014_emQuest"
    "Type\022\023\n\017QuestType_Teach\020\001\022\022\n\016QuestType_M"
    "ain\020\002\022\025\n\021QuestType_Copymap\020\003\022\027\n\023QuestTyp"
    "e_Promotion\020\004\022\030\n\024QuestType_ClassMates\020\005\022"
    "\023\n\017QuestType_Daily\020\006\022\026\n\022QuestType_Treasu"
    "re\020\007\022\024\n\020QuestType_Branch\020\010\022\025\n\021QuestType_"
    "Shoulie\020\t*P\n\n_emFlyType\022\026\n\022FlyType_FlyBy"
    "Horse\020\001\022\025\n\021FlyType_FlyByWind\020\002\022\023\n\017FlyTyp"
    "e_FindNpc\020\003*C\n\024_emSystemSwitchState\022\025\n\021S"
    "witchState_Close\020\000\022\024\n\020SwitchState_Open\020\001"
    "*\375\004\n\023_emSystemSwitchType\022\026\n\022SystemSwitch"
    "_Skill\020\001\022\025\n\021SystemSwitch_Buff\020\002\022\026\n\022Syste"
    "mSwitch_Prize\020\003\022\025\n\021SystemSwitch_Mail\020\004\022\025"
    "\n\021SystemSwitch_Item\020\005\022\026\n\022SystemSwitch_Qu"
    "est\020\006\022\030\n\024SystemSwitch_Copymap\020\007\022\030\n\024Syste"
    "mSwitch_Auction\020\010\022\026\n\022SystemSwitch_Trade\020"
    "\t\022\032\n\026SystemSwitch_SaleMoney\020\n\022\026\n\022SystemS"
    "witch_Store\020\013\022\030\n\024SystemSwitch_Faction\020\014\022"
    "\030\n\024SystemSwitch_TopList\020\r\022\027\n\023SystemSwitc"
    "h_Friend\020\016\022\027\n\023SystemSwitch_Bingfu\020\017\022\026\n\022S"
    "ystemSwitch_Wulue\020\020\022\027\n\023SystemSwitch_WenT"
    "ao\020\021\022\031\n\025systemSwitch_Identity\020\022\022\031\n\025syste"
    "mSwitch_Mounting\020\023\022\034\n\030systemSwitch_ItemE"
    "nhance\020\024\022\031\n\025systemSwitch_ItemMake\020\025\022\035\n\031s"
    "ystemSwitch_TeamPlatform\020\026\022\030\n\024systemSwit"
    "ch_DayToDo\020\027\022\032\n\026systemSwitch_ItemForge\020\030"
    "*J\n\016_emAIStateType\022\020\n\014AIState_Idle\020\000\022\022\n\016"
    "AIState_Battle\020\001\022\022\n\016AIState_Return\020\002*n\n\r"
    "_emAIIdleType\022\026\n\022AIIdleType_Patroll\020\000\022\023\n"
    "\017AIIdleType_Path\020\001\022\026\n\022AIIdleType_Nothing"
    "\020\002\022\030\n\024AIIdleType_TargetPos\020\003*\220\001\n\025_emAISe"
    "lectTargetType\022\035\n\031AISelectTargetType_Hat"
    "red\020\000\022\033\n\027AISelectTargetType_Rand\020\001\022\034\n\030AI"
    "SelectTargetType_MinHP\020\002\022\035\n\031AISelectTarg"
    "etType_Nearst\020\003*2\n\022_emTrapDestroyType\022\034\n"
    "\030TrapDestroyType_UseSkill\020\001*_\n\010_emCorps\022"
    "\021\n\rCorps_Unknown\020\000\022\016\n\nCorps_East\020\001\022\016\n\nCo"
    "rps_West\020\002\022\017\n\013Corps_South\020\003\022\017\n\013Corps_nor"
    "th\020\004*\233\001\n\013_emCorpsJob\022\024\n\020CorpsJob_Unknown"
    "\020\000\022\023\n\017CorpsJob_Leader\020\001\022\023\n\017CorpsJob_Depu"
    "ty\020\002\022\027\n\023CorpsJob_Counsellor\020\003\022\030\n\024CorpsJo"
    "b_LeftGeneral\020\004\022\031\n\025CorpsJob_RightGeneral"
    "\020\005*\311\001\n\r_emFactionJob\022\026\n\022FactionJob_Unkno"
    "wn\020\000\022\025\n\021FactionJob_Leader\020\001\022\025\n\021FactionJo"
    "b_Deputy\020\002\022\024\n\020FactionJob_Elder\020\003\022\026\n\022Fact"
    "ionJob_Manager\020\004\022\025\n\021FactionJob_People\020\005\022"
    "\026\n\021FactionJob_Beauty\020\351\007\022\025\n\020FactionJob_El"
    "ite\020\352\007*\324\003\n\023_emFactionPrivilege\022\037\n\033Factio"
    "nPrivilege_AgreeApply\020\001\022\037\n\033FactionPrivil"
    "ege_InviteJoin\020\002\022\033\n\027FactionPrivilege_Set"
    "Job\020\003\022\037\n\033FactionPrivilege_ForbidTalk\020\004\022\033"
    "\n\027FactionPrivilege_Remove\020\005\022\035\n\031FactionPr"
    "ivilege_SetElite\020\006\022\036\n\032FactionPrivilege_S"
    "etBeauty\020\007\022\031\n\025FactionPrivilege_Edit\020\010\022\033\n"
    "\027FactionPrivilege_Banner\020\t\022\034\n\030FactionPri"
    "vilege_Develop\020\n\022\032\n\026FactionPrivilege_Cor"
    "ps\020\013\022\031\n\025FactionPrivilege_Name\020\014\022\036\n\032Facti"
    "onPrivilege_GoldDepot\020\r\022\032\n\026FactionPrivil"
    "ege_Depot\020\016\022\030\n\024FactionPrivilege_War\020\017*N\n"
    "\023_emFactionMoneyType\022\033\n\027FactionMoneyType"
    "_Sliver\020\000\022\032\n\026FactionMoneyType_Stone\020\001*~\n"
    "\024_emFactionSkillState\022\034\n\030FactionSkillSta"
    "te_Normal\020\000\022!\n\035FactionSkillState_Develop"
    "_ing\020\001\022%\n!FactionSkillState_Develop_susp"
    "end\020\002*\245\002\n\017_emFactionEvent\022\032\n\026FactionEven"
    "t_AddMember\020\000\022\032\n\026FactionEvent_DelMember\020"
    "\001\022\030\n\024FactionEvent_UpLevel\020\002\022\030\n\024FactionEv"
    "ent_Promote\020\003\022\030\n\024FactionEvent_Dismiss\020\004\022"
    "\031\n\025FactionEvent_Transfer\020\005\022\034\n\030FactionEve"
    "nt_FactionBoss\020\006\022\034\n\030FactionEvent_AlloctM"
    "oney\020\007\022\033\n\027FactionEvent_AlloctItem\020\010\022\030\n\024F"
    "actionEvent_Impeach\020\t*\345\r\n\014_emDoingType\022\024"
    "\n\020DoingType_Others\020\000\022\020\n\014DoingType_GM\020\001\022\026"
    "\n\022DoingType_Item_Use\020\002\022\030\n\024DoingType_Equi"
    "p_Make\020\003\022\033\n\027DoingType_Equip_Enhance\020\004\022\031\n"
    "\025DoingType_Equip_Forge\020\005\022\033\n\027DoingType_Eq"
    "uip_Inherit\020\006\022\032\n\026DoingType_Equip_Expire\020"
    "\007\022\027\n\023DoingType_Item_Move\020\010\022\030\n\024DoingType_"
    "Item_Split\020\t\022\034\n\030DoingType_Copymap_Create"
    "\020\n\022\034\n\030DoingType_Quest_Complete\020\013\022\026\n\022Doin"
    "gType_Mail_Get\020\014\022\022\n\016DoingType_Buff\020\r\022\023\n\017"
    "DoingType_Skill\020\016\022\027\n\023DoingType_Store_Get"
    "\020\017\022\033\n\027DoingType_EnterIdentity\020\020\022\033\n\027Doing"
    "Type_Copymap_Enter\020\021\022\033\n\027DoingType_CashSt"
    "ore_Get\020\022\022\033\n\027DoingType_Colletion_Get\020\023\022\023"
    "\n\017DoingType_Prize\020\024\022\023\n\017DoingType_Trade\020\025"
    "\022\022\n\016DoingType_Drop\020\026\022\023\n\017DoingType_Birth\020"
    "\027\022\025\n\021DoingType_Auction\020\030\022\032\n\026DoingType_Co"
    "pymap_Exit\020\031\022\031\n\025DoingType_Finish_Dart\020\032\022"
    "\034\n\030DoingType_Copymap_Finish\020\033\022\030\n\024DoingTy"
    "pe_Dazuoguaji\020\034\022\036\n\032DoingType_CompleteTea"
    "mTask\020\035\022\033\n\027DoingType_BingfuUpgrade\020\036\022\030\n\024"
    "DoingType_ClimbTower\020\037\022\026\n\022DoingType_Comp"
    "ound\020 \022\031\n\025DoingType_TreasureMap\020!\022\037\n\033Doi"
    "ngType_Activity_Liveness\020\"\022!\n\035DoingType_"
    "WorldBoss_RankPrize\020#\022\034\n\030DoingType_World"
    "Boss_Kill\020$\022\027\n\023DoingType_Sell_Item\020%\022\032\n\026"
    "DoingType_BuyBack_Item\020&\022\031\n\025DoingType_It"
    "emUseBuff\0201\022\034\n\030DoingType_ItemUse_Packet\020"
    "2\022\022\n\016DoingType_Dart\0203\022\025\n\021DoingType_Facti"
    "on\0204\022\026\n\022DoingType_Identity\0206\022\025\n\021DoingTyp"
    "e_DelItem\0207\022\032\n\026DoingType_Faction_Boss\0208\022"
    "\030\n\024DoingType_Sale_Money\0209\022\034\n\030DoingType_B"
    "ingFu_QianXiu\020:\022\032\n\026DoingType_BingFu_Rese"
    "t\020;\022\035\n\031DoingType_Wulue_UpZhanlue\020<\022 \n\034Do"
    "ingType_Wetao_ActiveBingFa\020=\022\022\n\016DoingTyp"
    "e_Trap\020>\022\032\n\026DoingType_UpdateEnergy\020\?\022\034\n\030"
    "DoingType_EnergyByAttack\020@\022\037\n\033DoingType_"
    "EnergyByHitEnermy\020A\022\025\n\021DoingType_Monster"
    "\020B\022\027\n\023DoingType_Promotion\020C\022\024\n\020DoingType"
    "_Relive\020D\022\020\n\014DoingType_AI\020E\022\021\n\rDoingType"
    "_PVP\020F\022\034\n\030DoingType_WulueSetBingfu\020G\022\026\n\022"
    "DoingType_EquipOEM\020H\022\033\n\027DoingType_Factio"
    "nAlloct\020I\022\034\n\030DoingType_CorpsJobChange\020J\022"
    "\027\n\023DoingType_WealLogin\020K\022\023\n\017DoingType_Ma"
    "nor\020L\022\026\n\022DoingType_Stronger\020M*+\n\016_emDoin"
    "gObject\022\013\n\007DO_Null\020\000\022\014\n\010DO_Money\020\001*[\n\025_e"
    "mLocatePlayerReason\022\036\n\032LocatePlayerReaso"
    "n_GMQuery\020\001\022\"\n\036LocatePlayerReason_GMQuer"
    "yGOTO\020\002*;\n\014_emGoodModel\022\022\n\016GoodModel_Fre"
    "e\020\001\022\027\n\023GoodModel_FirstFree\020\002*\227\001\n\022_emStor"
    "eCircleType\022\031\n\025StoreCircleType_Never\020\000\022\030"
    "\n\024StoreCircleType_Hour\020\001\022\027\n\023StoreCircleT"
    "ype_Day\020\002\022\030\n\024StoreCircleType_Week\020\003\022\031\n\025S"
    "toreCircleType_Month\020\004*\267\001\n\026_emCopymapCom"
    "pleteType\022\034\n\030CopymapCompleteType_None\020\000\022"
    "\036\n\032CopymapCompleteType_Failed\020\001\022\037\n\033Copym"
    "apCompleteType_Success\020\002\022\037\n\033CopymapCompl"
    "eteType_Prefect\020\003\022\035\n\031CopymapCompleteType"
    "_Equal\020\004*9\n\013_emTeamMark\022\025\n\021TeamMark_Team"
    "Task\020\000\022\023\n\017TeamMark_Follow\020\001*k\n\014_emPrizeT"
    "ype\022\023\n\017PrizeType_Quest\020\001\022\025\n\021PrizeType_Co"
    "pymap\020\002\022\026\n\022PrizeType_Question\020\003\022\027\n\023Prize"
    "Type_WorldBoss\020\004*d\n\022_emPrizeAcceptType\022\030"
    "\n\024PrizeAcceptType_Auto\020\000\022\032\n\026PrizeAcceptT"
    "ype_Manual\020\001\022\030\n\024PrizeAcceptType_Mail\020\002*#"
    "\n\014_emPrizeMark\022\023\n\017PrizeMark_Multi\020\001*\375\001\n\026"
    "_emPrizeKeyCopymapType\022\036\n\032PrizeKeyCopyma"
    "pType_Failed\020\001\022 \n\034PrizeKeyCopymapType_Co"
    "mplete\020\002\022\037\n\033PrizeKeyCopymapType_Prefect\020"
    "\003\022\"\n\036PrizeKeyCopymapType_TeamLeader\020\004\022\035\n"
    "\031PrizeKeyCopymapType_Extra\020\005\022\036\n\032PrizeKey"
    "CopymapType_Assist\020\006\022\035\n\031PrizeKeyCopymapT"
    "ype_Equal\020\007*]\n\023_emSceneMapMarkType\022$\n Sc"
    "eneMapMarkType_canReliveOrigin\020\001\022 \n\034Scen"
    "eMapMarkType_UseEnterPos\020\002*X\n\017_emDartHar"
    "dType\022\025\n\021DartHardType_Easy\020\001\022\027\n\023DartHard"
    "Type_Normal\020\002\022\025\n\021DartHardType_Hard\020\003*\222\001\n"
    "\017_emDartBuffType\022\035\n\031DartBuffType_Change_"
    "Speed\020\001\022\032\n\026DartBuffType_Delay_Rob\020\002\022\"\n\036D"
    "artBuffType_Meet_Hard_Monster\020\003\022 \n\034DartB"
    "uffType_Add_Prize_Money\020\004*P\n\024_emDartBuff"
    "LayerType\022\031\n\025DartBuffLayerType_Add\020\001\022\035\n\031"
    "DartBuffLayerType_Replace\020\002*a\n\020_emDartPr"
    "izeType\022\031\n\025DartPrizeType_Success\020\001\022\031\n\025Da"
    "rtPrizeType_Failure\020\002\022\027\n\023DartPrizeType_A"
    "bort\020\003*P\n\023_emDartActivityType\022\033\n\027DartAct"
    "ivityType_Normal\020\001\022\034\n\030DartActivityType_T"
    "ianxia\020\002*=\n\016_emDartPVPType\022\024\n\020DartPVPTyp"
    "e_Safe\020\001\022\025\n\021DartPVPType_Weiwu\020\002*\360\001\n\016_emD"
    "artLogType\022\023\n\017DartLogType_Get\020\001\022\036\n\032DartL"
    "ogType_Finish_Success\020\002\022\035\n\031DartLogType_F"
    "inish_Failed\020\003\022\031\n\025DartLogType_AddSupply\020"
    "\005\022\033\n\027DartLogType_Rob_Success\020\006\022\032\n\026DartLo"
    "gType_Rob_Failed\020\007\022\032\n\026DartLogType_Check_"
    "Buff\020\010\022\032\n\026DartLogType_Leave_Dart\020\t*\233\001\n\034_"
    "emMonsterDeadDropDistribute\022\'\n#MonsterDe"
    "adDropDistribute_MaxDamage\020\001\022)\n%MonsterD"
    "eadDropDistribute_FirstDamage\020\002\022\'\n#Monst"
    "erDeadDropDistribute_EndDamage\020\003*\221\001\n\035_em"
    "MonsterDeadQuestDistribute\022%\n!MonsterDea"
    "dQuestDistribute_Damage\020\001\022#\n\037MonsterDead"
    "QuestDistribute_Hate\020\002\022$\n MonsterDeadQue"
    "stDistribute_Radiu\020\003*v\n\025_emFactionBossTo"
    "pType\022\037\n\033FactionBossTopType_Personal\020\000\022\036"
    "\n\032FactionBossTopType_Faction\020\001\022\034\n\030Factio"
    "nBossTopType_Union\020\002*\276\001\n\027_emFactionBossA"
    "wardType\022$\n FactionBossAwardType_Persona"
    "lTop\020\000\022#\n\037FactionBossAwardType_FactionTo"
    "p\020\001\022*\n&FactionBossAwardType_FactionScore"
    "Value\020\002\022,\n(FactionBossAwardType_FactionS"
    "corePercent\020\003*O\n\025_emQinggongActionType\022\032"
    "\n\026QinggongActionType_Run\020\000\022\032\n\026QinggongAc"
    "tionType_Fly\020\001*\314\001\n\031_emGameBattleAttrFrom"
    "Type\022\037\n\033GameBattleAttrFromType_Base\020\001\022 \n"
    "\034GameBattleAttrFromType_Equip\020\002\022\'\n#GameB"
    "attleAttrFromType_FactionSkill\020\003\022!\n\035Game"
    "BattleAttrFromType_Wentao\020\004\022 \n\034GameBattl"
    "eAttrFromType_Wulue\020\005*\211\001\n\021_emCollectionT"
    "ype\022\036\n\032ConllectionType_LimitCount\020\001\022\035\n\031C"
    "onllectionType_LimitTime\020\002\022\030\n\024Conllectio"
    "nType_Task\020\003\022\033\n\027ConllectionType_Copymap\020"
    "\004*\177\n\025_emTeamTargetMainType\022\036\n\032TeamTarget"
    "MainType_Copymap\020\001\022)\n%TeamTargetMainType"
    "_Copymap_Difficulty\020\002\022\033\n\027TeamTargetMainT"
    "ype_Task\020\003*\226\001\n\025_emTitleConditionType\022\034\n\030"
    "TitleConditionType_Level\020\001\022\036\n\032TitleCondi"
    "tionType_Copymap\020\002\022\034\n\030TitleConditionType"
    "_Quest\020\003\022!\n\035TitleConditionType_Fightpowe"
    "r\020\004*\310\001\n\031_emTeamMemberRelationType\022\037\n\033Tea"
    "mMemberRelationType_None\020\001\022\"\n\036TeamMember"
    "RelationType_Friends\020\002\022\037\n\033TeamMemberRela"
    "tionType_Fuqi\020\003\022!\n\035TeamMemberRelationTyp"
    "e_JinLan\020\004\022\"\n\036TeamMemberRelationType_Fac"
    "tion\020\005*c\n\022_emClimbTowerClass\022\030\n\024ClimbTow"
    "erClass_Easy\020\001\022\030\n\024ClimbTowerClass_Hard\020\002"
    "\022\031\n\025ClimbTowerClass_Elite\020\003*h\n\026_emClimbT"
    "owerPrizeType\022\030\n\024ClimbTowerPrize_Item\020\001\022"
    "\030\n\024ClimbTowerPrize_Buff\020\002\022\032\n\026ClimbTowerP"
    "rize_Expend\020\003*4\n\024_emClimbTowerLogType\022\034\n"
    "\030ClimbTowerPrize_Win_Time\020\001*\260\001\n\014_emStore"
    "Type\022\025\n\021StoreType_Slivers\020\001\022\030\n\024StoreType"
    "_Bindsliver\020\002\022\022\n\016StoreType_Cash\020\003\022\025\n\021Sto"
    "reType_Faction\020\004\022\025\n\021StoreType_Eploits\020\005\022"
    "\026\n\022StoreType_Chivalry\020\006\022\025\n\021StoreType_Mys"
    "tery\020\007*\325\001\n\024_emTreasurePrizeType\022\032\n\026Treas"
    "urePrizeType_Item\020\001\022\034\n\030TreasurePrizeType"
    "_Expend\020\002\022\032\n\026TreasurePrizeType_Buff\020\003\022\"\n"
    "\036TreasurePrizeType_EnterCopymap\020\004\022!\n\035Tre"
    "asurePrizeType_RefreshBoss\020\005\022 \n\034Treasure"
    "PrizeType_CopymapNpc\020\006*\236\002\n\022_emCastMessag"
    "eType\022\035\n\031CastMessageType_BroadCast\020\001\022\032\n\026"
    "CastMessageType_Active\020\002\022\033\n\027CastMessageT"
    "ype_Lantern\020\003\022\030\n\024CastMessageType_Chat\020\004\022"
    "\035\n\031CastMessageType_TaskStory\020\005\022\035\n\031CastMe"
    "ssageType_FloatTips\020\006\022\035\n\031CastMessageType"
    "_RedAleart\020\007\022\034\n\030CastMessageType_GetMoney"
    "\020\010\022\033\n\027CastMessageType_GetItem\020\t*\323\001\n\025_emW"
    "orldBossEventType\022\036\n\032WorldBossEventType_"
    "Unknown\020\000\022\035\n\031WorldBossEventType_Active\020\001"
    "\022\035\n\031WorldBossEventType_Killed\020\002\022\037\n\033World"
    "BossEventType_5_Min_CD\020\003\022\034\n\030WorldBossEve"
    "ntType_Close\020\004\022\035\n\031WorldBossEventType_Fro"
    "zen\020\005*\323\002\n\017_emActivityType\022\032\n\026ActivityTyp"
    "e_CopymapID\020\001\022 \n\034ActivityType_CopymapMai"
    "nType\020\002\022\034\n\030ActivityType_CopymapType\020\003\022\031\n"
    "\025ActivityType_UserItem\020\004\022\026\n\022ActivityType"
    "_Quest\020\005\022\032\n\026ActivityType_WorldBoss\020\006\022\033\n\027"
    "ActivityType_NormalDart\020\007\022\026\n\022ActivityTyp"
    "e_Sword\020\010\022\037\n\033ActivityType_AnswerQuestion"
    "\020\t\022\032\n\026ActivityType_TakeASeat\020\n\022#\n\037Activi"
    "tyType_FactionCompotation\020\013*{\n\024_emManorO"
    "ccupyStatus\022\024\n\020ManorOccupy_Stop\020\000\022\030\n\024Man"
    "orOccupy_Applying\020\001\022\031\n\025ManorOccupy_Apply"
    "able\020\002\022\030\n\024ManorOccupy_Fighting\020\003*;\n\014_emM"
    "anorType\022\025\n\021ManorType_Capital\020\001\022\024\n\020Manor"
    "Type_Normal\020\002*U\n\023_emManorFactionType\022\037\n\033"
    "ManorFactionType_Challenger\020\000\022\035\n\031ManorFa"
    "ctionType_Defender\020\001*\346\005\n\033_emManorBroadca"
    "stPromptType\022(\n$ManorBroadcastPromptType"
    "_Lobby_Ready\020\001\022(\n$ManorBroadcastPromptTy"
    "pe_Lobby_Begin\020\002\022/\n+ManorBroadcastPrompt"
    "Type_BattleField_Occupy\020\003\022-\n)ManorBroadc"
    "astPromptType_BattleField_Kill\020\004\022/\n+Mano"
    "rBroadcastPromptType_BattleField_BeKill\020"
    "\005\0221\n-ManorBroadcastPromptType_BattleFiel"
    "d_Megakill\020\006\0220\n,ManorBroadcastPromptType"
    "_BattleField_Godlike\020\007\0227\n3ManorBroadcast"
    "PromptType_BattleField_Shenfu_Prepare\020\010\022"
    "5\n1ManorBroadcastPromptType_BattleField_"
    "Shenfu_Ready\020\t\0223\n/ManorBroadcastPromptTy"
    "pe_BattleField_End_CD_Min\020\n\0223\n/ManorBroa"
    "dcastPromptType_BattleField_End_CD_Sec\020\013"
    "\0224\n0ManorBroadcastPromptType_BattleField"
    "_End_CD_Auto\020\014\0225\n1ManorBroadcastPromptTy"
    "pe_BattleField_Start_CD_Sec\020\r\0226\n2ManorBr"
    "oadcastPromptType_BattleField_Start_CD_A"
    "uto\020\016*\317\001\n\020_emManorMailType\022 \n\034ManorMailT"
    "ype_Member_Success\020\001\022\035\n\031ManorMailType_Me"
    "mber_Fail\020\002\022+\n\'ManorMailType_Leader_Chal"
    "lenger_Success\020\003\022\'\n#ManorMailType_Leader"
    "_Defend_Success\020\004\022$\n ManorMailType_Leade"
    "r_Defend_Fail\020\005*7\n\r_emPvpWarType\022\022\n\016PvpW"
    "arType_5v5\020\001\022\022\n\016PvpWarType_1v1\020\002*/\n\n_emP"
    "vpCamp\022\017\n\013Pvpcamp_Red\020\t\022\020\n\014Pvpcamp_Blue\020"
    "\n", 32161);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameDefine.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameDefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameDefine_2eproto {
  StaticDescriptorInitializer_GameDefine_2eproto() {
    protobuf_AddDesc_GameDefine_2eproto();
  }
} static_descriptor_initializer_GameDefine_2eproto_;

const ::google::protobuf::EnumDescriptor* _emPlayerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPlayerType_descriptor_;
}
bool _emPlayerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emFactionDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emFactionDataType_descriptor_;
}
bool _emFactionDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emAccountMark_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emAccountMark_descriptor_;
}
bool _emAccountMark_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emClientPF_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emClientPF_descriptor_;
}
bool _emClientPF_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emEnterFightReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emEnterFightReason_descriptor_;
}
bool _emEnterFightReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emGameSystemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emGameSystemType_descriptor_;
}
bool _emGameSystemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _em_GameUnitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _em_GameUnitType_descriptor_;
}
bool _em_GameUnitType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _em_GameUnitJob_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _em_GameUnitJob_descriptor_;
}
bool _em_GameUnitJob_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emHatredType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emHatredType_descriptor_;
}
bool _emHatredType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTeamAllotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTeamAllotType_descriptor_;
}
bool _emTeamAllotType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTeamLeaveReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTeamLeaveReason_descriptor_;
}
bool _emTeamLeaveReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emBattleAttrAffectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBattleAttrAffectType_descriptor_;
}
bool _emBattleAttrAffectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emBattleAttribute_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBattleAttribute_descriptor_;
}
bool _emBattleAttribute_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emExpendType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emExpendType_descriptor_;
}
bool _emExpendType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emPreConditionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPreConditionType_descriptor_;
}
bool _emPreConditionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emMonsterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emMonsterType_descriptor_;
}
bool _emMonsterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emMonsterSubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emMonsterSubType_descriptor_;
}
bool _emMonsterSubType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emMonsterCollectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emMonsterCollectionType_descriptor_;
}
bool _emMonsterCollectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emMonsterMark_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emMonsterMark_descriptor_;
}
bool _emMonsterMark_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emMoveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emMoveType_descriptor_;
}
bool _emMoveType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCoolingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCoolingType_descriptor_;
}
bool _emCoolingType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emGameStateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emGameStateType_descriptor_;
}
bool _emGameStateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emStateBuffAttr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emStateBuffAttr_descriptor_;
}
bool _emStateBuffAttr_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emRangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emRangeType_descriptor_;
}
bool _emRangeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSkillMark_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSkillMark_descriptor_;
}
bool _emSkillMark_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 60:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSkillSpareParamType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSkillSpareParamType_descriptor_;
}
bool _emSkillSpareParamType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSkillBehavior_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSkillBehavior_descriptor_;
}
bool _emSkillBehavior_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTargetSelectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTargetSelectType_descriptor_;
}
bool _emTargetSelectType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTargetCategory_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTargetCategory_descriptor_;
}
bool _emTargetCategory_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSkillNoticeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSkillNoticeType_descriptor_;
}
bool _emSkillNoticeType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSkillUseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSkillUseType_descriptor_;
}
bool _emSkillUseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSkillType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSkillType_descriptor_;
}
bool _emSkillType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSkillDirStrategy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSkillDirStrategy_descriptor_;
}
bool _emSkillDirStrategy_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSkillCompositeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSkillCompositeType_descriptor_;
}
bool _emSkillCompositeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSkillTimeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSkillTimeType_descriptor_;
}
bool _emSkillTimeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSkillEffectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSkillEffectType_descriptor_;
}
bool _emSkillEffectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emBuffDifRepeatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBuffDifRepeatType_descriptor_;
}
bool _emBuffDifRepeatType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emBuffSameRepeatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBuffSameRepeatType_descriptor_;
}
bool _emBuffSameRepeatType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emBuffMark_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBuffMark_descriptor_;
}
bool _emBuffMark_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emBuffCat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBuffCat_descriptor_;
}
bool _emBuffCat_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emBuffCriticalConditionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBuffCriticalConditionType_descriptor_;
}
bool _emBuffCriticalConditionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emBuffType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBuffType_descriptor_;
}
bool _emBuffType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emBuffMoveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBuffMoveType_descriptor_;
}
bool _emBuffMoveType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emBuffMoveTargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBuffMoveTargetType_descriptor_;
}
bool _emBuffMoveTargetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emEffectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emEffectType_descriptor_;
}
bool _emEffectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emBuffMutualType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBuffMutualType_descriptor_;
}
bool _emBuffMutualType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emDirectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emDirectionType_descriptor_;
}
bool _emDirectionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emEffectAddMoveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emEffectAddMoveType_descriptor_;
}
bool _emEffectAddMoveType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emEffectTargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emEffectTargetType_descriptor_;
}
bool _emEffectTargetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emBuffDeleteTriggerEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBuffDeleteTriggerEventType_descriptor_;
}
bool _emBuffDeleteTriggerEventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTrapAngleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTrapAngleType_descriptor_;
}
bool _emTrapAngleType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTrapMoveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTrapMoveType_descriptor_;
}
bool _emTrapMoveType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTrapStopType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTrapStopType_descriptor_;
}
bool _emTrapStopType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTrapSpareParamType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTrapSpareParamType_descriptor_;
}
bool _emTrapSpareParamType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emPKType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPKType_descriptor_;
}
bool _emPKType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emModifyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emModifyType_descriptor_;
}
bool _emModifyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emMailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emMailType_descriptor_;
}
bool _emMailType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emItemFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emItemFlag_descriptor_;
}
bool _emItemFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emItemMark_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emItemMark_descriptor_;
}
bool _emItemMark_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emItemQualityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emItemQualityType_descriptor_;
}
bool _emItemQualityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emItemType_descriptor_;
}
bool _emItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTreasureType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTreasureType_descriptor_;
}
bool _emTreasureType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emBingfuType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBingfuType_descriptor_;
}
bool _emBingfuType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emMaterialType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emMaterialType_descriptor_;
}
bool _emMaterialType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emEquipType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emEquipType_descriptor_;
}
bool _emEquipType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emEquipSubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emEquipSubType_descriptor_;
}
bool _emEquipSubType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emItemUseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emItemUseType_descriptor_;
}
bool _emItemUseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emItemPackType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emItemPackType_descriptor_;
}
bool _emItemPackType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCopymapType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCopymapType_descriptor_;
}
bool _emCopymapType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 200:
    case 201:
    case 202:
    case 300:
    case 301:
    case 302:
    case 303:
    case 400:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCopymapMainType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCopymapMainType_descriptor_;
}
bool _emCopymapMainType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCopymapResetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCopymapResetType_descriptor_;
}
bool _emCopymapResetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCopymapEnterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCopymapEnterType_descriptor_;
}
bool _emCopymapEnterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCopymapEnterCopyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCopymapEnterCopyType_descriptor_;
}
bool _emCopymapEnterCopyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCopymapTeamRemainConfirmType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCopymapTeamRemainConfirmType_descriptor_;
}
bool _emCopymapTeamRemainConfirmType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCopymapCopymapTimeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCopymapCopymapTimeType_descriptor_;
}
bool _emCopymapCopymapTimeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCopymapEnterReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCopymapEnterReason_descriptor_;
}
bool _emCopymapEnterReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCopymapState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCopymapState_descriptor_;
}
bool _emCopymapState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCopymapDifficulty_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCopymapDifficulty_descriptor_;
}
bool _emCopymapDifficulty_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCopymapPrefectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCopymapPrefectType_descriptor_;
}
bool _emCopymapPrefectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTradeEndReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTradeEndReason_descriptor_;
}
bool _emTradeEndReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSaleMoneyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSaleMoneyType_descriptor_;
}
bool _emSaleMoneyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emPlayerShapeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPlayerShapeType_descriptor_;
}
bool _emPlayerShapeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSaleMoneyLogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSaleMoneyLogType_descriptor_;
}
bool _emSaleMoneyLogType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTopListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTopListType_descriptor_;
}
bool _emTopListType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTopListTimeResetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTopListTimeResetType_descriptor_;
}
bool _emTopListTimeResetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emAuctionLogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emAuctionLogType_descriptor_;
}
bool _emAuctionLogType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emFriendType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emFriendType_descriptor_;
}
bool _emFriendType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emAuctionSortType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emAuctionSortType_descriptor_;
}
bool _emAuctionSortType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emWulueSchemeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emWulueSchemeType_descriptor_;
}
bool _emWulueSchemeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emWulueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emWulueType_descriptor_;
}
bool _emWulueType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emReliveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emReliveType_descriptor_;
}
bool _emReliveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emWulueYaodianType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emWulueYaodianType_descriptor_;
}
bool _emWulueYaodianType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emQuestTargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emQuestTargetType_descriptor_;
}
bool _emQuestTargetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emQuestTargetAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emQuestTargetAction_descriptor_;
}
bool _emQuestTargetAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emEquipInheritMark_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emEquipInheritMark_descriptor_;
}
bool _emEquipInheritMark_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emEquipMakeMark_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emEquipMakeMark_descriptor_;
}
bool _emEquipMakeMark_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emQuestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emQuestType_descriptor_;
}
bool _emQuestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emFlyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emFlyType_descriptor_;
}
bool _emFlyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSystemSwitchState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSystemSwitchState_descriptor_;
}
bool _emSystemSwitchState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSystemSwitchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSystemSwitchType_descriptor_;
}
bool _emSystemSwitchType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emAIStateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emAIStateType_descriptor_;
}
bool _emAIStateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emAIIdleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emAIIdleType_descriptor_;
}
bool _emAIIdleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emAISelectTargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emAISelectTargetType_descriptor_;
}
bool _emAISelectTargetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTrapDestroyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTrapDestroyType_descriptor_;
}
bool _emTrapDestroyType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCorps_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCorps_descriptor_;
}
bool _emCorps_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCorpsJob_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCorpsJob_descriptor_;
}
bool _emCorpsJob_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emFactionJob_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emFactionJob_descriptor_;
}
bool _emFactionJob_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emFactionPrivilege_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emFactionPrivilege_descriptor_;
}
bool _emFactionPrivilege_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emFactionMoneyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emFactionMoneyType_descriptor_;
}
bool _emFactionMoneyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emFactionSkillState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emFactionSkillState_descriptor_;
}
bool _emFactionSkillState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emFactionEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emFactionEvent_descriptor_;
}
bool _emFactionEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emDoingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emDoingType_descriptor_;
}
bool _emDoingType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 49:
    case 50:
    case 51:
    case 52:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emDoingObject_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emDoingObject_descriptor_;
}
bool _emDoingObject_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emLocatePlayerReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emLocatePlayerReason_descriptor_;
}
bool _emLocatePlayerReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emGoodModel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emGoodModel_descriptor_;
}
bool _emGoodModel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emStoreCircleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emStoreCircleType_descriptor_;
}
bool _emStoreCircleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCopymapCompleteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCopymapCompleteType_descriptor_;
}
bool _emCopymapCompleteType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTeamMark_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTeamMark_descriptor_;
}
bool _emTeamMark_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emPrizeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPrizeType_descriptor_;
}
bool _emPrizeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emPrizeAcceptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPrizeAcceptType_descriptor_;
}
bool _emPrizeAcceptType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emPrizeMark_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPrizeMark_descriptor_;
}
bool _emPrizeMark_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emPrizeKeyCopymapType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPrizeKeyCopymapType_descriptor_;
}
bool _emPrizeKeyCopymapType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSceneMapMarkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSceneMapMarkType_descriptor_;
}
bool _emSceneMapMarkType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emDartHardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emDartHardType_descriptor_;
}
bool _emDartHardType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emDartBuffType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emDartBuffType_descriptor_;
}
bool _emDartBuffType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emDartBuffLayerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emDartBuffLayerType_descriptor_;
}
bool _emDartBuffLayerType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emDartPrizeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emDartPrizeType_descriptor_;
}
bool _emDartPrizeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emDartActivityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emDartActivityType_descriptor_;
}
bool _emDartActivityType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emDartPVPType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emDartPVPType_descriptor_;
}
bool _emDartPVPType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emDartLogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emDartLogType_descriptor_;
}
bool _emDartLogType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emMonsterDeadDropDistribute_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emMonsterDeadDropDistribute_descriptor_;
}
bool _emMonsterDeadDropDistribute_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emMonsterDeadQuestDistribute_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emMonsterDeadQuestDistribute_descriptor_;
}
bool _emMonsterDeadQuestDistribute_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emFactionBossTopType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emFactionBossTopType_descriptor_;
}
bool _emFactionBossTopType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emFactionBossAwardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emFactionBossAwardType_descriptor_;
}
bool _emFactionBossAwardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emQinggongActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emQinggongActionType_descriptor_;
}
bool _emQinggongActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emGameBattleAttrFromType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emGameBattleAttrFromType_descriptor_;
}
bool _emGameBattleAttrFromType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCollectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCollectionType_descriptor_;
}
bool _emCollectionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTeamTargetMainType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTeamTargetMainType_descriptor_;
}
bool _emTeamTargetMainType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTitleConditionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTitleConditionType_descriptor_;
}
bool _emTitleConditionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTeamMemberRelationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTeamMemberRelationType_descriptor_;
}
bool _emTeamMemberRelationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emClimbTowerClass_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emClimbTowerClass_descriptor_;
}
bool _emClimbTowerClass_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emClimbTowerPrizeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emClimbTowerPrizeType_descriptor_;
}
bool _emClimbTowerPrizeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emClimbTowerLogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emClimbTowerLogType_descriptor_;
}
bool _emClimbTowerLogType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emStoreType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emStoreType_descriptor_;
}
bool _emStoreType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTreasurePrizeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTreasurePrizeType_descriptor_;
}
bool _emTreasurePrizeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emCastMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emCastMessageType_descriptor_;
}
bool _emCastMessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emWorldBossEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emWorldBossEventType_descriptor_;
}
bool _emWorldBossEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emActivityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emActivityType_descriptor_;
}
bool _emActivityType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emManorOccupyStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emManorOccupyStatus_descriptor_;
}
bool _emManorOccupyStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emManorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emManorType_descriptor_;
}
bool _emManorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emManorFactionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emManorFactionType_descriptor_;
}
bool _emManorFactionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emManorBroadcastPromptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emManorBroadcastPromptType_descriptor_;
}
bool _emManorBroadcastPromptType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emManorMailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emManorMailType_descriptor_;
}
bool _emManorMailType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emPvpWarType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPvpWarType_descriptor_;
}
bool _emPvpWarType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emPvpCamp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPvpCamp_descriptor_;
}
bool _emPvpCamp_IsValid(int value) {
  switch(value) {
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
