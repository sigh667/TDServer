// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WARProtocol.proto

#ifndef PROTOBUF_WARProtocol_2eproto__INCLUDED
#define PROTOBUF_WARProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WARProtocol_2eproto();
void protobuf_AssignDesc_WARProtocol_2eproto();
void protobuf_ShutdownFile_WARProtocol_2eproto();


enum _emPW2R_Protocol {
  P_W2R_Operator = 0
};
bool _emPW2R_Protocol_IsValid(int value);
const _emPW2R_Protocol _emPW2R_Protocol_MIN = P_W2R_Operator;
const _emPW2R_Protocol _emPW2R_Protocol_MAX = P_W2R_Operator;
const int _emPW2R_Protocol_ARRAYSIZE = _emPW2R_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPW2R_Protocol_descriptor();
inline const ::std::string& _emPW2R_Protocol_Name(_emPW2R_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPW2R_Protocol_descriptor(), value);
}
inline bool _emPW2R_Protocol_Parse(
    const ::std::string& name, _emPW2R_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPW2R_Protocol>(
    _emPW2R_Protocol_descriptor(), name, value);
}
enum _emW2R_Operator_Protocol {
  W2R_Operator_Register = 0,
  W2R_Operator_RegFaction = 1
};
bool _emW2R_Operator_Protocol_IsValid(int value);
const _emW2R_Operator_Protocol _emW2R_Operator_Protocol_MIN = W2R_Operator_Register;
const _emW2R_Operator_Protocol _emW2R_Operator_Protocol_MAX = W2R_Operator_RegFaction;
const int _emW2R_Operator_Protocol_ARRAYSIZE = _emW2R_Operator_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2R_Operator_Protocol_descriptor();
inline const ::std::string& _emW2R_Operator_Protocol_Name(_emW2R_Operator_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2R_Operator_Protocol_descriptor(), value);
}
inline bool _emW2R_Operator_Protocol_Parse(
    const ::std::string& name, _emW2R_Operator_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2R_Operator_Protocol>(
    _emW2R_Operator_Protocol_descriptor(), name, value);
}
enum _emPR2W_Protocol {
  P_R2W_Operator = 0
};
bool _emPR2W_Protocol_IsValid(int value);
const _emPR2W_Protocol _emPR2W_Protocol_MIN = P_R2W_Operator;
const _emPR2W_Protocol _emPR2W_Protocol_MAX = P_R2W_Operator;
const int _emPR2W_Protocol_ARRAYSIZE = _emPR2W_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPR2W_Protocol_descriptor();
inline const ::std::string& _emPR2W_Protocol_Name(_emPR2W_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPR2W_Protocol_descriptor(), value);
}
inline bool _emPR2W_Protocol_Parse(
    const ::std::string& name, _emPR2W_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPR2W_Protocol>(
    _emPR2W_Protocol_descriptor(), name, value);
}
enum _emR2W_Operator_Protocol {
  R2W_Operator_Register = 0,
  R2W_Operator_RegFaction = 1
};
bool _emR2W_Operator_Protocol_IsValid(int value);
const _emR2W_Operator_Protocol _emR2W_Operator_Protocol_MIN = R2W_Operator_Register;
const _emR2W_Operator_Protocol _emR2W_Operator_Protocol_MAX = R2W_Operator_RegFaction;
const int _emR2W_Operator_Protocol_ARRAYSIZE = _emR2W_Operator_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emR2W_Operator_Protocol_descriptor();
inline const ::std::string& _emR2W_Operator_Protocol_Name(_emR2W_Operator_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emR2W_Operator_Protocol_descriptor(), value);
}
inline bool _emR2W_Operator_Protocol_Parse(
    const ::std::string& name, _emR2W_Operator_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emR2W_Operator_Protocol>(
    _emR2W_Operator_Protocol_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPW2R_Protocol>() {
  return _emPW2R_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2R_Operator_Protocol>() {
  return _emW2R_Operator_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPR2W_Protocol>() {
  return _emPR2W_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emR2W_Operator_Protocol>() {
  return _emR2W_Operator_Protocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WARProtocol_2eproto__INCLUDED
