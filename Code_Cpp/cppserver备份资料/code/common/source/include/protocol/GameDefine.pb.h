// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameDefine.proto

#ifndef PROTOBUF_GameDefine_2eproto__INCLUDED
#define PROTOBUF_GameDefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameDefine_2eproto();
void protobuf_AssignDesc_GameDefine_2eproto();
void protobuf_ShutdownFile_GameDefine_2eproto();


enum _emPlayerType {
  _PInfo_Account = 0,
  _PInfo_Base = 1,
  _PInfo_System = 2,
  _PInfo_Bag = 3,
  _PInfo_Client = 4,
  _PInfo_Quest = 5,
  _PInfo_Mail = 6,
  _PInfo_Friend = 7,
  _PInfo_Faction = 8
};
bool _emPlayerType_IsValid(int value);
const _emPlayerType _emPlayerType_MIN = _PInfo_Account;
const _emPlayerType _emPlayerType_MAX = _PInfo_Faction;
const int _emPlayerType_ARRAYSIZE = _emPlayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPlayerType_descriptor();
inline const ::std::string& _emPlayerType_Name(_emPlayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPlayerType_descriptor(), value);
}
inline bool _emPlayerType_Parse(
    const ::std::string& name, _emPlayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPlayerType>(
    _emPlayerType_descriptor(), name, value);
}
enum _emFactionDataType {
  _FactionData_Base = 0,
  _FactionData_Depot = 1,
  _FactionData_Events = 2
};
bool _emFactionDataType_IsValid(int value);
const _emFactionDataType _emFactionDataType_MIN = _FactionData_Base;
const _emFactionDataType _emFactionDataType_MAX = _FactionData_Events;
const int _emFactionDataType_ARRAYSIZE = _emFactionDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emFactionDataType_descriptor();
inline const ::std::string& _emFactionDataType_Name(_emFactionDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emFactionDataType_descriptor(), value);
}
inline bool _emFactionDataType_Parse(
    const ::std::string& name, _emFactionDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emFactionDataType>(
    _emFactionDataType_descriptor(), name, value);
}
enum _emAccountMark {
  AccountMask_New = 1,
  AccountMark_Adult = 2,
  AccountMark_NotVip = 3
};
bool _emAccountMark_IsValid(int value);
const _emAccountMark _emAccountMark_MIN = AccountMask_New;
const _emAccountMark _emAccountMark_MAX = AccountMark_NotVip;
const int _emAccountMark_ARRAYSIZE = _emAccountMark_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emAccountMark_descriptor();
inline const ::std::string& _emAccountMark_Name(_emAccountMark value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emAccountMark_descriptor(), value);
}
inline bool _emAccountMark_Parse(
    const ::std::string& name, _emAccountMark* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emAccountMark>(
    _emAccountMark_descriptor(), name, value);
}
enum _emClientPF {
  Client_Web = 1,
  Client_Tool = 2
};
bool _emClientPF_IsValid(int value);
const _emClientPF _emClientPF_MIN = Client_Web;
const _emClientPF _emClientPF_MAX = Client_Tool;
const int _emClientPF_ARRAYSIZE = _emClientPF_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emClientPF_descriptor();
inline const ::std::string& _emClientPF_Name(_emClientPF value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emClientPF_descriptor(), value);
}
inline bool _emClientPF_Parse(
    const ::std::string& name, _emClientPF* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emClientPF>(
    _emClientPF_descriptor(), name, value);
}
enum _emEnterFightReason {
  EnterFightReason_UseSkill = 1,
  EnterFightReason_AttackPlayer = 2,
  EnterFightReason_BeAttackPlayer = 3,
  EnterFightReason_AttackMonster = 4,
  EnterFightReason_BeAttackMonster = 5,
  EnterFightReason_Hatred = 6,
  EnterFightReason_BeHatred = 7
};
bool _emEnterFightReason_IsValid(int value);
const _emEnterFightReason _emEnterFightReason_MIN = EnterFightReason_UseSkill;
const _emEnterFightReason _emEnterFightReason_MAX = EnterFightReason_BeHatred;
const int _emEnterFightReason_ARRAYSIZE = _emEnterFightReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emEnterFightReason_descriptor();
inline const ::std::string& _emEnterFightReason_Name(_emEnterFightReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emEnterFightReason_descriptor(), value);
}
inline bool _emEnterFightReason_Parse(
    const ::std::string& name, _emEnterFightReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emEnterFightReason>(
    _emEnterFightReason_descriptor(), name, value);
}
enum _emGameSystemType {
  GameSystemType_Common = 0,
  GameSystemType_Skill = 1,
  GameSystemType_Buff = 2,
  GameSystemType_Counter = 3,
  GameSystemType_Team = 4,
  GameSystemType_Prize = 5,
  GameSystemType_Item = 6,
  GameSystemType_Quest = 7,
  GameSystemType_Mail = 8,
  GameSystemType_Copymap = 9,
  GameSystemType_Auction = 10,
  GameSystemType_Trade = 11,
  GameSystemType_SaleMoney = 12,
  GameSystemType_Store = 13,
  GameSystemType_Faction = 14,
  GameSystemType_TopList = 15,
  GameSystemType_Friend = 16,
  GameSystemType_PvpWar = 17,
  GameSystemType_Wulue = 18,
  GameSystemType_WenTao = 19,
  GameSystemType_DropItem = 20,
  GameSystemType_Identity = 21,
  GameSystemType_Switch = 22,
  GameSystemType_Colletion = 23,
  GameSystemType_Wuxue = 24,
  GameSystemType_Dart = 25,
  GameSystemType_FactionBoss = 26,
  GameSystemType_Title = 27,
  GameSystemType_Fashion = 28,
  GameSystemType_EqiupColumn = 29,
  GameSystemType_ClimbTower = 30,
  GameSystemType_GreatWallTrain = 31,
  GameSystemType_Question = 32,
  GameSystemType_WorldBoss = 33,
  GameSystemType_Activity = 34,
  GameSystemType_Relives = 35,
  GameSystemType_Corps = 36,
  GameSystemType_Weal = 37,
  GameSystemType_Manor = 38,
  GameSystemType_SinglePvp = 39
};
bool _emGameSystemType_IsValid(int value);
const _emGameSystemType _emGameSystemType_MIN = GameSystemType_Common;
const _emGameSystemType _emGameSystemType_MAX = GameSystemType_SinglePvp;
const int _emGameSystemType_ARRAYSIZE = _emGameSystemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emGameSystemType_descriptor();
inline const ::std::string& _emGameSystemType_Name(_emGameSystemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emGameSystemType_descriptor(), value);
}
inline bool _emGameSystemType_Parse(
    const ::std::string& name, _emGameSystemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emGameSystemType>(
    _emGameSystemType_descriptor(), name, value);
}
enum _em_GameUnitType {
  GameObject_None = 0,
  GameObject_Player = 1,
  GameObject_Monster = 2,
  GameObject_Pet = 3,
  GameObject_Trap = 4,
  GameObject_Item = 5,
  GameObject_DartCar = 6
};
bool _em_GameUnitType_IsValid(int value);
const _em_GameUnitType _em_GameUnitType_MIN = GameObject_None;
const _em_GameUnitType _em_GameUnitType_MAX = GameObject_DartCar;
const int _em_GameUnitType_ARRAYSIZE = _em_GameUnitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _em_GameUnitType_descriptor();
inline const ::std::string& _em_GameUnitType_Name(_em_GameUnitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _em_GameUnitType_descriptor(), value);
}
inline bool _em_GameUnitType_Parse(
    const ::std::string& name, _em_GameUnitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_em_GameUnitType>(
    _em_GameUnitType_descriptor(), name, value);
}
enum _em_GameUnitJob {
  GameJob_All = 0,
  GameJob_Bear = 1,
  GameJob_Tiger = 2,
  GameJob_Crane = 3,
  GameJob_Hawk = 4,
  GameJob_Deer = 5
};
bool _em_GameUnitJob_IsValid(int value);
const _em_GameUnitJob _em_GameUnitJob_MIN = GameJob_All;
const _em_GameUnitJob _em_GameUnitJob_MAX = GameJob_Deer;
const int _em_GameUnitJob_ARRAYSIZE = _em_GameUnitJob_MAX + 1;

const ::google::protobuf::EnumDescriptor* _em_GameUnitJob_descriptor();
inline const ::std::string& _em_GameUnitJob_Name(_em_GameUnitJob value) {
  return ::google::protobuf::internal::NameOfEnum(
    _em_GameUnitJob_descriptor(), value);
}
inline bool _em_GameUnitJob_Parse(
    const ::std::string& name, _em_GameUnitJob* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_em_GameUnitJob>(
    _em_GameUnitJob_descriptor(), name, value);
}
enum _emHatredType {
  HatredType_Passive = 0,
  HatredType_Proactive = 1,
  HatredType_Task = 2
};
bool _emHatredType_IsValid(int value);
const _emHatredType _emHatredType_MIN = HatredType_Passive;
const _emHatredType _emHatredType_MAX = HatredType_Task;
const int _emHatredType_ARRAYSIZE = _emHatredType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emHatredType_descriptor();
inline const ::std::string& _emHatredType_Name(_emHatredType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emHatredType_descriptor(), value);
}
inline bool _emHatredType_Parse(
    const ::std::string& name, _emHatredType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emHatredType>(
    _emHatredType_descriptor(), name, value);
}
enum _emTeamAllotType {
  AllotType_None = 0,
  AllotType_Dice = 1,
  AllotType_Assign = 2
};
bool _emTeamAllotType_IsValid(int value);
const _emTeamAllotType _emTeamAllotType_MIN = AllotType_None;
const _emTeamAllotType _emTeamAllotType_MAX = AllotType_Assign;
const int _emTeamAllotType_ARRAYSIZE = _emTeamAllotType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTeamAllotType_descriptor();
inline const ::std::string& _emTeamAllotType_Name(_emTeamAllotType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTeamAllotType_descriptor(), value);
}
inline bool _emTeamAllotType_Parse(
    const ::std::string& name, _emTeamAllotType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTeamAllotType>(
    _emTeamAllotType_descriptor(), name, value);
}
enum _emTeamLeaveReason {
  TeamLeaveReason_Leave = 0,
  TeamLeaveReason_BeKick = 1,
  TeamLeaveReason_Copymap = 2
};
bool _emTeamLeaveReason_IsValid(int value);
const _emTeamLeaveReason _emTeamLeaveReason_MIN = TeamLeaveReason_Leave;
const _emTeamLeaveReason _emTeamLeaveReason_MAX = TeamLeaveReason_Copymap;
const int _emTeamLeaveReason_ARRAYSIZE = _emTeamLeaveReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTeamLeaveReason_descriptor();
inline const ::std::string& _emTeamLeaveReason_Name(_emTeamLeaveReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTeamLeaveReason_descriptor(), value);
}
inline bool _emTeamLeaveReason_Parse(
    const ::std::string& name, _emTeamLeaveReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTeamLeaveReason>(
    _emTeamLeaveReason_descriptor(), name, value);
}
enum _emBattleAttrAffectType {
  BattleAttrAffectType_Multiply = 1,
  BattleAttrAffectType_Divide = 2,
  BattleAttrAffectType_DivideSum = 3
};
bool _emBattleAttrAffectType_IsValid(int value);
const _emBattleAttrAffectType _emBattleAttrAffectType_MIN = BattleAttrAffectType_Multiply;
const _emBattleAttrAffectType _emBattleAttrAffectType_MAX = BattleAttrAffectType_DivideSum;
const int _emBattleAttrAffectType_ARRAYSIZE = _emBattleAttrAffectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBattleAttrAffectType_descriptor();
inline const ::std::string& _emBattleAttrAffectType_Name(_emBattleAttrAffectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBattleAttrAffectType_descriptor(), value);
}
inline bool _emBattleAttrAffectType_Parse(
    const ::std::string& name, _emBattleAttrAffectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBattleAttrAffectType>(
    _emBattleAttrAffectType_descriptor(), name, value);
}
enum _emBattleAttribute {
  BattleAttribute_Strength = 1,
  BattleAttribute_Bone = 2,
  BattleAttribute_Blood = 3,
  BattleAttribute_Body = 4,
  BattleAttribute_Murder = 5,
  BattleAttribute_HPMax = 6,
  BattleAttribute_Attack = 7,
  BattleAttribute_Defense = 8,
  BattleAttribute_Hit = 9,
  BattleAttribute_Dodge = 10,
  BattleAttribute_Crit = 11,
  BattleAttribute_Tenacity = 12,
  BattleAttribute_RunSpeed = 13,
  BattleAttribute_WalkSpeed = 14,
  BattleAttribute_Thump = 15,
  BattleAttribute_Parry = 16,
  BattleAttribute_SuckHP = 17,
  BattleAttribute_Afraid = 18,
  BattleAttribute_Overawe = 19,
  BattleAttribute_Exempt = 20,
  BattleAttribute_DamageImprove = 21,
  BattleAttribute_DamageRemit = 22,
  BattleAttribute_CritRate = 23,
  BattleAttribute_CritMultiple = 24,
  BattleAttribute_CritImmune = 25,
  BattleAttribute_HitRate = 26,
  BattleAttribute_DodgeRate = 27,
  BattleAttribute_SuckHPRate = 28,
  BattleAttribute_AfraidRate = 29,
  BattleAttribute_OveraweRate = 30,
  BattleAttribute_ExemptRate = 31,
  BattleAttribute_EnergyAnger = 32,
  BattleAttribute_EnergyVigor = 33,
  BattleAttribute_EnergyPower = 34,
  BattleAttribute_EnergyHit = 35,
  BattleAttribute_EnergyDark = 36,
  BattleAttribute_EnergyCrystal = 37,
  BattleAttribute_EnergyPsych = 38,
  BattleAttribute_EnergyRoll = 39,
  BattleAttribute_MaxEnergyAnger = 40,
  BattleAttribute_MaxEnergyVigor = 41,
  BattleAttribute_MaxEnergyPower = 42,
  BattleAttribute_MaxEnergyHit = 43,
  BattleAttribute_MaxEnergyDark = 44,
  BattleAttribute_MaxEnergyCrystal = 45,
  BattleAttribute_MaxEnergyPsych = 46,
  BattleAttribute_MaxEnergyRoll = 47
};
bool _emBattleAttribute_IsValid(int value);
const _emBattleAttribute _emBattleAttribute_MIN = BattleAttribute_Strength;
const _emBattleAttribute _emBattleAttribute_MAX = BattleAttribute_MaxEnergyRoll;
const int _emBattleAttribute_ARRAYSIZE = _emBattleAttribute_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBattleAttribute_descriptor();
inline const ::std::string& _emBattleAttribute_Name(_emBattleAttribute value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBattleAttribute_descriptor(), value);
}
inline bool _emBattleAttribute_Parse(
    const ::std::string& name, _emBattleAttribute* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBattleAttribute>(
    _emBattleAttribute_descriptor(), name, value);
}
enum _emExpendType {
  MoneyType_Sliver = 1,
  MoneyType_BindSliver = 2,
  MoneyType_Cash = 3,
  MoneyType_BindCash = 4,
  MoneyType_StoreScore = 5,
  MoneyType_BattleScore = 6,
  ExpendType_Contribution = 7,
  MoneyType_BingfuExp = 8,
  MoneyType_Max = 100,
  ExpendType_HP = 101,
  ExpendType_EnergyAnger = 102,
  ExpendType_EnergyVigor = 103,
  ExpendType_EnergyPower = 104,
  ExpendType_EnergyHit = 105,
  ExpendType_EnergyDark = 106,
  ExpendType_EnergyCrystal = 107,
  ExpendType_EnergyPsych = 108,
  ExpendType_Wisdom = 109,
  ExpendType_Exp = 110,
  ExpendType_SinglePvpScore = 111,
  ExpendType_Level = 112,
  ExpendType_Roll = 113,
  ExpendType_EquipLucky = 114,
  ExpendType_SufferValue = 115,
  ExpendType_MakeVigour = 116
};
bool _emExpendType_IsValid(int value);
const _emExpendType _emExpendType_MIN = MoneyType_Sliver;
const _emExpendType _emExpendType_MAX = ExpendType_MakeVigour;
const int _emExpendType_ARRAYSIZE = _emExpendType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emExpendType_descriptor();
inline const ::std::string& _emExpendType_Name(_emExpendType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emExpendType_descriptor(), value);
}
inline bool _emExpendType_Parse(
    const ::std::string& name, _emExpendType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emExpendType>(
    _emExpendType_descriptor(), name, value);
}
enum _emPreConditionType {
  PreConditionType_Count = 1,
  PreConditionType_OnlyIndex = 2,
  PreConditionType_Job = 3,
  PreConditionType_Level = 4,
  PreConditionType_SysOpen = 5
};
bool _emPreConditionType_IsValid(int value);
const _emPreConditionType _emPreConditionType_MIN = PreConditionType_Count;
const _emPreConditionType _emPreConditionType_MAX = PreConditionType_SysOpen;
const int _emPreConditionType_ARRAYSIZE = _emPreConditionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPreConditionType_descriptor();
inline const ::std::string& _emPreConditionType_Name(_emPreConditionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPreConditionType_descriptor(), value);
}
inline bool _emPreConditionType_Parse(
    const ::std::string& name, _emPreConditionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPreConditionType>(
    _emPreConditionType_descriptor(), name, value);
}
enum _emMonsterType {
  MonsterType_Monster = 0,
  MonsterType_NPC = 1,
  MonsterType_Collection = 2,
  MonsterType_Block = 3,
  MonsterType_Capture = 4,
  MonsterType_Active = 5,
  MonsterType_RewardZhenshen = 9,
  MonsterType_RewardThugElite = 10,
  MonsterType_RewardThugBoss = 11,
  MonsterType_RewardSpecialMonster = 12
};
bool _emMonsterType_IsValid(int value);
const _emMonsterType _emMonsterType_MIN = MonsterType_Monster;
const _emMonsterType _emMonsterType_MAX = MonsterType_RewardSpecialMonster;
const int _emMonsterType_ARRAYSIZE = _emMonsterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emMonsterType_descriptor();
inline const ::std::string& _emMonsterType_Name(_emMonsterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emMonsterType_descriptor(), value);
}
inline bool _emMonsterType_Parse(
    const ::std::string& name, _emMonsterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emMonsterType>(
    _emMonsterType_descriptor(), name, value);
}
enum _emMonsterSubType {
  Monster_Normal = 0,
  Monster_Elite = 1,
  Monster_Boss = 2
};
bool _emMonsterSubType_IsValid(int value);
const _emMonsterSubType _emMonsterSubType_MIN = Monster_Normal;
const _emMonsterSubType _emMonsterSubType_MAX = Monster_Boss;
const int _emMonsterSubType_ARRAYSIZE = _emMonsterSubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emMonsterSubType_descriptor();
inline const ::std::string& _emMonsterSubType_Name(_emMonsterSubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emMonsterSubType_descriptor(), value);
}
inline bool _emMonsterSubType_Parse(
    const ::std::string& name, _emMonsterSubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emMonsterSubType>(
    _emMonsterSubType_descriptor(), name, value);
}
enum _emMonsterCollectionType {
  MonsterCollectType_Normal = 0,
  MonsterCollectType_WenQuShibei = 1,
  MonsterCollectType_LiangyiNum = 2,
  MonsterCollectType_SixiangMain = 3,
  MonsterCollectType_SixiangSub = 4
};
bool _emMonsterCollectionType_IsValid(int value);
const _emMonsterCollectionType _emMonsterCollectionType_MIN = MonsterCollectType_Normal;
const _emMonsterCollectionType _emMonsterCollectionType_MAX = MonsterCollectType_SixiangSub;
const int _emMonsterCollectionType_ARRAYSIZE = _emMonsterCollectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emMonsterCollectionType_descriptor();
inline const ::std::string& _emMonsterCollectionType_Name(_emMonsterCollectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emMonsterCollectionType_descriptor(), value);
}
inline bool _emMonsterCollectionType_Parse(
    const ::std::string& name, _emMonsterCollectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emMonsterCollectionType>(
    _emMonsterCollectionType_descriptor(), name, value);
}
enum _emMonsterMark {
  MonsterMark_NoBeChoose = 1,
  MonsterMark_NoBeAttack = 2,
  MonsterMark_DialogNpc = 4,
  MonsterMark_Guard = 5,
  MonsterMark_LimitOwner = 6,
  MonsterMark_EnterCopymapDel = 7,
  MonsterMark_PvpWarBanner = 8
};
bool _emMonsterMark_IsValid(int value);
const _emMonsterMark _emMonsterMark_MIN = MonsterMark_NoBeChoose;
const _emMonsterMark _emMonsterMark_MAX = MonsterMark_PvpWarBanner;
const int _emMonsterMark_ARRAYSIZE = _emMonsterMark_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emMonsterMark_descriptor();
inline const ::std::string& _emMonsterMark_Name(_emMonsterMark value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emMonsterMark_descriptor(), value);
}
inline bool _emMonsterMark_Parse(
    const ::std::string& name, _emMonsterMark* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emMonsterMark>(
    _emMonsterMark_descriptor(), name, value);
}
enum _emMoveType {
  MoveType_Idle = 1,
  MoveType_Walk = 2,
  MoveType_Run = 3,
  MoveType_Rush = 4,
  MoveType_Jump = 5
};
bool _emMoveType_IsValid(int value);
const _emMoveType _emMoveType_MIN = MoveType_Idle;
const _emMoveType _emMoveType_MAX = MoveType_Jump;
const int _emMoveType_ARRAYSIZE = _emMoveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emMoveType_descriptor();
inline const ::std::string& _emMoveType_Name(_emMoveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emMoveType_descriptor(), value);
}
inline bool _emMoveType_Parse(
    const ::std::string& name, _emMoveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emMoveType>(
    _emMoveType_descriptor(), name, value);
}
enum _emCoolingType {
  CoolingType_Group = 1,
  CoolingType_Skill = 2,
  CoolingType_Item = 3,
  CoolingType_Fly = 4,
  CoolingType_Relive = 5
};
bool _emCoolingType_IsValid(int value);
const _emCoolingType _emCoolingType_MIN = CoolingType_Group;
const _emCoolingType _emCoolingType_MAX = CoolingType_Relive;
const int _emCoolingType_ARRAYSIZE = _emCoolingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCoolingType_descriptor();
inline const ::std::string& _emCoolingType_Name(_emCoolingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCoolingType_descriptor(), value);
}
inline bool _emCoolingType_Parse(
    const ::std::string& name, _emCoolingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCoolingType>(
    _emCoolingType_descriptor(), name, value);
}
enum _emGameStateType {
  StateType_WaitReady = 0,
  StateType_Trade = 3,
  StateType_Singing = 4,
  StateType_Skiling = 5,
  StateType_Plane = 6,
  StateType_Match = 7,
  StateType_Dead = 8,
  StateType_Fight = 9,
  StateType_Dart = 11,
  StateType_Dartcar_Rob = 12,
  StateType_Qinggong = 13,
  StateType_Hide = 14,
  StateType_Rest = 15,
  StateType_DrinkWine = 16,
  StateType_Hold = 23
};
bool _emGameStateType_IsValid(int value);
const _emGameStateType _emGameStateType_MIN = StateType_WaitReady;
const _emGameStateType _emGameStateType_MAX = StateType_Hold;
const int _emGameStateType_ARRAYSIZE = _emGameStateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emGameStateType_descriptor();
inline const ::std::string& _emGameStateType_Name(_emGameStateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emGameStateType_descriptor(), value);
}
inline bool _emGameStateType_Parse(
    const ::std::string& name, _emGameStateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emGameStateType>(
    _emGameStateType_descriptor(), name, value);
}
enum _emStateBuffAttr {
  StateBuffAttr_ForbidMove = 0,
  StateBuffAttr_ForbidDirection = 1,
  StateBuffAttr_ForbidAnimation = 2,
  StateBuffAttr_ForbidSkill = 3,
  StateBuffAttr_ForbidDamage = 4,
  StateBuffAttr_ForbidDead = 5,
  StateBuffAttr_Hide = 6,
  StateBuffAttr_AttackMiss = 7,
  StateBuffAttr_ForbidMount = 8
};
bool _emStateBuffAttr_IsValid(int value);
const _emStateBuffAttr _emStateBuffAttr_MIN = StateBuffAttr_ForbidMove;
const _emStateBuffAttr _emStateBuffAttr_MAX = StateBuffAttr_ForbidMount;
const int _emStateBuffAttr_ARRAYSIZE = _emStateBuffAttr_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emStateBuffAttr_descriptor();
inline const ::std::string& _emStateBuffAttr_Name(_emStateBuffAttr value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emStateBuffAttr_descriptor(), value);
}
inline bool _emStateBuffAttr_Parse(
    const ::std::string& name, _emStateBuffAttr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emStateBuffAttr>(
    _emStateBuffAttr_descriptor(), name, value);
}
enum _emRangeType {
  RangeType_Round = 1,
  RangeType_Rect = 2,
  RangeType_Ring = 3
};
bool _emRangeType_IsValid(int value);
const _emRangeType _emRangeType_MIN = RangeType_Round;
const _emRangeType _emRangeType_MAX = RangeType_Ring;
const int _emRangeType_ARRAYSIZE = _emRangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emRangeType_descriptor();
inline const ::std::string& _emRangeType_Name(_emRangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emRangeType_descriptor(), value);
}
inline bool _emRangeType_Parse(
    const ::std::string& name, _emRangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emRangeType>(
    _emRangeType_descriptor(), name, value);
}
enum _emSkillMark {
  SkillMark_Charge = 1,
  SkillMark_Sing = 2,
  SkillMark_Continue = 3,
  SkillMark_ChargeEnableMove = 4,
  SkillMark_SkillEnableMove = 5,
  SkillMark_Dash = 6,
  SkillMark_NoTargeStop = 7,
  SkillMark_SkillEnableRotate = 8,
  SkillMark_Average = 51,
  SkillMark_IgnorDefense = 52,
  SkillMark_IgnoreDodge = 53,
  SkillMark_NowDeath = 54,
  SkillMark_TargetOnce = 55,
  SkillMark_CastEndNoStopByMove = 57,
  SkillMark_NoBeBreak = 58,
  SkillMark_SingLockTarget = 59,
  SkillMark_NoTarNoSkill = 60
};
bool _emSkillMark_IsValid(int value);
const _emSkillMark _emSkillMark_MIN = SkillMark_Charge;
const _emSkillMark _emSkillMark_MAX = SkillMark_NoTarNoSkill;
const int _emSkillMark_ARRAYSIZE = _emSkillMark_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSkillMark_descriptor();
inline const ::std::string& _emSkillMark_Name(_emSkillMark value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSkillMark_descriptor(), value);
}
inline bool _emSkillMark_Parse(
    const ::std::string& name, _emSkillMark* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSkillMark>(
    _emSkillMark_descriptor(), name, value);
}
enum _emSkillSpareParamType {
  SkillSpareParamType_DashSpeed = 1,
  SkillSpareParamType_InheritTargetPos = 2,
  SkillSpareParamType_AddState = 3,
  SkillSpareParamType_ExpendInterval = 4,
  SkillSpareParamType_DelaySkillEffect = 5,
  SkillSpareParamType_criticalAddBuff = 6,
  SkillSpareParamType_doneDelBuff = 7,
  SkillSpareParamType_DamageUpByNum = 8,
  SkillSpareParamType_Dash = 9
};
bool _emSkillSpareParamType_IsValid(int value);
const _emSkillSpareParamType _emSkillSpareParamType_MIN = SkillSpareParamType_DashSpeed;
const _emSkillSpareParamType _emSkillSpareParamType_MAX = SkillSpareParamType_Dash;
const int _emSkillSpareParamType_ARRAYSIZE = _emSkillSpareParamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSkillSpareParamType_descriptor();
inline const ::std::string& _emSkillSpareParamType_Name(_emSkillSpareParamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSkillSpareParamType_descriptor(), value);
}
inline bool _emSkillSpareParamType_Parse(
    const ::std::string& name, _emSkillSpareParamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSkillSpareParamType>(
    _emSkillSpareParamType_descriptor(), name, value);
}
enum _emSkillBehavior {
  SkillBehavior_HaveAnim = 1,
  SkillBehavior_NoAnim = 2,
  SkillBehavior_NoAnim1 = 3
};
bool _emSkillBehavior_IsValid(int value);
const _emSkillBehavior _emSkillBehavior_MIN = SkillBehavior_HaveAnim;
const _emSkillBehavior _emSkillBehavior_MAX = SkillBehavior_NoAnim1;
const int _emSkillBehavior_ARRAYSIZE = _emSkillBehavior_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSkillBehavior_descriptor();
inline const ::std::string& _emSkillBehavior_Name(_emSkillBehavior value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSkillBehavior_descriptor(), value);
}
inline bool _emSkillBehavior_Parse(
    const ::std::string& name, _emSkillBehavior* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSkillBehavior>(
    _emSkillBehavior_descriptor(), name, value);
}
enum _emTargetSelectType {
  TargetSelectType_Near = 0,
  TargetSelectType_Rand = 1,
  TargetSelectType_Long = 2
};
bool _emTargetSelectType_IsValid(int value);
const _emTargetSelectType _emTargetSelectType_MIN = TargetSelectType_Near;
const _emTargetSelectType _emTargetSelectType_MAX = TargetSelectType_Long;
const int _emTargetSelectType_ARRAYSIZE = _emTargetSelectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTargetSelectType_descriptor();
inline const ::std::string& _emTargetSelectType_Name(_emTargetSelectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTargetSelectType_descriptor(), value);
}
inline bool _emTargetSelectType_Parse(
    const ::std::string& name, _emTargetSelectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTargetSelectType>(
    _emTargetSelectType_descriptor(), name, value);
}
enum _emTargetCategory {
  TargetCategory_Enemy = 0,
  TargetCategory_Friend = 1,
  TargetCategory_Self = 2,
  TargetCategory_FriendAndSelf = 3,
  TargetCategory_All = 4
};
bool _emTargetCategory_IsValid(int value);
const _emTargetCategory _emTargetCategory_MIN = TargetCategory_Enemy;
const _emTargetCategory _emTargetCategory_MAX = TargetCategory_All;
const int _emTargetCategory_ARRAYSIZE = _emTargetCategory_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTargetCategory_descriptor();
inline const ::std::string& _emTargetCategory_Name(_emTargetCategory value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTargetCategory_descriptor(), value);
}
inline bool _emTargetCategory_Parse(
    const ::std::string& name, _emTargetCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTargetCategory>(
    _emTargetCategory_descriptor(), name, value);
}
enum _emSkillNoticeType {
  SkillNoticeType_Miss = 1
};
bool _emSkillNoticeType_IsValid(int value);
const _emSkillNoticeType _emSkillNoticeType_MIN = SkillNoticeType_Miss;
const _emSkillNoticeType _emSkillNoticeType_MAX = SkillNoticeType_Miss;
const int _emSkillNoticeType_ARRAYSIZE = _emSkillNoticeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSkillNoticeType_descriptor();
inline const ::std::string& _emSkillNoticeType_Name(_emSkillNoticeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSkillNoticeType_descriptor(), value);
}
inline bool _emSkillNoticeType_Parse(
    const ::std::string& name, _emSkillNoticeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSkillNoticeType>(
    _emSkillNoticeType_descriptor(), name, value);
}
enum _emSkillUseType {
  SkillUseType_Proactive = 0,
  SkillUseType_Passive = 1,
  SkillUseType_AtkTriger = 2,
  SkillUseType_BeAtkTriger = 3,
  SkillUseType_BeKillTriger = 4,
  SkillUseType_HpLimitTriger = 5,
  SkillUseType_UseItem = 6,
  SkillUseType_ContinueNotHit = 7
};
bool _emSkillUseType_IsValid(int value);
const _emSkillUseType _emSkillUseType_MIN = SkillUseType_Proactive;
const _emSkillUseType _emSkillUseType_MAX = SkillUseType_ContinueNotHit;
const int _emSkillUseType_ARRAYSIZE = _emSkillUseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSkillUseType_descriptor();
inline const ::std::string& _emSkillUseType_Name(_emSkillUseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSkillUseType_descriptor(), value);
}
inline bool _emSkillUseType_Parse(
    const ::std::string& name, _emSkillUseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSkillUseType>(
    _emSkillUseType_descriptor(), name, value);
}
enum _emSkillType {
  SkillType_NormalAtk = 1,
  SkillType_CommonSkill = 2,
  SkillType_RollSkill = 3,
  SkillType_MonsterCollletion = 4,
  SkillType_Arrest = 5,
  SkillType_Active = 6,
  SkillType_Thug = 7
};
bool _emSkillType_IsValid(int value);
const _emSkillType _emSkillType_MIN = SkillType_NormalAtk;
const _emSkillType _emSkillType_MAX = SkillType_Thug;
const int _emSkillType_ARRAYSIZE = _emSkillType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSkillType_descriptor();
inline const ::std::string& _emSkillType_Name(_emSkillType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSkillType_descriptor(), value);
}
inline bool _emSkillType_Parse(
    const ::std::string& name, _emSkillType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSkillType>(
    _emSkillType_descriptor(), name, value);
}
enum _emSkillDirStrategy {
  SkillDirStrategy_NoDir = 1,
  SkillDirStrategy_TarDir = 2,
  SkillDirStrategy_ButtonDir = 3,
  SkillDirStrategy_ButtonPos = 4,
  SkillDirStrategy_ReleasePos = 5,
  SkillDirStrategy_PoleDir = 6,
  SkillDirStrategy_PoleReleasePos = 7,
  SkillDirStrategy_DevelopPos = 8,
  SkillDirStrategy_TargetPos = 9,
  SkillDirStrategy_ApoointTargetDir = 10,
  SkillDirStrategy_ApoointTargetPos = 11,
  SkillDirStrategy_Target = 12
};
bool _emSkillDirStrategy_IsValid(int value);
const _emSkillDirStrategy _emSkillDirStrategy_MIN = SkillDirStrategy_NoDir;
const _emSkillDirStrategy _emSkillDirStrategy_MAX = SkillDirStrategy_Target;
const int _emSkillDirStrategy_ARRAYSIZE = _emSkillDirStrategy_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSkillDirStrategy_descriptor();
inline const ::std::string& _emSkillDirStrategy_Name(_emSkillDirStrategy value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSkillDirStrategy_descriptor(), value);
}
inline bool _emSkillDirStrategy_Parse(
    const ::std::string& name, _emSkillDirStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSkillDirStrategy>(
    _emSkillDirStrategy_descriptor(), name, value);
}
enum _emSkillCompositeType {
  SkillCompositeType_Combat = 1,
  SkillCompositeType_Child = 2,
  SkillCompositeType_Continue = 3
};
bool _emSkillCompositeType_IsValid(int value);
const _emSkillCompositeType _emSkillCompositeType_MIN = SkillCompositeType_Combat;
const _emSkillCompositeType _emSkillCompositeType_MAX = SkillCompositeType_Continue;
const int _emSkillCompositeType_ARRAYSIZE = _emSkillCompositeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSkillCompositeType_descriptor();
inline const ::std::string& _emSkillCompositeType_Name(_emSkillCompositeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSkillCompositeType_descriptor(), value);
}
inline bool _emSkillCompositeType_Parse(
    const ::std::string& name, _emSkillCompositeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSkillCompositeType>(
    _emSkillCompositeType_descriptor(), name, value);
}
enum _emSkillTimeType {
  SkillTimeType_CD = 1,
  SkillTimeType_Charge = 2,
  SkillTimeType_Continue = 3
};
bool _emSkillTimeType_IsValid(int value);
const _emSkillTimeType _emSkillTimeType_MIN = SkillTimeType_CD;
const _emSkillTimeType _emSkillTimeType_MAX = SkillTimeType_Continue;
const int _emSkillTimeType_ARRAYSIZE = _emSkillTimeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSkillTimeType_descriptor();
inline const ::std::string& _emSkillTimeType_Name(_emSkillTimeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSkillTimeType_descriptor(), value);
}
inline bool _emSkillTimeType_Parse(
    const ::std::string& name, _emSkillTimeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSkillTimeType>(
    _emSkillTimeType_descriptor(), name, value);
}
enum _emSkillEffectType {
  SkillEffectType_Damage = 1,
  SkillEffectType_Cure = 2,
  SkillEffectType_AddBuff = 3,
  SkillEffectType_AddExpend = 4,
  SkillEffectType_AddObject = 5,
  SkillEffectType_ClearUsefulBuff = 6,
  SkillEffectType_ClearHarmfulBuff = 7,
  SkillEffectType_ClearSkillCD = 8,
  SkillEffectType_Move = 9,
  SkillEffectType_StopMove = 10,
  SkillEffectType_AddSkill = 11,
  SkillEffectType_OutRingAddBuff = 12,
  SkillEffectType_ResetBuffTime = 13
};
bool _emSkillEffectType_IsValid(int value);
const _emSkillEffectType _emSkillEffectType_MIN = SkillEffectType_Damage;
const _emSkillEffectType _emSkillEffectType_MAX = SkillEffectType_ResetBuffTime;
const int _emSkillEffectType_ARRAYSIZE = _emSkillEffectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSkillEffectType_descriptor();
inline const ::std::string& _emSkillEffectType_Name(_emSkillEffectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSkillEffectType_descriptor(), value);
}
inline bool _emSkillEffectType_Parse(
    const ::std::string& name, _emSkillEffectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSkillEffectType>(
    _emSkillEffectType_descriptor(), name, value);
}
enum _emBuffDifRepeatType {
  BuffDifRepeatType_Drop = 1,
  BuffDifRepeatType_Refresh = 2,
  BuffDifRepeatType_Save = 3
};
bool _emBuffDifRepeatType_IsValid(int value);
const _emBuffDifRepeatType _emBuffDifRepeatType_MIN = BuffDifRepeatType_Drop;
const _emBuffDifRepeatType _emBuffDifRepeatType_MAX = BuffDifRepeatType_Save;
const int _emBuffDifRepeatType_ARRAYSIZE = _emBuffDifRepeatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBuffDifRepeatType_descriptor();
inline const ::std::string& _emBuffDifRepeatType_Name(_emBuffDifRepeatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBuffDifRepeatType_descriptor(), value);
}
inline bool _emBuffDifRepeatType_Parse(
    const ::std::string& name, _emBuffDifRepeatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBuffDifRepeatType>(
    _emBuffDifRepeatType_descriptor(), name, value);
}
enum _emBuffSameRepeatType {
  BuffSameRepeatType_Drop = 1,
  BuffSameRepeatType_Refresh = 2,
  BuffSameRepeatType_Time = 3
};
bool _emBuffSameRepeatType_IsValid(int value);
const _emBuffSameRepeatType _emBuffSameRepeatType_MIN = BuffSameRepeatType_Drop;
const _emBuffSameRepeatType _emBuffSameRepeatType_MAX = BuffSameRepeatType_Time;
const int _emBuffSameRepeatType_ARRAYSIZE = _emBuffSameRepeatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBuffSameRepeatType_descriptor();
inline const ::std::string& _emBuffSameRepeatType_Name(_emBuffSameRepeatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBuffSameRepeatType_descriptor(), value);
}
inline bool _emBuffSameRepeatType_Parse(
    const ::std::string& name, _emBuffSameRepeatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBuffSameRepeatType>(
    _emBuffSameRepeatType_descriptor(), name, value);
}
enum _emBuffMark {
  BuffMark_CriticalAddLayer = 1,
  BuffMark_NoClear = 2,
  BuffMark_OfflineStop = 3,
  BuffMark_OnlineClearBroad = 4,
  BuffMark_IsBroad = 5,
  BuffMark_UseSkillDel = 6,
  BuffMark_IsDeadClear = 7,
  BuffMark_UseSkillEndDel = 8,
  BuffMark_TrapAddBuffOneTime = 9,
  BuffMark_OfflineDelete = 10,
  BuffMark_FlyMapDelete = 11,
  BuffMark_BeSkillHitDelete = 12
};
bool _emBuffMark_IsValid(int value);
const _emBuffMark _emBuffMark_MIN = BuffMark_CriticalAddLayer;
const _emBuffMark _emBuffMark_MAX = BuffMark_BeSkillHitDelete;
const int _emBuffMark_ARRAYSIZE = _emBuffMark_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBuffMark_descriptor();
inline const ::std::string& _emBuffMark_Name(_emBuffMark value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBuffMark_descriptor(), value);
}
inline bool _emBuffMark_Parse(
    const ::std::string& name, _emBuffMark* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBuffMark>(
    _emBuffMark_descriptor(), name, value);
}
enum _emBuffCat {
  BuffCat_Battle = 1,
  BuffCat_Normal = 2,
  BuffCat_PassiveSkill = 3
};
bool _emBuffCat_IsValid(int value);
const _emBuffCat _emBuffCat_MIN = BuffCat_Battle;
const _emBuffCat _emBuffCat_MAX = BuffCat_PassiveSkill;
const int _emBuffCat_ARRAYSIZE = _emBuffCat_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBuffCat_descriptor();
inline const ::std::string& _emBuffCat_Name(_emBuffCat value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBuffCat_descriptor(), value);
}
inline bool _emBuffCat_Parse(
    const ::std::string& name, _emBuffCat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBuffCat>(
    _emBuffCat_descriptor(), name, value);
}
enum _emBuffCriticalConditionType {
  BuffCriticalConditionType_HPPercent = 1,
  BuffCriticalConditionType_BuffGroup = 2
};
bool _emBuffCriticalConditionType_IsValid(int value);
const _emBuffCriticalConditionType _emBuffCriticalConditionType_MIN = BuffCriticalConditionType_HPPercent;
const _emBuffCriticalConditionType _emBuffCriticalConditionType_MAX = BuffCriticalConditionType_BuffGroup;
const int _emBuffCriticalConditionType_ARRAYSIZE = _emBuffCriticalConditionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBuffCriticalConditionType_descriptor();
inline const ::std::string& _emBuffCriticalConditionType_Name(_emBuffCriticalConditionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBuffCriticalConditionType_descriptor(), value);
}
inline bool _emBuffCriticalConditionType_Parse(
    const ::std::string& name, _emBuffCriticalConditionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBuffCriticalConditionType>(
    _emBuffCriticalConditionType_descriptor(), name, value);
}
enum _emBuffType {
  BuffType_ContiueAddExpend = 1,
  BuffType_ContiueAddBuff = 2,
  BuffType_Attri = 3,
  BuffType_AddState = 4,
  BuffType_Move = 5,
  BuffType_ContiueUseSkill = 6,
  BuffType_AttackAddExpend = 7,
  BuffType_SkillExtraDamage = 8,
  BuffType_ChangeSkillTime = 9,
  BuffType_SkillExpendReduce = 10,
  BuffType_AddCureEffet = 11,
  BuffType_AddHarmEffet = 12,
  BuffType_AddCriticalEffet = 13,
  BuffType_AddBuffTime = 14,
  BuffType_SuckHP = 15,
  BuffType_AddHarmMonster = 16,
  BuffType_AddSkillBuffTime = 17,
  BuffType_AddTargetHarm = 18,
  BuffType_ExpendAddExpend = 19,
  BuffType_BeSkillHitSUseSkill = 20,
  BuffType_BeSkillHitDelBuff = 21,
  BuffType_HatredLevel = 22,
  BuffType_BeSkillHitTUseSkill = 23,
  BuffType_Dazuoguaji = 24
};
bool _emBuffType_IsValid(int value);
const _emBuffType _emBuffType_MIN = BuffType_ContiueAddExpend;
const _emBuffType _emBuffType_MAX = BuffType_Dazuoguaji;
const int _emBuffType_ARRAYSIZE = _emBuffType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBuffType_descriptor();
inline const ::std::string& _emBuffType_Name(_emBuffType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBuffType_descriptor(), value);
}
inline bool _emBuffType_Parse(
    const ::std::string& name, _emBuffType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBuffType>(
    _emBuffType_descriptor(), name, value);
}
enum _emBuffMoveType {
  BuffMoveType_Back = 1,
  BuffMoveType_BackFly = 2,
  BuffMoveType_Fly = 3
};
bool _emBuffMoveType_IsValid(int value);
const _emBuffMoveType _emBuffMoveType_MIN = BuffMoveType_Back;
const _emBuffMoveType _emBuffMoveType_MAX = BuffMoveType_Fly;
const int _emBuffMoveType_ARRAYSIZE = _emBuffMoveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBuffMoveType_descriptor();
inline const ::std::string& _emBuffMoveType_Name(_emBuffMoveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBuffMoveType_descriptor(), value);
}
inline bool _emBuffMoveType_Parse(
    const ::std::string& name, _emBuffMoveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBuffMoveType>(
    _emBuffMoveType_descriptor(), name, value);
}
enum _emBuffMoveTargetType {
  BuffMoveTargetType_Back = 0,
  BuffMoveTargetType_BackFly = 1,
  BuffMoveTargetType_TrapEnd = 2
};
bool _emBuffMoveTargetType_IsValid(int value);
const _emBuffMoveTargetType _emBuffMoveTargetType_MIN = BuffMoveTargetType_Back;
const _emBuffMoveTargetType _emBuffMoveTargetType_MAX = BuffMoveTargetType_TrapEnd;
const int _emBuffMoveTargetType_ARRAYSIZE = _emBuffMoveTargetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBuffMoveTargetType_descriptor();
inline const ::std::string& _emBuffMoveTargetType_Name(_emBuffMoveTargetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBuffMoveTargetType_descriptor(), value);
}
inline bool _emBuffMoveTargetType_Parse(
    const ::std::string& name, _emBuffMoveTargetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBuffMoveTargetType>(
    _emBuffMoveTargetType_descriptor(), name, value);
}
enum _emEffectType {
  EffectType_Useful = 1,
  EffectType_Harmful = 2
};
bool _emEffectType_IsValid(int value);
const _emEffectType _emEffectType_MIN = EffectType_Useful;
const _emEffectType _emEffectType_MAX = EffectType_Harmful;
const int _emEffectType_ARRAYSIZE = _emEffectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emEffectType_descriptor();
inline const ::std::string& _emEffectType_Name(_emEffectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emEffectType_descriptor(), value);
}
inline bool _emEffectType_Parse(
    const ::std::string& name, _emEffectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emEffectType>(
    _emEffectType_descriptor(), name, value);
}
enum _emBuffMutualType {
  _emBuffMutualType_DelNew = 1,
  _emBuffMutualType_DelOld = 2
};
bool _emBuffMutualType_IsValid(int value);
const _emBuffMutualType _emBuffMutualType_MIN = _emBuffMutualType_DelNew;
const _emBuffMutualType _emBuffMutualType_MAX = _emBuffMutualType_DelOld;
const int _emBuffMutualType_ARRAYSIZE = _emBuffMutualType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBuffMutualType_descriptor();
inline const ::std::string& _emBuffMutualType_Name(_emBuffMutualType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBuffMutualType_descriptor(), value);
}
inline bool _emBuffMutualType_Parse(
    const ::std::string& name, _emBuffMutualType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBuffMutualType>(
    _emBuffMutualType_descriptor(), name, value);
}
enum _emDirectionType {
  DirectionType_SkillSame = 1,
  DirectionType_SkillDif = 2,
  DirectionType_SkillTarSame = 3,
  DirectionType_SkillTarDif = 4,
  DirectionType_SkillVertical = 5,
  DirectionType_SkillSource = 6
};
bool _emDirectionType_IsValid(int value);
const _emDirectionType _emDirectionType_MIN = DirectionType_SkillSame;
const _emDirectionType _emDirectionType_MAX = DirectionType_SkillSource;
const int _emDirectionType_ARRAYSIZE = _emDirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emDirectionType_descriptor();
inline const ::std::string& _emDirectionType_Name(_emDirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emDirectionType_descriptor(), value);
}
inline bool _emDirectionType_Parse(
    const ::std::string& name, _emDirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emDirectionType>(
    _emDirectionType_descriptor(), name, value);
}
enum _emEffectAddMoveType {
  EffectAddMoveType_UseDistance = 1,
  EffectAddMoveType_UseRelease = 2
};
bool _emEffectAddMoveType_IsValid(int value);
const _emEffectAddMoveType _emEffectAddMoveType_MIN = EffectAddMoveType_UseDistance;
const _emEffectAddMoveType _emEffectAddMoveType_MAX = EffectAddMoveType_UseRelease;
const int _emEffectAddMoveType_ARRAYSIZE = _emEffectAddMoveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emEffectAddMoveType_descriptor();
inline const ::std::string& _emEffectAddMoveType_Name(_emEffectAddMoveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emEffectAddMoveType_descriptor(), value);
}
inline bool _emEffectAddMoveType_Parse(
    const ::std::string& name, _emEffectAddMoveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emEffectAddMoveType>(
    _emEffectAddMoveType_descriptor(), name, value);
}
enum _emEffectTargetType {
  EffectTargetType_Self = 1,
  EffectTargetType_Other = 2
};
bool _emEffectTargetType_IsValid(int value);
const _emEffectTargetType _emEffectTargetType_MIN = EffectTargetType_Self;
const _emEffectTargetType _emEffectTargetType_MAX = EffectTargetType_Other;
const int _emEffectTargetType_ARRAYSIZE = _emEffectTargetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emEffectTargetType_descriptor();
inline const ::std::string& _emEffectTargetType_Name(_emEffectTargetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emEffectTargetType_descriptor(), value);
}
inline bool _emEffectTargetType_Parse(
    const ::std::string& name, _emEffectTargetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emEffectTargetType>(
    _emEffectTargetType_descriptor(), name, value);
}
enum _emBuffDeleteTriggerEventType {
  BuffDeleteTriggerEventType_Skill = 1,
  BuffDeleteTriggerEventType_Buff = 2
};
bool _emBuffDeleteTriggerEventType_IsValid(int value);
const _emBuffDeleteTriggerEventType _emBuffDeleteTriggerEventType_MIN = BuffDeleteTriggerEventType_Skill;
const _emBuffDeleteTriggerEventType _emBuffDeleteTriggerEventType_MAX = BuffDeleteTriggerEventType_Buff;
const int _emBuffDeleteTriggerEventType_ARRAYSIZE = _emBuffDeleteTriggerEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBuffDeleteTriggerEventType_descriptor();
inline const ::std::string& _emBuffDeleteTriggerEventType_Name(_emBuffDeleteTriggerEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBuffDeleteTriggerEventType_descriptor(), value);
}
inline bool _emBuffDeleteTriggerEventType_Parse(
    const ::std::string& name, _emBuffDeleteTriggerEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBuffDeleteTriggerEventType>(
    _emBuffDeleteTriggerEventType_descriptor(), name, value);
}
enum _emTrapAngleType {
  TrapAngleType_OneDir = 1,
  TrapAngleType_Equal = 2,
  TrapAngleType_Rand = 3,
  TrapAngleType_Static = 4,
  TrapAngleType_RandNoRepeat = 5
};
bool _emTrapAngleType_IsValid(int value);
const _emTrapAngleType _emTrapAngleType_MIN = TrapAngleType_OneDir;
const _emTrapAngleType _emTrapAngleType_MAX = TrapAngleType_RandNoRepeat;
const int _emTrapAngleType_ARRAYSIZE = _emTrapAngleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTrapAngleType_descriptor();
inline const ::std::string& _emTrapAngleType_Name(_emTrapAngleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTrapAngleType_descriptor(), value);
}
inline bool _emTrapAngleType_Parse(
    const ::std::string& name, _emTrapAngleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTrapAngleType>(
    _emTrapAngleType_descriptor(), name, value);
}
enum _emTrapMoveType {
  TrapMoveType_None = 1,
  TrapMoveType_Straight = 2,
  TrapMoveType_Parabola = 3,
  TrapMoveType_Track = 4,
  TrapMoveType_Boomerang = 5,
  TrapMoveType_SpiralClockWise = 6,
  TrapMoveType_SpiralCounterClockWise = 7
};
bool _emTrapMoveType_IsValid(int value);
const _emTrapMoveType _emTrapMoveType_MIN = TrapMoveType_None;
const _emTrapMoveType _emTrapMoveType_MAX = TrapMoveType_SpiralCounterClockWise;
const int _emTrapMoveType_ARRAYSIZE = _emTrapMoveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTrapMoveType_descriptor();
inline const ::std::string& _emTrapMoveType_Name(_emTrapMoveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTrapMoveType_descriptor(), value);
}
inline bool _emTrapMoveType_Parse(
    const ::std::string& name, _emTrapMoveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTrapMoveType>(
    _emTrapMoveType_descriptor(), name, value);
}
enum _emTrapStopType {
  TrapStopType_Pen = 1,
  TrapStopType_Through = 2
};
bool _emTrapStopType_IsValid(int value);
const _emTrapStopType _emTrapStopType_MIN = TrapStopType_Pen;
const _emTrapStopType _emTrapStopType_MAX = TrapStopType_Through;
const int _emTrapStopType_ARRAYSIZE = _emTrapStopType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTrapStopType_descriptor();
inline const ::std::string& _emTrapStopType_Name(_emTrapStopType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTrapStopType_descriptor(), value);
}
inline bool _emTrapStopType_Parse(
    const ::std::string& name, _emTrapStopType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTrapStopType>(
    _emTrapStopType_descriptor(), name, value);
}
enum _emTrapSpareParamType {
  TrapSpareParamType_FirstAddBuff = 1,
  TrapSpareParamType_FindTarDistance = 2
};
bool _emTrapSpareParamType_IsValid(int value);
const _emTrapSpareParamType _emTrapSpareParamType_MIN = TrapSpareParamType_FirstAddBuff;
const _emTrapSpareParamType _emTrapSpareParamType_MAX = TrapSpareParamType_FindTarDistance;
const int _emTrapSpareParamType_ARRAYSIZE = _emTrapSpareParamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTrapSpareParamType_descriptor();
inline const ::std::string& _emTrapSpareParamType_Name(_emTrapSpareParamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTrapSpareParamType_descriptor(), value);
}
inline bool _emTrapSpareParamType_Parse(
    const ::std::string& name, _emTrapSpareParamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTrapSpareParamType>(
    _emTrapSpareParamType_descriptor(), name, value);
}
enum _emPKType {
  PKType_Peace = 1,
  PKType_Evil = 2,
  PKType_Team = 3,
  PKType_Faction = 4,
  PKType_Alliance = 5,
  PKType_Corps = 6,
  PKType_All = 7,
  PKType_Camp = 8
};
bool _emPKType_IsValid(int value);
const _emPKType _emPKType_MIN = PKType_Peace;
const _emPKType _emPKType_MAX = PKType_Camp;
const int _emPKType_ARRAYSIZE = _emPKType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPKType_descriptor();
inline const ::std::string& _emPKType_Name(_emPKType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPKType_descriptor(), value);
}
inline bool _emPKType_Parse(
    const ::std::string& name, _emPKType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPKType>(
    _emPKType_descriptor(), name, value);
}
enum _emModifyType {
  ModifyType_Add = 1,
  ModifyType_Del = 2,
  ModifyType_Update = 3
};
bool _emModifyType_IsValid(int value);
const _emModifyType _emModifyType_MIN = ModifyType_Add;
const _emModifyType _emModifyType_MAX = ModifyType_Update;
const int _emModifyType_ARRAYSIZE = _emModifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emModifyType_descriptor();
inline const ::std::string& _emModifyType_Name(_emModifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emModifyType_descriptor(), value);
}
inline bool _emModifyType_Parse(
    const ::std::string& name, _emModifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emModifyType>(
    _emModifyType_descriptor(), name, value);
}
enum _emMailType {
  MailType_Normal = 0,
  MailType_GM = 1,
  MailType_SysRemind = 2,
  MailType_SysAward = 3,
  MailType_SaleMoneyBuy = 4,
  MailType_SaleMoneySale = 5,
  MailType_SaleMoneyBuyRet = 6,
  MailType_SaleMoneySaleRet = 7,
  MailType_AuctionLockRet = 8,
  MailType_AuctionSaleTimeOut = 9,
  MailType_AuctionSaleGet = 10,
  MailType_AuctionBuyGet = 11,
  MailType_DropItem = 12,
  MailType_Promote = 13,
  MailType_FullBag = 14,
  MailType_Gift = 15,
  MailType_FactionBoss = 16,
  MailType_DartCarPrize = 17,
  MailType_ClimbTower = 18,
  MailType_WorldBoss = 19,
  MailType_FactionAlloct = 20,
  MailType_CashReward = 21,
  MailType_LeaderAway = 22,
  MailType_SinglePvpFirstPrize = 23,
  MailType_SinglePvpDayPrize = 24,
  MailType_SinglePvpWeekPrize = 25,
  MailType_ManorProduct = 26,
  MailType_ManorTitle_Get = 27,
  MailType_ManorResult = 28,
  MailType_ManorResultPrize = 29,
  MailType_ManorScorePrize = 30,
  MailType_FactionRemove = 31,
  MailType_FactionImpeachSuc = 32,
  MailType_FactionImpeachFai1 = 33,
  MailType_FactionImpeachFai2 = 34,
  MailType_TopListFigtht = 35,
  MailType_TopListLevel = 36,
  MailType_TopListWealth = 37,
  MailType_TopListSinglePvp = 38,
  MailType_TopListClimbTower = 39,
  MailType_TopListCopymapGW = 40,
  MailType_TopListFaction = 41
};
bool _emMailType_IsValid(int value);
const _emMailType _emMailType_MIN = MailType_Normal;
const _emMailType _emMailType_MAX = MailType_TopListFaction;
const int _emMailType_ARRAYSIZE = _emMailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emMailType_descriptor();
inline const ::std::string& _emMailType_Name(_emMailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emMailType_descriptor(), value);
}
inline bool _emMailType_Parse(
    const ::std::string& name, _emMailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emMailType>(
    _emMailType_descriptor(), name, value);
}
enum _emItemFlag {
  ItemFlag_Binded = 0,
  ItemFlag_Sequence = 1,
  ItemFlag_IsInheritEnhance = 2,
  ItemFlag_IsInheritForge = 3,
  ItemFlag_IsInWulue = 4
};
bool _emItemFlag_IsValid(int value);
const _emItemFlag _emItemFlag_MIN = ItemFlag_Binded;
const _emItemFlag _emItemFlag_MAX = ItemFlag_IsInWulue;
const int _emItemFlag_ARRAYSIZE = _emItemFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emItemFlag_descriptor();
inline const ::std::string& _emItemFlag_Name(_emItemFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emItemFlag_descriptor(), value);
}
inline bool _emItemFlag_Parse(
    const ::std::string& name, _emItemFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emItemFlag>(
    _emItemFlag_descriptor(), name, value);
}
enum _emItemMark {
  ItemMark_NoSell = 0,
  ItemMark_BuyBackConfirm = 1,
  ItemMark_UseBatch = 2,
  ItemMark_Show = 3,
  ItemMark_Shortcut = 4,
  ItemMark_DropBroadcast = 5,
  ItemMark_SaveLog = 6,
  ItemMark_GetAutoUse = 7,
  ItemMark_GetTimeLimit = 8,
  ItemMark_UseTimeLimit = 9,
  ItemMark_OfflineNoTime = 10,
  ItemMark_GetBind = 11
};
bool _emItemMark_IsValid(int value);
const _emItemMark _emItemMark_MIN = ItemMark_NoSell;
const _emItemMark _emItemMark_MAX = ItemMark_GetBind;
const int _emItemMark_ARRAYSIZE = _emItemMark_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emItemMark_descriptor();
inline const ::std::string& _emItemMark_Name(_emItemMark value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emItemMark_descriptor(), value);
}
inline bool _emItemMark_Parse(
    const ::std::string& name, _emItemMark* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emItemMark>(
    _emItemMark_descriptor(), name, value);
}
enum _emItemQualityType {
  ItemQualityType_White = 0,
  ItemQualityType_Green = 1,
  ItemQualityType_Blue = 2,
  ItemQualityType_Purple = 3,
  ItemQualityType_Orange = 4,
  ItemQualityType_Red = 5
};
bool _emItemQualityType_IsValid(int value);
const _emItemQualityType _emItemQualityType_MIN = ItemQualityType_White;
const _emItemQualityType _emItemQualityType_MAX = ItemQualityType_Red;
const int _emItemQualityType_ARRAYSIZE = _emItemQualityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emItemQualityType_descriptor();
inline const ::std::string& _emItemQualityType_Name(_emItemQualityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emItemQualityType_descriptor(), value);
}
inline bool _emItemQualityType_Parse(
    const ::std::string& name, _emItemQualityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emItemQualityType>(
    _emItemQualityType_descriptor(), name, value);
}
enum _emItemType {
  ItemType_Resource = 0,
  ItemType_Equip = 1,
  ItemType_Expend = 2,
  ItemType_Pack = 3,
  ItemType_Panel = 4,
  ItemType_Normal = 5,
  ItemType_Quest = 6,
  ItemType_Material = 7,
  ItemType_BingFu = 8,
  ItemType_Fasion = 9,
  ItemType_Mount = 10,
  ItemType_BingFa = 11,
  ItemType_Treasure = 12
};
bool _emItemType_IsValid(int value);
const _emItemType _emItemType_MIN = ItemType_Resource;
const _emItemType _emItemType_MAX = ItemType_Treasure;
const int _emItemType_ARRAYSIZE = _emItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emItemType_descriptor();
inline const ::std::string& _emItemType_Name(_emItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emItemType_descriptor(), value);
}
inline bool _emItemType_Parse(
    const ::std::string& name, _emItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emItemType>(
    _emItemType_descriptor(), name, value);
}
enum _emTreasureType {
  TreasureType_Junior = 1,
  TreasureType_Middle = 2,
  TreasureType_Advance = 3,
  TreasureType_Gold = 4,
  TreasureType_SuperA = 5,
  TreasureType_SuperB = 6,
  TreasureType_SuperC = 7
};
bool _emTreasureType_IsValid(int value);
const _emTreasureType _emTreasureType_MIN = TreasureType_Junior;
const _emTreasureType _emTreasureType_MAX = TreasureType_SuperC;
const int _emTreasureType_ARRAYSIZE = _emTreasureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTreasureType_descriptor();
inline const ::std::string& _emTreasureType_Name(_emTreasureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTreasureType_descriptor(), value);
}
inline bool _emTreasureType_Parse(
    const ::std::string& name, _emTreasureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTreasureType>(
    _emTreasureType_descriptor(), name, value);
}
enum _emBingfuType {
  BingfuType_Yuan = 1,
  BingfuType_Fang = 2,
  BingfuType_Jiao = 3,
  BingfuType_Zhui = 4,
  BingfuType_Exp = 5
};
bool _emBingfuType_IsValid(int value);
const _emBingfuType _emBingfuType_MIN = BingfuType_Yuan;
const _emBingfuType _emBingfuType_MAX = BingfuType_Exp;
const int _emBingfuType_ARRAYSIZE = _emBingfuType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBingfuType_descriptor();
inline const ::std::string& _emBingfuType_Name(_emBingfuType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBingfuType_descriptor(), value);
}
inline bool _emBingfuType_Parse(
    const ::std::string& name, _emBingfuType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBingfuType>(
    _emBingfuType_descriptor(), name, value);
}
enum _emMaterialType {
  Material_EnhanceWeapon = 1,
  Material_EnhanceArmor = 2,
  Material_EnhanceOrnament = 3,
  Material_ForgeWeapon = 4,
  Material_ForgeArmor = 5,
  Material_ForgeOrnament = 6,
  Material_Compound = 7
};
bool _emMaterialType_IsValid(int value);
const _emMaterialType _emMaterialType_MIN = Material_EnhanceWeapon;
const _emMaterialType _emMaterialType_MAX = Material_Compound;
const int _emMaterialType_ARRAYSIZE = _emMaterialType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emMaterialType_descriptor();
inline const ::std::string& _emMaterialType_Name(_emMaterialType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emMaterialType_descriptor(), value);
}
inline bool _emMaterialType_Parse(
    const ::std::string& name, _emMaterialType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emMaterialType>(
    _emMaterialType_descriptor(), name, value);
}
enum _emEquipType {
  EquipType_Weapon = 1,
  EquipType_Necklace = 2,
  EquipType_Bracelet = 3,
  EquipType_Ring = 4,
  EquipType_Mount = 5,
  EquipType_Head = 6,
  EquipType_Shoulder = 7,
  EquipType_Blouse = 8,
  EquipType_Pants = 9,
  EquipType_Shoe = 10
};
bool _emEquipType_IsValid(int value);
const _emEquipType _emEquipType_MIN = EquipType_Weapon;
const _emEquipType _emEquipType_MAX = EquipType_Shoe;
const int _emEquipType_ARRAYSIZE = _emEquipType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emEquipType_descriptor();
inline const ::std::string& _emEquipType_Name(_emEquipType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emEquipType_descriptor(), value);
}
inline bool _emEquipType_Parse(
    const ::std::string& name, _emEquipType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emEquipType>(
    _emEquipType_descriptor(), name, value);
}
enum _emEquipSubType {
  EquipSubType_Weapon = 1,
  EquipSubType_Armor = 2,
  EquipSubType_Ornament = 3
};
bool _emEquipSubType_IsValid(int value);
const _emEquipSubType _emEquipSubType_MIN = EquipSubType_Weapon;
const _emEquipSubType _emEquipSubType_MAX = EquipSubType_Ornament;
const int _emEquipSubType_ARRAYSIZE = _emEquipSubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emEquipSubType_descriptor();
inline const ::std::string& _emEquipSubType_Name(_emEquipSubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emEquipSubType_descriptor(), value);
}
inline bool _emEquipSubType_Parse(
    const ::std::string& name, _emEquipSubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emEquipSubType>(
    _emEquipSubType_descriptor(), name, value);
}
enum _emItemUseType {
  ItemUseType_Expend = 1,
  ItemUseType_Buff = 2,
  ItemUseType_Transfer = 3,
  ItemUseType_Packet = 4,
  ItemUseType_Treasure = 5,
  ItemUseType_Fashion = 6
};
bool _emItemUseType_IsValid(int value);
const _emItemUseType _emItemUseType_MIN = ItemUseType_Expend;
const _emItemUseType _emItemUseType_MAX = ItemUseType_Fashion;
const int _emItemUseType_ARRAYSIZE = _emItemUseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emItemUseType_descriptor();
inline const ::std::string& _emItemUseType_Name(_emItemUseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emItemUseType_descriptor(), value);
}
inline bool _emItemUseType_Parse(
    const ::std::string& name, _emItemUseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emItemUseType>(
    _emItemUseType_descriptor(), name, value);
}
enum _emItemPackType {
  ItemPacket_Normal = 1,
  ItemPacket_Rate = 2,
  ItemPacket_Mutually = 3,
  ItemPacket_CountGet = 4
};
bool _emItemPackType_IsValid(int value);
const _emItemPackType _emItemPackType_MIN = ItemPacket_Normal;
const _emItemPackType _emItemPackType_MAX = ItemPacket_CountGet;
const int _emItemPackType_ARRAYSIZE = _emItemPackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emItemPackType_descriptor();
inline const ::std::string& _emItemPackType_Name(_emItemPackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emItemPackType_descriptor(), value);
}
inline bool _emItemPackType_Parse(
    const ::std::string& name, _emItemPackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emItemPackType>(
    _emItemPackType_descriptor(), name, value);
}
enum _emCopymapType {
  CopymapType_Normal = 0,
  CopymapType_NormalNoDisplay = 1,
  CopymapType_DartRob = 2,
  CopymapType_FactionBoss = 3,
  CopymapType_ClimbTower = 4,
  CopymapType_GwTrain = 5,
  CopymapType_PvpBanner = 6,
  CopymapType_ManorLobby = 7,
  CopymapType_ManorBattleField = 8,
  CopymapType_SinglePvp = 9,
  CopymapType_FactionHome = 10,
  CopymapType_TrapArrest = 100,
  CopymapType_CaptureArrest = 101,
  CopymapType_LimitTimeArrest = 102,
  CopymapType_DialogArrest = 103,
  CopymapType_GuardArrest = 104,
  CopymapType_WenquTreasure = 200,
  CopymapType_LiangyiTreasure = 201,
  CopymapType_SixiangTreasure = 202,
  CopymapType_FeibiaoReward = 300,
  CopymapType_PaihuoReward = 301,
  CopymapType_AnshaReward = 302,
  CopymapType_ZhenshenReward = 303,
  CopymapType_Shoulie = 400
};
bool _emCopymapType_IsValid(int value);
const _emCopymapType _emCopymapType_MIN = CopymapType_Normal;
const _emCopymapType _emCopymapType_MAX = CopymapType_Shoulie;
const int _emCopymapType_ARRAYSIZE = _emCopymapType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCopymapType_descriptor();
inline const ::std::string& _emCopymapType_Name(_emCopymapType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCopymapType_descriptor(), value);
}
inline bool _emCopymapType_Parse(
    const ::std::string& name, _emCopymapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCopymapType>(
    _emCopymapType_descriptor(), name, value);
}
enum _emCopymapMainType {
  CopymapMainType_Normalt = 0,
  CopymapMainType_Arrest = 1,
  CopymapMainType_Reward = 2,
  CopymapMainType_Treasure = 3,
  CopymapMainType_Shoulie = 4
};
bool _emCopymapMainType_IsValid(int value);
const _emCopymapMainType _emCopymapMainType_MIN = CopymapMainType_Normalt;
const _emCopymapMainType _emCopymapMainType_MAX = CopymapMainType_Shoulie;
const int _emCopymapMainType_ARRAYSIZE = _emCopymapMainType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCopymapMainType_descriptor();
inline const ::std::string& _emCopymapMainType_Name(_emCopymapMainType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCopymapMainType_descriptor(), value);
}
inline bool _emCopymapMainType_Parse(
    const ::std::string& name, _emCopymapMainType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCopymapMainType>(
    _emCopymapMainType_descriptor(), name, value);
}
enum _emCopymapResetType {
  CopymapResetType_No = 0,
  CopymapResetType_Day = 1,
  CopymapResetType_Week = 2
};
bool _emCopymapResetType_IsValid(int value);
const _emCopymapResetType _emCopymapResetType_MIN = CopymapResetType_No;
const _emCopymapResetType _emCopymapResetType_MAX = CopymapResetType_Week;
const int _emCopymapResetType_ARRAYSIZE = _emCopymapResetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCopymapResetType_descriptor();
inline const ::std::string& _emCopymapResetType_Name(_emCopymapResetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCopymapResetType_descriptor(), value);
}
inline bool _emCopymapResetType_Parse(
    const ::std::string& name, _emCopymapResetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCopymapResetType>(
    _emCopymapResetType_descriptor(), name, value);
}
enum _emCopymapEnterType {
  CopymapEnterType_Team = 0,
  CopymapEnterType_Single = 1
};
bool _emCopymapEnterType_IsValid(int value);
const _emCopymapEnterType _emCopymapEnterType_MIN = CopymapEnterType_Team;
const _emCopymapEnterType _emCopymapEnterType_MAX = CopymapEnterType_Single;
const int _emCopymapEnterType_ARRAYSIZE = _emCopymapEnterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCopymapEnterType_descriptor();
inline const ::std::string& _emCopymapEnterType_Name(_emCopymapEnterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCopymapEnterType_descriptor(), value);
}
inline bool _emCopymapEnterType_Parse(
    const ::std::string& name, _emCopymapEnterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCopymapEnterType>(
    _emCopymapEnterType_descriptor(), name, value);
}
enum _emCopymapEnterCopyType {
  CopymapEnterCopyType_Force = 0,
  CopymapEnterCopyType_LeaderConfirm = 1,
  CopymapEnterCopyType_AllConfirm = 2
};
bool _emCopymapEnterCopyType_IsValid(int value);
const _emCopymapEnterCopyType _emCopymapEnterCopyType_MIN = CopymapEnterCopyType_Force;
const _emCopymapEnterCopyType _emCopymapEnterCopyType_MAX = CopymapEnterCopyType_AllConfirm;
const int _emCopymapEnterCopyType_ARRAYSIZE = _emCopymapEnterCopyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCopymapEnterCopyType_descriptor();
inline const ::std::string& _emCopymapEnterCopyType_Name(_emCopymapEnterCopyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCopymapEnterCopyType_descriptor(), value);
}
inline bool _emCopymapEnterCopyType_Parse(
    const ::std::string& name, _emCopymapEnterCopyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCopymapEnterCopyType>(
    _emCopymapEnterCopyType_descriptor(), name, value);
}
enum _emCopymapTeamRemainConfirmType {
  CopymapTeamRemainConfirmType_None = 0,
  CopymapTeamRemainConfirmType_Copymap = 1,
  CopymapTeamRemainConfirmType_PVP = 2
};
bool _emCopymapTeamRemainConfirmType_IsValid(int value);
const _emCopymapTeamRemainConfirmType _emCopymapTeamRemainConfirmType_MIN = CopymapTeamRemainConfirmType_None;
const _emCopymapTeamRemainConfirmType _emCopymapTeamRemainConfirmType_MAX = CopymapTeamRemainConfirmType_PVP;
const int _emCopymapTeamRemainConfirmType_ARRAYSIZE = _emCopymapTeamRemainConfirmType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCopymapTeamRemainConfirmType_descriptor();
inline const ::std::string& _emCopymapTeamRemainConfirmType_Name(_emCopymapTeamRemainConfirmType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCopymapTeamRemainConfirmType_descriptor(), value);
}
inline bool _emCopymapTeamRemainConfirmType_Parse(
    const ::std::string& name, _emCopymapTeamRemainConfirmType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCopymapTeamRemainConfirmType>(
    _emCopymapTeamRemainConfirmType_descriptor(), name, value);
}
enum _emCopymapCopymapTimeType {
  CopymapCopymapTimeType_None = 0,
  CopymapCopymapTimeType_Enter = 1,
  CopymapCopymapTimeType_OneBoss = 2
};
bool _emCopymapCopymapTimeType_IsValid(int value);
const _emCopymapCopymapTimeType _emCopymapCopymapTimeType_MIN = CopymapCopymapTimeType_None;
const _emCopymapCopymapTimeType _emCopymapCopymapTimeType_MAX = CopymapCopymapTimeType_OneBoss;
const int _emCopymapCopymapTimeType_ARRAYSIZE = _emCopymapCopymapTimeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCopymapCopymapTimeType_descriptor();
inline const ::std::string& _emCopymapCopymapTimeType_Name(_emCopymapCopymapTimeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCopymapCopymapTimeType_descriptor(), value);
}
inline bool _emCopymapCopymapTimeType_Parse(
    const ::std::string& name, _emCopymapCopymapTimeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCopymapCopymapTimeType>(
    _emCopymapCopymapTimeType_descriptor(), name, value);
}
enum _emCopymapEnterReason {
  CopymapEnterReason_Normal = 1,
  CopymapEnterReason_Assist = 2
};
bool _emCopymapEnterReason_IsValid(int value);
const _emCopymapEnterReason _emCopymapEnterReason_MIN = CopymapEnterReason_Normal;
const _emCopymapEnterReason _emCopymapEnterReason_MAX = CopymapEnterReason_Assist;
const int _emCopymapEnterReason_ARRAYSIZE = _emCopymapEnterReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCopymapEnterReason_descriptor();
inline const ::std::string& _emCopymapEnterReason_Name(_emCopymapEnterReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCopymapEnterReason_descriptor(), value);
}
inline bool _emCopymapEnterReason_Parse(
    const ::std::string& name, _emCopymapEnterReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCopymapEnterReason>(
    _emCopymapEnterReason_descriptor(), name, value);
}
enum _emCopymapState {
  CopymapState_Ing = 0,
  CopymapState_Done = 1,
  CopymapState_Closing = 2
};
bool _emCopymapState_IsValid(int value);
const _emCopymapState _emCopymapState_MIN = CopymapState_Ing;
const _emCopymapState _emCopymapState_MAX = CopymapState_Closing;
const int _emCopymapState_ARRAYSIZE = _emCopymapState_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCopymapState_descriptor();
inline const ::std::string& _emCopymapState_Name(_emCopymapState value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCopymapState_descriptor(), value);
}
inline bool _emCopymapState_Parse(
    const ::std::string& name, _emCopymapState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCopymapState>(
    _emCopymapState_descriptor(), name, value);
}
enum _emCopymapDifficulty {
  CopymapDifficulty_Easy = 1,
  CopymapDifficulty_Middle = 2,
  CopymapDifficulty_Hard = 3
};
bool _emCopymapDifficulty_IsValid(int value);
const _emCopymapDifficulty _emCopymapDifficulty_MIN = CopymapDifficulty_Easy;
const _emCopymapDifficulty _emCopymapDifficulty_MAX = CopymapDifficulty_Hard;
const int _emCopymapDifficulty_ARRAYSIZE = _emCopymapDifficulty_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCopymapDifficulty_descriptor();
inline const ::std::string& _emCopymapDifficulty_Name(_emCopymapDifficulty value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCopymapDifficulty_descriptor(), value);
}
inline bool _emCopymapDifficulty_Parse(
    const ::std::string& name, _emCopymapDifficulty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCopymapDifficulty>(
    _emCopymapDifficulty_descriptor(), name, value);
}
enum _emCopymapPrefectType {
  CopymapPrefectType_Time = 1,
  CopymapPrefectType_DeadNum = 2
};
bool _emCopymapPrefectType_IsValid(int value);
const _emCopymapPrefectType _emCopymapPrefectType_MIN = CopymapPrefectType_Time;
const _emCopymapPrefectType _emCopymapPrefectType_MAX = CopymapPrefectType_DeadNum;
const int _emCopymapPrefectType_ARRAYSIZE = _emCopymapPrefectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCopymapPrefectType_descriptor();
inline const ::std::string& _emCopymapPrefectType_Name(_emCopymapPrefectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCopymapPrefectType_descriptor(), value);
}
inline bool _emCopymapPrefectType_Parse(
    const ::std::string& name, _emCopymapPrefectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCopymapPrefectType>(
    _emCopymapPrefectType_descriptor(), name, value);
}
enum _emTradeEndReason {
  TradeEndReason_Done = 0,
  TradeEndReason_Cancel = 1,
  TradeEndReason_Logout = 2,
  TradeEndReason_Battle = 3,
  TradeEndReason_ServerErr = 4,
  TradeEndReason_CheckErr = 5,
  TradeEndReason_DelErr = 6,
  TradeEndReason_GetSliverLimit = 7,
  TradeEndReason_GiveSliverLimit = 8,
  TradeEndReason_BagLimit = 9,
  TradeEndReason_MaxSliverLimit = 10
};
bool _emTradeEndReason_IsValid(int value);
const _emTradeEndReason _emTradeEndReason_MIN = TradeEndReason_Done;
const _emTradeEndReason _emTradeEndReason_MAX = TradeEndReason_MaxSliverLimit;
const int _emTradeEndReason_ARRAYSIZE = _emTradeEndReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTradeEndReason_descriptor();
inline const ::std::string& _emTradeEndReason_Name(_emTradeEndReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTradeEndReason_descriptor(), value);
}
inline bool _emTradeEndReason_Parse(
    const ::std::string& name, _emTradeEndReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTradeEndReason>(
    _emTradeEndReason_descriptor(), name, value);
}
enum _emSaleMoneyType {
  SaleMoneyType_Sale = 1,
  SaleMoneyType_Buy = 2
};
bool _emSaleMoneyType_IsValid(int value);
const _emSaleMoneyType _emSaleMoneyType_MIN = SaleMoneyType_Sale;
const _emSaleMoneyType _emSaleMoneyType_MAX = SaleMoneyType_Buy;
const int _emSaleMoneyType_ARRAYSIZE = _emSaleMoneyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSaleMoneyType_descriptor();
inline const ::std::string& _emSaleMoneyType_Name(_emSaleMoneyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSaleMoneyType_descriptor(), value);
}
inline bool _emSaleMoneyType_Parse(
    const ::std::string& name, _emSaleMoneyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSaleMoneyType>(
    _emSaleMoneyType_descriptor(), name, value);
}
enum _emPlayerShapeType {
  PlayerShape_Weapon = 0,
  PlayerShape_Head = 1,
  PlayerShape_Shoulder = 2,
  PlayerShape_Blouse = 3,
  PlayerShape_Mount = 4,
  PlayerShape_WeaponForgeLevel = 5,
  PlayerShape_EquipForgeLevel = 6
};
bool _emPlayerShapeType_IsValid(int value);
const _emPlayerShapeType _emPlayerShapeType_MIN = PlayerShape_Weapon;
const _emPlayerShapeType _emPlayerShapeType_MAX = PlayerShape_EquipForgeLevel;
const int _emPlayerShapeType_ARRAYSIZE = _emPlayerShapeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPlayerShapeType_descriptor();
inline const ::std::string& _emPlayerShapeType_Name(_emPlayerShapeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPlayerShapeType_descriptor(), value);
}
inline bool _emPlayerShapeType_Parse(
    const ::std::string& name, _emPlayerShapeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPlayerShapeType>(
    _emPlayerShapeType_descriptor(), name, value);
}
enum _emSaleMoneyLogType {
  SaleMoneyLogType_Sale = 1,
  SaleMoneyLogType_Buy = 2
};
bool _emSaleMoneyLogType_IsValid(int value);
const _emSaleMoneyLogType _emSaleMoneyLogType_MIN = SaleMoneyLogType_Sale;
const _emSaleMoneyLogType _emSaleMoneyLogType_MAX = SaleMoneyLogType_Buy;
const int _emSaleMoneyLogType_ARRAYSIZE = _emSaleMoneyLogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSaleMoneyLogType_descriptor();
inline const ::std::string& _emSaleMoneyLogType_Name(_emSaleMoneyLogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSaleMoneyLogType_descriptor(), value);
}
inline bool _emSaleMoneyLogType_Parse(
    const ::std::string& name, _emSaleMoneyLogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSaleMoneyLogType>(
    _emSaleMoneyLogType_descriptor(), name, value);
}
enum _emTopListType {
  TopListType_Figtht = 0,
  TopListType_Level = 1,
  TopListType_Wealth = 2,
  TopListType_SinglePvp = 3,
  TopListType_ClimbTower = 4,
  TopListType_CopymapGW = 5,
  TopListType_Faction = 6
};
bool _emTopListType_IsValid(int value);
const _emTopListType _emTopListType_MIN = TopListType_Figtht;
const _emTopListType _emTopListType_MAX = TopListType_Faction;
const int _emTopListType_ARRAYSIZE = _emTopListType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTopListType_descriptor();
inline const ::std::string& _emTopListType_Name(_emTopListType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTopListType_descriptor(), value);
}
inline bool _emTopListType_Parse(
    const ::std::string& name, _emTopListType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTopListType>(
    _emTopListType_descriptor(), name, value);
}
enum _emTopListTimeResetType {
  TopListTimeResetType_None = 0,
  TopListTimeResetType_Day = 1,
  TopListTimeResetType_Week = 2,
  TopListTimeResetType_Month = 3
};
bool _emTopListTimeResetType_IsValid(int value);
const _emTopListTimeResetType _emTopListTimeResetType_MIN = TopListTimeResetType_None;
const _emTopListTimeResetType _emTopListTimeResetType_MAX = TopListTimeResetType_Month;
const int _emTopListTimeResetType_ARRAYSIZE = _emTopListTimeResetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTopListTimeResetType_descriptor();
inline const ::std::string& _emTopListTimeResetType_Name(_emTopListTimeResetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTopListTimeResetType_descriptor(), value);
}
inline bool _emTopListTimeResetType_Parse(
    const ::std::string& name, _emTopListTimeResetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTopListTimeResetType>(
    _emTopListTimeResetType_descriptor(), name, value);
}
enum _emAuctionLogType {
  AuctionType_Sale = 1,
  AuctionType_Buy = 2
};
bool _emAuctionLogType_IsValid(int value);
const _emAuctionLogType _emAuctionLogType_MIN = AuctionType_Sale;
const _emAuctionLogType _emAuctionLogType_MAX = AuctionType_Buy;
const int _emAuctionLogType_ARRAYSIZE = _emAuctionLogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emAuctionLogType_descriptor();
inline const ::std::string& _emAuctionLogType_Name(_emAuctionLogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emAuctionLogType_descriptor(), value);
}
inline bool _emAuctionLogType_Parse(
    const ::std::string& name, _emAuctionLogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emAuctionLogType>(
    _emAuctionLogType_descriptor(), name, value);
}
enum _emFriendType {
  FriendType_Friend = 0,
  FriendType_Enemy = 1,
  FriendType_TmpFriend = 2,
  FriendType_Blacklist = 3
};
bool _emFriendType_IsValid(int value);
const _emFriendType _emFriendType_MIN = FriendType_Friend;
const _emFriendType _emFriendType_MAX = FriendType_Blacklist;
const int _emFriendType_ARRAYSIZE = _emFriendType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emFriendType_descriptor();
inline const ::std::string& _emFriendType_Name(_emFriendType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emFriendType_descriptor(), value);
}
inline bool _emFriendType_Parse(
    const ::std::string& name, _emFriendType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emFriendType>(
    _emFriendType_descriptor(), name, value);
}
enum _emAuctionSortType {
  AuctionSortType_Level = 0,
  AuctionSortType_UnitMoney = 1,
  AuctionSortType_AllMoney = 2
};
bool _emAuctionSortType_IsValid(int value);
const _emAuctionSortType _emAuctionSortType_MIN = AuctionSortType_Level;
const _emAuctionSortType _emAuctionSortType_MAX = AuctionSortType_AllMoney;
const int _emAuctionSortType_ARRAYSIZE = _emAuctionSortType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emAuctionSortType_descriptor();
inline const ::std::string& _emAuctionSortType_Name(_emAuctionSortType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emAuctionSortType_descriptor(), value);
}
inline bool _emAuctionSortType_Parse(
    const ::std::string& name, _emAuctionSortType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emAuctionSortType>(
    _emAuctionSortType_descriptor(), name, value);
}
enum _emWulueSchemeType {
  WulueSchemeType_First = 1,
  WulueSchemeType_Second = 2,
  WulueSchemeType_Third = 3
};
bool _emWulueSchemeType_IsValid(int value);
const _emWulueSchemeType _emWulueSchemeType_MIN = WulueSchemeType_First;
const _emWulueSchemeType _emWulueSchemeType_MAX = WulueSchemeType_Third;
const int _emWulueSchemeType_ARRAYSIZE = _emWulueSchemeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emWulueSchemeType_descriptor();
inline const ::std::string& _emWulueSchemeType_Name(_emWulueSchemeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emWulueSchemeType_descriptor(), value);
}
inline bool _emWulueSchemeType_Parse(
    const ::std::string& name, _emWulueSchemeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emWulueSchemeType>(
    _emWulueSchemeType_descriptor(), name, value);
}
enum _emWulueType {
  WulueType_Feng = 1,
  WulueType_Lin = 2,
  WulueType_Huo = 3,
  WulueType_Shan = 4,
  WulueType_Ling = 5,
  WulueType_Bing = 6,
  WulueType_Dou = 7,
  WulueType_Zhe = 8
};
bool _emWulueType_IsValid(int value);
const _emWulueType _emWulueType_MIN = WulueType_Feng;
const _emWulueType _emWulueType_MAX = WulueType_Zhe;
const int _emWulueType_ARRAYSIZE = _emWulueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emWulueType_descriptor();
inline const ::std::string& _emWulueType_Name(_emWulueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emWulueType_descriptor(), value);
}
inline bool _emWulueType_Parse(
    const ::std::string& name, _emWulueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emWulueType>(
    _emWulueType_descriptor(), name, value);
}
enum _emReliveType {
  ReliveType_Origin = 0,
  ReliveType_RelivePoint = 1,
  ReliveType_City = 2
};
bool _emReliveType_IsValid(int value);
const _emReliveType _emReliveType_MIN = ReliveType_Origin;
const _emReliveType _emReliveType_MAX = ReliveType_City;
const int _emReliveType_ARRAYSIZE = _emReliveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emReliveType_descriptor();
inline const ::std::string& _emReliveType_Name(_emReliveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emReliveType_descriptor(), value);
}
inline bool _emReliveType_Parse(
    const ::std::string& name, _emReliveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emReliveType>(
    _emReliveType_descriptor(), name, value);
}
enum _emWulueYaodianType {
  WulueYaodianType_Zhanlue = 1,
  WulueYaodianType_Bingfu = 2
};
bool _emWulueYaodianType_IsValid(int value);
const _emWulueYaodianType _emWulueYaodianType_MIN = WulueYaodianType_Zhanlue;
const _emWulueYaodianType _emWulueYaodianType_MAX = WulueYaodianType_Bingfu;
const int _emWulueYaodianType_ARRAYSIZE = _emWulueYaodianType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emWulueYaodianType_descriptor();
inline const ::std::string& _emWulueYaodianType_Name(_emWulueYaodianType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emWulueYaodianType_descriptor(), value);
}
inline bool _emWulueYaodianType_Parse(
    const ::std::string& name, _emWulueYaodianType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emWulueYaodianType>(
    _emWulueYaodianType_descriptor(), name, value);
}
enum _emQuestTargetType {
  QuestTargetType_KillMonster = 1,
  QuestTargetType_DepotGoods = 2,
  QuestTargetType_CollectGoods = 3,
  QuestTargetType_MonsterDropGoods = 4,
  QuestTargetType_Location = 5,
  QuestTargetType_EscortNPC = 6,
  QuestTargetType_UseItem = 7,
  QuestTargetType_UpgradeLevel = 8,
  QuestTargetType_Promotion = 9,
  QuestTargetType_Force = 10,
  QuestTargetType_Identity = 11,
  QuestTargetType_IdentityDaily = 12,
  QuestTargetType_FactionDaily = 13,
  QuestTargetType_CompleteCopymap = 14,
  QuestTargetType_SceneFly = 15,
  QuestTargetType_UpgradeLevel1 = 16,
  QuestTargetType_Enhance = 17,
  QuestTargetType_ItemForge = 18,
  QuestTargetType_ItemMake = 19,
  QuestTargetType_Qianxiu = 20,
  QuestTargetType_WulueActivated = 21,
  QuestTargetType_BingfuUpgrade = 22,
  QuestTargetType_IdentitySkillUpgrade = 23,
  QuestTargetType_Treasure = 24,
  QuestTargetType_Pvp5 = 25,
  QuestTargetType_WorldBoss = 26,
  QuestTargetType_FactionDrinkWine = 27,
  QuestTargetType_TakeASeat = 28,
  QuestTargetType_Store = 29,
  QuestTargetType_Client = 30,
  QuestTargetType_ReplyNPC = 31,
  QuestTargetType_WatchShow = 32,
  QuestTargetType_Hunt = 33,
  QuestTargetType_NewFriend = 34,
  QuestTargetType_Weapons = 35,
  QuestTargetType_Challenge = 36,
  QuestTargetType_PromotionSuccess = 37,
  QuestTargetType_HuntCount = 38,
  QuestTargetType_CopymapCount = 39,
  QuestTargetType_AddFaction = 40
};
bool _emQuestTargetType_IsValid(int value);
const _emQuestTargetType _emQuestTargetType_MIN = QuestTargetType_KillMonster;
const _emQuestTargetType _emQuestTargetType_MAX = QuestTargetType_AddFaction;
const int _emQuestTargetType_ARRAYSIZE = _emQuestTargetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emQuestTargetType_descriptor();
inline const ::std::string& _emQuestTargetType_Name(_emQuestTargetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emQuestTargetType_descriptor(), value);
}
inline bool _emQuestTargetType_Parse(
    const ::std::string& name, _emQuestTargetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emQuestTargetType>(
    _emQuestTargetType_descriptor(), name, value);
}
enum _emQuestTargetAction {
  QuestTargetAction_AddMonster = 1,
  QuestTargetAction_RemoveMonster = 2,
  QuestTargetAction_ChangeCamp = 3,
  QuestTargetAction_ActivePaoPao = 4,
  QuestTargetAction_CompleteDialog = 5,
  QuestTargetAction_ChangeScene = 6,
  QuestTargetAction_ChangeCamera = 7,
  QuestTargetAction_AddSceneArea = 8,
  QuestTargetAction_DelSceneArea = 9
};
bool _emQuestTargetAction_IsValid(int value);
const _emQuestTargetAction _emQuestTargetAction_MIN = QuestTargetAction_AddMonster;
const _emQuestTargetAction _emQuestTargetAction_MAX = QuestTargetAction_DelSceneArea;
const int _emQuestTargetAction_ARRAYSIZE = _emQuestTargetAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emQuestTargetAction_descriptor();
inline const ::std::string& _emQuestTargetAction_Name(_emQuestTargetAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emQuestTargetAction_descriptor(), value);
}
inline bool _emQuestTargetAction_Parse(
    const ::std::string& name, _emQuestTargetAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emQuestTargetAction>(
    _emQuestTargetAction_descriptor(), name, value);
}
enum _emEquipInheritMark {
  EquipInheritMark_Enhance = 1,
  EquipInheritMark_Forge = 2,
  EquipInheritMark_Special = 3
};
bool _emEquipInheritMark_IsValid(int value);
const _emEquipInheritMark _emEquipInheritMark_MIN = EquipInheritMark_Enhance;
const _emEquipInheritMark _emEquipInheritMark_MAX = EquipInheritMark_Special;
const int _emEquipInheritMark_ARRAYSIZE = _emEquipInheritMark_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emEquipInheritMark_descriptor();
inline const ::std::string& _emEquipInheritMark_Name(_emEquipInheritMark value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emEquipInheritMark_descriptor(), value);
}
inline bool _emEquipInheritMark_Parse(
    const ::std::string& name, _emEquipInheritMark* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emEquipInheritMark>(
    _emEquipInheritMark_descriptor(), name, value);
}
enum _emEquipMakeMark {
  EquipMakeMark_NoBind = 1,
  EquipMakeMark_Lucky = 2,
  EquipMakeMark_Special = 3
};
bool _emEquipMakeMark_IsValid(int value);
const _emEquipMakeMark _emEquipMakeMark_MIN = EquipMakeMark_NoBind;
const _emEquipMakeMark _emEquipMakeMark_MAX = EquipMakeMark_Special;
const int _emEquipMakeMark_ARRAYSIZE = _emEquipMakeMark_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emEquipMakeMark_descriptor();
inline const ::std::string& _emEquipMakeMark_Name(_emEquipMakeMark value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emEquipMakeMark_descriptor(), value);
}
inline bool _emEquipMakeMark_Parse(
    const ::std::string& name, _emEquipMakeMark* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emEquipMakeMark>(
    _emEquipMakeMark_descriptor(), name, value);
}
enum _emQuestType {
  QuestType_Teach = 1,
  QuestType_Main = 2,
  QuestType_Copymap = 3,
  QuestType_Promotion = 4,
  QuestType_ClassMates = 5,
  QuestType_Daily = 6,
  QuestType_Treasure = 7,
  QuestType_Branch = 8,
  QuestType_Shoulie = 9
};
bool _emQuestType_IsValid(int value);
const _emQuestType _emQuestType_MIN = QuestType_Teach;
const _emQuestType _emQuestType_MAX = QuestType_Shoulie;
const int _emQuestType_ARRAYSIZE = _emQuestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emQuestType_descriptor();
inline const ::std::string& _emQuestType_Name(_emQuestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emQuestType_descriptor(), value);
}
inline bool _emQuestType_Parse(
    const ::std::string& name, _emQuestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emQuestType>(
    _emQuestType_descriptor(), name, value);
}
enum _emFlyType {
  FlyType_FlyByHorse = 1,
  FlyType_FlyByWind = 2,
  FlyType_FindNpc = 3
};
bool _emFlyType_IsValid(int value);
const _emFlyType _emFlyType_MIN = FlyType_FlyByHorse;
const _emFlyType _emFlyType_MAX = FlyType_FindNpc;
const int _emFlyType_ARRAYSIZE = _emFlyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emFlyType_descriptor();
inline const ::std::string& _emFlyType_Name(_emFlyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emFlyType_descriptor(), value);
}
inline bool _emFlyType_Parse(
    const ::std::string& name, _emFlyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emFlyType>(
    _emFlyType_descriptor(), name, value);
}
enum _emSystemSwitchState {
  SwitchState_Close = 0,
  SwitchState_Open = 1
};
bool _emSystemSwitchState_IsValid(int value);
const _emSystemSwitchState _emSystemSwitchState_MIN = SwitchState_Close;
const _emSystemSwitchState _emSystemSwitchState_MAX = SwitchState_Open;
const int _emSystemSwitchState_ARRAYSIZE = _emSystemSwitchState_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSystemSwitchState_descriptor();
inline const ::std::string& _emSystemSwitchState_Name(_emSystemSwitchState value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSystemSwitchState_descriptor(), value);
}
inline bool _emSystemSwitchState_Parse(
    const ::std::string& name, _emSystemSwitchState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSystemSwitchState>(
    _emSystemSwitchState_descriptor(), name, value);
}
enum _emSystemSwitchType {
  SystemSwitch_Skill = 1,
  SystemSwitch_Buff = 2,
  SystemSwitch_Prize = 3,
  SystemSwitch_Mail = 4,
  SystemSwitch_Item = 5,
  SystemSwitch_Quest = 6,
  SystemSwitch_Copymap = 7,
  SystemSwitch_Auction = 8,
  SystemSwitch_Trade = 9,
  SystemSwitch_SaleMoney = 10,
  SystemSwitch_Store = 11,
  SystemSwitch_Faction = 12,
  SystemSwitch_TopList = 13,
  SystemSwitch_Friend = 14,
  SystemSwitch_Bingfu = 15,
  SystemSwitch_Wulue = 16,
  SystemSwitch_WenTao = 17,
  systemSwitch_Identity = 18,
  systemSwitch_Mounting = 19,
  systemSwitch_ItemEnhance = 20,
  systemSwitch_ItemMake = 21,
  systemSwitch_TeamPlatform = 22,
  systemSwitch_DayToDo = 23,
  systemSwitch_ItemForge = 24
};
bool _emSystemSwitchType_IsValid(int value);
const _emSystemSwitchType _emSystemSwitchType_MIN = SystemSwitch_Skill;
const _emSystemSwitchType _emSystemSwitchType_MAX = systemSwitch_ItemForge;
const int _emSystemSwitchType_ARRAYSIZE = _emSystemSwitchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSystemSwitchType_descriptor();
inline const ::std::string& _emSystemSwitchType_Name(_emSystemSwitchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSystemSwitchType_descriptor(), value);
}
inline bool _emSystemSwitchType_Parse(
    const ::std::string& name, _emSystemSwitchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSystemSwitchType>(
    _emSystemSwitchType_descriptor(), name, value);
}
enum _emAIStateType {
  AIState_Idle = 0,
  AIState_Battle = 1,
  AIState_Return = 2
};
bool _emAIStateType_IsValid(int value);
const _emAIStateType _emAIStateType_MIN = AIState_Idle;
const _emAIStateType _emAIStateType_MAX = AIState_Return;
const int _emAIStateType_ARRAYSIZE = _emAIStateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emAIStateType_descriptor();
inline const ::std::string& _emAIStateType_Name(_emAIStateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emAIStateType_descriptor(), value);
}
inline bool _emAIStateType_Parse(
    const ::std::string& name, _emAIStateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emAIStateType>(
    _emAIStateType_descriptor(), name, value);
}
enum _emAIIdleType {
  AIIdleType_Patroll = 0,
  AIIdleType_Path = 1,
  AIIdleType_Nothing = 2,
  AIIdleType_TargetPos = 3
};
bool _emAIIdleType_IsValid(int value);
const _emAIIdleType _emAIIdleType_MIN = AIIdleType_Patroll;
const _emAIIdleType _emAIIdleType_MAX = AIIdleType_TargetPos;
const int _emAIIdleType_ARRAYSIZE = _emAIIdleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emAIIdleType_descriptor();
inline const ::std::string& _emAIIdleType_Name(_emAIIdleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emAIIdleType_descriptor(), value);
}
inline bool _emAIIdleType_Parse(
    const ::std::string& name, _emAIIdleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emAIIdleType>(
    _emAIIdleType_descriptor(), name, value);
}
enum _emAISelectTargetType {
  AISelectTargetType_Hatred = 0,
  AISelectTargetType_Rand = 1,
  AISelectTargetType_MinHP = 2,
  AISelectTargetType_Nearst = 3
};
bool _emAISelectTargetType_IsValid(int value);
const _emAISelectTargetType _emAISelectTargetType_MIN = AISelectTargetType_Hatred;
const _emAISelectTargetType _emAISelectTargetType_MAX = AISelectTargetType_Nearst;
const int _emAISelectTargetType_ARRAYSIZE = _emAISelectTargetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emAISelectTargetType_descriptor();
inline const ::std::string& _emAISelectTargetType_Name(_emAISelectTargetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emAISelectTargetType_descriptor(), value);
}
inline bool _emAISelectTargetType_Parse(
    const ::std::string& name, _emAISelectTargetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emAISelectTargetType>(
    _emAISelectTargetType_descriptor(), name, value);
}
enum _emTrapDestroyType {
  TrapDestroyType_UseSkill = 1
};
bool _emTrapDestroyType_IsValid(int value);
const _emTrapDestroyType _emTrapDestroyType_MIN = TrapDestroyType_UseSkill;
const _emTrapDestroyType _emTrapDestroyType_MAX = TrapDestroyType_UseSkill;
const int _emTrapDestroyType_ARRAYSIZE = _emTrapDestroyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTrapDestroyType_descriptor();
inline const ::std::string& _emTrapDestroyType_Name(_emTrapDestroyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTrapDestroyType_descriptor(), value);
}
inline bool _emTrapDestroyType_Parse(
    const ::std::string& name, _emTrapDestroyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTrapDestroyType>(
    _emTrapDestroyType_descriptor(), name, value);
}
enum _emCorps {
  Corps_Unknown = 0,
  Corps_East = 1,
  Corps_West = 2,
  Corps_South = 3,
  Corps_north = 4
};
bool _emCorps_IsValid(int value);
const _emCorps _emCorps_MIN = Corps_Unknown;
const _emCorps _emCorps_MAX = Corps_north;
const int _emCorps_ARRAYSIZE = _emCorps_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCorps_descriptor();
inline const ::std::string& _emCorps_Name(_emCorps value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCorps_descriptor(), value);
}
inline bool _emCorps_Parse(
    const ::std::string& name, _emCorps* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCorps>(
    _emCorps_descriptor(), name, value);
}
enum _emCorpsJob {
  CorpsJob_Unknown = 0,
  CorpsJob_Leader = 1,
  CorpsJob_Deputy = 2,
  CorpsJob_Counsellor = 3,
  CorpsJob_LeftGeneral = 4,
  CorpsJob_RightGeneral = 5
};
bool _emCorpsJob_IsValid(int value);
const _emCorpsJob _emCorpsJob_MIN = CorpsJob_Unknown;
const _emCorpsJob _emCorpsJob_MAX = CorpsJob_RightGeneral;
const int _emCorpsJob_ARRAYSIZE = _emCorpsJob_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCorpsJob_descriptor();
inline const ::std::string& _emCorpsJob_Name(_emCorpsJob value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCorpsJob_descriptor(), value);
}
inline bool _emCorpsJob_Parse(
    const ::std::string& name, _emCorpsJob* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCorpsJob>(
    _emCorpsJob_descriptor(), name, value);
}
enum _emFactionJob {
  FactionJob_Unknown = 0,
  FactionJob_Leader = 1,
  FactionJob_Deputy = 2,
  FactionJob_Elder = 3,
  FactionJob_Manager = 4,
  FactionJob_People = 5,
  FactionJob_Beauty = 1001,
  FactionJob_Elite = 1002
};
bool _emFactionJob_IsValid(int value);
const _emFactionJob _emFactionJob_MIN = FactionJob_Unknown;
const _emFactionJob _emFactionJob_MAX = FactionJob_Elite;
const int _emFactionJob_ARRAYSIZE = _emFactionJob_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emFactionJob_descriptor();
inline const ::std::string& _emFactionJob_Name(_emFactionJob value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emFactionJob_descriptor(), value);
}
inline bool _emFactionJob_Parse(
    const ::std::string& name, _emFactionJob* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emFactionJob>(
    _emFactionJob_descriptor(), name, value);
}
enum _emFactionPrivilege {
  FactionPrivilege_AgreeApply = 1,
  FactionPrivilege_InviteJoin = 2,
  FactionPrivilege_SetJob = 3,
  FactionPrivilege_ForbidTalk = 4,
  FactionPrivilege_Remove = 5,
  FactionPrivilege_SetElite = 6,
  FactionPrivilege_SetBeauty = 7,
  FactionPrivilege_Edit = 8,
  FactionPrivilege_Banner = 9,
  FactionPrivilege_Develop = 10,
  FactionPrivilege_Corps = 11,
  FactionPrivilege_Name = 12,
  FactionPrivilege_GoldDepot = 13,
  FactionPrivilege_Depot = 14,
  FactionPrivilege_War = 15
};
bool _emFactionPrivilege_IsValid(int value);
const _emFactionPrivilege _emFactionPrivilege_MIN = FactionPrivilege_AgreeApply;
const _emFactionPrivilege _emFactionPrivilege_MAX = FactionPrivilege_War;
const int _emFactionPrivilege_ARRAYSIZE = _emFactionPrivilege_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emFactionPrivilege_descriptor();
inline const ::std::string& _emFactionPrivilege_Name(_emFactionPrivilege value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emFactionPrivilege_descriptor(), value);
}
inline bool _emFactionPrivilege_Parse(
    const ::std::string& name, _emFactionPrivilege* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emFactionPrivilege>(
    _emFactionPrivilege_descriptor(), name, value);
}
enum _emFactionMoneyType {
  FactionMoneyType_Sliver = 0,
  FactionMoneyType_Stone = 1
};
bool _emFactionMoneyType_IsValid(int value);
const _emFactionMoneyType _emFactionMoneyType_MIN = FactionMoneyType_Sliver;
const _emFactionMoneyType _emFactionMoneyType_MAX = FactionMoneyType_Stone;
const int _emFactionMoneyType_ARRAYSIZE = _emFactionMoneyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emFactionMoneyType_descriptor();
inline const ::std::string& _emFactionMoneyType_Name(_emFactionMoneyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emFactionMoneyType_descriptor(), value);
}
inline bool _emFactionMoneyType_Parse(
    const ::std::string& name, _emFactionMoneyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emFactionMoneyType>(
    _emFactionMoneyType_descriptor(), name, value);
}
enum _emFactionSkillState {
  FactionSkillState_Normal = 0,
  FactionSkillState_Develop_ing = 1,
  FactionSkillState_Develop_suspend = 2
};
bool _emFactionSkillState_IsValid(int value);
const _emFactionSkillState _emFactionSkillState_MIN = FactionSkillState_Normal;
const _emFactionSkillState _emFactionSkillState_MAX = FactionSkillState_Develop_suspend;
const int _emFactionSkillState_ARRAYSIZE = _emFactionSkillState_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emFactionSkillState_descriptor();
inline const ::std::string& _emFactionSkillState_Name(_emFactionSkillState value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emFactionSkillState_descriptor(), value);
}
inline bool _emFactionSkillState_Parse(
    const ::std::string& name, _emFactionSkillState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emFactionSkillState>(
    _emFactionSkillState_descriptor(), name, value);
}
enum _emFactionEvent {
  FactionEvent_AddMember = 0,
  FactionEvent_DelMember = 1,
  FactionEvent_UpLevel = 2,
  FactionEvent_Promote = 3,
  FactionEvent_Dismiss = 4,
  FactionEvent_Transfer = 5,
  FactionEvent_FactionBoss = 6,
  FactionEvent_AlloctMoney = 7,
  FactionEvent_AlloctItem = 8,
  FactionEvent_Impeach = 9
};
bool _emFactionEvent_IsValid(int value);
const _emFactionEvent _emFactionEvent_MIN = FactionEvent_AddMember;
const _emFactionEvent _emFactionEvent_MAX = FactionEvent_Impeach;
const int _emFactionEvent_ARRAYSIZE = _emFactionEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emFactionEvent_descriptor();
inline const ::std::string& _emFactionEvent_Name(_emFactionEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emFactionEvent_descriptor(), value);
}
inline bool _emFactionEvent_Parse(
    const ::std::string& name, _emFactionEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emFactionEvent>(
    _emFactionEvent_descriptor(), name, value);
}
enum _emDoingType {
  DoingType_Others = 0,
  DoingType_GM = 1,
  DoingType_Item_Use = 2,
  DoingType_Equip_Make = 3,
  DoingType_Equip_Enhance = 4,
  DoingType_Equip_Forge = 5,
  DoingType_Equip_Inherit = 6,
  DoingType_Equip_Expire = 7,
  DoingType_Item_Move = 8,
  DoingType_Item_Split = 9,
  DoingType_Copymap_Create = 10,
  DoingType_Quest_Complete = 11,
  DoingType_Mail_Get = 12,
  DoingType_Buff = 13,
  DoingType_Skill = 14,
  DoingType_Store_Get = 15,
  DoingType_EnterIdentity = 16,
  DoingType_Copymap_Enter = 17,
  DoingType_CashStore_Get = 18,
  DoingType_Colletion_Get = 19,
  DoingType_Prize = 20,
  DoingType_Trade = 21,
  DoingType_Drop = 22,
  DoingType_Birth = 23,
  DoingType_Auction = 24,
  DoingType_Copymap_Exit = 25,
  DoingType_Finish_Dart = 26,
  DoingType_Copymap_Finish = 27,
  DoingType_Dazuoguaji = 28,
  DoingType_CompleteTeamTask = 29,
  DoingType_BingfuUpgrade = 30,
  DoingType_ClimbTower = 31,
  DoingType_Compound = 32,
  DoingType_TreasureMap = 33,
  DoingType_Activity_Liveness = 34,
  DoingType_WorldBoss_RankPrize = 35,
  DoingType_WorldBoss_Kill = 36,
  DoingType_Sell_Item = 37,
  DoingType_BuyBack_Item = 38,
  DoingType_ItemUseBuff = 49,
  DoingType_ItemUse_Packet = 50,
  DoingType_Dart = 51,
  DoingType_Faction = 52,
  DoingType_Identity = 54,
  DoingType_DelItem = 55,
  DoingType_Faction_Boss = 56,
  DoingType_Sale_Money = 57,
  DoingType_BingFu_QianXiu = 58,
  DoingType_BingFu_Reset = 59,
  DoingType_Wulue_UpZhanlue = 60,
  DoingType_Wetao_ActiveBingFa = 61,
  DoingType_Trap = 62,
  DoingType_UpdateEnergy = 63,
  DoingType_EnergyByAttack = 64,
  DoingType_EnergyByHitEnermy = 65,
  DoingType_Monster = 66,
  DoingType_Promotion = 67,
  DoingType_Relive = 68,
  DoingType_AI = 69,
  DoingType_PVP = 70,
  DoingType_WulueSetBingfu = 71,
  DoingType_EquipOEM = 72,
  DoingType_FactionAlloct = 73,
  DoingType_CorpsJobChange = 74,
  DoingType_WealLogin = 75,
  DoingType_Manor = 76,
  DoingType_Stronger = 77
};
bool _emDoingType_IsValid(int value);
const _emDoingType _emDoingType_MIN = DoingType_Others;
const _emDoingType _emDoingType_MAX = DoingType_Stronger;
const int _emDoingType_ARRAYSIZE = _emDoingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emDoingType_descriptor();
inline const ::std::string& _emDoingType_Name(_emDoingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emDoingType_descriptor(), value);
}
inline bool _emDoingType_Parse(
    const ::std::string& name, _emDoingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emDoingType>(
    _emDoingType_descriptor(), name, value);
}
enum _emDoingObject {
  DO_Null = 0,
  DO_Money = 1
};
bool _emDoingObject_IsValid(int value);
const _emDoingObject _emDoingObject_MIN = DO_Null;
const _emDoingObject _emDoingObject_MAX = DO_Money;
const int _emDoingObject_ARRAYSIZE = _emDoingObject_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emDoingObject_descriptor();
inline const ::std::string& _emDoingObject_Name(_emDoingObject value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emDoingObject_descriptor(), value);
}
inline bool _emDoingObject_Parse(
    const ::std::string& name, _emDoingObject* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emDoingObject>(
    _emDoingObject_descriptor(), name, value);
}
enum _emLocatePlayerReason {
  LocatePlayerReason_GMQuery = 1,
  LocatePlayerReason_GMQueryGOTO = 2
};
bool _emLocatePlayerReason_IsValid(int value);
const _emLocatePlayerReason _emLocatePlayerReason_MIN = LocatePlayerReason_GMQuery;
const _emLocatePlayerReason _emLocatePlayerReason_MAX = LocatePlayerReason_GMQueryGOTO;
const int _emLocatePlayerReason_ARRAYSIZE = _emLocatePlayerReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emLocatePlayerReason_descriptor();
inline const ::std::string& _emLocatePlayerReason_Name(_emLocatePlayerReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emLocatePlayerReason_descriptor(), value);
}
inline bool _emLocatePlayerReason_Parse(
    const ::std::string& name, _emLocatePlayerReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emLocatePlayerReason>(
    _emLocatePlayerReason_descriptor(), name, value);
}
enum _emGoodModel {
  GoodModel_Free = 1,
  GoodModel_FirstFree = 2
};
bool _emGoodModel_IsValid(int value);
const _emGoodModel _emGoodModel_MIN = GoodModel_Free;
const _emGoodModel _emGoodModel_MAX = GoodModel_FirstFree;
const int _emGoodModel_ARRAYSIZE = _emGoodModel_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emGoodModel_descriptor();
inline const ::std::string& _emGoodModel_Name(_emGoodModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emGoodModel_descriptor(), value);
}
inline bool _emGoodModel_Parse(
    const ::std::string& name, _emGoodModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emGoodModel>(
    _emGoodModel_descriptor(), name, value);
}
enum _emStoreCircleType {
  StoreCircleType_Never = 0,
  StoreCircleType_Hour = 1,
  StoreCircleType_Day = 2,
  StoreCircleType_Week = 3,
  StoreCircleType_Month = 4
};
bool _emStoreCircleType_IsValid(int value);
const _emStoreCircleType _emStoreCircleType_MIN = StoreCircleType_Never;
const _emStoreCircleType _emStoreCircleType_MAX = StoreCircleType_Month;
const int _emStoreCircleType_ARRAYSIZE = _emStoreCircleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emStoreCircleType_descriptor();
inline const ::std::string& _emStoreCircleType_Name(_emStoreCircleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emStoreCircleType_descriptor(), value);
}
inline bool _emStoreCircleType_Parse(
    const ::std::string& name, _emStoreCircleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emStoreCircleType>(
    _emStoreCircleType_descriptor(), name, value);
}
enum _emCopymapCompleteType {
  CopymapCompleteType_None = 0,
  CopymapCompleteType_Failed = 1,
  CopymapCompleteType_Success = 2,
  CopymapCompleteType_Prefect = 3,
  CopymapCompleteType_Equal = 4
};
bool _emCopymapCompleteType_IsValid(int value);
const _emCopymapCompleteType _emCopymapCompleteType_MIN = CopymapCompleteType_None;
const _emCopymapCompleteType _emCopymapCompleteType_MAX = CopymapCompleteType_Equal;
const int _emCopymapCompleteType_ARRAYSIZE = _emCopymapCompleteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCopymapCompleteType_descriptor();
inline const ::std::string& _emCopymapCompleteType_Name(_emCopymapCompleteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCopymapCompleteType_descriptor(), value);
}
inline bool _emCopymapCompleteType_Parse(
    const ::std::string& name, _emCopymapCompleteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCopymapCompleteType>(
    _emCopymapCompleteType_descriptor(), name, value);
}
enum _emTeamMark {
  TeamMark_TeamTask = 0,
  TeamMark_Follow = 1
};
bool _emTeamMark_IsValid(int value);
const _emTeamMark _emTeamMark_MIN = TeamMark_TeamTask;
const _emTeamMark _emTeamMark_MAX = TeamMark_Follow;
const int _emTeamMark_ARRAYSIZE = _emTeamMark_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTeamMark_descriptor();
inline const ::std::string& _emTeamMark_Name(_emTeamMark value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTeamMark_descriptor(), value);
}
inline bool _emTeamMark_Parse(
    const ::std::string& name, _emTeamMark* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTeamMark>(
    _emTeamMark_descriptor(), name, value);
}
enum _emPrizeType {
  PrizeType_Quest = 1,
  PrizeType_Copymap = 2,
  PrizeType_Question = 3,
  PrizeType_WorldBoss = 4
};
bool _emPrizeType_IsValid(int value);
const _emPrizeType _emPrizeType_MIN = PrizeType_Quest;
const _emPrizeType _emPrizeType_MAX = PrizeType_WorldBoss;
const int _emPrizeType_ARRAYSIZE = _emPrizeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPrizeType_descriptor();
inline const ::std::string& _emPrizeType_Name(_emPrizeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPrizeType_descriptor(), value);
}
inline bool _emPrizeType_Parse(
    const ::std::string& name, _emPrizeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPrizeType>(
    _emPrizeType_descriptor(), name, value);
}
enum _emPrizeAcceptType {
  PrizeAcceptType_Auto = 0,
  PrizeAcceptType_Manual = 1,
  PrizeAcceptType_Mail = 2
};
bool _emPrizeAcceptType_IsValid(int value);
const _emPrizeAcceptType _emPrizeAcceptType_MIN = PrizeAcceptType_Auto;
const _emPrizeAcceptType _emPrizeAcceptType_MAX = PrizeAcceptType_Mail;
const int _emPrizeAcceptType_ARRAYSIZE = _emPrizeAcceptType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPrizeAcceptType_descriptor();
inline const ::std::string& _emPrizeAcceptType_Name(_emPrizeAcceptType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPrizeAcceptType_descriptor(), value);
}
inline bool _emPrizeAcceptType_Parse(
    const ::std::string& name, _emPrizeAcceptType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPrizeAcceptType>(
    _emPrizeAcceptType_descriptor(), name, value);
}
enum _emPrizeMark {
  PrizeMark_Multi = 1
};
bool _emPrizeMark_IsValid(int value);
const _emPrizeMark _emPrizeMark_MIN = PrizeMark_Multi;
const _emPrizeMark _emPrizeMark_MAX = PrizeMark_Multi;
const int _emPrizeMark_ARRAYSIZE = _emPrizeMark_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPrizeMark_descriptor();
inline const ::std::string& _emPrizeMark_Name(_emPrizeMark value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPrizeMark_descriptor(), value);
}
inline bool _emPrizeMark_Parse(
    const ::std::string& name, _emPrizeMark* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPrizeMark>(
    _emPrizeMark_descriptor(), name, value);
}
enum _emPrizeKeyCopymapType {
  PrizeKeyCopymapType_Failed = 1,
  PrizeKeyCopymapType_Complete = 2,
  PrizeKeyCopymapType_Prefect = 3,
  PrizeKeyCopymapType_TeamLeader = 4,
  PrizeKeyCopymapType_Extra = 5,
  PrizeKeyCopymapType_Assist = 6,
  PrizeKeyCopymapType_Equal = 7
};
bool _emPrizeKeyCopymapType_IsValid(int value);
const _emPrizeKeyCopymapType _emPrizeKeyCopymapType_MIN = PrizeKeyCopymapType_Failed;
const _emPrizeKeyCopymapType _emPrizeKeyCopymapType_MAX = PrizeKeyCopymapType_Equal;
const int _emPrizeKeyCopymapType_ARRAYSIZE = _emPrizeKeyCopymapType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPrizeKeyCopymapType_descriptor();
inline const ::std::string& _emPrizeKeyCopymapType_Name(_emPrizeKeyCopymapType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPrizeKeyCopymapType_descriptor(), value);
}
inline bool _emPrizeKeyCopymapType_Parse(
    const ::std::string& name, _emPrizeKeyCopymapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPrizeKeyCopymapType>(
    _emPrizeKeyCopymapType_descriptor(), name, value);
}
enum _emSceneMapMarkType {
  SceneMapMarkType_canReliveOrigin = 1,
  SceneMapMarkType_UseEnterPos = 2
};
bool _emSceneMapMarkType_IsValid(int value);
const _emSceneMapMarkType _emSceneMapMarkType_MIN = SceneMapMarkType_canReliveOrigin;
const _emSceneMapMarkType _emSceneMapMarkType_MAX = SceneMapMarkType_UseEnterPos;
const int _emSceneMapMarkType_ARRAYSIZE = _emSceneMapMarkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSceneMapMarkType_descriptor();
inline const ::std::string& _emSceneMapMarkType_Name(_emSceneMapMarkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSceneMapMarkType_descriptor(), value);
}
inline bool _emSceneMapMarkType_Parse(
    const ::std::string& name, _emSceneMapMarkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSceneMapMarkType>(
    _emSceneMapMarkType_descriptor(), name, value);
}
enum _emDartHardType {
  DartHardType_Easy = 1,
  DartHardType_Normal = 2,
  DartHardType_Hard = 3
};
bool _emDartHardType_IsValid(int value);
const _emDartHardType _emDartHardType_MIN = DartHardType_Easy;
const _emDartHardType _emDartHardType_MAX = DartHardType_Hard;
const int _emDartHardType_ARRAYSIZE = _emDartHardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emDartHardType_descriptor();
inline const ::std::string& _emDartHardType_Name(_emDartHardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emDartHardType_descriptor(), value);
}
inline bool _emDartHardType_Parse(
    const ::std::string& name, _emDartHardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emDartHardType>(
    _emDartHardType_descriptor(), name, value);
}
enum _emDartBuffType {
  DartBuffType_Change_Speed = 1,
  DartBuffType_Delay_Rob = 2,
  DartBuffType_Meet_Hard_Monster = 3,
  DartBuffType_Add_Prize_Money = 4
};
bool _emDartBuffType_IsValid(int value);
const _emDartBuffType _emDartBuffType_MIN = DartBuffType_Change_Speed;
const _emDartBuffType _emDartBuffType_MAX = DartBuffType_Add_Prize_Money;
const int _emDartBuffType_ARRAYSIZE = _emDartBuffType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emDartBuffType_descriptor();
inline const ::std::string& _emDartBuffType_Name(_emDartBuffType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emDartBuffType_descriptor(), value);
}
inline bool _emDartBuffType_Parse(
    const ::std::string& name, _emDartBuffType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emDartBuffType>(
    _emDartBuffType_descriptor(), name, value);
}
enum _emDartBuffLayerType {
  DartBuffLayerType_Add = 1,
  DartBuffLayerType_Replace = 2
};
bool _emDartBuffLayerType_IsValid(int value);
const _emDartBuffLayerType _emDartBuffLayerType_MIN = DartBuffLayerType_Add;
const _emDartBuffLayerType _emDartBuffLayerType_MAX = DartBuffLayerType_Replace;
const int _emDartBuffLayerType_ARRAYSIZE = _emDartBuffLayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emDartBuffLayerType_descriptor();
inline const ::std::string& _emDartBuffLayerType_Name(_emDartBuffLayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emDartBuffLayerType_descriptor(), value);
}
inline bool _emDartBuffLayerType_Parse(
    const ::std::string& name, _emDartBuffLayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emDartBuffLayerType>(
    _emDartBuffLayerType_descriptor(), name, value);
}
enum _emDartPrizeType {
  DartPrizeType_Success = 1,
  DartPrizeType_Failure = 2,
  DartPrizeType_Abort = 3
};
bool _emDartPrizeType_IsValid(int value);
const _emDartPrizeType _emDartPrizeType_MIN = DartPrizeType_Success;
const _emDartPrizeType _emDartPrizeType_MAX = DartPrizeType_Abort;
const int _emDartPrizeType_ARRAYSIZE = _emDartPrizeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emDartPrizeType_descriptor();
inline const ::std::string& _emDartPrizeType_Name(_emDartPrizeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emDartPrizeType_descriptor(), value);
}
inline bool _emDartPrizeType_Parse(
    const ::std::string& name, _emDartPrizeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emDartPrizeType>(
    _emDartPrizeType_descriptor(), name, value);
}
enum _emDartActivityType {
  DartActivityType_Normal = 1,
  DartActivityType_Tianxia = 2
};
bool _emDartActivityType_IsValid(int value);
const _emDartActivityType _emDartActivityType_MIN = DartActivityType_Normal;
const _emDartActivityType _emDartActivityType_MAX = DartActivityType_Tianxia;
const int _emDartActivityType_ARRAYSIZE = _emDartActivityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emDartActivityType_descriptor();
inline const ::std::string& _emDartActivityType_Name(_emDartActivityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emDartActivityType_descriptor(), value);
}
inline bool _emDartActivityType_Parse(
    const ::std::string& name, _emDartActivityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emDartActivityType>(
    _emDartActivityType_descriptor(), name, value);
}
enum _emDartPVPType {
  DartPVPType_Safe = 1,
  DartPVPType_Weiwu = 2
};
bool _emDartPVPType_IsValid(int value);
const _emDartPVPType _emDartPVPType_MIN = DartPVPType_Safe;
const _emDartPVPType _emDartPVPType_MAX = DartPVPType_Weiwu;
const int _emDartPVPType_ARRAYSIZE = _emDartPVPType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emDartPVPType_descriptor();
inline const ::std::string& _emDartPVPType_Name(_emDartPVPType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emDartPVPType_descriptor(), value);
}
inline bool _emDartPVPType_Parse(
    const ::std::string& name, _emDartPVPType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emDartPVPType>(
    _emDartPVPType_descriptor(), name, value);
}
enum _emDartLogType {
  DartLogType_Get = 1,
  DartLogType_Finish_Success = 2,
  DartLogType_Finish_Failed = 3,
  DartLogType_AddSupply = 5,
  DartLogType_Rob_Success = 6,
  DartLogType_Rob_Failed = 7,
  DartLogType_Check_Buff = 8,
  DartLogType_Leave_Dart = 9
};
bool _emDartLogType_IsValid(int value);
const _emDartLogType _emDartLogType_MIN = DartLogType_Get;
const _emDartLogType _emDartLogType_MAX = DartLogType_Leave_Dart;
const int _emDartLogType_ARRAYSIZE = _emDartLogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emDartLogType_descriptor();
inline const ::std::string& _emDartLogType_Name(_emDartLogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emDartLogType_descriptor(), value);
}
inline bool _emDartLogType_Parse(
    const ::std::string& name, _emDartLogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emDartLogType>(
    _emDartLogType_descriptor(), name, value);
}
enum _emMonsterDeadDropDistribute {
  MonsterDeadDropDistribute_MaxDamage = 1,
  MonsterDeadDropDistribute_FirstDamage = 2,
  MonsterDeadDropDistribute_EndDamage = 3
};
bool _emMonsterDeadDropDistribute_IsValid(int value);
const _emMonsterDeadDropDistribute _emMonsterDeadDropDistribute_MIN = MonsterDeadDropDistribute_MaxDamage;
const _emMonsterDeadDropDistribute _emMonsterDeadDropDistribute_MAX = MonsterDeadDropDistribute_EndDamage;
const int _emMonsterDeadDropDistribute_ARRAYSIZE = _emMonsterDeadDropDistribute_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emMonsterDeadDropDistribute_descriptor();
inline const ::std::string& _emMonsterDeadDropDistribute_Name(_emMonsterDeadDropDistribute value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emMonsterDeadDropDistribute_descriptor(), value);
}
inline bool _emMonsterDeadDropDistribute_Parse(
    const ::std::string& name, _emMonsterDeadDropDistribute* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emMonsterDeadDropDistribute>(
    _emMonsterDeadDropDistribute_descriptor(), name, value);
}
enum _emMonsterDeadQuestDistribute {
  MonsterDeadQuestDistribute_Damage = 1,
  MonsterDeadQuestDistribute_Hate = 2,
  MonsterDeadQuestDistribute_Radiu = 3
};
bool _emMonsterDeadQuestDistribute_IsValid(int value);
const _emMonsterDeadQuestDistribute _emMonsterDeadQuestDistribute_MIN = MonsterDeadQuestDistribute_Damage;
const _emMonsterDeadQuestDistribute _emMonsterDeadQuestDistribute_MAX = MonsterDeadQuestDistribute_Radiu;
const int _emMonsterDeadQuestDistribute_ARRAYSIZE = _emMonsterDeadQuestDistribute_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emMonsterDeadQuestDistribute_descriptor();
inline const ::std::string& _emMonsterDeadQuestDistribute_Name(_emMonsterDeadQuestDistribute value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emMonsterDeadQuestDistribute_descriptor(), value);
}
inline bool _emMonsterDeadQuestDistribute_Parse(
    const ::std::string& name, _emMonsterDeadQuestDistribute* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emMonsterDeadQuestDistribute>(
    _emMonsterDeadQuestDistribute_descriptor(), name, value);
}
enum _emFactionBossTopType {
  FactionBossTopType_Personal = 0,
  FactionBossTopType_Faction = 1,
  FactionBossTopType_Union = 2
};
bool _emFactionBossTopType_IsValid(int value);
const _emFactionBossTopType _emFactionBossTopType_MIN = FactionBossTopType_Personal;
const _emFactionBossTopType _emFactionBossTopType_MAX = FactionBossTopType_Union;
const int _emFactionBossTopType_ARRAYSIZE = _emFactionBossTopType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emFactionBossTopType_descriptor();
inline const ::std::string& _emFactionBossTopType_Name(_emFactionBossTopType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emFactionBossTopType_descriptor(), value);
}
inline bool _emFactionBossTopType_Parse(
    const ::std::string& name, _emFactionBossTopType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emFactionBossTopType>(
    _emFactionBossTopType_descriptor(), name, value);
}
enum _emFactionBossAwardType {
  FactionBossAwardType_PersonalTop = 0,
  FactionBossAwardType_FactionTop = 1,
  FactionBossAwardType_FactionScoreValue = 2,
  FactionBossAwardType_FactionScorePercent = 3
};
bool _emFactionBossAwardType_IsValid(int value);
const _emFactionBossAwardType _emFactionBossAwardType_MIN = FactionBossAwardType_PersonalTop;
const _emFactionBossAwardType _emFactionBossAwardType_MAX = FactionBossAwardType_FactionScorePercent;
const int _emFactionBossAwardType_ARRAYSIZE = _emFactionBossAwardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emFactionBossAwardType_descriptor();
inline const ::std::string& _emFactionBossAwardType_Name(_emFactionBossAwardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emFactionBossAwardType_descriptor(), value);
}
inline bool _emFactionBossAwardType_Parse(
    const ::std::string& name, _emFactionBossAwardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emFactionBossAwardType>(
    _emFactionBossAwardType_descriptor(), name, value);
}
enum _emQinggongActionType {
  QinggongActionType_Run = 0,
  QinggongActionType_Fly = 1
};
bool _emQinggongActionType_IsValid(int value);
const _emQinggongActionType _emQinggongActionType_MIN = QinggongActionType_Run;
const _emQinggongActionType _emQinggongActionType_MAX = QinggongActionType_Fly;
const int _emQinggongActionType_ARRAYSIZE = _emQinggongActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emQinggongActionType_descriptor();
inline const ::std::string& _emQinggongActionType_Name(_emQinggongActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emQinggongActionType_descriptor(), value);
}
inline bool _emQinggongActionType_Parse(
    const ::std::string& name, _emQinggongActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emQinggongActionType>(
    _emQinggongActionType_descriptor(), name, value);
}
enum _emGameBattleAttrFromType {
  GameBattleAttrFromType_Base = 1,
  GameBattleAttrFromType_Equip = 2,
  GameBattleAttrFromType_FactionSkill = 3,
  GameBattleAttrFromType_Wentao = 4,
  GameBattleAttrFromType_Wulue = 5
};
bool _emGameBattleAttrFromType_IsValid(int value);
const _emGameBattleAttrFromType _emGameBattleAttrFromType_MIN = GameBattleAttrFromType_Base;
const _emGameBattleAttrFromType _emGameBattleAttrFromType_MAX = GameBattleAttrFromType_Wulue;
const int _emGameBattleAttrFromType_ARRAYSIZE = _emGameBattleAttrFromType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emGameBattleAttrFromType_descriptor();
inline const ::std::string& _emGameBattleAttrFromType_Name(_emGameBattleAttrFromType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emGameBattleAttrFromType_descriptor(), value);
}
inline bool _emGameBattleAttrFromType_Parse(
    const ::std::string& name, _emGameBattleAttrFromType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emGameBattleAttrFromType>(
    _emGameBattleAttrFromType_descriptor(), name, value);
}
enum _emCollectionType {
  ConllectionType_LimitCount = 1,
  ConllectionType_LimitTime = 2,
  ConllectionType_Task = 3,
  ConllectionType_Copymap = 4
};
bool _emCollectionType_IsValid(int value);
const _emCollectionType _emCollectionType_MIN = ConllectionType_LimitCount;
const _emCollectionType _emCollectionType_MAX = ConllectionType_Copymap;
const int _emCollectionType_ARRAYSIZE = _emCollectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCollectionType_descriptor();
inline const ::std::string& _emCollectionType_Name(_emCollectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCollectionType_descriptor(), value);
}
inline bool _emCollectionType_Parse(
    const ::std::string& name, _emCollectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCollectionType>(
    _emCollectionType_descriptor(), name, value);
}
enum _emTeamTargetMainType {
  TeamTargetMainType_Copymap = 1,
  TeamTargetMainType_Copymap_Difficulty = 2,
  TeamTargetMainType_Task = 3
};
bool _emTeamTargetMainType_IsValid(int value);
const _emTeamTargetMainType _emTeamTargetMainType_MIN = TeamTargetMainType_Copymap;
const _emTeamTargetMainType _emTeamTargetMainType_MAX = TeamTargetMainType_Task;
const int _emTeamTargetMainType_ARRAYSIZE = _emTeamTargetMainType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTeamTargetMainType_descriptor();
inline const ::std::string& _emTeamTargetMainType_Name(_emTeamTargetMainType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTeamTargetMainType_descriptor(), value);
}
inline bool _emTeamTargetMainType_Parse(
    const ::std::string& name, _emTeamTargetMainType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTeamTargetMainType>(
    _emTeamTargetMainType_descriptor(), name, value);
}
enum _emTitleConditionType {
  TitleConditionType_Level = 1,
  TitleConditionType_Copymap = 2,
  TitleConditionType_Quest = 3,
  TitleConditionType_Fightpower = 4
};
bool _emTitleConditionType_IsValid(int value);
const _emTitleConditionType _emTitleConditionType_MIN = TitleConditionType_Level;
const _emTitleConditionType _emTitleConditionType_MAX = TitleConditionType_Fightpower;
const int _emTitleConditionType_ARRAYSIZE = _emTitleConditionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTitleConditionType_descriptor();
inline const ::std::string& _emTitleConditionType_Name(_emTitleConditionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTitleConditionType_descriptor(), value);
}
inline bool _emTitleConditionType_Parse(
    const ::std::string& name, _emTitleConditionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTitleConditionType>(
    _emTitleConditionType_descriptor(), name, value);
}
enum _emTeamMemberRelationType {
  TeamMemberRelationType_None = 1,
  TeamMemberRelationType_Friends = 2,
  TeamMemberRelationType_Fuqi = 3,
  TeamMemberRelationType_JinLan = 4,
  TeamMemberRelationType_Faction = 5
};
bool _emTeamMemberRelationType_IsValid(int value);
const _emTeamMemberRelationType _emTeamMemberRelationType_MIN = TeamMemberRelationType_None;
const _emTeamMemberRelationType _emTeamMemberRelationType_MAX = TeamMemberRelationType_Faction;
const int _emTeamMemberRelationType_ARRAYSIZE = _emTeamMemberRelationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTeamMemberRelationType_descriptor();
inline const ::std::string& _emTeamMemberRelationType_Name(_emTeamMemberRelationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTeamMemberRelationType_descriptor(), value);
}
inline bool _emTeamMemberRelationType_Parse(
    const ::std::string& name, _emTeamMemberRelationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTeamMemberRelationType>(
    _emTeamMemberRelationType_descriptor(), name, value);
}
enum _emClimbTowerClass {
  ClimbTowerClass_Easy = 1,
  ClimbTowerClass_Hard = 2,
  ClimbTowerClass_Elite = 3
};
bool _emClimbTowerClass_IsValid(int value);
const _emClimbTowerClass _emClimbTowerClass_MIN = ClimbTowerClass_Easy;
const _emClimbTowerClass _emClimbTowerClass_MAX = ClimbTowerClass_Elite;
const int _emClimbTowerClass_ARRAYSIZE = _emClimbTowerClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emClimbTowerClass_descriptor();
inline const ::std::string& _emClimbTowerClass_Name(_emClimbTowerClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emClimbTowerClass_descriptor(), value);
}
inline bool _emClimbTowerClass_Parse(
    const ::std::string& name, _emClimbTowerClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emClimbTowerClass>(
    _emClimbTowerClass_descriptor(), name, value);
}
enum _emClimbTowerPrizeType {
  ClimbTowerPrize_Item = 1,
  ClimbTowerPrize_Buff = 2,
  ClimbTowerPrize_Expend = 3
};
bool _emClimbTowerPrizeType_IsValid(int value);
const _emClimbTowerPrizeType _emClimbTowerPrizeType_MIN = ClimbTowerPrize_Item;
const _emClimbTowerPrizeType _emClimbTowerPrizeType_MAX = ClimbTowerPrize_Expend;
const int _emClimbTowerPrizeType_ARRAYSIZE = _emClimbTowerPrizeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emClimbTowerPrizeType_descriptor();
inline const ::std::string& _emClimbTowerPrizeType_Name(_emClimbTowerPrizeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emClimbTowerPrizeType_descriptor(), value);
}
inline bool _emClimbTowerPrizeType_Parse(
    const ::std::string& name, _emClimbTowerPrizeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emClimbTowerPrizeType>(
    _emClimbTowerPrizeType_descriptor(), name, value);
}
enum _emClimbTowerLogType {
  ClimbTowerPrize_Win_Time = 1
};
bool _emClimbTowerLogType_IsValid(int value);
const _emClimbTowerLogType _emClimbTowerLogType_MIN = ClimbTowerPrize_Win_Time;
const _emClimbTowerLogType _emClimbTowerLogType_MAX = ClimbTowerPrize_Win_Time;
const int _emClimbTowerLogType_ARRAYSIZE = _emClimbTowerLogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emClimbTowerLogType_descriptor();
inline const ::std::string& _emClimbTowerLogType_Name(_emClimbTowerLogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emClimbTowerLogType_descriptor(), value);
}
inline bool _emClimbTowerLogType_Parse(
    const ::std::string& name, _emClimbTowerLogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emClimbTowerLogType>(
    _emClimbTowerLogType_descriptor(), name, value);
}
enum _emStoreType {
  StoreType_Slivers = 1,
  StoreType_Bindsliver = 2,
  StoreType_Cash = 3,
  StoreType_Faction = 4,
  StoreType_Eploits = 5,
  StoreType_Chivalry = 6,
  StoreType_Mystery = 7
};
bool _emStoreType_IsValid(int value);
const _emStoreType _emStoreType_MIN = StoreType_Slivers;
const _emStoreType _emStoreType_MAX = StoreType_Mystery;
const int _emStoreType_ARRAYSIZE = _emStoreType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emStoreType_descriptor();
inline const ::std::string& _emStoreType_Name(_emStoreType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emStoreType_descriptor(), value);
}
inline bool _emStoreType_Parse(
    const ::std::string& name, _emStoreType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emStoreType>(
    _emStoreType_descriptor(), name, value);
}
enum _emTreasurePrizeType {
  TreasurePrizeType_Item = 1,
  TreasurePrizeType_Expend = 2,
  TreasurePrizeType_Buff = 3,
  TreasurePrizeType_EnterCopymap = 4,
  TreasurePrizeType_RefreshBoss = 5,
  TreasurePrizeType_CopymapNpc = 6
};
bool _emTreasurePrizeType_IsValid(int value);
const _emTreasurePrizeType _emTreasurePrizeType_MIN = TreasurePrizeType_Item;
const _emTreasurePrizeType _emTreasurePrizeType_MAX = TreasurePrizeType_CopymapNpc;
const int _emTreasurePrizeType_ARRAYSIZE = _emTreasurePrizeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emTreasurePrizeType_descriptor();
inline const ::std::string& _emTreasurePrizeType_Name(_emTreasurePrizeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emTreasurePrizeType_descriptor(), value);
}
inline bool _emTreasurePrizeType_Parse(
    const ::std::string& name, _emTreasurePrizeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emTreasurePrizeType>(
    _emTreasurePrizeType_descriptor(), name, value);
}
enum _emCastMessageType {
  CastMessageType_BroadCast = 1,
  CastMessageType_Active = 2,
  CastMessageType_Lantern = 3,
  CastMessageType_Chat = 4,
  CastMessageType_TaskStory = 5,
  CastMessageType_FloatTips = 6,
  CastMessageType_RedAleart = 7,
  CastMessageType_GetMoney = 8,
  CastMessageType_GetItem = 9
};
bool _emCastMessageType_IsValid(int value);
const _emCastMessageType _emCastMessageType_MIN = CastMessageType_BroadCast;
const _emCastMessageType _emCastMessageType_MAX = CastMessageType_GetItem;
const int _emCastMessageType_ARRAYSIZE = _emCastMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emCastMessageType_descriptor();
inline const ::std::string& _emCastMessageType_Name(_emCastMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emCastMessageType_descriptor(), value);
}
inline bool _emCastMessageType_Parse(
    const ::std::string& name, _emCastMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emCastMessageType>(
    _emCastMessageType_descriptor(), name, value);
}
enum _emWorldBossEventType {
  WorldBossEventType_Unknown = 0,
  WorldBossEventType_Active = 1,
  WorldBossEventType_Killed = 2,
  WorldBossEventType_5_Min_CD = 3,
  WorldBossEventType_Close = 4,
  WorldBossEventType_Frozen = 5
};
bool _emWorldBossEventType_IsValid(int value);
const _emWorldBossEventType _emWorldBossEventType_MIN = WorldBossEventType_Unknown;
const _emWorldBossEventType _emWorldBossEventType_MAX = WorldBossEventType_Frozen;
const int _emWorldBossEventType_ARRAYSIZE = _emWorldBossEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emWorldBossEventType_descriptor();
inline const ::std::string& _emWorldBossEventType_Name(_emWorldBossEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emWorldBossEventType_descriptor(), value);
}
inline bool _emWorldBossEventType_Parse(
    const ::std::string& name, _emWorldBossEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emWorldBossEventType>(
    _emWorldBossEventType_descriptor(), name, value);
}
enum _emActivityType {
  ActivityType_CopymapID = 1,
  ActivityType_CopymapMainType = 2,
  ActivityType_CopymapType = 3,
  ActivityType_UserItem = 4,
  ActivityType_Quest = 5,
  ActivityType_WorldBoss = 6,
  ActivityType_NormalDart = 7,
  ActivityType_Sword = 8,
  ActivityType_AnswerQuestion = 9,
  ActivityType_TakeASeat = 10,
  ActivityType_FactionCompotation = 11
};
bool _emActivityType_IsValid(int value);
const _emActivityType _emActivityType_MIN = ActivityType_CopymapID;
const _emActivityType _emActivityType_MAX = ActivityType_FactionCompotation;
const int _emActivityType_ARRAYSIZE = _emActivityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emActivityType_descriptor();
inline const ::std::string& _emActivityType_Name(_emActivityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emActivityType_descriptor(), value);
}
inline bool _emActivityType_Parse(
    const ::std::string& name, _emActivityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emActivityType>(
    _emActivityType_descriptor(), name, value);
}
enum _emManorOccupyStatus {
  ManorOccupy_Stop = 0,
  ManorOccupy_Applying = 1,
  ManorOccupy_Applyable = 2,
  ManorOccupy_Fighting = 3
};
bool _emManorOccupyStatus_IsValid(int value);
const _emManorOccupyStatus _emManorOccupyStatus_MIN = ManorOccupy_Stop;
const _emManorOccupyStatus _emManorOccupyStatus_MAX = ManorOccupy_Fighting;
const int _emManorOccupyStatus_ARRAYSIZE = _emManorOccupyStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emManorOccupyStatus_descriptor();
inline const ::std::string& _emManorOccupyStatus_Name(_emManorOccupyStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emManorOccupyStatus_descriptor(), value);
}
inline bool _emManorOccupyStatus_Parse(
    const ::std::string& name, _emManorOccupyStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emManorOccupyStatus>(
    _emManorOccupyStatus_descriptor(), name, value);
}
enum _emManorType {
  ManorType_Capital = 1,
  ManorType_Normal = 2
};
bool _emManorType_IsValid(int value);
const _emManorType _emManorType_MIN = ManorType_Capital;
const _emManorType _emManorType_MAX = ManorType_Normal;
const int _emManorType_ARRAYSIZE = _emManorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emManorType_descriptor();
inline const ::std::string& _emManorType_Name(_emManorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emManorType_descriptor(), value);
}
inline bool _emManorType_Parse(
    const ::std::string& name, _emManorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emManorType>(
    _emManorType_descriptor(), name, value);
}
enum _emManorFactionType {
  ManorFactionType_Challenger = 0,
  ManorFactionType_Defender = 1
};
bool _emManorFactionType_IsValid(int value);
const _emManorFactionType _emManorFactionType_MIN = ManorFactionType_Challenger;
const _emManorFactionType _emManorFactionType_MAX = ManorFactionType_Defender;
const int _emManorFactionType_ARRAYSIZE = _emManorFactionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emManorFactionType_descriptor();
inline const ::std::string& _emManorFactionType_Name(_emManorFactionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emManorFactionType_descriptor(), value);
}
inline bool _emManorFactionType_Parse(
    const ::std::string& name, _emManorFactionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emManorFactionType>(
    _emManorFactionType_descriptor(), name, value);
}
enum _emManorBroadcastPromptType {
  ManorBroadcastPromptType_Lobby_Ready = 1,
  ManorBroadcastPromptType_Lobby_Begin = 2,
  ManorBroadcastPromptType_BattleField_Occupy = 3,
  ManorBroadcastPromptType_BattleField_Kill = 4,
  ManorBroadcastPromptType_BattleField_BeKill = 5,
  ManorBroadcastPromptType_BattleField_Megakill = 6,
  ManorBroadcastPromptType_BattleField_Godlike = 7,
  ManorBroadcastPromptType_BattleField_Shenfu_Prepare = 8,
  ManorBroadcastPromptType_BattleField_Shenfu_Ready = 9,
  ManorBroadcastPromptType_BattleField_End_CD_Min = 10,
  ManorBroadcastPromptType_BattleField_End_CD_Sec = 11,
  ManorBroadcastPromptType_BattleField_End_CD_Auto = 12,
  ManorBroadcastPromptType_BattleField_Start_CD_Sec = 13,
  ManorBroadcastPromptType_BattleField_Start_CD_Auto = 14
};
bool _emManorBroadcastPromptType_IsValid(int value);
const _emManorBroadcastPromptType _emManorBroadcastPromptType_MIN = ManorBroadcastPromptType_Lobby_Ready;
const _emManorBroadcastPromptType _emManorBroadcastPromptType_MAX = ManorBroadcastPromptType_BattleField_Start_CD_Auto;
const int _emManorBroadcastPromptType_ARRAYSIZE = _emManorBroadcastPromptType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emManorBroadcastPromptType_descriptor();
inline const ::std::string& _emManorBroadcastPromptType_Name(_emManorBroadcastPromptType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emManorBroadcastPromptType_descriptor(), value);
}
inline bool _emManorBroadcastPromptType_Parse(
    const ::std::string& name, _emManorBroadcastPromptType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emManorBroadcastPromptType>(
    _emManorBroadcastPromptType_descriptor(), name, value);
}
enum _emManorMailType {
  ManorMailType_Member_Success = 1,
  ManorMailType_Member_Fail = 2,
  ManorMailType_Leader_Challenger_Success = 3,
  ManorMailType_Leader_Defend_Success = 4,
  ManorMailType_Leader_Defend_Fail = 5
};
bool _emManorMailType_IsValid(int value);
const _emManorMailType _emManorMailType_MIN = ManorMailType_Member_Success;
const _emManorMailType _emManorMailType_MAX = ManorMailType_Leader_Defend_Fail;
const int _emManorMailType_ARRAYSIZE = _emManorMailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emManorMailType_descriptor();
inline const ::std::string& _emManorMailType_Name(_emManorMailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emManorMailType_descriptor(), value);
}
inline bool _emManorMailType_Parse(
    const ::std::string& name, _emManorMailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emManorMailType>(
    _emManorMailType_descriptor(), name, value);
}
enum _emPvpWarType {
  PvpWarType_5v5 = 1,
  PvpWarType_1v1 = 2
};
bool _emPvpWarType_IsValid(int value);
const _emPvpWarType _emPvpWarType_MIN = PvpWarType_5v5;
const _emPvpWarType _emPvpWarType_MAX = PvpWarType_1v1;
const int _emPvpWarType_ARRAYSIZE = _emPvpWarType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPvpWarType_descriptor();
inline const ::std::string& _emPvpWarType_Name(_emPvpWarType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPvpWarType_descriptor(), value);
}
inline bool _emPvpWarType_Parse(
    const ::std::string& name, _emPvpWarType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPvpWarType>(
    _emPvpWarType_descriptor(), name, value);
}
enum _emPvpCamp {
  Pvpcamp_Red = 9,
  Pvpcamp_Blue = 10
};
bool _emPvpCamp_IsValid(int value);
const _emPvpCamp _emPvpCamp_MIN = Pvpcamp_Red;
const _emPvpCamp _emPvpCamp_MAX = Pvpcamp_Blue;
const int _emPvpCamp_ARRAYSIZE = _emPvpCamp_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPvpCamp_descriptor();
inline const ::std::string& _emPvpCamp_Name(_emPvpCamp value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPvpCamp_descriptor(), value);
}
inline bool _emPvpCamp_Parse(
    const ::std::string& name, _emPvpCamp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPvpCamp>(
    _emPvpCamp_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPlayerType>() {
  return _emPlayerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emFactionDataType>() {
  return _emFactionDataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emAccountMark>() {
  return _emAccountMark_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emClientPF>() {
  return _emClientPF_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emEnterFightReason>() {
  return _emEnterFightReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emGameSystemType>() {
  return _emGameSystemType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _em_GameUnitType>() {
  return _em_GameUnitType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _em_GameUnitJob>() {
  return _em_GameUnitJob_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emHatredType>() {
  return _emHatredType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTeamAllotType>() {
  return _emTeamAllotType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTeamLeaveReason>() {
  return _emTeamLeaveReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBattleAttrAffectType>() {
  return _emBattleAttrAffectType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBattleAttribute>() {
  return _emBattleAttribute_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emExpendType>() {
  return _emExpendType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPreConditionType>() {
  return _emPreConditionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emMonsterType>() {
  return _emMonsterType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emMonsterSubType>() {
  return _emMonsterSubType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emMonsterCollectionType>() {
  return _emMonsterCollectionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emMonsterMark>() {
  return _emMonsterMark_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emMoveType>() {
  return _emMoveType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCoolingType>() {
  return _emCoolingType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emGameStateType>() {
  return _emGameStateType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emStateBuffAttr>() {
  return _emStateBuffAttr_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emRangeType>() {
  return _emRangeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSkillMark>() {
  return _emSkillMark_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSkillSpareParamType>() {
  return _emSkillSpareParamType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSkillBehavior>() {
  return _emSkillBehavior_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTargetSelectType>() {
  return _emTargetSelectType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTargetCategory>() {
  return _emTargetCategory_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSkillNoticeType>() {
  return _emSkillNoticeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSkillUseType>() {
  return _emSkillUseType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSkillType>() {
  return _emSkillType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSkillDirStrategy>() {
  return _emSkillDirStrategy_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSkillCompositeType>() {
  return _emSkillCompositeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSkillTimeType>() {
  return _emSkillTimeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSkillEffectType>() {
  return _emSkillEffectType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBuffDifRepeatType>() {
  return _emBuffDifRepeatType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBuffSameRepeatType>() {
  return _emBuffSameRepeatType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBuffMark>() {
  return _emBuffMark_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBuffCat>() {
  return _emBuffCat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBuffCriticalConditionType>() {
  return _emBuffCriticalConditionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBuffType>() {
  return _emBuffType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBuffMoveType>() {
  return _emBuffMoveType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBuffMoveTargetType>() {
  return _emBuffMoveTargetType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emEffectType>() {
  return _emEffectType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBuffMutualType>() {
  return _emBuffMutualType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emDirectionType>() {
  return _emDirectionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emEffectAddMoveType>() {
  return _emEffectAddMoveType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emEffectTargetType>() {
  return _emEffectTargetType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBuffDeleteTriggerEventType>() {
  return _emBuffDeleteTriggerEventType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTrapAngleType>() {
  return _emTrapAngleType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTrapMoveType>() {
  return _emTrapMoveType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTrapStopType>() {
  return _emTrapStopType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTrapSpareParamType>() {
  return _emTrapSpareParamType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPKType>() {
  return _emPKType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emModifyType>() {
  return _emModifyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emMailType>() {
  return _emMailType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emItemFlag>() {
  return _emItemFlag_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emItemMark>() {
  return _emItemMark_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emItemQualityType>() {
  return _emItemQualityType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emItemType>() {
  return _emItemType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTreasureType>() {
  return _emTreasureType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBingfuType>() {
  return _emBingfuType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emMaterialType>() {
  return _emMaterialType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emEquipType>() {
  return _emEquipType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emEquipSubType>() {
  return _emEquipSubType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emItemUseType>() {
  return _emItemUseType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emItemPackType>() {
  return _emItemPackType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCopymapType>() {
  return _emCopymapType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCopymapMainType>() {
  return _emCopymapMainType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCopymapResetType>() {
  return _emCopymapResetType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCopymapEnterType>() {
  return _emCopymapEnterType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCopymapEnterCopyType>() {
  return _emCopymapEnterCopyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCopymapTeamRemainConfirmType>() {
  return _emCopymapTeamRemainConfirmType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCopymapCopymapTimeType>() {
  return _emCopymapCopymapTimeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCopymapEnterReason>() {
  return _emCopymapEnterReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCopymapState>() {
  return _emCopymapState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCopymapDifficulty>() {
  return _emCopymapDifficulty_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCopymapPrefectType>() {
  return _emCopymapPrefectType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTradeEndReason>() {
  return _emTradeEndReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSaleMoneyType>() {
  return _emSaleMoneyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPlayerShapeType>() {
  return _emPlayerShapeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSaleMoneyLogType>() {
  return _emSaleMoneyLogType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTopListType>() {
  return _emTopListType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTopListTimeResetType>() {
  return _emTopListTimeResetType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emAuctionLogType>() {
  return _emAuctionLogType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emFriendType>() {
  return _emFriendType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emAuctionSortType>() {
  return _emAuctionSortType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emWulueSchemeType>() {
  return _emWulueSchemeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emWulueType>() {
  return _emWulueType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emReliveType>() {
  return _emReliveType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emWulueYaodianType>() {
  return _emWulueYaodianType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emQuestTargetType>() {
  return _emQuestTargetType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emQuestTargetAction>() {
  return _emQuestTargetAction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emEquipInheritMark>() {
  return _emEquipInheritMark_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emEquipMakeMark>() {
  return _emEquipMakeMark_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emQuestType>() {
  return _emQuestType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emFlyType>() {
  return _emFlyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSystemSwitchState>() {
  return _emSystemSwitchState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSystemSwitchType>() {
  return _emSystemSwitchType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emAIStateType>() {
  return _emAIStateType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emAIIdleType>() {
  return _emAIIdleType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emAISelectTargetType>() {
  return _emAISelectTargetType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTrapDestroyType>() {
  return _emTrapDestroyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCorps>() {
  return _emCorps_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCorpsJob>() {
  return _emCorpsJob_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emFactionJob>() {
  return _emFactionJob_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emFactionPrivilege>() {
  return _emFactionPrivilege_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emFactionMoneyType>() {
  return _emFactionMoneyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emFactionSkillState>() {
  return _emFactionSkillState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emFactionEvent>() {
  return _emFactionEvent_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emDoingType>() {
  return _emDoingType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emDoingObject>() {
  return _emDoingObject_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emLocatePlayerReason>() {
  return _emLocatePlayerReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emGoodModel>() {
  return _emGoodModel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emStoreCircleType>() {
  return _emStoreCircleType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCopymapCompleteType>() {
  return _emCopymapCompleteType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTeamMark>() {
  return _emTeamMark_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPrizeType>() {
  return _emPrizeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPrizeAcceptType>() {
  return _emPrizeAcceptType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPrizeMark>() {
  return _emPrizeMark_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPrizeKeyCopymapType>() {
  return _emPrizeKeyCopymapType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSceneMapMarkType>() {
  return _emSceneMapMarkType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emDartHardType>() {
  return _emDartHardType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emDartBuffType>() {
  return _emDartBuffType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emDartBuffLayerType>() {
  return _emDartBuffLayerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emDartPrizeType>() {
  return _emDartPrizeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emDartActivityType>() {
  return _emDartActivityType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emDartPVPType>() {
  return _emDartPVPType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emDartLogType>() {
  return _emDartLogType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emMonsterDeadDropDistribute>() {
  return _emMonsterDeadDropDistribute_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emMonsterDeadQuestDistribute>() {
  return _emMonsterDeadQuestDistribute_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emFactionBossTopType>() {
  return _emFactionBossTopType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emFactionBossAwardType>() {
  return _emFactionBossAwardType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emQinggongActionType>() {
  return _emQinggongActionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emGameBattleAttrFromType>() {
  return _emGameBattleAttrFromType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCollectionType>() {
  return _emCollectionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTeamTargetMainType>() {
  return _emTeamTargetMainType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTitleConditionType>() {
  return _emTitleConditionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTeamMemberRelationType>() {
  return _emTeamMemberRelationType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emClimbTowerClass>() {
  return _emClimbTowerClass_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emClimbTowerPrizeType>() {
  return _emClimbTowerPrizeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emClimbTowerLogType>() {
  return _emClimbTowerLogType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emStoreType>() {
  return _emStoreType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emTreasurePrizeType>() {
  return _emTreasurePrizeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emCastMessageType>() {
  return _emCastMessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emWorldBossEventType>() {
  return _emWorldBossEventType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emActivityType>() {
  return _emActivityType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emManorOccupyStatus>() {
  return _emManorOccupyStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emManorType>() {
  return _emManorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emManorFactionType>() {
  return _emManorFactionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emManorBroadcastPromptType>() {
  return _emManorBroadcastPromptType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emManorMailType>() {
  return _emManorMailType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPvpWarType>() {
  return _emPvpWarType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPvpCamp>() {
  return _emPvpCamp_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameDefine_2eproto__INCLUDED
