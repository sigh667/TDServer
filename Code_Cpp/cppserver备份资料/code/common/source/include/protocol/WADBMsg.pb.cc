// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WADBMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBW2DBStartLoadAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2DBStartLoadAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2DBAccountLoadAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2DBAccountLoadAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2DBPlayerCreateAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2DBPlayerCreateAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2DBPlayerSelectAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2DBPlayerSelectAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2DBPlayerDelAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2DBPlayerDelAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDB2WAccountLoadAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDB2WAccountLoadAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDB2WPlayerCreateAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDB2WPlayerCreateAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDB2WPlayerSelectAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDB2WPlayerSelectAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDB2WPPlayerDelAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDB2WPPlayerDelAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDBAWFactionBossData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDBAWFactionBossData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDBAWFactionBossDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDBAWFactionBossDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionChallengerDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionChallengerDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBManorInfoDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBManorInfoDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDBAWManorDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDBAWManorDataList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WADBMsg_2eproto() {
  protobuf_AddDesc_WADBMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WADBMsg.proto");
  GOOGLE_CHECK(file != NULL);
  PBW2DBStartLoadAsk_descriptor_ = file->message_type(0);
  static const int PBW2DBStartLoadAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBStartLoadAsk, worldid_),
  };
  PBW2DBStartLoadAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2DBStartLoadAsk_descriptor_,
      PBW2DBStartLoadAsk::default_instance_,
      PBW2DBStartLoadAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBStartLoadAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBStartLoadAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2DBStartLoadAsk));
  PBW2DBAccountLoadAsk_descriptor_ = file->message_type(1);
  static const int PBW2DBAccountLoadAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBAccountLoadAsk, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBAccountLoadAsk, accountid_),
  };
  PBW2DBAccountLoadAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2DBAccountLoadAsk_descriptor_,
      PBW2DBAccountLoadAsk::default_instance_,
      PBW2DBAccountLoadAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBAccountLoadAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBAccountLoadAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2DBAccountLoadAsk));
  PBW2DBPlayerCreateAsk_descriptor_ = file->message_type(2);
  static const int PBW2DBPlayerCreateAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBPlayerCreateAsk, accountflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBPlayerCreateAsk, playerbase_),
  };
  PBW2DBPlayerCreateAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2DBPlayerCreateAsk_descriptor_,
      PBW2DBPlayerCreateAsk::default_instance_,
      PBW2DBPlayerCreateAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBPlayerCreateAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBPlayerCreateAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2DBPlayerCreateAsk));
  PBW2DBPlayerSelectAsk_descriptor_ = file->message_type(3);
  static const int PBW2DBPlayerSelectAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBPlayerSelectAsk, playerid_),
  };
  PBW2DBPlayerSelectAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2DBPlayerSelectAsk_descriptor_,
      PBW2DBPlayerSelectAsk::default_instance_,
      PBW2DBPlayerSelectAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBPlayerSelectAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBPlayerSelectAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2DBPlayerSelectAsk));
  PBW2DBPlayerDelAsk_descriptor_ = file->message_type(4);
  static const int PBW2DBPlayerDelAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBPlayerDelAsk, playerid_),
  };
  PBW2DBPlayerDelAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2DBPlayerDelAsk_descriptor_,
      PBW2DBPlayerDelAsk::default_instance_,
      PBW2DBPlayerDelAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBPlayerDelAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2DBPlayerDelAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2DBPlayerDelAsk));
  PBDB2WAccountLoadAck_descriptor_ = file->message_type(5);
  static const int PBDB2WAccountLoadAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WAccountLoadAck, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WAccountLoadAck, playerbase_),
  };
  PBDB2WAccountLoadAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDB2WAccountLoadAck_descriptor_,
      PBDB2WAccountLoadAck::default_instance_,
      PBDB2WAccountLoadAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WAccountLoadAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WAccountLoadAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDB2WAccountLoadAck));
  PBDB2WPlayerCreateAck_descriptor_ = file->message_type(6);
  static const int PBDB2WPlayerCreateAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WPlayerCreateAck, accountflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WPlayerCreateAck, playerdisplay_),
  };
  PBDB2WPlayerCreateAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDB2WPlayerCreateAck_descriptor_,
      PBDB2WPlayerCreateAck::default_instance_,
      PBDB2WPlayerCreateAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WPlayerCreateAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WPlayerCreateAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDB2WPlayerCreateAck));
  PBDB2WPlayerSelectAck_descriptor_ = file->message_type(7);
  static const int PBDB2WPlayerSelectAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WPlayerSelectAck, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WPlayerSelectAck, playerid_),
  };
  PBDB2WPlayerSelectAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDB2WPlayerSelectAck_descriptor_,
      PBDB2WPlayerSelectAck::default_instance_,
      PBDB2WPlayerSelectAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WPlayerSelectAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WPlayerSelectAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDB2WPlayerSelectAck));
  PBDB2WPPlayerDelAck_descriptor_ = file->message_type(8);
  static const int PBDB2WPPlayerDelAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WPPlayerDelAck, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WPPlayerDelAck, playerid_),
  };
  PBDB2WPPlayerDelAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDB2WPPlayerDelAck_descriptor_,
      PBDB2WPPlayerDelAck::default_instance_,
      PBDB2WPPlayerDelAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WPPlayerDelAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDB2WPPlayerDelAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDB2WPPlayerDelAck));
  PBDBAWFactionBossData_descriptor_ = file->message_type(9);
  static const int PBDBAWFactionBossData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAWFactionBossData, toptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAWFactionBossData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAWFactionBossData, data_),
  };
  PBDBAWFactionBossData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDBAWFactionBossData_descriptor_,
      PBDBAWFactionBossData::default_instance_,
      PBDBAWFactionBossData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAWFactionBossData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAWFactionBossData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDBAWFactionBossData));
  PBDBAWFactionBossDataList_descriptor_ = file->message_type(10);
  static const int PBDBAWFactionBossDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAWFactionBossDataList, data_),
  };
  PBDBAWFactionBossDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDBAWFactionBossDataList_descriptor_,
      PBDBAWFactionBossDataList::default_instance_,
      PBDBAWFactionBossDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAWFactionBossDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAWFactionBossDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDBAWFactionBossDataList));
  PBFactionChallengerDB_descriptor_ = file->message_type(11);
  static const int PBFactionChallengerDB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionChallengerDB, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionChallengerDB, applytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionChallengerDB, ischallenger_),
  };
  PBFactionChallengerDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionChallengerDB_descriptor_,
      PBFactionChallengerDB::default_instance_,
      PBFactionChallengerDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionChallengerDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionChallengerDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionChallengerDB));
  PBManorInfoDB_descriptor_ = file->message_type(12);
  static const int PBManorInfoDB_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfoDB, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfoDB, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfoDB, ownerfactionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfoDB, challengers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfoDB, weekprizetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfoDB, dailyprizetime_),
  };
  PBManorInfoDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBManorInfoDB_descriptor_,
      PBManorInfoDB::default_instance_,
      PBManorInfoDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfoDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfoDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBManorInfoDB));
  PBDBAWManorDataList_descriptor_ = file->message_type(13);
  static const int PBDBAWManorDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAWManorDataList, allmanors_),
  };
  PBDBAWManorDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDBAWManorDataList_descriptor_,
      PBDBAWManorDataList::default_instance_,
      PBDBAWManorDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAWManorDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDBAWManorDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDBAWManorDataList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WADBMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2DBStartLoadAsk_descriptor_, &PBW2DBStartLoadAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2DBAccountLoadAsk_descriptor_, &PBW2DBAccountLoadAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2DBPlayerCreateAsk_descriptor_, &PBW2DBPlayerCreateAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2DBPlayerSelectAsk_descriptor_, &PBW2DBPlayerSelectAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2DBPlayerDelAsk_descriptor_, &PBW2DBPlayerDelAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDB2WAccountLoadAck_descriptor_, &PBDB2WAccountLoadAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDB2WPlayerCreateAck_descriptor_, &PBDB2WPlayerCreateAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDB2WPlayerSelectAck_descriptor_, &PBDB2WPlayerSelectAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDB2WPPlayerDelAck_descriptor_, &PBDB2WPPlayerDelAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDBAWFactionBossData_descriptor_, &PBDBAWFactionBossData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDBAWFactionBossDataList_descriptor_, &PBDBAWFactionBossDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionChallengerDB_descriptor_, &PBFactionChallengerDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBManorInfoDB_descriptor_, &PBManorInfoDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDBAWManorDataList_descriptor_, &PBDBAWManorDataList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WADBMsg_2eproto() {
  delete PBW2DBStartLoadAsk::default_instance_;
  delete PBW2DBStartLoadAsk_reflection_;
  delete PBW2DBAccountLoadAsk::default_instance_;
  delete PBW2DBAccountLoadAsk_reflection_;
  delete PBW2DBPlayerCreateAsk::default_instance_;
  delete PBW2DBPlayerCreateAsk_reflection_;
  delete PBW2DBPlayerSelectAsk::default_instance_;
  delete PBW2DBPlayerSelectAsk_reflection_;
  delete PBW2DBPlayerDelAsk::default_instance_;
  delete PBW2DBPlayerDelAsk_reflection_;
  delete PBDB2WAccountLoadAck::default_instance_;
  delete PBDB2WAccountLoadAck_reflection_;
  delete PBDB2WPlayerCreateAck::default_instance_;
  delete PBDB2WPlayerCreateAck_reflection_;
  delete PBDB2WPlayerSelectAck::default_instance_;
  delete PBDB2WPlayerSelectAck_reflection_;
  delete PBDB2WPPlayerDelAck::default_instance_;
  delete PBDB2WPPlayerDelAck_reflection_;
  delete PBDBAWFactionBossData::default_instance_;
  delete PBDBAWFactionBossData_reflection_;
  delete PBDBAWFactionBossDataList::default_instance_;
  delete PBDBAWFactionBossDataList_reflection_;
  delete PBFactionChallengerDB::default_instance_;
  delete PBFactionChallengerDB_reflection_;
  delete PBManorInfoDB::default_instance_;
  delete PBManorInfoDB_reflection_;
  delete PBDBAWManorDataList::default_instance_;
  delete PBDBAWManorDataList_reflection_;
}

void protobuf_AddDesc_WADBMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PlayerStruct_2eproto();
  ::protobuf_AddDesc_AccountStruct_2eproto();
  ::protobuf_AddDesc_Faction_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rWADBMsg.proto\032\022PlayerStruct.proto\032\023Acc"
    "ountStruct.proto\032\rFaction.proto\"%\n\022PBW2D"
    "BStartLoadAsk\022\017\n\007worldid\030\001 \003(\r\":\n\024PBW2DB"
    "AccountLoadAsk\022\017\n\007worldid\030\001 \001(\r\022\021\n\taccou"
    "ntid\030\002 \001(\r\"_\n\025PBW2DBPlayerCreateAsk\022#\n\013a"
    "ccountflag\030\001 \001(\0132\016.PBAccountFlag\022!\n\nplay"
    "erBase\030\002 \001(\0132\r.PBPlayerBase\")\n\025PBW2DBPla"
    "yerSelectAsk\022\020\n\010playerid\030\001 \001(\r\"&\n\022PBW2DB"
    "PlayerDelAsk\022\020\n\010playerid\030\001 \001(\r\"L\n\024PBDB2W"
    "AccountLoadAck\022\021\n\taccountid\030\001 \001(\r\022!\n\npla"
    "yerbase\030\002 \003(\0132\r.PBPlayerBase\"e\n\025PBDB2WPl"
    "ayerCreateAck\022#\n\013accountflag\030\001 \001(\0132\016.PBA"
    "ccountFlag\022\'\n\rplayerdisplay\030\002 \001(\0132\020.PBPl"
    "ayerDisplay\"<\n\025PBDB2WPlayerSelectAck\022\021\n\t"
    "accountid\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\r\":\n\023PBD"
    "B2WPPlayerDelAck\022\021\n\taccountid\030\001 \001(\r\022\020\n\010p"
    "layerid\030\002 \001(\r\"B\n\025PBDBAWFactionBossData\022\017"
    "\n\007toptype\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\014\n\004data\030\003 \001("
    "\014\"A\n\031PBDBAWFactionBossDataList\022$\n\004data\030\001"
    " \003(\0132\026.PBDBAWFactionBossData\"S\n\025PBFactio"
    "nChallengerDB\022\021\n\tfactionid\030\001 \001(\r\022\021\n\tappl"
    "ytime\030\002 \001(\r\022\024\n\014ischallenger\030\003 \001(\010\"\244\001\n\rPB"
    "ManorInfoDB\022\017\n\007manorid\030\001 \001(\r\022\016\n\006status\030\002"
    " \001(\r\022\026\n\016ownerfactionid\030\003 \001(\r\022+\n\013challeng"
    "ers\030\004 \003(\0132\026.PBFactionChallengerDB\022\025\n\rwee"
    "kprizetime\030\005 \001(\004\022\026\n\016dailyprizetime\030\006 \001(\004"
    "\"8\n\023PBDBAWManorDataList\022!\n\tallmanors\030\001 \003"
    "(\0132\016.PBManorInfoDB", 1098);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WADBMsg.proto", &protobuf_RegisterTypes);
  PBW2DBStartLoadAsk::default_instance_ = new PBW2DBStartLoadAsk();
  PBW2DBAccountLoadAsk::default_instance_ = new PBW2DBAccountLoadAsk();
  PBW2DBPlayerCreateAsk::default_instance_ = new PBW2DBPlayerCreateAsk();
  PBW2DBPlayerSelectAsk::default_instance_ = new PBW2DBPlayerSelectAsk();
  PBW2DBPlayerDelAsk::default_instance_ = new PBW2DBPlayerDelAsk();
  PBDB2WAccountLoadAck::default_instance_ = new PBDB2WAccountLoadAck();
  PBDB2WPlayerCreateAck::default_instance_ = new PBDB2WPlayerCreateAck();
  PBDB2WPlayerSelectAck::default_instance_ = new PBDB2WPlayerSelectAck();
  PBDB2WPPlayerDelAck::default_instance_ = new PBDB2WPPlayerDelAck();
  PBDBAWFactionBossData::default_instance_ = new PBDBAWFactionBossData();
  PBDBAWFactionBossDataList::default_instance_ = new PBDBAWFactionBossDataList();
  PBFactionChallengerDB::default_instance_ = new PBFactionChallengerDB();
  PBManorInfoDB::default_instance_ = new PBManorInfoDB();
  PBDBAWManorDataList::default_instance_ = new PBDBAWManorDataList();
  PBW2DBStartLoadAsk::default_instance_->InitAsDefaultInstance();
  PBW2DBAccountLoadAsk::default_instance_->InitAsDefaultInstance();
  PBW2DBPlayerCreateAsk::default_instance_->InitAsDefaultInstance();
  PBW2DBPlayerSelectAsk::default_instance_->InitAsDefaultInstance();
  PBW2DBPlayerDelAsk::default_instance_->InitAsDefaultInstance();
  PBDB2WAccountLoadAck::default_instance_->InitAsDefaultInstance();
  PBDB2WPlayerCreateAck::default_instance_->InitAsDefaultInstance();
  PBDB2WPlayerSelectAck::default_instance_->InitAsDefaultInstance();
  PBDB2WPPlayerDelAck::default_instance_->InitAsDefaultInstance();
  PBDBAWFactionBossData::default_instance_->InitAsDefaultInstance();
  PBDBAWFactionBossDataList::default_instance_->InitAsDefaultInstance();
  PBFactionChallengerDB::default_instance_->InitAsDefaultInstance();
  PBManorInfoDB::default_instance_->InitAsDefaultInstance();
  PBDBAWManorDataList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WADBMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WADBMsg_2eproto {
  StaticDescriptorInitializer_WADBMsg_2eproto() {
    protobuf_AddDesc_WADBMsg_2eproto();
  }
} static_descriptor_initializer_WADBMsg_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBW2DBStartLoadAsk::kWorldidFieldNumber;
#endif  // !_MSC_VER

PBW2DBStartLoadAsk::PBW2DBStartLoadAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2DBStartLoadAsk::InitAsDefaultInstance() {
}

PBW2DBStartLoadAsk::PBW2DBStartLoadAsk(const PBW2DBStartLoadAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2DBStartLoadAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2DBStartLoadAsk::~PBW2DBStartLoadAsk() {
  SharedDtor();
}

void PBW2DBStartLoadAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2DBStartLoadAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2DBStartLoadAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2DBStartLoadAsk_descriptor_;
}

const PBW2DBStartLoadAsk& PBW2DBStartLoadAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBW2DBStartLoadAsk* PBW2DBStartLoadAsk::default_instance_ = NULL;

PBW2DBStartLoadAsk* PBW2DBStartLoadAsk::New() const {
  return new PBW2DBStartLoadAsk;
}

void PBW2DBStartLoadAsk::Clear() {
  worldid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2DBStartLoadAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 worldid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_worldid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_worldid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_worldid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2DBStartLoadAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 worldid = 1;
  for (int i = 0; i < this->worldid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->worldid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2DBStartLoadAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 worldid = 1;
  for (int i = 0; i < this->worldid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->worldid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2DBStartLoadAsk::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 worldid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->worldid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->worldid(i));
    }
    total_size += 1 * this->worldid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2DBStartLoadAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2DBStartLoadAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2DBStartLoadAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2DBStartLoadAsk::MergeFrom(const PBW2DBStartLoadAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldid_.MergeFrom(from.worldid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2DBStartLoadAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2DBStartLoadAsk::CopyFrom(const PBW2DBStartLoadAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2DBStartLoadAsk::IsInitialized() const {
  
  return true;
}

void PBW2DBStartLoadAsk::Swap(PBW2DBStartLoadAsk* other) {
  if (other != this) {
    worldid_.Swap(&other->worldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2DBStartLoadAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2DBStartLoadAsk_descriptor_;
  metadata.reflection = PBW2DBStartLoadAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2DBAccountLoadAsk::kWorldidFieldNumber;
const int PBW2DBAccountLoadAsk::kAccountidFieldNumber;
#endif  // !_MSC_VER

PBW2DBAccountLoadAsk::PBW2DBAccountLoadAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2DBAccountLoadAsk::InitAsDefaultInstance() {
}

PBW2DBAccountLoadAsk::PBW2DBAccountLoadAsk(const PBW2DBAccountLoadAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2DBAccountLoadAsk::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2DBAccountLoadAsk::~PBW2DBAccountLoadAsk() {
  SharedDtor();
}

void PBW2DBAccountLoadAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2DBAccountLoadAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2DBAccountLoadAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2DBAccountLoadAsk_descriptor_;
}

const PBW2DBAccountLoadAsk& PBW2DBAccountLoadAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBW2DBAccountLoadAsk* PBW2DBAccountLoadAsk::default_instance_ = NULL;

PBW2DBAccountLoadAsk* PBW2DBAccountLoadAsk::New() const {
  return new PBW2DBAccountLoadAsk;
}

void PBW2DBAccountLoadAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2DBAccountLoadAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }
      
      // optional uint32 accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2DBAccountLoadAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 worldid = 1;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldid(), output);
  }
  
  // optional uint32 accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2DBAccountLoadAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 worldid = 1;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldid(), target);
  }
  
  // optional uint32 accountid = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2DBAccountLoadAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 worldid = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2DBAccountLoadAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2DBAccountLoadAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2DBAccountLoadAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2DBAccountLoadAsk::MergeFrom(const PBW2DBAccountLoadAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2DBAccountLoadAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2DBAccountLoadAsk::CopyFrom(const PBW2DBAccountLoadAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2DBAccountLoadAsk::IsInitialized() const {
  
  return true;
}

void PBW2DBAccountLoadAsk::Swap(PBW2DBAccountLoadAsk* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2DBAccountLoadAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2DBAccountLoadAsk_descriptor_;
  metadata.reflection = PBW2DBAccountLoadAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2DBPlayerCreateAsk::kAccountflagFieldNumber;
const int PBW2DBPlayerCreateAsk::kPlayerBaseFieldNumber;
#endif  // !_MSC_VER

PBW2DBPlayerCreateAsk::PBW2DBPlayerCreateAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2DBPlayerCreateAsk::InitAsDefaultInstance() {
  accountflag_ = const_cast< ::PBAccountFlag*>(&::PBAccountFlag::default_instance());
  playerbase_ = const_cast< ::PBPlayerBase*>(&::PBPlayerBase::default_instance());
}

PBW2DBPlayerCreateAsk::PBW2DBPlayerCreateAsk(const PBW2DBPlayerCreateAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2DBPlayerCreateAsk::SharedCtor() {
  _cached_size_ = 0;
  accountflag_ = NULL;
  playerbase_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2DBPlayerCreateAsk::~PBW2DBPlayerCreateAsk() {
  SharedDtor();
}

void PBW2DBPlayerCreateAsk::SharedDtor() {
  if (this != default_instance_) {
    delete accountflag_;
    delete playerbase_;
  }
}

void PBW2DBPlayerCreateAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2DBPlayerCreateAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2DBPlayerCreateAsk_descriptor_;
}

const PBW2DBPlayerCreateAsk& PBW2DBPlayerCreateAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBW2DBPlayerCreateAsk* PBW2DBPlayerCreateAsk::default_instance_ = NULL;

PBW2DBPlayerCreateAsk* PBW2DBPlayerCreateAsk::New() const {
  return new PBW2DBPlayerCreateAsk;
}

void PBW2DBPlayerCreateAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountflag()) {
      if (accountflag_ != NULL) accountflag_->::PBAccountFlag::Clear();
    }
    if (has_playerbase()) {
      if (playerbase_ != NULL) playerbase_->::PBPlayerBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2DBPlayerCreateAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBAccountFlag accountflag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accountflag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerBase;
        break;
      }
      
      // optional .PBPlayerBase playerBase = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerBase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2DBPlayerCreateAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBAccountFlag accountflag = 1;
  if (has_accountflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accountflag(), output);
  }
  
  // optional .PBPlayerBase playerBase = 2;
  if (has_playerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerbase(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2DBPlayerCreateAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBAccountFlag accountflag = 1;
  if (has_accountflag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accountflag(), target);
  }
  
  // optional .PBPlayerBase playerBase = 2;
  if (has_playerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerbase(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2DBPlayerCreateAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBAccountFlag accountflag = 1;
    if (has_accountflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accountflag());
    }
    
    // optional .PBPlayerBase playerBase = 2;
    if (has_playerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerbase());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2DBPlayerCreateAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2DBPlayerCreateAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2DBPlayerCreateAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2DBPlayerCreateAsk::MergeFrom(const PBW2DBPlayerCreateAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountflag()) {
      mutable_accountflag()->::PBAccountFlag::MergeFrom(from.accountflag());
    }
    if (from.has_playerbase()) {
      mutable_playerbase()->::PBPlayerBase::MergeFrom(from.playerbase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2DBPlayerCreateAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2DBPlayerCreateAsk::CopyFrom(const PBW2DBPlayerCreateAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2DBPlayerCreateAsk::IsInitialized() const {
  
  return true;
}

void PBW2DBPlayerCreateAsk::Swap(PBW2DBPlayerCreateAsk* other) {
  if (other != this) {
    std::swap(accountflag_, other->accountflag_);
    std::swap(playerbase_, other->playerbase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2DBPlayerCreateAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2DBPlayerCreateAsk_descriptor_;
  metadata.reflection = PBW2DBPlayerCreateAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2DBPlayerSelectAsk::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBW2DBPlayerSelectAsk::PBW2DBPlayerSelectAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2DBPlayerSelectAsk::InitAsDefaultInstance() {
}

PBW2DBPlayerSelectAsk::PBW2DBPlayerSelectAsk(const PBW2DBPlayerSelectAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2DBPlayerSelectAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2DBPlayerSelectAsk::~PBW2DBPlayerSelectAsk() {
  SharedDtor();
}

void PBW2DBPlayerSelectAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2DBPlayerSelectAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2DBPlayerSelectAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2DBPlayerSelectAsk_descriptor_;
}

const PBW2DBPlayerSelectAsk& PBW2DBPlayerSelectAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBW2DBPlayerSelectAsk* PBW2DBPlayerSelectAsk::default_instance_ = NULL;

PBW2DBPlayerSelectAsk* PBW2DBPlayerSelectAsk::New() const {
  return new PBW2DBPlayerSelectAsk;
}

void PBW2DBPlayerSelectAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2DBPlayerSelectAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2DBPlayerSelectAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2DBPlayerSelectAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2DBPlayerSelectAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2DBPlayerSelectAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2DBPlayerSelectAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2DBPlayerSelectAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2DBPlayerSelectAsk::MergeFrom(const PBW2DBPlayerSelectAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2DBPlayerSelectAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2DBPlayerSelectAsk::CopyFrom(const PBW2DBPlayerSelectAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2DBPlayerSelectAsk::IsInitialized() const {
  
  return true;
}

void PBW2DBPlayerSelectAsk::Swap(PBW2DBPlayerSelectAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2DBPlayerSelectAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2DBPlayerSelectAsk_descriptor_;
  metadata.reflection = PBW2DBPlayerSelectAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2DBPlayerDelAsk::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBW2DBPlayerDelAsk::PBW2DBPlayerDelAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2DBPlayerDelAsk::InitAsDefaultInstance() {
}

PBW2DBPlayerDelAsk::PBW2DBPlayerDelAsk(const PBW2DBPlayerDelAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2DBPlayerDelAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2DBPlayerDelAsk::~PBW2DBPlayerDelAsk() {
  SharedDtor();
}

void PBW2DBPlayerDelAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2DBPlayerDelAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2DBPlayerDelAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2DBPlayerDelAsk_descriptor_;
}

const PBW2DBPlayerDelAsk& PBW2DBPlayerDelAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBW2DBPlayerDelAsk* PBW2DBPlayerDelAsk::default_instance_ = NULL;

PBW2DBPlayerDelAsk* PBW2DBPlayerDelAsk::New() const {
  return new PBW2DBPlayerDelAsk;
}

void PBW2DBPlayerDelAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2DBPlayerDelAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2DBPlayerDelAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2DBPlayerDelAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2DBPlayerDelAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2DBPlayerDelAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2DBPlayerDelAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2DBPlayerDelAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2DBPlayerDelAsk::MergeFrom(const PBW2DBPlayerDelAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2DBPlayerDelAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2DBPlayerDelAsk::CopyFrom(const PBW2DBPlayerDelAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2DBPlayerDelAsk::IsInitialized() const {
  
  return true;
}

void PBW2DBPlayerDelAsk::Swap(PBW2DBPlayerDelAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2DBPlayerDelAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2DBPlayerDelAsk_descriptor_;
  metadata.reflection = PBW2DBPlayerDelAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDB2WAccountLoadAck::kAccountidFieldNumber;
const int PBDB2WAccountLoadAck::kPlayerbaseFieldNumber;
#endif  // !_MSC_VER

PBDB2WAccountLoadAck::PBDB2WAccountLoadAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDB2WAccountLoadAck::InitAsDefaultInstance() {
}

PBDB2WAccountLoadAck::PBDB2WAccountLoadAck(const PBDB2WAccountLoadAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDB2WAccountLoadAck::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDB2WAccountLoadAck::~PBDB2WAccountLoadAck() {
  SharedDtor();
}

void PBDB2WAccountLoadAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDB2WAccountLoadAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDB2WAccountLoadAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDB2WAccountLoadAck_descriptor_;
}

const PBDB2WAccountLoadAck& PBDB2WAccountLoadAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBDB2WAccountLoadAck* PBDB2WAccountLoadAck::default_instance_ = NULL;

PBDB2WAccountLoadAck* PBDB2WAccountLoadAck::New() const {
  return new PBDB2WAccountLoadAck;
}

void PBDB2WAccountLoadAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
  }
  playerbase_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDB2WAccountLoadAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerbase;
        break;
      }
      
      // repeated .PBPlayerBase playerbase = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerbase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerbase;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDB2WAccountLoadAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }
  
  // repeated .PBPlayerBase playerbase = 2;
  for (int i = 0; i < this->playerbase_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerbase(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDB2WAccountLoadAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // repeated .PBPlayerBase playerbase = 2;
  for (int i = 0; i < this->playerbase_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerbase(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDB2WAccountLoadAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
  }
  // repeated .PBPlayerBase playerbase = 2;
  total_size += 1 * this->playerbase_size();
  for (int i = 0; i < this->playerbase_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerbase(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDB2WAccountLoadAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDB2WAccountLoadAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDB2WAccountLoadAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDB2WAccountLoadAck::MergeFrom(const PBDB2WAccountLoadAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerbase_.MergeFrom(from.playerbase_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDB2WAccountLoadAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDB2WAccountLoadAck::CopyFrom(const PBDB2WAccountLoadAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDB2WAccountLoadAck::IsInitialized() const {
  
  return true;
}

void PBDB2WAccountLoadAck::Swap(PBDB2WAccountLoadAck* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    playerbase_.Swap(&other->playerbase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDB2WAccountLoadAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDB2WAccountLoadAck_descriptor_;
  metadata.reflection = PBDB2WAccountLoadAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDB2WPlayerCreateAck::kAccountflagFieldNumber;
const int PBDB2WPlayerCreateAck::kPlayerdisplayFieldNumber;
#endif  // !_MSC_VER

PBDB2WPlayerCreateAck::PBDB2WPlayerCreateAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDB2WPlayerCreateAck::InitAsDefaultInstance() {
  accountflag_ = const_cast< ::PBAccountFlag*>(&::PBAccountFlag::default_instance());
  playerdisplay_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBDB2WPlayerCreateAck::PBDB2WPlayerCreateAck(const PBDB2WPlayerCreateAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDB2WPlayerCreateAck::SharedCtor() {
  _cached_size_ = 0;
  accountflag_ = NULL;
  playerdisplay_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDB2WPlayerCreateAck::~PBDB2WPlayerCreateAck() {
  SharedDtor();
}

void PBDB2WPlayerCreateAck::SharedDtor() {
  if (this != default_instance_) {
    delete accountflag_;
    delete playerdisplay_;
  }
}

void PBDB2WPlayerCreateAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDB2WPlayerCreateAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDB2WPlayerCreateAck_descriptor_;
}

const PBDB2WPlayerCreateAck& PBDB2WPlayerCreateAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBDB2WPlayerCreateAck* PBDB2WPlayerCreateAck::default_instance_ = NULL;

PBDB2WPlayerCreateAck* PBDB2WPlayerCreateAck::New() const {
  return new PBDB2WPlayerCreateAck;
}

void PBDB2WPlayerCreateAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountflag()) {
      if (accountflag_ != NULL) accountflag_->::PBAccountFlag::Clear();
    }
    if (has_playerdisplay()) {
      if (playerdisplay_ != NULL) playerdisplay_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDB2WPlayerCreateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBAccountFlag accountflag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accountflag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerdisplay;
        break;
      }
      
      // optional .PBPlayerDisplay playerdisplay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerdisplay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdisplay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDB2WPlayerCreateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBAccountFlag accountflag = 1;
  if (has_accountflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accountflag(), output);
  }
  
  // optional .PBPlayerDisplay playerdisplay = 2;
  if (has_playerdisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerdisplay(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDB2WPlayerCreateAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBAccountFlag accountflag = 1;
  if (has_accountflag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accountflag(), target);
  }
  
  // optional .PBPlayerDisplay playerdisplay = 2;
  if (has_playerdisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerdisplay(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDB2WPlayerCreateAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBAccountFlag accountflag = 1;
    if (has_accountflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accountflag());
    }
    
    // optional .PBPlayerDisplay playerdisplay = 2;
    if (has_playerdisplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdisplay());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDB2WPlayerCreateAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDB2WPlayerCreateAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDB2WPlayerCreateAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDB2WPlayerCreateAck::MergeFrom(const PBDB2WPlayerCreateAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountflag()) {
      mutable_accountflag()->::PBAccountFlag::MergeFrom(from.accountflag());
    }
    if (from.has_playerdisplay()) {
      mutable_playerdisplay()->::PBPlayerDisplay::MergeFrom(from.playerdisplay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDB2WPlayerCreateAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDB2WPlayerCreateAck::CopyFrom(const PBDB2WPlayerCreateAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDB2WPlayerCreateAck::IsInitialized() const {
  
  return true;
}

void PBDB2WPlayerCreateAck::Swap(PBDB2WPlayerCreateAck* other) {
  if (other != this) {
    std::swap(accountflag_, other->accountflag_);
    std::swap(playerdisplay_, other->playerdisplay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDB2WPlayerCreateAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDB2WPlayerCreateAck_descriptor_;
  metadata.reflection = PBDB2WPlayerCreateAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDB2WPlayerSelectAck::kAccountidFieldNumber;
const int PBDB2WPlayerSelectAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBDB2WPlayerSelectAck::PBDB2WPlayerSelectAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDB2WPlayerSelectAck::InitAsDefaultInstance() {
}

PBDB2WPlayerSelectAck::PBDB2WPlayerSelectAck(const PBDB2WPlayerSelectAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDB2WPlayerSelectAck::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDB2WPlayerSelectAck::~PBDB2WPlayerSelectAck() {
  SharedDtor();
}

void PBDB2WPlayerSelectAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDB2WPlayerSelectAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDB2WPlayerSelectAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDB2WPlayerSelectAck_descriptor_;
}

const PBDB2WPlayerSelectAck& PBDB2WPlayerSelectAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBDB2WPlayerSelectAck* PBDB2WPlayerSelectAck::default_instance_ = NULL;

PBDB2WPlayerSelectAck* PBDB2WPlayerSelectAck::New() const {
  return new PBDB2WPlayerSelectAck;
}

void PBDB2WPlayerSelectAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDB2WPlayerSelectAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDB2WPlayerSelectAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDB2WPlayerSelectAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDB2WPlayerSelectAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDB2WPlayerSelectAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDB2WPlayerSelectAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDB2WPlayerSelectAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDB2WPlayerSelectAck::MergeFrom(const PBDB2WPlayerSelectAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDB2WPlayerSelectAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDB2WPlayerSelectAck::CopyFrom(const PBDB2WPlayerSelectAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDB2WPlayerSelectAck::IsInitialized() const {
  
  return true;
}

void PBDB2WPlayerSelectAck::Swap(PBDB2WPlayerSelectAck* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDB2WPlayerSelectAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDB2WPlayerSelectAck_descriptor_;
  metadata.reflection = PBDB2WPlayerSelectAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDB2WPPlayerDelAck::kAccountidFieldNumber;
const int PBDB2WPPlayerDelAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBDB2WPPlayerDelAck::PBDB2WPPlayerDelAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDB2WPPlayerDelAck::InitAsDefaultInstance() {
}

PBDB2WPPlayerDelAck::PBDB2WPPlayerDelAck(const PBDB2WPPlayerDelAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDB2WPPlayerDelAck::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDB2WPPlayerDelAck::~PBDB2WPPlayerDelAck() {
  SharedDtor();
}

void PBDB2WPPlayerDelAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDB2WPPlayerDelAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDB2WPPlayerDelAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDB2WPPlayerDelAck_descriptor_;
}

const PBDB2WPPlayerDelAck& PBDB2WPPlayerDelAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBDB2WPPlayerDelAck* PBDB2WPPlayerDelAck::default_instance_ = NULL;

PBDB2WPPlayerDelAck* PBDB2WPPlayerDelAck::New() const {
  return new PBDB2WPPlayerDelAck;
}

void PBDB2WPPlayerDelAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDB2WPPlayerDelAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDB2WPPlayerDelAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDB2WPPlayerDelAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDB2WPPlayerDelAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDB2WPPlayerDelAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDB2WPPlayerDelAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDB2WPPlayerDelAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDB2WPPlayerDelAck::MergeFrom(const PBDB2WPPlayerDelAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDB2WPPlayerDelAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDB2WPPlayerDelAck::CopyFrom(const PBDB2WPPlayerDelAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDB2WPPlayerDelAck::IsInitialized() const {
  
  return true;
}

void PBDB2WPPlayerDelAck::Swap(PBDB2WPPlayerDelAck* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDB2WPPlayerDelAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDB2WPPlayerDelAck_descriptor_;
  metadata.reflection = PBDB2WPPlayerDelAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDBAWFactionBossData::kToptypeFieldNumber;
const int PBDBAWFactionBossData::kIdFieldNumber;
const int PBDBAWFactionBossData::kDataFieldNumber;
#endif  // !_MSC_VER

PBDBAWFactionBossData::PBDBAWFactionBossData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDBAWFactionBossData::InitAsDefaultInstance() {
}

PBDBAWFactionBossData::PBDBAWFactionBossData(const PBDBAWFactionBossData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDBAWFactionBossData::SharedCtor() {
  _cached_size_ = 0;
  toptype_ = 0u;
  id_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDBAWFactionBossData::~PBDBAWFactionBossData() {
  SharedDtor();
}

void PBDBAWFactionBossData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PBDBAWFactionBossData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDBAWFactionBossData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDBAWFactionBossData_descriptor_;
}

const PBDBAWFactionBossData& PBDBAWFactionBossData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBDBAWFactionBossData* PBDBAWFactionBossData::default_instance_ = NULL;

PBDBAWFactionBossData* PBDBAWFactionBossData::New() const {
  return new PBDBAWFactionBossData;
}

void PBDBAWFactionBossData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    toptype_ = 0u;
    id_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDBAWFactionBossData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 toptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toptype_)));
          set_has_toptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }
      
      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDBAWFactionBossData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 toptype = 1;
  if (has_toptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->toptype(), output);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDBAWFactionBossData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 toptype = 1;
  if (has_toptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->toptype(), target);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDBAWFactionBossData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 toptype = 1;
    if (has_toptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toptype());
    }
    
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDBAWFactionBossData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDBAWFactionBossData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDBAWFactionBossData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDBAWFactionBossData::MergeFrom(const PBDBAWFactionBossData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toptype()) {
      set_toptype(from.toptype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDBAWFactionBossData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDBAWFactionBossData::CopyFrom(const PBDBAWFactionBossData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDBAWFactionBossData::IsInitialized() const {
  
  return true;
}

void PBDBAWFactionBossData::Swap(PBDBAWFactionBossData* other) {
  if (other != this) {
    std::swap(toptype_, other->toptype_);
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDBAWFactionBossData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDBAWFactionBossData_descriptor_;
  metadata.reflection = PBDBAWFactionBossData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDBAWFactionBossDataList::kDataFieldNumber;
#endif  // !_MSC_VER

PBDBAWFactionBossDataList::PBDBAWFactionBossDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDBAWFactionBossDataList::InitAsDefaultInstance() {
}

PBDBAWFactionBossDataList::PBDBAWFactionBossDataList(const PBDBAWFactionBossDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDBAWFactionBossDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDBAWFactionBossDataList::~PBDBAWFactionBossDataList() {
  SharedDtor();
}

void PBDBAWFactionBossDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDBAWFactionBossDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDBAWFactionBossDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDBAWFactionBossDataList_descriptor_;
}

const PBDBAWFactionBossDataList& PBDBAWFactionBossDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBDBAWFactionBossDataList* PBDBAWFactionBossDataList::default_instance_ = NULL;

PBDBAWFactionBossDataList* PBDBAWFactionBossDataList::New() const {
  return new PBDBAWFactionBossDataList;
}

void PBDBAWFactionBossDataList::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDBAWFactionBossDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBDBAWFactionBossData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDBAWFactionBossDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBDBAWFactionBossData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDBAWFactionBossDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBDBAWFactionBossData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDBAWFactionBossDataList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBDBAWFactionBossData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDBAWFactionBossDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDBAWFactionBossDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDBAWFactionBossDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDBAWFactionBossDataList::MergeFrom(const PBDBAWFactionBossDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDBAWFactionBossDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDBAWFactionBossDataList::CopyFrom(const PBDBAWFactionBossDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDBAWFactionBossDataList::IsInitialized() const {
  
  return true;
}

void PBDBAWFactionBossDataList::Swap(PBDBAWFactionBossDataList* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDBAWFactionBossDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDBAWFactionBossDataList_descriptor_;
  metadata.reflection = PBDBAWFactionBossDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionChallengerDB::kFactionidFieldNumber;
const int PBFactionChallengerDB::kApplytimeFieldNumber;
const int PBFactionChallengerDB::kIschallengerFieldNumber;
#endif  // !_MSC_VER

PBFactionChallengerDB::PBFactionChallengerDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionChallengerDB::InitAsDefaultInstance() {
}

PBFactionChallengerDB::PBFactionChallengerDB(const PBFactionChallengerDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionChallengerDB::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  applytime_ = 0u;
  ischallenger_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionChallengerDB::~PBFactionChallengerDB() {
  SharedDtor();
}

void PBFactionChallengerDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFactionChallengerDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionChallengerDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionChallengerDB_descriptor_;
}

const PBFactionChallengerDB& PBFactionChallengerDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBFactionChallengerDB* PBFactionChallengerDB::default_instance_ = NULL;

PBFactionChallengerDB* PBFactionChallengerDB::New() const {
  return new PBFactionChallengerDB;
}

void PBFactionChallengerDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    applytime_ = 0u;
    ischallenger_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionChallengerDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_applytime;
        break;
      }
      
      // optional uint32 applytime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applytime_)));
          set_has_applytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ischallenger;
        break;
      }
      
      // optional bool ischallenger = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ischallenger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischallenger_)));
          set_has_ischallenger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionChallengerDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }
  
  // optional uint32 applytime = 2;
  if (has_applytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->applytime(), output);
  }
  
  // optional bool ischallenger = 3;
  if (has_ischallenger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ischallenger(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionChallengerDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }
  
  // optional uint32 applytime = 2;
  if (has_applytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->applytime(), target);
  }
  
  // optional bool ischallenger = 3;
  if (has_ischallenger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ischallenger(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionChallengerDB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
    // optional uint32 applytime = 2;
    if (has_applytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applytime());
    }
    
    // optional bool ischallenger = 3;
    if (has_ischallenger()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionChallengerDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionChallengerDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionChallengerDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionChallengerDB::MergeFrom(const PBFactionChallengerDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_applytime()) {
      set_applytime(from.applytime());
    }
    if (from.has_ischallenger()) {
      set_ischallenger(from.ischallenger());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionChallengerDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionChallengerDB::CopyFrom(const PBFactionChallengerDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionChallengerDB::IsInitialized() const {
  
  return true;
}

void PBFactionChallengerDB::Swap(PBFactionChallengerDB* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(applytime_, other->applytime_);
    std::swap(ischallenger_, other->ischallenger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionChallengerDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionChallengerDB_descriptor_;
  metadata.reflection = PBFactionChallengerDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBManorInfoDB::kManoridFieldNumber;
const int PBManorInfoDB::kStatusFieldNumber;
const int PBManorInfoDB::kOwnerfactionidFieldNumber;
const int PBManorInfoDB::kChallengersFieldNumber;
const int PBManorInfoDB::kWeekprizetimeFieldNumber;
const int PBManorInfoDB::kDailyprizetimeFieldNumber;
#endif  // !_MSC_VER

PBManorInfoDB::PBManorInfoDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBManorInfoDB::InitAsDefaultInstance() {
}

PBManorInfoDB::PBManorInfoDB(const PBManorInfoDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBManorInfoDB::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  status_ = 0u;
  ownerfactionid_ = 0u;
  weekprizetime_ = GOOGLE_ULONGLONG(0);
  dailyprizetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBManorInfoDB::~PBManorInfoDB() {
  SharedDtor();
}

void PBManorInfoDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBManorInfoDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBManorInfoDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBManorInfoDB_descriptor_;
}

const PBManorInfoDB& PBManorInfoDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBManorInfoDB* PBManorInfoDB::default_instance_ = NULL;

PBManorInfoDB* PBManorInfoDB::New() const {
  return new PBManorInfoDB;
}

void PBManorInfoDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    status_ = 0u;
    ownerfactionid_ = 0u;
    weekprizetime_ = GOOGLE_ULONGLONG(0);
    dailyprizetime_ = GOOGLE_ULONGLONG(0);
  }
  challengers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBManorInfoDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ownerfactionid;
        break;
      }
      
      // optional uint32 ownerfactionid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerfactionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownerfactionid_)));
          set_has_ownerfactionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_challengers;
        break;
      }
      
      // repeated .PBFactionChallengerDB challengers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challengers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challengers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_challengers;
        if (input->ExpectTag(40)) goto parse_weekprizetime;
        break;
      }
      
      // optional uint64 weekprizetime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekprizetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weekprizetime_)));
          set_has_weekprizetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dailyprizetime;
        break;
      }
      
      // optional uint64 dailyprizetime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyprizetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dailyprizetime_)));
          set_has_dailyprizetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBManorInfoDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }
  
  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }
  
  // optional uint32 ownerfactionid = 3;
  if (has_ownerfactionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ownerfactionid(), output);
  }
  
  // repeated .PBFactionChallengerDB challengers = 4;
  for (int i = 0; i < this->challengers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->challengers(i), output);
  }
  
  // optional uint64 weekprizetime = 5;
  if (has_weekprizetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->weekprizetime(), output);
  }
  
  // optional uint64 dailyprizetime = 6;
  if (has_dailyprizetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->dailyprizetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBManorInfoDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }
  
  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }
  
  // optional uint32 ownerfactionid = 3;
  if (has_ownerfactionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ownerfactionid(), target);
  }
  
  // repeated .PBFactionChallengerDB challengers = 4;
  for (int i = 0; i < this->challengers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->challengers(i), target);
  }
  
  // optional uint64 weekprizetime = 5;
  if (has_weekprizetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->weekprizetime(), target);
  }
  
  // optional uint64 dailyprizetime = 6;
  if (has_dailyprizetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->dailyprizetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBManorInfoDB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorid = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }
    
    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // optional uint32 ownerfactionid = 3;
    if (has_ownerfactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ownerfactionid());
    }
    
    // optional uint64 weekprizetime = 5;
    if (has_weekprizetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weekprizetime());
    }
    
    // optional uint64 dailyprizetime = 6;
    if (has_dailyprizetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dailyprizetime());
    }
    
  }
  // repeated .PBFactionChallengerDB challengers = 4;
  total_size += 1 * this->challengers_size();
  for (int i = 0; i < this->challengers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->challengers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBManorInfoDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBManorInfoDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBManorInfoDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBManorInfoDB::MergeFrom(const PBManorInfoDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  challengers_.MergeFrom(from.challengers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_ownerfactionid()) {
      set_ownerfactionid(from.ownerfactionid());
    }
    if (from.has_weekprizetime()) {
      set_weekprizetime(from.weekprizetime());
    }
    if (from.has_dailyprizetime()) {
      set_dailyprizetime(from.dailyprizetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBManorInfoDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBManorInfoDB::CopyFrom(const PBManorInfoDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBManorInfoDB::IsInitialized() const {
  
  return true;
}

void PBManorInfoDB::Swap(PBManorInfoDB* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(status_, other->status_);
    std::swap(ownerfactionid_, other->ownerfactionid_);
    challengers_.Swap(&other->challengers_);
    std::swap(weekprizetime_, other->weekprizetime_);
    std::swap(dailyprizetime_, other->dailyprizetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBManorInfoDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBManorInfoDB_descriptor_;
  metadata.reflection = PBManorInfoDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDBAWManorDataList::kAllmanorsFieldNumber;
#endif  // !_MSC_VER

PBDBAWManorDataList::PBDBAWManorDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDBAWManorDataList::InitAsDefaultInstance() {
}

PBDBAWManorDataList::PBDBAWManorDataList(const PBDBAWManorDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDBAWManorDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDBAWManorDataList::~PBDBAWManorDataList() {
  SharedDtor();
}

void PBDBAWManorDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDBAWManorDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDBAWManorDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDBAWManorDataList_descriptor_;
}

const PBDBAWManorDataList& PBDBAWManorDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WADBMsg_2eproto();  return *default_instance_;
}

PBDBAWManorDataList* PBDBAWManorDataList::default_instance_ = NULL;

PBDBAWManorDataList* PBDBAWManorDataList::New() const {
  return new PBDBAWManorDataList;
}

void PBDBAWManorDataList::Clear() {
  allmanors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDBAWManorDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBManorInfoDB allmanors = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allmanors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allmanors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allmanors;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDBAWManorDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBManorInfoDB allmanors = 1;
  for (int i = 0; i < this->allmanors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allmanors(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDBAWManorDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBManorInfoDB allmanors = 1;
  for (int i = 0; i < this->allmanors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allmanors(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDBAWManorDataList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBManorInfoDB allmanors = 1;
  total_size += 1 * this->allmanors_size();
  for (int i = 0; i < this->allmanors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allmanors(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDBAWManorDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDBAWManorDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDBAWManorDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDBAWManorDataList::MergeFrom(const PBDBAWManorDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  allmanors_.MergeFrom(from.allmanors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDBAWManorDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDBAWManorDataList::CopyFrom(const PBDBAWManorDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDBAWManorDataList::IsInitialized() const {
  
  return true;
}

void PBDBAWManorDataList::Swap(PBDBAWManorDataList* other) {
  if (other != this) {
    allmanors_.Swap(&other->allmanors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDBAWManorDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDBAWManorDataList_descriptor_;
  metadata.reflection = PBDBAWManorDataList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
