// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GhostStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBGhostHPMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostHPMP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostQinggong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostQinggong_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostSpeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostPk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostPk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostFightPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostFightPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostPet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostTrap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostTrap_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostDartCar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostDartCar_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGhostList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGhostList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GhostStruct_2eproto() {
  protobuf_AddDesc_GhostStruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GhostStruct.proto");
  GOOGLE_CHECK(file != NULL);
  PBGhostHPMP_descriptor_ = file->message_type(0);
  static const int PBGhostHPMP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostHPMP, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostHPMP, curenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostHPMP, maxhp_),
  };
  PBGhostHPMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostHPMP_descriptor_,
      PBGhostHPMP::default_instance_,
      PBGhostHPMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostHPMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostHPMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostHPMP));
  PBGhostMove_descriptor_ = file->message_type(1);
  static const int PBGhostMove_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMove, movetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMove, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMove, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMove, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMove, dir_),
  };
  PBGhostMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostMove_descriptor_,
      PBGhostMove::default_instance_,
      PBGhostMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostMove));
  PBGhostQinggong_descriptor_ = file->message_type(2);
  static const int PBGhostQinggong_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostQinggong, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostQinggong, nextindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostQinggong, ms2jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostQinggong, totalms_),
  };
  PBGhostQinggong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostQinggong_descriptor_,
      PBGhostQinggong::default_instance_,
      PBGhostQinggong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostQinggong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostQinggong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostQinggong));
  PBGhostSpeed_descriptor_ = file->message_type(3);
  static const int PBGhostSpeed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostSpeed, walkspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostSpeed, runspeed_),
  };
  PBGhostSpeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostSpeed_descriptor_,
      PBGhostSpeed::default_instance_,
      PBGhostSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostSpeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostSpeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostSpeed));
  PBGhostUnit_descriptor_ = file->message_type(4);
  static const int PBGhostUnit_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostUnit, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostUnit, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostUnit, hpmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostUnit, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostUnit, move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostUnit, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostUnit, qinggong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostUnit, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostUnit, speed_),
  };
  PBGhostUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostUnit_descriptor_,
      PBGhostUnit::default_instance_,
      PBGhostUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostUnit));
  PBGhostPk_descriptor_ = file->message_type(5);
  static const int PBGhostPk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostPk, iskiller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostPk, pkvalue_),
  };
  PBGhostPk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostPk_descriptor_,
      PBGhostPk::default_instance_,
      PBGhostPk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostPk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostPk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostPk));
  PBGhostFightPower_descriptor_ = file->message_type(6);
  static const int PBGhostFightPower_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostFightPower, fightpower_),
  };
  PBGhostFightPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostFightPower_descriptor_,
      PBGhostFightPower::default_instance_,
      PBGhostFightPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostFightPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostFightPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostFightPower));
  PBGhostPlayer_descriptor_ = file->message_type(7);
  static const int PBGhostPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostPlayer, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostPlayer, pkinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostPlayer, fightpower_),
  };
  PBGhostPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostPlayer_descriptor_,
      PBGhostPlayer::default_instance_,
      PBGhostPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostPlayer));
  PBGhostMonster_descriptor_ = file->message_type(8);
  static const int PBGhostMonster_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMonster, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMonster, buildtick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMonster, superarmor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMonster, superarmortick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMonster, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMonster, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMonster, ownerplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMonster, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMonster, activeplayer_),
  };
  PBGhostMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostMonster_descriptor_,
      PBGhostMonster::default_instance_,
      PBGhostMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostMonster));
  PBGhostPet_descriptor_ = file->message_type(9);
  static const int PBGhostPet_offsets_[1] = {
  };
  PBGhostPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostPet_descriptor_,
      PBGhostPet::default_instance_,
      PBGhostPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostPet));
  PBGhostTrap_descriptor_ = file->message_type(10);
  static const int PBGhostTrap_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostTrap, trapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostTrap, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostTrap, buildtick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostTrap, startposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostTrap, startposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostTrap, startdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostTrap, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostTrap, high_),
  };
  PBGhostTrap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostTrap_descriptor_,
      PBGhostTrap::default_instance_,
      PBGhostTrap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostTrap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostTrap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostTrap));
  PBGhostItem_descriptor_ = file->message_type(11);
  static const int PBGhostItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostItem, dropid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostItem, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostItem, birthtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostItem, deadid_),
  };
  PBGhostItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostItem_descriptor_,
      PBGhostItem::default_instance_,
      PBGhostItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostItem));
  PBGhostDartCar_descriptor_ = file->message_type(12);
  static const int PBGhostDartCar_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostDartCar, avatarlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostDartCar, dartcarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostDartCar, prizelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostDartCar, leaderplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostDartCar, bufferidlist_),
  };
  PBGhostDartCar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostDartCar_descriptor_,
      PBGhostDartCar::default_instance_,
      PBGhostDartCar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostDartCar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostDartCar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostDartCar));
  PBGhostInfo_descriptor_ = file->message_type(13);
  static const int PBGhostInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostInfo, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostInfo, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostInfo, monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostInfo, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostInfo, trap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostInfo, dartcar_),
  };
  PBGhostInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostInfo_descriptor_,
      PBGhostInfo::default_instance_,
      PBGhostInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostInfo));
  PBGhostList_descriptor_ = file->message_type(14);
  static const int PBGhostList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostList, ghost_info_),
  };
  PBGhostList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGhostList_descriptor_,
      PBGhostList::default_instance_,
      PBGhostList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGhostList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGhostList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GhostStruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostHPMP_descriptor_, &PBGhostHPMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostMove_descriptor_, &PBGhostMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostQinggong_descriptor_, &PBGhostQinggong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostSpeed_descriptor_, &PBGhostSpeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostUnit_descriptor_, &PBGhostUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostPk_descriptor_, &PBGhostPk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostFightPower_descriptor_, &PBGhostFightPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostPlayer_descriptor_, &PBGhostPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostMonster_descriptor_, &PBGhostMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostPet_descriptor_, &PBGhostPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostTrap_descriptor_, &PBGhostTrap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostItem_descriptor_, &PBGhostItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostDartCar_descriptor_, &PBGhostDartCar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostInfo_descriptor_, &PBGhostInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGhostList_descriptor_, &PBGhostList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GhostStruct_2eproto() {
  delete PBGhostHPMP::default_instance_;
  delete PBGhostHPMP_reflection_;
  delete PBGhostMove::default_instance_;
  delete PBGhostMove_reflection_;
  delete PBGhostQinggong::default_instance_;
  delete PBGhostQinggong_reflection_;
  delete PBGhostSpeed::default_instance_;
  delete PBGhostSpeed_reflection_;
  delete PBGhostUnit::default_instance_;
  delete PBGhostUnit_reflection_;
  delete PBGhostPk::default_instance_;
  delete PBGhostPk_reflection_;
  delete PBGhostFightPower::default_instance_;
  delete PBGhostFightPower_reflection_;
  delete PBGhostPlayer::default_instance_;
  delete PBGhostPlayer_reflection_;
  delete PBGhostMonster::default_instance_;
  delete PBGhostMonster_reflection_;
  delete PBGhostPet::default_instance_;
  delete PBGhostPet_reflection_;
  delete PBGhostTrap::default_instance_;
  delete PBGhostTrap_reflection_;
  delete PBGhostItem::default_instance_;
  delete PBGhostItem_reflection_;
  delete PBGhostDartCar::default_instance_;
  delete PBGhostDartCar_reflection_;
  delete PBGhostInfo::default_instance_;
  delete PBGhostInfo_reflection_;
  delete PBGhostList::default_instance_;
  delete PBGhostList_reflection_;
}

void protobuf_AddDesc_GhostStruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_GameDefine_2eproto();
  ::protobuf_AddDesc_PlayerStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GhostStruct.proto\032\020GameDefine.proto\032\022P"
    "layerStruct.proto\"I\n\013PBGhostHPMP\022\r\n\005curh"
    "p\030\001 \002(\r\022\034\n\tcurenergy\030\002 \003(\0132\t.PBEnergy\022\r\n"
    "\005maxhp\030\003 \002(\r\"[\n\013PBGhostMove\022\020\n\010movetype\030"
    "\001 \001(\r\022\021\n\tmovespeed\030\002 \001(\005\022\014\n\004posx\030\003 \001(\002\022\014"
    "\n\004posy\030\004 \001(\002\022\013\n\003dir\030\005 \001(\002\"R\n\017PBGhostQing"
    "gong\022\n\n\002id\030\001 \001(\r\022\021\n\tnextindex\030\002 \001(\r\022\017\n\007m"
    "s2jump\030\003 \001(\r\022\017\n\007totalms\030\004 \001(\r\"3\n\014PBGhost"
    "Speed\022\021\n\twalkspeed\030\001 \001(\r\022\020\n\010runspeed\030\002 \001"
    "(\r\"\350\001\n\013PBGhostUnit\022\020\n\010unittype\030\001 \001(\r\022\016\n\006"
    "unitid\030\002 \001(\r\022\032\n\004hpmp\030\003 \001(\0132\014.PBGhostHPMP"
    "\022\036\n\004attr\030\004 \001(\0132\020.PBGhostGameAttr\022\032\n\004move"
    "\030\005 \001(\0132\014.PBGhostMove\022\r\n\005state\030\006 \001(\r\022\"\n\010q"
    "inggong\030\007 \001(\0132\020.PBGhostQinggong\022\016\n\006campi"
    "d\030\010 \001(\r\022\034\n\005speed\030\t \001(\0132\r.PBGhostSpeed\".\n"
    "\tPBGhostPk\022\020\n\010iskiller\030\001 \001(\010\022\017\n\007pkvalue\030"
    "\002 \001(\r\"\'\n\021PBGhostFightPower\022\022\n\nfightpower"
    "\030\001 \001(\r\"t\n\rPBGhostPlayer\022\037\n\006avatar\030\001 \001(\0132"
    "\017.PBPlayerAvatar\022\032\n\006pkinfo\030\002 \001(\0132\n.PBGho"
    "stPk\022&\n\nfightpower\030\003 \001(\0132\022.PBGhostFightP"
    "ower\"\322\001\n\016PBGhostMonster\022\021\n\tmonsterid\030\001 \001"
    "(\r\022\021\n\tbuildtick\030\002 \001(\004\022\022\n\nsuperarmor\030\003 \001("
    "\004\022\026\n\016superarmortick\030\004 \001(\004\022\016\n\006param1\030\005 \001("
    "\r\022\016\n\006param2\030\006 \001(\r\022\025\n\rownerplayerid\030\007 \001(\r"
    "\022\017\n\007newname\030\010 \001(\t\022&\n\014activeplayer\030\t \001(\0132"
    "\020.PBPlayerDisplay\"\014\n\nPBGhostPet\"\231\001\n\013PBGh"
    "ostTrap\022\016\n\006trapid\030\001 \001(\r\022\017\n\007ownerid\030\002 \001(\r"
    "\022\021\n\tbuildtick\030\003 \001(\004\022\021\n\tstartposx\030\004 \001(\002\022\021"
    "\n\tstartposy\030\005 \001(\002\022\020\n\010startdir\030\006 \001(\002\022\020\n\010d"
    "istance\030\007 \001(\002\022\014\n\004high\030\010 \001(\002\"Q\n\013PBGhostIt"
    "em\022\016\n\006dropid\030\001 \001(\r\022\017\n\007ownerid\030\002 \001(\r\022\021\n\tb"
    "irthtime\030\003 \001(\004\022\016\n\006deadid\030\004 \001(\r\"\212\001\n\016PBGho"
    "stDartCar\022#\n\navatarList\030\001 \003(\0132\017.PBPlayer"
    "Avatar\022\021\n\tdartCarID\030\002 \001(\r\022\022\n\nprizeLevel\030"
    "\003 \001(\r\022\026\n\016leaderPlayerID\030\004 \001(\r\022\024\n\014bufferI"
    "DList\030\005 \003(\r\"\337\001\n\013PBGhostInfo\022\032\n\004unit\030\001 \002("
    "\0132\014.PBGhostUnit\022\036\n\006player\030\002 \001(\0132\016.PBGhos"
    "tPlayer\022 \n\007monster\030\003 \001(\0132\017.PBGhostMonste"
    "r\022\030\n\003pet\030\004 \001(\0132\013.PBGhostPet\022\032\n\004trap\030\005 \001("
    "\0132\014.PBGhostTrap\022\032\n\004item\030\006 \001(\0132\014.PBGhostI"
    "tem\022 \n\007dartcar\030\007 \001(\0132\017.PBGhostDartCar\"/\n"
    "\013PBGhostList\022 \n\nghost_info\030\001 \003(\0132\014.PBGho"
    "stInfo", 1686);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GhostStruct.proto", &protobuf_RegisterTypes);
  PBGhostHPMP::default_instance_ = new PBGhostHPMP();
  PBGhostMove::default_instance_ = new PBGhostMove();
  PBGhostQinggong::default_instance_ = new PBGhostQinggong();
  PBGhostSpeed::default_instance_ = new PBGhostSpeed();
  PBGhostUnit::default_instance_ = new PBGhostUnit();
  PBGhostPk::default_instance_ = new PBGhostPk();
  PBGhostFightPower::default_instance_ = new PBGhostFightPower();
  PBGhostPlayer::default_instance_ = new PBGhostPlayer();
  PBGhostMonster::default_instance_ = new PBGhostMonster();
  PBGhostPet::default_instance_ = new PBGhostPet();
  PBGhostTrap::default_instance_ = new PBGhostTrap();
  PBGhostItem::default_instance_ = new PBGhostItem();
  PBGhostDartCar::default_instance_ = new PBGhostDartCar();
  PBGhostInfo::default_instance_ = new PBGhostInfo();
  PBGhostList::default_instance_ = new PBGhostList();
  PBGhostHPMP::default_instance_->InitAsDefaultInstance();
  PBGhostMove::default_instance_->InitAsDefaultInstance();
  PBGhostQinggong::default_instance_->InitAsDefaultInstance();
  PBGhostSpeed::default_instance_->InitAsDefaultInstance();
  PBGhostUnit::default_instance_->InitAsDefaultInstance();
  PBGhostPk::default_instance_->InitAsDefaultInstance();
  PBGhostFightPower::default_instance_->InitAsDefaultInstance();
  PBGhostPlayer::default_instance_->InitAsDefaultInstance();
  PBGhostMonster::default_instance_->InitAsDefaultInstance();
  PBGhostPet::default_instance_->InitAsDefaultInstance();
  PBGhostTrap::default_instance_->InitAsDefaultInstance();
  PBGhostItem::default_instance_->InitAsDefaultInstance();
  PBGhostDartCar::default_instance_->InitAsDefaultInstance();
  PBGhostInfo::default_instance_->InitAsDefaultInstance();
  PBGhostList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GhostStruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GhostStruct_2eproto {
  StaticDescriptorInitializer_GhostStruct_2eproto() {
    protobuf_AddDesc_GhostStruct_2eproto();
  }
} static_descriptor_initializer_GhostStruct_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBGhostHPMP::kCurhpFieldNumber;
const int PBGhostHPMP::kCurenergyFieldNumber;
const int PBGhostHPMP::kMaxhpFieldNumber;
#endif  // !_MSC_VER

PBGhostHPMP::PBGhostHPMP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostHPMP::InitAsDefaultInstance() {
}

PBGhostHPMP::PBGhostHPMP(const PBGhostHPMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostHPMP::SharedCtor() {
  _cached_size_ = 0;
  curhp_ = 0u;
  maxhp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostHPMP::~PBGhostHPMP() {
  SharedDtor();
}

void PBGhostHPMP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGhostHPMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostHPMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostHPMP_descriptor_;
}

const PBGhostHPMP& PBGhostHPMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostHPMP* PBGhostHPMP::default_instance_ = NULL;

PBGhostHPMP* PBGhostHPMP::New() const {
  return new PBGhostHPMP;
}

void PBGhostHPMP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curhp_ = 0u;
    maxhp_ = 0u;
  }
  curenergy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostHPMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 curhp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_curenergy;
        break;
      }
      
      // repeated .PBEnergy curenergy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curenergy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curenergy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_curenergy;
        if (input->ExpectTag(24)) goto parse_maxhp;
        break;
      }
      
      // required uint32 maxhp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostHPMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 curhp = 1;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curhp(), output);
  }
  
  // repeated .PBEnergy curenergy = 2;
  for (int i = 0; i < this->curenergy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->curenergy(i), output);
  }
  
  // required uint32 maxhp = 3;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxhp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostHPMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 curhp = 1;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curhp(), target);
  }
  
  // repeated .PBEnergy curenergy = 2;
  for (int i = 0; i < this->curenergy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->curenergy(i), target);
  }
  
  // required uint32 maxhp = 3;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxhp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostHPMP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 curhp = 1;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhp());
    }
    
    // required uint32 maxhp = 3;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }
    
  }
  // repeated .PBEnergy curenergy = 2;
  total_size += 1 * this->curenergy_size();
  for (int i = 0; i < this->curenergy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curenergy(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostHPMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostHPMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostHPMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostHPMP::MergeFrom(const PBGhostHPMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  curenergy_.MergeFrom(from.curenergy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostHPMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostHPMP::CopyFrom(const PBGhostHPMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostHPMP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void PBGhostHPMP::Swap(PBGhostHPMP* other) {
  if (other != this) {
    std::swap(curhp_, other->curhp_);
    curenergy_.Swap(&other->curenergy_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostHPMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostHPMP_descriptor_;
  metadata.reflection = PBGhostHPMP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostMove::kMovetypeFieldNumber;
const int PBGhostMove::kMovespeedFieldNumber;
const int PBGhostMove::kPosxFieldNumber;
const int PBGhostMove::kPosyFieldNumber;
const int PBGhostMove::kDirFieldNumber;
#endif  // !_MSC_VER

PBGhostMove::PBGhostMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostMove::InitAsDefaultInstance() {
}

PBGhostMove::PBGhostMove(const PBGhostMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostMove::SharedCtor() {
  _cached_size_ = 0;
  movetype_ = 0u;
  movespeed_ = 0;
  posx_ = 0;
  posy_ = 0;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostMove::~PBGhostMove() {
  SharedDtor();
}

void PBGhostMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGhostMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostMove_descriptor_;
}

const PBGhostMove& PBGhostMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostMove* PBGhostMove::default_instance_ = NULL;

PBGhostMove* PBGhostMove::New() const {
  return new PBGhostMove;
}

void PBGhostMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    movetype_ = 0u;
    movespeed_ = 0;
    posx_ = 0;
    posy_ = 0;
    dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 movetype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movetype_)));
          set_has_movetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_movespeed;
        break;
      }
      
      // optional int32 movespeed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_posx;
        break;
      }
      
      // optional float posx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posy;
        break;
      }
      
      // optional float posy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_dir;
        break;
      }
      
      // optional float dir = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 movetype = 1;
  if (has_movetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->movetype(), output);
  }
  
  // optional int32 movespeed = 2;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->movespeed(), output);
  }
  
  // optional float posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posx(), output);
  }
  
  // optional float posy = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posy(), output);
  }
  
  // optional float dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dir(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 movetype = 1;
  if (has_movetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->movetype(), target);
  }
  
  // optional int32 movespeed = 2;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->movespeed(), target);
  }
  
  // optional float posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posx(), target);
  }
  
  // optional float posy = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posy(), target);
  }
  
  // optional float dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dir(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostMove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 movetype = 1;
    if (has_movetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movetype());
    }
    
    // optional int32 movespeed = 2;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }
    
    // optional float posx = 3;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
    // optional float posy = 4;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
    // optional float dir = 5;
    if (has_dir()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostMove::MergeFrom(const PBGhostMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movetype()) {
      set_movetype(from.movetype());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostMove::CopyFrom(const PBGhostMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostMove::IsInitialized() const {
  
  return true;
}

void PBGhostMove::Swap(PBGhostMove* other) {
  if (other != this) {
    std::swap(movetype_, other->movetype_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostMove_descriptor_;
  metadata.reflection = PBGhostMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostQinggong::kIdFieldNumber;
const int PBGhostQinggong::kNextindexFieldNumber;
const int PBGhostQinggong::kMs2JumpFieldNumber;
const int PBGhostQinggong::kTotalmsFieldNumber;
#endif  // !_MSC_VER

PBGhostQinggong::PBGhostQinggong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostQinggong::InitAsDefaultInstance() {
}

PBGhostQinggong::PBGhostQinggong(const PBGhostQinggong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostQinggong::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  nextindex_ = 0u;
  ms2jump_ = 0u;
  totalms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostQinggong::~PBGhostQinggong() {
  SharedDtor();
}

void PBGhostQinggong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGhostQinggong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostQinggong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostQinggong_descriptor_;
}

const PBGhostQinggong& PBGhostQinggong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostQinggong* PBGhostQinggong::default_instance_ = NULL;

PBGhostQinggong* PBGhostQinggong::New() const {
  return new PBGhostQinggong;
}

void PBGhostQinggong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    nextindex_ = 0u;
    ms2jump_ = 0u;
    totalms_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostQinggong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nextindex;
        break;
      }
      
      // optional uint32 nextindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextindex_)));
          set_has_nextindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ms2jump;
        break;
      }
      
      // optional uint32 ms2jump = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ms2jump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ms2jump_)));
          set_has_ms2jump();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalms;
        break;
      }
      
      // optional uint32 totalms = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalms_)));
          set_has_totalms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostQinggong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 nextindex = 2;
  if (has_nextindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nextindex(), output);
  }
  
  // optional uint32 ms2jump = 3;
  if (has_ms2jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ms2jump(), output);
  }
  
  // optional uint32 totalms = 4;
  if (has_totalms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalms(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostQinggong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 nextindex = 2;
  if (has_nextindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nextindex(), target);
  }
  
  // optional uint32 ms2jump = 3;
  if (has_ms2jump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ms2jump(), target);
  }
  
  // optional uint32 totalms = 4;
  if (has_totalms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totalms(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostQinggong::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 nextindex = 2;
    if (has_nextindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextindex());
    }
    
    // optional uint32 ms2jump = 3;
    if (has_ms2jump()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ms2jump());
    }
    
    // optional uint32 totalms = 4;
    if (has_totalms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalms());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostQinggong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostQinggong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostQinggong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostQinggong::MergeFrom(const PBGhostQinggong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nextindex()) {
      set_nextindex(from.nextindex());
    }
    if (from.has_ms2jump()) {
      set_ms2jump(from.ms2jump());
    }
    if (from.has_totalms()) {
      set_totalms(from.totalms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostQinggong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostQinggong::CopyFrom(const PBGhostQinggong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostQinggong::IsInitialized() const {
  
  return true;
}

void PBGhostQinggong::Swap(PBGhostQinggong* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nextindex_, other->nextindex_);
    std::swap(ms2jump_, other->ms2jump_);
    std::swap(totalms_, other->totalms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostQinggong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostQinggong_descriptor_;
  metadata.reflection = PBGhostQinggong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostSpeed::kWalkspeedFieldNumber;
const int PBGhostSpeed::kRunspeedFieldNumber;
#endif  // !_MSC_VER

PBGhostSpeed::PBGhostSpeed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostSpeed::InitAsDefaultInstance() {
}

PBGhostSpeed::PBGhostSpeed(const PBGhostSpeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostSpeed::SharedCtor() {
  _cached_size_ = 0;
  walkspeed_ = 0u;
  runspeed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostSpeed::~PBGhostSpeed() {
  SharedDtor();
}

void PBGhostSpeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGhostSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostSpeed_descriptor_;
}

const PBGhostSpeed& PBGhostSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostSpeed* PBGhostSpeed::default_instance_ = NULL;

PBGhostSpeed* PBGhostSpeed::New() const {
  return new PBGhostSpeed;
}

void PBGhostSpeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    walkspeed_ = 0u;
    runspeed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 walkspeed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &walkspeed_)));
          set_has_walkspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_runspeed;
        break;
      }
      
      // optional uint32 runspeed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_runspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runspeed_)));
          set_has_runspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 walkspeed = 1;
  if (has_walkspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->walkspeed(), output);
  }
  
  // optional uint32 runspeed = 2;
  if (has_runspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->runspeed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostSpeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 walkspeed = 1;
  if (has_walkspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->walkspeed(), target);
  }
  
  // optional uint32 runspeed = 2;
  if (has_runspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->runspeed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostSpeed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 walkspeed = 1;
    if (has_walkspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->walkspeed());
    }
    
    // optional uint32 runspeed = 2;
    if (has_runspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runspeed());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostSpeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostSpeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostSpeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostSpeed::MergeFrom(const PBGhostSpeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_walkspeed()) {
      set_walkspeed(from.walkspeed());
    }
    if (from.has_runspeed()) {
      set_runspeed(from.runspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostSpeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostSpeed::CopyFrom(const PBGhostSpeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostSpeed::IsInitialized() const {
  
  return true;
}

void PBGhostSpeed::Swap(PBGhostSpeed* other) {
  if (other != this) {
    std::swap(walkspeed_, other->walkspeed_);
    std::swap(runspeed_, other->runspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostSpeed_descriptor_;
  metadata.reflection = PBGhostSpeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostUnit::kUnittypeFieldNumber;
const int PBGhostUnit::kUnitidFieldNumber;
const int PBGhostUnit::kHpmpFieldNumber;
const int PBGhostUnit::kAttrFieldNumber;
const int PBGhostUnit::kMoveFieldNumber;
const int PBGhostUnit::kStateFieldNumber;
const int PBGhostUnit::kQinggongFieldNumber;
const int PBGhostUnit::kCampidFieldNumber;
const int PBGhostUnit::kSpeedFieldNumber;
#endif  // !_MSC_VER

PBGhostUnit::PBGhostUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostUnit::InitAsDefaultInstance() {
  hpmp_ = const_cast< ::PBGhostHPMP*>(&::PBGhostHPMP::default_instance());
  attr_ = const_cast< ::PBGhostGameAttr*>(&::PBGhostGameAttr::default_instance());
  move_ = const_cast< ::PBGhostMove*>(&::PBGhostMove::default_instance());
  qinggong_ = const_cast< ::PBGhostQinggong*>(&::PBGhostQinggong::default_instance());
  speed_ = const_cast< ::PBGhostSpeed*>(&::PBGhostSpeed::default_instance());
}

PBGhostUnit::PBGhostUnit(const PBGhostUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostUnit::SharedCtor() {
  _cached_size_ = 0;
  unittype_ = 0u;
  unitid_ = 0u;
  hpmp_ = NULL;
  attr_ = NULL;
  move_ = NULL;
  state_ = 0u;
  qinggong_ = NULL;
  campid_ = 0u;
  speed_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostUnit::~PBGhostUnit() {
  SharedDtor();
}

void PBGhostUnit::SharedDtor() {
  if (this != default_instance_) {
    delete hpmp_;
    delete attr_;
    delete move_;
    delete qinggong_;
    delete speed_;
  }
}

void PBGhostUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostUnit_descriptor_;
}

const PBGhostUnit& PBGhostUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostUnit* PBGhostUnit::default_instance_ = NULL;

PBGhostUnit* PBGhostUnit::New() const {
  return new PBGhostUnit;
}

void PBGhostUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unittype_ = 0u;
    unitid_ = 0u;
    if (has_hpmp()) {
      if (hpmp_ != NULL) hpmp_->::PBGhostHPMP::Clear();
    }
    if (has_attr()) {
      if (attr_ != NULL) attr_->::PBGhostGameAttr::Clear();
    }
    if (has_move()) {
      if (move_ != NULL) move_->::PBGhostMove::Clear();
    }
    state_ = 0u;
    if (has_qinggong()) {
      if (qinggong_ != NULL) qinggong_->::PBGhostQinggong::Clear();
    }
    campid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_speed()) {
      if (speed_ != NULL) speed_->::PBGhostSpeed::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unittype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unittype_)));
          set_has_unittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitid;
        break;
      }
      
      // optional uint32 unitid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hpmp;
        break;
      }
      
      // optional .PBGhostHPMP hpmp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hpmp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hpmp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attr;
        break;
      }
      
      // optional .PBGhostGameAttr attr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_move;
        break;
      }
      
      // optional .PBGhostMove move = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }
      
      // optional uint32 state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_qinggong;
        break;
      }
      
      // optional .PBGhostQinggong qinggong = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qinggong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qinggong()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_campid;
        break;
      }
      
      // optional uint32 campid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_speed;
        break;
      }
      
      // optional .PBGhostSpeed speed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unittype = 1;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unittype(), output);
  }
  
  // optional uint32 unitid = 2;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unitid(), output);
  }
  
  // optional .PBGhostHPMP hpmp = 3;
  if (has_hpmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hpmp(), output);
  }
  
  // optional .PBGhostGameAttr attr = 4;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attr(), output);
  }
  
  // optional .PBGhostMove move = 5;
  if (has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->move(), output);
  }
  
  // optional uint32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->state(), output);
  }
  
  // optional .PBGhostQinggong qinggong = 7;
  if (has_qinggong()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->qinggong(), output);
  }
  
  // optional uint32 campid = 8;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->campid(), output);
  }
  
  // optional .PBGhostSpeed speed = 9;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->speed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unittype = 1;
  if (has_unittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unittype(), target);
  }
  
  // optional uint32 unitid = 2;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unitid(), target);
  }
  
  // optional .PBGhostHPMP hpmp = 3;
  if (has_hpmp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hpmp(), target);
  }
  
  // optional .PBGhostGameAttr attr = 4;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attr(), target);
  }
  
  // optional .PBGhostMove move = 5;
  if (has_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->move(), target);
  }
  
  // optional uint32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->state(), target);
  }
  
  // optional .PBGhostQinggong qinggong = 7;
  if (has_qinggong()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->qinggong(), target);
  }
  
  // optional uint32 campid = 8;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->campid(), target);
  }
  
  // optional .PBGhostSpeed speed = 9;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->speed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unittype = 1;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unittype());
    }
    
    // optional uint32 unitid = 2;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
    // optional .PBGhostHPMP hpmp = 3;
    if (has_hpmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hpmp());
    }
    
    // optional .PBGhostGameAttr attr = 4;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }
    
    // optional .PBGhostMove move = 5;
    if (has_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->move());
    }
    
    // optional uint32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }
    
    // optional .PBGhostQinggong qinggong = 7;
    if (has_qinggong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qinggong());
    }
    
    // optional uint32 campid = 8;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBGhostSpeed speed = 9;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostUnit::MergeFrom(const PBGhostUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_hpmp()) {
      mutable_hpmp()->::PBGhostHPMP::MergeFrom(from.hpmp());
    }
    if (from.has_attr()) {
      mutable_attr()->::PBGhostGameAttr::MergeFrom(from.attr());
    }
    if (from.has_move()) {
      mutable_move()->::PBGhostMove::MergeFrom(from.move());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_qinggong()) {
      mutable_qinggong()->::PBGhostQinggong::MergeFrom(from.qinggong());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_speed()) {
      mutable_speed()->::PBGhostSpeed::MergeFrom(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostUnit::CopyFrom(const PBGhostUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostUnit::IsInitialized() const {
  
  if (has_hpmp()) {
    if (!this->hpmp().IsInitialized()) return false;
  }
  return true;
}

void PBGhostUnit::Swap(PBGhostUnit* other) {
  if (other != this) {
    std::swap(unittype_, other->unittype_);
    std::swap(unitid_, other->unitid_);
    std::swap(hpmp_, other->hpmp_);
    std::swap(attr_, other->attr_);
    std::swap(move_, other->move_);
    std::swap(state_, other->state_);
    std::swap(qinggong_, other->qinggong_);
    std::swap(campid_, other->campid_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostUnit_descriptor_;
  metadata.reflection = PBGhostUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostPk::kIskillerFieldNumber;
const int PBGhostPk::kPkvalueFieldNumber;
#endif  // !_MSC_VER

PBGhostPk::PBGhostPk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostPk::InitAsDefaultInstance() {
}

PBGhostPk::PBGhostPk(const PBGhostPk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostPk::SharedCtor() {
  _cached_size_ = 0;
  iskiller_ = false;
  pkvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostPk::~PBGhostPk() {
  SharedDtor();
}

void PBGhostPk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGhostPk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostPk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostPk_descriptor_;
}

const PBGhostPk& PBGhostPk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostPk* PBGhostPk::default_instance_ = NULL;

PBGhostPk* PBGhostPk::New() const {
  return new PBGhostPk;
}

void PBGhostPk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iskiller_ = false;
    pkvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostPk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool iskiller = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iskiller_)));
          set_has_iskiller();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pkvalue;
        break;
      }
      
      // optional uint32 pkvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkvalue_)));
          set_has_pkvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostPk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool iskiller = 1;
  if (has_iskiller()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iskiller(), output);
  }
  
  // optional uint32 pkvalue = 2;
  if (has_pkvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pkvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostPk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool iskiller = 1;
  if (has_iskiller()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iskiller(), target);
  }
  
  // optional uint32 pkvalue = 2;
  if (has_pkvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pkvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostPk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool iskiller = 1;
    if (has_iskiller()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 pkvalue = 2;
    if (has_pkvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostPk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostPk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostPk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostPk::MergeFrom(const PBGhostPk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iskiller()) {
      set_iskiller(from.iskiller());
    }
    if (from.has_pkvalue()) {
      set_pkvalue(from.pkvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostPk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostPk::CopyFrom(const PBGhostPk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostPk::IsInitialized() const {
  
  return true;
}

void PBGhostPk::Swap(PBGhostPk* other) {
  if (other != this) {
    std::swap(iskiller_, other->iskiller_);
    std::swap(pkvalue_, other->pkvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostPk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostPk_descriptor_;
  metadata.reflection = PBGhostPk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostFightPower::kFightpowerFieldNumber;
#endif  // !_MSC_VER

PBGhostFightPower::PBGhostFightPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostFightPower::InitAsDefaultInstance() {
}

PBGhostFightPower::PBGhostFightPower(const PBGhostFightPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostFightPower::SharedCtor() {
  _cached_size_ = 0;
  fightpower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostFightPower::~PBGhostFightPower() {
  SharedDtor();
}

void PBGhostFightPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGhostFightPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostFightPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostFightPower_descriptor_;
}

const PBGhostFightPower& PBGhostFightPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostFightPower* PBGhostFightPower::default_instance_ = NULL;

PBGhostFightPower* PBGhostFightPower::New() const {
  return new PBGhostFightPower;
}

void PBGhostFightPower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fightpower_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostFightPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fightpower = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostFightPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fightpower = 1;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fightpower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostFightPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fightpower = 1;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fightpower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostFightPower::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fightpower = 1;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostFightPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostFightPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostFightPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostFightPower::MergeFrom(const PBGhostFightPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostFightPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostFightPower::CopyFrom(const PBGhostFightPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostFightPower::IsInitialized() const {
  
  return true;
}

void PBGhostFightPower::Swap(PBGhostFightPower* other) {
  if (other != this) {
    std::swap(fightpower_, other->fightpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostFightPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostFightPower_descriptor_;
  metadata.reflection = PBGhostFightPower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostPlayer::kAvatarFieldNumber;
const int PBGhostPlayer::kPkinfoFieldNumber;
const int PBGhostPlayer::kFightpowerFieldNumber;
#endif  // !_MSC_VER

PBGhostPlayer::PBGhostPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostPlayer::InitAsDefaultInstance() {
  avatar_ = const_cast< ::PBPlayerAvatar*>(&::PBPlayerAvatar::default_instance());
  pkinfo_ = const_cast< ::PBGhostPk*>(&::PBGhostPk::default_instance());
  fightpower_ = const_cast< ::PBGhostFightPower*>(&::PBGhostFightPower::default_instance());
}

PBGhostPlayer::PBGhostPlayer(const PBGhostPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostPlayer::SharedCtor() {
  _cached_size_ = 0;
  avatar_ = NULL;
  pkinfo_ = NULL;
  fightpower_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostPlayer::~PBGhostPlayer() {
  SharedDtor();
}

void PBGhostPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete avatar_;
    delete pkinfo_;
    delete fightpower_;
  }
}

void PBGhostPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostPlayer_descriptor_;
}

const PBGhostPlayer& PBGhostPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostPlayer* PBGhostPlayer::default_instance_ = NULL;

PBGhostPlayer* PBGhostPlayer::New() const {
  return new PBGhostPlayer;
}

void PBGhostPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::PBPlayerAvatar::Clear();
    }
    if (has_pkinfo()) {
      if (pkinfo_ != NULL) pkinfo_->::PBGhostPk::Clear();
    }
    if (has_fightpower()) {
      if (fightpower_ != NULL) fightpower_->::PBGhostFightPower::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerAvatar avatar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pkinfo;
        break;
      }
      
      // optional .PBGhostPk pkinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pkinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pkinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fightpower;
        break;
      }
      
      // optional .PBGhostFightPower fightpower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fightpower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fightpower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerAvatar avatar = 1;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->avatar(), output);
  }
  
  // optional .PBGhostPk pkinfo = 2;
  if (has_pkinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pkinfo(), output);
  }
  
  // optional .PBGhostFightPower fightpower = 3;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fightpower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerAvatar avatar = 1;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->avatar(), target);
  }
  
  // optional .PBGhostPk pkinfo = 2;
  if (has_pkinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pkinfo(), target);
  }
  
  // optional .PBGhostFightPower fightpower = 3;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fightpower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerAvatar avatar = 1;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }
    
    // optional .PBGhostPk pkinfo = 2;
    if (has_pkinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pkinfo());
    }
    
    // optional .PBGhostFightPower fightpower = 3;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fightpower());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostPlayer::MergeFrom(const PBGhostPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar()) {
      mutable_avatar()->::PBPlayerAvatar::MergeFrom(from.avatar());
    }
    if (from.has_pkinfo()) {
      mutable_pkinfo()->::PBGhostPk::MergeFrom(from.pkinfo());
    }
    if (from.has_fightpower()) {
      mutable_fightpower()->::PBGhostFightPower::MergeFrom(from.fightpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostPlayer::CopyFrom(const PBGhostPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostPlayer::IsInitialized() const {
  
  return true;
}

void PBGhostPlayer::Swap(PBGhostPlayer* other) {
  if (other != this) {
    std::swap(avatar_, other->avatar_);
    std::swap(pkinfo_, other->pkinfo_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostPlayer_descriptor_;
  metadata.reflection = PBGhostPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostMonster::kMonsteridFieldNumber;
const int PBGhostMonster::kBuildtickFieldNumber;
const int PBGhostMonster::kSuperarmorFieldNumber;
const int PBGhostMonster::kSuperarmortickFieldNumber;
const int PBGhostMonster::kParam1FieldNumber;
const int PBGhostMonster::kParam2FieldNumber;
const int PBGhostMonster::kOwnerplayeridFieldNumber;
const int PBGhostMonster::kNewnameFieldNumber;
const int PBGhostMonster::kActiveplayerFieldNumber;
#endif  // !_MSC_VER

PBGhostMonster::PBGhostMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostMonster::InitAsDefaultInstance() {
  activeplayer_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBGhostMonster::PBGhostMonster(const PBGhostMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostMonster::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  buildtick_ = GOOGLE_ULONGLONG(0);
  superarmor_ = GOOGLE_ULONGLONG(0);
  superarmortick_ = GOOGLE_ULONGLONG(0);
  param1_ = 0u;
  param2_ = 0u;
  ownerplayerid_ = 0u;
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activeplayer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostMonster::~PBGhostMonster() {
  SharedDtor();
}

void PBGhostMonster::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (this != default_instance_) {
    delete activeplayer_;
  }
}

void PBGhostMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostMonster_descriptor_;
}

const PBGhostMonster& PBGhostMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostMonster* PBGhostMonster::default_instance_ = NULL;

PBGhostMonster* PBGhostMonster::New() const {
  return new PBGhostMonster;
}

void PBGhostMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    buildtick_ = GOOGLE_ULONGLONG(0);
    superarmor_ = GOOGLE_ULONGLONG(0);
    superarmortick_ = GOOGLE_ULONGLONG(0);
    param1_ = 0u;
    param2_ = 0u;
    ownerplayerid_ = 0u;
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_activeplayer()) {
      if (activeplayer_ != NULL) activeplayer_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 monsterid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buildtick;
        break;
      }
      
      // optional uint64 buildtick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildtick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buildtick_)));
          set_has_buildtick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_superarmor;
        break;
      }
      
      // optional uint64 superarmor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_superarmor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &superarmor_)));
          set_has_superarmor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_superarmortick;
        break;
      }
      
      // optional uint64 superarmortick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_superarmortick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &superarmortick_)));
          set_has_superarmortick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param1;
        break;
      }
      
      // optional uint32 param1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_param2;
        break;
      }
      
      // optional uint32 param2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ownerplayerid;
        break;
      }
      
      // optional uint32 ownerplayerid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownerplayerid_)));
          set_has_ownerplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_newname;
        break;
      }
      
      // optional string newname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_activeplayer;
        break;
      }
      
      // optional .PBPlayerDisplay activeplayer = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeplayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activeplayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 monsterid = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }
  
  // optional uint64 buildtick = 2;
  if (has_buildtick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buildtick(), output);
  }
  
  // optional uint64 superarmor = 3;
  if (has_superarmor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->superarmor(), output);
  }
  
  // optional uint64 superarmortick = 4;
  if (has_superarmortick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->superarmortick(), output);
  }
  
  // optional uint32 param1 = 5;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->param1(), output);
  }
  
  // optional uint32 param2 = 6;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->param2(), output);
  }
  
  // optional uint32 ownerplayerid = 7;
  if (has_ownerplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ownerplayerid(), output);
  }
  
  // optional string newname = 8;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->newname(), output);
  }
  
  // optional .PBPlayerDisplay activeplayer = 9;
  if (has_activeplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->activeplayer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 monsterid = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }
  
  // optional uint64 buildtick = 2;
  if (has_buildtick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buildtick(), target);
  }
  
  // optional uint64 superarmor = 3;
  if (has_superarmor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->superarmor(), target);
  }
  
  // optional uint64 superarmortick = 4;
  if (has_superarmortick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->superarmortick(), target);
  }
  
  // optional uint32 param1 = 5;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->param1(), target);
  }
  
  // optional uint32 param2 = 6;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->param2(), target);
  }
  
  // optional uint32 ownerplayerid = 7;
  if (has_ownerplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ownerplayerid(), target);
  }
  
  // optional string newname = 8;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->newname(), target);
  }
  
  // optional .PBPlayerDisplay activeplayer = 9;
  if (has_activeplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->activeplayer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostMonster::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 monsterid = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }
    
    // optional uint64 buildtick = 2;
    if (has_buildtick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buildtick());
    }
    
    // optional uint64 superarmor = 3;
    if (has_superarmor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->superarmor());
    }
    
    // optional uint64 superarmortick = 4;
    if (has_superarmortick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->superarmortick());
    }
    
    // optional uint32 param1 = 5;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }
    
    // optional uint32 param2 = 6;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param2());
    }
    
    // optional uint32 ownerplayerid = 7;
    if (has_ownerplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ownerplayerid());
    }
    
    // optional string newname = 8;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBPlayerDisplay activeplayer = 9;
    if (has_activeplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activeplayer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostMonster::MergeFrom(const PBGhostMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_buildtick()) {
      set_buildtick(from.buildtick());
    }
    if (from.has_superarmor()) {
      set_superarmor(from.superarmor());
    }
    if (from.has_superarmortick()) {
      set_superarmortick(from.superarmortick());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_ownerplayerid()) {
      set_ownerplayerid(from.ownerplayerid());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_activeplayer()) {
      mutable_activeplayer()->::PBPlayerDisplay::MergeFrom(from.activeplayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostMonster::CopyFrom(const PBGhostMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostMonster::IsInitialized() const {
  
  return true;
}

void PBGhostMonster::Swap(PBGhostMonster* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(buildtick_, other->buildtick_);
    std::swap(superarmor_, other->superarmor_);
    std::swap(superarmortick_, other->superarmortick_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(ownerplayerid_, other->ownerplayerid_);
    std::swap(newname_, other->newname_);
    std::swap(activeplayer_, other->activeplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostMonster_descriptor_;
  metadata.reflection = PBGhostMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBGhostPet::PBGhostPet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostPet::InitAsDefaultInstance() {
}

PBGhostPet::PBGhostPet(const PBGhostPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostPet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostPet::~PBGhostPet() {
  SharedDtor();
}

void PBGhostPet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGhostPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostPet_descriptor_;
}

const PBGhostPet& PBGhostPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostPet* PBGhostPet::default_instance_ = NULL;

PBGhostPet* PBGhostPet::New() const {
  return new PBGhostPet;
}

void PBGhostPet::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBGhostPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostPet::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostPet::MergeFrom(const PBGhostPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostPet::CopyFrom(const PBGhostPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostPet::IsInitialized() const {
  
  return true;
}

void PBGhostPet::Swap(PBGhostPet* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostPet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostPet_descriptor_;
  metadata.reflection = PBGhostPet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostTrap::kTrapidFieldNumber;
const int PBGhostTrap::kOwneridFieldNumber;
const int PBGhostTrap::kBuildtickFieldNumber;
const int PBGhostTrap::kStartposxFieldNumber;
const int PBGhostTrap::kStartposyFieldNumber;
const int PBGhostTrap::kStartdirFieldNumber;
const int PBGhostTrap::kDistanceFieldNumber;
const int PBGhostTrap::kHighFieldNumber;
#endif  // !_MSC_VER

PBGhostTrap::PBGhostTrap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostTrap::InitAsDefaultInstance() {
}

PBGhostTrap::PBGhostTrap(const PBGhostTrap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostTrap::SharedCtor() {
  _cached_size_ = 0;
  trapid_ = 0u;
  ownerid_ = 0u;
  buildtick_ = GOOGLE_ULONGLONG(0);
  startposx_ = 0;
  startposy_ = 0;
  startdir_ = 0;
  distance_ = 0;
  high_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostTrap::~PBGhostTrap() {
  SharedDtor();
}

void PBGhostTrap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGhostTrap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostTrap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostTrap_descriptor_;
}

const PBGhostTrap& PBGhostTrap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostTrap* PBGhostTrap::default_instance_ = NULL;

PBGhostTrap* PBGhostTrap::New() const {
  return new PBGhostTrap;
}

void PBGhostTrap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trapid_ = 0u;
    ownerid_ = 0u;
    buildtick_ = GOOGLE_ULONGLONG(0);
    startposx_ = 0;
    startposy_ = 0;
    startdir_ = 0;
    distance_ = 0;
    high_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostTrap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trapid_)));
          set_has_trapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ownerid;
        break;
      }
      
      // optional uint32 ownerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buildtick;
        break;
      }
      
      // optional uint64 buildtick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildtick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buildtick_)));
          set_has_buildtick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_startposx;
        break;
      }
      
      // optional float startposx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startposx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startposx_)));
          set_has_startposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_startposy;
        break;
      }
      
      // optional float startposy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startposy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startposy_)));
          set_has_startposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_startdir;
        break;
      }
      
      // optional float startdir = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startdir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startdir_)));
          set_has_startdir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_distance;
        break;
      }
      
      // optional float distance = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_high;
        break;
      }
      
      // optional float high = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostTrap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 trapid = 1;
  if (has_trapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trapid(), output);
  }
  
  // optional uint32 ownerid = 2;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ownerid(), output);
  }
  
  // optional uint64 buildtick = 3;
  if (has_buildtick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->buildtick(), output);
  }
  
  // optional float startposx = 4;
  if (has_startposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->startposx(), output);
  }
  
  // optional float startposy = 5;
  if (has_startposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->startposy(), output);
  }
  
  // optional float startdir = 6;
  if (has_startdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->startdir(), output);
  }
  
  // optional float distance = 7;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->distance(), output);
  }
  
  // optional float high = 8;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->high(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostTrap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 trapid = 1;
  if (has_trapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trapid(), target);
  }
  
  // optional uint32 ownerid = 2;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ownerid(), target);
  }
  
  // optional uint64 buildtick = 3;
  if (has_buildtick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->buildtick(), target);
  }
  
  // optional float startposx = 4;
  if (has_startposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->startposx(), target);
  }
  
  // optional float startposy = 5;
  if (has_startposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->startposy(), target);
  }
  
  // optional float startdir = 6;
  if (has_startdir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->startdir(), target);
  }
  
  // optional float distance = 7;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->distance(), target);
  }
  
  // optional float high = 8;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->high(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostTrap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 trapid = 1;
    if (has_trapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trapid());
    }
    
    // optional uint32 ownerid = 2;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ownerid());
    }
    
    // optional uint64 buildtick = 3;
    if (has_buildtick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buildtick());
    }
    
    // optional float startposx = 4;
    if (has_startposx()) {
      total_size += 1 + 4;
    }
    
    // optional float startposy = 5;
    if (has_startposy()) {
      total_size += 1 + 4;
    }
    
    // optional float startdir = 6;
    if (has_startdir()) {
      total_size += 1 + 4;
    }
    
    // optional float distance = 7;
    if (has_distance()) {
      total_size += 1 + 4;
    }
    
    // optional float high = 8;
    if (has_high()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostTrap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostTrap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostTrap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostTrap::MergeFrom(const PBGhostTrap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trapid()) {
      set_trapid(from.trapid());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_buildtick()) {
      set_buildtick(from.buildtick());
    }
    if (from.has_startposx()) {
      set_startposx(from.startposx());
    }
    if (from.has_startposy()) {
      set_startposy(from.startposy());
    }
    if (from.has_startdir()) {
      set_startdir(from.startdir());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostTrap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostTrap::CopyFrom(const PBGhostTrap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostTrap::IsInitialized() const {
  
  return true;
}

void PBGhostTrap::Swap(PBGhostTrap* other) {
  if (other != this) {
    std::swap(trapid_, other->trapid_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(buildtick_, other->buildtick_);
    std::swap(startposx_, other->startposx_);
    std::swap(startposy_, other->startposy_);
    std::swap(startdir_, other->startdir_);
    std::swap(distance_, other->distance_);
    std::swap(high_, other->high_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostTrap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostTrap_descriptor_;
  metadata.reflection = PBGhostTrap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostItem::kDropidFieldNumber;
const int PBGhostItem::kOwneridFieldNumber;
const int PBGhostItem::kBirthtimeFieldNumber;
const int PBGhostItem::kDeadidFieldNumber;
#endif  // !_MSC_VER

PBGhostItem::PBGhostItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostItem::InitAsDefaultInstance() {
}

PBGhostItem::PBGhostItem(const PBGhostItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostItem::SharedCtor() {
  _cached_size_ = 0;
  dropid_ = 0u;
  ownerid_ = 0u;
  birthtime_ = GOOGLE_ULONGLONG(0);
  deadid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostItem::~PBGhostItem() {
  SharedDtor();
}

void PBGhostItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGhostItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostItem_descriptor_;
}

const PBGhostItem& PBGhostItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostItem* PBGhostItem::default_instance_ = NULL;

PBGhostItem* PBGhostItem::New() const {
  return new PBGhostItem;
}

void PBGhostItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropid_ = 0u;
    ownerid_ = 0u;
    birthtime_ = GOOGLE_ULONGLONG(0);
    deadid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dropid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropid_)));
          set_has_dropid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ownerid;
        break;
      }
      
      // optional uint32 ownerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_birthtime;
        break;
      }
      
      // optional uint64 birthtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_birthtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &birthtime_)));
          set_has_birthtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_deadid;
        break;
      }
      
      // optional uint32 deadid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadid_)));
          set_has_deadid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dropid = 1;
  if (has_dropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropid(), output);
  }
  
  // optional uint32 ownerid = 2;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ownerid(), output);
  }
  
  // optional uint64 birthtime = 3;
  if (has_birthtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->birthtime(), output);
  }
  
  // optional uint32 deadid = 4;
  if (has_deadid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deadid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dropid = 1;
  if (has_dropid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropid(), target);
  }
  
  // optional uint32 ownerid = 2;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ownerid(), target);
  }
  
  // optional uint64 birthtime = 3;
  if (has_birthtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->birthtime(), target);
  }
  
  // optional uint32 deadid = 4;
  if (has_deadid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deadid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dropid = 1;
    if (has_dropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropid());
    }
    
    // optional uint32 ownerid = 2;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ownerid());
    }
    
    // optional uint64 birthtime = 3;
    if (has_birthtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->birthtime());
    }
    
    // optional uint32 deadid = 4;
    if (has_deadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostItem::MergeFrom(const PBGhostItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropid()) {
      set_dropid(from.dropid());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_birthtime()) {
      set_birthtime(from.birthtime());
    }
    if (from.has_deadid()) {
      set_deadid(from.deadid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostItem::CopyFrom(const PBGhostItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostItem::IsInitialized() const {
  
  return true;
}

void PBGhostItem::Swap(PBGhostItem* other) {
  if (other != this) {
    std::swap(dropid_, other->dropid_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(birthtime_, other->birthtime_);
    std::swap(deadid_, other->deadid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostItem_descriptor_;
  metadata.reflection = PBGhostItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostDartCar::kAvatarListFieldNumber;
const int PBGhostDartCar::kDartCarIDFieldNumber;
const int PBGhostDartCar::kPrizeLevelFieldNumber;
const int PBGhostDartCar::kLeaderPlayerIDFieldNumber;
const int PBGhostDartCar::kBufferIDListFieldNumber;
#endif  // !_MSC_VER

PBGhostDartCar::PBGhostDartCar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostDartCar::InitAsDefaultInstance() {
}

PBGhostDartCar::PBGhostDartCar(const PBGhostDartCar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostDartCar::SharedCtor() {
  _cached_size_ = 0;
  dartcarid_ = 0u;
  prizelevel_ = 0u;
  leaderplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostDartCar::~PBGhostDartCar() {
  SharedDtor();
}

void PBGhostDartCar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGhostDartCar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostDartCar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostDartCar_descriptor_;
}

const PBGhostDartCar& PBGhostDartCar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostDartCar* PBGhostDartCar::default_instance_ = NULL;

PBGhostDartCar* PBGhostDartCar::New() const {
  return new PBGhostDartCar;
}

void PBGhostDartCar::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    dartcarid_ = 0u;
    prizelevel_ = 0u;
    leaderplayerid_ = 0u;
  }
  avatarlist_.Clear();
  bufferidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostDartCar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBPlayerAvatar avatarList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatarList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avatarlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_avatarList;
        if (input->ExpectTag(16)) goto parse_dartCarID;
        break;
      }
      
      // optional uint32 dartCarID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dartCarID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartcarid_)));
          set_has_dartcarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prizeLevel;
        break;
      }
      
      // optional uint32 prizeLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizelevel_)));
          set_has_prizelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leaderPlayerID;
        break;
      }
      
      // optional uint32 leaderPlayerID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderPlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaderplayerid_)));
          set_has_leaderplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bufferIDList;
        break;
      }
      
      // repeated uint32 bufferIDList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bufferIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_bufferidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bufferidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bufferIDList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostDartCar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBPlayerAvatar avatarList = 1;
  for (int i = 0; i < this->avatarlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->avatarlist(i), output);
  }
  
  // optional uint32 dartCarID = 2;
  if (has_dartcarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dartcarid(), output);
  }
  
  // optional uint32 prizeLevel = 3;
  if (has_prizelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prizelevel(), output);
  }
  
  // optional uint32 leaderPlayerID = 4;
  if (has_leaderplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leaderplayerid(), output);
  }
  
  // repeated uint32 bufferIDList = 5;
  for (int i = 0; i < this->bufferidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->bufferidlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostDartCar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBPlayerAvatar avatarList = 1;
  for (int i = 0; i < this->avatarlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->avatarlist(i), target);
  }
  
  // optional uint32 dartCarID = 2;
  if (has_dartcarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dartcarid(), target);
  }
  
  // optional uint32 prizeLevel = 3;
  if (has_prizelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prizelevel(), target);
  }
  
  // optional uint32 leaderPlayerID = 4;
  if (has_leaderplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leaderplayerid(), target);
  }
  
  // repeated uint32 bufferIDList = 5;
  for (int i = 0; i < this->bufferidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->bufferidlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostDartCar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 dartCarID = 2;
    if (has_dartcarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartcarid());
    }
    
    // optional uint32 prizeLevel = 3;
    if (has_prizelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizelevel());
    }
    
    // optional uint32 leaderPlayerID = 4;
    if (has_leaderplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaderplayerid());
    }
    
  }
  // repeated .PBPlayerAvatar avatarList = 1;
  total_size += 1 * this->avatarlist_size();
  for (int i = 0; i < this->avatarlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->avatarlist(i));
  }
  
  // repeated uint32 bufferIDList = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->bufferidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bufferidlist(i));
    }
    total_size += 1 * this->bufferidlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostDartCar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostDartCar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostDartCar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostDartCar::MergeFrom(const PBGhostDartCar& from) {
  GOOGLE_CHECK_NE(&from, this);
  avatarlist_.MergeFrom(from.avatarlist_);
  bufferidlist_.MergeFrom(from.bufferidlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dartcarid()) {
      set_dartcarid(from.dartcarid());
    }
    if (from.has_prizelevel()) {
      set_prizelevel(from.prizelevel());
    }
    if (from.has_leaderplayerid()) {
      set_leaderplayerid(from.leaderplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostDartCar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostDartCar::CopyFrom(const PBGhostDartCar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostDartCar::IsInitialized() const {
  
  return true;
}

void PBGhostDartCar::Swap(PBGhostDartCar* other) {
  if (other != this) {
    avatarlist_.Swap(&other->avatarlist_);
    std::swap(dartcarid_, other->dartcarid_);
    std::swap(prizelevel_, other->prizelevel_);
    std::swap(leaderplayerid_, other->leaderplayerid_);
    bufferidlist_.Swap(&other->bufferidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostDartCar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostDartCar_descriptor_;
  metadata.reflection = PBGhostDartCar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostInfo::kUnitFieldNumber;
const int PBGhostInfo::kPlayerFieldNumber;
const int PBGhostInfo::kMonsterFieldNumber;
const int PBGhostInfo::kPetFieldNumber;
const int PBGhostInfo::kTrapFieldNumber;
const int PBGhostInfo::kItemFieldNumber;
const int PBGhostInfo::kDartcarFieldNumber;
#endif  // !_MSC_VER

PBGhostInfo::PBGhostInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostInfo::InitAsDefaultInstance() {
  unit_ = const_cast< ::PBGhostUnit*>(&::PBGhostUnit::default_instance());
  player_ = const_cast< ::PBGhostPlayer*>(&::PBGhostPlayer::default_instance());
  monster_ = const_cast< ::PBGhostMonster*>(&::PBGhostMonster::default_instance());
  pet_ = const_cast< ::PBGhostPet*>(&::PBGhostPet::default_instance());
  trap_ = const_cast< ::PBGhostTrap*>(&::PBGhostTrap::default_instance());
  item_ = const_cast< ::PBGhostItem*>(&::PBGhostItem::default_instance());
  dartcar_ = const_cast< ::PBGhostDartCar*>(&::PBGhostDartCar::default_instance());
}

PBGhostInfo::PBGhostInfo(const PBGhostInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostInfo::SharedCtor() {
  _cached_size_ = 0;
  unit_ = NULL;
  player_ = NULL;
  monster_ = NULL;
  pet_ = NULL;
  trap_ = NULL;
  item_ = NULL;
  dartcar_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostInfo::~PBGhostInfo() {
  SharedDtor();
}

void PBGhostInfo::SharedDtor() {
  if (this != default_instance_) {
    delete unit_;
    delete player_;
    delete monster_;
    delete pet_;
    delete trap_;
    delete item_;
    delete dartcar_;
  }
}

void PBGhostInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostInfo_descriptor_;
}

const PBGhostInfo& PBGhostInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostInfo* PBGhostInfo::default_instance_ = NULL;

PBGhostInfo* PBGhostInfo::New() const {
  return new PBGhostInfo;
}

void PBGhostInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unit()) {
      if (unit_ != NULL) unit_->::PBGhostUnit::Clear();
    }
    if (has_player()) {
      if (player_ != NULL) player_->::PBGhostPlayer::Clear();
    }
    if (has_monster()) {
      if (monster_ != NULL) monster_->::PBGhostMonster::Clear();
    }
    if (has_pet()) {
      if (pet_ != NULL) pet_->::PBGhostPet::Clear();
    }
    if (has_trap()) {
      if (trap_ != NULL) trap_->::PBGhostTrap::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::PBGhostItem::Clear();
    }
    if (has_dartcar()) {
      if (dartcar_ != NULL) dartcar_->::PBGhostDartCar::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBGhostUnit unit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }
      
      // optional .PBGhostPlayer player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_monster;
        break;
      }
      
      // optional .PBGhostMonster monster = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pet;
        break;
      }
      
      // optional .PBGhostPet pet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_trap;
        break;
      }
      
      // optional .PBGhostTrap trap = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item;
        break;
      }
      
      // optional .PBGhostItem item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dartcar;
        break;
      }
      
      // optional .PBGhostDartCar dartcar = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dartcar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dartcar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBGhostUnit unit = 1;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unit(), output);
  }
  
  // optional .PBGhostPlayer player = 2;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player(), output);
  }
  
  // optional .PBGhostMonster monster = 3;
  if (has_monster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->monster(), output);
  }
  
  // optional .PBGhostPet pet = 4;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pet(), output);
  }
  
  // optional .PBGhostTrap trap = 5;
  if (has_trap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->trap(), output);
  }
  
  // optional .PBGhostItem item = 6;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->item(), output);
  }
  
  // optional .PBGhostDartCar dartcar = 7;
  if (has_dartcar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dartcar(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBGhostUnit unit = 1;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unit(), target);
  }
  
  // optional .PBGhostPlayer player = 2;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player(), target);
  }
  
  // optional .PBGhostMonster monster = 3;
  if (has_monster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->monster(), target);
  }
  
  // optional .PBGhostPet pet = 4;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pet(), target);
  }
  
  // optional .PBGhostTrap trap = 5;
  if (has_trap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->trap(), target);
  }
  
  // optional .PBGhostItem item = 6;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->item(), target);
  }
  
  // optional .PBGhostDartCar dartcar = 7;
  if (has_dartcar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dartcar(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBGhostUnit unit = 1;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit());
    }
    
    // optional .PBGhostPlayer player = 2;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }
    
    // optional .PBGhostMonster monster = 3;
    if (has_monster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monster());
    }
    
    // optional .PBGhostPet pet = 4;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }
    
    // optional .PBGhostTrap trap = 5;
    if (has_trap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trap());
    }
    
    // optional .PBGhostItem item = 6;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
    // optional .PBGhostDartCar dartcar = 7;
    if (has_dartcar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dartcar());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostInfo::MergeFrom(const PBGhostInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit()) {
      mutable_unit()->::PBGhostUnit::MergeFrom(from.unit());
    }
    if (from.has_player()) {
      mutable_player()->::PBGhostPlayer::MergeFrom(from.player());
    }
    if (from.has_monster()) {
      mutable_monster()->::PBGhostMonster::MergeFrom(from.monster());
    }
    if (from.has_pet()) {
      mutable_pet()->::PBGhostPet::MergeFrom(from.pet());
    }
    if (from.has_trap()) {
      mutable_trap()->::PBGhostTrap::MergeFrom(from.trap());
    }
    if (from.has_item()) {
      mutable_item()->::PBGhostItem::MergeFrom(from.item());
    }
    if (from.has_dartcar()) {
      mutable_dartcar()->::PBGhostDartCar::MergeFrom(from.dartcar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostInfo::CopyFrom(const PBGhostInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_unit()) {
    if (!this->unit().IsInitialized()) return false;
  }
  return true;
}

void PBGhostInfo::Swap(PBGhostInfo* other) {
  if (other != this) {
    std::swap(unit_, other->unit_);
    std::swap(player_, other->player_);
    std::swap(monster_, other->monster_);
    std::swap(pet_, other->pet_);
    std::swap(trap_, other->trap_);
    std::swap(item_, other->item_);
    std::swap(dartcar_, other->dartcar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostInfo_descriptor_;
  metadata.reflection = PBGhostInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGhostList::kGhostInfoFieldNumber;
#endif  // !_MSC_VER

PBGhostList::PBGhostList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGhostList::InitAsDefaultInstance() {
}

PBGhostList::PBGhostList(const PBGhostList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGhostList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGhostList::~PBGhostList() {
  SharedDtor();
}

void PBGhostList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGhostList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGhostList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGhostList_descriptor_;
}

const PBGhostList& PBGhostList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GhostStruct_2eproto();  return *default_instance_;
}

PBGhostList* PBGhostList::default_instance_ = NULL;

PBGhostList* PBGhostList::New() const {
  return new PBGhostList;
}

void PBGhostList::Clear() {
  ghost_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGhostList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBGhostInfo ghost_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ghost_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ghost_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ghost_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGhostList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBGhostInfo ghost_info = 1;
  for (int i = 0; i < this->ghost_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ghost_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGhostList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBGhostInfo ghost_info = 1;
  for (int i = 0; i < this->ghost_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ghost_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGhostList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBGhostInfo ghost_info = 1;
  total_size += 1 * this->ghost_info_size();
  for (int i = 0; i < this->ghost_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ghost_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGhostList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGhostList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGhostList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGhostList::MergeFrom(const PBGhostList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ghost_info_.MergeFrom(from.ghost_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGhostList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGhostList::CopyFrom(const PBGhostList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGhostList::IsInitialized() const {
  
  for (int i = 0; i < ghost_info_size(); i++) {
    if (!this->ghost_info(i).IsInitialized()) return false;
  }
  return true;
}

void PBGhostList::Swap(PBGhostList* other) {
  if (other != this) {
    ghost_info_.Swap(&other->ghost_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGhostList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGhostList_descriptor_;
  metadata.reflection = PBGhostList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
