// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GhostStruct.proto

#ifndef PROTOBUF_GhostStruct_2eproto__INCLUDED
#define PROTOBUF_GhostStruct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "GameDefine.pb.h"
#include "PlayerStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GhostStruct_2eproto();
void protobuf_AssignDesc_GhostStruct_2eproto();
void protobuf_ShutdownFile_GhostStruct_2eproto();

class PBGhostHPMP;
class PBGhostMove;
class PBGhostQinggong;
class PBGhostSpeed;
class PBGhostUnit;
class PBGhostPk;
class PBGhostFightPower;
class PBGhostPlayer;
class PBGhostMonster;
class PBGhostPet;
class PBGhostTrap;
class PBGhostItem;
class PBGhostDartCar;
class PBGhostInfo;
class PBGhostList;

// ===================================================================

class PBGhostHPMP : public ::google::protobuf::Message {
 public:
  PBGhostHPMP();
  virtual ~PBGhostHPMP();
  
  PBGhostHPMP(const PBGhostHPMP& from);
  
  inline PBGhostHPMP& operator=(const PBGhostHPMP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostHPMP& default_instance();
  
  void Swap(PBGhostHPMP* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostHPMP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostHPMP& from);
  void MergeFrom(const PBGhostHPMP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 curhp = 1;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurhpFieldNumber = 1;
  inline ::google::protobuf::uint32 curhp() const;
  inline void set_curhp(::google::protobuf::uint32 value);
  
  // repeated .PBEnergy curenergy = 2;
  inline int curenergy_size() const;
  inline void clear_curenergy();
  static const int kCurenergyFieldNumber = 2;
  inline const ::PBEnergy& curenergy(int index) const;
  inline ::PBEnergy* mutable_curenergy(int index);
  inline ::PBEnergy* add_curenergy();
  inline const ::google::protobuf::RepeatedPtrField< ::PBEnergy >&
      curenergy() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBEnergy >*
      mutable_curenergy();
  
  // required uint32 maxhp = 3;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxhpFieldNumber = 3;
  inline ::google::protobuf::uint32 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBGhostHPMP)
 private:
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBEnergy > curenergy_;
  ::google::protobuf::uint32 curhp_;
  ::google::protobuf::uint32 maxhp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostHPMP* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostMove : public ::google::protobuf::Message {
 public:
  PBGhostMove();
  virtual ~PBGhostMove();
  
  PBGhostMove(const PBGhostMove& from);
  
  inline PBGhostMove& operator=(const PBGhostMove& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostMove& default_instance();
  
  void Swap(PBGhostMove* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostMove& from);
  void MergeFrom(const PBGhostMove& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 movetype = 1;
  inline bool has_movetype() const;
  inline void clear_movetype();
  static const int kMovetypeFieldNumber = 1;
  inline ::google::protobuf::uint32 movetype() const;
  inline void set_movetype(::google::protobuf::uint32 value);
  
  // optional int32 movespeed = 2;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMovespeedFieldNumber = 2;
  inline ::google::protobuf::int32 movespeed() const;
  inline void set_movespeed(::google::protobuf::int32 value);
  
  // optional float posx = 3;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 3;
  inline float posx() const;
  inline void set_posx(float value);
  
  // optional float posy = 4;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 4;
  inline float posy() const;
  inline void set_posy(float value);
  
  // optional float dir = 5;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 5;
  inline float dir() const;
  inline void set_dir(float value);
  
  // @@protoc_insertion_point(class_scope:PBGhostMove)
 private:
  inline void set_has_movetype();
  inline void clear_has_movetype();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_dir();
  inline void clear_has_dir();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 movetype_;
  ::google::protobuf::int32 movespeed_;
  float posx_;
  float posy_;
  float dir_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostMove* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostQinggong : public ::google::protobuf::Message {
 public:
  PBGhostQinggong();
  virtual ~PBGhostQinggong();
  
  PBGhostQinggong(const PBGhostQinggong& from);
  
  inline PBGhostQinggong& operator=(const PBGhostQinggong& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostQinggong& default_instance();
  
  void Swap(PBGhostQinggong* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostQinggong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostQinggong& from);
  void MergeFrom(const PBGhostQinggong& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional uint32 nextindex = 2;
  inline bool has_nextindex() const;
  inline void clear_nextindex();
  static const int kNextindexFieldNumber = 2;
  inline ::google::protobuf::uint32 nextindex() const;
  inline void set_nextindex(::google::protobuf::uint32 value);
  
  // optional uint32 ms2jump = 3;
  inline bool has_ms2jump() const;
  inline void clear_ms2jump();
  static const int kMs2JumpFieldNumber = 3;
  inline ::google::protobuf::uint32 ms2jump() const;
  inline void set_ms2jump(::google::protobuf::uint32 value);
  
  // optional uint32 totalms = 4;
  inline bool has_totalms() const;
  inline void clear_totalms();
  static const int kTotalmsFieldNumber = 4;
  inline ::google::protobuf::uint32 totalms() const;
  inline void set_totalms(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBGhostQinggong)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_nextindex();
  inline void clear_has_nextindex();
  inline void set_has_ms2jump();
  inline void clear_has_ms2jump();
  inline void set_has_totalms();
  inline void clear_has_totalms();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 nextindex_;
  ::google::protobuf::uint32 ms2jump_;
  ::google::protobuf::uint32 totalms_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostQinggong* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostSpeed : public ::google::protobuf::Message {
 public:
  PBGhostSpeed();
  virtual ~PBGhostSpeed();
  
  PBGhostSpeed(const PBGhostSpeed& from);
  
  inline PBGhostSpeed& operator=(const PBGhostSpeed& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostSpeed& default_instance();
  
  void Swap(PBGhostSpeed* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostSpeed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostSpeed& from);
  void MergeFrom(const PBGhostSpeed& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 walkspeed = 1;
  inline bool has_walkspeed() const;
  inline void clear_walkspeed();
  static const int kWalkspeedFieldNumber = 1;
  inline ::google::protobuf::uint32 walkspeed() const;
  inline void set_walkspeed(::google::protobuf::uint32 value);
  
  // optional uint32 runspeed = 2;
  inline bool has_runspeed() const;
  inline void clear_runspeed();
  static const int kRunspeedFieldNumber = 2;
  inline ::google::protobuf::uint32 runspeed() const;
  inline void set_runspeed(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBGhostSpeed)
 private:
  inline void set_has_walkspeed();
  inline void clear_has_walkspeed();
  inline void set_has_runspeed();
  inline void clear_has_runspeed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 walkspeed_;
  ::google::protobuf::uint32 runspeed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostSpeed* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostUnit : public ::google::protobuf::Message {
 public:
  PBGhostUnit();
  virtual ~PBGhostUnit();
  
  PBGhostUnit(const PBGhostUnit& from);
  
  inline PBGhostUnit& operator=(const PBGhostUnit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostUnit& default_instance();
  
  void Swap(PBGhostUnit* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostUnit& from);
  void MergeFrom(const PBGhostUnit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 unittype = 1;
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnittypeFieldNumber = 1;
  inline ::google::protobuf::uint32 unittype() const;
  inline void set_unittype(::google::protobuf::uint32 value);
  
  // optional uint32 unitid = 2;
  inline bool has_unitid() const;
  inline void clear_unitid();
  static const int kUnitidFieldNumber = 2;
  inline ::google::protobuf::uint32 unitid() const;
  inline void set_unitid(::google::protobuf::uint32 value);
  
  // optional .PBGhostHPMP hpmp = 3;
  inline bool has_hpmp() const;
  inline void clear_hpmp();
  static const int kHpmpFieldNumber = 3;
  inline const ::PBGhostHPMP& hpmp() const;
  inline ::PBGhostHPMP* mutable_hpmp();
  inline ::PBGhostHPMP* release_hpmp();
  
  // optional .PBGhostGameAttr attr = 4;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 4;
  inline const ::PBGhostGameAttr& attr() const;
  inline ::PBGhostGameAttr* mutable_attr();
  inline ::PBGhostGameAttr* release_attr();
  
  // optional .PBGhostMove move = 5;
  inline bool has_move() const;
  inline void clear_move();
  static const int kMoveFieldNumber = 5;
  inline const ::PBGhostMove& move() const;
  inline ::PBGhostMove* mutable_move();
  inline ::PBGhostMove* release_move();
  
  // optional uint32 state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);
  
  // optional .PBGhostQinggong qinggong = 7;
  inline bool has_qinggong() const;
  inline void clear_qinggong();
  static const int kQinggongFieldNumber = 7;
  inline const ::PBGhostQinggong& qinggong() const;
  inline ::PBGhostQinggong* mutable_qinggong();
  inline ::PBGhostQinggong* release_qinggong();
  
  // optional uint32 campid = 8;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 8;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);
  
  // optional .PBGhostSpeed speed = 9;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 9;
  inline const ::PBGhostSpeed& speed() const;
  inline ::PBGhostSpeed* mutable_speed();
  inline ::PBGhostSpeed* release_speed();
  
  // @@protoc_insertion_point(class_scope:PBGhostUnit)
 private:
  inline void set_has_unittype();
  inline void clear_has_unittype();
  inline void set_has_unitid();
  inline void clear_has_unitid();
  inline void set_has_hpmp();
  inline void clear_has_hpmp();
  inline void set_has_attr();
  inline void clear_has_attr();
  inline void set_has_move();
  inline void clear_has_move();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_qinggong();
  inline void clear_has_qinggong();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_speed();
  inline void clear_has_speed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 unittype_;
  ::google::protobuf::uint32 unitid_;
  ::PBGhostHPMP* hpmp_;
  ::PBGhostGameAttr* attr_;
  ::PBGhostMove* move_;
  ::PBGhostQinggong* qinggong_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 campid_;
  ::PBGhostSpeed* speed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostUnit* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostPk : public ::google::protobuf::Message {
 public:
  PBGhostPk();
  virtual ~PBGhostPk();
  
  PBGhostPk(const PBGhostPk& from);
  
  inline PBGhostPk& operator=(const PBGhostPk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostPk& default_instance();
  
  void Swap(PBGhostPk* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostPk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostPk& from);
  void MergeFrom(const PBGhostPk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool iskiller = 1;
  inline bool has_iskiller() const;
  inline void clear_iskiller();
  static const int kIskillerFieldNumber = 1;
  inline bool iskiller() const;
  inline void set_iskiller(bool value);
  
  // optional uint32 pkvalue = 2;
  inline bool has_pkvalue() const;
  inline void clear_pkvalue();
  static const int kPkvalueFieldNumber = 2;
  inline ::google::protobuf::uint32 pkvalue() const;
  inline void set_pkvalue(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBGhostPk)
 private:
  inline void set_has_iskiller();
  inline void clear_has_iskiller();
  inline void set_has_pkvalue();
  inline void clear_has_pkvalue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool iskiller_;
  ::google::protobuf::uint32 pkvalue_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostPk* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostFightPower : public ::google::protobuf::Message {
 public:
  PBGhostFightPower();
  virtual ~PBGhostFightPower();
  
  PBGhostFightPower(const PBGhostFightPower& from);
  
  inline PBGhostFightPower& operator=(const PBGhostFightPower& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostFightPower& default_instance();
  
  void Swap(PBGhostFightPower* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostFightPower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostFightPower& from);
  void MergeFrom(const PBGhostFightPower& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 fightpower = 1;
  inline bool has_fightpower() const;
  inline void clear_fightpower();
  static const int kFightpowerFieldNumber = 1;
  inline ::google::protobuf::uint32 fightpower() const;
  inline void set_fightpower(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBGhostFightPower)
 private:
  inline void set_has_fightpower();
  inline void clear_has_fightpower();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 fightpower_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostFightPower* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostPlayer : public ::google::protobuf::Message {
 public:
  PBGhostPlayer();
  virtual ~PBGhostPlayer();
  
  PBGhostPlayer(const PBGhostPlayer& from);
  
  inline PBGhostPlayer& operator=(const PBGhostPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostPlayer& default_instance();
  
  void Swap(PBGhostPlayer* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostPlayer& from);
  void MergeFrom(const PBGhostPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBPlayerAvatar avatar = 1;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 1;
  inline const ::PBPlayerAvatar& avatar() const;
  inline ::PBPlayerAvatar* mutable_avatar();
  inline ::PBPlayerAvatar* release_avatar();
  
  // optional .PBGhostPk pkinfo = 2;
  inline bool has_pkinfo() const;
  inline void clear_pkinfo();
  static const int kPkinfoFieldNumber = 2;
  inline const ::PBGhostPk& pkinfo() const;
  inline ::PBGhostPk* mutable_pkinfo();
  inline ::PBGhostPk* release_pkinfo();
  
  // optional .PBGhostFightPower fightpower = 3;
  inline bool has_fightpower() const;
  inline void clear_fightpower();
  static const int kFightpowerFieldNumber = 3;
  inline const ::PBGhostFightPower& fightpower() const;
  inline ::PBGhostFightPower* mutable_fightpower();
  inline ::PBGhostFightPower* release_fightpower();
  
  // @@protoc_insertion_point(class_scope:PBGhostPlayer)
 private:
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_pkinfo();
  inline void clear_has_pkinfo();
  inline void set_has_fightpower();
  inline void clear_has_fightpower();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBPlayerAvatar* avatar_;
  ::PBGhostPk* pkinfo_;
  ::PBGhostFightPower* fightpower_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostPlayer* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostMonster : public ::google::protobuf::Message {
 public:
  PBGhostMonster();
  virtual ~PBGhostMonster();
  
  PBGhostMonster(const PBGhostMonster& from);
  
  inline PBGhostMonster& operator=(const PBGhostMonster& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostMonster& default_instance();
  
  void Swap(PBGhostMonster* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostMonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostMonster& from);
  void MergeFrom(const PBGhostMonster& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 monsterid = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsteridFieldNumber = 1;
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);
  
  // optional uint64 buildtick = 2;
  inline bool has_buildtick() const;
  inline void clear_buildtick();
  static const int kBuildtickFieldNumber = 2;
  inline ::google::protobuf::uint64 buildtick() const;
  inline void set_buildtick(::google::protobuf::uint64 value);
  
  // optional uint64 superarmor = 3;
  inline bool has_superarmor() const;
  inline void clear_superarmor();
  static const int kSuperarmorFieldNumber = 3;
  inline ::google::protobuf::uint64 superarmor() const;
  inline void set_superarmor(::google::protobuf::uint64 value);
  
  // optional uint64 superarmortick = 4;
  inline bool has_superarmortick() const;
  inline void clear_superarmortick();
  static const int kSuperarmortickFieldNumber = 4;
  inline ::google::protobuf::uint64 superarmortick() const;
  inline void set_superarmortick(::google::protobuf::uint64 value);
  
  // optional uint32 param1 = 5;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 5;
  inline ::google::protobuf::uint32 param1() const;
  inline void set_param1(::google::protobuf::uint32 value);
  
  // optional uint32 param2 = 6;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 6;
  inline ::google::protobuf::uint32 param2() const;
  inline void set_param2(::google::protobuf::uint32 value);
  
  // optional uint32 ownerplayerid = 7;
  inline bool has_ownerplayerid() const;
  inline void clear_ownerplayerid();
  static const int kOwnerplayeridFieldNumber = 7;
  inline ::google::protobuf::uint32 ownerplayerid() const;
  inline void set_ownerplayerid(::google::protobuf::uint32 value);
  
  // optional string newname = 8;
  inline bool has_newname() const;
  inline void clear_newname();
  static const int kNewnameFieldNumber = 8;
  inline const ::std::string& newname() const;
  inline void set_newname(const ::std::string& value);
  inline void set_newname(const char* value);
  inline void set_newname(const char* value, size_t size);
  inline ::std::string* mutable_newname();
  inline ::std::string* release_newname();
  
  // optional .PBPlayerDisplay activeplayer = 9;
  inline bool has_activeplayer() const;
  inline void clear_activeplayer();
  static const int kActiveplayerFieldNumber = 9;
  inline const ::PBPlayerDisplay& activeplayer() const;
  inline ::PBPlayerDisplay* mutable_activeplayer();
  inline ::PBPlayerDisplay* release_activeplayer();
  
  // @@protoc_insertion_point(class_scope:PBGhostMonster)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_buildtick();
  inline void clear_has_buildtick();
  inline void set_has_superarmor();
  inline void clear_has_superarmor();
  inline void set_has_superarmortick();
  inline void clear_has_superarmortick();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_ownerplayerid();
  inline void clear_has_ownerplayerid();
  inline void set_has_newname();
  inline void clear_has_newname();
  inline void set_has_activeplayer();
  inline void clear_has_activeplayer();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 buildtick_;
  ::google::protobuf::uint64 superarmor_;
  ::google::protobuf::uint32 monsterid_;
  ::google::protobuf::uint32 param1_;
  ::google::protobuf::uint64 superarmortick_;
  ::google::protobuf::uint32 param2_;
  ::google::protobuf::uint32 ownerplayerid_;
  ::std::string* newname_;
  ::PBPlayerDisplay* activeplayer_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostMonster* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostPet : public ::google::protobuf::Message {
 public:
  PBGhostPet();
  virtual ~PBGhostPet();
  
  PBGhostPet(const PBGhostPet& from);
  
  inline PBGhostPet& operator=(const PBGhostPet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostPet& default_instance();
  
  void Swap(PBGhostPet* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostPet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostPet& from);
  void MergeFrom(const PBGhostPet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:PBGhostPet)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostPet* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostTrap : public ::google::protobuf::Message {
 public:
  PBGhostTrap();
  virtual ~PBGhostTrap();
  
  PBGhostTrap(const PBGhostTrap& from);
  
  inline PBGhostTrap& operator=(const PBGhostTrap& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostTrap& default_instance();
  
  void Swap(PBGhostTrap* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostTrap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostTrap& from);
  void MergeFrom(const PBGhostTrap& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 trapid = 1;
  inline bool has_trapid() const;
  inline void clear_trapid();
  static const int kTrapidFieldNumber = 1;
  inline ::google::protobuf::uint32 trapid() const;
  inline void set_trapid(::google::protobuf::uint32 value);
  
  // optional uint32 ownerid = 2;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 2;
  inline ::google::protobuf::uint32 ownerid() const;
  inline void set_ownerid(::google::protobuf::uint32 value);
  
  // optional uint64 buildtick = 3;
  inline bool has_buildtick() const;
  inline void clear_buildtick();
  static const int kBuildtickFieldNumber = 3;
  inline ::google::protobuf::uint64 buildtick() const;
  inline void set_buildtick(::google::protobuf::uint64 value);
  
  // optional float startposx = 4;
  inline bool has_startposx() const;
  inline void clear_startposx();
  static const int kStartposxFieldNumber = 4;
  inline float startposx() const;
  inline void set_startposx(float value);
  
  // optional float startposy = 5;
  inline bool has_startposy() const;
  inline void clear_startposy();
  static const int kStartposyFieldNumber = 5;
  inline float startposy() const;
  inline void set_startposy(float value);
  
  // optional float startdir = 6;
  inline bool has_startdir() const;
  inline void clear_startdir();
  static const int kStartdirFieldNumber = 6;
  inline float startdir() const;
  inline void set_startdir(float value);
  
  // optional float distance = 7;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 7;
  inline float distance() const;
  inline void set_distance(float value);
  
  // optional float high = 8;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 8;
  inline float high() const;
  inline void set_high(float value);
  
  // @@protoc_insertion_point(class_scope:PBGhostTrap)
 private:
  inline void set_has_trapid();
  inline void clear_has_trapid();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_buildtick();
  inline void clear_has_buildtick();
  inline void set_has_startposx();
  inline void clear_has_startposx();
  inline void set_has_startposy();
  inline void clear_has_startposy();
  inline void set_has_startdir();
  inline void clear_has_startdir();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_high();
  inline void clear_has_high();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 trapid_;
  ::google::protobuf::uint32 ownerid_;
  ::google::protobuf::uint64 buildtick_;
  float startposx_;
  float startposy_;
  float startdir_;
  float distance_;
  float high_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostTrap* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostItem : public ::google::protobuf::Message {
 public:
  PBGhostItem();
  virtual ~PBGhostItem();
  
  PBGhostItem(const PBGhostItem& from);
  
  inline PBGhostItem& operator=(const PBGhostItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostItem& default_instance();
  
  void Swap(PBGhostItem* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostItem& from);
  void MergeFrom(const PBGhostItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 dropid = 1;
  inline bool has_dropid() const;
  inline void clear_dropid();
  static const int kDropidFieldNumber = 1;
  inline ::google::protobuf::uint32 dropid() const;
  inline void set_dropid(::google::protobuf::uint32 value);
  
  // optional uint32 ownerid = 2;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 2;
  inline ::google::protobuf::uint32 ownerid() const;
  inline void set_ownerid(::google::protobuf::uint32 value);
  
  // optional uint64 birthtime = 3;
  inline bool has_birthtime() const;
  inline void clear_birthtime();
  static const int kBirthtimeFieldNumber = 3;
  inline ::google::protobuf::uint64 birthtime() const;
  inline void set_birthtime(::google::protobuf::uint64 value);
  
  // optional uint32 deadid = 4;
  inline bool has_deadid() const;
  inline void clear_deadid();
  static const int kDeadidFieldNumber = 4;
  inline ::google::protobuf::uint32 deadid() const;
  inline void set_deadid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBGhostItem)
 private:
  inline void set_has_dropid();
  inline void clear_has_dropid();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_birthtime();
  inline void clear_has_birthtime();
  inline void set_has_deadid();
  inline void clear_has_deadid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 dropid_;
  ::google::protobuf::uint32 ownerid_;
  ::google::protobuf::uint64 birthtime_;
  ::google::protobuf::uint32 deadid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostItem* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostDartCar : public ::google::protobuf::Message {
 public:
  PBGhostDartCar();
  virtual ~PBGhostDartCar();
  
  PBGhostDartCar(const PBGhostDartCar& from);
  
  inline PBGhostDartCar& operator=(const PBGhostDartCar& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostDartCar& default_instance();
  
  void Swap(PBGhostDartCar* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostDartCar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostDartCar& from);
  void MergeFrom(const PBGhostDartCar& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBPlayerAvatar avatarList = 1;
  inline int avatarlist_size() const;
  inline void clear_avatarlist();
  static const int kAvatarListFieldNumber = 1;
  inline const ::PBPlayerAvatar& avatarlist(int index) const;
  inline ::PBPlayerAvatar* mutable_avatarlist(int index);
  inline ::PBPlayerAvatar* add_avatarlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PBPlayerAvatar >&
      avatarlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBPlayerAvatar >*
      mutable_avatarlist();
  
  // optional uint32 dartCarID = 2;
  inline bool has_dartcarid() const;
  inline void clear_dartcarid();
  static const int kDartCarIDFieldNumber = 2;
  inline ::google::protobuf::uint32 dartcarid() const;
  inline void set_dartcarid(::google::protobuf::uint32 value);
  
  // optional uint32 prizeLevel = 3;
  inline bool has_prizelevel() const;
  inline void clear_prizelevel();
  static const int kPrizeLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 prizelevel() const;
  inline void set_prizelevel(::google::protobuf::uint32 value);
  
  // optional uint32 leaderPlayerID = 4;
  inline bool has_leaderplayerid() const;
  inline void clear_leaderplayerid();
  static const int kLeaderPlayerIDFieldNumber = 4;
  inline ::google::protobuf::uint32 leaderplayerid() const;
  inline void set_leaderplayerid(::google::protobuf::uint32 value);
  
  // repeated uint32 bufferIDList = 5;
  inline int bufferidlist_size() const;
  inline void clear_bufferidlist();
  static const int kBufferIDListFieldNumber = 5;
  inline ::google::protobuf::uint32 bufferidlist(int index) const;
  inline void set_bufferidlist(int index, ::google::protobuf::uint32 value);
  inline void add_bufferidlist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      bufferidlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_bufferidlist();
  
  // @@protoc_insertion_point(class_scope:PBGhostDartCar)
 private:
  inline void set_has_dartcarid();
  inline void clear_has_dartcarid();
  inline void set_has_prizelevel();
  inline void clear_has_prizelevel();
  inline void set_has_leaderplayerid();
  inline void clear_has_leaderplayerid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBPlayerAvatar > avatarlist_;
  ::google::protobuf::uint32 dartcarid_;
  ::google::protobuf::uint32 prizelevel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > bufferidlist_;
  ::google::protobuf::uint32 leaderplayerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostDartCar* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostInfo : public ::google::protobuf::Message {
 public:
  PBGhostInfo();
  virtual ~PBGhostInfo();
  
  PBGhostInfo(const PBGhostInfo& from);
  
  inline PBGhostInfo& operator=(const PBGhostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostInfo& default_instance();
  
  void Swap(PBGhostInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostInfo& from);
  void MergeFrom(const PBGhostInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .PBGhostUnit unit = 1;
  inline bool has_unit() const;
  inline void clear_unit();
  static const int kUnitFieldNumber = 1;
  inline const ::PBGhostUnit& unit() const;
  inline ::PBGhostUnit* mutable_unit();
  inline ::PBGhostUnit* release_unit();
  
  // optional .PBGhostPlayer player = 2;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 2;
  inline const ::PBGhostPlayer& player() const;
  inline ::PBGhostPlayer* mutable_player();
  inline ::PBGhostPlayer* release_player();
  
  // optional .PBGhostMonster monster = 3;
  inline bool has_monster() const;
  inline void clear_monster();
  static const int kMonsterFieldNumber = 3;
  inline const ::PBGhostMonster& monster() const;
  inline ::PBGhostMonster* mutable_monster();
  inline ::PBGhostMonster* release_monster();
  
  // optional .PBGhostPet pet = 4;
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 4;
  inline const ::PBGhostPet& pet() const;
  inline ::PBGhostPet* mutable_pet();
  inline ::PBGhostPet* release_pet();
  
  // optional .PBGhostTrap trap = 5;
  inline bool has_trap() const;
  inline void clear_trap();
  static const int kTrapFieldNumber = 5;
  inline const ::PBGhostTrap& trap() const;
  inline ::PBGhostTrap* mutable_trap();
  inline ::PBGhostTrap* release_trap();
  
  // optional .PBGhostItem item = 6;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 6;
  inline const ::PBGhostItem& item() const;
  inline ::PBGhostItem* mutable_item();
  inline ::PBGhostItem* release_item();
  
  // optional .PBGhostDartCar dartcar = 7;
  inline bool has_dartcar() const;
  inline void clear_dartcar();
  static const int kDartcarFieldNumber = 7;
  inline const ::PBGhostDartCar& dartcar() const;
  inline ::PBGhostDartCar* mutable_dartcar();
  inline ::PBGhostDartCar* release_dartcar();
  
  // @@protoc_insertion_point(class_scope:PBGhostInfo)
 private:
  inline void set_has_unit();
  inline void clear_has_unit();
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_monster();
  inline void clear_has_monster();
  inline void set_has_pet();
  inline void clear_has_pet();
  inline void set_has_trap();
  inline void clear_has_trap();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_dartcar();
  inline void clear_has_dartcar();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBGhostUnit* unit_;
  ::PBGhostPlayer* player_;
  ::PBGhostMonster* monster_;
  ::PBGhostPet* pet_;
  ::PBGhostTrap* trap_;
  ::PBGhostItem* item_;
  ::PBGhostDartCar* dartcar_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBGhostList : public ::google::protobuf::Message {
 public:
  PBGhostList();
  virtual ~PBGhostList();
  
  PBGhostList(const PBGhostList& from);
  
  inline PBGhostList& operator=(const PBGhostList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGhostList& default_instance();
  
  void Swap(PBGhostList* other);
  
  // implements Message ----------------------------------------------
  
  PBGhostList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGhostList& from);
  void MergeFrom(const PBGhostList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBGhostInfo ghost_info = 1;
  inline int ghost_info_size() const;
  inline void clear_ghost_info();
  static const int kGhostInfoFieldNumber = 1;
  inline const ::PBGhostInfo& ghost_info(int index) const;
  inline ::PBGhostInfo* mutable_ghost_info(int index);
  inline ::PBGhostInfo* add_ghost_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PBGhostInfo >&
      ghost_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBGhostInfo >*
      mutable_ghost_info();
  
  // @@protoc_insertion_point(class_scope:PBGhostList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBGhostInfo > ghost_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GhostStruct_2eproto();
  friend void protobuf_AssignDesc_GhostStruct_2eproto();
  friend void protobuf_ShutdownFile_GhostStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGhostList* default_instance_;
};
// ===================================================================


// ===================================================================

// PBGhostHPMP

// required uint32 curhp = 1;
inline bool PBGhostHPMP::has_curhp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGhostHPMP::set_has_curhp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGhostHPMP::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGhostHPMP::clear_curhp() {
  curhp_ = 0u;
  clear_has_curhp();
}
inline ::google::protobuf::uint32 PBGhostHPMP::curhp() const {
  return curhp_;
}
inline void PBGhostHPMP::set_curhp(::google::protobuf::uint32 value) {
  set_has_curhp();
  curhp_ = value;
}

// repeated .PBEnergy curenergy = 2;
inline int PBGhostHPMP::curenergy_size() const {
  return curenergy_.size();
}
inline void PBGhostHPMP::clear_curenergy() {
  curenergy_.Clear();
}
inline const ::PBEnergy& PBGhostHPMP::curenergy(int index) const {
  return curenergy_.Get(index);
}
inline ::PBEnergy* PBGhostHPMP::mutable_curenergy(int index) {
  return curenergy_.Mutable(index);
}
inline ::PBEnergy* PBGhostHPMP::add_curenergy() {
  return curenergy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBEnergy >&
PBGhostHPMP::curenergy() const {
  return curenergy_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBEnergy >*
PBGhostHPMP::mutable_curenergy() {
  return &curenergy_;
}

// required uint32 maxhp = 3;
inline bool PBGhostHPMP::has_maxhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGhostHPMP::set_has_maxhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGhostHPMP::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGhostHPMP::clear_maxhp() {
  maxhp_ = 0u;
  clear_has_maxhp();
}
inline ::google::protobuf::uint32 PBGhostHPMP::maxhp() const {
  return maxhp_;
}
inline void PBGhostHPMP::set_maxhp(::google::protobuf::uint32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// -------------------------------------------------------------------

// PBGhostMove

// optional uint32 movetype = 1;
inline bool PBGhostMove::has_movetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGhostMove::set_has_movetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGhostMove::clear_has_movetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGhostMove::clear_movetype() {
  movetype_ = 0u;
  clear_has_movetype();
}
inline ::google::protobuf::uint32 PBGhostMove::movetype() const {
  return movetype_;
}
inline void PBGhostMove::set_movetype(::google::protobuf::uint32 value) {
  set_has_movetype();
  movetype_ = value;
}

// optional int32 movespeed = 2;
inline bool PBGhostMove::has_movespeed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGhostMove::set_has_movespeed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGhostMove::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGhostMove::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline ::google::protobuf::int32 PBGhostMove::movespeed() const {
  return movespeed_;
}
inline void PBGhostMove::set_movespeed(::google::protobuf::int32 value) {
  set_has_movespeed();
  movespeed_ = value;
}

// optional float posx = 3;
inline bool PBGhostMove::has_posx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGhostMove::set_has_posx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGhostMove::clear_has_posx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGhostMove::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline float PBGhostMove::posx() const {
  return posx_;
}
inline void PBGhostMove::set_posx(float value) {
  set_has_posx();
  posx_ = value;
}

// optional float posy = 4;
inline bool PBGhostMove::has_posy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGhostMove::set_has_posy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGhostMove::clear_has_posy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGhostMove::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline float PBGhostMove::posy() const {
  return posy_;
}
inline void PBGhostMove::set_posy(float value) {
  set_has_posy();
  posy_ = value;
}

// optional float dir = 5;
inline bool PBGhostMove::has_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBGhostMove::set_has_dir() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBGhostMove::clear_has_dir() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBGhostMove::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float PBGhostMove::dir() const {
  return dir_;
}
inline void PBGhostMove::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// -------------------------------------------------------------------

// PBGhostQinggong

// optional uint32 id = 1;
inline bool PBGhostQinggong::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGhostQinggong::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGhostQinggong::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGhostQinggong::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PBGhostQinggong::id() const {
  return id_;
}
inline void PBGhostQinggong::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 nextindex = 2;
inline bool PBGhostQinggong::has_nextindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGhostQinggong::set_has_nextindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGhostQinggong::clear_has_nextindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGhostQinggong::clear_nextindex() {
  nextindex_ = 0u;
  clear_has_nextindex();
}
inline ::google::protobuf::uint32 PBGhostQinggong::nextindex() const {
  return nextindex_;
}
inline void PBGhostQinggong::set_nextindex(::google::protobuf::uint32 value) {
  set_has_nextindex();
  nextindex_ = value;
}

// optional uint32 ms2jump = 3;
inline bool PBGhostQinggong::has_ms2jump() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGhostQinggong::set_has_ms2jump() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGhostQinggong::clear_has_ms2jump() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGhostQinggong::clear_ms2jump() {
  ms2jump_ = 0u;
  clear_has_ms2jump();
}
inline ::google::protobuf::uint32 PBGhostQinggong::ms2jump() const {
  return ms2jump_;
}
inline void PBGhostQinggong::set_ms2jump(::google::protobuf::uint32 value) {
  set_has_ms2jump();
  ms2jump_ = value;
}

// optional uint32 totalms = 4;
inline bool PBGhostQinggong::has_totalms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGhostQinggong::set_has_totalms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGhostQinggong::clear_has_totalms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGhostQinggong::clear_totalms() {
  totalms_ = 0u;
  clear_has_totalms();
}
inline ::google::protobuf::uint32 PBGhostQinggong::totalms() const {
  return totalms_;
}
inline void PBGhostQinggong::set_totalms(::google::protobuf::uint32 value) {
  set_has_totalms();
  totalms_ = value;
}

// -------------------------------------------------------------------

// PBGhostSpeed

// optional uint32 walkspeed = 1;
inline bool PBGhostSpeed::has_walkspeed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGhostSpeed::set_has_walkspeed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGhostSpeed::clear_has_walkspeed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGhostSpeed::clear_walkspeed() {
  walkspeed_ = 0u;
  clear_has_walkspeed();
}
inline ::google::protobuf::uint32 PBGhostSpeed::walkspeed() const {
  return walkspeed_;
}
inline void PBGhostSpeed::set_walkspeed(::google::protobuf::uint32 value) {
  set_has_walkspeed();
  walkspeed_ = value;
}

// optional uint32 runspeed = 2;
inline bool PBGhostSpeed::has_runspeed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGhostSpeed::set_has_runspeed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGhostSpeed::clear_has_runspeed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGhostSpeed::clear_runspeed() {
  runspeed_ = 0u;
  clear_has_runspeed();
}
inline ::google::protobuf::uint32 PBGhostSpeed::runspeed() const {
  return runspeed_;
}
inline void PBGhostSpeed::set_runspeed(::google::protobuf::uint32 value) {
  set_has_runspeed();
  runspeed_ = value;
}

// -------------------------------------------------------------------

// PBGhostUnit

// optional uint32 unittype = 1;
inline bool PBGhostUnit::has_unittype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGhostUnit::set_has_unittype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGhostUnit::clear_has_unittype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGhostUnit::clear_unittype() {
  unittype_ = 0u;
  clear_has_unittype();
}
inline ::google::protobuf::uint32 PBGhostUnit::unittype() const {
  return unittype_;
}
inline void PBGhostUnit::set_unittype(::google::protobuf::uint32 value) {
  set_has_unittype();
  unittype_ = value;
}

// optional uint32 unitid = 2;
inline bool PBGhostUnit::has_unitid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGhostUnit::set_has_unitid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGhostUnit::clear_has_unitid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGhostUnit::clear_unitid() {
  unitid_ = 0u;
  clear_has_unitid();
}
inline ::google::protobuf::uint32 PBGhostUnit::unitid() const {
  return unitid_;
}
inline void PBGhostUnit::set_unitid(::google::protobuf::uint32 value) {
  set_has_unitid();
  unitid_ = value;
}

// optional .PBGhostHPMP hpmp = 3;
inline bool PBGhostUnit::has_hpmp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGhostUnit::set_has_hpmp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGhostUnit::clear_has_hpmp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGhostUnit::clear_hpmp() {
  if (hpmp_ != NULL) hpmp_->::PBGhostHPMP::Clear();
  clear_has_hpmp();
}
inline const ::PBGhostHPMP& PBGhostUnit::hpmp() const {
  return hpmp_ != NULL ? *hpmp_ : *default_instance_->hpmp_;
}
inline ::PBGhostHPMP* PBGhostUnit::mutable_hpmp() {
  set_has_hpmp();
  if (hpmp_ == NULL) hpmp_ = new ::PBGhostHPMP;
  return hpmp_;
}
inline ::PBGhostHPMP* PBGhostUnit::release_hpmp() {
  clear_has_hpmp();
  ::PBGhostHPMP* temp = hpmp_;
  hpmp_ = NULL;
  return temp;
}

// optional .PBGhostGameAttr attr = 4;
inline bool PBGhostUnit::has_attr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGhostUnit::set_has_attr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGhostUnit::clear_has_attr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGhostUnit::clear_attr() {
  if (attr_ != NULL) attr_->::PBGhostGameAttr::Clear();
  clear_has_attr();
}
inline const ::PBGhostGameAttr& PBGhostUnit::attr() const {
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::PBGhostGameAttr* PBGhostUnit::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::PBGhostGameAttr;
  return attr_;
}
inline ::PBGhostGameAttr* PBGhostUnit::release_attr() {
  clear_has_attr();
  ::PBGhostGameAttr* temp = attr_;
  attr_ = NULL;
  return temp;
}

// optional .PBGhostMove move = 5;
inline bool PBGhostUnit::has_move() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBGhostUnit::set_has_move() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBGhostUnit::clear_has_move() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBGhostUnit::clear_move() {
  if (move_ != NULL) move_->::PBGhostMove::Clear();
  clear_has_move();
}
inline const ::PBGhostMove& PBGhostUnit::move() const {
  return move_ != NULL ? *move_ : *default_instance_->move_;
}
inline ::PBGhostMove* PBGhostUnit::mutable_move() {
  set_has_move();
  if (move_ == NULL) move_ = new ::PBGhostMove;
  return move_;
}
inline ::PBGhostMove* PBGhostUnit::release_move() {
  clear_has_move();
  ::PBGhostMove* temp = move_;
  move_ = NULL;
  return temp;
}

// optional uint32 state = 6;
inline bool PBGhostUnit::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBGhostUnit::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBGhostUnit::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBGhostUnit::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 PBGhostUnit::state() const {
  return state_;
}
inline void PBGhostUnit::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional .PBGhostQinggong qinggong = 7;
inline bool PBGhostUnit::has_qinggong() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBGhostUnit::set_has_qinggong() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBGhostUnit::clear_has_qinggong() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBGhostUnit::clear_qinggong() {
  if (qinggong_ != NULL) qinggong_->::PBGhostQinggong::Clear();
  clear_has_qinggong();
}
inline const ::PBGhostQinggong& PBGhostUnit::qinggong() const {
  return qinggong_ != NULL ? *qinggong_ : *default_instance_->qinggong_;
}
inline ::PBGhostQinggong* PBGhostUnit::mutable_qinggong() {
  set_has_qinggong();
  if (qinggong_ == NULL) qinggong_ = new ::PBGhostQinggong;
  return qinggong_;
}
inline ::PBGhostQinggong* PBGhostUnit::release_qinggong() {
  clear_has_qinggong();
  ::PBGhostQinggong* temp = qinggong_;
  qinggong_ = NULL;
  return temp;
}

// optional uint32 campid = 8;
inline bool PBGhostUnit::has_campid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBGhostUnit::set_has_campid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBGhostUnit::clear_has_campid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBGhostUnit::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 PBGhostUnit::campid() const {
  return campid_;
}
inline void PBGhostUnit::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// optional .PBGhostSpeed speed = 9;
inline bool PBGhostUnit::has_speed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBGhostUnit::set_has_speed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBGhostUnit::clear_has_speed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBGhostUnit::clear_speed() {
  if (speed_ != NULL) speed_->::PBGhostSpeed::Clear();
  clear_has_speed();
}
inline const ::PBGhostSpeed& PBGhostUnit::speed() const {
  return speed_ != NULL ? *speed_ : *default_instance_->speed_;
}
inline ::PBGhostSpeed* PBGhostUnit::mutable_speed() {
  set_has_speed();
  if (speed_ == NULL) speed_ = new ::PBGhostSpeed;
  return speed_;
}
inline ::PBGhostSpeed* PBGhostUnit::release_speed() {
  clear_has_speed();
  ::PBGhostSpeed* temp = speed_;
  speed_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBGhostPk

// optional bool iskiller = 1;
inline bool PBGhostPk::has_iskiller() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGhostPk::set_has_iskiller() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGhostPk::clear_has_iskiller() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGhostPk::clear_iskiller() {
  iskiller_ = false;
  clear_has_iskiller();
}
inline bool PBGhostPk::iskiller() const {
  return iskiller_;
}
inline void PBGhostPk::set_iskiller(bool value) {
  set_has_iskiller();
  iskiller_ = value;
}

// optional uint32 pkvalue = 2;
inline bool PBGhostPk::has_pkvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGhostPk::set_has_pkvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGhostPk::clear_has_pkvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGhostPk::clear_pkvalue() {
  pkvalue_ = 0u;
  clear_has_pkvalue();
}
inline ::google::protobuf::uint32 PBGhostPk::pkvalue() const {
  return pkvalue_;
}
inline void PBGhostPk::set_pkvalue(::google::protobuf::uint32 value) {
  set_has_pkvalue();
  pkvalue_ = value;
}

// -------------------------------------------------------------------

// PBGhostFightPower

// optional uint32 fightpower = 1;
inline bool PBGhostFightPower::has_fightpower() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGhostFightPower::set_has_fightpower() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGhostFightPower::clear_has_fightpower() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGhostFightPower::clear_fightpower() {
  fightpower_ = 0u;
  clear_has_fightpower();
}
inline ::google::protobuf::uint32 PBGhostFightPower::fightpower() const {
  return fightpower_;
}
inline void PBGhostFightPower::set_fightpower(::google::protobuf::uint32 value) {
  set_has_fightpower();
  fightpower_ = value;
}

// -------------------------------------------------------------------

// PBGhostPlayer

// optional .PBPlayerAvatar avatar = 1;
inline bool PBGhostPlayer::has_avatar() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGhostPlayer::set_has_avatar() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGhostPlayer::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGhostPlayer::clear_avatar() {
  if (avatar_ != NULL) avatar_->::PBPlayerAvatar::Clear();
  clear_has_avatar();
}
inline const ::PBPlayerAvatar& PBGhostPlayer::avatar() const {
  return avatar_ != NULL ? *avatar_ : *default_instance_->avatar_;
}
inline ::PBPlayerAvatar* PBGhostPlayer::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == NULL) avatar_ = new ::PBPlayerAvatar;
  return avatar_;
}
inline ::PBPlayerAvatar* PBGhostPlayer::release_avatar() {
  clear_has_avatar();
  ::PBPlayerAvatar* temp = avatar_;
  avatar_ = NULL;
  return temp;
}

// optional .PBGhostPk pkinfo = 2;
inline bool PBGhostPlayer::has_pkinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGhostPlayer::set_has_pkinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGhostPlayer::clear_has_pkinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGhostPlayer::clear_pkinfo() {
  if (pkinfo_ != NULL) pkinfo_->::PBGhostPk::Clear();
  clear_has_pkinfo();
}
inline const ::PBGhostPk& PBGhostPlayer::pkinfo() const {
  return pkinfo_ != NULL ? *pkinfo_ : *default_instance_->pkinfo_;
}
inline ::PBGhostPk* PBGhostPlayer::mutable_pkinfo() {
  set_has_pkinfo();
  if (pkinfo_ == NULL) pkinfo_ = new ::PBGhostPk;
  return pkinfo_;
}
inline ::PBGhostPk* PBGhostPlayer::release_pkinfo() {
  clear_has_pkinfo();
  ::PBGhostPk* temp = pkinfo_;
  pkinfo_ = NULL;
  return temp;
}

// optional .PBGhostFightPower fightpower = 3;
inline bool PBGhostPlayer::has_fightpower() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGhostPlayer::set_has_fightpower() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGhostPlayer::clear_has_fightpower() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGhostPlayer::clear_fightpower() {
  if (fightpower_ != NULL) fightpower_->::PBGhostFightPower::Clear();
  clear_has_fightpower();
}
inline const ::PBGhostFightPower& PBGhostPlayer::fightpower() const {
  return fightpower_ != NULL ? *fightpower_ : *default_instance_->fightpower_;
}
inline ::PBGhostFightPower* PBGhostPlayer::mutable_fightpower() {
  set_has_fightpower();
  if (fightpower_ == NULL) fightpower_ = new ::PBGhostFightPower;
  return fightpower_;
}
inline ::PBGhostFightPower* PBGhostPlayer::release_fightpower() {
  clear_has_fightpower();
  ::PBGhostFightPower* temp = fightpower_;
  fightpower_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBGhostMonster

// optional uint32 monsterid = 1;
inline bool PBGhostMonster::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGhostMonster::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGhostMonster::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGhostMonster::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 PBGhostMonster::monsterid() const {
  return monsterid_;
}
inline void PBGhostMonster::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// optional uint64 buildtick = 2;
inline bool PBGhostMonster::has_buildtick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGhostMonster::set_has_buildtick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGhostMonster::clear_has_buildtick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGhostMonster::clear_buildtick() {
  buildtick_ = GOOGLE_ULONGLONG(0);
  clear_has_buildtick();
}
inline ::google::protobuf::uint64 PBGhostMonster::buildtick() const {
  return buildtick_;
}
inline void PBGhostMonster::set_buildtick(::google::protobuf::uint64 value) {
  set_has_buildtick();
  buildtick_ = value;
}

// optional uint64 superarmor = 3;
inline bool PBGhostMonster::has_superarmor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGhostMonster::set_has_superarmor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGhostMonster::clear_has_superarmor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGhostMonster::clear_superarmor() {
  superarmor_ = GOOGLE_ULONGLONG(0);
  clear_has_superarmor();
}
inline ::google::protobuf::uint64 PBGhostMonster::superarmor() const {
  return superarmor_;
}
inline void PBGhostMonster::set_superarmor(::google::protobuf::uint64 value) {
  set_has_superarmor();
  superarmor_ = value;
}

// optional uint64 superarmortick = 4;
inline bool PBGhostMonster::has_superarmortick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGhostMonster::set_has_superarmortick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGhostMonster::clear_has_superarmortick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGhostMonster::clear_superarmortick() {
  superarmortick_ = GOOGLE_ULONGLONG(0);
  clear_has_superarmortick();
}
inline ::google::protobuf::uint64 PBGhostMonster::superarmortick() const {
  return superarmortick_;
}
inline void PBGhostMonster::set_superarmortick(::google::protobuf::uint64 value) {
  set_has_superarmortick();
  superarmortick_ = value;
}

// optional uint32 param1 = 5;
inline bool PBGhostMonster::has_param1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBGhostMonster::set_has_param1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBGhostMonster::clear_has_param1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBGhostMonster::clear_param1() {
  param1_ = 0u;
  clear_has_param1();
}
inline ::google::protobuf::uint32 PBGhostMonster::param1() const {
  return param1_;
}
inline void PBGhostMonster::set_param1(::google::protobuf::uint32 value) {
  set_has_param1();
  param1_ = value;
}

// optional uint32 param2 = 6;
inline bool PBGhostMonster::has_param2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBGhostMonster::set_has_param2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBGhostMonster::clear_has_param2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBGhostMonster::clear_param2() {
  param2_ = 0u;
  clear_has_param2();
}
inline ::google::protobuf::uint32 PBGhostMonster::param2() const {
  return param2_;
}
inline void PBGhostMonster::set_param2(::google::protobuf::uint32 value) {
  set_has_param2();
  param2_ = value;
}

// optional uint32 ownerplayerid = 7;
inline bool PBGhostMonster::has_ownerplayerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBGhostMonster::set_has_ownerplayerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBGhostMonster::clear_has_ownerplayerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBGhostMonster::clear_ownerplayerid() {
  ownerplayerid_ = 0u;
  clear_has_ownerplayerid();
}
inline ::google::protobuf::uint32 PBGhostMonster::ownerplayerid() const {
  return ownerplayerid_;
}
inline void PBGhostMonster::set_ownerplayerid(::google::protobuf::uint32 value) {
  set_has_ownerplayerid();
  ownerplayerid_ = value;
}

// optional string newname = 8;
inline bool PBGhostMonster::has_newname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBGhostMonster::set_has_newname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBGhostMonster::clear_has_newname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBGhostMonster::clear_newname() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    newname_->clear();
  }
  clear_has_newname();
}
inline const ::std::string& PBGhostMonster::newname() const {
  return *newname_;
}
inline void PBGhostMonster::set_newname(const ::std::string& value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void PBGhostMonster::set_newname(const char* value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void PBGhostMonster::set_newname(const char* value, size_t size) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBGhostMonster::mutable_newname() {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  return newname_;
}
inline ::std::string* PBGhostMonster::release_newname() {
  clear_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newname_;
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .PBPlayerDisplay activeplayer = 9;
inline bool PBGhostMonster::has_activeplayer() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBGhostMonster::set_has_activeplayer() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBGhostMonster::clear_has_activeplayer() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBGhostMonster::clear_activeplayer() {
  if (activeplayer_ != NULL) activeplayer_->::PBPlayerDisplay::Clear();
  clear_has_activeplayer();
}
inline const ::PBPlayerDisplay& PBGhostMonster::activeplayer() const {
  return activeplayer_ != NULL ? *activeplayer_ : *default_instance_->activeplayer_;
}
inline ::PBPlayerDisplay* PBGhostMonster::mutable_activeplayer() {
  set_has_activeplayer();
  if (activeplayer_ == NULL) activeplayer_ = new ::PBPlayerDisplay;
  return activeplayer_;
}
inline ::PBPlayerDisplay* PBGhostMonster::release_activeplayer() {
  clear_has_activeplayer();
  ::PBPlayerDisplay* temp = activeplayer_;
  activeplayer_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBGhostPet

// -------------------------------------------------------------------

// PBGhostTrap

// optional uint32 trapid = 1;
inline bool PBGhostTrap::has_trapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGhostTrap::set_has_trapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGhostTrap::clear_has_trapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGhostTrap::clear_trapid() {
  trapid_ = 0u;
  clear_has_trapid();
}
inline ::google::protobuf::uint32 PBGhostTrap::trapid() const {
  return trapid_;
}
inline void PBGhostTrap::set_trapid(::google::protobuf::uint32 value) {
  set_has_trapid();
  trapid_ = value;
}

// optional uint32 ownerid = 2;
inline bool PBGhostTrap::has_ownerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGhostTrap::set_has_ownerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGhostTrap::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGhostTrap::clear_ownerid() {
  ownerid_ = 0u;
  clear_has_ownerid();
}
inline ::google::protobuf::uint32 PBGhostTrap::ownerid() const {
  return ownerid_;
}
inline void PBGhostTrap::set_ownerid(::google::protobuf::uint32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// optional uint64 buildtick = 3;
inline bool PBGhostTrap::has_buildtick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGhostTrap::set_has_buildtick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGhostTrap::clear_has_buildtick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGhostTrap::clear_buildtick() {
  buildtick_ = GOOGLE_ULONGLONG(0);
  clear_has_buildtick();
}
inline ::google::protobuf::uint64 PBGhostTrap::buildtick() const {
  return buildtick_;
}
inline void PBGhostTrap::set_buildtick(::google::protobuf::uint64 value) {
  set_has_buildtick();
  buildtick_ = value;
}

// optional float startposx = 4;
inline bool PBGhostTrap::has_startposx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGhostTrap::set_has_startposx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGhostTrap::clear_has_startposx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGhostTrap::clear_startposx() {
  startposx_ = 0;
  clear_has_startposx();
}
inline float PBGhostTrap::startposx() const {
  return startposx_;
}
inline void PBGhostTrap::set_startposx(float value) {
  set_has_startposx();
  startposx_ = value;
}

// optional float startposy = 5;
inline bool PBGhostTrap::has_startposy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBGhostTrap::set_has_startposy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBGhostTrap::clear_has_startposy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBGhostTrap::clear_startposy() {
  startposy_ = 0;
  clear_has_startposy();
}
inline float PBGhostTrap::startposy() const {
  return startposy_;
}
inline void PBGhostTrap::set_startposy(float value) {
  set_has_startposy();
  startposy_ = value;
}

// optional float startdir = 6;
inline bool PBGhostTrap::has_startdir() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBGhostTrap::set_has_startdir() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBGhostTrap::clear_has_startdir() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBGhostTrap::clear_startdir() {
  startdir_ = 0;
  clear_has_startdir();
}
inline float PBGhostTrap::startdir() const {
  return startdir_;
}
inline void PBGhostTrap::set_startdir(float value) {
  set_has_startdir();
  startdir_ = value;
}

// optional float distance = 7;
inline bool PBGhostTrap::has_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBGhostTrap::set_has_distance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBGhostTrap::clear_has_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBGhostTrap::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float PBGhostTrap::distance() const {
  return distance_;
}
inline void PBGhostTrap::set_distance(float value) {
  set_has_distance();
  distance_ = value;
}

// optional float high = 8;
inline bool PBGhostTrap::has_high() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBGhostTrap::set_has_high() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBGhostTrap::clear_has_high() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBGhostTrap::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline float PBGhostTrap::high() const {
  return high_;
}
inline void PBGhostTrap::set_high(float value) {
  set_has_high();
  high_ = value;
}

// -------------------------------------------------------------------

// PBGhostItem

// optional uint32 dropid = 1;
inline bool PBGhostItem::has_dropid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGhostItem::set_has_dropid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGhostItem::clear_has_dropid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGhostItem::clear_dropid() {
  dropid_ = 0u;
  clear_has_dropid();
}
inline ::google::protobuf::uint32 PBGhostItem::dropid() const {
  return dropid_;
}
inline void PBGhostItem::set_dropid(::google::protobuf::uint32 value) {
  set_has_dropid();
  dropid_ = value;
}

// optional uint32 ownerid = 2;
inline bool PBGhostItem::has_ownerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGhostItem::set_has_ownerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGhostItem::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGhostItem::clear_ownerid() {
  ownerid_ = 0u;
  clear_has_ownerid();
}
inline ::google::protobuf::uint32 PBGhostItem::ownerid() const {
  return ownerid_;
}
inline void PBGhostItem::set_ownerid(::google::protobuf::uint32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// optional uint64 birthtime = 3;
inline bool PBGhostItem::has_birthtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGhostItem::set_has_birthtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGhostItem::clear_has_birthtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGhostItem::clear_birthtime() {
  birthtime_ = GOOGLE_ULONGLONG(0);
  clear_has_birthtime();
}
inline ::google::protobuf::uint64 PBGhostItem::birthtime() const {
  return birthtime_;
}
inline void PBGhostItem::set_birthtime(::google::protobuf::uint64 value) {
  set_has_birthtime();
  birthtime_ = value;
}

// optional uint32 deadid = 4;
inline bool PBGhostItem::has_deadid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGhostItem::set_has_deadid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGhostItem::clear_has_deadid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGhostItem::clear_deadid() {
  deadid_ = 0u;
  clear_has_deadid();
}
inline ::google::protobuf::uint32 PBGhostItem::deadid() const {
  return deadid_;
}
inline void PBGhostItem::set_deadid(::google::protobuf::uint32 value) {
  set_has_deadid();
  deadid_ = value;
}

// -------------------------------------------------------------------

// PBGhostDartCar

// repeated .PBPlayerAvatar avatarList = 1;
inline int PBGhostDartCar::avatarlist_size() const {
  return avatarlist_.size();
}
inline void PBGhostDartCar::clear_avatarlist() {
  avatarlist_.Clear();
}
inline const ::PBPlayerAvatar& PBGhostDartCar::avatarlist(int index) const {
  return avatarlist_.Get(index);
}
inline ::PBPlayerAvatar* PBGhostDartCar::mutable_avatarlist(int index) {
  return avatarlist_.Mutable(index);
}
inline ::PBPlayerAvatar* PBGhostDartCar::add_avatarlist() {
  return avatarlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBPlayerAvatar >&
PBGhostDartCar::avatarlist() const {
  return avatarlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBPlayerAvatar >*
PBGhostDartCar::mutable_avatarlist() {
  return &avatarlist_;
}

// optional uint32 dartCarID = 2;
inline bool PBGhostDartCar::has_dartcarid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGhostDartCar::set_has_dartcarid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGhostDartCar::clear_has_dartcarid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGhostDartCar::clear_dartcarid() {
  dartcarid_ = 0u;
  clear_has_dartcarid();
}
inline ::google::protobuf::uint32 PBGhostDartCar::dartcarid() const {
  return dartcarid_;
}
inline void PBGhostDartCar::set_dartcarid(::google::protobuf::uint32 value) {
  set_has_dartcarid();
  dartcarid_ = value;
}

// optional uint32 prizeLevel = 3;
inline bool PBGhostDartCar::has_prizelevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGhostDartCar::set_has_prizelevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGhostDartCar::clear_has_prizelevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGhostDartCar::clear_prizelevel() {
  prizelevel_ = 0u;
  clear_has_prizelevel();
}
inline ::google::protobuf::uint32 PBGhostDartCar::prizelevel() const {
  return prizelevel_;
}
inline void PBGhostDartCar::set_prizelevel(::google::protobuf::uint32 value) {
  set_has_prizelevel();
  prizelevel_ = value;
}

// optional uint32 leaderPlayerID = 4;
inline bool PBGhostDartCar::has_leaderplayerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGhostDartCar::set_has_leaderplayerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGhostDartCar::clear_has_leaderplayerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGhostDartCar::clear_leaderplayerid() {
  leaderplayerid_ = 0u;
  clear_has_leaderplayerid();
}
inline ::google::protobuf::uint32 PBGhostDartCar::leaderplayerid() const {
  return leaderplayerid_;
}
inline void PBGhostDartCar::set_leaderplayerid(::google::protobuf::uint32 value) {
  set_has_leaderplayerid();
  leaderplayerid_ = value;
}

// repeated uint32 bufferIDList = 5;
inline int PBGhostDartCar::bufferidlist_size() const {
  return bufferidlist_.size();
}
inline void PBGhostDartCar::clear_bufferidlist() {
  bufferidlist_.Clear();
}
inline ::google::protobuf::uint32 PBGhostDartCar::bufferidlist(int index) const {
  return bufferidlist_.Get(index);
}
inline void PBGhostDartCar::set_bufferidlist(int index, ::google::protobuf::uint32 value) {
  bufferidlist_.Set(index, value);
}
inline void PBGhostDartCar::add_bufferidlist(::google::protobuf::uint32 value) {
  bufferidlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PBGhostDartCar::bufferidlist() const {
  return bufferidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PBGhostDartCar::mutable_bufferidlist() {
  return &bufferidlist_;
}

// -------------------------------------------------------------------

// PBGhostInfo

// required .PBGhostUnit unit = 1;
inline bool PBGhostInfo::has_unit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGhostInfo::set_has_unit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGhostInfo::clear_has_unit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGhostInfo::clear_unit() {
  if (unit_ != NULL) unit_->::PBGhostUnit::Clear();
  clear_has_unit();
}
inline const ::PBGhostUnit& PBGhostInfo::unit() const {
  return unit_ != NULL ? *unit_ : *default_instance_->unit_;
}
inline ::PBGhostUnit* PBGhostInfo::mutable_unit() {
  set_has_unit();
  if (unit_ == NULL) unit_ = new ::PBGhostUnit;
  return unit_;
}
inline ::PBGhostUnit* PBGhostInfo::release_unit() {
  clear_has_unit();
  ::PBGhostUnit* temp = unit_;
  unit_ = NULL;
  return temp;
}

// optional .PBGhostPlayer player = 2;
inline bool PBGhostInfo::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGhostInfo::set_has_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGhostInfo::clear_has_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGhostInfo::clear_player() {
  if (player_ != NULL) player_->::PBGhostPlayer::Clear();
  clear_has_player();
}
inline const ::PBGhostPlayer& PBGhostInfo::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::PBGhostPlayer* PBGhostInfo::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::PBGhostPlayer;
  return player_;
}
inline ::PBGhostPlayer* PBGhostInfo::release_player() {
  clear_has_player();
  ::PBGhostPlayer* temp = player_;
  player_ = NULL;
  return temp;
}

// optional .PBGhostMonster monster = 3;
inline bool PBGhostInfo::has_monster() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGhostInfo::set_has_monster() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGhostInfo::clear_has_monster() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGhostInfo::clear_monster() {
  if (monster_ != NULL) monster_->::PBGhostMonster::Clear();
  clear_has_monster();
}
inline const ::PBGhostMonster& PBGhostInfo::monster() const {
  return monster_ != NULL ? *monster_ : *default_instance_->monster_;
}
inline ::PBGhostMonster* PBGhostInfo::mutable_monster() {
  set_has_monster();
  if (monster_ == NULL) monster_ = new ::PBGhostMonster;
  return monster_;
}
inline ::PBGhostMonster* PBGhostInfo::release_monster() {
  clear_has_monster();
  ::PBGhostMonster* temp = monster_;
  monster_ = NULL;
  return temp;
}

// optional .PBGhostPet pet = 4;
inline bool PBGhostInfo::has_pet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGhostInfo::set_has_pet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGhostInfo::clear_has_pet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGhostInfo::clear_pet() {
  if (pet_ != NULL) pet_->::PBGhostPet::Clear();
  clear_has_pet();
}
inline const ::PBGhostPet& PBGhostInfo::pet() const {
  return pet_ != NULL ? *pet_ : *default_instance_->pet_;
}
inline ::PBGhostPet* PBGhostInfo::mutable_pet() {
  set_has_pet();
  if (pet_ == NULL) pet_ = new ::PBGhostPet;
  return pet_;
}
inline ::PBGhostPet* PBGhostInfo::release_pet() {
  clear_has_pet();
  ::PBGhostPet* temp = pet_;
  pet_ = NULL;
  return temp;
}

// optional .PBGhostTrap trap = 5;
inline bool PBGhostInfo::has_trap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBGhostInfo::set_has_trap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBGhostInfo::clear_has_trap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBGhostInfo::clear_trap() {
  if (trap_ != NULL) trap_->::PBGhostTrap::Clear();
  clear_has_trap();
}
inline const ::PBGhostTrap& PBGhostInfo::trap() const {
  return trap_ != NULL ? *trap_ : *default_instance_->trap_;
}
inline ::PBGhostTrap* PBGhostInfo::mutable_trap() {
  set_has_trap();
  if (trap_ == NULL) trap_ = new ::PBGhostTrap;
  return trap_;
}
inline ::PBGhostTrap* PBGhostInfo::release_trap() {
  clear_has_trap();
  ::PBGhostTrap* temp = trap_;
  trap_ = NULL;
  return temp;
}

// optional .PBGhostItem item = 6;
inline bool PBGhostInfo::has_item() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBGhostInfo::set_has_item() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBGhostInfo::clear_has_item() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBGhostInfo::clear_item() {
  if (item_ != NULL) item_->::PBGhostItem::Clear();
  clear_has_item();
}
inline const ::PBGhostItem& PBGhostInfo::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::PBGhostItem* PBGhostInfo::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::PBGhostItem;
  return item_;
}
inline ::PBGhostItem* PBGhostInfo::release_item() {
  clear_has_item();
  ::PBGhostItem* temp = item_;
  item_ = NULL;
  return temp;
}

// optional .PBGhostDartCar dartcar = 7;
inline bool PBGhostInfo::has_dartcar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBGhostInfo::set_has_dartcar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBGhostInfo::clear_has_dartcar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBGhostInfo::clear_dartcar() {
  if (dartcar_ != NULL) dartcar_->::PBGhostDartCar::Clear();
  clear_has_dartcar();
}
inline const ::PBGhostDartCar& PBGhostInfo::dartcar() const {
  return dartcar_ != NULL ? *dartcar_ : *default_instance_->dartcar_;
}
inline ::PBGhostDartCar* PBGhostInfo::mutable_dartcar() {
  set_has_dartcar();
  if (dartcar_ == NULL) dartcar_ = new ::PBGhostDartCar;
  return dartcar_;
}
inline ::PBGhostDartCar* PBGhostInfo::release_dartcar() {
  clear_has_dartcar();
  ::PBGhostDartCar* temp = dartcar_;
  dartcar_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBGhostList

// repeated .PBGhostInfo ghost_info = 1;
inline int PBGhostList::ghost_info_size() const {
  return ghost_info_.size();
}
inline void PBGhostList::clear_ghost_info() {
  ghost_info_.Clear();
}
inline const ::PBGhostInfo& PBGhostList::ghost_info(int index) const {
  return ghost_info_.Get(index);
}
inline ::PBGhostInfo* PBGhostList::mutable_ghost_info(int index) {
  return ghost_info_.Mutable(index);
}
inline ::PBGhostInfo* PBGhostList::add_ghost_info() {
  return ghost_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBGhostInfo >&
PBGhostList::ghost_info() const {
  return ghost_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBGhostInfo >*
PBGhostList::mutable_ghost_info() {
  return &ghost_info_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GhostStruct_2eproto__INCLUDED
