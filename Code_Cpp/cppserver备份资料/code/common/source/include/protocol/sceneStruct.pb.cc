// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sceneStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBSceneGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSceneGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRegionEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRegionEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGameRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGameRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSceneVertex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSceneVertex_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSceneTriangle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSceneTriangle_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBScenePath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBScenePath_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSceneArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSceneArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMonsterCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMonsterCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMonsterRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMonsterRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRoute_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSceneEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSceneEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSceneAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSceneAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlane_reflection_ = NULL;
const ::google::protobuf::Descriptor* BloomParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BloomParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSceneQinggongPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSceneQinggongPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBQinggongRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBQinggongRoute_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSceneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSceneInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* _emRegionMark_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emRegionTriggerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emRegionEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emSceneAreaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emRouteType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emMonsterRefreshType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sceneStruct_2eproto() {
  protobuf_AddDesc_sceneStruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sceneStruct.proto");
  GOOGLE_CHECK(file != NULL);
  PBSceneGrid_descriptor_ = file->message_type(0);
  static const int PBSceneGrid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneGrid, gridx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneGrid, gridy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneGrid, regionid_),
  };
  PBSceneGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSceneGrid_descriptor_,
      PBSceneGrid::default_instance_,
      PBSceneGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSceneGrid));
  PBRegionEvent_descriptor_ = file->message_type(1);
  static const int PBRegionEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegionEvent, triggertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegionEvent, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegionEvent, paramlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegionEvent, disableeffect_),
  };
  PBRegionEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRegionEvent_descriptor_,
      PBRegionEvent::default_instance_,
      PBRegionEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegionEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegionEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRegionEvent));
  PBGameRegion_descriptor_ = file->message_type(2);
  static const int PBGameRegion_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameRegion, regionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameRegion, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameRegion, eventlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameRegion, collidername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameRegion, regioncolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameRegion, centerx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameRegion, centery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameRegion, regionparam_),
  };
  PBGameRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGameRegion_descriptor_,
      PBGameRegion::default_instance_,
      PBGameRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGameRegion));
  PBSceneVertex_descriptor_ = file->message_type(3);
  static const int PBSceneVertex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneVertex, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneVertex, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneVertex, z_),
  };
  PBSceneVertex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSceneVertex_descriptor_,
      PBSceneVertex::default_instance_,
      PBSceneVertex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneVertex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneVertex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSceneVertex));
  PBSceneTriangle_descriptor_ = file->message_type(4);
  static const int PBSceneTriangle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneTriangle, vertexindex1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneTriangle, vertexindex2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneTriangle, vertexindex3_),
  };
  PBSceneTriangle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSceneTriangle_descriptor_,
      PBSceneTriangle::default_instance_,
      PBSceneTriangle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneTriangle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneTriangle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSceneTriangle));
  PBScenePath_descriptor_ = file->message_type(5);
  static const int PBScenePath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBScenePath, vertexlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBScenePath, trianglelist_),
  };
  PBScenePath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBScenePath_descriptor_,
      PBScenePath::default_instance_,
      PBScenePath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBScenePath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBScenePath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBScenePath));
  PBSceneArea_descriptor_ = file->message_type(6);
  static const int PBSceneArea_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneArea, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneArea, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneArea, isdynamic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneArea, vertexlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneArea, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneArea, adddelaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneArea, deldelaytime_),
  };
  PBSceneArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSceneArea_descriptor_,
      PBSceneArea::default_instance_,
      PBSceneArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSceneArea));
  PBMonsterCount_descriptor_ = file->message_type(7);
  static const int PBMonsterCount_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterCount, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterCount, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterCount, routeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterCount, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterCount, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterCount, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterCount, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterCount, posy_),
  };
  PBMonsterCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMonsterCount_descriptor_,
      PBMonsterCount::default_instance_,
      PBMonsterCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMonsterCount));
  PBMonsterRegion_descriptor_ = file->message_type(8);
  static const int PBMonsterRegion_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRegion, refreshtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRegion, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRegion, fixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRegion, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRegion, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRegion, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRegion, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRegion, monsterlist_),
  };
  PBMonsterRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMonsterRegion_descriptor_,
      PBMonsterRegion::default_instance_,
      PBMonsterRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonsterRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMonsterRegion));
  PBRoute_descriptor_ = file->message_type(9);
  static const int PBRoute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoute, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoute, vertexlist_),
  };
  PBRoute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRoute_descriptor_,
      PBRoute::default_instance_,
      PBRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRoute));
  PBSceneEvent_descriptor_ = file->message_type(10);
  static const int PBSceneEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneEvent, actionlist_),
  };
  PBSceneEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSceneEvent_descriptor_,
      PBSceneEvent::default_instance_,
      PBSceneEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSceneEvent));
  PBSceneAction_descriptor_ = file->message_type(11);
  static const int PBSceneAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneAction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneAction, paramlist_),
  };
  PBSceneAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSceneAction_descriptor_,
      PBSceneAction::default_instance_,
      PBSceneAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSceneAction));
  PBPlane_descriptor_ = file->message_type(12);
  static const int PBPlane_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlane, planeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlane, gameobjectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlane, monsterregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlane, sceneareaids_),
  };
  PBPlane_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlane_descriptor_,
      PBPlane::default_instance_,
      PBPlane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlane, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlane, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlane));
  BloomParam_descriptor_ = file->message_type(13);
  static const int BloomParam_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomParam, colormix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomParam, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomParam, intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomParam, blursize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomParam, quality_),
  };
  BloomParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BloomParam_descriptor_,
      BloomParam::default_instance_,
      BloomParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BloomParam));
  PBSceneQinggongPoint_descriptor_ = file->message_type(14);
  static const int PBSceneQinggongPoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneQinggongPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneQinggongPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneQinggongPoint, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneQinggongPoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneQinggongPoint, speed_),
  };
  PBSceneQinggongPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSceneQinggongPoint_descriptor_,
      PBSceneQinggongPoint::default_instance_,
      PBSceneQinggongPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneQinggongPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneQinggongPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSceneQinggongPoint));
  PBQinggongRoute_descriptor_ = file->message_type(15);
  static const int PBQinggongRoute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQinggongRoute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQinggongRoute, vertexlist_),
  };
  PBQinggongRoute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBQinggongRoute_descriptor_,
      PBQinggongRoute::default_instance_,
      PBQinggongRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQinggongRoute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBQinggongRoute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBQinggongRoute));
  PBSceneInfo_descriptor_ = file->message_type(16);
  static const int PBSceneInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, scenewide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, scenehigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, gridwide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, gridhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, gridinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, regionlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, monsterregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, arealist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, routelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, eulerx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, eulery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, viewdis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, planes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, sceneevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, bloomparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, usebloom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, defaultregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, qinggonglist_),
  };
  PBSceneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSceneInfo_descriptor_,
      PBSceneInfo::default_instance_,
      PBSceneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSceneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSceneInfo));
  _emRegionMark_descriptor_ = file->enum_type(0);
  _emRegionTriggerType_descriptor_ = file->enum_type(1);
  _emRegionEventType_descriptor_ = file->enum_type(2);
  _emSceneAreaType_descriptor_ = file->enum_type(3);
  _emRouteType_descriptor_ = file->enum_type(4);
  _emMonsterRefreshType_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sceneStruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSceneGrid_descriptor_, &PBSceneGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRegionEvent_descriptor_, &PBRegionEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGameRegion_descriptor_, &PBGameRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSceneVertex_descriptor_, &PBSceneVertex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSceneTriangle_descriptor_, &PBSceneTriangle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBScenePath_descriptor_, &PBScenePath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSceneArea_descriptor_, &PBSceneArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMonsterCount_descriptor_, &PBMonsterCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMonsterRegion_descriptor_, &PBMonsterRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRoute_descriptor_, &PBRoute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSceneEvent_descriptor_, &PBSceneEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSceneAction_descriptor_, &PBSceneAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlane_descriptor_, &PBPlane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BloomParam_descriptor_, &BloomParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSceneQinggongPoint_descriptor_, &PBSceneQinggongPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBQinggongRoute_descriptor_, &PBQinggongRoute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSceneInfo_descriptor_, &PBSceneInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sceneStruct_2eproto() {
  delete PBSceneGrid::default_instance_;
  delete PBSceneGrid_reflection_;
  delete PBRegionEvent::default_instance_;
  delete PBRegionEvent_reflection_;
  delete PBGameRegion::default_instance_;
  delete PBGameRegion_reflection_;
  delete PBSceneVertex::default_instance_;
  delete PBSceneVertex_reflection_;
  delete PBSceneTriangle::default_instance_;
  delete PBSceneTriangle_reflection_;
  delete PBScenePath::default_instance_;
  delete PBScenePath_reflection_;
  delete PBSceneArea::default_instance_;
  delete PBSceneArea_reflection_;
  delete PBMonsterCount::default_instance_;
  delete PBMonsterCount_reflection_;
  delete PBMonsterRegion::default_instance_;
  delete PBMonsterRegion_reflection_;
  delete PBRoute::default_instance_;
  delete PBRoute_reflection_;
  delete PBSceneEvent::default_instance_;
  delete PBSceneEvent_reflection_;
  delete PBSceneAction::default_instance_;
  delete PBSceneAction_reflection_;
  delete PBPlane::default_instance_;
  delete PBPlane_reflection_;
  delete BloomParam::default_instance_;
  delete BloomParam_reflection_;
  delete PBSceneQinggongPoint::default_instance_;
  delete PBSceneQinggongPoint_reflection_;
  delete PBQinggongRoute::default_instance_;
  delete PBQinggongRoute_reflection_;
  delete PBSceneInfo::default_instance_;
  delete PBSceneInfo_reflection_;
}

void protobuf_AddDesc_sceneStruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021sceneStruct.proto\"=\n\013PBSceneGrid\022\r\n\005gr"
    "idx\030\001 \001(\r\022\r\n\005gridy\030\002 \001(\r\022\020\n\010regionid\030\003 \003"
    "(\r\"a\n\rPBRegionEvent\022\023\n\013triggertype\030\001 \001(\r"
    "\022\021\n\teventtype\030\002 \001(\r\022\021\n\tparamlist\030\003 \003(\005\022\025"
    "\n\rdisableEffect\030\004 \001(\010\"\263\001\n\014PBGameRegion\022\020"
    "\n\010regionid\030\001 \001(\r\022\014\n\004mark\030\002 \003(\010\022!\n\teventl"
    "ist\030\003 \003(\0132\016.PBRegionEvent\022\024\n\014collidernam"
    "e\030\004 \003(\t\022\023\n\013regioncolor\030\005 \003(\t\022\017\n\007centerx\030"
    "\006 \001(\002\022\017\n\007centery\030\007 \001(\002\022\023\n\013regionparam\030\010 "
    "\001(\r\"0\n\rPBSceneVertex\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
    "(\002\022\t\n\001z\030\003 \001(\002\"S\n\017PBSceneTriangle\022\024\n\014vert"
    "exindex1\030\001 \001(\r\022\024\n\014vertexindex2\030\002 \001(\r\022\024\n\014"
    "vertexindex3\030\003 \001(\r\"Y\n\013PBScenePath\022\"\n\nver"
    "texlist\030\001 \003(\0132\016.PBSceneVertex\022&\n\014triangl"
    "elist\030\002 \003(\0132\020.PBSceneTriangle\"\232\001\n\013PBScen"
    "eArea\022\n\n\002id\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\021\n\tisdyn"
    "amic\030\003 \001(\010\022\"\n\nvertexlist\030\004 \003(\0132\016.PBScene"
    "Vertex\022\016\n\006height\030\005 \001(\002\022\024\n\014adddelaytime\030\006"
    " \001(\r\022\024\n\014deldelaytime\030\007 \001(\r\"\222\001\n\016PBMonster"
    "Count\022\021\n\tmonsterid\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022"
    "\017\n\007routeid\030\003 \001(\r\022\020\n\010unittype\030\004 \001(\r\022\017\n\007gr"
    "oupid\030\005 \001(\r\022\016\n\006areaid\030\006 \001(\r\022\014\n\004posx\030\007 \001("
    "\002\022\014\n\004posy\030\010 \001(\002\"\242\001\n\017PBMonsterRegion\022\023\n\013r"
    "efreshtype\030\001 \001(\r\022\020\n\010interval\030\002 \001(\r\022\017\n\007fi"
    "xtime\030\003 \001(\t\022\t\n\001x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\016\n\006rad"
    "ius\030\006 \001(\002\022\013\n\003dir\030\007 \001(\002\022$\n\013monsterlist\030\010 "
    "\003(\0132\017.PBMonsterCount\"G\n\007PBRoute\022\n\n\002id\030\001 "
    "\001(\r\022\014\n\004type\030\002 \001(\r\022\"\n\nvertexlist\030\003 \003(\0132\016."
    "PBSceneVertex\">\n\014PBSceneEvent\022\n\n\002id\030\001 \001("
    "\r\022\"\n\nactionlist\030\002 \003(\0132\016.PBSceneAction\"0\n"
    "\rPBSceneAction\022\014\n\004type\030\001 \001(\r\022\021\n\tparamlis"
    "t\030\002 \003(\t\"q\n\007PBPlane\022\017\n\007planeid\030\001 \001(\r\022\026\n\016g"
    "ameobjectname\030\002 \001(\t\022\'\n\rmonsterregion\030\003 \003"
    "(\0132\020.PBMonsterRegion\022\024\n\014sceneAreaIds\030\004 \003"
    "(\r\"u\n\nBloomParam\022\020\n\010colorMix\030\001 \001(\t\022\021\n\tth"
    "reshold\030\002 \001(\002\022\021\n\tintensity\030\003 \001(\002\022\020\n\010blur"
    "Size\030\004 \001(\002\022\014\n\004type\030\005 \001(\r\022\017\n\007quality\030\006 \001("
    "\r\"T\n\024PBSceneQinggongPoint\022\t\n\001x\030\001 \001(\002\022\t\n\001"
    "y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\014\n\004type\030\004 \001(\r\022\r\n\005spee"
    "d\030\005 \001(\r\"H\n\017PBQinggongRoute\022\n\n\002id\030\001 \001(\r\022)"
    "\n\nvertexlist\030\002 \003(\0132\025.PBSceneQinggongPoin"
    "t\"\213\004\n\013PBSceneInfo\022\021\n\tscenewide\030\001 \001(\r\022\021\n\t"
    "scenehigh\030\002 \001(\r\022\020\n\010gridwide\030\003 \001(\r\022\020\n\010gri"
    "dhigh\030\004 \001(\r\022\036\n\010gridinfo\030\005 \003(\0132\014.PBSceneG"
    "rid\022!\n\nregionlist\030\006 \003(\0132\r.PBGameRegion\022\032"
    "\n\004path\030\007 \001(\0132\014.PBScenePath\022\'\n\rmonsterreg"
    "ion\030\010 \003(\0132\020.PBMonsterRegion\022\036\n\010arealist\030"
    "\t \003(\0132\014.PBSceneArea\022\033\n\troutelist\030\n \003(\0132\010"
    ".PBRoute\022\016\n\006eulerX\030\013 \001(\002\022\016\n\006eulerY\030\014 \001(\002"
    "\022\017\n\007viewDis\030\r \001(\002\022\030\n\006planes\030\016 \003(\0132\010.PBPl"
    "ane\022!\n\nsceneEvent\030\017 \003(\0132\r.PBSceneEvent\022\037"
    "\n\nbloomParam\030\020 \001(\0132\013.BloomParam\022\020\n\010useBl"
    "oom\030\021 \001(\010\022$\n\rdefaultregion\030\022 \001(\0132\r.PBGam"
    "eRegion\022&\n\014qinggonglist\030\023 \003(\0132\020.PBQinggo"
    "ngRoute*\214\002\n\r_emRegionMark\022 \n\034RegionMark_"
    "PlayerCntUseSkill\020\000\022\036\n\032RegionMark_Player"
    "CntBeHarm\020\001\022\034\n\030RegionMark_CntAddPKValue\020"
    "\002\022\032\n\026RegionMark_CntMounting\020\003\022\031\n\025RegionM"
    "ark_Collection\020\004\022\024\n\020RegionMark_ZaZen\020\005\022\024"
    "\n\020RegionMark_CntHP\020\006\022\030\n\024RegionMark_Manor"
    "Safe\020\007\022\036\n\032RegionMark_IsSpacialRegion\020\010*P"
    "\n\024_emRegionTriggerType\022\033\n\027RegionTriggerT"
    "ype_Enter\020\000\022\033\n\027RegionTriggerType_Leave\020\001"
    "*\304\002\n\022_emRegionEventType\022\034\n\030RegionEventTy"
    "pe_Transfer\020\000\022\030\n\024RegionEventType_Move\020\001\022"
    "!\n\035RegionEventType_QinggongStart\020\002\022\036\n\032Re"
    "gionEventType_EnterPlane\020\003\022\"\n\036RegionEven"
    "tType_ManorEnterLine\020\004\022\"\n\036RegionEventTyp"
    "e_ManorLeaveLine\020\005\022\"\n\036RegionEventType_Ma"
    "norEnterFlag\020\006\022\"\n\036RegionEventType_ManorL"
    "eaveFlag\020\007\022#\n\037RegionEventType_ManorBack2"
    "Lobby\020\010*\215\001\n\020_emSceneAreaType\022\027\n\023SceneAre"
    "aType_Groud\020\000\022\026\n\022SceneAreaType_Door\020\001\022\027\n"
    "\023SceneAreaType_Grass\020\002\022\026\n\022SceneAreaType_"
    "Road\020\003\022\027\n\023SceneAreaType_Water\020\004*R\n\014_emRo"
    "uteType\022\024\n\020RouteType_Target\020\000\022\026\n\022RouteTy"
    "pe_PingPong\020\001\022\024\n\020RouteType_Circle\020\002*\304\001\n\025"
    "_emMonsterRefreshType\022\033\n\027MonsterRefreshT"
    "ype_None\020\000\022#\n\037MonsterRefreshType_Interva"
    "lTime\020\001\022 \n\034MonsterRefreshType_DeathTime\020"
    "\002\022 \n\034MonsterRefreshType_FixedTime\020\003\022%\n!M"
    "onsterRefreshType_DeathTimeGroup\020\004", 3274);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sceneStruct.proto", &protobuf_RegisterTypes);
  PBSceneGrid::default_instance_ = new PBSceneGrid();
  PBRegionEvent::default_instance_ = new PBRegionEvent();
  PBGameRegion::default_instance_ = new PBGameRegion();
  PBSceneVertex::default_instance_ = new PBSceneVertex();
  PBSceneTriangle::default_instance_ = new PBSceneTriangle();
  PBScenePath::default_instance_ = new PBScenePath();
  PBSceneArea::default_instance_ = new PBSceneArea();
  PBMonsterCount::default_instance_ = new PBMonsterCount();
  PBMonsterRegion::default_instance_ = new PBMonsterRegion();
  PBRoute::default_instance_ = new PBRoute();
  PBSceneEvent::default_instance_ = new PBSceneEvent();
  PBSceneAction::default_instance_ = new PBSceneAction();
  PBPlane::default_instance_ = new PBPlane();
  BloomParam::default_instance_ = new BloomParam();
  PBSceneQinggongPoint::default_instance_ = new PBSceneQinggongPoint();
  PBQinggongRoute::default_instance_ = new PBQinggongRoute();
  PBSceneInfo::default_instance_ = new PBSceneInfo();
  PBSceneGrid::default_instance_->InitAsDefaultInstance();
  PBRegionEvent::default_instance_->InitAsDefaultInstance();
  PBGameRegion::default_instance_->InitAsDefaultInstance();
  PBSceneVertex::default_instance_->InitAsDefaultInstance();
  PBSceneTriangle::default_instance_->InitAsDefaultInstance();
  PBScenePath::default_instance_->InitAsDefaultInstance();
  PBSceneArea::default_instance_->InitAsDefaultInstance();
  PBMonsterCount::default_instance_->InitAsDefaultInstance();
  PBMonsterRegion::default_instance_->InitAsDefaultInstance();
  PBRoute::default_instance_->InitAsDefaultInstance();
  PBSceneEvent::default_instance_->InitAsDefaultInstance();
  PBSceneAction::default_instance_->InitAsDefaultInstance();
  PBPlane::default_instance_->InitAsDefaultInstance();
  BloomParam::default_instance_->InitAsDefaultInstance();
  PBSceneQinggongPoint::default_instance_->InitAsDefaultInstance();
  PBQinggongRoute::default_instance_->InitAsDefaultInstance();
  PBSceneInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sceneStruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sceneStruct_2eproto {
  StaticDescriptorInitializer_sceneStruct_2eproto() {
    protobuf_AddDesc_sceneStruct_2eproto();
  }
} static_descriptor_initializer_sceneStruct_2eproto_;

const ::google::protobuf::EnumDescriptor* _emRegionMark_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emRegionMark_descriptor_;
}
bool _emRegionMark_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emRegionTriggerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emRegionTriggerType_descriptor_;
}
bool _emRegionTriggerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emRegionEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emRegionEventType_descriptor_;
}
bool _emRegionEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emSceneAreaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emSceneAreaType_descriptor_;
}
bool _emSceneAreaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emRouteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emRouteType_descriptor_;
}
bool _emRouteType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emMonsterRefreshType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emMonsterRefreshType_descriptor_;
}
bool _emMonsterRefreshType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PBSceneGrid::kGridxFieldNumber;
const int PBSceneGrid::kGridyFieldNumber;
const int PBSceneGrid::kRegionidFieldNumber;
#endif  // !_MSC_VER

PBSceneGrid::PBSceneGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSceneGrid::InitAsDefaultInstance() {
}

PBSceneGrid::PBSceneGrid(const PBSceneGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSceneGrid::SharedCtor() {
  _cached_size_ = 0;
  gridx_ = 0u;
  gridy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSceneGrid::~PBSceneGrid() {
  SharedDtor();
}

void PBSceneGrid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSceneGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSceneGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSceneGrid_descriptor_;
}

const PBSceneGrid& PBSceneGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBSceneGrid* PBSceneGrid::default_instance_ = NULL;

PBSceneGrid* PBSceneGrid::New() const {
  return new PBSceneGrid;
}

void PBSceneGrid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gridx_ = 0u;
    gridy_ = 0u;
  }
  regionid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSceneGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gridx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridx_)));
          set_has_gridx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gridy;
        break;
      }
      
      // optional uint32 gridy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridy_)));
          set_has_gridy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_regionid;
        break;
      }
      
      // repeated uint32 regionid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_regionid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_regionid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_regionid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSceneGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gridx = 1;
  if (has_gridx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gridx(), output);
  }
  
  // optional uint32 gridy = 2;
  if (has_gridy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gridy(), output);
  }
  
  // repeated uint32 regionid = 3;
  for (int i = 0; i < this->regionid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->regionid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSceneGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gridx = 1;
  if (has_gridx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gridx(), target);
  }
  
  // optional uint32 gridy = 2;
  if (has_gridy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gridy(), target);
  }
  
  // repeated uint32 regionid = 3;
  for (int i = 0; i < this->regionid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->regionid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSceneGrid::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gridx = 1;
    if (has_gridx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridx());
    }
    
    // optional uint32 gridy = 2;
    if (has_gridy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridy());
    }
    
  }
  // repeated uint32 regionid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->regionid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->regionid(i));
    }
    total_size += 1 * this->regionid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSceneGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSceneGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSceneGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSceneGrid::MergeFrom(const PBSceneGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  regionid_.MergeFrom(from.regionid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridx()) {
      set_gridx(from.gridx());
    }
    if (from.has_gridy()) {
      set_gridy(from.gridy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSceneGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSceneGrid::CopyFrom(const PBSceneGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSceneGrid::IsInitialized() const {
  
  return true;
}

void PBSceneGrid::Swap(PBSceneGrid* other) {
  if (other != this) {
    std::swap(gridx_, other->gridx_);
    std::swap(gridy_, other->gridy_);
    regionid_.Swap(&other->regionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSceneGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSceneGrid_descriptor_;
  metadata.reflection = PBSceneGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRegionEvent::kTriggertypeFieldNumber;
const int PBRegionEvent::kEventtypeFieldNumber;
const int PBRegionEvent::kParamlistFieldNumber;
const int PBRegionEvent::kDisableEffectFieldNumber;
#endif  // !_MSC_VER

PBRegionEvent::PBRegionEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRegionEvent::InitAsDefaultInstance() {
}

PBRegionEvent::PBRegionEvent(const PBRegionEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRegionEvent::SharedCtor() {
  _cached_size_ = 0;
  triggertype_ = 0u;
  eventtype_ = 0u;
  disableeffect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRegionEvent::~PBRegionEvent() {
  SharedDtor();
}

void PBRegionEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRegionEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRegionEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRegionEvent_descriptor_;
}

const PBRegionEvent& PBRegionEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBRegionEvent* PBRegionEvent::default_instance_ = NULL;

PBRegionEvent* PBRegionEvent::New() const {
  return new PBRegionEvent;
}

void PBRegionEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    triggertype_ = 0u;
    eventtype_ = 0u;
    disableeffect_ = false;
  }
  paramlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRegionEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 triggertype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventtype;
        break;
      }
      
      // optional uint32 eventtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventtype_)));
          set_has_eventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_paramlist;
        break;
      }
      
      // repeated int32 paramlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paramlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_paramlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_paramlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_paramlist;
        if (input->ExpectTag(32)) goto parse_disableEffect;
        break;
      }
      
      // optional bool disableEffect = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disableEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disableeffect_)));
          set_has_disableeffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRegionEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 triggertype = 1;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->triggertype(), output);
  }
  
  // optional uint32 eventtype = 2;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eventtype(), output);
  }
  
  // repeated int32 paramlist = 3;
  for (int i = 0; i < this->paramlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->paramlist(i), output);
  }
  
  // optional bool disableEffect = 4;
  if (has_disableeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disableeffect(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRegionEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 triggertype = 1;
  if (has_triggertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->triggertype(), target);
  }
  
  // optional uint32 eventtype = 2;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eventtype(), target);
  }
  
  // repeated int32 paramlist = 3;
  for (int i = 0; i < this->paramlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->paramlist(i), target);
  }
  
  // optional bool disableEffect = 4;
  if (has_disableeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disableeffect(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRegionEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 triggertype = 1;
    if (has_triggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggertype());
    }
    
    // optional uint32 eventtype = 2;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventtype());
    }
    
    // optional bool disableEffect = 4;
    if (has_disableeffect()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 paramlist = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->paramlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->paramlist(i));
    }
    total_size += 1 * this->paramlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRegionEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRegionEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRegionEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRegionEvent::MergeFrom(const PBRegionEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  paramlist_.MergeFrom(from.paramlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_disableeffect()) {
      set_disableeffect(from.disableeffect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRegionEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRegionEvent::CopyFrom(const PBRegionEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRegionEvent::IsInitialized() const {
  
  return true;
}

void PBRegionEvent::Swap(PBRegionEvent* other) {
  if (other != this) {
    std::swap(triggertype_, other->triggertype_);
    std::swap(eventtype_, other->eventtype_);
    paramlist_.Swap(&other->paramlist_);
    std::swap(disableeffect_, other->disableeffect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRegionEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRegionEvent_descriptor_;
  metadata.reflection = PBRegionEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGameRegion::kRegionidFieldNumber;
const int PBGameRegion::kMarkFieldNumber;
const int PBGameRegion::kEventlistFieldNumber;
const int PBGameRegion::kCollidernameFieldNumber;
const int PBGameRegion::kRegioncolorFieldNumber;
const int PBGameRegion::kCenterxFieldNumber;
const int PBGameRegion::kCenteryFieldNumber;
const int PBGameRegion::kRegionparamFieldNumber;
#endif  // !_MSC_VER

PBGameRegion::PBGameRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGameRegion::InitAsDefaultInstance() {
}

PBGameRegion::PBGameRegion(const PBGameRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGameRegion::SharedCtor() {
  _cached_size_ = 0;
  regionid_ = 0u;
  centerx_ = 0;
  centery_ = 0;
  regionparam_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGameRegion::~PBGameRegion() {
  SharedDtor();
}

void PBGameRegion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGameRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGameRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGameRegion_descriptor_;
}

const PBGameRegion& PBGameRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBGameRegion* PBGameRegion::default_instance_ = NULL;

PBGameRegion* PBGameRegion::New() const {
  return new PBGameRegion;
}

void PBGameRegion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    regionid_ = 0u;
    centerx_ = 0;
    centery_ = 0;
    regionparam_ = 0u;
  }
  mark_.Clear();
  eventlist_.Clear();
  collidername_.Clear();
  regioncolor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGameRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 regionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regionid_)));
          set_has_regionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mark;
        break;
      }
      
      // repeated bool mark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_mark())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_mark())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mark;
        if (input->ExpectTag(26)) goto parse_eventlist;
        break;
      }
      
      // repeated .PBRegionEvent eventlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eventlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_eventlist;
        if (input->ExpectTag(34)) goto parse_collidername;
        break;
      }
      
      // repeated string collidername = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collidername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_collidername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collidername(0).data(), this->collidername(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_collidername;
        if (input->ExpectTag(42)) goto parse_regioncolor;
        break;
      }
      
      // repeated string regioncolor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regioncolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_regioncolor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regioncolor(0).data(), this->regioncolor(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_regioncolor;
        if (input->ExpectTag(53)) goto parse_centerx;
        break;
      }
      
      // optional float centerx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_centerx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &centerx_)));
          set_has_centerx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_centery;
        break;
      }
      
      // optional float centery = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_centery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &centery_)));
          set_has_centery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_regionparam;
        break;
      }
      
      // optional uint32 regionparam = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regionparam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regionparam_)));
          set_has_regionparam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGameRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 regionid = 1;
  if (has_regionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->regionid(), output);
  }
  
  // repeated bool mark = 2;
  for (int i = 0; i < this->mark_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->mark(i), output);
  }
  
  // repeated .PBRegionEvent eventlist = 3;
  for (int i = 0; i < this->eventlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->eventlist(i), output);
  }
  
  // repeated string collidername = 4;
  for (int i = 0; i < this->collidername_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->collidername(i).data(), this->collidername(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->collidername(i), output);
  }
  
  // repeated string regioncolor = 5;
  for (int i = 0; i < this->regioncolor_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->regioncolor(i).data(), this->regioncolor(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->regioncolor(i), output);
  }
  
  // optional float centerx = 6;
  if (has_centerx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->centerx(), output);
  }
  
  // optional float centery = 7;
  if (has_centery()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->centery(), output);
  }
  
  // optional uint32 regionparam = 8;
  if (has_regionparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->regionparam(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGameRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 regionid = 1;
  if (has_regionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->regionid(), target);
  }
  
  // repeated bool mark = 2;
  for (int i = 0; i < this->mark_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->mark(i), target);
  }
  
  // repeated .PBRegionEvent eventlist = 3;
  for (int i = 0; i < this->eventlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->eventlist(i), target);
  }
  
  // repeated string collidername = 4;
  for (int i = 0; i < this->collidername_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collidername(i).data(), this->collidername(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->collidername(i), target);
  }
  
  // repeated string regioncolor = 5;
  for (int i = 0; i < this->regioncolor_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regioncolor(i).data(), this->regioncolor(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->regioncolor(i), target);
  }
  
  // optional float centerx = 6;
  if (has_centerx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->centerx(), target);
  }
  
  // optional float centery = 7;
  if (has_centery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->centery(), target);
  }
  
  // optional uint32 regionparam = 8;
  if (has_regionparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->regionparam(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGameRegion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 regionid = 1;
    if (has_regionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regionid());
    }
    
    // optional float centerx = 6;
    if (has_centerx()) {
      total_size += 1 + 4;
    }
    
    // optional float centery = 7;
    if (has_centery()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 regionparam = 8;
    if (has_regionparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regionparam());
    }
    
  }
  // repeated bool mark = 2;
  {
    int data_size = 0;
    data_size = 1 * this->mark_size();
    total_size += 1 * this->mark_size() + data_size;
  }
  
  // repeated .PBRegionEvent eventlist = 3;
  total_size += 1 * this->eventlist_size();
  for (int i = 0; i < this->eventlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventlist(i));
  }
  
  // repeated string collidername = 4;
  total_size += 1 * this->collidername_size();
  for (int i = 0; i < this->collidername_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->collidername(i));
  }
  
  // repeated string regioncolor = 5;
  total_size += 1 * this->regioncolor_size();
  for (int i = 0; i < this->regioncolor_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->regioncolor(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGameRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGameRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGameRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGameRegion::MergeFrom(const PBGameRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_.MergeFrom(from.mark_);
  eventlist_.MergeFrom(from.eventlist_);
  collidername_.MergeFrom(from.collidername_);
  regioncolor_.MergeFrom(from.regioncolor_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regionid()) {
      set_regionid(from.regionid());
    }
    if (from.has_centerx()) {
      set_centerx(from.centerx());
    }
    if (from.has_centery()) {
      set_centery(from.centery());
    }
    if (from.has_regionparam()) {
      set_regionparam(from.regionparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGameRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGameRegion::CopyFrom(const PBGameRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGameRegion::IsInitialized() const {
  
  return true;
}

void PBGameRegion::Swap(PBGameRegion* other) {
  if (other != this) {
    std::swap(regionid_, other->regionid_);
    mark_.Swap(&other->mark_);
    eventlist_.Swap(&other->eventlist_);
    collidername_.Swap(&other->collidername_);
    regioncolor_.Swap(&other->regioncolor_);
    std::swap(centerx_, other->centerx_);
    std::swap(centery_, other->centery_);
    std::swap(regionparam_, other->regionparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGameRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGameRegion_descriptor_;
  metadata.reflection = PBGameRegion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSceneVertex::kXFieldNumber;
const int PBSceneVertex::kYFieldNumber;
const int PBSceneVertex::kZFieldNumber;
#endif  // !_MSC_VER

PBSceneVertex::PBSceneVertex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSceneVertex::InitAsDefaultInstance() {
}

PBSceneVertex::PBSceneVertex(const PBSceneVertex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSceneVertex::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSceneVertex::~PBSceneVertex() {
  SharedDtor();
}

void PBSceneVertex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSceneVertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSceneVertex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSceneVertex_descriptor_;
}

const PBSceneVertex& PBSceneVertex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBSceneVertex* PBSceneVertex::default_instance_ = NULL;

PBSceneVertex* PBSceneVertex::New() const {
  return new PBSceneVertex;
}

void PBSceneVertex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSceneVertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSceneVertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSceneVertex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSceneVertex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSceneVertex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSceneVertex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSceneVertex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSceneVertex::MergeFrom(const PBSceneVertex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSceneVertex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSceneVertex::CopyFrom(const PBSceneVertex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSceneVertex::IsInitialized() const {
  
  return true;
}

void PBSceneVertex::Swap(PBSceneVertex* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSceneVertex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSceneVertex_descriptor_;
  metadata.reflection = PBSceneVertex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSceneTriangle::kVertexindex1FieldNumber;
const int PBSceneTriangle::kVertexindex2FieldNumber;
const int PBSceneTriangle::kVertexindex3FieldNumber;
#endif  // !_MSC_VER

PBSceneTriangle::PBSceneTriangle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSceneTriangle::InitAsDefaultInstance() {
}

PBSceneTriangle::PBSceneTriangle(const PBSceneTriangle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSceneTriangle::SharedCtor() {
  _cached_size_ = 0;
  vertexindex1_ = 0u;
  vertexindex2_ = 0u;
  vertexindex3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSceneTriangle::~PBSceneTriangle() {
  SharedDtor();
}

void PBSceneTriangle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSceneTriangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSceneTriangle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSceneTriangle_descriptor_;
}

const PBSceneTriangle& PBSceneTriangle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBSceneTriangle* PBSceneTriangle::default_instance_ = NULL;

PBSceneTriangle* PBSceneTriangle::New() const {
  return new PBSceneTriangle;
}

void PBSceneTriangle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vertexindex1_ = 0u;
    vertexindex2_ = 0u;
    vertexindex3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSceneTriangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vertexindex1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertexindex1_)));
          set_has_vertexindex1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vertexindex2;
        break;
      }
      
      // optional uint32 vertexindex2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertexindex2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertexindex2_)));
          set_has_vertexindex2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vertexindex3;
        break;
      }
      
      // optional uint32 vertexindex3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertexindex3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertexindex3_)));
          set_has_vertexindex3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSceneTriangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 vertexindex1 = 1;
  if (has_vertexindex1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vertexindex1(), output);
  }
  
  // optional uint32 vertexindex2 = 2;
  if (has_vertexindex2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vertexindex2(), output);
  }
  
  // optional uint32 vertexindex3 = 3;
  if (has_vertexindex3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vertexindex3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSceneTriangle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 vertexindex1 = 1;
  if (has_vertexindex1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vertexindex1(), target);
  }
  
  // optional uint32 vertexindex2 = 2;
  if (has_vertexindex2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vertexindex2(), target);
  }
  
  // optional uint32 vertexindex3 = 3;
  if (has_vertexindex3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vertexindex3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSceneTriangle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 vertexindex1 = 1;
    if (has_vertexindex1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vertexindex1());
    }
    
    // optional uint32 vertexindex2 = 2;
    if (has_vertexindex2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vertexindex2());
    }
    
    // optional uint32 vertexindex3 = 3;
    if (has_vertexindex3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vertexindex3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSceneTriangle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSceneTriangle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSceneTriangle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSceneTriangle::MergeFrom(const PBSceneTriangle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vertexindex1()) {
      set_vertexindex1(from.vertexindex1());
    }
    if (from.has_vertexindex2()) {
      set_vertexindex2(from.vertexindex2());
    }
    if (from.has_vertexindex3()) {
      set_vertexindex3(from.vertexindex3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSceneTriangle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSceneTriangle::CopyFrom(const PBSceneTriangle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSceneTriangle::IsInitialized() const {
  
  return true;
}

void PBSceneTriangle::Swap(PBSceneTriangle* other) {
  if (other != this) {
    std::swap(vertexindex1_, other->vertexindex1_);
    std::swap(vertexindex2_, other->vertexindex2_);
    std::swap(vertexindex3_, other->vertexindex3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSceneTriangle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSceneTriangle_descriptor_;
  metadata.reflection = PBSceneTriangle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBScenePath::kVertexlistFieldNumber;
const int PBScenePath::kTrianglelistFieldNumber;
#endif  // !_MSC_VER

PBScenePath::PBScenePath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBScenePath::InitAsDefaultInstance() {
}

PBScenePath::PBScenePath(const PBScenePath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBScenePath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBScenePath::~PBScenePath() {
  SharedDtor();
}

void PBScenePath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBScenePath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBScenePath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBScenePath_descriptor_;
}

const PBScenePath& PBScenePath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBScenePath* PBScenePath::default_instance_ = NULL;

PBScenePath* PBScenePath::New() const {
  return new PBScenePath;
}

void PBScenePath::Clear() {
  vertexlist_.Clear();
  trianglelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBScenePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBSceneVertex vertexlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertexlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertexlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vertexlist;
        if (input->ExpectTag(18)) goto parse_trianglelist;
        break;
      }
      
      // repeated .PBSceneTriangle trianglelist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trianglelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trianglelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trianglelist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBScenePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBSceneVertex vertexlist = 1;
  for (int i = 0; i < this->vertexlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vertexlist(i), output);
  }
  
  // repeated .PBSceneTriangle trianglelist = 2;
  for (int i = 0; i < this->trianglelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trianglelist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBScenePath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSceneVertex vertexlist = 1;
  for (int i = 0; i < this->vertexlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vertexlist(i), target);
  }
  
  // repeated .PBSceneTriangle trianglelist = 2;
  for (int i = 0; i < this->trianglelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trianglelist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBScenePath::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBSceneVertex vertexlist = 1;
  total_size += 1 * this->vertexlist_size();
  for (int i = 0; i < this->vertexlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertexlist(i));
  }
  
  // repeated .PBSceneTriangle trianglelist = 2;
  total_size += 1 * this->trianglelist_size();
  for (int i = 0; i < this->trianglelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trianglelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBScenePath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBScenePath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBScenePath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBScenePath::MergeFrom(const PBScenePath& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertexlist_.MergeFrom(from.vertexlist_);
  trianglelist_.MergeFrom(from.trianglelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBScenePath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBScenePath::CopyFrom(const PBScenePath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBScenePath::IsInitialized() const {
  
  return true;
}

void PBScenePath::Swap(PBScenePath* other) {
  if (other != this) {
    vertexlist_.Swap(&other->vertexlist_);
    trianglelist_.Swap(&other->trianglelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBScenePath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBScenePath_descriptor_;
  metadata.reflection = PBScenePath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSceneArea::kIdFieldNumber;
const int PBSceneArea::kTypeFieldNumber;
const int PBSceneArea::kIsdynamicFieldNumber;
const int PBSceneArea::kVertexlistFieldNumber;
const int PBSceneArea::kHeightFieldNumber;
const int PBSceneArea::kAdddelaytimeFieldNumber;
const int PBSceneArea::kDeldelaytimeFieldNumber;
#endif  // !_MSC_VER

PBSceneArea::PBSceneArea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSceneArea::InitAsDefaultInstance() {
}

PBSceneArea::PBSceneArea(const PBSceneArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSceneArea::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  isdynamic_ = false;
  height_ = 0;
  adddelaytime_ = 0u;
  deldelaytime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSceneArea::~PBSceneArea() {
  SharedDtor();
}

void PBSceneArea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSceneArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSceneArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSceneArea_descriptor_;
}

const PBSceneArea& PBSceneArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBSceneArea* PBSceneArea::default_instance_ = NULL;

PBSceneArea* PBSceneArea::New() const {
  return new PBSceneArea;
}

void PBSceneArea::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    isdynamic_ = false;
    height_ = 0;
    adddelaytime_ = 0u;
    deldelaytime_ = 0u;
  }
  vertexlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSceneArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isdynamic;
        break;
      }
      
      // optional bool isdynamic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdynamic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdynamic_)));
          set_has_isdynamic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vertexlist;
        break;
      }
      
      // repeated .PBSceneVertex vertexlist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertexlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertexlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vertexlist;
        if (input->ExpectTag(45)) goto parse_height;
        break;
      }
      
      // optional float height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_adddelaytime;
        break;
      }
      
      // optional uint32 adddelaytime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adddelaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adddelaytime_)));
          set_has_adddelaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_deldelaytime;
        break;
      }
      
      // optional uint32 deldelaytime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deldelaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deldelaytime_)));
          set_has_deldelaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSceneArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional bool isdynamic = 3;
  if (has_isdynamic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdynamic(), output);
  }
  
  // repeated .PBSceneVertex vertexlist = 4;
  for (int i = 0; i < this->vertexlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vertexlist(i), output);
  }
  
  // optional float height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->height(), output);
  }
  
  // optional uint32 adddelaytime = 6;
  if (has_adddelaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->adddelaytime(), output);
  }
  
  // optional uint32 deldelaytime = 7;
  if (has_deldelaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deldelaytime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSceneArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional bool isdynamic = 3;
  if (has_isdynamic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdynamic(), target);
  }
  
  // repeated .PBSceneVertex vertexlist = 4;
  for (int i = 0; i < this->vertexlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vertexlist(i), target);
  }
  
  // optional float height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->height(), target);
  }
  
  // optional uint32 adddelaytime = 6;
  if (has_adddelaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->adddelaytime(), target);
  }
  
  // optional uint32 deldelaytime = 7;
  if (has_deldelaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->deldelaytime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSceneArea::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional bool isdynamic = 3;
    if (has_isdynamic()) {
      total_size += 1 + 1;
    }
    
    // optional float height = 5;
    if (has_height()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 adddelaytime = 6;
    if (has_adddelaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adddelaytime());
    }
    
    // optional uint32 deldelaytime = 7;
    if (has_deldelaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deldelaytime());
    }
    
  }
  // repeated .PBSceneVertex vertexlist = 4;
  total_size += 1 * this->vertexlist_size();
  for (int i = 0; i < this->vertexlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertexlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSceneArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSceneArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSceneArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSceneArea::MergeFrom(const PBSceneArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertexlist_.MergeFrom(from.vertexlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isdynamic()) {
      set_isdynamic(from.isdynamic());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_adddelaytime()) {
      set_adddelaytime(from.adddelaytime());
    }
    if (from.has_deldelaytime()) {
      set_deldelaytime(from.deldelaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSceneArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSceneArea::CopyFrom(const PBSceneArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSceneArea::IsInitialized() const {
  
  return true;
}

void PBSceneArea::Swap(PBSceneArea* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(isdynamic_, other->isdynamic_);
    vertexlist_.Swap(&other->vertexlist_);
    std::swap(height_, other->height_);
    std::swap(adddelaytime_, other->adddelaytime_);
    std::swap(deldelaytime_, other->deldelaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSceneArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSceneArea_descriptor_;
  metadata.reflection = PBSceneArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMonsterCount::kMonsteridFieldNumber;
const int PBMonsterCount::kCountFieldNumber;
const int PBMonsterCount::kRouteidFieldNumber;
const int PBMonsterCount::kUnittypeFieldNumber;
const int PBMonsterCount::kGroupidFieldNumber;
const int PBMonsterCount::kAreaidFieldNumber;
const int PBMonsterCount::kPosxFieldNumber;
const int PBMonsterCount::kPosyFieldNumber;
#endif  // !_MSC_VER

PBMonsterCount::PBMonsterCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMonsterCount::InitAsDefaultInstance() {
}

PBMonsterCount::PBMonsterCount(const PBMonsterCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMonsterCount::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  count_ = 0u;
  routeid_ = 0u;
  unittype_ = 0u;
  groupid_ = 0u;
  areaid_ = 0u;
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMonsterCount::~PBMonsterCount() {
  SharedDtor();
}

void PBMonsterCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMonsterCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMonsterCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMonsterCount_descriptor_;
}

const PBMonsterCount& PBMonsterCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBMonsterCount* PBMonsterCount::default_instance_ = NULL;

PBMonsterCount* PBMonsterCount::New() const {
  return new PBMonsterCount;
}

void PBMonsterCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    count_ = 0u;
    routeid_ = 0u;
    unittype_ = 0u;
    groupid_ = 0u;
    areaid_ = 0u;
    posx_ = 0;
    posy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMonsterCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 monsterid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_routeid;
        break;
      }
      
      // optional uint32 routeid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routeid_)));
          set_has_routeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unittype;
        break;
      }
      
      // optional uint32 unittype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unittype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unittype_)));
          set_has_unittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_groupid;
        break;
      }
      
      // optional uint32 groupid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_areaid;
        break;
      }
      
      // optional uint32 areaid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_posx;
        break;
      }
      
      // optional float posx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_posy;
        break;
      }
      
      // optional float posy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMonsterCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 monsterid = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // optional uint32 routeid = 3;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->routeid(), output);
  }
  
  // optional uint32 unittype = 4;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unittype(), output);
  }
  
  // optional uint32 groupid = 5;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->groupid(), output);
  }
  
  // optional uint32 areaid = 6;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->areaid(), output);
  }
  
  // optional float posx = 7;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->posx(), output);
  }
  
  // optional float posy = 8;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMonsterCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 monsterid = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // optional uint32 routeid = 3;
  if (has_routeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->routeid(), target);
  }
  
  // optional uint32 unittype = 4;
  if (has_unittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unittype(), target);
  }
  
  // optional uint32 groupid = 5;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->groupid(), target);
  }
  
  // optional uint32 areaid = 6;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->areaid(), target);
  }
  
  // optional float posx = 7;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->posx(), target);
  }
  
  // optional float posy = 8;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMonsterCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 monsterid = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 routeid = 3;
    if (has_routeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routeid());
    }
    
    // optional uint32 unittype = 4;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unittype());
    }
    
    // optional uint32 groupid = 5;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }
    
    // optional uint32 areaid = 6;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areaid());
    }
    
    // optional float posx = 7;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
    // optional float posy = 8;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMonsterCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMonsterCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMonsterCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMonsterCount::MergeFrom(const PBMonsterCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_routeid()) {
      set_routeid(from.routeid());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMonsterCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonsterCount::CopyFrom(const PBMonsterCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMonsterCount::IsInitialized() const {
  
  return true;
}

void PBMonsterCount::Swap(PBMonsterCount* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(count_, other->count_);
    std::swap(routeid_, other->routeid_);
    std::swap(unittype_, other->unittype_);
    std::swap(groupid_, other->groupid_);
    std::swap(areaid_, other->areaid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMonsterCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMonsterCount_descriptor_;
  metadata.reflection = PBMonsterCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMonsterRegion::kRefreshtypeFieldNumber;
const int PBMonsterRegion::kIntervalFieldNumber;
const int PBMonsterRegion::kFixtimeFieldNumber;
const int PBMonsterRegion::kXFieldNumber;
const int PBMonsterRegion::kYFieldNumber;
const int PBMonsterRegion::kRadiusFieldNumber;
const int PBMonsterRegion::kDirFieldNumber;
const int PBMonsterRegion::kMonsterlistFieldNumber;
#endif  // !_MSC_VER

PBMonsterRegion::PBMonsterRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMonsterRegion::InitAsDefaultInstance() {
}

PBMonsterRegion::PBMonsterRegion(const PBMonsterRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMonsterRegion::SharedCtor() {
  _cached_size_ = 0;
  refreshtype_ = 0u;
  interval_ = 0u;
  fixtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  radius_ = 0;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMonsterRegion::~PBMonsterRegion() {
  SharedDtor();
}

void PBMonsterRegion::SharedDtor() {
  if (fixtime_ != &::google::protobuf::internal::kEmptyString) {
    delete fixtime_;
  }
  if (this != default_instance_) {
  }
}

void PBMonsterRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMonsterRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMonsterRegion_descriptor_;
}

const PBMonsterRegion& PBMonsterRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBMonsterRegion* PBMonsterRegion::default_instance_ = NULL;

PBMonsterRegion* PBMonsterRegion::New() const {
  return new PBMonsterRegion;
}

void PBMonsterRegion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refreshtype_ = 0u;
    interval_ = 0u;
    if (has_fixtime()) {
      if (fixtime_ != &::google::protobuf::internal::kEmptyString) {
        fixtime_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
    radius_ = 0;
    dir_ = 0;
  }
  monsterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMonsterRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 refreshtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshtype_)));
          set_has_refreshtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_interval;
        break;
      }
      
      // optional uint32 interval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fixtime;
        break;
      }
      
      // optional string fixtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fixtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fixtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fixtime().data(), this->fixtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_x;
        break;
      }
      
      // optional float x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_y;
        break;
      }
      
      // optional float y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_radius;
        break;
      }
      
      // optional float radius = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_dir;
        break;
      }
      
      // optional float dir = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_monsterlist;
        break;
      }
      
      // repeated .PBMonsterCount monsterlist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_monsterlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMonsterRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 refreshtype = 1;
  if (has_refreshtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->refreshtype(), output);
  }
  
  // optional uint32 interval = 2;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->interval(), output);
  }
  
  // optional string fixtime = 3;
  if (has_fixtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fixtime().data(), this->fixtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fixtime(), output);
  }
  
  // optional float x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }
  
  // optional float y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }
  
  // optional float radius = 6;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->radius(), output);
  }
  
  // optional float dir = 7;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->dir(), output);
  }
  
  // repeated .PBMonsterCount monsterlist = 8;
  for (int i = 0; i < this->monsterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->monsterlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMonsterRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 refreshtype = 1;
  if (has_refreshtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->refreshtype(), target);
  }
  
  // optional uint32 interval = 2;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->interval(), target);
  }
  
  // optional string fixtime = 3;
  if (has_fixtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fixtime().data(), this->fixtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fixtime(), target);
  }
  
  // optional float x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }
  
  // optional float y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }
  
  // optional float radius = 6;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->radius(), target);
  }
  
  // optional float dir = 7;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->dir(), target);
  }
  
  // repeated .PBMonsterCount monsterlist = 8;
  for (int i = 0; i < this->monsterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->monsterlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMonsterRegion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 refreshtype = 1;
    if (has_refreshtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshtype());
    }
    
    // optional uint32 interval = 2;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval());
    }
    
    // optional string fixtime = 3;
    if (has_fixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fixtime());
    }
    
    // optional float x = 4;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 5;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional float radius = 6;
    if (has_radius()) {
      total_size += 1 + 4;
    }
    
    // optional float dir = 7;
    if (has_dir()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .PBMonsterCount monsterlist = 8;
  total_size += 1 * this->monsterlist_size();
  for (int i = 0; i < this->monsterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMonsterRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMonsterRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMonsterRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMonsterRegion::MergeFrom(const PBMonsterRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterlist_.MergeFrom(from.monsterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refreshtype()) {
      set_refreshtype(from.refreshtype());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_fixtime()) {
      set_fixtime(from.fixtime());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMonsterRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonsterRegion::CopyFrom(const PBMonsterRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMonsterRegion::IsInitialized() const {
  
  return true;
}

void PBMonsterRegion::Swap(PBMonsterRegion* other) {
  if (other != this) {
    std::swap(refreshtype_, other->refreshtype_);
    std::swap(interval_, other->interval_);
    std::swap(fixtime_, other->fixtime_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(radius_, other->radius_);
    std::swap(dir_, other->dir_);
    monsterlist_.Swap(&other->monsterlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMonsterRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMonsterRegion_descriptor_;
  metadata.reflection = PBMonsterRegion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRoute::kIdFieldNumber;
const int PBRoute::kTypeFieldNumber;
const int PBRoute::kVertexlistFieldNumber;
#endif  // !_MSC_VER

PBRoute::PBRoute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRoute::InitAsDefaultInstance() {
}

PBRoute::PBRoute(const PBRoute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRoute::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRoute::~PBRoute() {
  SharedDtor();
}

void PBRoute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRoute_descriptor_;
}

const PBRoute& PBRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBRoute* PBRoute::default_instance_ = NULL;

PBRoute* PBRoute::New() const {
  return new PBRoute;
}

void PBRoute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
  }
  vertexlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vertexlist;
        break;
      }
      
      // repeated .PBSceneVertex vertexlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertexlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertexlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vertexlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // repeated .PBSceneVertex vertexlist = 3;
  for (int i = 0; i < this->vertexlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vertexlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRoute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // repeated .PBSceneVertex vertexlist = 3;
  for (int i = 0; i < this->vertexlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vertexlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRoute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  // repeated .PBSceneVertex vertexlist = 3;
  total_size += 1 * this->vertexlist_size();
  for (int i = 0; i < this->vertexlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertexlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRoute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRoute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRoute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRoute::MergeFrom(const PBRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertexlist_.MergeFrom(from.vertexlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRoute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRoute::CopyFrom(const PBRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRoute::IsInitialized() const {
  
  return true;
}

void PBRoute::Swap(PBRoute* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    vertexlist_.Swap(&other->vertexlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRoute_descriptor_;
  metadata.reflection = PBRoute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSceneEvent::kIdFieldNumber;
const int PBSceneEvent::kActionlistFieldNumber;
#endif  // !_MSC_VER

PBSceneEvent::PBSceneEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSceneEvent::InitAsDefaultInstance() {
}

PBSceneEvent::PBSceneEvent(const PBSceneEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSceneEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSceneEvent::~PBSceneEvent() {
  SharedDtor();
}

void PBSceneEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSceneEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSceneEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSceneEvent_descriptor_;
}

const PBSceneEvent& PBSceneEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBSceneEvent* PBSceneEvent::default_instance_ = NULL;

PBSceneEvent* PBSceneEvent::New() const {
  return new PBSceneEvent;
}

void PBSceneEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  actionlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSceneEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actionlist;
        break;
      }
      
      // repeated .PBSceneAction actionlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actionlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actionlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actionlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSceneEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .PBSceneAction actionlist = 2;
  for (int i = 0; i < this->actionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actionlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSceneEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .PBSceneAction actionlist = 2;
  for (int i = 0; i < this->actionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->actionlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSceneEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  // repeated .PBSceneAction actionlist = 2;
  total_size += 1 * this->actionlist_size();
  for (int i = 0; i < this->actionlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actionlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSceneEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSceneEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSceneEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSceneEvent::MergeFrom(const PBSceneEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  actionlist_.MergeFrom(from.actionlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSceneEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSceneEvent::CopyFrom(const PBSceneEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSceneEvent::IsInitialized() const {
  
  return true;
}

void PBSceneEvent::Swap(PBSceneEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    actionlist_.Swap(&other->actionlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSceneEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSceneEvent_descriptor_;
  metadata.reflection = PBSceneEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSceneAction::kTypeFieldNumber;
const int PBSceneAction::kParamlistFieldNumber;
#endif  // !_MSC_VER

PBSceneAction::PBSceneAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSceneAction::InitAsDefaultInstance() {
}

PBSceneAction::PBSceneAction(const PBSceneAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSceneAction::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSceneAction::~PBSceneAction() {
  SharedDtor();
}

void PBSceneAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSceneAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSceneAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSceneAction_descriptor_;
}

const PBSceneAction& PBSceneAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBSceneAction* PBSceneAction::default_instance_ = NULL;

PBSceneAction* PBSceneAction::New() const {
  return new PBSceneAction;
}

void PBSceneAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  paramlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSceneAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paramlist;
        break;
      }
      
      // repeated string paramlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_paramlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paramlist(0).data(), this->paramlist(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paramlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSceneAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // repeated string paramlist = 2;
  for (int i = 0; i < this->paramlist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->paramlist(i).data(), this->paramlist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->paramlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSceneAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // repeated string paramlist = 2;
  for (int i = 0; i < this->paramlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramlist(i).data(), this->paramlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->paramlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSceneAction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  // repeated string paramlist = 2;
  total_size += 1 * this->paramlist_size();
  for (int i = 0; i < this->paramlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->paramlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSceneAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSceneAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSceneAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSceneAction::MergeFrom(const PBSceneAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  paramlist_.MergeFrom(from.paramlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSceneAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSceneAction::CopyFrom(const PBSceneAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSceneAction::IsInitialized() const {
  
  return true;
}

void PBSceneAction::Swap(PBSceneAction* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    paramlist_.Swap(&other->paramlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSceneAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSceneAction_descriptor_;
  metadata.reflection = PBSceneAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlane::kPlaneidFieldNumber;
const int PBPlane::kGameobjectnameFieldNumber;
const int PBPlane::kMonsterregionFieldNumber;
const int PBPlane::kSceneAreaIdsFieldNumber;
#endif  // !_MSC_VER

PBPlane::PBPlane()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlane::InitAsDefaultInstance() {
}

PBPlane::PBPlane(const PBPlane& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlane::SharedCtor() {
  _cached_size_ = 0;
  planeid_ = 0u;
  gameobjectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlane::~PBPlane() {
  SharedDtor();
}

void PBPlane::SharedDtor() {
  if (gameobjectname_ != &::google::protobuf::internal::kEmptyString) {
    delete gameobjectname_;
  }
  if (this != default_instance_) {
  }
}

void PBPlane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlane_descriptor_;
}

const PBPlane& PBPlane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBPlane* PBPlane::default_instance_ = NULL;

PBPlane* PBPlane::New() const {
  return new PBPlane;
}

void PBPlane::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    planeid_ = 0u;
    if (has_gameobjectname()) {
      if (gameobjectname_ != &::google::protobuf::internal::kEmptyString) {
        gameobjectname_->clear();
      }
    }
  }
  monsterregion_.Clear();
  sceneareaids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 planeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &planeid_)));
          set_has_planeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameobjectname;
        break;
      }
      
      // optional string gameobjectname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameobjectname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameobjectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameobjectname().data(), this->gameobjectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_monsterregion;
        break;
      }
      
      // repeated .PBMonsterRegion monsterregion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterregion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterregion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_monsterregion;
        if (input->ExpectTag(32)) goto parse_sceneAreaIds;
        break;
      }
      
      // repeated uint32 sceneAreaIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneAreaIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_sceneareaids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sceneareaids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sceneAreaIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 planeid = 1;
  if (has_planeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->planeid(), output);
  }
  
  // optional string gameobjectname = 2;
  if (has_gameobjectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameobjectname().data(), this->gameobjectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gameobjectname(), output);
  }
  
  // repeated .PBMonsterRegion monsterregion = 3;
  for (int i = 0; i < this->monsterregion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->monsterregion(i), output);
  }
  
  // repeated uint32 sceneAreaIds = 4;
  for (int i = 0; i < this->sceneareaids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->sceneareaids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlane::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 planeid = 1;
  if (has_planeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->planeid(), target);
  }
  
  // optional string gameobjectname = 2;
  if (has_gameobjectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameobjectname().data(), this->gameobjectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gameobjectname(), target);
  }
  
  // repeated .PBMonsterRegion monsterregion = 3;
  for (int i = 0; i < this->monsterregion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->monsterregion(i), target);
  }
  
  // repeated uint32 sceneAreaIds = 4;
  for (int i = 0; i < this->sceneareaids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->sceneareaids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlane::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 planeid = 1;
    if (has_planeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->planeid());
    }
    
    // optional string gameobjectname = 2;
    if (has_gameobjectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameobjectname());
    }
    
  }
  // repeated .PBMonsterRegion monsterregion = 3;
  total_size += 1 * this->monsterregion_size();
  for (int i = 0; i < this->monsterregion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterregion(i));
  }
  
  // repeated uint32 sceneAreaIds = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->sceneareaids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sceneareaids(i));
    }
    total_size += 1 * this->sceneareaids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlane::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlane* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlane*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlane::MergeFrom(const PBPlane& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterregion_.MergeFrom(from.monsterregion_);
  sceneareaids_.MergeFrom(from.sceneareaids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_planeid()) {
      set_planeid(from.planeid());
    }
    if (from.has_gameobjectname()) {
      set_gameobjectname(from.gameobjectname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlane::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlane::CopyFrom(const PBPlane& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlane::IsInitialized() const {
  
  return true;
}

void PBPlane::Swap(PBPlane* other) {
  if (other != this) {
    std::swap(planeid_, other->planeid_);
    std::swap(gameobjectname_, other->gameobjectname_);
    monsterregion_.Swap(&other->monsterregion_);
    sceneareaids_.Swap(&other->sceneareaids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlane_descriptor_;
  metadata.reflection = PBPlane_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BloomParam::kColorMixFieldNumber;
const int BloomParam::kThresholdFieldNumber;
const int BloomParam::kIntensityFieldNumber;
const int BloomParam::kBlurSizeFieldNumber;
const int BloomParam::kTypeFieldNumber;
const int BloomParam::kQualityFieldNumber;
#endif  // !_MSC_VER

BloomParam::BloomParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BloomParam::InitAsDefaultInstance() {
}

BloomParam::BloomParam(const BloomParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BloomParam::SharedCtor() {
  _cached_size_ = 0;
  colormix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  threshold_ = 0;
  intensity_ = 0;
  blursize_ = 0;
  type_ = 0u;
  quality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BloomParam::~BloomParam() {
  SharedDtor();
}

void BloomParam::SharedDtor() {
  if (colormix_ != &::google::protobuf::internal::kEmptyString) {
    delete colormix_;
  }
  if (this != default_instance_) {
  }
}

void BloomParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BloomParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BloomParam_descriptor_;
}

const BloomParam& BloomParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

BloomParam* BloomParam::default_instance_ = NULL;

BloomParam* BloomParam::New() const {
  return new BloomParam;
}

void BloomParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_colormix()) {
      if (colormix_ != &::google::protobuf::internal::kEmptyString) {
        colormix_->clear();
      }
    }
    threshold_ = 0;
    intensity_ = 0;
    blursize_ = 0;
    type_ = 0u;
    quality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BloomParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string colorMix = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_colormix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->colormix().data(), this->colormix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_threshold;
        break;
      }
      
      // optional float threshold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_intensity;
        break;
      }
      
      // optional float intensity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_)));
          set_has_intensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_blurSize;
        break;
      }
      
      // optional float blurSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blurSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blursize_)));
          set_has_blursize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quality;
        break;
      }
      
      // optional uint32 quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BloomParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string colorMix = 1;
  if (has_colormix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->colormix().data(), this->colormix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->colormix(), output);
  }
  
  // optional float threshold = 2;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->threshold(), output);
  }
  
  // optional float intensity = 3;
  if (has_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->intensity(), output);
  }
  
  // optional float blurSize = 4;
  if (has_blursize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->blursize(), output);
  }
  
  // optional uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }
  
  // optional uint32 quality = 6;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->quality(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BloomParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string colorMix = 1;
  if (has_colormix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->colormix().data(), this->colormix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->colormix(), target);
  }
  
  // optional float threshold = 2;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->threshold(), target);
  }
  
  // optional float intensity = 3;
  if (has_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->intensity(), target);
  }
  
  // optional float blurSize = 4;
  if (has_blursize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->blursize(), target);
  }
  
  // optional uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }
  
  // optional uint32 quality = 6;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->quality(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BloomParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string colorMix = 1;
    if (has_colormix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->colormix());
    }
    
    // optional float threshold = 2;
    if (has_threshold()) {
      total_size += 1 + 4;
    }
    
    // optional float intensity = 3;
    if (has_intensity()) {
      total_size += 1 + 4;
    }
    
    // optional float blurSize = 4;
    if (has_blursize()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BloomParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BloomParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BloomParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BloomParam::MergeFrom(const BloomParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_colormix()) {
      set_colormix(from.colormix());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
    if (from.has_intensity()) {
      set_intensity(from.intensity());
    }
    if (from.has_blursize()) {
      set_blursize(from.blursize());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BloomParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BloomParam::CopyFrom(const BloomParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloomParam::IsInitialized() const {
  
  return true;
}

void BloomParam::Swap(BloomParam* other) {
  if (other != this) {
    std::swap(colormix_, other->colormix_);
    std::swap(threshold_, other->threshold_);
    std::swap(intensity_, other->intensity_);
    std::swap(blursize_, other->blursize_);
    std::swap(type_, other->type_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BloomParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BloomParam_descriptor_;
  metadata.reflection = BloomParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSceneQinggongPoint::kXFieldNumber;
const int PBSceneQinggongPoint::kYFieldNumber;
const int PBSceneQinggongPoint::kZFieldNumber;
const int PBSceneQinggongPoint::kTypeFieldNumber;
const int PBSceneQinggongPoint::kSpeedFieldNumber;
#endif  // !_MSC_VER

PBSceneQinggongPoint::PBSceneQinggongPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSceneQinggongPoint::InitAsDefaultInstance() {
}

PBSceneQinggongPoint::PBSceneQinggongPoint(const PBSceneQinggongPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSceneQinggongPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  type_ = 0u;
  speed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSceneQinggongPoint::~PBSceneQinggongPoint() {
  SharedDtor();
}

void PBSceneQinggongPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSceneQinggongPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSceneQinggongPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSceneQinggongPoint_descriptor_;
}

const PBSceneQinggongPoint& PBSceneQinggongPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBSceneQinggongPoint* PBSceneQinggongPoint::default_instance_ = NULL;

PBSceneQinggongPoint* PBSceneQinggongPoint::New() const {
  return new PBSceneQinggongPoint;
}

void PBSceneQinggongPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    type_ = 0u;
    speed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSceneQinggongPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_speed;
        break;
      }
      
      // optional uint32 speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSceneQinggongPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }
  
  // optional uint32 speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->speed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSceneQinggongPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }
  
  // optional uint32 speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->speed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSceneQinggongPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 speed = 5;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSceneQinggongPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSceneQinggongPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSceneQinggongPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSceneQinggongPoint::MergeFrom(const PBSceneQinggongPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSceneQinggongPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSceneQinggongPoint::CopyFrom(const PBSceneQinggongPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSceneQinggongPoint::IsInitialized() const {
  
  return true;
}

void PBSceneQinggongPoint::Swap(PBSceneQinggongPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(type_, other->type_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSceneQinggongPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSceneQinggongPoint_descriptor_;
  metadata.reflection = PBSceneQinggongPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBQinggongRoute::kIdFieldNumber;
const int PBQinggongRoute::kVertexlistFieldNumber;
#endif  // !_MSC_VER

PBQinggongRoute::PBQinggongRoute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBQinggongRoute::InitAsDefaultInstance() {
}

PBQinggongRoute::PBQinggongRoute(const PBQinggongRoute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBQinggongRoute::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBQinggongRoute::~PBQinggongRoute() {
  SharedDtor();
}

void PBQinggongRoute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBQinggongRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBQinggongRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBQinggongRoute_descriptor_;
}

const PBQinggongRoute& PBQinggongRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBQinggongRoute* PBQinggongRoute::default_instance_ = NULL;

PBQinggongRoute* PBQinggongRoute::New() const {
  return new PBQinggongRoute;
}

void PBQinggongRoute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  vertexlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBQinggongRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vertexlist;
        break;
      }
      
      // repeated .PBSceneQinggongPoint vertexlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertexlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertexlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vertexlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBQinggongRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .PBSceneQinggongPoint vertexlist = 2;
  for (int i = 0; i < this->vertexlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vertexlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBQinggongRoute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .PBSceneQinggongPoint vertexlist = 2;
  for (int i = 0; i < this->vertexlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vertexlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBQinggongRoute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  // repeated .PBSceneQinggongPoint vertexlist = 2;
  total_size += 1 * this->vertexlist_size();
  for (int i = 0; i < this->vertexlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertexlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBQinggongRoute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBQinggongRoute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBQinggongRoute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBQinggongRoute::MergeFrom(const PBQinggongRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertexlist_.MergeFrom(from.vertexlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBQinggongRoute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBQinggongRoute::CopyFrom(const PBQinggongRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBQinggongRoute::IsInitialized() const {
  
  return true;
}

void PBQinggongRoute::Swap(PBQinggongRoute* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    vertexlist_.Swap(&other->vertexlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBQinggongRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBQinggongRoute_descriptor_;
  metadata.reflection = PBQinggongRoute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSceneInfo::kScenewideFieldNumber;
const int PBSceneInfo::kScenehighFieldNumber;
const int PBSceneInfo::kGridwideFieldNumber;
const int PBSceneInfo::kGridhighFieldNumber;
const int PBSceneInfo::kGridinfoFieldNumber;
const int PBSceneInfo::kRegionlistFieldNumber;
const int PBSceneInfo::kPathFieldNumber;
const int PBSceneInfo::kMonsterregionFieldNumber;
const int PBSceneInfo::kArealistFieldNumber;
const int PBSceneInfo::kRoutelistFieldNumber;
const int PBSceneInfo::kEulerXFieldNumber;
const int PBSceneInfo::kEulerYFieldNumber;
const int PBSceneInfo::kViewDisFieldNumber;
const int PBSceneInfo::kPlanesFieldNumber;
const int PBSceneInfo::kSceneEventFieldNumber;
const int PBSceneInfo::kBloomParamFieldNumber;
const int PBSceneInfo::kUseBloomFieldNumber;
const int PBSceneInfo::kDefaultregionFieldNumber;
const int PBSceneInfo::kQinggonglistFieldNumber;
#endif  // !_MSC_VER

PBSceneInfo::PBSceneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSceneInfo::InitAsDefaultInstance() {
  path_ = const_cast< ::PBScenePath*>(&::PBScenePath::default_instance());
  bloomparam_ = const_cast< ::BloomParam*>(&::BloomParam::default_instance());
  defaultregion_ = const_cast< ::PBGameRegion*>(&::PBGameRegion::default_instance());
}

PBSceneInfo::PBSceneInfo(const PBSceneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSceneInfo::SharedCtor() {
  _cached_size_ = 0;
  scenewide_ = 0u;
  scenehigh_ = 0u;
  gridwide_ = 0u;
  gridhigh_ = 0u;
  path_ = NULL;
  eulerx_ = 0;
  eulery_ = 0;
  viewdis_ = 0;
  bloomparam_ = NULL;
  usebloom_ = false;
  defaultregion_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSceneInfo::~PBSceneInfo() {
  SharedDtor();
}

void PBSceneInfo::SharedDtor() {
  if (this != default_instance_) {
    delete path_;
    delete bloomparam_;
    delete defaultregion_;
  }
}

void PBSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSceneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSceneInfo_descriptor_;
}

const PBSceneInfo& PBSceneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sceneStruct_2eproto();  return *default_instance_;
}

PBSceneInfo* PBSceneInfo::default_instance_ = NULL;

PBSceneInfo* PBSceneInfo::New() const {
  return new PBSceneInfo;
}

void PBSceneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scenewide_ = 0u;
    scenehigh_ = 0u;
    gridwide_ = 0u;
    gridhigh_ = 0u;
    if (has_path()) {
      if (path_ != NULL) path_->::PBScenePath::Clear();
    }
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    eulerx_ = 0;
    eulery_ = 0;
    viewdis_ = 0;
    if (has_bloomparam()) {
      if (bloomparam_ != NULL) bloomparam_->::BloomParam::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    usebloom_ = false;
    if (has_defaultregion()) {
      if (defaultregion_ != NULL) defaultregion_->::PBGameRegion::Clear();
    }
  }
  gridinfo_.Clear();
  regionlist_.Clear();
  monsterregion_.Clear();
  arealist_.Clear();
  routelist_.Clear();
  planes_.Clear();
  sceneevent_.Clear();
  qinggonglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 scenewide = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenewide_)));
          set_has_scenewide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scenehigh;
        break;
      }
      
      // optional uint32 scenehigh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenehigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenehigh_)));
          set_has_scenehigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gridwide;
        break;
      }
      
      // optional uint32 gridwide = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridwide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridwide_)));
          set_has_gridwide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gridhigh;
        break;
      }
      
      // optional uint32 gridhigh = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridhigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridhigh_)));
          set_has_gridhigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gridinfo;
        break;
      }
      
      // repeated .PBSceneGrid gridinfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gridinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gridinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gridinfo;
        if (input->ExpectTag(50)) goto parse_regionlist;
        break;
      }
      
      // repeated .PBGameRegion regionlist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regionlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regionlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_regionlist;
        if (input->ExpectTag(58)) goto parse_path;
        break;
      }
      
      // optional .PBScenePath path = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_monsterregion;
        break;
      }
      
      // repeated .PBMonsterRegion monsterregion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterregion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterregion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_monsterregion;
        if (input->ExpectTag(74)) goto parse_arealist;
        break;
      }
      
      // repeated .PBSceneArea arealist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arealist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arealist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_arealist;
        if (input->ExpectTag(82)) goto parse_routelist;
        break;
      }
      
      // repeated .PBRoute routelist = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_routelist;
        if (input->ExpectTag(93)) goto parse_eulerX;
        break;
      }
      
      // optional float eulerX = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_eulerX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eulerx_)));
          set_has_eulerx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_eulerY;
        break;
      }
      
      // optional float eulerY = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_eulerY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eulery_)));
          set_has_eulery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_viewDis;
        break;
      }
      
      // optional float viewDis = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_viewDis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &viewdis_)));
          set_has_viewdis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_planes;
        break;
      }
      
      // repeated .PBPlane planes = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_planes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_planes;
        if (input->ExpectTag(122)) goto parse_sceneEvent;
        break;
      }
      
      // repeated .PBSceneEvent sceneEvent = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sceneEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sceneevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_sceneEvent;
        if (input->ExpectTag(130)) goto parse_bloomParam;
        break;
      }
      
      // optional .BloomParam bloomParam = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bloomParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bloomparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_useBloom;
        break;
      }
      
      // optional bool useBloom = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useBloom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usebloom_)));
          set_has_usebloom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_defaultregion;
        break;
      }
      
      // optional .PBGameRegion defaultregion = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defaultregion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defaultregion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_qinggonglist;
        break;
      }
      
      // repeated .PBQinggongRoute qinggonglist = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qinggonglist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qinggonglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_qinggonglist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 scenewide = 1;
  if (has_scenewide()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scenewide(), output);
  }
  
  // optional uint32 scenehigh = 2;
  if (has_scenehigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scenehigh(), output);
  }
  
  // optional uint32 gridwide = 3;
  if (has_gridwide()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gridwide(), output);
  }
  
  // optional uint32 gridhigh = 4;
  if (has_gridhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gridhigh(), output);
  }
  
  // repeated .PBSceneGrid gridinfo = 5;
  for (int i = 0; i < this->gridinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gridinfo(i), output);
  }
  
  // repeated .PBGameRegion regionlist = 6;
  for (int i = 0; i < this->regionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->regionlist(i), output);
  }
  
  // optional .PBScenePath path = 7;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->path(), output);
  }
  
  // repeated .PBMonsterRegion monsterregion = 8;
  for (int i = 0; i < this->monsterregion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->monsterregion(i), output);
  }
  
  // repeated .PBSceneArea arealist = 9;
  for (int i = 0; i < this->arealist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->arealist(i), output);
  }
  
  // repeated .PBRoute routelist = 10;
  for (int i = 0; i < this->routelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->routelist(i), output);
  }
  
  // optional float eulerX = 11;
  if (has_eulerx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->eulerx(), output);
  }
  
  // optional float eulerY = 12;
  if (has_eulery()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->eulery(), output);
  }
  
  // optional float viewDis = 13;
  if (has_viewdis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->viewdis(), output);
  }
  
  // repeated .PBPlane planes = 14;
  for (int i = 0; i < this->planes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->planes(i), output);
  }
  
  // repeated .PBSceneEvent sceneEvent = 15;
  for (int i = 0; i < this->sceneevent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->sceneevent(i), output);
  }
  
  // optional .BloomParam bloomParam = 16;
  if (has_bloomparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->bloomparam(), output);
  }
  
  // optional bool useBloom = 17;
  if (has_usebloom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->usebloom(), output);
  }
  
  // optional .PBGameRegion defaultregion = 18;
  if (has_defaultregion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->defaultregion(), output);
  }
  
  // repeated .PBQinggongRoute qinggonglist = 19;
  for (int i = 0; i < this->qinggonglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->qinggonglist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSceneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 scenewide = 1;
  if (has_scenewide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scenewide(), target);
  }
  
  // optional uint32 scenehigh = 2;
  if (has_scenehigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scenehigh(), target);
  }
  
  // optional uint32 gridwide = 3;
  if (has_gridwide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gridwide(), target);
  }
  
  // optional uint32 gridhigh = 4;
  if (has_gridhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gridhigh(), target);
  }
  
  // repeated .PBSceneGrid gridinfo = 5;
  for (int i = 0; i < this->gridinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gridinfo(i), target);
  }
  
  // repeated .PBGameRegion regionlist = 6;
  for (int i = 0; i < this->regionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->regionlist(i), target);
  }
  
  // optional .PBScenePath path = 7;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->path(), target);
  }
  
  // repeated .PBMonsterRegion monsterregion = 8;
  for (int i = 0; i < this->monsterregion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->monsterregion(i), target);
  }
  
  // repeated .PBSceneArea arealist = 9;
  for (int i = 0; i < this->arealist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->arealist(i), target);
  }
  
  // repeated .PBRoute routelist = 10;
  for (int i = 0; i < this->routelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->routelist(i), target);
  }
  
  // optional float eulerX = 11;
  if (has_eulerx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->eulerx(), target);
  }
  
  // optional float eulerY = 12;
  if (has_eulery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->eulery(), target);
  }
  
  // optional float viewDis = 13;
  if (has_viewdis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->viewdis(), target);
  }
  
  // repeated .PBPlane planes = 14;
  for (int i = 0; i < this->planes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->planes(i), target);
  }
  
  // repeated .PBSceneEvent sceneEvent = 15;
  for (int i = 0; i < this->sceneevent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->sceneevent(i), target);
  }
  
  // optional .BloomParam bloomParam = 16;
  if (has_bloomparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->bloomparam(), target);
  }
  
  // optional bool useBloom = 17;
  if (has_usebloom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->usebloom(), target);
  }
  
  // optional .PBGameRegion defaultregion = 18;
  if (has_defaultregion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->defaultregion(), target);
  }
  
  // repeated .PBQinggongRoute qinggonglist = 19;
  for (int i = 0; i < this->qinggonglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->qinggonglist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSceneInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 scenewide = 1;
    if (has_scenewide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenewide());
    }
    
    // optional uint32 scenehigh = 2;
    if (has_scenehigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenehigh());
    }
    
    // optional uint32 gridwide = 3;
    if (has_gridwide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridwide());
    }
    
    // optional uint32 gridhigh = 4;
    if (has_gridhigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridhigh());
    }
    
    // optional .PBScenePath path = 7;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional float eulerX = 11;
    if (has_eulerx()) {
      total_size += 1 + 4;
    }
    
    // optional float eulerY = 12;
    if (has_eulery()) {
      total_size += 1 + 4;
    }
    
    // optional float viewDis = 13;
    if (has_viewdis()) {
      total_size += 1 + 4;
    }
    
    // optional .BloomParam bloomParam = 16;
    if (has_bloomparam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bloomparam());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool useBloom = 17;
    if (has_usebloom()) {
      total_size += 2 + 1;
    }
    
    // optional .PBGameRegion defaultregion = 18;
    if (has_defaultregion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defaultregion());
    }
    
  }
  // repeated .PBSceneGrid gridinfo = 5;
  total_size += 1 * this->gridinfo_size();
  for (int i = 0; i < this->gridinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gridinfo(i));
  }
  
  // repeated .PBGameRegion regionlist = 6;
  total_size += 1 * this->regionlist_size();
  for (int i = 0; i < this->regionlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regionlist(i));
  }
  
  // repeated .PBMonsterRegion monsterregion = 8;
  total_size += 1 * this->monsterregion_size();
  for (int i = 0; i < this->monsterregion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterregion(i));
  }
  
  // repeated .PBSceneArea arealist = 9;
  total_size += 1 * this->arealist_size();
  for (int i = 0; i < this->arealist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arealist(i));
  }
  
  // repeated .PBRoute routelist = 10;
  total_size += 1 * this->routelist_size();
  for (int i = 0; i < this->routelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routelist(i));
  }
  
  // repeated .PBPlane planes = 14;
  total_size += 1 * this->planes_size();
  for (int i = 0; i < this->planes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->planes(i));
  }
  
  // repeated .PBSceneEvent sceneEvent = 15;
  total_size += 1 * this->sceneevent_size();
  for (int i = 0; i < this->sceneevent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sceneevent(i));
  }
  
  // repeated .PBQinggongRoute qinggonglist = 19;
  total_size += 2 * this->qinggonglist_size();
  for (int i = 0; i < this->qinggonglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->qinggonglist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSceneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSceneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSceneInfo::MergeFrom(const PBSceneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridinfo_.MergeFrom(from.gridinfo_);
  regionlist_.MergeFrom(from.regionlist_);
  monsterregion_.MergeFrom(from.monsterregion_);
  arealist_.MergeFrom(from.arealist_);
  routelist_.MergeFrom(from.routelist_);
  planes_.MergeFrom(from.planes_);
  sceneevent_.MergeFrom(from.sceneevent_);
  qinggonglist_.MergeFrom(from.qinggonglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenewide()) {
      set_scenewide(from.scenewide());
    }
    if (from.has_scenehigh()) {
      set_scenehigh(from.scenehigh());
    }
    if (from.has_gridwide()) {
      set_gridwide(from.gridwide());
    }
    if (from.has_gridhigh()) {
      set_gridhigh(from.gridhigh());
    }
    if (from.has_path()) {
      mutable_path()->::PBScenePath::MergeFrom(from.path());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_eulerx()) {
      set_eulerx(from.eulerx());
    }
    if (from.has_eulery()) {
      set_eulery(from.eulery());
    }
    if (from.has_viewdis()) {
      set_viewdis(from.viewdis());
    }
    if (from.has_bloomparam()) {
      mutable_bloomparam()->::BloomParam::MergeFrom(from.bloomparam());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_usebloom()) {
      set_usebloom(from.usebloom());
    }
    if (from.has_defaultregion()) {
      mutable_defaultregion()->::PBGameRegion::MergeFrom(from.defaultregion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSceneInfo::CopyFrom(const PBSceneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSceneInfo::IsInitialized() const {
  
  return true;
}

void PBSceneInfo::Swap(PBSceneInfo* other) {
  if (other != this) {
    std::swap(scenewide_, other->scenewide_);
    std::swap(scenehigh_, other->scenehigh_);
    std::swap(gridwide_, other->gridwide_);
    std::swap(gridhigh_, other->gridhigh_);
    gridinfo_.Swap(&other->gridinfo_);
    regionlist_.Swap(&other->regionlist_);
    std::swap(path_, other->path_);
    monsterregion_.Swap(&other->monsterregion_);
    arealist_.Swap(&other->arealist_);
    routelist_.Swap(&other->routelist_);
    std::swap(eulerx_, other->eulerx_);
    std::swap(eulery_, other->eulery_);
    std::swap(viewdis_, other->viewdis_);
    planes_.Swap(&other->planes_);
    sceneevent_.Swap(&other->sceneevent_);
    std::swap(bloomparam_, other->bloomparam_);
    std::swap(usebloom_, other->usebloom_);
    std::swap(defaultregion_, other->defaultregion_);
    qinggonglist_.Swap(&other->qinggonglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSceneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSceneInfo_descriptor_;
  metadata.reflection = PBSceneInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
