// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamMemberSimple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamMemberSimple_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamMemberJobRequire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamMemberJobRequire_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamInfoSimple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamInfoSimple_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamAcceptInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamAcceptInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamAcceptApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamAcceptApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamChangeLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamChangeLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamPublishAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamPublishAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamPublishCancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamPublishCancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamPublishInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamPublishInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamPublishAcceptInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamPublishAcceptInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamPublishList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamPublishList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamKickVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamKickVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamSetAllot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamSetAllot_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamSetAllotVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamSetAllotVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamNearPlayerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamNearPlayerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamNearTeamList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamNearTeamList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamAcceptInviteTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamAcceptInviteTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamAcceptApplyTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamAcceptApplyTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamPublishAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamPublishAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamPublishDel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamPublishDel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamPublishInviteTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamPublishInviteTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamPublishAcceptInviteTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamPublishAcceptInviteTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamPublish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamPublish_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTeamPublishList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTeamPublishList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamNearPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamNearPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamNearPlayerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamNearPlayerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamNearTeamList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamNearTeamList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2WTeamPublishAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2WTeamPublishAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamView_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTeamInviteTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTeamInviteTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTeamApplyTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTeamApplyTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCallupAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCallupAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCallupAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCallupAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GAcceptIdentityAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GAcceptIdentityAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CAcceptIdentityAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CAcceptIdentityAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCheckConditionAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCheckConditionAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamMemberCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamMemberCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CheckConditionAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CheckConditionAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamApplicant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamApplicant_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamCreateAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamCreateAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamCreateAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamCreateAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamSetTargetAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamSetTargetAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamSetTargetAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamSetTargetAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSetAutoAcceptAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSetAutoAcceptAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSetAutoAcceptAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSetAutoAcceptAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSetAutoMatchAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSetAutoMatchAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSetAutoMatchAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSetAutoMatchAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSetAutoMatchJoinAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSetAutoMatchJoinAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSetAutoMatchJoinAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSetAutoMatchJoinAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSetAutoMatchJobLimitAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSetAutoMatchJobLimitAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSetAutoMatchJobLimitAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSetAutoMatchJobLimitAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGetApplicantListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGetApplicantListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGetApplicantListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGetApplicantListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClearApplicantListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClearApplicantListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClearApplicantListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClearApplicantListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamAcceptApplyFromListAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamAcceptApplyFromListAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTeamAcceptApplyFromListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTeamAcceptApplyFromListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GSearchTeamByTargetAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GSearchTeamByTargetAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSearchTeamByTargetAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSearchTeamByTargetAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GApplyTeamByTargetAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GApplyTeamByTargetAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBApplyTeamByTargetAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBApplyTeamByTargetAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBApplyedTeamIdListNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBApplyedTeamIdListNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCancleApplyTeamByTargetAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCancleApplyTeamByTargetAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCancleApplyTeamByTargetAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCancleApplyTeamByTargetAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GAcceptTeamTaskAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GAcceptTeamTaskAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CAcceptTeamTaskAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CAcceptTeamTaskAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GEnterTeamTaskCopymapAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GEnterTeamTaskCopymapAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCompleteTeamTaskAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCompleteTeamTaskAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCompleteTeamTaskAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCompleteTeamTaskAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamFollowAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamFollowAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTeamFollowAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTeamFollowAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamRemainConfirmAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamRemainConfirmAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTeamRemainConfirmAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTeamRemainConfirmAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTeamConfirmAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTeamConfirmAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTeamConfirmAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTeamConfirmAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CBroadMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CBroadMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CMemberHitAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CMemberHitAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTeamConfirmState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emTeamTaskState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _em_TeamPublishDelReason_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Team_2eproto() {
  protobuf_AddDesc_Team_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Team.proto");
  GOOGLE_CHECK(file != NULL);
  PBTeamMember_descriptor_ = file->message_type(0);
  static const int PBTeamMember_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMember, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMember, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMember, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMember, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMember, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMember, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMember, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMember, calluptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMember, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMember, teamconfirmstate_),
  };
  PBTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamMember_descriptor_,
      PBTeamMember::default_instance_,
      PBTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamMember));
  PBTeamMemberSimple_descriptor_ = file->message_type(1);
  static const int PBTeamMemberSimple_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberSimple, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberSimple, job_),
  };
  PBTeamMemberSimple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamMemberSimple_descriptor_,
      PBTeamMemberSimple::default_instance_,
      PBTeamMemberSimple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberSimple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberSimple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamMemberSimple));
  PBTeamTarget_descriptor_ = file->message_type(2);
  static const int PBTeamTarget_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTarget, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTarget, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTarget, levelmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTarget, levelmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTarget, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTarget, isautomatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTarget, isautoaccept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTarget, cash_),
  };
  PBTeamTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamTarget_descriptor_,
      PBTeamTarget::default_instance_,
      PBTeamTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamTarget));
  PBTeamMemberJobRequire_descriptor_ = file->message_type(3);
  static const int PBTeamMemberJobRequire_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberJobRequire, postion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberJobRequire, jobrequire_),
  };
  PBTeamMemberJobRequire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamMemberJobRequire_descriptor_,
      PBTeamMemberJobRequire::default_instance_,
      PBTeamMemberJobRequire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberJobRequire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberJobRequire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamMemberJobRequire));
  PBTeamTask_descriptor_ = file->message_type(4);
  static const int PBTeamTask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTask, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTask, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTask, state_),
  };
  PBTeamTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamTask_descriptor_,
      PBTeamTask::default_instance_,
      PBTeamTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamTask));
  PBTeamInfo_descriptor_ = file->message_type(5);
  static const int PBTeamInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, learderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, allottype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, teamtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, jobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, teamtask_),
  };
  PBTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamInfo_descriptor_,
      PBTeamInfo::default_instance_,
      PBTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamInfo));
  PBTeamInfoSimple_descriptor_ = file->message_type(6);
  static const int PBTeamInfoSimple_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, leaderplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, leadersceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, leaderjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, teamtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, leaderfactionbanner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, averagefightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, leaderlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, leaderfactionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, leaderfactionid_),
  };
  PBTeamInfoSimple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamInfoSimple_descriptor_,
      PBTeamInfoSimple::default_instance_,
      PBTeamInfoSimple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamInfoSimple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamInfoSimple));
  PBC2GTeamInvite_descriptor_ = file->message_type(7);
  static const int PBC2GTeamInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamInvite, playerid_),
  };
  PBC2GTeamInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamInvite_descriptor_,
      PBC2GTeamInvite::default_instance_,
      PBC2GTeamInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamInvite));
  PBC2GTeamAcceptInvite_descriptor_ = file->message_type(8);
  static const int PBC2GTeamAcceptInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamAcceptInvite, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamAcceptInvite, accept_),
  };
  PBC2GTeamAcceptInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamAcceptInvite_descriptor_,
      PBC2GTeamAcceptInvite::default_instance_,
      PBC2GTeamAcceptInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamAcceptInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamAcceptInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamAcceptInvite));
  PBC2GTeamApply_descriptor_ = file->message_type(9);
  static const int PBC2GTeamApply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamApply, playerid_),
  };
  PBC2GTeamApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamApply_descriptor_,
      PBC2GTeamApply::default_instance_,
      PBC2GTeamApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamApply));
  PBC2GTeamAcceptApply_descriptor_ = file->message_type(10);
  static const int PBC2GTeamAcceptApply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamAcceptApply, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamAcceptApply, accept_),
  };
  PBC2GTeamAcceptApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamAcceptApply_descriptor_,
      PBC2GTeamAcceptApply::default_instance_,
      PBC2GTeamAcceptApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamAcceptApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamAcceptApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamAcceptApply));
  PBC2GTeamLeave_descriptor_ = file->message_type(11);
  static const int PBC2GTeamLeave_offsets_[1] = {
  };
  PBC2GTeamLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamLeave_descriptor_,
      PBC2GTeamLeave::default_instance_,
      PBC2GTeamLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamLeave));
  PBC2GTeamChangeLeader_descriptor_ = file->message_type(12);
  static const int PBC2GTeamChangeLeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamChangeLeader, playerid_),
  };
  PBC2GTeamChangeLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamChangeLeader_descriptor_,
      PBC2GTeamChangeLeader::default_instance_,
      PBC2GTeamChangeLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamChangeLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamChangeLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamChangeLeader));
  PBC2GTeamPublishAsk_descriptor_ = file->message_type(13);
  static const int PBC2GTeamPublishAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAsk, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAsk, msg_),
  };
  PBC2GTeamPublishAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamPublishAsk_descriptor_,
      PBC2GTeamPublishAsk::default_instance_,
      PBC2GTeamPublishAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamPublishAsk));
  PBC2GTeamPublishCancel_descriptor_ = file->message_type(14);
  static const int PBC2GTeamPublishCancel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishCancel, copymapid_),
  };
  PBC2GTeamPublishCancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamPublishCancel_descriptor_,
      PBC2GTeamPublishCancel::default_instance_,
      PBC2GTeamPublishCancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishCancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishCancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamPublishCancel));
  PBC2GTeamPublishInvite_descriptor_ = file->message_type(15);
  static const int PBC2GTeamPublishInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishInvite, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishInvite, playerid_),
  };
  PBC2GTeamPublishInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamPublishInvite_descriptor_,
      PBC2GTeamPublishInvite::default_instance_,
      PBC2GTeamPublishInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamPublishInvite));
  PBC2GTeamPublishAcceptInvite_descriptor_ = file->message_type(16);
  static const int PBC2GTeamPublishAcceptInvite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAcceptInvite, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAcceptInvite, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAcceptInvite, accept_),
  };
  PBC2GTeamPublishAcceptInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamPublishAcceptInvite_descriptor_,
      PBC2GTeamPublishAcceptInvite::default_instance_,
      PBC2GTeamPublishAcceptInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAcceptInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAcceptInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamPublishAcceptInvite));
  PBC2GTeamPublishList_descriptor_ = file->message_type(17);
  static const int PBC2GTeamPublishList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishList, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishList, beginidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishList, endidx_),
  };
  PBC2GTeamPublishList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamPublishList_descriptor_,
      PBC2GTeamPublishList::default_instance_,
      PBC2GTeamPublishList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamPublishList));
  PBC2GTeamKick_descriptor_ = file->message_type(18);
  static const int PBC2GTeamKick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamKick, playerid_),
  };
  PBC2GTeamKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamKick_descriptor_,
      PBC2GTeamKick::default_instance_,
      PBC2GTeamKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamKick));
  PBC2GTeamKickVote_descriptor_ = file->message_type(19);
  static const int PBC2GTeamKickVote_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamKickVote, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamKickVote, agree_),
  };
  PBC2GTeamKickVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamKickVote_descriptor_,
      PBC2GTeamKickVote::default_instance_,
      PBC2GTeamKickVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamKickVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamKickVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamKickVote));
  PBTeamSetAllot_descriptor_ = file->message_type(20);
  static const int PBTeamSetAllot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamSetAllot, type_),
  };
  PBTeamSetAllot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamSetAllot_descriptor_,
      PBTeamSetAllot::default_instance_,
      PBTeamSetAllot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamSetAllot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamSetAllot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamSetAllot));
  PBTeamSetAllotVote_descriptor_ = file->message_type(21);
  static const int PBTeamSetAllotVote_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamSetAllotVote, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamSetAllotVote, agree_),
  };
  PBTeamSetAllotVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamSetAllotVote_descriptor_,
      PBTeamSetAllotVote::default_instance_,
      PBTeamSetAllotVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamSetAllotVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamSetAllotVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamSetAllotVote));
  PBTeamNearPlayerList_descriptor_ = file->message_type(22);
  static const int PBTeamNearPlayerList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamNearPlayerList, beginidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamNearPlayerList, endidx_),
  };
  PBTeamNearPlayerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamNearPlayerList_descriptor_,
      PBTeamNearPlayerList::default_instance_,
      PBTeamNearPlayerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamNearPlayerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamNearPlayerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamNearPlayerList));
  PBTeamNearTeamList_descriptor_ = file->message_type(23);
  static const int PBTeamNearTeamList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamNearTeamList, beginidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamNearTeamList, endidx_),
  };
  PBTeamNearTeamList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamNearTeamList_descriptor_,
      PBTeamNearTeamList::default_instance_,
      PBTeamNearTeamList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamNearTeamList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamNearTeamList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamNearTeamList));
  PBTeamAcceptInviteTransfer_descriptor_ = file->message_type(24);
  static const int PBTeamAcceptInviteTransfer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamAcceptInviteTransfer, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamAcceptInviteTransfer, accept_),
  };
  PBTeamAcceptInviteTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamAcceptInviteTransfer_descriptor_,
      PBTeamAcceptInviteTransfer::default_instance_,
      PBTeamAcceptInviteTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamAcceptInviteTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamAcceptInviteTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamAcceptInviteTransfer));
  PBTeamAcceptApplyTransfer_descriptor_ = file->message_type(25);
  static const int PBTeamAcceptApplyTransfer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamAcceptApplyTransfer, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamAcceptApplyTransfer, accept_),
  };
  PBTeamAcceptApplyTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamAcceptApplyTransfer_descriptor_,
      PBTeamAcceptApplyTransfer::default_instance_,
      PBTeamAcceptApplyTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamAcceptApplyTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamAcceptApplyTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamAcceptApplyTransfer));
  PBC2GTeamPublishAdd_descriptor_ = file->message_type(26);
  static const int PBC2GTeamPublishAdd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAdd, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAdd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAdd, msg_),
  };
  PBC2GTeamPublishAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamPublishAdd_descriptor_,
      PBC2GTeamPublishAdd::default_instance_,
      PBC2GTeamPublishAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamPublishAdd));
  PBC2GTeamPublishDel_descriptor_ = file->message_type(27);
  static const int PBC2GTeamPublishDel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishDel, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishDel, reason_),
  };
  PBC2GTeamPublishDel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamPublishDel_descriptor_,
      PBC2GTeamPublishDel::default_instance_,
      PBC2GTeamPublishDel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishDel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishDel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamPublishDel));
  PBC2GTeamPublishInviteTransfer_descriptor_ = file->message_type(28);
  static const int PBC2GTeamPublishInviteTransfer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishInviteTransfer, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishInviteTransfer, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishInviteTransfer, fightpower_),
  };
  PBC2GTeamPublishInviteTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamPublishInviteTransfer_descriptor_,
      PBC2GTeamPublishInviteTransfer::default_instance_,
      PBC2GTeamPublishInviteTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishInviteTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishInviteTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamPublishInviteTransfer));
  PBC2GTeamPublishAcceptInviteTransfer_descriptor_ = file->message_type(29);
  static const int PBC2GTeamPublishAcceptInviteTransfer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAcceptInviteTransfer, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAcceptInviteTransfer, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAcceptInviteTransfer, accept_),
  };
  PBC2GTeamPublishAcceptInviteTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamPublishAcceptInviteTransfer_descriptor_,
      PBC2GTeamPublishAcceptInviteTransfer::default_instance_,
      PBC2GTeamPublishAcceptInviteTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAcceptInviteTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamPublishAcceptInviteTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamPublishAcceptInviteTransfer));
  PBTeamPublish_descriptor_ = file->message_type(30);
  static const int PBTeamPublish_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamPublish, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamPublish, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamPublish, compeletenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamPublish, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamPublish, time_),
  };
  PBTeamPublish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamPublish_descriptor_,
      PBTeamPublish::default_instance_,
      PBTeamPublish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamPublish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamPublish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamPublish));
  PBG2CTeamPublishList_descriptor_ = file->message_type(31);
  static const int PBG2CTeamPublishList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamPublishList, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamPublishList, beginidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamPublishList, endidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamPublishList, allcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamPublishList, publish_),
  };
  PBG2CTeamPublishList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTeamPublishList_descriptor_,
      PBG2CTeamPublishList::default_instance_,
      PBG2CTeamPublishList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamPublishList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamPublishList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTeamPublishList));
  PBTeamNearPlayer_descriptor_ = file->message_type(32);
  static const int PBTeamNearPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamNearPlayer, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamNearPlayer, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamNearPlayer, teamid_),
  };
  PBTeamNearPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamNearPlayer_descriptor_,
      PBTeamNearPlayer::default_instance_,
      PBTeamNearPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamNearPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamNearPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamNearPlayer));
  PBC2GTeamNearPlayerList_descriptor_ = file->message_type(33);
  static const int PBC2GTeamNearPlayerList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamNearPlayerList, beginidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamNearPlayerList, endidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamNearPlayerList, allcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamNearPlayerList, player_),
  };
  PBC2GTeamNearPlayerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamNearPlayerList_descriptor_,
      PBC2GTeamNearPlayerList::default_instance_,
      PBC2GTeamNearPlayerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamNearPlayerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamNearPlayerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamNearPlayerList));
  PBC2GTeamNearTeamList_descriptor_ = file->message_type(34);
  static const int PBC2GTeamNearTeamList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamNearTeamList, beginidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamNearTeamList, endidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamNearTeamList, allcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamNearTeamList, team_),
  };
  PBC2GTeamNearTeamList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamNearTeamList_descriptor_,
      PBC2GTeamNearTeamList::default_instance_,
      PBC2GTeamNearTeamList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamNearTeamList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamNearTeamList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamNearTeamList));
  PBG2WTeamPublishAsk_descriptor_ = file->message_type(35);
  static const int PBG2WTeamPublishAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WTeamPublishAsk, clientmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WTeamPublishAsk, donecount_),
  };
  PBG2WTeamPublishAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2WTeamPublishAsk_descriptor_,
      PBG2WTeamPublishAsk::default_instance_,
      PBG2WTeamPublishAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WTeamPublishAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2WTeamPublishAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2WTeamPublishAsk));
  PBC2GTeamView_descriptor_ = file->message_type(36);
  static const int PBC2GTeamView_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamView, playerid_),
  };
  PBC2GTeamView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamView_descriptor_,
      PBC2GTeamView::default_instance_,
      PBC2GTeamView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamView));
  PBG2CTeamInviteTransfer_descriptor_ = file->message_type(37);
  static const int PBG2CTeamInviteTransfer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamInviteTransfer, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamInviteTransfer, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamInviteTransfer, teamtargetid_),
  };
  PBG2CTeamInviteTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTeamInviteTransfer_descriptor_,
      PBG2CTeamInviteTransfer::default_instance_,
      PBG2CTeamInviteTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamInviteTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamInviteTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTeamInviteTransfer));
  PBG2CTeamApplyTransfer_descriptor_ = file->message_type(38);
  static const int PBG2CTeamApplyTransfer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamApplyTransfer, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamApplyTransfer, fightpower_),
  };
  PBG2CTeamApplyTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTeamApplyTransfer_descriptor_,
      PBG2CTeamApplyTransfer::default_instance_,
      PBG2CTeamApplyTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamApplyTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamApplyTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTeamApplyTransfer));
  PBC2GCallupAsk_descriptor_ = file->message_type(39);
  static const int PBC2GCallupAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCallupAsk, playerid_),
  };
  PBC2GCallupAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCallupAsk_descriptor_,
      PBC2GCallupAsk::default_instance_,
      PBC2GCallupAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCallupAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCallupAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCallupAsk));
  PBG2CCallupAck_descriptor_ = file->message_type(40);
  static const int PBG2CCallupAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCallupAck, playerid_),
  };
  PBG2CCallupAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCallupAck_descriptor_,
      PBG2CCallupAck::default_instance_,
      PBG2CCallupAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCallupAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCallupAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCallupAck));
  PBC2GAcceptIdentityAsk_descriptor_ = file->message_type(41);
  static const int PBC2GAcceptIdentityAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAcceptIdentityAsk, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAcceptIdentityAsk, npcunitid_),
  };
  PBC2GAcceptIdentityAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GAcceptIdentityAsk_descriptor_,
      PBC2GAcceptIdentityAsk::default_instance_,
      PBC2GAcceptIdentityAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAcceptIdentityAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAcceptIdentityAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GAcceptIdentityAsk));
  PBG2CAcceptIdentityAck_descriptor_ = file->message_type(42);
  static const int PBG2CAcceptIdentityAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAcceptIdentityAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAcceptIdentityAck, npcunitid_),
  };
  PBG2CAcceptIdentityAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CAcceptIdentityAck_descriptor_,
      PBG2CAcceptIdentityAck::default_instance_,
      PBG2CAcceptIdentityAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAcceptIdentityAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAcceptIdentityAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CAcceptIdentityAck));
  PBC2GCheckConditionAsk_descriptor_ = file->message_type(43);
  static const int PBC2GCheckConditionAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCheckConditionAsk, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCheckConditionAsk, npcunitid_),
  };
  PBC2GCheckConditionAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCheckConditionAsk_descriptor_,
      PBC2GCheckConditionAsk::default_instance_,
      PBC2GCheckConditionAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCheckConditionAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCheckConditionAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCheckConditionAsk));
  PBTeamMemberCondition_descriptor_ = file->message_type(44);
  static const int PBTeamMemberCondition_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberCondition, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberCondition, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberCondition, entercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberCondition, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberCondition, isnonear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberCondition, isneedpre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberCondition, ishavetask_),
  };
  PBTeamMemberCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamMemberCondition_descriptor_,
      PBTeamMemberCondition::default_instance_,
      PBTeamMemberCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamMemberCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamMemberCondition));
  PBG2CheckConditionAck_descriptor_ = file->message_type(45);
  static const int PBG2CheckConditionAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CheckConditionAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CheckConditionAck, condition_),
  };
  PBG2CheckConditionAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CheckConditionAck_descriptor_,
      PBG2CheckConditionAck::default_instance_,
      PBG2CheckConditionAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CheckConditionAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CheckConditionAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CheckConditionAck));
  PBTeamApplicant_descriptor_ = file->message_type(46);
  static const int PBTeamApplicant_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamApplicant, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamApplicant, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamApplicant, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamApplicant, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamApplicant, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamApplicant, relationship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamApplicant, factionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamApplicant, factionid_),
  };
  PBTeamApplicant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamApplicant_descriptor_,
      PBTeamApplicant::default_instance_,
      PBTeamApplicant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamApplicant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamApplicant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamApplicant));
  PBTeamCreateAsk_descriptor_ = file->message_type(47);
  static const int PBTeamCreateAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamCreateAsk, target_),
  };
  PBTeamCreateAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamCreateAsk_descriptor_,
      PBTeamCreateAsk::default_instance_,
      PBTeamCreateAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamCreateAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamCreateAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamCreateAsk));
  PBTeamCreateAck_descriptor_ = file->message_type(48);
  static const int PBTeamCreateAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamCreateAck, team_),
  };
  PBTeamCreateAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamCreateAck_descriptor_,
      PBTeamCreateAck::default_instance_,
      PBTeamCreateAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamCreateAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamCreateAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamCreateAck));
  PBTeamSetTargetAsk_descriptor_ = file->message_type(49);
  static const int PBTeamSetTargetAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamSetTargetAsk, target_),
  };
  PBTeamSetTargetAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamSetTargetAsk_descriptor_,
      PBTeamSetTargetAsk::default_instance_,
      PBTeamSetTargetAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamSetTargetAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamSetTargetAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamSetTargetAsk));
  PBTeamSetTargetAck_descriptor_ = file->message_type(50);
  static const int PBTeamSetTargetAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamSetTargetAck, target_),
  };
  PBTeamSetTargetAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamSetTargetAck_descriptor_,
      PBTeamSetTargetAck::default_instance_,
      PBTeamSetTargetAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamSetTargetAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamSetTargetAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamSetTargetAck));
  PBSetAutoAcceptAsk_descriptor_ = file->message_type(51);
  static const int PBSetAutoAcceptAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoAcceptAsk, isopen_),
  };
  PBSetAutoAcceptAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSetAutoAcceptAsk_descriptor_,
      PBSetAutoAcceptAsk::default_instance_,
      PBSetAutoAcceptAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoAcceptAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoAcceptAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSetAutoAcceptAsk));
  PBSetAutoAcceptAck_descriptor_ = file->message_type(52);
  static const int PBSetAutoAcceptAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoAcceptAck, isopen_),
  };
  PBSetAutoAcceptAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSetAutoAcceptAck_descriptor_,
      PBSetAutoAcceptAck::default_instance_,
      PBSetAutoAcceptAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoAcceptAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoAcceptAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSetAutoAcceptAck));
  PBSetAutoMatchAsk_descriptor_ = file->message_type(53);
  static const int PBSetAutoMatchAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchAsk, isopen_),
  };
  PBSetAutoMatchAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSetAutoMatchAsk_descriptor_,
      PBSetAutoMatchAsk::default_instance_,
      PBSetAutoMatchAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSetAutoMatchAsk));
  PBSetAutoMatchAck_descriptor_ = file->message_type(54);
  static const int PBSetAutoMatchAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchAck, isopen_),
  };
  PBSetAutoMatchAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSetAutoMatchAck_descriptor_,
      PBSetAutoMatchAck::default_instance_,
      PBSetAutoMatchAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSetAutoMatchAck));
  PBSetAutoMatchJoinAsk_descriptor_ = file->message_type(55);
  static const int PBSetAutoMatchJoinAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJoinAsk, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJoinAsk, targetid_),
  };
  PBSetAutoMatchJoinAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSetAutoMatchJoinAsk_descriptor_,
      PBSetAutoMatchJoinAsk::default_instance_,
      PBSetAutoMatchJoinAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJoinAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJoinAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSetAutoMatchJoinAsk));
  PBSetAutoMatchJoinAck_descriptor_ = file->message_type(56);
  static const int PBSetAutoMatchJoinAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJoinAck, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJoinAck, targetid_),
  };
  PBSetAutoMatchJoinAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSetAutoMatchJoinAck_descriptor_,
      PBSetAutoMatchJoinAck::default_instance_,
      PBSetAutoMatchJoinAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJoinAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJoinAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSetAutoMatchJoinAck));
  PBSetAutoMatchJobLimitAsk_descriptor_ = file->message_type(57);
  static const int PBSetAutoMatchJobLimitAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJobLimitAsk, jobs_),
  };
  PBSetAutoMatchJobLimitAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSetAutoMatchJobLimitAsk_descriptor_,
      PBSetAutoMatchJobLimitAsk::default_instance_,
      PBSetAutoMatchJobLimitAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJobLimitAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJobLimitAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSetAutoMatchJobLimitAsk));
  PBSetAutoMatchJobLimitAck_descriptor_ = file->message_type(58);
  static const int PBSetAutoMatchJobLimitAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJobLimitAck, jobs_),
  };
  PBSetAutoMatchJobLimitAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSetAutoMatchJobLimitAck_descriptor_,
      PBSetAutoMatchJobLimitAck::default_instance_,
      PBSetAutoMatchJobLimitAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJobLimitAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSetAutoMatchJobLimitAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSetAutoMatchJobLimitAck));
  PBGetApplicantListAsk_descriptor_ = file->message_type(59);
  static const int PBGetApplicantListAsk_offsets_[1] = {
  };
  PBGetApplicantListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGetApplicantListAsk_descriptor_,
      PBGetApplicantListAsk::default_instance_,
      PBGetApplicantListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGetApplicantListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGetApplicantListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGetApplicantListAsk));
  PBGetApplicantListAck_descriptor_ = file->message_type(60);
  static const int PBGetApplicantListAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGetApplicantListAck, applicants_),
  };
  PBGetApplicantListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGetApplicantListAck_descriptor_,
      PBGetApplicantListAck::default_instance_,
      PBGetApplicantListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGetApplicantListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGetApplicantListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGetApplicantListAck));
  PBClearApplicantListAsk_descriptor_ = file->message_type(61);
  static const int PBClearApplicantListAsk_offsets_[1] = {
  };
  PBClearApplicantListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClearApplicantListAsk_descriptor_,
      PBClearApplicantListAsk::default_instance_,
      PBClearApplicantListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClearApplicantListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClearApplicantListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClearApplicantListAsk));
  PBClearApplicantListAck_descriptor_ = file->message_type(62);
  static const int PBClearApplicantListAck_offsets_[1] = {
  };
  PBClearApplicantListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClearApplicantListAck_descriptor_,
      PBClearApplicantListAck::default_instance_,
      PBClearApplicantListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClearApplicantListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClearApplicantListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClearApplicantListAck));
  PBC2GTeamAcceptApplyFromListAsk_descriptor_ = file->message_type(63);
  static const int PBC2GTeamAcceptApplyFromListAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamAcceptApplyFromListAsk, playerid_),
  };
  PBC2GTeamAcceptApplyFromListAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamAcceptApplyFromListAsk_descriptor_,
      PBC2GTeamAcceptApplyFromListAsk::default_instance_,
      PBC2GTeamAcceptApplyFromListAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamAcceptApplyFromListAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamAcceptApplyFromListAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamAcceptApplyFromListAsk));
  PBTeamAcceptApplyFromListAck_descriptor_ = file->message_type(64);
  static const int PBTeamAcceptApplyFromListAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamAcceptApplyFromListAck, playerid_),
  };
  PBTeamAcceptApplyFromListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTeamAcceptApplyFromListAck_descriptor_,
      PBTeamAcceptApplyFromListAck::default_instance_,
      PBTeamAcceptApplyFromListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamAcceptApplyFromListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTeamAcceptApplyFromListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTeamAcceptApplyFromListAck));
  PBC2GSearchTeamByTargetAsk_descriptor_ = file->message_type(65);
  static const int PBC2GSearchTeamByTargetAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSearchTeamByTargetAsk, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSearchTeamByTargetAsk, index_),
  };
  PBC2GSearchTeamByTargetAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GSearchTeamByTargetAsk_descriptor_,
      PBC2GSearchTeamByTargetAsk::default_instance_,
      PBC2GSearchTeamByTargetAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSearchTeamByTargetAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSearchTeamByTargetAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GSearchTeamByTargetAsk));
  PBSearchTeamByTargetAck_descriptor_ = file->message_type(66);
  static const int PBSearchTeamByTargetAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSearchTeamByTargetAck, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSearchTeamByTargetAck, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSearchTeamByTargetAck, index_),
  };
  PBSearchTeamByTargetAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSearchTeamByTargetAck_descriptor_,
      PBSearchTeamByTargetAck::default_instance_,
      PBSearchTeamByTargetAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSearchTeamByTargetAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSearchTeamByTargetAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSearchTeamByTargetAck));
  PBC2GApplyTeamByTargetAsk_descriptor_ = file->message_type(67);
  static const int PBC2GApplyTeamByTargetAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GApplyTeamByTargetAsk, teamid_),
  };
  PBC2GApplyTeamByTargetAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GApplyTeamByTargetAsk_descriptor_,
      PBC2GApplyTeamByTargetAsk::default_instance_,
      PBC2GApplyTeamByTargetAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GApplyTeamByTargetAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GApplyTeamByTargetAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GApplyTeamByTargetAsk));
  PBApplyTeamByTargetAck_descriptor_ = file->message_type(68);
  static const int PBApplyTeamByTargetAck_offsets_[1] = {
  };
  PBApplyTeamByTargetAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBApplyTeamByTargetAck_descriptor_,
      PBApplyTeamByTargetAck::default_instance_,
      PBApplyTeamByTargetAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplyTeamByTargetAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplyTeamByTargetAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBApplyTeamByTargetAck));
  PBApplyedTeamIdListNtf_descriptor_ = file->message_type(69);
  static const int PBApplyedTeamIdListNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplyedTeamIdListNtf, teamids_),
  };
  PBApplyedTeamIdListNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBApplyedTeamIdListNtf_descriptor_,
      PBApplyedTeamIdListNtf::default_instance_,
      PBApplyedTeamIdListNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplyedTeamIdListNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplyedTeamIdListNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBApplyedTeamIdListNtf));
  PBC2GCancleApplyTeamByTargetAsk_descriptor_ = file->message_type(70);
  static const int PBC2GCancleApplyTeamByTargetAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCancleApplyTeamByTargetAsk, teamid_),
  };
  PBC2GCancleApplyTeamByTargetAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCancleApplyTeamByTargetAsk_descriptor_,
      PBC2GCancleApplyTeamByTargetAsk::default_instance_,
      PBC2GCancleApplyTeamByTargetAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCancleApplyTeamByTargetAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCancleApplyTeamByTargetAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCancleApplyTeamByTargetAsk));
  PBCancleApplyTeamByTargetAck_descriptor_ = file->message_type(71);
  static const int PBCancleApplyTeamByTargetAck_offsets_[1] = {
  };
  PBCancleApplyTeamByTargetAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCancleApplyTeamByTargetAck_descriptor_,
      PBCancleApplyTeamByTargetAck::default_instance_,
      PBCancleApplyTeamByTargetAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCancleApplyTeamByTargetAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCancleApplyTeamByTargetAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCancleApplyTeamByTargetAck));
  PBC2GAcceptTeamTaskAsk_descriptor_ = file->message_type(72);
  static const int PBC2GAcceptTeamTaskAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAcceptTeamTaskAsk, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAcceptTeamTaskAsk, npcunitid_),
  };
  PBC2GAcceptTeamTaskAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GAcceptTeamTaskAsk_descriptor_,
      PBC2GAcceptTeamTaskAsk::default_instance_,
      PBC2GAcceptTeamTaskAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAcceptTeamTaskAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAcceptTeamTaskAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GAcceptTeamTaskAsk));
  PBG2CAcceptTeamTaskAck_descriptor_ = file->message_type(73);
  static const int PBG2CAcceptTeamTaskAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAcceptTeamTaskAck, teamtask_),
  };
  PBG2CAcceptTeamTaskAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CAcceptTeamTaskAck_descriptor_,
      PBG2CAcceptTeamTaskAck::default_instance_,
      PBG2CAcceptTeamTaskAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAcceptTeamTaskAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAcceptTeamTaskAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CAcceptTeamTaskAck));
  PBC2GEnterTeamTaskCopymapAsk_descriptor_ = file->message_type(74);
  static const int PBC2GEnterTeamTaskCopymapAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEnterTeamTaskCopymapAsk, npcunitid_),
  };
  PBC2GEnterTeamTaskCopymapAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GEnterTeamTaskCopymapAsk_descriptor_,
      PBC2GEnterTeamTaskCopymapAsk::default_instance_,
      PBC2GEnterTeamTaskCopymapAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEnterTeamTaskCopymapAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEnterTeamTaskCopymapAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GEnterTeamTaskCopymapAsk));
  PBC2GCompleteTeamTaskAsk_descriptor_ = file->message_type(75);
  static const int PBC2GCompleteTeamTaskAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCompleteTeamTaskAsk, npcunitid_),
  };
  PBC2GCompleteTeamTaskAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCompleteTeamTaskAsk_descriptor_,
      PBC2GCompleteTeamTaskAsk::default_instance_,
      PBC2GCompleteTeamTaskAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCompleteTeamTaskAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCompleteTeamTaskAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCompleteTeamTaskAsk));
  PBG2CCompleteTeamTaskAck_descriptor_ = file->message_type(76);
  static const int PBG2CCompleteTeamTaskAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCompleteTeamTaskAck, expend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCompleteTeamTaskAck, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCompleteTeamTaskAck, leaderitem_),
  };
  PBG2CCompleteTeamTaskAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCompleteTeamTaskAck_descriptor_,
      PBG2CCompleteTeamTaskAck::default_instance_,
      PBG2CCompleteTeamTaskAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCompleteTeamTaskAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCompleteTeamTaskAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCompleteTeamTaskAck));
  PBC2GTeamFollowAsk_descriptor_ = file->message_type(77);
  static const int PBC2GTeamFollowAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamFollowAsk, isfollow_),
  };
  PBC2GTeamFollowAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamFollowAsk_descriptor_,
      PBC2GTeamFollowAsk::default_instance_,
      PBC2GTeamFollowAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamFollowAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamFollowAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamFollowAsk));
  PBG2CTeamFollowAck_descriptor_ = file->message_type(78);
  static const int PBG2CTeamFollowAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamFollowAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamFollowAck, isfollow_),
  };
  PBG2CTeamFollowAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTeamFollowAck_descriptor_,
      PBG2CTeamFollowAck::default_instance_,
      PBG2CTeamFollowAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamFollowAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamFollowAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTeamFollowAck));
  PBC2GTeamRemainConfirmAsk_descriptor_ = file->message_type(79);
  static const int PBC2GTeamRemainConfirmAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamRemainConfirmAsk, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamRemainConfirmAsk, id_),
  };
  PBC2GTeamRemainConfirmAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamRemainConfirmAsk_descriptor_,
      PBC2GTeamRemainConfirmAsk::default_instance_,
      PBC2GTeamRemainConfirmAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamRemainConfirmAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamRemainConfirmAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamRemainConfirmAsk));
  PBG2CTeamRemainConfirmAck_descriptor_ = file->message_type(80);
  static const int PBG2CTeamRemainConfirmAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamRemainConfirmAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamRemainConfirmAck, id_),
  };
  PBG2CTeamRemainConfirmAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTeamRemainConfirmAck_descriptor_,
      PBG2CTeamRemainConfirmAck::default_instance_,
      PBG2CTeamRemainConfirmAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamRemainConfirmAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamRemainConfirmAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTeamRemainConfirmAck));
  PBC2GTeamConfirmAsk_descriptor_ = file->message_type(81);
  static const int PBC2GTeamConfirmAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamConfirmAsk, isconfirm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamConfirmAsk, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamConfirmAsk, id_),
  };
  PBC2GTeamConfirmAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTeamConfirmAsk_descriptor_,
      PBC2GTeamConfirmAsk::default_instance_,
      PBC2GTeamConfirmAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamConfirmAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTeamConfirmAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTeamConfirmAsk));
  PBG2CTeamConfirmAck_descriptor_ = file->message_type(82);
  static const int PBG2CTeamConfirmAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamConfirmAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamConfirmAck, isconfirm_),
  };
  PBG2CTeamConfirmAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTeamConfirmAck_descriptor_,
      PBG2CTeamConfirmAck::default_instance_,
      PBG2CTeamConfirmAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamConfirmAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTeamConfirmAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTeamConfirmAck));
  PBG2CBroadMsg_descriptor_ = file->message_type(83);
  static const int PBG2CBroadMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadMsg, isconfirm_),
  };
  PBG2CBroadMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CBroadMsg_descriptor_,
      PBG2CBroadMsg::default_instance_,
      PBG2CBroadMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CBroadMsg));
  PBG2CMemberHitAck_descriptor_ = file->message_type(84);
  static const int PBG2CMemberHitAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CMemberHitAck, condition_),
  };
  PBG2CMemberHitAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CMemberHitAck_descriptor_,
      PBG2CMemberHitAck::default_instance_,
      PBG2CMemberHitAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CMemberHitAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CMemberHitAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CMemberHitAck));
  _emTeamConfirmState_descriptor_ = file->enum_type(0);
  _emTeamTaskState_descriptor_ = file->enum_type(1);
  _em_TeamPublishDelReason_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Team_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamMember_descriptor_, &PBTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamMemberSimple_descriptor_, &PBTeamMemberSimple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamTarget_descriptor_, &PBTeamTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamMemberJobRequire_descriptor_, &PBTeamMemberJobRequire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamTask_descriptor_, &PBTeamTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamInfo_descriptor_, &PBTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamInfoSimple_descriptor_, &PBTeamInfoSimple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamInvite_descriptor_, &PBC2GTeamInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamAcceptInvite_descriptor_, &PBC2GTeamAcceptInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamApply_descriptor_, &PBC2GTeamApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamAcceptApply_descriptor_, &PBC2GTeamAcceptApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamLeave_descriptor_, &PBC2GTeamLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamChangeLeader_descriptor_, &PBC2GTeamChangeLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamPublishAsk_descriptor_, &PBC2GTeamPublishAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamPublishCancel_descriptor_, &PBC2GTeamPublishCancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamPublishInvite_descriptor_, &PBC2GTeamPublishInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamPublishAcceptInvite_descriptor_, &PBC2GTeamPublishAcceptInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamPublishList_descriptor_, &PBC2GTeamPublishList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamKick_descriptor_, &PBC2GTeamKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamKickVote_descriptor_, &PBC2GTeamKickVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamSetAllot_descriptor_, &PBTeamSetAllot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamSetAllotVote_descriptor_, &PBTeamSetAllotVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamNearPlayerList_descriptor_, &PBTeamNearPlayerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamNearTeamList_descriptor_, &PBTeamNearTeamList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamAcceptInviteTransfer_descriptor_, &PBTeamAcceptInviteTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamAcceptApplyTransfer_descriptor_, &PBTeamAcceptApplyTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamPublishAdd_descriptor_, &PBC2GTeamPublishAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamPublishDel_descriptor_, &PBC2GTeamPublishDel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamPublishInviteTransfer_descriptor_, &PBC2GTeamPublishInviteTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamPublishAcceptInviteTransfer_descriptor_, &PBC2GTeamPublishAcceptInviteTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamPublish_descriptor_, &PBTeamPublish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTeamPublishList_descriptor_, &PBG2CTeamPublishList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamNearPlayer_descriptor_, &PBTeamNearPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamNearPlayerList_descriptor_, &PBC2GTeamNearPlayerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamNearTeamList_descriptor_, &PBC2GTeamNearTeamList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2WTeamPublishAsk_descriptor_, &PBG2WTeamPublishAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamView_descriptor_, &PBC2GTeamView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTeamInviteTransfer_descriptor_, &PBG2CTeamInviteTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTeamApplyTransfer_descriptor_, &PBG2CTeamApplyTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCallupAsk_descriptor_, &PBC2GCallupAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCallupAck_descriptor_, &PBG2CCallupAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GAcceptIdentityAsk_descriptor_, &PBC2GAcceptIdentityAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CAcceptIdentityAck_descriptor_, &PBG2CAcceptIdentityAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCheckConditionAsk_descriptor_, &PBC2GCheckConditionAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamMemberCondition_descriptor_, &PBTeamMemberCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CheckConditionAck_descriptor_, &PBG2CheckConditionAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamApplicant_descriptor_, &PBTeamApplicant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamCreateAsk_descriptor_, &PBTeamCreateAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamCreateAck_descriptor_, &PBTeamCreateAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamSetTargetAsk_descriptor_, &PBTeamSetTargetAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamSetTargetAck_descriptor_, &PBTeamSetTargetAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSetAutoAcceptAsk_descriptor_, &PBSetAutoAcceptAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSetAutoAcceptAck_descriptor_, &PBSetAutoAcceptAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSetAutoMatchAsk_descriptor_, &PBSetAutoMatchAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSetAutoMatchAck_descriptor_, &PBSetAutoMatchAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSetAutoMatchJoinAsk_descriptor_, &PBSetAutoMatchJoinAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSetAutoMatchJoinAck_descriptor_, &PBSetAutoMatchJoinAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSetAutoMatchJobLimitAsk_descriptor_, &PBSetAutoMatchJobLimitAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSetAutoMatchJobLimitAck_descriptor_, &PBSetAutoMatchJobLimitAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGetApplicantListAsk_descriptor_, &PBGetApplicantListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGetApplicantListAck_descriptor_, &PBGetApplicantListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClearApplicantListAsk_descriptor_, &PBClearApplicantListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClearApplicantListAck_descriptor_, &PBClearApplicantListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamAcceptApplyFromListAsk_descriptor_, &PBC2GTeamAcceptApplyFromListAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTeamAcceptApplyFromListAck_descriptor_, &PBTeamAcceptApplyFromListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GSearchTeamByTargetAsk_descriptor_, &PBC2GSearchTeamByTargetAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSearchTeamByTargetAck_descriptor_, &PBSearchTeamByTargetAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GApplyTeamByTargetAsk_descriptor_, &PBC2GApplyTeamByTargetAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBApplyTeamByTargetAck_descriptor_, &PBApplyTeamByTargetAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBApplyedTeamIdListNtf_descriptor_, &PBApplyedTeamIdListNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCancleApplyTeamByTargetAsk_descriptor_, &PBC2GCancleApplyTeamByTargetAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCancleApplyTeamByTargetAck_descriptor_, &PBCancleApplyTeamByTargetAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GAcceptTeamTaskAsk_descriptor_, &PBC2GAcceptTeamTaskAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CAcceptTeamTaskAck_descriptor_, &PBG2CAcceptTeamTaskAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GEnterTeamTaskCopymapAsk_descriptor_, &PBC2GEnterTeamTaskCopymapAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCompleteTeamTaskAsk_descriptor_, &PBC2GCompleteTeamTaskAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCompleteTeamTaskAck_descriptor_, &PBG2CCompleteTeamTaskAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamFollowAsk_descriptor_, &PBC2GTeamFollowAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTeamFollowAck_descriptor_, &PBG2CTeamFollowAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamRemainConfirmAsk_descriptor_, &PBC2GTeamRemainConfirmAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTeamRemainConfirmAck_descriptor_, &PBG2CTeamRemainConfirmAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTeamConfirmAsk_descriptor_, &PBC2GTeamConfirmAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTeamConfirmAck_descriptor_, &PBG2CTeamConfirmAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CBroadMsg_descriptor_, &PBG2CBroadMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CMemberHitAck_descriptor_, &PBG2CMemberHitAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Team_2eproto() {
  delete PBTeamMember::default_instance_;
  delete PBTeamMember_reflection_;
  delete PBTeamMemberSimple::default_instance_;
  delete PBTeamMemberSimple_reflection_;
  delete PBTeamTarget::default_instance_;
  delete PBTeamTarget_reflection_;
  delete PBTeamMemberJobRequire::default_instance_;
  delete PBTeamMemberJobRequire_reflection_;
  delete PBTeamTask::default_instance_;
  delete PBTeamTask_reflection_;
  delete PBTeamInfo::default_instance_;
  delete PBTeamInfo_reflection_;
  delete PBTeamInfoSimple::default_instance_;
  delete PBTeamInfoSimple_reflection_;
  delete PBC2GTeamInvite::default_instance_;
  delete PBC2GTeamInvite_reflection_;
  delete PBC2GTeamAcceptInvite::default_instance_;
  delete PBC2GTeamAcceptInvite_reflection_;
  delete PBC2GTeamApply::default_instance_;
  delete PBC2GTeamApply_reflection_;
  delete PBC2GTeamAcceptApply::default_instance_;
  delete PBC2GTeamAcceptApply_reflection_;
  delete PBC2GTeamLeave::default_instance_;
  delete PBC2GTeamLeave_reflection_;
  delete PBC2GTeamChangeLeader::default_instance_;
  delete PBC2GTeamChangeLeader_reflection_;
  delete PBC2GTeamPublishAsk::default_instance_;
  delete PBC2GTeamPublishAsk_reflection_;
  delete PBC2GTeamPublishCancel::default_instance_;
  delete PBC2GTeamPublishCancel_reflection_;
  delete PBC2GTeamPublishInvite::default_instance_;
  delete PBC2GTeamPublishInvite_reflection_;
  delete PBC2GTeamPublishAcceptInvite::default_instance_;
  delete PBC2GTeamPublishAcceptInvite_reflection_;
  delete PBC2GTeamPublishList::default_instance_;
  delete PBC2GTeamPublishList_reflection_;
  delete PBC2GTeamKick::default_instance_;
  delete PBC2GTeamKick_reflection_;
  delete PBC2GTeamKickVote::default_instance_;
  delete PBC2GTeamKickVote_reflection_;
  delete PBTeamSetAllot::default_instance_;
  delete PBTeamSetAllot_reflection_;
  delete PBTeamSetAllotVote::default_instance_;
  delete PBTeamSetAllotVote_reflection_;
  delete PBTeamNearPlayerList::default_instance_;
  delete PBTeamNearPlayerList_reflection_;
  delete PBTeamNearTeamList::default_instance_;
  delete PBTeamNearTeamList_reflection_;
  delete PBTeamAcceptInviteTransfer::default_instance_;
  delete PBTeamAcceptInviteTransfer_reflection_;
  delete PBTeamAcceptApplyTransfer::default_instance_;
  delete PBTeamAcceptApplyTransfer_reflection_;
  delete PBC2GTeamPublishAdd::default_instance_;
  delete PBC2GTeamPublishAdd_reflection_;
  delete PBC2GTeamPublishDel::default_instance_;
  delete PBC2GTeamPublishDel_reflection_;
  delete PBC2GTeamPublishInviteTransfer::default_instance_;
  delete PBC2GTeamPublishInviteTransfer_reflection_;
  delete PBC2GTeamPublishAcceptInviteTransfer::default_instance_;
  delete PBC2GTeamPublishAcceptInviteTransfer_reflection_;
  delete PBTeamPublish::default_instance_;
  delete PBTeamPublish_reflection_;
  delete PBG2CTeamPublishList::default_instance_;
  delete PBG2CTeamPublishList_reflection_;
  delete PBTeamNearPlayer::default_instance_;
  delete PBTeamNearPlayer_reflection_;
  delete PBC2GTeamNearPlayerList::default_instance_;
  delete PBC2GTeamNearPlayerList_reflection_;
  delete PBC2GTeamNearTeamList::default_instance_;
  delete PBC2GTeamNearTeamList_reflection_;
  delete PBG2WTeamPublishAsk::default_instance_;
  delete PBG2WTeamPublishAsk_reflection_;
  delete PBC2GTeamView::default_instance_;
  delete PBC2GTeamView_reflection_;
  delete PBG2CTeamInviteTransfer::default_instance_;
  delete PBG2CTeamInviteTransfer_reflection_;
  delete PBG2CTeamApplyTransfer::default_instance_;
  delete PBG2CTeamApplyTransfer_reflection_;
  delete PBC2GCallupAsk::default_instance_;
  delete PBC2GCallupAsk_reflection_;
  delete PBG2CCallupAck::default_instance_;
  delete PBG2CCallupAck_reflection_;
  delete PBC2GAcceptIdentityAsk::default_instance_;
  delete PBC2GAcceptIdentityAsk_reflection_;
  delete PBG2CAcceptIdentityAck::default_instance_;
  delete PBG2CAcceptIdentityAck_reflection_;
  delete PBC2GCheckConditionAsk::default_instance_;
  delete PBC2GCheckConditionAsk_reflection_;
  delete PBTeamMemberCondition::default_instance_;
  delete PBTeamMemberCondition_reflection_;
  delete PBG2CheckConditionAck::default_instance_;
  delete PBG2CheckConditionAck_reflection_;
  delete PBTeamApplicant::default_instance_;
  delete PBTeamApplicant_reflection_;
  delete PBTeamCreateAsk::default_instance_;
  delete PBTeamCreateAsk_reflection_;
  delete PBTeamCreateAck::default_instance_;
  delete PBTeamCreateAck_reflection_;
  delete PBTeamSetTargetAsk::default_instance_;
  delete PBTeamSetTargetAsk_reflection_;
  delete PBTeamSetTargetAck::default_instance_;
  delete PBTeamSetTargetAck_reflection_;
  delete PBSetAutoAcceptAsk::default_instance_;
  delete PBSetAutoAcceptAsk_reflection_;
  delete PBSetAutoAcceptAck::default_instance_;
  delete PBSetAutoAcceptAck_reflection_;
  delete PBSetAutoMatchAsk::default_instance_;
  delete PBSetAutoMatchAsk_reflection_;
  delete PBSetAutoMatchAck::default_instance_;
  delete PBSetAutoMatchAck_reflection_;
  delete PBSetAutoMatchJoinAsk::default_instance_;
  delete PBSetAutoMatchJoinAsk_reflection_;
  delete PBSetAutoMatchJoinAck::default_instance_;
  delete PBSetAutoMatchJoinAck_reflection_;
  delete PBSetAutoMatchJobLimitAsk::default_instance_;
  delete PBSetAutoMatchJobLimitAsk_reflection_;
  delete PBSetAutoMatchJobLimitAck::default_instance_;
  delete PBSetAutoMatchJobLimitAck_reflection_;
  delete PBGetApplicantListAsk::default_instance_;
  delete PBGetApplicantListAsk_reflection_;
  delete PBGetApplicantListAck::default_instance_;
  delete PBGetApplicantListAck_reflection_;
  delete PBClearApplicantListAsk::default_instance_;
  delete PBClearApplicantListAsk_reflection_;
  delete PBClearApplicantListAck::default_instance_;
  delete PBClearApplicantListAck_reflection_;
  delete PBC2GTeamAcceptApplyFromListAsk::default_instance_;
  delete PBC2GTeamAcceptApplyFromListAsk_reflection_;
  delete PBTeamAcceptApplyFromListAck::default_instance_;
  delete PBTeamAcceptApplyFromListAck_reflection_;
  delete PBC2GSearchTeamByTargetAsk::default_instance_;
  delete PBC2GSearchTeamByTargetAsk_reflection_;
  delete PBSearchTeamByTargetAck::default_instance_;
  delete PBSearchTeamByTargetAck_reflection_;
  delete PBC2GApplyTeamByTargetAsk::default_instance_;
  delete PBC2GApplyTeamByTargetAsk_reflection_;
  delete PBApplyTeamByTargetAck::default_instance_;
  delete PBApplyTeamByTargetAck_reflection_;
  delete PBApplyedTeamIdListNtf::default_instance_;
  delete PBApplyedTeamIdListNtf_reflection_;
  delete PBC2GCancleApplyTeamByTargetAsk::default_instance_;
  delete PBC2GCancleApplyTeamByTargetAsk_reflection_;
  delete PBCancleApplyTeamByTargetAck::default_instance_;
  delete PBCancleApplyTeamByTargetAck_reflection_;
  delete PBC2GAcceptTeamTaskAsk::default_instance_;
  delete PBC2GAcceptTeamTaskAsk_reflection_;
  delete PBG2CAcceptTeamTaskAck::default_instance_;
  delete PBG2CAcceptTeamTaskAck_reflection_;
  delete PBC2GEnterTeamTaskCopymapAsk::default_instance_;
  delete PBC2GEnterTeamTaskCopymapAsk_reflection_;
  delete PBC2GCompleteTeamTaskAsk::default_instance_;
  delete PBC2GCompleteTeamTaskAsk_reflection_;
  delete PBG2CCompleteTeamTaskAck::default_instance_;
  delete PBG2CCompleteTeamTaskAck_reflection_;
  delete PBC2GTeamFollowAsk::default_instance_;
  delete PBC2GTeamFollowAsk_reflection_;
  delete PBG2CTeamFollowAck::default_instance_;
  delete PBG2CTeamFollowAck_reflection_;
  delete PBC2GTeamRemainConfirmAsk::default_instance_;
  delete PBC2GTeamRemainConfirmAsk_reflection_;
  delete PBG2CTeamRemainConfirmAck::default_instance_;
  delete PBG2CTeamRemainConfirmAck_reflection_;
  delete PBC2GTeamConfirmAsk::default_instance_;
  delete PBC2GTeamConfirmAsk_reflection_;
  delete PBG2CTeamConfirmAck::default_instance_;
  delete PBG2CTeamConfirmAck_reflection_;
  delete PBG2CBroadMsg::default_instance_;
  delete PBG2CBroadMsg_reflection_;
  delete PBG2CMemberHitAck::default_instance_;
  delete PBG2CMemberHitAck_reflection_;
}

void protobuf_AddDesc_Team_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_AccountStruct_2eproto();
  ::protobuf_AddDesc_PlayerStruct_2eproto();
  ::protobuf_AddDesc_GameStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nTeam.proto\032\023AccountStruct.proto\032\022Playe"
    "rStruct.proto\032\020GameStruct.proto\"\315\001\n\014PBTe"
    "amMember\022\037\n\006avatar\030\001 \001(\0132\017.PBPlayerAvata"
    "r\022\022\n\nfightpower\030\002 \001(\r\022\016\n\006online\030\003 \001(\010\022\014\n"
    "\004time\030\004 \001(\r\022\017\n\007sceneid\030\005 \001(\r\022\016\n\006cellid\030\006"
    " \001(\r\022\014\n\004mark\030\007 \001(\r\022\022\n\ncalluptime\030\010 \001(\r\022\r"
    "\n\005level\030\t \001(\r\022\030\n\020teamconfirmstate\030\n \001(\r\""
    "0\n\022PBTeamMemberSimple\022\r\n\005level\030\001 \001(\r\022\013\n\003"
    "job\030\002 \001(\r\"\243\001\n\014PBTeamTarget\022\020\n\010targetid\030\001"
    " \001(\r\022\022\n\ndifficulty\030\002 \001(\r\022\020\n\010levelmin\030\003 \001"
    "(\r\022\020\n\010levelmax\030\004 \001(\r\022\020\n\010activeid\030\005 \001(\r\022\023"
    "\n\013isautomatch\030\006 \001(\010\022\024\n\014isautoaccept\030\007 \001("
    "\010\022\014\n\004cash\030\010 \001(\r\"=\n\026PBTeamMemberJobRequir"
    "e\022\017\n\007postion\030\001 \001(\r\022\022\n\njobrequire\030\002 \003(\r\"I"
    "\n\nPBTeamTask\022\n\n\002id\030\001 \001(\r\022\021\n\tcopymapid\030\002 "
    "\001(\r\022\r\n\005npcid\030\003 \001(\r\022\r\n\005state\030\004 \001(\r\"\312\001\n\nPB"
    "TeamInfo\022\016\n\006teamid\030\001 \001(\004\022\021\n\tlearderid\030\002 "
    "\001(\r\022\021\n\tallottype\030\003 \001(\r\022\035\n\006member\030\004 \003(\0132\r"
    ".PBTeamMember\022!\n\nteamtarget\030\005 \001(\0132\r.PBTe"
    "amTarget\022%\n\004jobs\030\006 \003(\0132\027.PBTeamMemberJob"
    "Require\022\035\n\010teamtask\030\007 \001(\0132\013.PBTeamTask\"\301"
    "\002\n\020PBTeamInfoSimple\022\016\n\006teamid\030\001 \001(\004\022\026\n\016l"
    "eaderplayerid\030\002 \001(\r\022\022\n\nleadername\030\003 \001(\t\022"
    "\025\n\rleadersceneid\030\004 \001(\r\022\021\n\tleaderjob\030\005 \001("
    "\r\022#\n\006member\030\006 \003(\0132\023.PBTeamMemberSimple\022!"
    "\n\nteamtarget\030\007 \001(\0132\r.PBTeamTarget\022\033\n\023lea"
    "derfactionbanner\030\010 \001(\t\022\031\n\021averagefightpo"
    "wer\030\t \001(\r\022\023\n\013leaderlevel\030\n \001(\r\022\031\n\021leader"
    "factionname\030\013 \001(\t\022\027\n\017leaderfactionid\030\014 \001"
    "(\r\"#\n\017PBC2GTeamInvite\022\020\n\010playerid\030\001 \001(\r\""
    "9\n\025PBC2GTeamAcceptInvite\022\020\n\010playerid\030\001 \001"
    "(\r\022\016\n\006accept\030\002 \001(\010\"\"\n\016PBC2GTeamApply\022\020\n\010"
    "playerid\030\001 \001(\r\"8\n\024PBC2GTeamAcceptApply\022\020"
    "\n\010playerid\030\001 \001(\r\022\016\n\006accept\030\002 \001(\010\"\020\n\016PBC2"
    "GTeamLeave\")\n\025PBC2GTeamChangeLeader\022\020\n\010p"
    "layerid\030\001 \001(\r\"5\n\023PBC2GTeamPublishAsk\022\021\n\t"
    "copymapid\030\001 \001(\r\022\013\n\003msg\030\002 \001(\t\"+\n\026PBC2GTea"
    "mPublishCancel\022\021\n\tcopymapid\030\001 \001(\r\"=\n\026PBC"
    "2GTeamPublishInvite\022\021\n\tcopymapid\030\001 \001(\r\022\020"
    "\n\010playerid\030\002 \001(\r\"S\n\034PBC2GTeamPublishAcce"
    "ptInvite\022\021\n\tcopymapid\030\001 \001(\r\022\020\n\010playerid\030"
    "\002 \001(\r\022\016\n\006accept\030\003 \001(\010\"K\n\024PBC2GTeamPublis"
    "hList\022\021\n\tcopymapid\030\001 \001(\r\022\020\n\010beginidx\030\002 \001"
    "(\r\022\016\n\006endidx\030\003 \001(\r\"!\n\rPBC2GTeamKick\022\020\n\010p"
    "layerid\030\001 \001(\r\"4\n\021PBC2GTeamKickVote\022\020\n\010pl"
    "ayerid\030\001 \001(\r\022\r\n\005agree\030\002 \001(\010\"\036\n\016PBTeamSet"
    "Allot\022\014\n\004type\030\001 \001(\r\"1\n\022PBTeamSetAllotVot"
    "e\022\014\n\004type\030\001 \001(\r\022\r\n\005agree\030\002 \001(\010\"8\n\024PBTeam"
    "NearPlayerList\022\020\n\010beginidx\030\001 \001(\r\022\016\n\006endi"
    "dx\030\002 \001(\r\"6\n\022PBTeamNearTeamList\022\020\n\010begini"
    "dx\030\001 \001(\r\022\016\n\006endidx\030\002 \001(\r\"O\n\032PBTeamAccept"
    "InviteTransfer\022!\n\007display\030\001 \001(\0132\020.PBPlay"
    "erDisplay\022\016\n\006accept\030\002 \001(\010\"N\n\031PBTeamAccep"
    "tApplyTransfer\022!\n\007display\030\001 \001(\0132\020.PBPlay"
    "erDisplay\022\016\n\006accept\030\002 \001(\010\"C\n\023PBC2GTeamPu"
    "blishAdd\022\021\n\tcopymapid\030\001 \001(\r\022\014\n\004time\030\002 \001("
    "\r\022\013\n\003msg\030\003 \001(\t\"8\n\023PBC2GTeamPublishDel\022\021\n"
    "\tcopymapid\030\001 \001(\r\022\016\n\006reason\030\002 \001(\r\"j\n\036PBC2"
    "GTeamPublishInviteTransfer\022\021\n\tcopymapid\030"
    "\001 \001(\r\022!\n\007display\030\002 \001(\0132\020.PBPlayerDisplay"
    "\022\022\n\nfightpower\030\003 \001(\r\"l\n$PBC2GTeamPublish"
    "AcceptInviteTransfer\022\021\n\tcopymapid\030\001 \001(\r\022"
    "!\n\007display\030\002 \001(\0132\020.PBPlayerDisplay\022\016\n\006ac"
    "cept\030\003 \001(\010\"w\n\rPBTeamPublish\022!\n\007display\030\001"
    " \001(\0132\020.PBPlayerDisplay\022\022\n\nfightpower\030\002 \001"
    "(\r\022\024\n\014compeletenum\030\003 \001(\r\022\013\n\003msg\030\004 \001(\t\022\014\n"
    "\004time\030\005 \001(\r\"~\n\024PBG2CTeamPublishList\022\021\n\tc"
    "opymapid\030\001 \001(\r\022\020\n\010beginidx\030\002 \001(\r\022\016\n\006endi"
    "dx\030\003 \001(\r\022\020\n\010allcount\030\004 \001(\r\022\037\n\007publish\030\005 "
    "\003(\0132\016.PBTeamPublish\"Y\n\020PBTeamNearPlayer\022"
    "!\n\007display\030\001 \001(\0132\020.PBPlayerDisplay\022\022\n\nfi"
    "ghtpower\030\002 \001(\r\022\016\n\006teamid\030\003 \001(\004\"p\n\027PBC2GT"
    "eamNearPlayerList\022\020\n\010beginidx\030\001 \001(\r\022\016\n\006e"
    "ndidx\030\002 \001(\r\022\020\n\010allcount\030\003 \001(\r\022!\n\006player\030"
    "\004 \003(\0132\021.PBTeamNearPlayer\"f\n\025PBC2GTeamNea"
    "rTeamList\022\020\n\010beginidx\030\001 \001(\r\022\016\n\006endidx\030\002 "
    "\001(\r\022\020\n\010allcount\030\003 \001(\r\022\031\n\004team\030\004 \003(\0132\013.PB"
    "TeamInfo\"Q\n\023PBG2WTeamPublishAsk\022\'\n\tclien"
    "tmsg\030\001 \001(\0132\024.PBC2GTeamPublishAsk\022\021\n\tdone"
    "count\030\002 \001(\r\"!\n\rPBC2GTeamView\022\020\n\010playerid"
    "\030\001 \001(\r\"f\n\027PBG2CTeamInviteTransfer\022!\n\007dis"
    "play\030\001 \001(\0132\020.PBPlayerDisplay\022\022\n\nfightpow"
    "er\030\002 \001(\r\022\024\n\014teamTargetID\030\003 \001(\r\"O\n\026PBG2CT"
    "eamApplyTransfer\022!\n\007display\030\001 \001(\0132\020.PBPl"
    "ayerDisplay\022\022\n\nfightpower\030\002 \001(\r\"\"\n\016PBC2G"
    "CallupAsk\022\020\n\010playerid\030\001 \001(\r\"\"\n\016PBG2CCall"
    "upAck\022\020\n\010playerid\030\001 \001(\r\"7\n\026PBC2GAcceptId"
    "entityAsk\022\n\n\002id\030\001 \001(\r\022\021\n\tnpcunitid\030\002 \001(\r"
    "\"7\n\026PBG2CAcceptIdentityAck\022\n\n\002id\030\001 \001(\r\022\021"
    "\n\tnpcunitid\030\002 \001(\r\"7\n\026PBC2GCheckCondition"
    "Ask\022\n\n\002id\030\001 \001(\r\022\021\n\tnpcunitid\030\002 \001(\r\"\242\001\n\025P"
    "BTeamMemberCondition\022\020\n\010playerid\030\001 \001(\r\022\033"
    "\n\007itemnum\030\002 \001(\0132\n.PBItemNum\022\022\n\nentercoun"
    "t\030\003 \001(\r\022\r\n\005level\030\004 \001(\r\022\020\n\010isnonear\030\005 \001(\010"
    "\022\021\n\tisneedPre\030\006 \001(\010\022\022\n\nishavetask\030\007 \001(\010\""
    "N\n\025PBG2CheckConditionAck\022\n\n\002id\030\001 \001(\r\022)\n\t"
    "condition\030\002 \003(\0132\026.PBTeamMemberCondition\""
    "\237\001\n\017PBTeamApplicant\022\020\n\010playerid\030\001 \001(\r\022\014\n"
    "\004name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\013\n\003job\030\004 \001(\r\022"
    "\022\n\nfightpower\030\005 \001(\r\022\024\n\014relationship\030\006 \001("
    "\r\022\023\n\013factionname\030\007 \001(\t\022\021\n\tfactionid\030\010 \001("
    "\r\"0\n\017PBTeamCreateAsk\022\035\n\006target\030\001 \001(\0132\r.P"
    "BTeamTarget\",\n\017PBTeamCreateAck\022\031\n\004team\030\001"
    " \001(\0132\013.PBTeamInfo\"3\n\022PBTeamSetTargetAsk\022"
    "\035\n\006target\030\001 \001(\0132\r.PBTeamTarget\"3\n\022PBTeam"
    "SetTargetAck\022\035\n\006target\030\001 \001(\0132\r.PBTeamTar"
    "get\"$\n\022PBSetAutoAcceptAsk\022\016\n\006isopen\030\001 \001("
    "\010\"$\n\022PBSetAutoAcceptAck\022\016\n\006isopen\030\001 \001(\010\""
    "#\n\021PBSetAutoMatchAsk\022\016\n\006isopen\030\001 \001(\010\"#\n\021"
    "PBSetAutoMatchAck\022\016\n\006isopen\030\001 \001(\010\"9\n\025PBS"
    "etAutoMatchJoinAsk\022\016\n\006isopen\030\001 \001(\010\022\020\n\010ta"
    "rgetid\030\002 \001(\r\"9\n\025PBSetAutoMatchJoinAck\022\016\n"
    "\006isopen\030\001 \001(\010\022\020\n\010targetid\030\002 \001(\r\"B\n\031PBSet"
    "AutoMatchJobLimitAsk\022%\n\004jobs\030\001 \001(\0132\027.PBT"
    "eamMemberJobRequire\"B\n\031PBSetAutoMatchJob"
    "LimitAck\022%\n\004jobs\030\001 \003(\0132\027.PBTeamMemberJob"
    "Require\"\027\n\025PBGetApplicantListAsk\"=\n\025PBGe"
    "tApplicantListAck\022$\n\napplicants\030\001 \003(\0132\020."
    "PBTeamApplicant\"\031\n\027PBClearApplicantListA"
    "sk\"\031\n\027PBClearApplicantListAck\"3\n\037PBC2GTe"
    "amAcceptApplyFromListAsk\022\020\n\010playerid\030\001 \001"
    "(\r\"0\n\034PBTeamAcceptApplyFromListAck\022\020\n\010pl"
    "ayerid\030\001 \001(\r\"J\n\032PBC2GSearchTeamByTargetA"
    "sk\022\035\n\006target\030\001 \001(\0132\r.PBTeamTarget\022\r\n\005ind"
    "ex\030\002 \001(\r\"i\n\027PBSearchTeamByTargetAck\022\035\n\006t"
    "arget\030\001 \001(\0132\r.PBTeamTarget\022 \n\005teams\030\002 \003("
    "\0132\021.PBTeamInfoSimple\022\r\n\005index\030\003 \001(\r\"+\n\031P"
    "BC2GApplyTeamByTargetAsk\022\016\n\006teamid\030\001 \001(\004"
    "\"\030\n\026PBApplyTeamByTargetAck\")\n\026PBApplyedT"
    "eamIdListNtf\022\017\n\007teamids\030\001 \003(\004\"1\n\037PBC2GCa"
    "ncleApplyTeamByTargetAsk\022\016\n\006teamid\030\001 \001(\004"
    "\"\036\n\034PBCancleApplyTeamByTargetAck\"7\n\026PBC2"
    "GAcceptTeamTaskAsk\022\n\n\002id\030\001 \001(\r\022\021\n\tnpcuni"
    "tid\030\002 \001(\r\"7\n\026PBG2CAcceptTeamTaskAck\022\035\n\010t"
    "eamtask\030\001 \001(\0132\013.PBTeamTask\"1\n\034PBC2GEnter"
    "TeamTaskCopymapAsk\022\021\n\tnpcunitid\030\001 \001(\r\"-\n"
    "\030PBC2GCompleteTeamTaskAsk\022\021\n\tnpcunitid\030\001"
    " \001(\r\"r\n\030PBG2CCompleteTeamTaskAck\022\034\n\006expe"
    "nd\030\001 \003(\0132\014.PBExpendNum\022\030\n\004item\030\002 \003(\0132\n.P"
    "BItemNum\022\036\n\nleaderitem\030\003 \003(\0132\n.PBItemNum"
    "\"&\n\022PBC2GTeamFollowAsk\022\020\n\010isfollow\030\001 \001(\010"
    "\"8\n\022PBG2CTeamFollowAck\022\020\n\010playerid\030\001 \001(\r"
    "\022\020\n\010isfollow\030\002 \001(\010\"5\n\031PBC2GTeamRemainCon"
    "firmAsk\022\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\"5\n\031PBG"
    "2CTeamRemainConfirmAck\022\014\n\004type\030\001 \001(\r\022\n\n\002"
    "id\030\002 \001(\r\"B\n\023PBC2GTeamConfirmAsk\022\021\n\tiscon"
    "firm\030\001 \001(\010\022\014\n\004type\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\":\n\023"
    "PBG2CTeamConfirmAck\022\020\n\010playerid\030\001 \001(\r\022\021\n"
    "\tisconfirm\030\002 \001(\010\"\"\n\rPBG2CBroadMsg\022\021\n\tisc"
    "onfirm\030\001 \001(\010\">\n\021PBG2CMemberHitAck\022)\n\tcon"
    "dition\030\001 \001(\0132\026.PBTeamMemberCondition*\203\001\n"
    "\023_emTeamConfirmState\022\031\n\025TeamConfirmState"
    "_None\020\000\022\030\n\024TeamConfirmState_Ing\020\001\022\032\n\026Tea"
    "mConfirmState_Agree\020\002\022\033\n\027TeamConfirmStat"
    "e_Refuse\020\003*_\n\020_emTeamTaskState\022\026\n\022TeamTa"
    "skState_None\020\000\022\027\n\023TeamTaskState_Start\020\001\022"
    "\032\n\026TeamTaskState_Complete\020\002*\204\001\n\030_em_Team"
    "PublishDelReason\022%\n!TeamPublishDelReason"
    "_CopymapCount\020\000\022 \n\034TeamPublishDelReason_"
    "OffLine\020\001\022\037\n\033TeamPublishDelReason_Manual"
    "\020\002", 6402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Team.proto", &protobuf_RegisterTypes);
  PBTeamMember::default_instance_ = new PBTeamMember();
  PBTeamMemberSimple::default_instance_ = new PBTeamMemberSimple();
  PBTeamTarget::default_instance_ = new PBTeamTarget();
  PBTeamMemberJobRequire::default_instance_ = new PBTeamMemberJobRequire();
  PBTeamTask::default_instance_ = new PBTeamTask();
  PBTeamInfo::default_instance_ = new PBTeamInfo();
  PBTeamInfoSimple::default_instance_ = new PBTeamInfoSimple();
  PBC2GTeamInvite::default_instance_ = new PBC2GTeamInvite();
  PBC2GTeamAcceptInvite::default_instance_ = new PBC2GTeamAcceptInvite();
  PBC2GTeamApply::default_instance_ = new PBC2GTeamApply();
  PBC2GTeamAcceptApply::default_instance_ = new PBC2GTeamAcceptApply();
  PBC2GTeamLeave::default_instance_ = new PBC2GTeamLeave();
  PBC2GTeamChangeLeader::default_instance_ = new PBC2GTeamChangeLeader();
  PBC2GTeamPublishAsk::default_instance_ = new PBC2GTeamPublishAsk();
  PBC2GTeamPublishCancel::default_instance_ = new PBC2GTeamPublishCancel();
  PBC2GTeamPublishInvite::default_instance_ = new PBC2GTeamPublishInvite();
  PBC2GTeamPublishAcceptInvite::default_instance_ = new PBC2GTeamPublishAcceptInvite();
  PBC2GTeamPublishList::default_instance_ = new PBC2GTeamPublishList();
  PBC2GTeamKick::default_instance_ = new PBC2GTeamKick();
  PBC2GTeamKickVote::default_instance_ = new PBC2GTeamKickVote();
  PBTeamSetAllot::default_instance_ = new PBTeamSetAllot();
  PBTeamSetAllotVote::default_instance_ = new PBTeamSetAllotVote();
  PBTeamNearPlayerList::default_instance_ = new PBTeamNearPlayerList();
  PBTeamNearTeamList::default_instance_ = new PBTeamNearTeamList();
  PBTeamAcceptInviteTransfer::default_instance_ = new PBTeamAcceptInviteTransfer();
  PBTeamAcceptApplyTransfer::default_instance_ = new PBTeamAcceptApplyTransfer();
  PBC2GTeamPublishAdd::default_instance_ = new PBC2GTeamPublishAdd();
  PBC2GTeamPublishDel::default_instance_ = new PBC2GTeamPublishDel();
  PBC2GTeamPublishInviteTransfer::default_instance_ = new PBC2GTeamPublishInviteTransfer();
  PBC2GTeamPublishAcceptInviteTransfer::default_instance_ = new PBC2GTeamPublishAcceptInviteTransfer();
  PBTeamPublish::default_instance_ = new PBTeamPublish();
  PBG2CTeamPublishList::default_instance_ = new PBG2CTeamPublishList();
  PBTeamNearPlayer::default_instance_ = new PBTeamNearPlayer();
  PBC2GTeamNearPlayerList::default_instance_ = new PBC2GTeamNearPlayerList();
  PBC2GTeamNearTeamList::default_instance_ = new PBC2GTeamNearTeamList();
  PBG2WTeamPublishAsk::default_instance_ = new PBG2WTeamPublishAsk();
  PBC2GTeamView::default_instance_ = new PBC2GTeamView();
  PBG2CTeamInviteTransfer::default_instance_ = new PBG2CTeamInviteTransfer();
  PBG2CTeamApplyTransfer::default_instance_ = new PBG2CTeamApplyTransfer();
  PBC2GCallupAsk::default_instance_ = new PBC2GCallupAsk();
  PBG2CCallupAck::default_instance_ = new PBG2CCallupAck();
  PBC2GAcceptIdentityAsk::default_instance_ = new PBC2GAcceptIdentityAsk();
  PBG2CAcceptIdentityAck::default_instance_ = new PBG2CAcceptIdentityAck();
  PBC2GCheckConditionAsk::default_instance_ = new PBC2GCheckConditionAsk();
  PBTeamMemberCondition::default_instance_ = new PBTeamMemberCondition();
  PBG2CheckConditionAck::default_instance_ = new PBG2CheckConditionAck();
  PBTeamApplicant::default_instance_ = new PBTeamApplicant();
  PBTeamCreateAsk::default_instance_ = new PBTeamCreateAsk();
  PBTeamCreateAck::default_instance_ = new PBTeamCreateAck();
  PBTeamSetTargetAsk::default_instance_ = new PBTeamSetTargetAsk();
  PBTeamSetTargetAck::default_instance_ = new PBTeamSetTargetAck();
  PBSetAutoAcceptAsk::default_instance_ = new PBSetAutoAcceptAsk();
  PBSetAutoAcceptAck::default_instance_ = new PBSetAutoAcceptAck();
  PBSetAutoMatchAsk::default_instance_ = new PBSetAutoMatchAsk();
  PBSetAutoMatchAck::default_instance_ = new PBSetAutoMatchAck();
  PBSetAutoMatchJoinAsk::default_instance_ = new PBSetAutoMatchJoinAsk();
  PBSetAutoMatchJoinAck::default_instance_ = new PBSetAutoMatchJoinAck();
  PBSetAutoMatchJobLimitAsk::default_instance_ = new PBSetAutoMatchJobLimitAsk();
  PBSetAutoMatchJobLimitAck::default_instance_ = new PBSetAutoMatchJobLimitAck();
  PBGetApplicantListAsk::default_instance_ = new PBGetApplicantListAsk();
  PBGetApplicantListAck::default_instance_ = new PBGetApplicantListAck();
  PBClearApplicantListAsk::default_instance_ = new PBClearApplicantListAsk();
  PBClearApplicantListAck::default_instance_ = new PBClearApplicantListAck();
  PBC2GTeamAcceptApplyFromListAsk::default_instance_ = new PBC2GTeamAcceptApplyFromListAsk();
  PBTeamAcceptApplyFromListAck::default_instance_ = new PBTeamAcceptApplyFromListAck();
  PBC2GSearchTeamByTargetAsk::default_instance_ = new PBC2GSearchTeamByTargetAsk();
  PBSearchTeamByTargetAck::default_instance_ = new PBSearchTeamByTargetAck();
  PBC2GApplyTeamByTargetAsk::default_instance_ = new PBC2GApplyTeamByTargetAsk();
  PBApplyTeamByTargetAck::default_instance_ = new PBApplyTeamByTargetAck();
  PBApplyedTeamIdListNtf::default_instance_ = new PBApplyedTeamIdListNtf();
  PBC2GCancleApplyTeamByTargetAsk::default_instance_ = new PBC2GCancleApplyTeamByTargetAsk();
  PBCancleApplyTeamByTargetAck::default_instance_ = new PBCancleApplyTeamByTargetAck();
  PBC2GAcceptTeamTaskAsk::default_instance_ = new PBC2GAcceptTeamTaskAsk();
  PBG2CAcceptTeamTaskAck::default_instance_ = new PBG2CAcceptTeamTaskAck();
  PBC2GEnterTeamTaskCopymapAsk::default_instance_ = new PBC2GEnterTeamTaskCopymapAsk();
  PBC2GCompleteTeamTaskAsk::default_instance_ = new PBC2GCompleteTeamTaskAsk();
  PBG2CCompleteTeamTaskAck::default_instance_ = new PBG2CCompleteTeamTaskAck();
  PBC2GTeamFollowAsk::default_instance_ = new PBC2GTeamFollowAsk();
  PBG2CTeamFollowAck::default_instance_ = new PBG2CTeamFollowAck();
  PBC2GTeamRemainConfirmAsk::default_instance_ = new PBC2GTeamRemainConfirmAsk();
  PBG2CTeamRemainConfirmAck::default_instance_ = new PBG2CTeamRemainConfirmAck();
  PBC2GTeamConfirmAsk::default_instance_ = new PBC2GTeamConfirmAsk();
  PBG2CTeamConfirmAck::default_instance_ = new PBG2CTeamConfirmAck();
  PBG2CBroadMsg::default_instance_ = new PBG2CBroadMsg();
  PBG2CMemberHitAck::default_instance_ = new PBG2CMemberHitAck();
  PBTeamMember::default_instance_->InitAsDefaultInstance();
  PBTeamMemberSimple::default_instance_->InitAsDefaultInstance();
  PBTeamTarget::default_instance_->InitAsDefaultInstance();
  PBTeamMemberJobRequire::default_instance_->InitAsDefaultInstance();
  PBTeamTask::default_instance_->InitAsDefaultInstance();
  PBTeamInfo::default_instance_->InitAsDefaultInstance();
  PBTeamInfoSimple::default_instance_->InitAsDefaultInstance();
  PBC2GTeamInvite::default_instance_->InitAsDefaultInstance();
  PBC2GTeamAcceptInvite::default_instance_->InitAsDefaultInstance();
  PBC2GTeamApply::default_instance_->InitAsDefaultInstance();
  PBC2GTeamAcceptApply::default_instance_->InitAsDefaultInstance();
  PBC2GTeamLeave::default_instance_->InitAsDefaultInstance();
  PBC2GTeamChangeLeader::default_instance_->InitAsDefaultInstance();
  PBC2GTeamPublishAsk::default_instance_->InitAsDefaultInstance();
  PBC2GTeamPublishCancel::default_instance_->InitAsDefaultInstance();
  PBC2GTeamPublishInvite::default_instance_->InitAsDefaultInstance();
  PBC2GTeamPublishAcceptInvite::default_instance_->InitAsDefaultInstance();
  PBC2GTeamPublishList::default_instance_->InitAsDefaultInstance();
  PBC2GTeamKick::default_instance_->InitAsDefaultInstance();
  PBC2GTeamKickVote::default_instance_->InitAsDefaultInstance();
  PBTeamSetAllot::default_instance_->InitAsDefaultInstance();
  PBTeamSetAllotVote::default_instance_->InitAsDefaultInstance();
  PBTeamNearPlayerList::default_instance_->InitAsDefaultInstance();
  PBTeamNearTeamList::default_instance_->InitAsDefaultInstance();
  PBTeamAcceptInviteTransfer::default_instance_->InitAsDefaultInstance();
  PBTeamAcceptApplyTransfer::default_instance_->InitAsDefaultInstance();
  PBC2GTeamPublishAdd::default_instance_->InitAsDefaultInstance();
  PBC2GTeamPublishDel::default_instance_->InitAsDefaultInstance();
  PBC2GTeamPublishInviteTransfer::default_instance_->InitAsDefaultInstance();
  PBC2GTeamPublishAcceptInviteTransfer::default_instance_->InitAsDefaultInstance();
  PBTeamPublish::default_instance_->InitAsDefaultInstance();
  PBG2CTeamPublishList::default_instance_->InitAsDefaultInstance();
  PBTeamNearPlayer::default_instance_->InitAsDefaultInstance();
  PBC2GTeamNearPlayerList::default_instance_->InitAsDefaultInstance();
  PBC2GTeamNearTeamList::default_instance_->InitAsDefaultInstance();
  PBG2WTeamPublishAsk::default_instance_->InitAsDefaultInstance();
  PBC2GTeamView::default_instance_->InitAsDefaultInstance();
  PBG2CTeamInviteTransfer::default_instance_->InitAsDefaultInstance();
  PBG2CTeamApplyTransfer::default_instance_->InitAsDefaultInstance();
  PBC2GCallupAsk::default_instance_->InitAsDefaultInstance();
  PBG2CCallupAck::default_instance_->InitAsDefaultInstance();
  PBC2GAcceptIdentityAsk::default_instance_->InitAsDefaultInstance();
  PBG2CAcceptIdentityAck::default_instance_->InitAsDefaultInstance();
  PBC2GCheckConditionAsk::default_instance_->InitAsDefaultInstance();
  PBTeamMemberCondition::default_instance_->InitAsDefaultInstance();
  PBG2CheckConditionAck::default_instance_->InitAsDefaultInstance();
  PBTeamApplicant::default_instance_->InitAsDefaultInstance();
  PBTeamCreateAsk::default_instance_->InitAsDefaultInstance();
  PBTeamCreateAck::default_instance_->InitAsDefaultInstance();
  PBTeamSetTargetAsk::default_instance_->InitAsDefaultInstance();
  PBTeamSetTargetAck::default_instance_->InitAsDefaultInstance();
  PBSetAutoAcceptAsk::default_instance_->InitAsDefaultInstance();
  PBSetAutoAcceptAck::default_instance_->InitAsDefaultInstance();
  PBSetAutoMatchAsk::default_instance_->InitAsDefaultInstance();
  PBSetAutoMatchAck::default_instance_->InitAsDefaultInstance();
  PBSetAutoMatchJoinAsk::default_instance_->InitAsDefaultInstance();
  PBSetAutoMatchJoinAck::default_instance_->InitAsDefaultInstance();
  PBSetAutoMatchJobLimitAsk::default_instance_->InitAsDefaultInstance();
  PBSetAutoMatchJobLimitAck::default_instance_->InitAsDefaultInstance();
  PBGetApplicantListAsk::default_instance_->InitAsDefaultInstance();
  PBGetApplicantListAck::default_instance_->InitAsDefaultInstance();
  PBClearApplicantListAsk::default_instance_->InitAsDefaultInstance();
  PBClearApplicantListAck::default_instance_->InitAsDefaultInstance();
  PBC2GTeamAcceptApplyFromListAsk::default_instance_->InitAsDefaultInstance();
  PBTeamAcceptApplyFromListAck::default_instance_->InitAsDefaultInstance();
  PBC2GSearchTeamByTargetAsk::default_instance_->InitAsDefaultInstance();
  PBSearchTeamByTargetAck::default_instance_->InitAsDefaultInstance();
  PBC2GApplyTeamByTargetAsk::default_instance_->InitAsDefaultInstance();
  PBApplyTeamByTargetAck::default_instance_->InitAsDefaultInstance();
  PBApplyedTeamIdListNtf::default_instance_->InitAsDefaultInstance();
  PBC2GCancleApplyTeamByTargetAsk::default_instance_->InitAsDefaultInstance();
  PBCancleApplyTeamByTargetAck::default_instance_->InitAsDefaultInstance();
  PBC2GAcceptTeamTaskAsk::default_instance_->InitAsDefaultInstance();
  PBG2CAcceptTeamTaskAck::default_instance_->InitAsDefaultInstance();
  PBC2GEnterTeamTaskCopymapAsk::default_instance_->InitAsDefaultInstance();
  PBC2GCompleteTeamTaskAsk::default_instance_->InitAsDefaultInstance();
  PBG2CCompleteTeamTaskAck::default_instance_->InitAsDefaultInstance();
  PBC2GTeamFollowAsk::default_instance_->InitAsDefaultInstance();
  PBG2CTeamFollowAck::default_instance_->InitAsDefaultInstance();
  PBC2GTeamRemainConfirmAsk::default_instance_->InitAsDefaultInstance();
  PBG2CTeamRemainConfirmAck::default_instance_->InitAsDefaultInstance();
  PBC2GTeamConfirmAsk::default_instance_->InitAsDefaultInstance();
  PBG2CTeamConfirmAck::default_instance_->InitAsDefaultInstance();
  PBG2CBroadMsg::default_instance_->InitAsDefaultInstance();
  PBG2CMemberHitAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Team_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Team_2eproto {
  StaticDescriptorInitializer_Team_2eproto() {
    protobuf_AddDesc_Team_2eproto();
  }
} static_descriptor_initializer_Team_2eproto_;

const ::google::protobuf::EnumDescriptor* _emTeamConfirmState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTeamConfirmState_descriptor_;
}
bool _emTeamConfirmState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emTeamTaskState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emTeamTaskState_descriptor_;
}
bool _emTeamTaskState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _em_TeamPublishDelReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _em_TeamPublishDelReason_descriptor_;
}
bool _em_TeamPublishDelReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamMember::kAvatarFieldNumber;
const int PBTeamMember::kFightpowerFieldNumber;
const int PBTeamMember::kOnlineFieldNumber;
const int PBTeamMember::kTimeFieldNumber;
const int PBTeamMember::kSceneidFieldNumber;
const int PBTeamMember::kCellidFieldNumber;
const int PBTeamMember::kMarkFieldNumber;
const int PBTeamMember::kCalluptimeFieldNumber;
const int PBTeamMember::kLevelFieldNumber;
const int PBTeamMember::kTeamconfirmstateFieldNumber;
#endif  // !_MSC_VER

PBTeamMember::PBTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamMember::InitAsDefaultInstance() {
  avatar_ = const_cast< ::PBPlayerAvatar*>(&::PBPlayerAvatar::default_instance());
}

PBTeamMember::PBTeamMember(const PBTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamMember::SharedCtor() {
  _cached_size_ = 0;
  avatar_ = NULL;
  fightpower_ = 0u;
  online_ = false;
  time_ = 0u;
  sceneid_ = 0u;
  cellid_ = 0u;
  mark_ = 0u;
  calluptime_ = 0u;
  level_ = 0u;
  teamconfirmstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamMember::~PBTeamMember() {
  SharedDtor();
}

void PBTeamMember::SharedDtor() {
  if (this != default_instance_) {
    delete avatar_;
  }
}

void PBTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamMember_descriptor_;
}

const PBTeamMember& PBTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamMember* PBTeamMember::default_instance_ = NULL;

PBTeamMember* PBTeamMember::New() const {
  return new PBTeamMember;
}

void PBTeamMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::PBPlayerAvatar::Clear();
    }
    fightpower_ = 0u;
    online_ = false;
    time_ = 0u;
    sceneid_ = 0u;
    cellid_ = 0u;
    mark_ = 0u;
    calluptime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0u;
    teamconfirmstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerAvatar avatar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_online;
        break;
      }
      
      // optional bool online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sceneid;
        break;
      }
      
      // optional uint32 sceneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cellid;
        break;
      }
      
      // optional uint32 cellid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mark;
        break;
      }
      
      // optional uint32 mark = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_calluptime;
        break;
      }
      
      // optional uint32 calluptime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calluptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calluptime_)));
          set_has_calluptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_teamconfirmstate;
        break;
      }
      
      // optional uint32 teamconfirmstate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamconfirmstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamconfirmstate_)));
          set_has_teamconfirmstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerAvatar avatar = 1;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->avatar(), output);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fightpower(), output);
  }
  
  // optional bool online = 3;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }
  
  // optional uint32 sceneid = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneid(), output);
  }
  
  // optional uint32 cellid = 6;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cellid(), output);
  }
  
  // optional uint32 mark = 7;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mark(), output);
  }
  
  // optional uint32 calluptime = 8;
  if (has_calluptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->calluptime(), output);
  }
  
  // optional uint32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->level(), output);
  }
  
  // optional uint32 teamconfirmstate = 10;
  if (has_teamconfirmstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->teamconfirmstate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerAvatar avatar = 1;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->avatar(), target);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fightpower(), target);
  }
  
  // optional bool online = 3;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->online(), target);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }
  
  // optional uint32 sceneid = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneid(), target);
  }
  
  // optional uint32 cellid = 6;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cellid(), target);
  }
  
  // optional uint32 mark = 7;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mark(), target);
  }
  
  // optional uint32 calluptime = 8;
  if (has_calluptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->calluptime(), target);
  }
  
  // optional uint32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->level(), target);
  }
  
  // optional uint32 teamconfirmstate = 10;
  if (has_teamconfirmstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->teamconfirmstate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerAvatar avatar = 1;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }
    
    // optional uint32 fightpower = 2;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
    // optional bool online = 3;
    if (has_online()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // optional uint32 sceneid = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 cellid = 6;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }
    
    // optional uint32 mark = 7;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mark());
    }
    
    // optional uint32 calluptime = 8;
    if (has_calluptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calluptime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 teamconfirmstate = 10;
    if (has_teamconfirmstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamconfirmstate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamMember::MergeFrom(const PBTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar()) {
      mutable_avatar()->::PBPlayerAvatar::MergeFrom(from.avatar());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_mark()) {
      set_mark(from.mark());
    }
    if (from.has_calluptime()) {
      set_calluptime(from.calluptime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_teamconfirmstate()) {
      set_teamconfirmstate(from.teamconfirmstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamMember::CopyFrom(const PBTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamMember::IsInitialized() const {
  
  return true;
}

void PBTeamMember::Swap(PBTeamMember* other) {
  if (other != this) {
    std::swap(avatar_, other->avatar_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(online_, other->online_);
    std::swap(time_, other->time_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(cellid_, other->cellid_);
    std::swap(mark_, other->mark_);
    std::swap(calluptime_, other->calluptime_);
    std::swap(level_, other->level_);
    std::swap(teamconfirmstate_, other->teamconfirmstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamMember_descriptor_;
  metadata.reflection = PBTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamMemberSimple::kLevelFieldNumber;
const int PBTeamMemberSimple::kJobFieldNumber;
#endif  // !_MSC_VER

PBTeamMemberSimple::PBTeamMemberSimple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamMemberSimple::InitAsDefaultInstance() {
}

PBTeamMemberSimple::PBTeamMemberSimple(const PBTeamMemberSimple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamMemberSimple::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  job_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamMemberSimple::~PBTeamMemberSimple() {
  SharedDtor();
}

void PBTeamMemberSimple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTeamMemberSimple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamMemberSimple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamMemberSimple_descriptor_;
}

const PBTeamMemberSimple& PBTeamMemberSimple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamMemberSimple* PBTeamMemberSimple::default_instance_ = NULL;

PBTeamMemberSimple* PBTeamMemberSimple::New() const {
  return new PBTeamMemberSimple;
}

void PBTeamMemberSimple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    job_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamMemberSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }
      
      // optional uint32 job = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamMemberSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // optional uint32 job = 2;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->job(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamMemberSimple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // optional uint32 job = 2;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->job(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamMemberSimple::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 job = 2;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamMemberSimple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamMemberSimple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamMemberSimple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamMemberSimple::MergeFrom(const PBTeamMemberSimple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamMemberSimple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamMemberSimple::CopyFrom(const PBTeamMemberSimple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamMemberSimple::IsInitialized() const {
  
  return true;
}

void PBTeamMemberSimple::Swap(PBTeamMemberSimple* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamMemberSimple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamMemberSimple_descriptor_;
  metadata.reflection = PBTeamMemberSimple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamTarget::kTargetidFieldNumber;
const int PBTeamTarget::kDifficultyFieldNumber;
const int PBTeamTarget::kLevelminFieldNumber;
const int PBTeamTarget::kLevelmaxFieldNumber;
const int PBTeamTarget::kActiveidFieldNumber;
const int PBTeamTarget::kIsautomatchFieldNumber;
const int PBTeamTarget::kIsautoacceptFieldNumber;
const int PBTeamTarget::kCashFieldNumber;
#endif  // !_MSC_VER

PBTeamTarget::PBTeamTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamTarget::InitAsDefaultInstance() {
}

PBTeamTarget::PBTeamTarget(const PBTeamTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamTarget::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0u;
  difficulty_ = 0u;
  levelmin_ = 0u;
  levelmax_ = 0u;
  activeid_ = 0u;
  isautomatch_ = false;
  isautoaccept_ = false;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamTarget::~PBTeamTarget() {
  SharedDtor();
}

void PBTeamTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTeamTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamTarget_descriptor_;
}

const PBTeamTarget& PBTeamTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamTarget* PBTeamTarget::default_instance_ = NULL;

PBTeamTarget* PBTeamTarget::New() const {
  return new PBTeamTarget;
}

void PBTeamTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = 0u;
    difficulty_ = 0u;
    levelmin_ = 0u;
    levelmax_ = 0u;
    activeid_ = 0u;
    isautomatch_ = false;
    isautoaccept_ = false;
    cash_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 targetid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_difficulty;
        break;
      }
      
      // optional uint32 difficulty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_levelmin;
        break;
      }
      
      // optional uint32 levelmin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelmin_)));
          set_has_levelmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_levelmax;
        break;
      }
      
      // optional uint32 levelmax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelmax_)));
          set_has_levelmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_activeid;
        break;
      }
      
      // optional uint32 activeid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isautomatch;
        break;
      }
      
      // optional bool isautomatch = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isautomatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautomatch_)));
          set_has_isautomatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isautoaccept;
        break;
      }
      
      // optional bool isautoaccept = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isautoaccept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautoaccept_)));
          set_has_isautoaccept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cash;
        break;
      }
      
      // optional uint32 cash = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetid(), output);
  }
  
  // optional uint32 difficulty = 2;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->difficulty(), output);
  }
  
  // optional uint32 levelmin = 3;
  if (has_levelmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->levelmin(), output);
  }
  
  // optional uint32 levelmax = 4;
  if (has_levelmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->levelmax(), output);
  }
  
  // optional uint32 activeid = 5;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->activeid(), output);
  }
  
  // optional bool isautomatch = 6;
  if (has_isautomatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isautomatch(), output);
  }
  
  // optional bool isautoaccept = 7;
  if (has_isautoaccept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isautoaccept(), output);
  }
  
  // optional uint32 cash = 8;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetid(), target);
  }
  
  // optional uint32 difficulty = 2;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->difficulty(), target);
  }
  
  // optional uint32 levelmin = 3;
  if (has_levelmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->levelmin(), target);
  }
  
  // optional uint32 levelmax = 4;
  if (has_levelmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->levelmax(), target);
  }
  
  // optional uint32 activeid = 5;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->activeid(), target);
  }
  
  // optional bool isautomatch = 6;
  if (has_isautomatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isautomatch(), target);
  }
  
  // optional bool isautoaccept = 7;
  if (has_isautoaccept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isautoaccept(), target);
  }
  
  // optional uint32 cash = 8;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamTarget::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 targetid = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
    // optional uint32 difficulty = 2;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }
    
    // optional uint32 levelmin = 3;
    if (has_levelmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelmin());
    }
    
    // optional uint32 levelmax = 4;
    if (has_levelmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelmax());
    }
    
    // optional uint32 activeid = 5;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activeid());
    }
    
    // optional bool isautomatch = 6;
    if (has_isautomatch()) {
      total_size += 1 + 1;
    }
    
    // optional bool isautoaccept = 7;
    if (has_isautoaccept()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 cash = 8;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamTarget::MergeFrom(const PBTeamTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_levelmin()) {
      set_levelmin(from.levelmin());
    }
    if (from.has_levelmax()) {
      set_levelmax(from.levelmax());
    }
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_isautomatch()) {
      set_isautomatch(from.isautomatch());
    }
    if (from.has_isautoaccept()) {
      set_isautoaccept(from.isautoaccept());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamTarget::CopyFrom(const PBTeamTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamTarget::IsInitialized() const {
  
  return true;
}

void PBTeamTarget::Swap(PBTeamTarget* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(levelmin_, other->levelmin_);
    std::swap(levelmax_, other->levelmax_);
    std::swap(activeid_, other->activeid_);
    std::swap(isautomatch_, other->isautomatch_);
    std::swap(isautoaccept_, other->isautoaccept_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamTarget_descriptor_;
  metadata.reflection = PBTeamTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamMemberJobRequire::kPostionFieldNumber;
const int PBTeamMemberJobRequire::kJobrequireFieldNumber;
#endif  // !_MSC_VER

PBTeamMemberJobRequire::PBTeamMemberJobRequire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamMemberJobRequire::InitAsDefaultInstance() {
}

PBTeamMemberJobRequire::PBTeamMemberJobRequire(const PBTeamMemberJobRequire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamMemberJobRequire::SharedCtor() {
  _cached_size_ = 0;
  postion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamMemberJobRequire::~PBTeamMemberJobRequire() {
  SharedDtor();
}

void PBTeamMemberJobRequire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTeamMemberJobRequire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamMemberJobRequire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamMemberJobRequire_descriptor_;
}

const PBTeamMemberJobRequire& PBTeamMemberJobRequire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamMemberJobRequire* PBTeamMemberJobRequire::default_instance_ = NULL;

PBTeamMemberJobRequire* PBTeamMemberJobRequire::New() const {
  return new PBTeamMemberJobRequire;
}

void PBTeamMemberJobRequire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    postion_ = 0u;
  }
  jobrequire_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamMemberJobRequire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 postion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &postion_)));
          set_has_postion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jobrequire;
        break;
      }
      
      // repeated uint32 jobrequire = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jobrequire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_jobrequire())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_jobrequire())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jobrequire;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamMemberJobRequire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 postion = 1;
  if (has_postion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->postion(), output);
  }
  
  // repeated uint32 jobrequire = 2;
  for (int i = 0; i < this->jobrequire_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->jobrequire(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamMemberJobRequire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 postion = 1;
  if (has_postion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->postion(), target);
  }
  
  // repeated uint32 jobrequire = 2;
  for (int i = 0; i < this->jobrequire_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->jobrequire(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamMemberJobRequire::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 postion = 1;
    if (has_postion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->postion());
    }
    
  }
  // repeated uint32 jobrequire = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->jobrequire_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->jobrequire(i));
    }
    total_size += 1 * this->jobrequire_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamMemberJobRequire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamMemberJobRequire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamMemberJobRequire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamMemberJobRequire::MergeFrom(const PBTeamMemberJobRequire& from) {
  GOOGLE_CHECK_NE(&from, this);
  jobrequire_.MergeFrom(from.jobrequire_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_postion()) {
      set_postion(from.postion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamMemberJobRequire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamMemberJobRequire::CopyFrom(const PBTeamMemberJobRequire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamMemberJobRequire::IsInitialized() const {
  
  return true;
}

void PBTeamMemberJobRequire::Swap(PBTeamMemberJobRequire* other) {
  if (other != this) {
    std::swap(postion_, other->postion_);
    jobrequire_.Swap(&other->jobrequire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamMemberJobRequire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamMemberJobRequire_descriptor_;
  metadata.reflection = PBTeamMemberJobRequire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamTask::kIdFieldNumber;
const int PBTeamTask::kCopymapidFieldNumber;
const int PBTeamTask::kNpcidFieldNumber;
const int PBTeamTask::kStateFieldNumber;
#endif  // !_MSC_VER

PBTeamTask::PBTeamTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamTask::InitAsDefaultInstance() {
}

PBTeamTask::PBTeamTask(const PBTeamTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamTask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  copymapid_ = 0u;
  npcid_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamTask::~PBTeamTask() {
  SharedDtor();
}

void PBTeamTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTeamTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamTask_descriptor_;
}

const PBTeamTask& PBTeamTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamTask* PBTeamTask::default_instance_ = NULL;

PBTeamTask* PBTeamTask::New() const {
  return new PBTeamTask;
}

void PBTeamTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    copymapid_ = 0u;
    npcid_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copymapid;
        break;
      }
      
      // optional uint32 copymapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_npcid;
        break;
      }
      
      // optional uint32 npcid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }
      
      // optional uint32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymapid(), output);
  }
  
  // optional uint32 npcid = 3;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->npcid(), output);
  }
  
  // optional uint32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymapid(), target);
  }
  
  // optional uint32 npcid = 3;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->npcid(), target);
  }
  
  // optional uint32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 copymapid = 2;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 npcid = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }
    
    // optional uint32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamTask::MergeFrom(const PBTeamTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamTask::CopyFrom(const PBTeamTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamTask::IsInitialized() const {
  
  return true;
}

void PBTeamTask::Swap(PBTeamTask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(npcid_, other->npcid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamTask_descriptor_;
  metadata.reflection = PBTeamTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamInfo::kTeamidFieldNumber;
const int PBTeamInfo::kLearderidFieldNumber;
const int PBTeamInfo::kAllottypeFieldNumber;
const int PBTeamInfo::kMemberFieldNumber;
const int PBTeamInfo::kTeamtargetFieldNumber;
const int PBTeamInfo::kJobsFieldNumber;
const int PBTeamInfo::kTeamtaskFieldNumber;
#endif  // !_MSC_VER

PBTeamInfo::PBTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamInfo::InitAsDefaultInstance() {
  teamtarget_ = const_cast< ::PBTeamTarget*>(&::PBTeamTarget::default_instance());
  teamtask_ = const_cast< ::PBTeamTask*>(&::PBTeamTask::default_instance());
}

PBTeamInfo::PBTeamInfo(const PBTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  learderid_ = 0u;
  allottype_ = 0u;
  teamtarget_ = NULL;
  teamtask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamInfo::~PBTeamInfo() {
  SharedDtor();
}

void PBTeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete teamtarget_;
    delete teamtask_;
  }
}

void PBTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamInfo_descriptor_;
}

const PBTeamInfo& PBTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamInfo* PBTeamInfo::default_instance_ = NULL;

PBTeamInfo* PBTeamInfo::New() const {
  return new PBTeamInfo;
}

void PBTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
    learderid_ = 0u;
    allottype_ = 0u;
    if (has_teamtarget()) {
      if (teamtarget_ != NULL) teamtarget_->::PBTeamTarget::Clear();
    }
    if (has_teamtask()) {
      if (teamtask_ != NULL) teamtask_->::PBTeamTask::Clear();
    }
  }
  member_.Clear();
  jobs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_learderid;
        break;
      }
      
      // optional uint32 learderid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_learderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &learderid_)));
          set_has_learderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_allottype;
        break;
      }
      
      // optional uint32 allottype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allottype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allottype_)));
          set_has_allottype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_member;
        break;
      }
      
      // repeated .PBTeamMember member = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_member;
        if (input->ExpectTag(42)) goto parse_teamtarget;
        break;
      }
      
      // optional .PBTeamTarget teamtarget = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamtarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamtarget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_jobs;
        break;
      }
      
      // repeated .PBTeamMemberJobRequire jobs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jobs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_jobs;
        if (input->ExpectTag(58)) goto parse_teamtask;
        break;
      }
      
      // optional .PBTeamTask teamtask = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamtask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamtask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }
  
  // optional uint32 learderid = 2;
  if (has_learderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->learderid(), output);
  }
  
  // optional uint32 allottype = 3;
  if (has_allottype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->allottype(), output);
  }
  
  // repeated .PBTeamMember member = 4;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->member(i), output);
  }
  
  // optional .PBTeamTarget teamtarget = 5;
  if (has_teamtarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->teamtarget(), output);
  }
  
  // repeated .PBTeamMemberJobRequire jobs = 6;
  for (int i = 0; i < this->jobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->jobs(i), output);
  }
  
  // optional .PBTeamTask teamtask = 7;
  if (has_teamtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->teamtask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }
  
  // optional uint32 learderid = 2;
  if (has_learderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->learderid(), target);
  }
  
  // optional uint32 allottype = 3;
  if (has_allottype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->allottype(), target);
  }
  
  // repeated .PBTeamMember member = 4;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->member(i), target);
  }
  
  // optional .PBTeamTarget teamtarget = 5;
  if (has_teamtarget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->teamtarget(), target);
  }
  
  // repeated .PBTeamMemberJobRequire jobs = 6;
  for (int i = 0; i < this->jobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->jobs(i), target);
  }
  
  // optional .PBTeamTask teamtask = 7;
  if (has_teamtask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->teamtask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }
    
    // optional uint32 learderid = 2;
    if (has_learderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->learderid());
    }
    
    // optional uint32 allottype = 3;
    if (has_allottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allottype());
    }
    
    // optional .PBTeamTarget teamtarget = 5;
    if (has_teamtarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamtarget());
    }
    
    // optional .PBTeamTask teamtask = 7;
    if (has_teamtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamtask());
    }
    
  }
  // repeated .PBTeamMember member = 4;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }
  
  // repeated .PBTeamMemberJobRequire jobs = 6;
  total_size += 1 * this->jobs_size();
  for (int i = 0; i < this->jobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jobs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamInfo::MergeFrom(const PBTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  jobs_.MergeFrom(from.jobs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_learderid()) {
      set_learderid(from.learderid());
    }
    if (from.has_allottype()) {
      set_allottype(from.allottype());
    }
    if (from.has_teamtarget()) {
      mutable_teamtarget()->::PBTeamTarget::MergeFrom(from.teamtarget());
    }
    if (from.has_teamtask()) {
      mutable_teamtask()->::PBTeamTask::MergeFrom(from.teamtask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamInfo::CopyFrom(const PBTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamInfo::IsInitialized() const {
  
  return true;
}

void PBTeamInfo::Swap(PBTeamInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(learderid_, other->learderid_);
    std::swap(allottype_, other->allottype_);
    member_.Swap(&other->member_);
    std::swap(teamtarget_, other->teamtarget_);
    jobs_.Swap(&other->jobs_);
    std::swap(teamtask_, other->teamtask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamInfo_descriptor_;
  metadata.reflection = PBTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamInfoSimple::kTeamidFieldNumber;
const int PBTeamInfoSimple::kLeaderplayeridFieldNumber;
const int PBTeamInfoSimple::kLeadernameFieldNumber;
const int PBTeamInfoSimple::kLeadersceneidFieldNumber;
const int PBTeamInfoSimple::kLeaderjobFieldNumber;
const int PBTeamInfoSimple::kMemberFieldNumber;
const int PBTeamInfoSimple::kTeamtargetFieldNumber;
const int PBTeamInfoSimple::kLeaderfactionbannerFieldNumber;
const int PBTeamInfoSimple::kAveragefightpowerFieldNumber;
const int PBTeamInfoSimple::kLeaderlevelFieldNumber;
const int PBTeamInfoSimple::kLeaderfactionnameFieldNumber;
const int PBTeamInfoSimple::kLeaderfactionidFieldNumber;
#endif  // !_MSC_VER

PBTeamInfoSimple::PBTeamInfoSimple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamInfoSimple::InitAsDefaultInstance() {
  teamtarget_ = const_cast< ::PBTeamTarget*>(&::PBTeamTarget::default_instance());
}

PBTeamInfoSimple::PBTeamInfoSimple(const PBTeamInfoSimple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamInfoSimple::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  leaderplayerid_ = 0u;
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leadersceneid_ = 0u;
  leaderjob_ = 0u;
  teamtarget_ = NULL;
  leaderfactionbanner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  averagefightpower_ = 0u;
  leaderlevel_ = 0u;
  leaderfactionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leaderfactionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamInfoSimple::~PBTeamInfoSimple() {
  SharedDtor();
}

void PBTeamInfoSimple::SharedDtor() {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (leaderfactionbanner_ != &::google::protobuf::internal::kEmptyString) {
    delete leaderfactionbanner_;
  }
  if (leaderfactionname_ != &::google::protobuf::internal::kEmptyString) {
    delete leaderfactionname_;
  }
  if (this != default_instance_) {
    delete teamtarget_;
  }
}

void PBTeamInfoSimple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamInfoSimple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamInfoSimple_descriptor_;
}

const PBTeamInfoSimple& PBTeamInfoSimple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamInfoSimple* PBTeamInfoSimple::default_instance_ = NULL;

PBTeamInfoSimple* PBTeamInfoSimple::New() const {
  return new PBTeamInfoSimple;
}

void PBTeamInfoSimple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
    leaderplayerid_ = 0u;
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::kEmptyString) {
        leadername_->clear();
      }
    }
    leadersceneid_ = 0u;
    leaderjob_ = 0u;
    if (has_teamtarget()) {
      if (teamtarget_ != NULL) teamtarget_->::PBTeamTarget::Clear();
    }
    if (has_leaderfactionbanner()) {
      if (leaderfactionbanner_ != &::google::protobuf::internal::kEmptyString) {
        leaderfactionbanner_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    averagefightpower_ = 0u;
    leaderlevel_ = 0u;
    if (has_leaderfactionname()) {
      if (leaderfactionname_ != &::google::protobuf::internal::kEmptyString) {
        leaderfactionname_->clear();
      }
    }
    leaderfactionid_ = 0u;
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamInfoSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leaderplayerid;
        break;
      }
      
      // optional uint32 leaderplayerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaderplayerid_)));
          set_has_leaderplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leadername;
        break;
      }
      
      // optional string leadername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leadername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leadersceneid;
        break;
      }
      
      // optional uint32 leadersceneid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leadersceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leadersceneid_)));
          set_has_leadersceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leaderjob;
        break;
      }
      
      // optional uint32 leaderjob = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaderjob_)));
          set_has_leaderjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_member;
        break;
      }
      
      // repeated .PBTeamMemberSimple member = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_member;
        if (input->ExpectTag(58)) goto parse_teamtarget;
        break;
      }
      
      // optional .PBTeamTarget teamtarget = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamtarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamtarget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_leaderfactionbanner;
        break;
      }
      
      // optional string leaderfactionbanner = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderfactionbanner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderfactionbanner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leaderfactionbanner().data(), this->leaderfactionbanner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_averagefightpower;
        break;
      }
      
      // optional uint32 averagefightpower = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_averagefightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &averagefightpower_)));
          set_has_averagefightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_leaderlevel;
        break;
      }
      
      // optional uint32 leaderlevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaderlevel_)));
          set_has_leaderlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_leaderfactionname;
        break;
      }
      
      // optional string leaderfactionname = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderfactionname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderfactionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leaderfactionname().data(), this->leaderfactionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_leaderfactionid;
        break;
      }
      
      // optional uint32 leaderfactionid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderfactionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaderfactionid_)));
          set_has_leaderfactionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamInfoSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }
  
  // optional uint32 leaderplayerid = 2;
  if (has_leaderplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leaderplayerid(), output);
  }
  
  // optional string leadername = 3;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->leadername(), output);
  }
  
  // optional uint32 leadersceneid = 4;
  if (has_leadersceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leadersceneid(), output);
  }
  
  // optional uint32 leaderjob = 5;
  if (has_leaderjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leaderjob(), output);
  }
  
  // repeated .PBTeamMemberSimple member = 6;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->member(i), output);
  }
  
  // optional .PBTeamTarget teamtarget = 7;
  if (has_teamtarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->teamtarget(), output);
  }
  
  // optional string leaderfactionbanner = 8;
  if (has_leaderfactionbanner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leaderfactionbanner().data(), this->leaderfactionbanner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->leaderfactionbanner(), output);
  }
  
  // optional uint32 averagefightpower = 9;
  if (has_averagefightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->averagefightpower(), output);
  }
  
  // optional uint32 leaderlevel = 10;
  if (has_leaderlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->leaderlevel(), output);
  }
  
  // optional string leaderfactionname = 11;
  if (has_leaderfactionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leaderfactionname().data(), this->leaderfactionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->leaderfactionname(), output);
  }
  
  // optional uint32 leaderfactionid = 12;
  if (has_leaderfactionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->leaderfactionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamInfoSimple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }
  
  // optional uint32 leaderplayerid = 2;
  if (has_leaderplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leaderplayerid(), target);
  }
  
  // optional string leadername = 3;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leadername(), target);
  }
  
  // optional uint32 leadersceneid = 4;
  if (has_leadersceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leadersceneid(), target);
  }
  
  // optional uint32 leaderjob = 5;
  if (has_leaderjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leaderjob(), target);
  }
  
  // repeated .PBTeamMemberSimple member = 6;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->member(i), target);
  }
  
  // optional .PBTeamTarget teamtarget = 7;
  if (has_teamtarget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->teamtarget(), target);
  }
  
  // optional string leaderfactionbanner = 8;
  if (has_leaderfactionbanner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leaderfactionbanner().data(), this->leaderfactionbanner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->leaderfactionbanner(), target);
  }
  
  // optional uint32 averagefightpower = 9;
  if (has_averagefightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->averagefightpower(), target);
  }
  
  // optional uint32 leaderlevel = 10;
  if (has_leaderlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->leaderlevel(), target);
  }
  
  // optional string leaderfactionname = 11;
  if (has_leaderfactionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leaderfactionname().data(), this->leaderfactionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->leaderfactionname(), target);
  }
  
  // optional uint32 leaderfactionid = 12;
  if (has_leaderfactionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->leaderfactionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamInfoSimple::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }
    
    // optional uint32 leaderplayerid = 2;
    if (has_leaderplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaderplayerid());
    }
    
    // optional string leadername = 3;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }
    
    // optional uint32 leadersceneid = 4;
    if (has_leadersceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leadersceneid());
    }
    
    // optional uint32 leaderjob = 5;
    if (has_leaderjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaderjob());
    }
    
    // optional .PBTeamTarget teamtarget = 7;
    if (has_teamtarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamtarget());
    }
    
    // optional string leaderfactionbanner = 8;
    if (has_leaderfactionbanner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leaderfactionbanner());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 averagefightpower = 9;
    if (has_averagefightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->averagefightpower());
    }
    
    // optional uint32 leaderlevel = 10;
    if (has_leaderlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaderlevel());
    }
    
    // optional string leaderfactionname = 11;
    if (has_leaderfactionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leaderfactionname());
    }
    
    // optional uint32 leaderfactionid = 12;
    if (has_leaderfactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaderfactionid());
    }
    
  }
  // repeated .PBTeamMemberSimple member = 6;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamInfoSimple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamInfoSimple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamInfoSimple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamInfoSimple::MergeFrom(const PBTeamInfoSimple& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_leaderplayerid()) {
      set_leaderplayerid(from.leaderplayerid());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_leadersceneid()) {
      set_leadersceneid(from.leadersceneid());
    }
    if (from.has_leaderjob()) {
      set_leaderjob(from.leaderjob());
    }
    if (from.has_teamtarget()) {
      mutable_teamtarget()->::PBTeamTarget::MergeFrom(from.teamtarget());
    }
    if (from.has_leaderfactionbanner()) {
      set_leaderfactionbanner(from.leaderfactionbanner());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_averagefightpower()) {
      set_averagefightpower(from.averagefightpower());
    }
    if (from.has_leaderlevel()) {
      set_leaderlevel(from.leaderlevel());
    }
    if (from.has_leaderfactionname()) {
      set_leaderfactionname(from.leaderfactionname());
    }
    if (from.has_leaderfactionid()) {
      set_leaderfactionid(from.leaderfactionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamInfoSimple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamInfoSimple::CopyFrom(const PBTeamInfoSimple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamInfoSimple::IsInitialized() const {
  
  return true;
}

void PBTeamInfoSimple::Swap(PBTeamInfoSimple* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(leaderplayerid_, other->leaderplayerid_);
    std::swap(leadername_, other->leadername_);
    std::swap(leadersceneid_, other->leadersceneid_);
    std::swap(leaderjob_, other->leaderjob_);
    member_.Swap(&other->member_);
    std::swap(teamtarget_, other->teamtarget_);
    std::swap(leaderfactionbanner_, other->leaderfactionbanner_);
    std::swap(averagefightpower_, other->averagefightpower_);
    std::swap(leaderlevel_, other->leaderlevel_);
    std::swap(leaderfactionname_, other->leaderfactionname_);
    std::swap(leaderfactionid_, other->leaderfactionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamInfoSimple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamInfoSimple_descriptor_;
  metadata.reflection = PBTeamInfoSimple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamInvite::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamInvite::PBC2GTeamInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamInvite::InitAsDefaultInstance() {
}

PBC2GTeamInvite::PBC2GTeamInvite(const PBC2GTeamInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamInvite::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamInvite::~PBC2GTeamInvite() {
  SharedDtor();
}

void PBC2GTeamInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamInvite_descriptor_;
}

const PBC2GTeamInvite& PBC2GTeamInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamInvite* PBC2GTeamInvite::default_instance_ = NULL;

PBC2GTeamInvite* PBC2GTeamInvite::New() const {
  return new PBC2GTeamInvite;
}

void PBC2GTeamInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamInvite::MergeFrom(const PBC2GTeamInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamInvite::CopyFrom(const PBC2GTeamInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamInvite::IsInitialized() const {
  
  return true;
}

void PBC2GTeamInvite::Swap(PBC2GTeamInvite* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamInvite_descriptor_;
  metadata.reflection = PBC2GTeamInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamAcceptInvite::kPlayeridFieldNumber;
const int PBC2GTeamAcceptInvite::kAcceptFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamAcceptInvite::PBC2GTeamAcceptInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamAcceptInvite::InitAsDefaultInstance() {
}

PBC2GTeamAcceptInvite::PBC2GTeamAcceptInvite(const PBC2GTeamAcceptInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamAcceptInvite::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamAcceptInvite::~PBC2GTeamAcceptInvite() {
  SharedDtor();
}

void PBC2GTeamAcceptInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamAcceptInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamAcceptInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamAcceptInvite_descriptor_;
}

const PBC2GTeamAcceptInvite& PBC2GTeamAcceptInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamAcceptInvite* PBC2GTeamAcceptInvite::default_instance_ = NULL;

PBC2GTeamAcceptInvite* PBC2GTeamAcceptInvite::New() const {
  return new PBC2GTeamAcceptInvite;
}

void PBC2GTeamAcceptInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    accept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamAcceptInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept;
        break;
      }
      
      // optional bool accept = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamAcceptInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional bool accept = 2;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamAcceptInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional bool accept = 2;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamAcceptInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional bool accept = 2;
    if (has_accept()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamAcceptInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamAcceptInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamAcceptInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamAcceptInvite::MergeFrom(const PBC2GTeamAcceptInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamAcceptInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamAcceptInvite::CopyFrom(const PBC2GTeamAcceptInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamAcceptInvite::IsInitialized() const {
  
  return true;
}

void PBC2GTeamAcceptInvite::Swap(PBC2GTeamAcceptInvite* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(accept_, other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamAcceptInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamAcceptInvite_descriptor_;
  metadata.reflection = PBC2GTeamAcceptInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamApply::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamApply::PBC2GTeamApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamApply::InitAsDefaultInstance() {
}

PBC2GTeamApply::PBC2GTeamApply(const PBC2GTeamApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamApply::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamApply::~PBC2GTeamApply() {
  SharedDtor();
}

void PBC2GTeamApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamApply_descriptor_;
}

const PBC2GTeamApply& PBC2GTeamApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamApply* PBC2GTeamApply::default_instance_ = NULL;

PBC2GTeamApply* PBC2GTeamApply::New() const {
  return new PBC2GTeamApply;
}

void PBC2GTeamApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamApply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamApply::MergeFrom(const PBC2GTeamApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamApply::CopyFrom(const PBC2GTeamApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamApply::IsInitialized() const {
  
  return true;
}

void PBC2GTeamApply::Swap(PBC2GTeamApply* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamApply_descriptor_;
  metadata.reflection = PBC2GTeamApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamAcceptApply::kPlayeridFieldNumber;
const int PBC2GTeamAcceptApply::kAcceptFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamAcceptApply::PBC2GTeamAcceptApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamAcceptApply::InitAsDefaultInstance() {
}

PBC2GTeamAcceptApply::PBC2GTeamAcceptApply(const PBC2GTeamAcceptApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamAcceptApply::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamAcceptApply::~PBC2GTeamAcceptApply() {
  SharedDtor();
}

void PBC2GTeamAcceptApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamAcceptApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamAcceptApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamAcceptApply_descriptor_;
}

const PBC2GTeamAcceptApply& PBC2GTeamAcceptApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamAcceptApply* PBC2GTeamAcceptApply::default_instance_ = NULL;

PBC2GTeamAcceptApply* PBC2GTeamAcceptApply::New() const {
  return new PBC2GTeamAcceptApply;
}

void PBC2GTeamAcceptApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    accept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamAcceptApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept;
        break;
      }
      
      // optional bool accept = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamAcceptApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional bool accept = 2;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamAcceptApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional bool accept = 2;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamAcceptApply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional bool accept = 2;
    if (has_accept()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamAcceptApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamAcceptApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamAcceptApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamAcceptApply::MergeFrom(const PBC2GTeamAcceptApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamAcceptApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamAcceptApply::CopyFrom(const PBC2GTeamAcceptApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamAcceptApply::IsInitialized() const {
  
  return true;
}

void PBC2GTeamAcceptApply::Swap(PBC2GTeamAcceptApply* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(accept_, other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamAcceptApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamAcceptApply_descriptor_;
  metadata.reflection = PBC2GTeamAcceptApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2GTeamLeave::PBC2GTeamLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamLeave::InitAsDefaultInstance() {
}

PBC2GTeamLeave::PBC2GTeamLeave(const PBC2GTeamLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamLeave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamLeave::~PBC2GTeamLeave() {
  SharedDtor();
}

void PBC2GTeamLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamLeave_descriptor_;
}

const PBC2GTeamLeave& PBC2GTeamLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamLeave* PBC2GTeamLeave::default_instance_ = NULL;

PBC2GTeamLeave* PBC2GTeamLeave::New() const {
  return new PBC2GTeamLeave;
}

void PBC2GTeamLeave::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2GTeamLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamLeave::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamLeave::MergeFrom(const PBC2GTeamLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamLeave::CopyFrom(const PBC2GTeamLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamLeave::IsInitialized() const {
  
  return true;
}

void PBC2GTeamLeave::Swap(PBC2GTeamLeave* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamLeave_descriptor_;
  metadata.reflection = PBC2GTeamLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamChangeLeader::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamChangeLeader::PBC2GTeamChangeLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamChangeLeader::InitAsDefaultInstance() {
}

PBC2GTeamChangeLeader::PBC2GTeamChangeLeader(const PBC2GTeamChangeLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamChangeLeader::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamChangeLeader::~PBC2GTeamChangeLeader() {
  SharedDtor();
}

void PBC2GTeamChangeLeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamChangeLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamChangeLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamChangeLeader_descriptor_;
}

const PBC2GTeamChangeLeader& PBC2GTeamChangeLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamChangeLeader* PBC2GTeamChangeLeader::default_instance_ = NULL;

PBC2GTeamChangeLeader* PBC2GTeamChangeLeader::New() const {
  return new PBC2GTeamChangeLeader;
}

void PBC2GTeamChangeLeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamChangeLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamChangeLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamChangeLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamChangeLeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamChangeLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamChangeLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamChangeLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamChangeLeader::MergeFrom(const PBC2GTeamChangeLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamChangeLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamChangeLeader::CopyFrom(const PBC2GTeamChangeLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamChangeLeader::IsInitialized() const {
  
  return true;
}

void PBC2GTeamChangeLeader::Swap(PBC2GTeamChangeLeader* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamChangeLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamChangeLeader_descriptor_;
  metadata.reflection = PBC2GTeamChangeLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamPublishAsk::kCopymapidFieldNumber;
const int PBC2GTeamPublishAsk::kMsgFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamPublishAsk::PBC2GTeamPublishAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamPublishAsk::InitAsDefaultInstance() {
}

PBC2GTeamPublishAsk::PBC2GTeamPublishAsk(const PBC2GTeamPublishAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamPublishAsk::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamPublishAsk::~PBC2GTeamPublishAsk() {
  SharedDtor();
}

void PBC2GTeamPublishAsk::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void PBC2GTeamPublishAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamPublishAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamPublishAsk_descriptor_;
}

const PBC2GTeamPublishAsk& PBC2GTeamPublishAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamPublishAsk* PBC2GTeamPublishAsk::default_instance_ = NULL;

PBC2GTeamPublishAsk* PBC2GTeamPublishAsk::New() const {
  return new PBC2GTeamPublishAsk;
}

void PBC2GTeamPublishAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamPublishAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamPublishAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamPublishAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamPublishAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamPublishAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamPublishAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamPublishAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamPublishAsk::MergeFrom(const PBC2GTeamPublishAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamPublishAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamPublishAsk::CopyFrom(const PBC2GTeamPublishAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamPublishAsk::IsInitialized() const {
  
  return true;
}

void PBC2GTeamPublishAsk::Swap(PBC2GTeamPublishAsk* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamPublishAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamPublishAsk_descriptor_;
  metadata.reflection = PBC2GTeamPublishAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamPublishCancel::kCopymapidFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamPublishCancel::PBC2GTeamPublishCancel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamPublishCancel::InitAsDefaultInstance() {
}

PBC2GTeamPublishCancel::PBC2GTeamPublishCancel(const PBC2GTeamPublishCancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamPublishCancel::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamPublishCancel::~PBC2GTeamPublishCancel() {
  SharedDtor();
}

void PBC2GTeamPublishCancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamPublishCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamPublishCancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamPublishCancel_descriptor_;
}

const PBC2GTeamPublishCancel& PBC2GTeamPublishCancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamPublishCancel* PBC2GTeamPublishCancel::default_instance_ = NULL;

PBC2GTeamPublishCancel* PBC2GTeamPublishCancel::New() const {
  return new PBC2GTeamPublishCancel;
}

void PBC2GTeamPublishCancel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamPublishCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamPublishCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamPublishCancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamPublishCancel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamPublishCancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamPublishCancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamPublishCancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamPublishCancel::MergeFrom(const PBC2GTeamPublishCancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamPublishCancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamPublishCancel::CopyFrom(const PBC2GTeamPublishCancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamPublishCancel::IsInitialized() const {
  
  return true;
}

void PBC2GTeamPublishCancel::Swap(PBC2GTeamPublishCancel* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamPublishCancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamPublishCancel_descriptor_;
  metadata.reflection = PBC2GTeamPublishCancel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamPublishInvite::kCopymapidFieldNumber;
const int PBC2GTeamPublishInvite::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamPublishInvite::PBC2GTeamPublishInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamPublishInvite::InitAsDefaultInstance() {
}

PBC2GTeamPublishInvite::PBC2GTeamPublishInvite(const PBC2GTeamPublishInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamPublishInvite::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamPublishInvite::~PBC2GTeamPublishInvite() {
  SharedDtor();
}

void PBC2GTeamPublishInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamPublishInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamPublishInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamPublishInvite_descriptor_;
}

const PBC2GTeamPublishInvite& PBC2GTeamPublishInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamPublishInvite* PBC2GTeamPublishInvite::default_instance_ = NULL;

PBC2GTeamPublishInvite* PBC2GTeamPublishInvite::New() const {
  return new PBC2GTeamPublishInvite;
}

void PBC2GTeamPublishInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamPublishInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamPublishInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamPublishInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamPublishInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamPublishInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamPublishInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamPublishInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamPublishInvite::MergeFrom(const PBC2GTeamPublishInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamPublishInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamPublishInvite::CopyFrom(const PBC2GTeamPublishInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamPublishInvite::IsInitialized() const {
  
  return true;
}

void PBC2GTeamPublishInvite::Swap(PBC2GTeamPublishInvite* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamPublishInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamPublishInvite_descriptor_;
  metadata.reflection = PBC2GTeamPublishInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamPublishAcceptInvite::kCopymapidFieldNumber;
const int PBC2GTeamPublishAcceptInvite::kPlayeridFieldNumber;
const int PBC2GTeamPublishAcceptInvite::kAcceptFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamPublishAcceptInvite::PBC2GTeamPublishAcceptInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamPublishAcceptInvite::InitAsDefaultInstance() {
}

PBC2GTeamPublishAcceptInvite::PBC2GTeamPublishAcceptInvite(const PBC2GTeamPublishAcceptInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamPublishAcceptInvite::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  playerid_ = 0u;
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamPublishAcceptInvite::~PBC2GTeamPublishAcceptInvite() {
  SharedDtor();
}

void PBC2GTeamPublishAcceptInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamPublishAcceptInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamPublishAcceptInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamPublishAcceptInvite_descriptor_;
}

const PBC2GTeamPublishAcceptInvite& PBC2GTeamPublishAcceptInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamPublishAcceptInvite* PBC2GTeamPublishAcceptInvite::default_instance_ = NULL;

PBC2GTeamPublishAcceptInvite* PBC2GTeamPublishAcceptInvite::New() const {
  return new PBC2GTeamPublishAcceptInvite;
}

void PBC2GTeamPublishAcceptInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    playerid_ = 0u;
    accept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamPublishAcceptInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accept;
        break;
      }
      
      // optional bool accept = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamPublishAcceptInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional bool accept = 3;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->accept(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamPublishAcceptInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional bool accept = 3;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->accept(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamPublishAcceptInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional bool accept = 3;
    if (has_accept()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamPublishAcceptInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamPublishAcceptInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamPublishAcceptInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamPublishAcceptInvite::MergeFrom(const PBC2GTeamPublishAcceptInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamPublishAcceptInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamPublishAcceptInvite::CopyFrom(const PBC2GTeamPublishAcceptInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamPublishAcceptInvite::IsInitialized() const {
  
  return true;
}

void PBC2GTeamPublishAcceptInvite::Swap(PBC2GTeamPublishAcceptInvite* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(playerid_, other->playerid_);
    std::swap(accept_, other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamPublishAcceptInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamPublishAcceptInvite_descriptor_;
  metadata.reflection = PBC2GTeamPublishAcceptInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamPublishList::kCopymapidFieldNumber;
const int PBC2GTeamPublishList::kBeginidxFieldNumber;
const int PBC2GTeamPublishList::kEndidxFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamPublishList::PBC2GTeamPublishList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamPublishList::InitAsDefaultInstance() {
}

PBC2GTeamPublishList::PBC2GTeamPublishList(const PBC2GTeamPublishList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamPublishList::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  beginidx_ = 0u;
  endidx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamPublishList::~PBC2GTeamPublishList() {
  SharedDtor();
}

void PBC2GTeamPublishList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamPublishList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamPublishList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamPublishList_descriptor_;
}

const PBC2GTeamPublishList& PBC2GTeamPublishList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamPublishList* PBC2GTeamPublishList::default_instance_ = NULL;

PBC2GTeamPublishList* PBC2GTeamPublishList::New() const {
  return new PBC2GTeamPublishList;
}

void PBC2GTeamPublishList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    beginidx_ = 0u;
    endidx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamPublishList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginidx;
        break;
      }
      
      // optional uint32 beginidx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginidx_)));
          set_has_beginidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endidx;
        break;
      }
      
      // optional uint32 endidx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endidx_)));
          set_has_endidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamPublishList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional uint32 beginidx = 2;
  if (has_beginidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->beginidx(), output);
  }
  
  // optional uint32 endidx = 3;
  if (has_endidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endidx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamPublishList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional uint32 beginidx = 2;
  if (has_beginidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->beginidx(), target);
  }
  
  // optional uint32 endidx = 3;
  if (has_endidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endidx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamPublishList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 beginidx = 2;
    if (has_beginidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginidx());
    }
    
    // optional uint32 endidx = 3;
    if (has_endidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endidx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamPublishList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamPublishList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamPublishList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamPublishList::MergeFrom(const PBC2GTeamPublishList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_beginidx()) {
      set_beginidx(from.beginidx());
    }
    if (from.has_endidx()) {
      set_endidx(from.endidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamPublishList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamPublishList::CopyFrom(const PBC2GTeamPublishList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamPublishList::IsInitialized() const {
  
  return true;
}

void PBC2GTeamPublishList::Swap(PBC2GTeamPublishList* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(beginidx_, other->beginidx_);
    std::swap(endidx_, other->endidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamPublishList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamPublishList_descriptor_;
  metadata.reflection = PBC2GTeamPublishList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamKick::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamKick::PBC2GTeamKick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamKick::InitAsDefaultInstance() {
}

PBC2GTeamKick::PBC2GTeamKick(const PBC2GTeamKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamKick::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamKick::~PBC2GTeamKick() {
  SharedDtor();
}

void PBC2GTeamKick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamKick_descriptor_;
}

const PBC2GTeamKick& PBC2GTeamKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamKick* PBC2GTeamKick::default_instance_ = NULL;

PBC2GTeamKick* PBC2GTeamKick::New() const {
  return new PBC2GTeamKick;
}

void PBC2GTeamKick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamKick::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamKick::MergeFrom(const PBC2GTeamKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamKick::CopyFrom(const PBC2GTeamKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamKick::IsInitialized() const {
  
  return true;
}

void PBC2GTeamKick::Swap(PBC2GTeamKick* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamKick_descriptor_;
  metadata.reflection = PBC2GTeamKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamKickVote::kPlayeridFieldNumber;
const int PBC2GTeamKickVote::kAgreeFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamKickVote::PBC2GTeamKickVote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamKickVote::InitAsDefaultInstance() {
}

PBC2GTeamKickVote::PBC2GTeamKickVote(const PBC2GTeamKickVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamKickVote::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamKickVote::~PBC2GTeamKickVote() {
  SharedDtor();
}

void PBC2GTeamKickVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamKickVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamKickVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamKickVote_descriptor_;
}

const PBC2GTeamKickVote& PBC2GTeamKickVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamKickVote* PBC2GTeamKickVote::default_instance_ = NULL;

PBC2GTeamKickVote* PBC2GTeamKickVote::New() const {
  return new PBC2GTeamKickVote;
}

void PBC2GTeamKickVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamKickVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }
      
      // optional bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamKickVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamKickVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional bool agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamKickVote::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamKickVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamKickVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamKickVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamKickVote::MergeFrom(const PBC2GTeamKickVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamKickVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamKickVote::CopyFrom(const PBC2GTeamKickVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamKickVote::IsInitialized() const {
  
  return true;
}

void PBC2GTeamKickVote::Swap(PBC2GTeamKickVote* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamKickVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamKickVote_descriptor_;
  metadata.reflection = PBC2GTeamKickVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamSetAllot::kTypeFieldNumber;
#endif  // !_MSC_VER

PBTeamSetAllot::PBTeamSetAllot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamSetAllot::InitAsDefaultInstance() {
}

PBTeamSetAllot::PBTeamSetAllot(const PBTeamSetAllot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamSetAllot::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamSetAllot::~PBTeamSetAllot() {
  SharedDtor();
}

void PBTeamSetAllot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTeamSetAllot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamSetAllot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamSetAllot_descriptor_;
}

const PBTeamSetAllot& PBTeamSetAllot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamSetAllot* PBTeamSetAllot::default_instance_ = NULL;

PBTeamSetAllot* PBTeamSetAllot::New() const {
  return new PBTeamSetAllot;
}

void PBTeamSetAllot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamSetAllot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamSetAllot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamSetAllot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamSetAllot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamSetAllot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamSetAllot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamSetAllot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamSetAllot::MergeFrom(const PBTeamSetAllot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamSetAllot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamSetAllot::CopyFrom(const PBTeamSetAllot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamSetAllot::IsInitialized() const {
  
  return true;
}

void PBTeamSetAllot::Swap(PBTeamSetAllot* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamSetAllot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamSetAllot_descriptor_;
  metadata.reflection = PBTeamSetAllot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamSetAllotVote::kTypeFieldNumber;
const int PBTeamSetAllotVote::kAgreeFieldNumber;
#endif  // !_MSC_VER

PBTeamSetAllotVote::PBTeamSetAllotVote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamSetAllotVote::InitAsDefaultInstance() {
}

PBTeamSetAllotVote::PBTeamSetAllotVote(const PBTeamSetAllotVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamSetAllotVote::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamSetAllotVote::~PBTeamSetAllotVote() {
  SharedDtor();
}

void PBTeamSetAllotVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTeamSetAllotVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamSetAllotVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamSetAllotVote_descriptor_;
}

const PBTeamSetAllotVote& PBTeamSetAllotVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamSetAllotVote* PBTeamSetAllotVote::default_instance_ = NULL;

PBTeamSetAllotVote* PBTeamSetAllotVote::New() const {
  return new PBTeamSetAllotVote;
}

void PBTeamSetAllotVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamSetAllotVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }
      
      // optional bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamSetAllotVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamSetAllotVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional bool agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamSetAllotVote::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamSetAllotVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamSetAllotVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamSetAllotVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamSetAllotVote::MergeFrom(const PBTeamSetAllotVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamSetAllotVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamSetAllotVote::CopyFrom(const PBTeamSetAllotVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamSetAllotVote::IsInitialized() const {
  
  return true;
}

void PBTeamSetAllotVote::Swap(PBTeamSetAllotVote* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamSetAllotVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamSetAllotVote_descriptor_;
  metadata.reflection = PBTeamSetAllotVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamNearPlayerList::kBeginidxFieldNumber;
const int PBTeamNearPlayerList::kEndidxFieldNumber;
#endif  // !_MSC_VER

PBTeamNearPlayerList::PBTeamNearPlayerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamNearPlayerList::InitAsDefaultInstance() {
}

PBTeamNearPlayerList::PBTeamNearPlayerList(const PBTeamNearPlayerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamNearPlayerList::SharedCtor() {
  _cached_size_ = 0;
  beginidx_ = 0u;
  endidx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamNearPlayerList::~PBTeamNearPlayerList() {
  SharedDtor();
}

void PBTeamNearPlayerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTeamNearPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamNearPlayerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamNearPlayerList_descriptor_;
}

const PBTeamNearPlayerList& PBTeamNearPlayerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamNearPlayerList* PBTeamNearPlayerList::default_instance_ = NULL;

PBTeamNearPlayerList* PBTeamNearPlayerList::New() const {
  return new PBTeamNearPlayerList;
}

void PBTeamNearPlayerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginidx_ = 0u;
    endidx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamNearPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginidx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginidx_)));
          set_has_beginidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endidx;
        break;
      }
      
      // optional uint32 endidx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endidx_)));
          set_has_endidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamNearPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginidx = 1;
  if (has_beginidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginidx(), output);
  }
  
  // optional uint32 endidx = 2;
  if (has_endidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endidx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamNearPlayerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginidx = 1;
  if (has_beginidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginidx(), target);
  }
  
  // optional uint32 endidx = 2;
  if (has_endidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endidx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamNearPlayerList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginidx = 1;
    if (has_beginidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginidx());
    }
    
    // optional uint32 endidx = 2;
    if (has_endidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endidx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamNearPlayerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamNearPlayerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamNearPlayerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamNearPlayerList::MergeFrom(const PBTeamNearPlayerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginidx()) {
      set_beginidx(from.beginidx());
    }
    if (from.has_endidx()) {
      set_endidx(from.endidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamNearPlayerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamNearPlayerList::CopyFrom(const PBTeamNearPlayerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamNearPlayerList::IsInitialized() const {
  
  return true;
}

void PBTeamNearPlayerList::Swap(PBTeamNearPlayerList* other) {
  if (other != this) {
    std::swap(beginidx_, other->beginidx_);
    std::swap(endidx_, other->endidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamNearPlayerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamNearPlayerList_descriptor_;
  metadata.reflection = PBTeamNearPlayerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamNearTeamList::kBeginidxFieldNumber;
const int PBTeamNearTeamList::kEndidxFieldNumber;
#endif  // !_MSC_VER

PBTeamNearTeamList::PBTeamNearTeamList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamNearTeamList::InitAsDefaultInstance() {
}

PBTeamNearTeamList::PBTeamNearTeamList(const PBTeamNearTeamList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamNearTeamList::SharedCtor() {
  _cached_size_ = 0;
  beginidx_ = 0u;
  endidx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamNearTeamList::~PBTeamNearTeamList() {
  SharedDtor();
}

void PBTeamNearTeamList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTeamNearTeamList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamNearTeamList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamNearTeamList_descriptor_;
}

const PBTeamNearTeamList& PBTeamNearTeamList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamNearTeamList* PBTeamNearTeamList::default_instance_ = NULL;

PBTeamNearTeamList* PBTeamNearTeamList::New() const {
  return new PBTeamNearTeamList;
}

void PBTeamNearTeamList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginidx_ = 0u;
    endidx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamNearTeamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginidx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginidx_)));
          set_has_beginidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endidx;
        break;
      }
      
      // optional uint32 endidx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endidx_)));
          set_has_endidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamNearTeamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginidx = 1;
  if (has_beginidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginidx(), output);
  }
  
  // optional uint32 endidx = 2;
  if (has_endidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endidx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamNearTeamList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginidx = 1;
  if (has_beginidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginidx(), target);
  }
  
  // optional uint32 endidx = 2;
  if (has_endidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endidx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamNearTeamList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginidx = 1;
    if (has_beginidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginidx());
    }
    
    // optional uint32 endidx = 2;
    if (has_endidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endidx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamNearTeamList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamNearTeamList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamNearTeamList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamNearTeamList::MergeFrom(const PBTeamNearTeamList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginidx()) {
      set_beginidx(from.beginidx());
    }
    if (from.has_endidx()) {
      set_endidx(from.endidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamNearTeamList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamNearTeamList::CopyFrom(const PBTeamNearTeamList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamNearTeamList::IsInitialized() const {
  
  return true;
}

void PBTeamNearTeamList::Swap(PBTeamNearTeamList* other) {
  if (other != this) {
    std::swap(beginidx_, other->beginidx_);
    std::swap(endidx_, other->endidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamNearTeamList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamNearTeamList_descriptor_;
  metadata.reflection = PBTeamNearTeamList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamAcceptInviteTransfer::kDisplayFieldNumber;
const int PBTeamAcceptInviteTransfer::kAcceptFieldNumber;
#endif  // !_MSC_VER

PBTeamAcceptInviteTransfer::PBTeamAcceptInviteTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamAcceptInviteTransfer::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBTeamAcceptInviteTransfer::PBTeamAcceptInviteTransfer(const PBTeamAcceptInviteTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamAcceptInviteTransfer::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamAcceptInviteTransfer::~PBTeamAcceptInviteTransfer() {
  SharedDtor();
}

void PBTeamAcceptInviteTransfer::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBTeamAcceptInviteTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamAcceptInviteTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamAcceptInviteTransfer_descriptor_;
}

const PBTeamAcceptInviteTransfer& PBTeamAcceptInviteTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamAcceptInviteTransfer* PBTeamAcceptInviteTransfer::default_instance_ = NULL;

PBTeamAcceptInviteTransfer* PBTeamAcceptInviteTransfer::New() const {
  return new PBTeamAcceptInviteTransfer;
}

void PBTeamAcceptInviteTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    accept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamAcceptInviteTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept;
        break;
      }
      
      // optional bool accept = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamAcceptInviteTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional bool accept = 2;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamAcceptInviteTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional bool accept = 2;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamAcceptInviteTransfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional bool accept = 2;
    if (has_accept()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamAcceptInviteTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamAcceptInviteTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamAcceptInviteTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamAcceptInviteTransfer::MergeFrom(const PBTeamAcceptInviteTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamAcceptInviteTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamAcceptInviteTransfer::CopyFrom(const PBTeamAcceptInviteTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamAcceptInviteTransfer::IsInitialized() const {
  
  return true;
}

void PBTeamAcceptInviteTransfer::Swap(PBTeamAcceptInviteTransfer* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(accept_, other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamAcceptInviteTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamAcceptInviteTransfer_descriptor_;
  metadata.reflection = PBTeamAcceptInviteTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamAcceptApplyTransfer::kDisplayFieldNumber;
const int PBTeamAcceptApplyTransfer::kAcceptFieldNumber;
#endif  // !_MSC_VER

PBTeamAcceptApplyTransfer::PBTeamAcceptApplyTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamAcceptApplyTransfer::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBTeamAcceptApplyTransfer::PBTeamAcceptApplyTransfer(const PBTeamAcceptApplyTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamAcceptApplyTransfer::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamAcceptApplyTransfer::~PBTeamAcceptApplyTransfer() {
  SharedDtor();
}

void PBTeamAcceptApplyTransfer::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBTeamAcceptApplyTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamAcceptApplyTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamAcceptApplyTransfer_descriptor_;
}

const PBTeamAcceptApplyTransfer& PBTeamAcceptApplyTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamAcceptApplyTransfer* PBTeamAcceptApplyTransfer::default_instance_ = NULL;

PBTeamAcceptApplyTransfer* PBTeamAcceptApplyTransfer::New() const {
  return new PBTeamAcceptApplyTransfer;
}

void PBTeamAcceptApplyTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    accept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamAcceptApplyTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept;
        break;
      }
      
      // optional bool accept = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamAcceptApplyTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional bool accept = 2;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamAcceptApplyTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional bool accept = 2;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamAcceptApplyTransfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional bool accept = 2;
    if (has_accept()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamAcceptApplyTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamAcceptApplyTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamAcceptApplyTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamAcceptApplyTransfer::MergeFrom(const PBTeamAcceptApplyTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamAcceptApplyTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamAcceptApplyTransfer::CopyFrom(const PBTeamAcceptApplyTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamAcceptApplyTransfer::IsInitialized() const {
  
  return true;
}

void PBTeamAcceptApplyTransfer::Swap(PBTeamAcceptApplyTransfer* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(accept_, other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamAcceptApplyTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamAcceptApplyTransfer_descriptor_;
  metadata.reflection = PBTeamAcceptApplyTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamPublishAdd::kCopymapidFieldNumber;
const int PBC2GTeamPublishAdd::kTimeFieldNumber;
const int PBC2GTeamPublishAdd::kMsgFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamPublishAdd::PBC2GTeamPublishAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamPublishAdd::InitAsDefaultInstance() {
}

PBC2GTeamPublishAdd::PBC2GTeamPublishAdd(const PBC2GTeamPublishAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamPublishAdd::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  time_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamPublishAdd::~PBC2GTeamPublishAdd() {
  SharedDtor();
}

void PBC2GTeamPublishAdd::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void PBC2GTeamPublishAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamPublishAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamPublishAdd_descriptor_;
}

const PBC2GTeamPublishAdd& PBC2GTeamPublishAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamPublishAdd* PBC2GTeamPublishAdd::default_instance_ = NULL;

PBC2GTeamPublishAdd* PBC2GTeamPublishAdd::New() const {
  return new PBC2GTeamPublishAdd;
}

void PBC2GTeamPublishAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    time_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamPublishAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }
      
      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamPublishAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }
  
  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamPublishAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }
  
  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamPublishAdd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamPublishAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamPublishAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamPublishAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamPublishAdd::MergeFrom(const PBC2GTeamPublishAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamPublishAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamPublishAdd::CopyFrom(const PBC2GTeamPublishAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamPublishAdd::IsInitialized() const {
  
  return true;
}

void PBC2GTeamPublishAdd::Swap(PBC2GTeamPublishAdd* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(time_, other->time_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamPublishAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamPublishAdd_descriptor_;
  metadata.reflection = PBC2GTeamPublishAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamPublishDel::kCopymapidFieldNumber;
const int PBC2GTeamPublishDel::kReasonFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamPublishDel::PBC2GTeamPublishDel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamPublishDel::InitAsDefaultInstance() {
}

PBC2GTeamPublishDel::PBC2GTeamPublishDel(const PBC2GTeamPublishDel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamPublishDel::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamPublishDel::~PBC2GTeamPublishDel() {
  SharedDtor();
}

void PBC2GTeamPublishDel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamPublishDel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamPublishDel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamPublishDel_descriptor_;
}

const PBC2GTeamPublishDel& PBC2GTeamPublishDel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamPublishDel* PBC2GTeamPublishDel::default_instance_ = NULL;

PBC2GTeamPublishDel* PBC2GTeamPublishDel::New() const {
  return new PBC2GTeamPublishDel;
}

void PBC2GTeamPublishDel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamPublishDel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamPublishDel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamPublishDel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamPublishDel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamPublishDel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamPublishDel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamPublishDel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamPublishDel::MergeFrom(const PBC2GTeamPublishDel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamPublishDel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamPublishDel::CopyFrom(const PBC2GTeamPublishDel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamPublishDel::IsInitialized() const {
  
  return true;
}

void PBC2GTeamPublishDel::Swap(PBC2GTeamPublishDel* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamPublishDel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamPublishDel_descriptor_;
  metadata.reflection = PBC2GTeamPublishDel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamPublishInviteTransfer::kCopymapidFieldNumber;
const int PBC2GTeamPublishInviteTransfer::kDisplayFieldNumber;
const int PBC2GTeamPublishInviteTransfer::kFightpowerFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamPublishInviteTransfer::PBC2GTeamPublishInviteTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamPublishInviteTransfer::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBC2GTeamPublishInviteTransfer::PBC2GTeamPublishInviteTransfer(const PBC2GTeamPublishInviteTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamPublishInviteTransfer::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  display_ = NULL;
  fightpower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamPublishInviteTransfer::~PBC2GTeamPublishInviteTransfer() {
  SharedDtor();
}

void PBC2GTeamPublishInviteTransfer::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBC2GTeamPublishInviteTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamPublishInviteTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamPublishInviteTransfer_descriptor_;
}

const PBC2GTeamPublishInviteTransfer& PBC2GTeamPublishInviteTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamPublishInviteTransfer* PBC2GTeamPublishInviteTransfer::default_instance_ = NULL;

PBC2GTeamPublishInviteTransfer* PBC2GTeamPublishInviteTransfer::New() const {
  return new PBC2GTeamPublishInviteTransfer;
}

void PBC2GTeamPublishInviteTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    fightpower_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamPublishInviteTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_display;
        break;
      }
      
      // optional .PBPlayerDisplay display = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamPublishInviteTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->display(), output);
  }
  
  // optional uint32 fightpower = 3;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fightpower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamPublishInviteTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->display(), target);
  }
  
  // optional uint32 fightpower = 3;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fightpower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamPublishInviteTransfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional .PBPlayerDisplay display = 2;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 fightpower = 3;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamPublishInviteTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamPublishInviteTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamPublishInviteTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamPublishInviteTransfer::MergeFrom(const PBC2GTeamPublishInviteTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamPublishInviteTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamPublishInviteTransfer::CopyFrom(const PBC2GTeamPublishInviteTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamPublishInviteTransfer::IsInitialized() const {
  
  return true;
}

void PBC2GTeamPublishInviteTransfer::Swap(PBC2GTeamPublishInviteTransfer* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(display_, other->display_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamPublishInviteTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamPublishInviteTransfer_descriptor_;
  metadata.reflection = PBC2GTeamPublishInviteTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamPublishAcceptInviteTransfer::kCopymapidFieldNumber;
const int PBC2GTeamPublishAcceptInviteTransfer::kDisplayFieldNumber;
const int PBC2GTeamPublishAcceptInviteTransfer::kAcceptFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamPublishAcceptInviteTransfer::PBC2GTeamPublishAcceptInviteTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamPublishAcceptInviteTransfer::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBC2GTeamPublishAcceptInviteTransfer::PBC2GTeamPublishAcceptInviteTransfer(const PBC2GTeamPublishAcceptInviteTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamPublishAcceptInviteTransfer::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  display_ = NULL;
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamPublishAcceptInviteTransfer::~PBC2GTeamPublishAcceptInviteTransfer() {
  SharedDtor();
}

void PBC2GTeamPublishAcceptInviteTransfer::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBC2GTeamPublishAcceptInviteTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamPublishAcceptInviteTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamPublishAcceptInviteTransfer_descriptor_;
}

const PBC2GTeamPublishAcceptInviteTransfer& PBC2GTeamPublishAcceptInviteTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamPublishAcceptInviteTransfer* PBC2GTeamPublishAcceptInviteTransfer::default_instance_ = NULL;

PBC2GTeamPublishAcceptInviteTransfer* PBC2GTeamPublishAcceptInviteTransfer::New() const {
  return new PBC2GTeamPublishAcceptInviteTransfer;
}

void PBC2GTeamPublishAcceptInviteTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    accept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamPublishAcceptInviteTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_display;
        break;
      }
      
      // optional .PBPlayerDisplay display = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accept;
        break;
      }
      
      // optional bool accept = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamPublishAcceptInviteTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->display(), output);
  }
  
  // optional bool accept = 3;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->accept(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamPublishAcceptInviteTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->display(), target);
  }
  
  // optional bool accept = 3;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->accept(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamPublishAcceptInviteTransfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional .PBPlayerDisplay display = 2;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional bool accept = 3;
    if (has_accept()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamPublishAcceptInviteTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamPublishAcceptInviteTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamPublishAcceptInviteTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamPublishAcceptInviteTransfer::MergeFrom(const PBC2GTeamPublishAcceptInviteTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamPublishAcceptInviteTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamPublishAcceptInviteTransfer::CopyFrom(const PBC2GTeamPublishAcceptInviteTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamPublishAcceptInviteTransfer::IsInitialized() const {
  
  return true;
}

void PBC2GTeamPublishAcceptInviteTransfer::Swap(PBC2GTeamPublishAcceptInviteTransfer* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(display_, other->display_);
    std::swap(accept_, other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamPublishAcceptInviteTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamPublishAcceptInviteTransfer_descriptor_;
  metadata.reflection = PBC2GTeamPublishAcceptInviteTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamPublish::kDisplayFieldNumber;
const int PBTeamPublish::kFightpowerFieldNumber;
const int PBTeamPublish::kCompeletenumFieldNumber;
const int PBTeamPublish::kMsgFieldNumber;
const int PBTeamPublish::kTimeFieldNumber;
#endif  // !_MSC_VER

PBTeamPublish::PBTeamPublish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamPublish::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBTeamPublish::PBTeamPublish(const PBTeamPublish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamPublish::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  fightpower_ = 0u;
  compeletenum_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamPublish::~PBTeamPublish() {
  SharedDtor();
}

void PBTeamPublish::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete display_;
  }
}

void PBTeamPublish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamPublish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamPublish_descriptor_;
}

const PBTeamPublish& PBTeamPublish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamPublish* PBTeamPublish::default_instance_ = NULL;

PBTeamPublish* PBTeamPublish::New() const {
  return new PBTeamPublish;
}

void PBTeamPublish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    fightpower_ = 0u;
    compeletenum_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamPublish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_compeletenum;
        break;
      }
      
      // optional uint32 compeletenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compeletenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compeletenum_)));
          set_has_compeletenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }
      
      // optional string msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamPublish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fightpower(), output);
  }
  
  // optional uint32 compeletenum = 3;
  if (has_compeletenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->compeletenum(), output);
  }
  
  // optional string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->msg(), output);
  }
  
  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamPublish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fightpower(), target);
  }
  
  // optional uint32 compeletenum = 3;
  if (has_compeletenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->compeletenum(), target);
  }
  
  // optional string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }
  
  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamPublish::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 fightpower = 2;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
    // optional uint32 compeletenum = 3;
    if (has_compeletenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compeletenum());
    }
    
    // optional string msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamPublish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamPublish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamPublish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamPublish::MergeFrom(const PBTeamPublish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_compeletenum()) {
      set_compeletenum(from.compeletenum());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamPublish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamPublish::CopyFrom(const PBTeamPublish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamPublish::IsInitialized() const {
  
  return true;
}

void PBTeamPublish::Swap(PBTeamPublish* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(compeletenum_, other->compeletenum_);
    std::swap(msg_, other->msg_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamPublish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamPublish_descriptor_;
  metadata.reflection = PBTeamPublish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTeamPublishList::kCopymapidFieldNumber;
const int PBG2CTeamPublishList::kBeginidxFieldNumber;
const int PBG2CTeamPublishList::kEndidxFieldNumber;
const int PBG2CTeamPublishList::kAllcountFieldNumber;
const int PBG2CTeamPublishList::kPublishFieldNumber;
#endif  // !_MSC_VER

PBG2CTeamPublishList::PBG2CTeamPublishList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTeamPublishList::InitAsDefaultInstance() {
}

PBG2CTeamPublishList::PBG2CTeamPublishList(const PBG2CTeamPublishList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTeamPublishList::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  beginidx_ = 0u;
  endidx_ = 0u;
  allcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTeamPublishList::~PBG2CTeamPublishList() {
  SharedDtor();
}

void PBG2CTeamPublishList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CTeamPublishList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTeamPublishList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTeamPublishList_descriptor_;
}

const PBG2CTeamPublishList& PBG2CTeamPublishList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2CTeamPublishList* PBG2CTeamPublishList::default_instance_ = NULL;

PBG2CTeamPublishList* PBG2CTeamPublishList::New() const {
  return new PBG2CTeamPublishList;
}

void PBG2CTeamPublishList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    beginidx_ = 0u;
    endidx_ = 0u;
    allcount_ = 0u;
  }
  publish_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTeamPublishList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginidx;
        break;
      }
      
      // optional uint32 beginidx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginidx_)));
          set_has_beginidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endidx;
        break;
      }
      
      // optional uint32 endidx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endidx_)));
          set_has_endidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_allcount;
        break;
      }
      
      // optional uint32 allcount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allcount_)));
          set_has_allcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_publish;
        break;
      }
      
      // repeated .PBTeamPublish publish = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_publish()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_publish;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTeamPublishList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional uint32 beginidx = 2;
  if (has_beginidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->beginidx(), output);
  }
  
  // optional uint32 endidx = 3;
  if (has_endidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endidx(), output);
  }
  
  // optional uint32 allcount = 4;
  if (has_allcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->allcount(), output);
  }
  
  // repeated .PBTeamPublish publish = 5;
  for (int i = 0; i < this->publish_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->publish(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTeamPublishList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional uint32 beginidx = 2;
  if (has_beginidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->beginidx(), target);
  }
  
  // optional uint32 endidx = 3;
  if (has_endidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endidx(), target);
  }
  
  // optional uint32 allcount = 4;
  if (has_allcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->allcount(), target);
  }
  
  // repeated .PBTeamPublish publish = 5;
  for (int i = 0; i < this->publish_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->publish(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTeamPublishList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 beginidx = 2;
    if (has_beginidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginidx());
    }
    
    // optional uint32 endidx = 3;
    if (has_endidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endidx());
    }
    
    // optional uint32 allcount = 4;
    if (has_allcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allcount());
    }
    
  }
  // repeated .PBTeamPublish publish = 5;
  total_size += 1 * this->publish_size();
  for (int i = 0; i < this->publish_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->publish(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTeamPublishList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTeamPublishList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTeamPublishList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTeamPublishList::MergeFrom(const PBG2CTeamPublishList& from) {
  GOOGLE_CHECK_NE(&from, this);
  publish_.MergeFrom(from.publish_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_beginidx()) {
      set_beginidx(from.beginidx());
    }
    if (from.has_endidx()) {
      set_endidx(from.endidx());
    }
    if (from.has_allcount()) {
      set_allcount(from.allcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTeamPublishList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTeamPublishList::CopyFrom(const PBG2CTeamPublishList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTeamPublishList::IsInitialized() const {
  
  return true;
}

void PBG2CTeamPublishList::Swap(PBG2CTeamPublishList* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(beginidx_, other->beginidx_);
    std::swap(endidx_, other->endidx_);
    std::swap(allcount_, other->allcount_);
    publish_.Swap(&other->publish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTeamPublishList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTeamPublishList_descriptor_;
  metadata.reflection = PBG2CTeamPublishList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamNearPlayer::kDisplayFieldNumber;
const int PBTeamNearPlayer::kFightpowerFieldNumber;
const int PBTeamNearPlayer::kTeamidFieldNumber;
#endif  // !_MSC_VER

PBTeamNearPlayer::PBTeamNearPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamNearPlayer::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBTeamNearPlayer::PBTeamNearPlayer(const PBTeamNearPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamNearPlayer::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  fightpower_ = 0u;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamNearPlayer::~PBTeamNearPlayer() {
  SharedDtor();
}

void PBTeamNearPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBTeamNearPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamNearPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamNearPlayer_descriptor_;
}

const PBTeamNearPlayer& PBTeamNearPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamNearPlayer* PBTeamNearPlayer::default_instance_ = NULL;

PBTeamNearPlayer* PBTeamNearPlayer::New() const {
  return new PBTeamNearPlayer;
}

void PBTeamNearPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    fightpower_ = 0u;
    teamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamNearPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }
      
      // optional uint64 teamid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamNearPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fightpower(), output);
  }
  
  // optional uint64 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamNearPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fightpower(), target);
  }
  
  // optional uint64 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamNearPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 fightpower = 2;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
    // optional uint64 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamNearPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamNearPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamNearPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamNearPlayer::MergeFrom(const PBTeamNearPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamNearPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamNearPlayer::CopyFrom(const PBTeamNearPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamNearPlayer::IsInitialized() const {
  
  return true;
}

void PBTeamNearPlayer::Swap(PBTeamNearPlayer* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamNearPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamNearPlayer_descriptor_;
  metadata.reflection = PBTeamNearPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamNearPlayerList::kBeginidxFieldNumber;
const int PBC2GTeamNearPlayerList::kEndidxFieldNumber;
const int PBC2GTeamNearPlayerList::kAllcountFieldNumber;
const int PBC2GTeamNearPlayerList::kPlayerFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamNearPlayerList::PBC2GTeamNearPlayerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamNearPlayerList::InitAsDefaultInstance() {
}

PBC2GTeamNearPlayerList::PBC2GTeamNearPlayerList(const PBC2GTeamNearPlayerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamNearPlayerList::SharedCtor() {
  _cached_size_ = 0;
  beginidx_ = 0u;
  endidx_ = 0u;
  allcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamNearPlayerList::~PBC2GTeamNearPlayerList() {
  SharedDtor();
}

void PBC2GTeamNearPlayerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamNearPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamNearPlayerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamNearPlayerList_descriptor_;
}

const PBC2GTeamNearPlayerList& PBC2GTeamNearPlayerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamNearPlayerList* PBC2GTeamNearPlayerList::default_instance_ = NULL;

PBC2GTeamNearPlayerList* PBC2GTeamNearPlayerList::New() const {
  return new PBC2GTeamNearPlayerList;
}

void PBC2GTeamNearPlayerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginidx_ = 0u;
    endidx_ = 0u;
    allcount_ = 0u;
  }
  player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamNearPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginidx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginidx_)));
          set_has_beginidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endidx;
        break;
      }
      
      // optional uint32 endidx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endidx_)));
          set_has_endidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_allcount;
        break;
      }
      
      // optional uint32 allcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allcount_)));
          set_has_allcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player;
        break;
      }
      
      // repeated .PBTeamNearPlayer player = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamNearPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginidx = 1;
  if (has_beginidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginidx(), output);
  }
  
  // optional uint32 endidx = 2;
  if (has_endidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endidx(), output);
  }
  
  // optional uint32 allcount = 3;
  if (has_allcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->allcount(), output);
  }
  
  // repeated .PBTeamNearPlayer player = 4;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamNearPlayerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginidx = 1;
  if (has_beginidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginidx(), target);
  }
  
  // optional uint32 endidx = 2;
  if (has_endidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endidx(), target);
  }
  
  // optional uint32 allcount = 3;
  if (has_allcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->allcount(), target);
  }
  
  // repeated .PBTeamNearPlayer player = 4;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamNearPlayerList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginidx = 1;
    if (has_beginidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginidx());
    }
    
    // optional uint32 endidx = 2;
    if (has_endidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endidx());
    }
    
    // optional uint32 allcount = 3;
    if (has_allcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allcount());
    }
    
  }
  // repeated .PBTeamNearPlayer player = 4;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamNearPlayerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamNearPlayerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamNearPlayerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamNearPlayerList::MergeFrom(const PBC2GTeamNearPlayerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginidx()) {
      set_beginidx(from.beginidx());
    }
    if (from.has_endidx()) {
      set_endidx(from.endidx());
    }
    if (from.has_allcount()) {
      set_allcount(from.allcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamNearPlayerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamNearPlayerList::CopyFrom(const PBC2GTeamNearPlayerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamNearPlayerList::IsInitialized() const {
  
  return true;
}

void PBC2GTeamNearPlayerList::Swap(PBC2GTeamNearPlayerList* other) {
  if (other != this) {
    std::swap(beginidx_, other->beginidx_);
    std::swap(endidx_, other->endidx_);
    std::swap(allcount_, other->allcount_);
    player_.Swap(&other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamNearPlayerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamNearPlayerList_descriptor_;
  metadata.reflection = PBC2GTeamNearPlayerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamNearTeamList::kBeginidxFieldNumber;
const int PBC2GTeamNearTeamList::kEndidxFieldNumber;
const int PBC2GTeamNearTeamList::kAllcountFieldNumber;
const int PBC2GTeamNearTeamList::kTeamFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamNearTeamList::PBC2GTeamNearTeamList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamNearTeamList::InitAsDefaultInstance() {
}

PBC2GTeamNearTeamList::PBC2GTeamNearTeamList(const PBC2GTeamNearTeamList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamNearTeamList::SharedCtor() {
  _cached_size_ = 0;
  beginidx_ = 0u;
  endidx_ = 0u;
  allcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamNearTeamList::~PBC2GTeamNearTeamList() {
  SharedDtor();
}

void PBC2GTeamNearTeamList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamNearTeamList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamNearTeamList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamNearTeamList_descriptor_;
}

const PBC2GTeamNearTeamList& PBC2GTeamNearTeamList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamNearTeamList* PBC2GTeamNearTeamList::default_instance_ = NULL;

PBC2GTeamNearTeamList* PBC2GTeamNearTeamList::New() const {
  return new PBC2GTeamNearTeamList;
}

void PBC2GTeamNearTeamList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginidx_ = 0u;
    endidx_ = 0u;
    allcount_ = 0u;
  }
  team_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamNearTeamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginidx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginidx_)));
          set_has_beginidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endidx;
        break;
      }
      
      // optional uint32 endidx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endidx_)));
          set_has_endidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_allcount;
        break;
      }
      
      // optional uint32 allcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allcount_)));
          set_has_allcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_team;
        break;
      }
      
      // repeated .PBTeamInfo team = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_team;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamNearTeamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginidx = 1;
  if (has_beginidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginidx(), output);
  }
  
  // optional uint32 endidx = 2;
  if (has_endidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endidx(), output);
  }
  
  // optional uint32 allcount = 3;
  if (has_allcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->allcount(), output);
  }
  
  // repeated .PBTeamInfo team = 4;
  for (int i = 0; i < this->team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->team(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamNearTeamList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginidx = 1;
  if (has_beginidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginidx(), target);
  }
  
  // optional uint32 endidx = 2;
  if (has_endidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endidx(), target);
  }
  
  // optional uint32 allcount = 3;
  if (has_allcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->allcount(), target);
  }
  
  // repeated .PBTeamInfo team = 4;
  for (int i = 0; i < this->team_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->team(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamNearTeamList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginidx = 1;
    if (has_beginidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginidx());
    }
    
    // optional uint32 endidx = 2;
    if (has_endidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endidx());
    }
    
    // optional uint32 allcount = 3;
    if (has_allcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allcount());
    }
    
  }
  // repeated .PBTeamInfo team = 4;
  total_size += 1 * this->team_size();
  for (int i = 0; i < this->team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamNearTeamList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamNearTeamList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamNearTeamList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamNearTeamList::MergeFrom(const PBC2GTeamNearTeamList& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_.MergeFrom(from.team_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginidx()) {
      set_beginidx(from.beginidx());
    }
    if (from.has_endidx()) {
      set_endidx(from.endidx());
    }
    if (from.has_allcount()) {
      set_allcount(from.allcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamNearTeamList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamNearTeamList::CopyFrom(const PBC2GTeamNearTeamList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamNearTeamList::IsInitialized() const {
  
  return true;
}

void PBC2GTeamNearTeamList::Swap(PBC2GTeamNearTeamList* other) {
  if (other != this) {
    std::swap(beginidx_, other->beginidx_);
    std::swap(endidx_, other->endidx_);
    std::swap(allcount_, other->allcount_);
    team_.Swap(&other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamNearTeamList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamNearTeamList_descriptor_;
  metadata.reflection = PBC2GTeamNearTeamList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2WTeamPublishAsk::kClientmsgFieldNumber;
const int PBG2WTeamPublishAsk::kDonecountFieldNumber;
#endif  // !_MSC_VER

PBG2WTeamPublishAsk::PBG2WTeamPublishAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2WTeamPublishAsk::InitAsDefaultInstance() {
  clientmsg_ = const_cast< ::PBC2GTeamPublishAsk*>(&::PBC2GTeamPublishAsk::default_instance());
}

PBG2WTeamPublishAsk::PBG2WTeamPublishAsk(const PBG2WTeamPublishAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2WTeamPublishAsk::SharedCtor() {
  _cached_size_ = 0;
  clientmsg_ = NULL;
  donecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2WTeamPublishAsk::~PBG2WTeamPublishAsk() {
  SharedDtor();
}

void PBG2WTeamPublishAsk::SharedDtor() {
  if (this != default_instance_) {
    delete clientmsg_;
  }
}

void PBG2WTeamPublishAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2WTeamPublishAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2WTeamPublishAsk_descriptor_;
}

const PBG2WTeamPublishAsk& PBG2WTeamPublishAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2WTeamPublishAsk* PBG2WTeamPublishAsk::default_instance_ = NULL;

PBG2WTeamPublishAsk* PBG2WTeamPublishAsk::New() const {
  return new PBG2WTeamPublishAsk;
}

void PBG2WTeamPublishAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientmsg()) {
      if (clientmsg_ != NULL) clientmsg_->::PBC2GTeamPublishAsk::Clear();
    }
    donecount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2WTeamPublishAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBC2GTeamPublishAsk clientmsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_donecount;
        break;
      }
      
      // optional uint32 donecount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_donecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donecount_)));
          set_has_donecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2WTeamPublishAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBC2GTeamPublishAsk clientmsg = 1;
  if (has_clientmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clientmsg(), output);
  }
  
  // optional uint32 donecount = 2;
  if (has_donecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->donecount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2WTeamPublishAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBC2GTeamPublishAsk clientmsg = 1;
  if (has_clientmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->clientmsg(), target);
  }
  
  // optional uint32 donecount = 2;
  if (has_donecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->donecount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2WTeamPublishAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBC2GTeamPublishAsk clientmsg = 1;
    if (has_clientmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientmsg());
    }
    
    // optional uint32 donecount = 2;
    if (has_donecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donecount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2WTeamPublishAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2WTeamPublishAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2WTeamPublishAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2WTeamPublishAsk::MergeFrom(const PBG2WTeamPublishAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientmsg()) {
      mutable_clientmsg()->::PBC2GTeamPublishAsk::MergeFrom(from.clientmsg());
    }
    if (from.has_donecount()) {
      set_donecount(from.donecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2WTeamPublishAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2WTeamPublishAsk::CopyFrom(const PBG2WTeamPublishAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2WTeamPublishAsk::IsInitialized() const {
  
  return true;
}

void PBG2WTeamPublishAsk::Swap(PBG2WTeamPublishAsk* other) {
  if (other != this) {
    std::swap(clientmsg_, other->clientmsg_);
    std::swap(donecount_, other->donecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2WTeamPublishAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2WTeamPublishAsk_descriptor_;
  metadata.reflection = PBG2WTeamPublishAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamView::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamView::PBC2GTeamView()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamView::InitAsDefaultInstance() {
}

PBC2GTeamView::PBC2GTeamView(const PBC2GTeamView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamView::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamView::~PBC2GTeamView() {
  SharedDtor();
}

void PBC2GTeamView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamView_descriptor_;
}

const PBC2GTeamView& PBC2GTeamView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamView* PBC2GTeamView::default_instance_ = NULL;

PBC2GTeamView* PBC2GTeamView::New() const {
  return new PBC2GTeamView;
}

void PBC2GTeamView::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamView::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamView::MergeFrom(const PBC2GTeamView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamView::CopyFrom(const PBC2GTeamView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamView::IsInitialized() const {
  
  return true;
}

void PBC2GTeamView::Swap(PBC2GTeamView* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamView_descriptor_;
  metadata.reflection = PBC2GTeamView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTeamInviteTransfer::kDisplayFieldNumber;
const int PBG2CTeamInviteTransfer::kFightpowerFieldNumber;
const int PBG2CTeamInviteTransfer::kTeamTargetIDFieldNumber;
#endif  // !_MSC_VER

PBG2CTeamInviteTransfer::PBG2CTeamInviteTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTeamInviteTransfer::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CTeamInviteTransfer::PBG2CTeamInviteTransfer(const PBG2CTeamInviteTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTeamInviteTransfer::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  fightpower_ = 0u;
  teamtargetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTeamInviteTransfer::~PBG2CTeamInviteTransfer() {
  SharedDtor();
}

void PBG2CTeamInviteTransfer::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBG2CTeamInviteTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTeamInviteTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTeamInviteTransfer_descriptor_;
}

const PBG2CTeamInviteTransfer& PBG2CTeamInviteTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2CTeamInviteTransfer* PBG2CTeamInviteTransfer::default_instance_ = NULL;

PBG2CTeamInviteTransfer* PBG2CTeamInviteTransfer::New() const {
  return new PBG2CTeamInviteTransfer;
}

void PBG2CTeamInviteTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    fightpower_ = 0u;
    teamtargetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTeamInviteTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamTargetID;
        break;
      }
      
      // optional uint32 teamTargetID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamtargetid_)));
          set_has_teamtargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTeamInviteTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fightpower(), output);
  }
  
  // optional uint32 teamTargetID = 3;
  if (has_teamtargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teamtargetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTeamInviteTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fightpower(), target);
  }
  
  // optional uint32 teamTargetID = 3;
  if (has_teamtargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teamtargetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTeamInviteTransfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 fightpower = 2;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
    // optional uint32 teamTargetID = 3;
    if (has_teamtargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamtargetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTeamInviteTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTeamInviteTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTeamInviteTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTeamInviteTransfer::MergeFrom(const PBG2CTeamInviteTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_teamtargetid()) {
      set_teamtargetid(from.teamtargetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTeamInviteTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTeamInviteTransfer::CopyFrom(const PBG2CTeamInviteTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTeamInviteTransfer::IsInitialized() const {
  
  return true;
}

void PBG2CTeamInviteTransfer::Swap(PBG2CTeamInviteTransfer* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(teamtargetid_, other->teamtargetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTeamInviteTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTeamInviteTransfer_descriptor_;
  metadata.reflection = PBG2CTeamInviteTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTeamApplyTransfer::kDisplayFieldNumber;
const int PBG2CTeamApplyTransfer::kFightpowerFieldNumber;
#endif  // !_MSC_VER

PBG2CTeamApplyTransfer::PBG2CTeamApplyTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTeamApplyTransfer::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CTeamApplyTransfer::PBG2CTeamApplyTransfer(const PBG2CTeamApplyTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTeamApplyTransfer::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  fightpower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTeamApplyTransfer::~PBG2CTeamApplyTransfer() {
  SharedDtor();
}

void PBG2CTeamApplyTransfer::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBG2CTeamApplyTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTeamApplyTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTeamApplyTransfer_descriptor_;
}

const PBG2CTeamApplyTransfer& PBG2CTeamApplyTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2CTeamApplyTransfer* PBG2CTeamApplyTransfer::default_instance_ = NULL;

PBG2CTeamApplyTransfer* PBG2CTeamApplyTransfer::New() const {
  return new PBG2CTeamApplyTransfer;
}

void PBG2CTeamApplyTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    fightpower_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTeamApplyTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTeamApplyTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fightpower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTeamApplyTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fightpower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTeamApplyTransfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 fightpower = 2;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTeamApplyTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTeamApplyTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTeamApplyTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTeamApplyTransfer::MergeFrom(const PBG2CTeamApplyTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTeamApplyTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTeamApplyTransfer::CopyFrom(const PBG2CTeamApplyTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTeamApplyTransfer::IsInitialized() const {
  
  return true;
}

void PBG2CTeamApplyTransfer::Swap(PBG2CTeamApplyTransfer* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTeamApplyTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTeamApplyTransfer_descriptor_;
  metadata.reflection = PBG2CTeamApplyTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCallupAsk::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBC2GCallupAsk::PBC2GCallupAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCallupAsk::InitAsDefaultInstance() {
}

PBC2GCallupAsk::PBC2GCallupAsk(const PBC2GCallupAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCallupAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCallupAsk::~PBC2GCallupAsk() {
  SharedDtor();
}

void PBC2GCallupAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCallupAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCallupAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCallupAsk_descriptor_;
}

const PBC2GCallupAsk& PBC2GCallupAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GCallupAsk* PBC2GCallupAsk::default_instance_ = NULL;

PBC2GCallupAsk* PBC2GCallupAsk::New() const {
  return new PBC2GCallupAsk;
}

void PBC2GCallupAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCallupAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCallupAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCallupAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCallupAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCallupAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCallupAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCallupAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCallupAsk::MergeFrom(const PBC2GCallupAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCallupAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCallupAsk::CopyFrom(const PBC2GCallupAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCallupAsk::IsInitialized() const {
  
  return true;
}

void PBC2GCallupAsk::Swap(PBC2GCallupAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCallupAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCallupAsk_descriptor_;
  metadata.reflection = PBC2GCallupAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCallupAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBG2CCallupAck::PBG2CCallupAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCallupAck::InitAsDefaultInstance() {
}

PBG2CCallupAck::PBG2CCallupAck(const PBG2CCallupAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCallupAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCallupAck::~PBG2CCallupAck() {
  SharedDtor();
}

void PBG2CCallupAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCallupAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCallupAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCallupAck_descriptor_;
}

const PBG2CCallupAck& PBG2CCallupAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2CCallupAck* PBG2CCallupAck::default_instance_ = NULL;

PBG2CCallupAck* PBG2CCallupAck::New() const {
  return new PBG2CCallupAck;
}

void PBG2CCallupAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCallupAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCallupAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCallupAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCallupAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCallupAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCallupAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCallupAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCallupAck::MergeFrom(const PBG2CCallupAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCallupAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCallupAck::CopyFrom(const PBG2CCallupAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCallupAck::IsInitialized() const {
  
  return true;
}

void PBG2CCallupAck::Swap(PBG2CCallupAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCallupAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCallupAck_descriptor_;
  metadata.reflection = PBG2CCallupAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GAcceptIdentityAsk::kIdFieldNumber;
const int PBC2GAcceptIdentityAsk::kNpcunitidFieldNumber;
#endif  // !_MSC_VER

PBC2GAcceptIdentityAsk::PBC2GAcceptIdentityAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GAcceptIdentityAsk::InitAsDefaultInstance() {
}

PBC2GAcceptIdentityAsk::PBC2GAcceptIdentityAsk(const PBC2GAcceptIdentityAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GAcceptIdentityAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  npcunitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GAcceptIdentityAsk::~PBC2GAcceptIdentityAsk() {
  SharedDtor();
}

void PBC2GAcceptIdentityAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GAcceptIdentityAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GAcceptIdentityAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GAcceptIdentityAsk_descriptor_;
}

const PBC2GAcceptIdentityAsk& PBC2GAcceptIdentityAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GAcceptIdentityAsk* PBC2GAcceptIdentityAsk::default_instance_ = NULL;

PBC2GAcceptIdentityAsk* PBC2GAcceptIdentityAsk::New() const {
  return new PBC2GAcceptIdentityAsk;
}

void PBC2GAcceptIdentityAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    npcunitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GAcceptIdentityAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npcunitid;
        break;
      }
      
      // optional uint32 npcunitid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcunitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcunitid_)));
          set_has_npcunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GAcceptIdentityAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 npcunitid = 2;
  if (has_npcunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcunitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GAcceptIdentityAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 npcunitid = 2;
  if (has_npcunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcunitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GAcceptIdentityAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 npcunitid = 2;
    if (has_npcunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcunitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GAcceptIdentityAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GAcceptIdentityAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GAcceptIdentityAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GAcceptIdentityAsk::MergeFrom(const PBC2GAcceptIdentityAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_npcunitid()) {
      set_npcunitid(from.npcunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GAcceptIdentityAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GAcceptIdentityAsk::CopyFrom(const PBC2GAcceptIdentityAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GAcceptIdentityAsk::IsInitialized() const {
  
  return true;
}

void PBC2GAcceptIdentityAsk::Swap(PBC2GAcceptIdentityAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(npcunitid_, other->npcunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GAcceptIdentityAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GAcceptIdentityAsk_descriptor_;
  metadata.reflection = PBC2GAcceptIdentityAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CAcceptIdentityAck::kIdFieldNumber;
const int PBG2CAcceptIdentityAck::kNpcunitidFieldNumber;
#endif  // !_MSC_VER

PBG2CAcceptIdentityAck::PBG2CAcceptIdentityAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CAcceptIdentityAck::InitAsDefaultInstance() {
}

PBG2CAcceptIdentityAck::PBG2CAcceptIdentityAck(const PBG2CAcceptIdentityAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CAcceptIdentityAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  npcunitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CAcceptIdentityAck::~PBG2CAcceptIdentityAck() {
  SharedDtor();
}

void PBG2CAcceptIdentityAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CAcceptIdentityAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CAcceptIdentityAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CAcceptIdentityAck_descriptor_;
}

const PBG2CAcceptIdentityAck& PBG2CAcceptIdentityAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2CAcceptIdentityAck* PBG2CAcceptIdentityAck::default_instance_ = NULL;

PBG2CAcceptIdentityAck* PBG2CAcceptIdentityAck::New() const {
  return new PBG2CAcceptIdentityAck;
}

void PBG2CAcceptIdentityAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    npcunitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CAcceptIdentityAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npcunitid;
        break;
      }
      
      // optional uint32 npcunitid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcunitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcunitid_)));
          set_has_npcunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CAcceptIdentityAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 npcunitid = 2;
  if (has_npcunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcunitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CAcceptIdentityAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 npcunitid = 2;
  if (has_npcunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcunitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CAcceptIdentityAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 npcunitid = 2;
    if (has_npcunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcunitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CAcceptIdentityAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CAcceptIdentityAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CAcceptIdentityAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CAcceptIdentityAck::MergeFrom(const PBG2CAcceptIdentityAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_npcunitid()) {
      set_npcunitid(from.npcunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CAcceptIdentityAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CAcceptIdentityAck::CopyFrom(const PBG2CAcceptIdentityAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CAcceptIdentityAck::IsInitialized() const {
  
  return true;
}

void PBG2CAcceptIdentityAck::Swap(PBG2CAcceptIdentityAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(npcunitid_, other->npcunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CAcceptIdentityAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CAcceptIdentityAck_descriptor_;
  metadata.reflection = PBG2CAcceptIdentityAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCheckConditionAsk::kIdFieldNumber;
const int PBC2GCheckConditionAsk::kNpcunitidFieldNumber;
#endif  // !_MSC_VER

PBC2GCheckConditionAsk::PBC2GCheckConditionAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCheckConditionAsk::InitAsDefaultInstance() {
}

PBC2GCheckConditionAsk::PBC2GCheckConditionAsk(const PBC2GCheckConditionAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCheckConditionAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  npcunitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCheckConditionAsk::~PBC2GCheckConditionAsk() {
  SharedDtor();
}

void PBC2GCheckConditionAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCheckConditionAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCheckConditionAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCheckConditionAsk_descriptor_;
}

const PBC2GCheckConditionAsk& PBC2GCheckConditionAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GCheckConditionAsk* PBC2GCheckConditionAsk::default_instance_ = NULL;

PBC2GCheckConditionAsk* PBC2GCheckConditionAsk::New() const {
  return new PBC2GCheckConditionAsk;
}

void PBC2GCheckConditionAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    npcunitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCheckConditionAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npcunitid;
        break;
      }
      
      // optional uint32 npcunitid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcunitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcunitid_)));
          set_has_npcunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCheckConditionAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 npcunitid = 2;
  if (has_npcunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcunitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCheckConditionAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 npcunitid = 2;
  if (has_npcunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcunitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCheckConditionAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 npcunitid = 2;
    if (has_npcunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcunitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCheckConditionAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCheckConditionAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCheckConditionAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCheckConditionAsk::MergeFrom(const PBC2GCheckConditionAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_npcunitid()) {
      set_npcunitid(from.npcunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCheckConditionAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCheckConditionAsk::CopyFrom(const PBC2GCheckConditionAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCheckConditionAsk::IsInitialized() const {
  
  return true;
}

void PBC2GCheckConditionAsk::Swap(PBC2GCheckConditionAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(npcunitid_, other->npcunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCheckConditionAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCheckConditionAsk_descriptor_;
  metadata.reflection = PBC2GCheckConditionAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamMemberCondition::kPlayeridFieldNumber;
const int PBTeamMemberCondition::kItemnumFieldNumber;
const int PBTeamMemberCondition::kEntercountFieldNumber;
const int PBTeamMemberCondition::kLevelFieldNumber;
const int PBTeamMemberCondition::kIsnonearFieldNumber;
const int PBTeamMemberCondition::kIsneedPreFieldNumber;
const int PBTeamMemberCondition::kIshavetaskFieldNumber;
#endif  // !_MSC_VER

PBTeamMemberCondition::PBTeamMemberCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamMemberCondition::InitAsDefaultInstance() {
  itemnum_ = const_cast< ::PBItemNum*>(&::PBItemNum::default_instance());
}

PBTeamMemberCondition::PBTeamMemberCondition(const PBTeamMemberCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamMemberCondition::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  itemnum_ = NULL;
  entercount_ = 0u;
  level_ = 0u;
  isnonear_ = false;
  isneedpre_ = false;
  ishavetask_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamMemberCondition::~PBTeamMemberCondition() {
  SharedDtor();
}

void PBTeamMemberCondition::SharedDtor() {
  if (this != default_instance_) {
    delete itemnum_;
  }
}

void PBTeamMemberCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamMemberCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamMemberCondition_descriptor_;
}

const PBTeamMemberCondition& PBTeamMemberCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamMemberCondition* PBTeamMemberCondition::default_instance_ = NULL;

PBTeamMemberCondition* PBTeamMemberCondition::New() const {
  return new PBTeamMemberCondition;
}

void PBTeamMemberCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_itemnum()) {
      if (itemnum_ != NULL) itemnum_->::PBItemNum::Clear();
    }
    entercount_ = 0u;
    level_ = 0u;
    isnonear_ = false;
    isneedpre_ = false;
    ishavetask_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamMemberCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemnum;
        break;
      }
      
      // optional .PBItemNum itemnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_entercount;
        break;
      }
      
      // optional uint32 entercount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entercount_)));
          set_has_entercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isnonear;
        break;
      }
      
      // optional bool isnonear = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isnonear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnonear_)));
          set_has_isnonear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isneedPre;
        break;
      }
      
      // optional bool isneedPre = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isneedPre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isneedpre_)));
          set_has_isneedpre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ishavetask;
        break;
      }
      
      // optional bool ishavetask = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ishavetask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishavetask_)));
          set_has_ishavetask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamMemberCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional .PBItemNum itemnum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemnum(), output);
  }
  
  // optional uint32 entercount = 3;
  if (has_entercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->entercount(), output);
  }
  
  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }
  
  // optional bool isnonear = 5;
  if (has_isnonear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isnonear(), output);
  }
  
  // optional bool isneedPre = 6;
  if (has_isneedpre()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isneedpre(), output);
  }
  
  // optional bool ishavetask = 7;
  if (has_ishavetask()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ishavetask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamMemberCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional .PBItemNum itemnum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemnum(), target);
  }
  
  // optional uint32 entercount = 3;
  if (has_entercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->entercount(), target);
  }
  
  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }
  
  // optional bool isnonear = 5;
  if (has_isnonear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isnonear(), target);
  }
  
  // optional bool isneedPre = 6;
  if (has_isneedpre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isneedpre(), target);
  }
  
  // optional bool ishavetask = 7;
  if (has_ishavetask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ishavetask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamMemberCondition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional .PBItemNum itemnum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemnum());
    }
    
    // optional uint32 entercount = 3;
    if (has_entercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entercount());
    }
    
    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional bool isnonear = 5;
    if (has_isnonear()) {
      total_size += 1 + 1;
    }
    
    // optional bool isneedPre = 6;
    if (has_isneedpre()) {
      total_size += 1 + 1;
    }
    
    // optional bool ishavetask = 7;
    if (has_ishavetask()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamMemberCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamMemberCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamMemberCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamMemberCondition::MergeFrom(const PBTeamMemberCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_itemnum()) {
      mutable_itemnum()->::PBItemNum::MergeFrom(from.itemnum());
    }
    if (from.has_entercount()) {
      set_entercount(from.entercount());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_isnonear()) {
      set_isnonear(from.isnonear());
    }
    if (from.has_isneedpre()) {
      set_isneedpre(from.isneedpre());
    }
    if (from.has_ishavetask()) {
      set_ishavetask(from.ishavetask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamMemberCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamMemberCondition::CopyFrom(const PBTeamMemberCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamMemberCondition::IsInitialized() const {
  
  return true;
}

void PBTeamMemberCondition::Swap(PBTeamMemberCondition* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(entercount_, other->entercount_);
    std::swap(level_, other->level_);
    std::swap(isnonear_, other->isnonear_);
    std::swap(isneedpre_, other->isneedpre_);
    std::swap(ishavetask_, other->ishavetask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamMemberCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamMemberCondition_descriptor_;
  metadata.reflection = PBTeamMemberCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CheckConditionAck::kIdFieldNumber;
const int PBG2CheckConditionAck::kConditionFieldNumber;
#endif  // !_MSC_VER

PBG2CheckConditionAck::PBG2CheckConditionAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CheckConditionAck::InitAsDefaultInstance() {
}

PBG2CheckConditionAck::PBG2CheckConditionAck(const PBG2CheckConditionAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CheckConditionAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CheckConditionAck::~PBG2CheckConditionAck() {
  SharedDtor();
}

void PBG2CheckConditionAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CheckConditionAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CheckConditionAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CheckConditionAck_descriptor_;
}

const PBG2CheckConditionAck& PBG2CheckConditionAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2CheckConditionAck* PBG2CheckConditionAck::default_instance_ = NULL;

PBG2CheckConditionAck* PBG2CheckConditionAck::New() const {
  return new PBG2CheckConditionAck;
}

void PBG2CheckConditionAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  condition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CheckConditionAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_condition;
        break;
      }
      
      // repeated .PBTeamMemberCondition condition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_condition;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CheckConditionAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .PBTeamMemberCondition condition = 2;
  for (int i = 0; i < this->condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->condition(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CheckConditionAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .PBTeamMemberCondition condition = 2;
  for (int i = 0; i < this->condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->condition(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CheckConditionAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  // repeated .PBTeamMemberCondition condition = 2;
  total_size += 1 * this->condition_size();
  for (int i = 0; i < this->condition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->condition(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CheckConditionAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CheckConditionAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CheckConditionAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CheckConditionAck::MergeFrom(const PBG2CheckConditionAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  condition_.MergeFrom(from.condition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CheckConditionAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CheckConditionAck::CopyFrom(const PBG2CheckConditionAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CheckConditionAck::IsInitialized() const {
  
  return true;
}

void PBG2CheckConditionAck::Swap(PBG2CheckConditionAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    condition_.Swap(&other->condition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CheckConditionAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CheckConditionAck_descriptor_;
  metadata.reflection = PBG2CheckConditionAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamApplicant::kPlayeridFieldNumber;
const int PBTeamApplicant::kNameFieldNumber;
const int PBTeamApplicant::kLevelFieldNumber;
const int PBTeamApplicant::kJobFieldNumber;
const int PBTeamApplicant::kFightpowerFieldNumber;
const int PBTeamApplicant::kRelationshipFieldNumber;
const int PBTeamApplicant::kFactionnameFieldNumber;
const int PBTeamApplicant::kFactionidFieldNumber;
#endif  // !_MSC_VER

PBTeamApplicant::PBTeamApplicant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamApplicant::InitAsDefaultInstance() {
}

PBTeamApplicant::PBTeamApplicant(const PBTeamApplicant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamApplicant::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  fightpower_ = 0u;
  relationship_ = 0u;
  factionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  factionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamApplicant::~PBTeamApplicant() {
  SharedDtor();
}

void PBTeamApplicant::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (factionname_ != &::google::protobuf::internal::kEmptyString) {
    delete factionname_;
  }
  if (this != default_instance_) {
  }
}

void PBTeamApplicant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamApplicant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamApplicant_descriptor_;
}

const PBTeamApplicant& PBTeamApplicant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamApplicant* PBTeamApplicant::default_instance_ = NULL;

PBTeamApplicant* PBTeamApplicant::New() const {
  return new PBTeamApplicant;
}

void PBTeamApplicant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    fightpower_ = 0u;
    relationship_ = 0u;
    if (has_factionname()) {
      if (factionname_ != &::google::protobuf::internal::kEmptyString) {
        factionname_->clear();
      }
    }
    factionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamApplicant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }
      
      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_relationship;
        break;
      }
      
      // optional uint32 relationship = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relationship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relationship_)));
          set_has_relationship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_factionname;
        break;
      }
      
      // optional string factionname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factionname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_factionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->factionname().data(), this->factionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_factionid;
        break;
      }
      
      // optional uint32 factionid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamApplicant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }
  
  // optional uint32 fightpower = 5;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fightpower(), output);
  }
  
  // optional uint32 relationship = 6;
  if (has_relationship()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->relationship(), output);
  }
  
  // optional string factionname = 7;
  if (has_factionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionname().data(), this->factionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->factionname(), output);
  }
  
  // optional uint32 factionid = 8;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->factionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamApplicant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }
  
  // optional uint32 fightpower = 5;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fightpower(), target);
  }
  
  // optional uint32 relationship = 6;
  if (has_relationship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->relationship(), target);
  }
  
  // optional string factionname = 7;
  if (has_factionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionname().data(), this->factionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->factionname(), target);
  }
  
  // optional uint32 factionid = 8;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->factionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamApplicant::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }
    
    // optional uint32 fightpower = 5;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
    // optional uint32 relationship = 6;
    if (has_relationship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relationship());
    }
    
    // optional string factionname = 7;
    if (has_factionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->factionname());
    }
    
    // optional uint32 factionid = 8;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamApplicant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamApplicant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamApplicant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamApplicant::MergeFrom(const PBTeamApplicant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_relationship()) {
      set_relationship(from.relationship());
    }
    if (from.has_factionname()) {
      set_factionname(from.factionname());
    }
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamApplicant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamApplicant::CopyFrom(const PBTeamApplicant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamApplicant::IsInitialized() const {
  
  return true;
}

void PBTeamApplicant::Swap(PBTeamApplicant* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(relationship_, other->relationship_);
    std::swap(factionname_, other->factionname_);
    std::swap(factionid_, other->factionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamApplicant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamApplicant_descriptor_;
  metadata.reflection = PBTeamApplicant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamCreateAsk::kTargetFieldNumber;
#endif  // !_MSC_VER

PBTeamCreateAsk::PBTeamCreateAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamCreateAsk::InitAsDefaultInstance() {
  target_ = const_cast< ::PBTeamTarget*>(&::PBTeamTarget::default_instance());
}

PBTeamCreateAsk::PBTeamCreateAsk(const PBTeamCreateAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamCreateAsk::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamCreateAsk::~PBTeamCreateAsk() {
  SharedDtor();
}

void PBTeamCreateAsk::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void PBTeamCreateAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamCreateAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamCreateAsk_descriptor_;
}

const PBTeamCreateAsk& PBTeamCreateAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamCreateAsk* PBTeamCreateAsk::default_instance_ = NULL;

PBTeamCreateAsk* PBTeamCreateAsk::New() const {
  return new PBTeamCreateAsk;
}

void PBTeamCreateAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::PBTeamTarget::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamCreateAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBTeamTarget target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamCreateAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBTeamTarget target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamCreateAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBTeamTarget target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamCreateAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBTeamTarget target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamCreateAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamCreateAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamCreateAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamCreateAsk::MergeFrom(const PBTeamCreateAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      mutable_target()->::PBTeamTarget::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamCreateAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamCreateAsk::CopyFrom(const PBTeamCreateAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamCreateAsk::IsInitialized() const {
  
  return true;
}

void PBTeamCreateAsk::Swap(PBTeamCreateAsk* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamCreateAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamCreateAsk_descriptor_;
  metadata.reflection = PBTeamCreateAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamCreateAck::kTeamFieldNumber;
#endif  // !_MSC_VER

PBTeamCreateAck::PBTeamCreateAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamCreateAck::InitAsDefaultInstance() {
  team_ = const_cast< ::PBTeamInfo*>(&::PBTeamInfo::default_instance());
}

PBTeamCreateAck::PBTeamCreateAck(const PBTeamCreateAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamCreateAck::SharedCtor() {
  _cached_size_ = 0;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamCreateAck::~PBTeamCreateAck() {
  SharedDtor();
}

void PBTeamCreateAck::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void PBTeamCreateAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamCreateAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamCreateAck_descriptor_;
}

const PBTeamCreateAck& PBTeamCreateAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamCreateAck* PBTeamCreateAck::default_instance_ = NULL;

PBTeamCreateAck* PBTeamCreateAck::New() const {
  return new PBTeamCreateAck;
}

void PBTeamCreateAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team()) {
      if (team_ != NULL) team_->::PBTeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamCreateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBTeamInfo team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamCreateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBTeamInfo team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamCreateAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBTeamInfo team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamCreateAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBTeamInfo team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamCreateAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamCreateAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamCreateAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamCreateAck::MergeFrom(const PBTeamCreateAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      mutable_team()->::PBTeamInfo::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamCreateAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamCreateAck::CopyFrom(const PBTeamCreateAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamCreateAck::IsInitialized() const {
  
  return true;
}

void PBTeamCreateAck::Swap(PBTeamCreateAck* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamCreateAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamCreateAck_descriptor_;
  metadata.reflection = PBTeamCreateAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamSetTargetAsk::kTargetFieldNumber;
#endif  // !_MSC_VER

PBTeamSetTargetAsk::PBTeamSetTargetAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamSetTargetAsk::InitAsDefaultInstance() {
  target_ = const_cast< ::PBTeamTarget*>(&::PBTeamTarget::default_instance());
}

PBTeamSetTargetAsk::PBTeamSetTargetAsk(const PBTeamSetTargetAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamSetTargetAsk::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamSetTargetAsk::~PBTeamSetTargetAsk() {
  SharedDtor();
}

void PBTeamSetTargetAsk::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void PBTeamSetTargetAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamSetTargetAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamSetTargetAsk_descriptor_;
}

const PBTeamSetTargetAsk& PBTeamSetTargetAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamSetTargetAsk* PBTeamSetTargetAsk::default_instance_ = NULL;

PBTeamSetTargetAsk* PBTeamSetTargetAsk::New() const {
  return new PBTeamSetTargetAsk;
}

void PBTeamSetTargetAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::PBTeamTarget::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamSetTargetAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBTeamTarget target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamSetTargetAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBTeamTarget target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamSetTargetAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBTeamTarget target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamSetTargetAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBTeamTarget target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamSetTargetAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamSetTargetAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamSetTargetAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamSetTargetAsk::MergeFrom(const PBTeamSetTargetAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      mutable_target()->::PBTeamTarget::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamSetTargetAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamSetTargetAsk::CopyFrom(const PBTeamSetTargetAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamSetTargetAsk::IsInitialized() const {
  
  return true;
}

void PBTeamSetTargetAsk::Swap(PBTeamSetTargetAsk* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamSetTargetAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamSetTargetAsk_descriptor_;
  metadata.reflection = PBTeamSetTargetAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamSetTargetAck::kTargetFieldNumber;
#endif  // !_MSC_VER

PBTeamSetTargetAck::PBTeamSetTargetAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamSetTargetAck::InitAsDefaultInstance() {
  target_ = const_cast< ::PBTeamTarget*>(&::PBTeamTarget::default_instance());
}

PBTeamSetTargetAck::PBTeamSetTargetAck(const PBTeamSetTargetAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamSetTargetAck::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamSetTargetAck::~PBTeamSetTargetAck() {
  SharedDtor();
}

void PBTeamSetTargetAck::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void PBTeamSetTargetAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamSetTargetAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamSetTargetAck_descriptor_;
}

const PBTeamSetTargetAck& PBTeamSetTargetAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamSetTargetAck* PBTeamSetTargetAck::default_instance_ = NULL;

PBTeamSetTargetAck* PBTeamSetTargetAck::New() const {
  return new PBTeamSetTargetAck;
}

void PBTeamSetTargetAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::PBTeamTarget::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamSetTargetAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBTeamTarget target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamSetTargetAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBTeamTarget target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamSetTargetAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBTeamTarget target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamSetTargetAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBTeamTarget target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamSetTargetAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamSetTargetAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamSetTargetAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamSetTargetAck::MergeFrom(const PBTeamSetTargetAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      mutable_target()->::PBTeamTarget::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamSetTargetAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamSetTargetAck::CopyFrom(const PBTeamSetTargetAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamSetTargetAck::IsInitialized() const {
  
  return true;
}

void PBTeamSetTargetAck::Swap(PBTeamSetTargetAck* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamSetTargetAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamSetTargetAck_descriptor_;
  metadata.reflection = PBTeamSetTargetAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSetAutoAcceptAsk::kIsopenFieldNumber;
#endif  // !_MSC_VER

PBSetAutoAcceptAsk::PBSetAutoAcceptAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSetAutoAcceptAsk::InitAsDefaultInstance() {
}

PBSetAutoAcceptAsk::PBSetAutoAcceptAsk(const PBSetAutoAcceptAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSetAutoAcceptAsk::SharedCtor() {
  _cached_size_ = 0;
  isopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSetAutoAcceptAsk::~PBSetAutoAcceptAsk() {
  SharedDtor();
}

void PBSetAutoAcceptAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSetAutoAcceptAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSetAutoAcceptAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSetAutoAcceptAsk_descriptor_;
}

const PBSetAutoAcceptAsk& PBSetAutoAcceptAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBSetAutoAcceptAsk* PBSetAutoAcceptAsk::default_instance_ = NULL;

PBSetAutoAcceptAsk* PBSetAutoAcceptAsk::New() const {
  return new PBSetAutoAcceptAsk;
}

void PBSetAutoAcceptAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isopen_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSetAutoAcceptAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isopen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSetAutoAcceptAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isopen(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSetAutoAcceptAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isopen(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSetAutoAcceptAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isopen = 1;
    if (has_isopen()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSetAutoAcceptAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSetAutoAcceptAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSetAutoAcceptAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSetAutoAcceptAsk::MergeFrom(const PBSetAutoAcceptAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSetAutoAcceptAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSetAutoAcceptAsk::CopyFrom(const PBSetAutoAcceptAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSetAutoAcceptAsk::IsInitialized() const {
  
  return true;
}

void PBSetAutoAcceptAsk::Swap(PBSetAutoAcceptAsk* other) {
  if (other != this) {
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSetAutoAcceptAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSetAutoAcceptAsk_descriptor_;
  metadata.reflection = PBSetAutoAcceptAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSetAutoAcceptAck::kIsopenFieldNumber;
#endif  // !_MSC_VER

PBSetAutoAcceptAck::PBSetAutoAcceptAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSetAutoAcceptAck::InitAsDefaultInstance() {
}

PBSetAutoAcceptAck::PBSetAutoAcceptAck(const PBSetAutoAcceptAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSetAutoAcceptAck::SharedCtor() {
  _cached_size_ = 0;
  isopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSetAutoAcceptAck::~PBSetAutoAcceptAck() {
  SharedDtor();
}

void PBSetAutoAcceptAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSetAutoAcceptAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSetAutoAcceptAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSetAutoAcceptAck_descriptor_;
}

const PBSetAutoAcceptAck& PBSetAutoAcceptAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBSetAutoAcceptAck* PBSetAutoAcceptAck::default_instance_ = NULL;

PBSetAutoAcceptAck* PBSetAutoAcceptAck::New() const {
  return new PBSetAutoAcceptAck;
}

void PBSetAutoAcceptAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isopen_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSetAutoAcceptAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isopen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSetAutoAcceptAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isopen(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSetAutoAcceptAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isopen(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSetAutoAcceptAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isopen = 1;
    if (has_isopen()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSetAutoAcceptAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSetAutoAcceptAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSetAutoAcceptAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSetAutoAcceptAck::MergeFrom(const PBSetAutoAcceptAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSetAutoAcceptAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSetAutoAcceptAck::CopyFrom(const PBSetAutoAcceptAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSetAutoAcceptAck::IsInitialized() const {
  
  return true;
}

void PBSetAutoAcceptAck::Swap(PBSetAutoAcceptAck* other) {
  if (other != this) {
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSetAutoAcceptAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSetAutoAcceptAck_descriptor_;
  metadata.reflection = PBSetAutoAcceptAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSetAutoMatchAsk::kIsopenFieldNumber;
#endif  // !_MSC_VER

PBSetAutoMatchAsk::PBSetAutoMatchAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSetAutoMatchAsk::InitAsDefaultInstance() {
}

PBSetAutoMatchAsk::PBSetAutoMatchAsk(const PBSetAutoMatchAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSetAutoMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  isopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSetAutoMatchAsk::~PBSetAutoMatchAsk() {
  SharedDtor();
}

void PBSetAutoMatchAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSetAutoMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSetAutoMatchAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSetAutoMatchAsk_descriptor_;
}

const PBSetAutoMatchAsk& PBSetAutoMatchAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBSetAutoMatchAsk* PBSetAutoMatchAsk::default_instance_ = NULL;

PBSetAutoMatchAsk* PBSetAutoMatchAsk::New() const {
  return new PBSetAutoMatchAsk;
}

void PBSetAutoMatchAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isopen_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSetAutoMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isopen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSetAutoMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isopen(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSetAutoMatchAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isopen(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSetAutoMatchAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isopen = 1;
    if (has_isopen()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSetAutoMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSetAutoMatchAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSetAutoMatchAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSetAutoMatchAsk::MergeFrom(const PBSetAutoMatchAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSetAutoMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSetAutoMatchAsk::CopyFrom(const PBSetAutoMatchAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSetAutoMatchAsk::IsInitialized() const {
  
  return true;
}

void PBSetAutoMatchAsk::Swap(PBSetAutoMatchAsk* other) {
  if (other != this) {
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSetAutoMatchAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSetAutoMatchAsk_descriptor_;
  metadata.reflection = PBSetAutoMatchAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSetAutoMatchAck::kIsopenFieldNumber;
#endif  // !_MSC_VER

PBSetAutoMatchAck::PBSetAutoMatchAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSetAutoMatchAck::InitAsDefaultInstance() {
}

PBSetAutoMatchAck::PBSetAutoMatchAck(const PBSetAutoMatchAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSetAutoMatchAck::SharedCtor() {
  _cached_size_ = 0;
  isopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSetAutoMatchAck::~PBSetAutoMatchAck() {
  SharedDtor();
}

void PBSetAutoMatchAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSetAutoMatchAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSetAutoMatchAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSetAutoMatchAck_descriptor_;
}

const PBSetAutoMatchAck& PBSetAutoMatchAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBSetAutoMatchAck* PBSetAutoMatchAck::default_instance_ = NULL;

PBSetAutoMatchAck* PBSetAutoMatchAck::New() const {
  return new PBSetAutoMatchAck;
}

void PBSetAutoMatchAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isopen_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSetAutoMatchAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isopen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSetAutoMatchAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isopen(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSetAutoMatchAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isopen(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSetAutoMatchAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isopen = 1;
    if (has_isopen()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSetAutoMatchAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSetAutoMatchAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSetAutoMatchAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSetAutoMatchAck::MergeFrom(const PBSetAutoMatchAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSetAutoMatchAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSetAutoMatchAck::CopyFrom(const PBSetAutoMatchAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSetAutoMatchAck::IsInitialized() const {
  
  return true;
}

void PBSetAutoMatchAck::Swap(PBSetAutoMatchAck* other) {
  if (other != this) {
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSetAutoMatchAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSetAutoMatchAck_descriptor_;
  metadata.reflection = PBSetAutoMatchAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSetAutoMatchJoinAsk::kIsopenFieldNumber;
const int PBSetAutoMatchJoinAsk::kTargetidFieldNumber;
#endif  // !_MSC_VER

PBSetAutoMatchJoinAsk::PBSetAutoMatchJoinAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSetAutoMatchJoinAsk::InitAsDefaultInstance() {
}

PBSetAutoMatchJoinAsk::PBSetAutoMatchJoinAsk(const PBSetAutoMatchJoinAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSetAutoMatchJoinAsk::SharedCtor() {
  _cached_size_ = 0;
  isopen_ = false;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSetAutoMatchJoinAsk::~PBSetAutoMatchJoinAsk() {
  SharedDtor();
}

void PBSetAutoMatchJoinAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSetAutoMatchJoinAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSetAutoMatchJoinAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSetAutoMatchJoinAsk_descriptor_;
}

const PBSetAutoMatchJoinAsk& PBSetAutoMatchJoinAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBSetAutoMatchJoinAsk* PBSetAutoMatchJoinAsk::default_instance_ = NULL;

PBSetAutoMatchJoinAsk* PBSetAutoMatchJoinAsk::New() const {
  return new PBSetAutoMatchJoinAsk;
}

void PBSetAutoMatchJoinAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isopen_ = false;
    targetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSetAutoMatchJoinAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isopen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSetAutoMatchJoinAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isopen(), output);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSetAutoMatchJoinAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isopen(), target);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSetAutoMatchJoinAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isopen = 1;
    if (has_isopen()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 targetid = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSetAutoMatchJoinAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSetAutoMatchJoinAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSetAutoMatchJoinAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSetAutoMatchJoinAsk::MergeFrom(const PBSetAutoMatchJoinAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSetAutoMatchJoinAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSetAutoMatchJoinAsk::CopyFrom(const PBSetAutoMatchJoinAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSetAutoMatchJoinAsk::IsInitialized() const {
  
  return true;
}

void PBSetAutoMatchJoinAsk::Swap(PBSetAutoMatchJoinAsk* other) {
  if (other != this) {
    std::swap(isopen_, other->isopen_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSetAutoMatchJoinAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSetAutoMatchJoinAsk_descriptor_;
  metadata.reflection = PBSetAutoMatchJoinAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSetAutoMatchJoinAck::kIsopenFieldNumber;
const int PBSetAutoMatchJoinAck::kTargetidFieldNumber;
#endif  // !_MSC_VER

PBSetAutoMatchJoinAck::PBSetAutoMatchJoinAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSetAutoMatchJoinAck::InitAsDefaultInstance() {
}

PBSetAutoMatchJoinAck::PBSetAutoMatchJoinAck(const PBSetAutoMatchJoinAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSetAutoMatchJoinAck::SharedCtor() {
  _cached_size_ = 0;
  isopen_ = false;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSetAutoMatchJoinAck::~PBSetAutoMatchJoinAck() {
  SharedDtor();
}

void PBSetAutoMatchJoinAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSetAutoMatchJoinAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSetAutoMatchJoinAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSetAutoMatchJoinAck_descriptor_;
}

const PBSetAutoMatchJoinAck& PBSetAutoMatchJoinAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBSetAutoMatchJoinAck* PBSetAutoMatchJoinAck::default_instance_ = NULL;

PBSetAutoMatchJoinAck* PBSetAutoMatchJoinAck::New() const {
  return new PBSetAutoMatchJoinAck;
}

void PBSetAutoMatchJoinAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isopen_ = false;
    targetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSetAutoMatchJoinAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isopen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSetAutoMatchJoinAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isopen(), output);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSetAutoMatchJoinAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isopen = 1;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isopen(), target);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSetAutoMatchJoinAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isopen = 1;
    if (has_isopen()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 targetid = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSetAutoMatchJoinAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSetAutoMatchJoinAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSetAutoMatchJoinAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSetAutoMatchJoinAck::MergeFrom(const PBSetAutoMatchJoinAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSetAutoMatchJoinAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSetAutoMatchJoinAck::CopyFrom(const PBSetAutoMatchJoinAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSetAutoMatchJoinAck::IsInitialized() const {
  
  return true;
}

void PBSetAutoMatchJoinAck::Swap(PBSetAutoMatchJoinAck* other) {
  if (other != this) {
    std::swap(isopen_, other->isopen_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSetAutoMatchJoinAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSetAutoMatchJoinAck_descriptor_;
  metadata.reflection = PBSetAutoMatchJoinAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSetAutoMatchJobLimitAsk::kJobsFieldNumber;
#endif  // !_MSC_VER

PBSetAutoMatchJobLimitAsk::PBSetAutoMatchJobLimitAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSetAutoMatchJobLimitAsk::InitAsDefaultInstance() {
  jobs_ = const_cast< ::PBTeamMemberJobRequire*>(&::PBTeamMemberJobRequire::default_instance());
}

PBSetAutoMatchJobLimitAsk::PBSetAutoMatchJobLimitAsk(const PBSetAutoMatchJobLimitAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSetAutoMatchJobLimitAsk::SharedCtor() {
  _cached_size_ = 0;
  jobs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSetAutoMatchJobLimitAsk::~PBSetAutoMatchJobLimitAsk() {
  SharedDtor();
}

void PBSetAutoMatchJobLimitAsk::SharedDtor() {
  if (this != default_instance_) {
    delete jobs_;
  }
}

void PBSetAutoMatchJobLimitAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSetAutoMatchJobLimitAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSetAutoMatchJobLimitAsk_descriptor_;
}

const PBSetAutoMatchJobLimitAsk& PBSetAutoMatchJobLimitAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBSetAutoMatchJobLimitAsk* PBSetAutoMatchJobLimitAsk::default_instance_ = NULL;

PBSetAutoMatchJobLimitAsk* PBSetAutoMatchJobLimitAsk::New() const {
  return new PBSetAutoMatchJobLimitAsk;
}

void PBSetAutoMatchJobLimitAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_jobs()) {
      if (jobs_ != NULL) jobs_->::PBTeamMemberJobRequire::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSetAutoMatchJobLimitAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBTeamMemberJobRequire jobs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jobs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSetAutoMatchJobLimitAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBTeamMemberJobRequire jobs = 1;
  if (has_jobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jobs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSetAutoMatchJobLimitAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBTeamMemberJobRequire jobs = 1;
  if (has_jobs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jobs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSetAutoMatchJobLimitAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBTeamMemberJobRequire jobs = 1;
    if (has_jobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jobs());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSetAutoMatchJobLimitAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSetAutoMatchJobLimitAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSetAutoMatchJobLimitAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSetAutoMatchJobLimitAsk::MergeFrom(const PBSetAutoMatchJobLimitAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jobs()) {
      mutable_jobs()->::PBTeamMemberJobRequire::MergeFrom(from.jobs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSetAutoMatchJobLimitAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSetAutoMatchJobLimitAsk::CopyFrom(const PBSetAutoMatchJobLimitAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSetAutoMatchJobLimitAsk::IsInitialized() const {
  
  return true;
}

void PBSetAutoMatchJobLimitAsk::Swap(PBSetAutoMatchJobLimitAsk* other) {
  if (other != this) {
    std::swap(jobs_, other->jobs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSetAutoMatchJobLimitAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSetAutoMatchJobLimitAsk_descriptor_;
  metadata.reflection = PBSetAutoMatchJobLimitAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSetAutoMatchJobLimitAck::kJobsFieldNumber;
#endif  // !_MSC_VER

PBSetAutoMatchJobLimitAck::PBSetAutoMatchJobLimitAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSetAutoMatchJobLimitAck::InitAsDefaultInstance() {
}

PBSetAutoMatchJobLimitAck::PBSetAutoMatchJobLimitAck(const PBSetAutoMatchJobLimitAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSetAutoMatchJobLimitAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSetAutoMatchJobLimitAck::~PBSetAutoMatchJobLimitAck() {
  SharedDtor();
}

void PBSetAutoMatchJobLimitAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSetAutoMatchJobLimitAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSetAutoMatchJobLimitAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSetAutoMatchJobLimitAck_descriptor_;
}

const PBSetAutoMatchJobLimitAck& PBSetAutoMatchJobLimitAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBSetAutoMatchJobLimitAck* PBSetAutoMatchJobLimitAck::default_instance_ = NULL;

PBSetAutoMatchJobLimitAck* PBSetAutoMatchJobLimitAck::New() const {
  return new PBSetAutoMatchJobLimitAck;
}

void PBSetAutoMatchJobLimitAck::Clear() {
  jobs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSetAutoMatchJobLimitAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBTeamMemberJobRequire jobs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jobs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_jobs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSetAutoMatchJobLimitAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBTeamMemberJobRequire jobs = 1;
  for (int i = 0; i < this->jobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jobs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSetAutoMatchJobLimitAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBTeamMemberJobRequire jobs = 1;
  for (int i = 0; i < this->jobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jobs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSetAutoMatchJobLimitAck::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBTeamMemberJobRequire jobs = 1;
  total_size += 1 * this->jobs_size();
  for (int i = 0; i < this->jobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jobs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSetAutoMatchJobLimitAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSetAutoMatchJobLimitAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSetAutoMatchJobLimitAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSetAutoMatchJobLimitAck::MergeFrom(const PBSetAutoMatchJobLimitAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  jobs_.MergeFrom(from.jobs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSetAutoMatchJobLimitAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSetAutoMatchJobLimitAck::CopyFrom(const PBSetAutoMatchJobLimitAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSetAutoMatchJobLimitAck::IsInitialized() const {
  
  return true;
}

void PBSetAutoMatchJobLimitAck::Swap(PBSetAutoMatchJobLimitAck* other) {
  if (other != this) {
    jobs_.Swap(&other->jobs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSetAutoMatchJobLimitAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSetAutoMatchJobLimitAck_descriptor_;
  metadata.reflection = PBSetAutoMatchJobLimitAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBGetApplicantListAsk::PBGetApplicantListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGetApplicantListAsk::InitAsDefaultInstance() {
}

PBGetApplicantListAsk::PBGetApplicantListAsk(const PBGetApplicantListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGetApplicantListAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGetApplicantListAsk::~PBGetApplicantListAsk() {
  SharedDtor();
}

void PBGetApplicantListAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGetApplicantListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGetApplicantListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGetApplicantListAsk_descriptor_;
}

const PBGetApplicantListAsk& PBGetApplicantListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBGetApplicantListAsk* PBGetApplicantListAsk::default_instance_ = NULL;

PBGetApplicantListAsk* PBGetApplicantListAsk::New() const {
  return new PBGetApplicantListAsk;
}

void PBGetApplicantListAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGetApplicantListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBGetApplicantListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGetApplicantListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGetApplicantListAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGetApplicantListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGetApplicantListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGetApplicantListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGetApplicantListAsk::MergeFrom(const PBGetApplicantListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGetApplicantListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGetApplicantListAsk::CopyFrom(const PBGetApplicantListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGetApplicantListAsk::IsInitialized() const {
  
  return true;
}

void PBGetApplicantListAsk::Swap(PBGetApplicantListAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGetApplicantListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGetApplicantListAsk_descriptor_;
  metadata.reflection = PBGetApplicantListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGetApplicantListAck::kApplicantsFieldNumber;
#endif  // !_MSC_VER

PBGetApplicantListAck::PBGetApplicantListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGetApplicantListAck::InitAsDefaultInstance() {
}

PBGetApplicantListAck::PBGetApplicantListAck(const PBGetApplicantListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGetApplicantListAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGetApplicantListAck::~PBGetApplicantListAck() {
  SharedDtor();
}

void PBGetApplicantListAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGetApplicantListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGetApplicantListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGetApplicantListAck_descriptor_;
}

const PBGetApplicantListAck& PBGetApplicantListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBGetApplicantListAck* PBGetApplicantListAck::default_instance_ = NULL;

PBGetApplicantListAck* PBGetApplicantListAck::New() const {
  return new PBGetApplicantListAck;
}

void PBGetApplicantListAck::Clear() {
  applicants_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGetApplicantListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBTeamApplicant applicants = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applicants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applicants()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_applicants;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGetApplicantListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBTeamApplicant applicants = 1;
  for (int i = 0; i < this->applicants_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applicants(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGetApplicantListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBTeamApplicant applicants = 1;
  for (int i = 0; i < this->applicants_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applicants(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGetApplicantListAck::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBTeamApplicant applicants = 1;
  total_size += 1 * this->applicants_size();
  for (int i = 0; i < this->applicants_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applicants(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGetApplicantListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGetApplicantListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGetApplicantListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGetApplicantListAck::MergeFrom(const PBGetApplicantListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  applicants_.MergeFrom(from.applicants_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGetApplicantListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGetApplicantListAck::CopyFrom(const PBGetApplicantListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGetApplicantListAck::IsInitialized() const {
  
  return true;
}

void PBGetApplicantListAck::Swap(PBGetApplicantListAck* other) {
  if (other != this) {
    applicants_.Swap(&other->applicants_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGetApplicantListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGetApplicantListAck_descriptor_;
  metadata.reflection = PBGetApplicantListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBClearApplicantListAsk::PBClearApplicantListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClearApplicantListAsk::InitAsDefaultInstance() {
}

PBClearApplicantListAsk::PBClearApplicantListAsk(const PBClearApplicantListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClearApplicantListAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClearApplicantListAsk::~PBClearApplicantListAsk() {
  SharedDtor();
}

void PBClearApplicantListAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBClearApplicantListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClearApplicantListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClearApplicantListAsk_descriptor_;
}

const PBClearApplicantListAsk& PBClearApplicantListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBClearApplicantListAsk* PBClearApplicantListAsk::default_instance_ = NULL;

PBClearApplicantListAsk* PBClearApplicantListAsk::New() const {
  return new PBClearApplicantListAsk;
}

void PBClearApplicantListAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClearApplicantListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBClearApplicantListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClearApplicantListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClearApplicantListAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClearApplicantListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClearApplicantListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClearApplicantListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClearApplicantListAsk::MergeFrom(const PBClearApplicantListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClearApplicantListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClearApplicantListAsk::CopyFrom(const PBClearApplicantListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClearApplicantListAsk::IsInitialized() const {
  
  return true;
}

void PBClearApplicantListAsk::Swap(PBClearApplicantListAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClearApplicantListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClearApplicantListAsk_descriptor_;
  metadata.reflection = PBClearApplicantListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBClearApplicantListAck::PBClearApplicantListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClearApplicantListAck::InitAsDefaultInstance() {
}

PBClearApplicantListAck::PBClearApplicantListAck(const PBClearApplicantListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClearApplicantListAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClearApplicantListAck::~PBClearApplicantListAck() {
  SharedDtor();
}

void PBClearApplicantListAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBClearApplicantListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClearApplicantListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClearApplicantListAck_descriptor_;
}

const PBClearApplicantListAck& PBClearApplicantListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBClearApplicantListAck* PBClearApplicantListAck::default_instance_ = NULL;

PBClearApplicantListAck* PBClearApplicantListAck::New() const {
  return new PBClearApplicantListAck;
}

void PBClearApplicantListAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClearApplicantListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBClearApplicantListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClearApplicantListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClearApplicantListAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClearApplicantListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClearApplicantListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClearApplicantListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClearApplicantListAck::MergeFrom(const PBClearApplicantListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClearApplicantListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClearApplicantListAck::CopyFrom(const PBClearApplicantListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClearApplicantListAck::IsInitialized() const {
  
  return true;
}

void PBClearApplicantListAck::Swap(PBClearApplicantListAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClearApplicantListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClearApplicantListAck_descriptor_;
  metadata.reflection = PBClearApplicantListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamAcceptApplyFromListAsk::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamAcceptApplyFromListAsk::PBC2GTeamAcceptApplyFromListAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamAcceptApplyFromListAsk::InitAsDefaultInstance() {
}

PBC2GTeamAcceptApplyFromListAsk::PBC2GTeamAcceptApplyFromListAsk(const PBC2GTeamAcceptApplyFromListAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamAcceptApplyFromListAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamAcceptApplyFromListAsk::~PBC2GTeamAcceptApplyFromListAsk() {
  SharedDtor();
}

void PBC2GTeamAcceptApplyFromListAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamAcceptApplyFromListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamAcceptApplyFromListAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamAcceptApplyFromListAsk_descriptor_;
}

const PBC2GTeamAcceptApplyFromListAsk& PBC2GTeamAcceptApplyFromListAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamAcceptApplyFromListAsk* PBC2GTeamAcceptApplyFromListAsk::default_instance_ = NULL;

PBC2GTeamAcceptApplyFromListAsk* PBC2GTeamAcceptApplyFromListAsk::New() const {
  return new PBC2GTeamAcceptApplyFromListAsk;
}

void PBC2GTeamAcceptApplyFromListAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamAcceptApplyFromListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamAcceptApplyFromListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamAcceptApplyFromListAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamAcceptApplyFromListAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamAcceptApplyFromListAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamAcceptApplyFromListAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamAcceptApplyFromListAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamAcceptApplyFromListAsk::MergeFrom(const PBC2GTeamAcceptApplyFromListAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamAcceptApplyFromListAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamAcceptApplyFromListAsk::CopyFrom(const PBC2GTeamAcceptApplyFromListAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamAcceptApplyFromListAsk::IsInitialized() const {
  
  return true;
}

void PBC2GTeamAcceptApplyFromListAsk::Swap(PBC2GTeamAcceptApplyFromListAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamAcceptApplyFromListAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamAcceptApplyFromListAsk_descriptor_;
  metadata.reflection = PBC2GTeamAcceptApplyFromListAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTeamAcceptApplyFromListAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBTeamAcceptApplyFromListAck::PBTeamAcceptApplyFromListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTeamAcceptApplyFromListAck::InitAsDefaultInstance() {
}

PBTeamAcceptApplyFromListAck::PBTeamAcceptApplyFromListAck(const PBTeamAcceptApplyFromListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTeamAcceptApplyFromListAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTeamAcceptApplyFromListAck::~PBTeamAcceptApplyFromListAck() {
  SharedDtor();
}

void PBTeamAcceptApplyFromListAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTeamAcceptApplyFromListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTeamAcceptApplyFromListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTeamAcceptApplyFromListAck_descriptor_;
}

const PBTeamAcceptApplyFromListAck& PBTeamAcceptApplyFromListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBTeamAcceptApplyFromListAck* PBTeamAcceptApplyFromListAck::default_instance_ = NULL;

PBTeamAcceptApplyFromListAck* PBTeamAcceptApplyFromListAck::New() const {
  return new PBTeamAcceptApplyFromListAck;
}

void PBTeamAcceptApplyFromListAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTeamAcceptApplyFromListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTeamAcceptApplyFromListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTeamAcceptApplyFromListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTeamAcceptApplyFromListAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTeamAcceptApplyFromListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTeamAcceptApplyFromListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTeamAcceptApplyFromListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTeamAcceptApplyFromListAck::MergeFrom(const PBTeamAcceptApplyFromListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTeamAcceptApplyFromListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTeamAcceptApplyFromListAck::CopyFrom(const PBTeamAcceptApplyFromListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTeamAcceptApplyFromListAck::IsInitialized() const {
  
  return true;
}

void PBTeamAcceptApplyFromListAck::Swap(PBTeamAcceptApplyFromListAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTeamAcceptApplyFromListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTeamAcceptApplyFromListAck_descriptor_;
  metadata.reflection = PBTeamAcceptApplyFromListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GSearchTeamByTargetAsk::kTargetFieldNumber;
const int PBC2GSearchTeamByTargetAsk::kIndexFieldNumber;
#endif  // !_MSC_VER

PBC2GSearchTeamByTargetAsk::PBC2GSearchTeamByTargetAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GSearchTeamByTargetAsk::InitAsDefaultInstance() {
  target_ = const_cast< ::PBTeamTarget*>(&::PBTeamTarget::default_instance());
}

PBC2GSearchTeamByTargetAsk::PBC2GSearchTeamByTargetAsk(const PBC2GSearchTeamByTargetAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GSearchTeamByTargetAsk::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GSearchTeamByTargetAsk::~PBC2GSearchTeamByTargetAsk() {
  SharedDtor();
}

void PBC2GSearchTeamByTargetAsk::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void PBC2GSearchTeamByTargetAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GSearchTeamByTargetAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GSearchTeamByTargetAsk_descriptor_;
}

const PBC2GSearchTeamByTargetAsk& PBC2GSearchTeamByTargetAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GSearchTeamByTargetAsk* PBC2GSearchTeamByTargetAsk::default_instance_ = NULL;

PBC2GSearchTeamByTargetAsk* PBC2GSearchTeamByTargetAsk::New() const {
  return new PBC2GSearchTeamByTargetAsk;
}

void PBC2GSearchTeamByTargetAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::PBTeamTarget::Clear();
    }
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GSearchTeamByTargetAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBTeamTarget target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GSearchTeamByTargetAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBTeamTarget target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target(), output);
  }
  
  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GSearchTeamByTargetAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBTeamTarget target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target(), target);
  }
  
  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GSearchTeamByTargetAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBTeamTarget target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GSearchTeamByTargetAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GSearchTeamByTargetAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GSearchTeamByTargetAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GSearchTeamByTargetAsk::MergeFrom(const PBC2GSearchTeamByTargetAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      mutable_target()->::PBTeamTarget::MergeFrom(from.target());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GSearchTeamByTargetAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GSearchTeamByTargetAsk::CopyFrom(const PBC2GSearchTeamByTargetAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GSearchTeamByTargetAsk::IsInitialized() const {
  
  return true;
}

void PBC2GSearchTeamByTargetAsk::Swap(PBC2GSearchTeamByTargetAsk* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GSearchTeamByTargetAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GSearchTeamByTargetAsk_descriptor_;
  metadata.reflection = PBC2GSearchTeamByTargetAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSearchTeamByTargetAck::kTargetFieldNumber;
const int PBSearchTeamByTargetAck::kTeamsFieldNumber;
const int PBSearchTeamByTargetAck::kIndexFieldNumber;
#endif  // !_MSC_VER

PBSearchTeamByTargetAck::PBSearchTeamByTargetAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSearchTeamByTargetAck::InitAsDefaultInstance() {
  target_ = const_cast< ::PBTeamTarget*>(&::PBTeamTarget::default_instance());
}

PBSearchTeamByTargetAck::PBSearchTeamByTargetAck(const PBSearchTeamByTargetAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSearchTeamByTargetAck::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSearchTeamByTargetAck::~PBSearchTeamByTargetAck() {
  SharedDtor();
}

void PBSearchTeamByTargetAck::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void PBSearchTeamByTargetAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSearchTeamByTargetAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSearchTeamByTargetAck_descriptor_;
}

const PBSearchTeamByTargetAck& PBSearchTeamByTargetAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBSearchTeamByTargetAck* PBSearchTeamByTargetAck::default_instance_ = NULL;

PBSearchTeamByTargetAck* PBSearchTeamByTargetAck::New() const {
  return new PBSearchTeamByTargetAck;
}

void PBSearchTeamByTargetAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::PBTeamTarget::Clear();
    }
    index_ = 0u;
  }
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSearchTeamByTargetAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBTeamTarget target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        break;
      }
      
      // repeated .PBTeamInfoSimple teams = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teams;
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSearchTeamByTargetAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBTeamTarget target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target(), output);
  }
  
  // repeated .PBTeamInfoSimple teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }
  
  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSearchTeamByTargetAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBTeamTarget target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target(), target);
  }
  
  // repeated .PBTeamInfoSimple teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teams(i), target);
  }
  
  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSearchTeamByTargetAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBTeamTarget target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
  }
  // repeated .PBTeamInfoSimple teams = 2;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSearchTeamByTargetAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSearchTeamByTargetAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSearchTeamByTargetAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSearchTeamByTargetAck::MergeFrom(const PBSearchTeamByTargetAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      mutable_target()->::PBTeamTarget::MergeFrom(from.target());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSearchTeamByTargetAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSearchTeamByTargetAck::CopyFrom(const PBSearchTeamByTargetAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSearchTeamByTargetAck::IsInitialized() const {
  
  return true;
}

void PBSearchTeamByTargetAck::Swap(PBSearchTeamByTargetAck* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    teams_.Swap(&other->teams_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSearchTeamByTargetAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSearchTeamByTargetAck_descriptor_;
  metadata.reflection = PBSearchTeamByTargetAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GApplyTeamByTargetAsk::kTeamidFieldNumber;
#endif  // !_MSC_VER

PBC2GApplyTeamByTargetAsk::PBC2GApplyTeamByTargetAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GApplyTeamByTargetAsk::InitAsDefaultInstance() {
}

PBC2GApplyTeamByTargetAsk::PBC2GApplyTeamByTargetAsk(const PBC2GApplyTeamByTargetAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GApplyTeamByTargetAsk::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GApplyTeamByTargetAsk::~PBC2GApplyTeamByTargetAsk() {
  SharedDtor();
}

void PBC2GApplyTeamByTargetAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GApplyTeamByTargetAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GApplyTeamByTargetAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GApplyTeamByTargetAsk_descriptor_;
}

const PBC2GApplyTeamByTargetAsk& PBC2GApplyTeamByTargetAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GApplyTeamByTargetAsk* PBC2GApplyTeamByTargetAsk::default_instance_ = NULL;

PBC2GApplyTeamByTargetAsk* PBC2GApplyTeamByTargetAsk::New() const {
  return new PBC2GApplyTeamByTargetAsk;
}

void PBC2GApplyTeamByTargetAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GApplyTeamByTargetAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GApplyTeamByTargetAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GApplyTeamByTargetAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GApplyTeamByTargetAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GApplyTeamByTargetAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GApplyTeamByTargetAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GApplyTeamByTargetAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GApplyTeamByTargetAsk::MergeFrom(const PBC2GApplyTeamByTargetAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GApplyTeamByTargetAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GApplyTeamByTargetAsk::CopyFrom(const PBC2GApplyTeamByTargetAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GApplyTeamByTargetAsk::IsInitialized() const {
  
  return true;
}

void PBC2GApplyTeamByTargetAsk::Swap(PBC2GApplyTeamByTargetAsk* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GApplyTeamByTargetAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GApplyTeamByTargetAsk_descriptor_;
  metadata.reflection = PBC2GApplyTeamByTargetAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBApplyTeamByTargetAck::PBApplyTeamByTargetAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBApplyTeamByTargetAck::InitAsDefaultInstance() {
}

PBApplyTeamByTargetAck::PBApplyTeamByTargetAck(const PBApplyTeamByTargetAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBApplyTeamByTargetAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBApplyTeamByTargetAck::~PBApplyTeamByTargetAck() {
  SharedDtor();
}

void PBApplyTeamByTargetAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBApplyTeamByTargetAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBApplyTeamByTargetAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBApplyTeamByTargetAck_descriptor_;
}

const PBApplyTeamByTargetAck& PBApplyTeamByTargetAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBApplyTeamByTargetAck* PBApplyTeamByTargetAck::default_instance_ = NULL;

PBApplyTeamByTargetAck* PBApplyTeamByTargetAck::New() const {
  return new PBApplyTeamByTargetAck;
}

void PBApplyTeamByTargetAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBApplyTeamByTargetAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBApplyTeamByTargetAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBApplyTeamByTargetAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBApplyTeamByTargetAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBApplyTeamByTargetAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBApplyTeamByTargetAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBApplyTeamByTargetAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBApplyTeamByTargetAck::MergeFrom(const PBApplyTeamByTargetAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBApplyTeamByTargetAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBApplyTeamByTargetAck::CopyFrom(const PBApplyTeamByTargetAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBApplyTeamByTargetAck::IsInitialized() const {
  
  return true;
}

void PBApplyTeamByTargetAck::Swap(PBApplyTeamByTargetAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBApplyTeamByTargetAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBApplyTeamByTargetAck_descriptor_;
  metadata.reflection = PBApplyTeamByTargetAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBApplyedTeamIdListNtf::kTeamidsFieldNumber;
#endif  // !_MSC_VER

PBApplyedTeamIdListNtf::PBApplyedTeamIdListNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBApplyedTeamIdListNtf::InitAsDefaultInstance() {
}

PBApplyedTeamIdListNtf::PBApplyedTeamIdListNtf(const PBApplyedTeamIdListNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBApplyedTeamIdListNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBApplyedTeamIdListNtf::~PBApplyedTeamIdListNtf() {
  SharedDtor();
}

void PBApplyedTeamIdListNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBApplyedTeamIdListNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBApplyedTeamIdListNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBApplyedTeamIdListNtf_descriptor_;
}

const PBApplyedTeamIdListNtf& PBApplyedTeamIdListNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBApplyedTeamIdListNtf* PBApplyedTeamIdListNtf::default_instance_ = NULL;

PBApplyedTeamIdListNtf* PBApplyedTeamIdListNtf::New() const {
  return new PBApplyedTeamIdListNtf;
}

void PBApplyedTeamIdListNtf::Clear() {
  teamids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBApplyedTeamIdListNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 teamids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_teamids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_teamids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_teamids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBApplyedTeamIdListNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 teamids = 1;
  for (int i = 0; i < this->teamids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->teamids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBApplyedTeamIdListNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 teamids = 1;
  for (int i = 0; i < this->teamids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->teamids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBApplyedTeamIdListNtf::ByteSize() const {
  int total_size = 0;
  
  // repeated uint64 teamids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->teamids(i));
    }
    total_size += 1 * this->teamids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBApplyedTeamIdListNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBApplyedTeamIdListNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBApplyedTeamIdListNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBApplyedTeamIdListNtf::MergeFrom(const PBApplyedTeamIdListNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamids_.MergeFrom(from.teamids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBApplyedTeamIdListNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBApplyedTeamIdListNtf::CopyFrom(const PBApplyedTeamIdListNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBApplyedTeamIdListNtf::IsInitialized() const {
  
  return true;
}

void PBApplyedTeamIdListNtf::Swap(PBApplyedTeamIdListNtf* other) {
  if (other != this) {
    teamids_.Swap(&other->teamids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBApplyedTeamIdListNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBApplyedTeamIdListNtf_descriptor_;
  metadata.reflection = PBApplyedTeamIdListNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCancleApplyTeamByTargetAsk::kTeamidFieldNumber;
#endif  // !_MSC_VER

PBC2GCancleApplyTeamByTargetAsk::PBC2GCancleApplyTeamByTargetAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCancleApplyTeamByTargetAsk::InitAsDefaultInstance() {
}

PBC2GCancleApplyTeamByTargetAsk::PBC2GCancleApplyTeamByTargetAsk(const PBC2GCancleApplyTeamByTargetAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCancleApplyTeamByTargetAsk::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCancleApplyTeamByTargetAsk::~PBC2GCancleApplyTeamByTargetAsk() {
  SharedDtor();
}

void PBC2GCancleApplyTeamByTargetAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCancleApplyTeamByTargetAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCancleApplyTeamByTargetAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCancleApplyTeamByTargetAsk_descriptor_;
}

const PBC2GCancleApplyTeamByTargetAsk& PBC2GCancleApplyTeamByTargetAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GCancleApplyTeamByTargetAsk* PBC2GCancleApplyTeamByTargetAsk::default_instance_ = NULL;

PBC2GCancleApplyTeamByTargetAsk* PBC2GCancleApplyTeamByTargetAsk::New() const {
  return new PBC2GCancleApplyTeamByTargetAsk;
}

void PBC2GCancleApplyTeamByTargetAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCancleApplyTeamByTargetAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCancleApplyTeamByTargetAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCancleApplyTeamByTargetAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCancleApplyTeamByTargetAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCancleApplyTeamByTargetAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCancleApplyTeamByTargetAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCancleApplyTeamByTargetAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCancleApplyTeamByTargetAsk::MergeFrom(const PBC2GCancleApplyTeamByTargetAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCancleApplyTeamByTargetAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCancleApplyTeamByTargetAsk::CopyFrom(const PBC2GCancleApplyTeamByTargetAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCancleApplyTeamByTargetAsk::IsInitialized() const {
  
  return true;
}

void PBC2GCancleApplyTeamByTargetAsk::Swap(PBC2GCancleApplyTeamByTargetAsk* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCancleApplyTeamByTargetAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCancleApplyTeamByTargetAsk_descriptor_;
  metadata.reflection = PBC2GCancleApplyTeamByTargetAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBCancleApplyTeamByTargetAck::PBCancleApplyTeamByTargetAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCancleApplyTeamByTargetAck::InitAsDefaultInstance() {
}

PBCancleApplyTeamByTargetAck::PBCancleApplyTeamByTargetAck(const PBCancleApplyTeamByTargetAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCancleApplyTeamByTargetAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCancleApplyTeamByTargetAck::~PBCancleApplyTeamByTargetAck() {
  SharedDtor();
}

void PBCancleApplyTeamByTargetAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCancleApplyTeamByTargetAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCancleApplyTeamByTargetAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCancleApplyTeamByTargetAck_descriptor_;
}

const PBCancleApplyTeamByTargetAck& PBCancleApplyTeamByTargetAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBCancleApplyTeamByTargetAck* PBCancleApplyTeamByTargetAck::default_instance_ = NULL;

PBCancleApplyTeamByTargetAck* PBCancleApplyTeamByTargetAck::New() const {
  return new PBCancleApplyTeamByTargetAck;
}

void PBCancleApplyTeamByTargetAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCancleApplyTeamByTargetAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBCancleApplyTeamByTargetAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCancleApplyTeamByTargetAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCancleApplyTeamByTargetAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCancleApplyTeamByTargetAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCancleApplyTeamByTargetAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCancleApplyTeamByTargetAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCancleApplyTeamByTargetAck::MergeFrom(const PBCancleApplyTeamByTargetAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCancleApplyTeamByTargetAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCancleApplyTeamByTargetAck::CopyFrom(const PBCancleApplyTeamByTargetAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCancleApplyTeamByTargetAck::IsInitialized() const {
  
  return true;
}

void PBCancleApplyTeamByTargetAck::Swap(PBCancleApplyTeamByTargetAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCancleApplyTeamByTargetAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCancleApplyTeamByTargetAck_descriptor_;
  metadata.reflection = PBCancleApplyTeamByTargetAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GAcceptTeamTaskAsk::kIdFieldNumber;
const int PBC2GAcceptTeamTaskAsk::kNpcunitidFieldNumber;
#endif  // !_MSC_VER

PBC2GAcceptTeamTaskAsk::PBC2GAcceptTeamTaskAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GAcceptTeamTaskAsk::InitAsDefaultInstance() {
}

PBC2GAcceptTeamTaskAsk::PBC2GAcceptTeamTaskAsk(const PBC2GAcceptTeamTaskAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GAcceptTeamTaskAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  npcunitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GAcceptTeamTaskAsk::~PBC2GAcceptTeamTaskAsk() {
  SharedDtor();
}

void PBC2GAcceptTeamTaskAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GAcceptTeamTaskAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GAcceptTeamTaskAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GAcceptTeamTaskAsk_descriptor_;
}

const PBC2GAcceptTeamTaskAsk& PBC2GAcceptTeamTaskAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GAcceptTeamTaskAsk* PBC2GAcceptTeamTaskAsk::default_instance_ = NULL;

PBC2GAcceptTeamTaskAsk* PBC2GAcceptTeamTaskAsk::New() const {
  return new PBC2GAcceptTeamTaskAsk;
}

void PBC2GAcceptTeamTaskAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    npcunitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GAcceptTeamTaskAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npcunitid;
        break;
      }
      
      // optional uint32 npcunitid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcunitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcunitid_)));
          set_has_npcunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GAcceptTeamTaskAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 npcunitid = 2;
  if (has_npcunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcunitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GAcceptTeamTaskAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 npcunitid = 2;
  if (has_npcunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcunitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GAcceptTeamTaskAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 npcunitid = 2;
    if (has_npcunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcunitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GAcceptTeamTaskAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GAcceptTeamTaskAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GAcceptTeamTaskAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GAcceptTeamTaskAsk::MergeFrom(const PBC2GAcceptTeamTaskAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_npcunitid()) {
      set_npcunitid(from.npcunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GAcceptTeamTaskAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GAcceptTeamTaskAsk::CopyFrom(const PBC2GAcceptTeamTaskAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GAcceptTeamTaskAsk::IsInitialized() const {
  
  return true;
}

void PBC2GAcceptTeamTaskAsk::Swap(PBC2GAcceptTeamTaskAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(npcunitid_, other->npcunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GAcceptTeamTaskAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GAcceptTeamTaskAsk_descriptor_;
  metadata.reflection = PBC2GAcceptTeamTaskAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CAcceptTeamTaskAck::kTeamtaskFieldNumber;
#endif  // !_MSC_VER

PBG2CAcceptTeamTaskAck::PBG2CAcceptTeamTaskAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CAcceptTeamTaskAck::InitAsDefaultInstance() {
  teamtask_ = const_cast< ::PBTeamTask*>(&::PBTeamTask::default_instance());
}

PBG2CAcceptTeamTaskAck::PBG2CAcceptTeamTaskAck(const PBG2CAcceptTeamTaskAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CAcceptTeamTaskAck::SharedCtor() {
  _cached_size_ = 0;
  teamtask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CAcceptTeamTaskAck::~PBG2CAcceptTeamTaskAck() {
  SharedDtor();
}

void PBG2CAcceptTeamTaskAck::SharedDtor() {
  if (this != default_instance_) {
    delete teamtask_;
  }
}

void PBG2CAcceptTeamTaskAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CAcceptTeamTaskAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CAcceptTeamTaskAck_descriptor_;
}

const PBG2CAcceptTeamTaskAck& PBG2CAcceptTeamTaskAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2CAcceptTeamTaskAck* PBG2CAcceptTeamTaskAck::default_instance_ = NULL;

PBG2CAcceptTeamTaskAck* PBG2CAcceptTeamTaskAck::New() const {
  return new PBG2CAcceptTeamTaskAck;
}

void PBG2CAcceptTeamTaskAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_teamtask()) {
      if (teamtask_ != NULL) teamtask_->::PBTeamTask::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CAcceptTeamTaskAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBTeamTask teamtask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamtask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CAcceptTeamTaskAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBTeamTask teamtask = 1;
  if (has_teamtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teamtask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CAcceptTeamTaskAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBTeamTask teamtask = 1;
  if (has_teamtask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teamtask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CAcceptTeamTaskAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBTeamTask teamtask = 1;
    if (has_teamtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamtask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CAcceptTeamTaskAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CAcceptTeamTaskAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CAcceptTeamTaskAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CAcceptTeamTaskAck::MergeFrom(const PBG2CAcceptTeamTaskAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamtask()) {
      mutable_teamtask()->::PBTeamTask::MergeFrom(from.teamtask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CAcceptTeamTaskAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CAcceptTeamTaskAck::CopyFrom(const PBG2CAcceptTeamTaskAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CAcceptTeamTaskAck::IsInitialized() const {
  
  return true;
}

void PBG2CAcceptTeamTaskAck::Swap(PBG2CAcceptTeamTaskAck* other) {
  if (other != this) {
    std::swap(teamtask_, other->teamtask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CAcceptTeamTaskAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CAcceptTeamTaskAck_descriptor_;
  metadata.reflection = PBG2CAcceptTeamTaskAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GEnterTeamTaskCopymapAsk::kNpcunitidFieldNumber;
#endif  // !_MSC_VER

PBC2GEnterTeamTaskCopymapAsk::PBC2GEnterTeamTaskCopymapAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GEnterTeamTaskCopymapAsk::InitAsDefaultInstance() {
}

PBC2GEnterTeamTaskCopymapAsk::PBC2GEnterTeamTaskCopymapAsk(const PBC2GEnterTeamTaskCopymapAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GEnterTeamTaskCopymapAsk::SharedCtor() {
  _cached_size_ = 0;
  npcunitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GEnterTeamTaskCopymapAsk::~PBC2GEnterTeamTaskCopymapAsk() {
  SharedDtor();
}

void PBC2GEnterTeamTaskCopymapAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GEnterTeamTaskCopymapAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GEnterTeamTaskCopymapAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GEnterTeamTaskCopymapAsk_descriptor_;
}

const PBC2GEnterTeamTaskCopymapAsk& PBC2GEnterTeamTaskCopymapAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GEnterTeamTaskCopymapAsk* PBC2GEnterTeamTaskCopymapAsk::default_instance_ = NULL;

PBC2GEnterTeamTaskCopymapAsk* PBC2GEnterTeamTaskCopymapAsk::New() const {
  return new PBC2GEnterTeamTaskCopymapAsk;
}

void PBC2GEnterTeamTaskCopymapAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcunitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GEnterTeamTaskCopymapAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 npcunitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcunitid_)));
          set_has_npcunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GEnterTeamTaskCopymapAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 npcunitid = 1;
  if (has_npcunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcunitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GEnterTeamTaskCopymapAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 npcunitid = 1;
  if (has_npcunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npcunitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GEnterTeamTaskCopymapAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 npcunitid = 1;
    if (has_npcunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcunitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GEnterTeamTaskCopymapAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GEnterTeamTaskCopymapAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GEnterTeamTaskCopymapAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GEnterTeamTaskCopymapAsk::MergeFrom(const PBC2GEnterTeamTaskCopymapAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcunitid()) {
      set_npcunitid(from.npcunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GEnterTeamTaskCopymapAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GEnterTeamTaskCopymapAsk::CopyFrom(const PBC2GEnterTeamTaskCopymapAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GEnterTeamTaskCopymapAsk::IsInitialized() const {
  
  return true;
}

void PBC2GEnterTeamTaskCopymapAsk::Swap(PBC2GEnterTeamTaskCopymapAsk* other) {
  if (other != this) {
    std::swap(npcunitid_, other->npcunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GEnterTeamTaskCopymapAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GEnterTeamTaskCopymapAsk_descriptor_;
  metadata.reflection = PBC2GEnterTeamTaskCopymapAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCompleteTeamTaskAsk::kNpcunitidFieldNumber;
#endif  // !_MSC_VER

PBC2GCompleteTeamTaskAsk::PBC2GCompleteTeamTaskAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCompleteTeamTaskAsk::InitAsDefaultInstance() {
}

PBC2GCompleteTeamTaskAsk::PBC2GCompleteTeamTaskAsk(const PBC2GCompleteTeamTaskAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCompleteTeamTaskAsk::SharedCtor() {
  _cached_size_ = 0;
  npcunitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCompleteTeamTaskAsk::~PBC2GCompleteTeamTaskAsk() {
  SharedDtor();
}

void PBC2GCompleteTeamTaskAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCompleteTeamTaskAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCompleteTeamTaskAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCompleteTeamTaskAsk_descriptor_;
}

const PBC2GCompleteTeamTaskAsk& PBC2GCompleteTeamTaskAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GCompleteTeamTaskAsk* PBC2GCompleteTeamTaskAsk::default_instance_ = NULL;

PBC2GCompleteTeamTaskAsk* PBC2GCompleteTeamTaskAsk::New() const {
  return new PBC2GCompleteTeamTaskAsk;
}

void PBC2GCompleteTeamTaskAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcunitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCompleteTeamTaskAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 npcunitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcunitid_)));
          set_has_npcunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCompleteTeamTaskAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 npcunitid = 1;
  if (has_npcunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcunitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCompleteTeamTaskAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 npcunitid = 1;
  if (has_npcunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npcunitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCompleteTeamTaskAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 npcunitid = 1;
    if (has_npcunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcunitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCompleteTeamTaskAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCompleteTeamTaskAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCompleteTeamTaskAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCompleteTeamTaskAsk::MergeFrom(const PBC2GCompleteTeamTaskAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcunitid()) {
      set_npcunitid(from.npcunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCompleteTeamTaskAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCompleteTeamTaskAsk::CopyFrom(const PBC2GCompleteTeamTaskAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCompleteTeamTaskAsk::IsInitialized() const {
  
  return true;
}

void PBC2GCompleteTeamTaskAsk::Swap(PBC2GCompleteTeamTaskAsk* other) {
  if (other != this) {
    std::swap(npcunitid_, other->npcunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCompleteTeamTaskAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCompleteTeamTaskAsk_descriptor_;
  metadata.reflection = PBC2GCompleteTeamTaskAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCompleteTeamTaskAck::kExpendFieldNumber;
const int PBG2CCompleteTeamTaskAck::kItemFieldNumber;
const int PBG2CCompleteTeamTaskAck::kLeaderitemFieldNumber;
#endif  // !_MSC_VER

PBG2CCompleteTeamTaskAck::PBG2CCompleteTeamTaskAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCompleteTeamTaskAck::InitAsDefaultInstance() {
}

PBG2CCompleteTeamTaskAck::PBG2CCompleteTeamTaskAck(const PBG2CCompleteTeamTaskAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCompleteTeamTaskAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCompleteTeamTaskAck::~PBG2CCompleteTeamTaskAck() {
  SharedDtor();
}

void PBG2CCompleteTeamTaskAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCompleteTeamTaskAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCompleteTeamTaskAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCompleteTeamTaskAck_descriptor_;
}

const PBG2CCompleteTeamTaskAck& PBG2CCompleteTeamTaskAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2CCompleteTeamTaskAck* PBG2CCompleteTeamTaskAck::default_instance_ = NULL;

PBG2CCompleteTeamTaskAck* PBG2CCompleteTeamTaskAck::New() const {
  return new PBG2CCompleteTeamTaskAck;
}

void PBG2CCompleteTeamTaskAck::Clear() {
  expend_.Clear();
  item_.Clear();
  leaderitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCompleteTeamTaskAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBExpendNum expend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_expend;
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }
      
      // repeated .PBItemNum item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(26)) goto parse_leaderitem;
        break;
      }
      
      // repeated .PBItemNum leaderitem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leaderitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leaderitem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCompleteTeamTaskAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBExpendNum expend = 1;
  for (int i = 0; i < this->expend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->expend(i), output);
  }
  
  // repeated .PBItemNum item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }
  
  // repeated .PBItemNum leaderitem = 3;
  for (int i = 0; i < this->leaderitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaderitem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCompleteTeamTaskAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBExpendNum expend = 1;
  for (int i = 0; i < this->expend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->expend(i), target);
  }
  
  // repeated .PBItemNum item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }
  
  // repeated .PBItemNum leaderitem = 3;
  for (int i = 0; i < this->leaderitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leaderitem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCompleteTeamTaskAck::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBExpendNum expend = 1;
  total_size += 1 * this->expend_size();
  for (int i = 0; i < this->expend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expend(i));
  }
  
  // repeated .PBItemNum item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  // repeated .PBItemNum leaderitem = 3;
  total_size += 1 * this->leaderitem_size();
  for (int i = 0; i < this->leaderitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leaderitem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCompleteTeamTaskAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCompleteTeamTaskAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCompleteTeamTaskAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCompleteTeamTaskAck::MergeFrom(const PBG2CCompleteTeamTaskAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  expend_.MergeFrom(from.expend_);
  item_.MergeFrom(from.item_);
  leaderitem_.MergeFrom(from.leaderitem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCompleteTeamTaskAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCompleteTeamTaskAck::CopyFrom(const PBG2CCompleteTeamTaskAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCompleteTeamTaskAck::IsInitialized() const {
  
  return true;
}

void PBG2CCompleteTeamTaskAck::Swap(PBG2CCompleteTeamTaskAck* other) {
  if (other != this) {
    expend_.Swap(&other->expend_);
    item_.Swap(&other->item_);
    leaderitem_.Swap(&other->leaderitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCompleteTeamTaskAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCompleteTeamTaskAck_descriptor_;
  metadata.reflection = PBG2CCompleteTeamTaskAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamFollowAsk::kIsfollowFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamFollowAsk::PBC2GTeamFollowAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamFollowAsk::InitAsDefaultInstance() {
}

PBC2GTeamFollowAsk::PBC2GTeamFollowAsk(const PBC2GTeamFollowAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamFollowAsk::SharedCtor() {
  _cached_size_ = 0;
  isfollow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamFollowAsk::~PBC2GTeamFollowAsk() {
  SharedDtor();
}

void PBC2GTeamFollowAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamFollowAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamFollowAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamFollowAsk_descriptor_;
}

const PBC2GTeamFollowAsk& PBC2GTeamFollowAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamFollowAsk* PBC2GTeamFollowAsk::default_instance_ = NULL;

PBC2GTeamFollowAsk* PBC2GTeamFollowAsk::New() const {
  return new PBC2GTeamFollowAsk;
}

void PBC2GTeamFollowAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isfollow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamFollowAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isfollow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfollow_)));
          set_has_isfollow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamFollowAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isfollow = 1;
  if (has_isfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfollow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamFollowAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isfollow = 1;
  if (has_isfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfollow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamFollowAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isfollow = 1;
    if (has_isfollow()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamFollowAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamFollowAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamFollowAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamFollowAsk::MergeFrom(const PBC2GTeamFollowAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfollow()) {
      set_isfollow(from.isfollow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamFollowAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamFollowAsk::CopyFrom(const PBC2GTeamFollowAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamFollowAsk::IsInitialized() const {
  
  return true;
}

void PBC2GTeamFollowAsk::Swap(PBC2GTeamFollowAsk* other) {
  if (other != this) {
    std::swap(isfollow_, other->isfollow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamFollowAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamFollowAsk_descriptor_;
  metadata.reflection = PBC2GTeamFollowAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTeamFollowAck::kPlayeridFieldNumber;
const int PBG2CTeamFollowAck::kIsfollowFieldNumber;
#endif  // !_MSC_VER

PBG2CTeamFollowAck::PBG2CTeamFollowAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTeamFollowAck::InitAsDefaultInstance() {
}

PBG2CTeamFollowAck::PBG2CTeamFollowAck(const PBG2CTeamFollowAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTeamFollowAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  isfollow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTeamFollowAck::~PBG2CTeamFollowAck() {
  SharedDtor();
}

void PBG2CTeamFollowAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CTeamFollowAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTeamFollowAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTeamFollowAck_descriptor_;
}

const PBG2CTeamFollowAck& PBG2CTeamFollowAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2CTeamFollowAck* PBG2CTeamFollowAck::default_instance_ = NULL;

PBG2CTeamFollowAck* PBG2CTeamFollowAck::New() const {
  return new PBG2CTeamFollowAck;
}

void PBG2CTeamFollowAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    isfollow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTeamFollowAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isfollow;
        break;
      }
      
      // optional bool isfollow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isfollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfollow_)));
          set_has_isfollow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTeamFollowAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional bool isfollow = 2;
  if (has_isfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isfollow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTeamFollowAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional bool isfollow = 2;
  if (has_isfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isfollow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTeamFollowAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional bool isfollow = 2;
    if (has_isfollow()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTeamFollowAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTeamFollowAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTeamFollowAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTeamFollowAck::MergeFrom(const PBG2CTeamFollowAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_isfollow()) {
      set_isfollow(from.isfollow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTeamFollowAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTeamFollowAck::CopyFrom(const PBG2CTeamFollowAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTeamFollowAck::IsInitialized() const {
  
  return true;
}

void PBG2CTeamFollowAck::Swap(PBG2CTeamFollowAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(isfollow_, other->isfollow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTeamFollowAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTeamFollowAck_descriptor_;
  metadata.reflection = PBG2CTeamFollowAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamRemainConfirmAsk::kTypeFieldNumber;
const int PBC2GTeamRemainConfirmAsk::kIdFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamRemainConfirmAsk::PBC2GTeamRemainConfirmAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamRemainConfirmAsk::InitAsDefaultInstance() {
}

PBC2GTeamRemainConfirmAsk::PBC2GTeamRemainConfirmAsk(const PBC2GTeamRemainConfirmAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamRemainConfirmAsk::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamRemainConfirmAsk::~PBC2GTeamRemainConfirmAsk() {
  SharedDtor();
}

void PBC2GTeamRemainConfirmAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamRemainConfirmAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamRemainConfirmAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamRemainConfirmAsk_descriptor_;
}

const PBC2GTeamRemainConfirmAsk& PBC2GTeamRemainConfirmAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamRemainConfirmAsk* PBC2GTeamRemainConfirmAsk::default_instance_ = NULL;

PBC2GTeamRemainConfirmAsk* PBC2GTeamRemainConfirmAsk::New() const {
  return new PBC2GTeamRemainConfirmAsk;
}

void PBC2GTeamRemainConfirmAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamRemainConfirmAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamRemainConfirmAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamRemainConfirmAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamRemainConfirmAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamRemainConfirmAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamRemainConfirmAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamRemainConfirmAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamRemainConfirmAsk::MergeFrom(const PBC2GTeamRemainConfirmAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamRemainConfirmAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamRemainConfirmAsk::CopyFrom(const PBC2GTeamRemainConfirmAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamRemainConfirmAsk::IsInitialized() const {
  
  return true;
}

void PBC2GTeamRemainConfirmAsk::Swap(PBC2GTeamRemainConfirmAsk* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamRemainConfirmAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamRemainConfirmAsk_descriptor_;
  metadata.reflection = PBC2GTeamRemainConfirmAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTeamRemainConfirmAck::kTypeFieldNumber;
const int PBG2CTeamRemainConfirmAck::kIdFieldNumber;
#endif  // !_MSC_VER

PBG2CTeamRemainConfirmAck::PBG2CTeamRemainConfirmAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTeamRemainConfirmAck::InitAsDefaultInstance() {
}

PBG2CTeamRemainConfirmAck::PBG2CTeamRemainConfirmAck(const PBG2CTeamRemainConfirmAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTeamRemainConfirmAck::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTeamRemainConfirmAck::~PBG2CTeamRemainConfirmAck() {
  SharedDtor();
}

void PBG2CTeamRemainConfirmAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CTeamRemainConfirmAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTeamRemainConfirmAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTeamRemainConfirmAck_descriptor_;
}

const PBG2CTeamRemainConfirmAck& PBG2CTeamRemainConfirmAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2CTeamRemainConfirmAck* PBG2CTeamRemainConfirmAck::default_instance_ = NULL;

PBG2CTeamRemainConfirmAck* PBG2CTeamRemainConfirmAck::New() const {
  return new PBG2CTeamRemainConfirmAck;
}

void PBG2CTeamRemainConfirmAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTeamRemainConfirmAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTeamRemainConfirmAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTeamRemainConfirmAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTeamRemainConfirmAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTeamRemainConfirmAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTeamRemainConfirmAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTeamRemainConfirmAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTeamRemainConfirmAck::MergeFrom(const PBG2CTeamRemainConfirmAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTeamRemainConfirmAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTeamRemainConfirmAck::CopyFrom(const PBG2CTeamRemainConfirmAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTeamRemainConfirmAck::IsInitialized() const {
  
  return true;
}

void PBG2CTeamRemainConfirmAck::Swap(PBG2CTeamRemainConfirmAck* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTeamRemainConfirmAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTeamRemainConfirmAck_descriptor_;
  metadata.reflection = PBG2CTeamRemainConfirmAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTeamConfirmAsk::kIsconfirmFieldNumber;
const int PBC2GTeamConfirmAsk::kTypeFieldNumber;
const int PBC2GTeamConfirmAsk::kIdFieldNumber;
#endif  // !_MSC_VER

PBC2GTeamConfirmAsk::PBC2GTeamConfirmAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTeamConfirmAsk::InitAsDefaultInstance() {
}

PBC2GTeamConfirmAsk::PBC2GTeamConfirmAsk(const PBC2GTeamConfirmAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTeamConfirmAsk::SharedCtor() {
  _cached_size_ = 0;
  isconfirm_ = false;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTeamConfirmAsk::~PBC2GTeamConfirmAsk() {
  SharedDtor();
}

void PBC2GTeamConfirmAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTeamConfirmAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTeamConfirmAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTeamConfirmAsk_descriptor_;
}

const PBC2GTeamConfirmAsk& PBC2GTeamConfirmAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBC2GTeamConfirmAsk* PBC2GTeamConfirmAsk::default_instance_ = NULL;

PBC2GTeamConfirmAsk* PBC2GTeamConfirmAsk::New() const {
  return new PBC2GTeamConfirmAsk;
}

void PBC2GTeamConfirmAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isconfirm_ = false;
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTeamConfirmAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isconfirm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isconfirm_)));
          set_has_isconfirm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTeamConfirmAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isconfirm = 1;
  if (has_isconfirm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isconfirm(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTeamConfirmAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isconfirm = 1;
  if (has_isconfirm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isconfirm(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTeamConfirmAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isconfirm = 1;
    if (has_isconfirm()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTeamConfirmAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTeamConfirmAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTeamConfirmAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTeamConfirmAsk::MergeFrom(const PBC2GTeamConfirmAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isconfirm()) {
      set_isconfirm(from.isconfirm());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTeamConfirmAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTeamConfirmAsk::CopyFrom(const PBC2GTeamConfirmAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTeamConfirmAsk::IsInitialized() const {
  
  return true;
}

void PBC2GTeamConfirmAsk::Swap(PBC2GTeamConfirmAsk* other) {
  if (other != this) {
    std::swap(isconfirm_, other->isconfirm_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTeamConfirmAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTeamConfirmAsk_descriptor_;
  metadata.reflection = PBC2GTeamConfirmAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTeamConfirmAck::kPlayeridFieldNumber;
const int PBG2CTeamConfirmAck::kIsconfirmFieldNumber;
#endif  // !_MSC_VER

PBG2CTeamConfirmAck::PBG2CTeamConfirmAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTeamConfirmAck::InitAsDefaultInstance() {
}

PBG2CTeamConfirmAck::PBG2CTeamConfirmAck(const PBG2CTeamConfirmAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTeamConfirmAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  isconfirm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTeamConfirmAck::~PBG2CTeamConfirmAck() {
  SharedDtor();
}

void PBG2CTeamConfirmAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CTeamConfirmAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTeamConfirmAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTeamConfirmAck_descriptor_;
}

const PBG2CTeamConfirmAck& PBG2CTeamConfirmAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2CTeamConfirmAck* PBG2CTeamConfirmAck::default_instance_ = NULL;

PBG2CTeamConfirmAck* PBG2CTeamConfirmAck::New() const {
  return new PBG2CTeamConfirmAck;
}

void PBG2CTeamConfirmAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    isconfirm_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTeamConfirmAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isconfirm;
        break;
      }
      
      // optional bool isconfirm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isconfirm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isconfirm_)));
          set_has_isconfirm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTeamConfirmAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional bool isconfirm = 2;
  if (has_isconfirm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isconfirm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTeamConfirmAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional bool isconfirm = 2;
  if (has_isconfirm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isconfirm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTeamConfirmAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional bool isconfirm = 2;
    if (has_isconfirm()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTeamConfirmAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTeamConfirmAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTeamConfirmAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTeamConfirmAck::MergeFrom(const PBG2CTeamConfirmAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_isconfirm()) {
      set_isconfirm(from.isconfirm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTeamConfirmAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTeamConfirmAck::CopyFrom(const PBG2CTeamConfirmAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTeamConfirmAck::IsInitialized() const {
  
  return true;
}

void PBG2CTeamConfirmAck::Swap(PBG2CTeamConfirmAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(isconfirm_, other->isconfirm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTeamConfirmAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTeamConfirmAck_descriptor_;
  metadata.reflection = PBG2CTeamConfirmAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CBroadMsg::kIsconfirmFieldNumber;
#endif  // !_MSC_VER

PBG2CBroadMsg::PBG2CBroadMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CBroadMsg::InitAsDefaultInstance() {
}

PBG2CBroadMsg::PBG2CBroadMsg(const PBG2CBroadMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CBroadMsg::SharedCtor() {
  _cached_size_ = 0;
  isconfirm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CBroadMsg::~PBG2CBroadMsg() {
  SharedDtor();
}

void PBG2CBroadMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CBroadMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CBroadMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CBroadMsg_descriptor_;
}

const PBG2CBroadMsg& PBG2CBroadMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2CBroadMsg* PBG2CBroadMsg::default_instance_ = NULL;

PBG2CBroadMsg* PBG2CBroadMsg::New() const {
  return new PBG2CBroadMsg;
}

void PBG2CBroadMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isconfirm_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CBroadMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isconfirm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isconfirm_)));
          set_has_isconfirm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CBroadMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isconfirm = 1;
  if (has_isconfirm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isconfirm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CBroadMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isconfirm = 1;
  if (has_isconfirm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isconfirm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CBroadMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isconfirm = 1;
    if (has_isconfirm()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CBroadMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CBroadMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CBroadMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CBroadMsg::MergeFrom(const PBG2CBroadMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isconfirm()) {
      set_isconfirm(from.isconfirm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CBroadMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CBroadMsg::CopyFrom(const PBG2CBroadMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CBroadMsg::IsInitialized() const {
  
  return true;
}

void PBG2CBroadMsg::Swap(PBG2CBroadMsg* other) {
  if (other != this) {
    std::swap(isconfirm_, other->isconfirm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CBroadMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CBroadMsg_descriptor_;
  metadata.reflection = PBG2CBroadMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CMemberHitAck::kConditionFieldNumber;
#endif  // !_MSC_VER

PBG2CMemberHitAck::PBG2CMemberHitAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CMemberHitAck::InitAsDefaultInstance() {
  condition_ = const_cast< ::PBTeamMemberCondition*>(&::PBTeamMemberCondition::default_instance());
}

PBG2CMemberHitAck::PBG2CMemberHitAck(const PBG2CMemberHitAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CMemberHitAck::SharedCtor() {
  _cached_size_ = 0;
  condition_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CMemberHitAck::~PBG2CMemberHitAck() {
  SharedDtor();
}

void PBG2CMemberHitAck::SharedDtor() {
  if (this != default_instance_) {
    delete condition_;
  }
}

void PBG2CMemberHitAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CMemberHitAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CMemberHitAck_descriptor_;
}

const PBG2CMemberHitAck& PBG2CMemberHitAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();  return *default_instance_;
}

PBG2CMemberHitAck* PBG2CMemberHitAck::default_instance_ = NULL;

PBG2CMemberHitAck* PBG2CMemberHitAck::New() const {
  return new PBG2CMemberHitAck;
}

void PBG2CMemberHitAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_condition()) {
      if (condition_ != NULL) condition_->::PBTeamMemberCondition::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CMemberHitAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBTeamMemberCondition condition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CMemberHitAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBTeamMemberCondition condition = 1;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->condition(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CMemberHitAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBTeamMemberCondition condition = 1;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->condition(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CMemberHitAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBTeamMemberCondition condition = 1;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CMemberHitAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CMemberHitAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CMemberHitAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CMemberHitAck::MergeFrom(const PBG2CMemberHitAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_condition()) {
      mutable_condition()->::PBTeamMemberCondition::MergeFrom(from.condition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CMemberHitAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CMemberHitAck::CopyFrom(const PBG2CMemberHitAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CMemberHitAck::IsInitialized() const {
  
  return true;
}

void PBG2CMemberHitAck::Swap(PBG2CMemberHitAck* other) {
  if (other != this) {
    std::swap(condition_, other->condition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CMemberHitAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CMemberHitAck_descriptor_;
  metadata.reflection = PBG2CMemberHitAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
