// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BWADBProtocol.proto

#ifndef PROTOBUF_BWADBProtocol_2eproto__INCLUDED
#define PROTOBUF_BWADBProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BWADBProtocol_2eproto();
void protobuf_AssignDesc_BWADBProtocol_2eproto();
void protobuf_ShutdownFile_BWADBProtocol_2eproto();


enum _emPBW2DB_Protocol {
  P_BW2DB_Operator = 0
};
bool _emPBW2DB_Protocol_IsValid(int value);
const _emPBW2DB_Protocol _emPBW2DB_Protocol_MIN = P_BW2DB_Operator;
const _emPBW2DB_Protocol _emPBW2DB_Protocol_MAX = P_BW2DB_Operator;
const int _emPBW2DB_Protocol_ARRAYSIZE = _emPBW2DB_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPBW2DB_Protocol_descriptor();
inline const ::std::string& _emPBW2DB_Protocol_Name(_emPBW2DB_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPBW2DB_Protocol_descriptor(), value);
}
inline bool _emPBW2DB_Protocol_Parse(
    const ::std::string& name, _emPBW2DB_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPBW2DB_Protocol>(
    _emPBW2DB_Protocol_descriptor(), name, value);
}
enum _emBW2DB_Protocol_Operator {
  BW2DB_Operator_StartLoad_Ask = 0,
  BW2DB_Operator_DBBlock_Ask = 1
};
bool _emBW2DB_Protocol_Operator_IsValid(int value);
const _emBW2DB_Protocol_Operator _emBW2DB_Protocol_Operator_MIN = BW2DB_Operator_StartLoad_Ask;
const _emBW2DB_Protocol_Operator _emBW2DB_Protocol_Operator_MAX = BW2DB_Operator_DBBlock_Ask;
const int _emBW2DB_Protocol_Operator_ARRAYSIZE = _emBW2DB_Protocol_Operator_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBW2DB_Protocol_Operator_descriptor();
inline const ::std::string& _emBW2DB_Protocol_Operator_Name(_emBW2DB_Protocol_Operator value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBW2DB_Protocol_Operator_descriptor(), value);
}
inline bool _emBW2DB_Protocol_Operator_Parse(
    const ::std::string& name, _emBW2DB_Protocol_Operator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBW2DB_Protocol_Operator>(
    _emBW2DB_Protocol_Operator_descriptor(), name, value);
}
enum _em_BW2DB_Event {
  BW2DB_Event_Test = 0
};
bool _em_BW2DB_Event_IsValid(int value);
const _em_BW2DB_Event _em_BW2DB_Event_MIN = BW2DB_Event_Test;
const _em_BW2DB_Event _em_BW2DB_Event_MAX = BW2DB_Event_Test;
const int _em_BW2DB_Event_ARRAYSIZE = _em_BW2DB_Event_MAX + 1;

const ::google::protobuf::EnumDescriptor* _em_BW2DB_Event_descriptor();
inline const ::std::string& _em_BW2DB_Event_Name(_em_BW2DB_Event value) {
  return ::google::protobuf::internal::NameOfEnum(
    _em_BW2DB_Event_descriptor(), value);
}
inline bool _em_BW2DB_Event_Parse(
    const ::std::string& name, _em_BW2DB_Event* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_em_BW2DB_Event>(
    _em_BW2DB_Event_descriptor(), name, value);
}
enum _emPDB2BW_Protocol {
  P_DB2BW_Operator = 0
};
bool _emPDB2BW_Protocol_IsValid(int value);
const _emPDB2BW_Protocol _emPDB2BW_Protocol_MIN = P_DB2BW_Operator;
const _emPDB2BW_Protocol _emPDB2BW_Protocol_MAX = P_DB2BW_Operator;
const int _emPDB2BW_Protocol_ARRAYSIZE = _emPDB2BW_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPDB2BW_Protocol_descriptor();
inline const ::std::string& _emPDB2BW_Protocol_Name(_emPDB2BW_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPDB2BW_Protocol_descriptor(), value);
}
inline bool _emPDB2BW_Protocol_Parse(
    const ::std::string& name, _emPDB2BW_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPDB2BW_Protocol>(
    _emPDB2BW_Protocol_descriptor(), name, value);
}
enum _emDB2BW_Protocol_Operator {
  DB2BW_Operator_DBRecv_Ack = 0,
  DB2BW_Operator_Test_Ack = 1
};
bool _emDB2BW_Protocol_Operator_IsValid(int value);
const _emDB2BW_Protocol_Operator _emDB2BW_Protocol_Operator_MIN = DB2BW_Operator_DBRecv_Ack;
const _emDB2BW_Protocol_Operator _emDB2BW_Protocol_Operator_MAX = DB2BW_Operator_Test_Ack;
const int _emDB2BW_Protocol_Operator_ARRAYSIZE = _emDB2BW_Protocol_Operator_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emDB2BW_Protocol_Operator_descriptor();
inline const ::std::string& _emDB2BW_Protocol_Operator_Name(_emDB2BW_Protocol_Operator value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emDB2BW_Protocol_Operator_descriptor(), value);
}
inline bool _emDB2BW_Protocol_Operator_Parse(
    const ::std::string& name, _emDB2BW_Protocol_Operator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emDB2BW_Protocol_Operator>(
    _emDB2BW_Protocol_Operator_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPBW2DB_Protocol>() {
  return _emPBW2DB_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBW2DB_Protocol_Operator>() {
  return _emBW2DB_Protocol_Operator_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _em_BW2DB_Event>() {
  return _em_BW2DB_Event_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPDB2BW_Protocol>() {
  return _emPDB2BW_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emDB2BW_Protocol_Operator>() {
  return _emDB2BW_Protocol_Operator_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BWADBProtocol_2eproto__INCLUDED
