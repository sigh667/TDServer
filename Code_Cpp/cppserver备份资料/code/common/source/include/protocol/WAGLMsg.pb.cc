// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WAGLMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBW2GLPlayerLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GLPlayerLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GLPlayerLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GLPlayerLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GLPlayerTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GLPlayerTransfer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WAGLMsg_2eproto() {
  protobuf_AddDesc_WAGLMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WAGLMsg.proto");
  GOOGLE_CHECK(file != NULL);
  PBW2GLPlayerLogin_descriptor_ = file->message_type(0);
  static const int PBW2GLPlayerLogin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerLogin, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerLogin, logicworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerLogin, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerLogin, serverid_),
  };
  PBW2GLPlayerLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GLPlayerLogin_descriptor_,
      PBW2GLPlayerLogin::default_instance_,
      PBW2GLPlayerLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GLPlayerLogin));
  PBW2GLPlayerLogout_descriptor_ = file->message_type(1);
  static const int PBW2GLPlayerLogout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerLogout, playerid_),
  };
  PBW2GLPlayerLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GLPlayerLogout_descriptor_,
      PBW2GLPlayerLogout::default_instance_,
      PBW2GLPlayerLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GLPlayerLogout));
  PBW2GLPlayerTransfer_descriptor_ = file->message_type(2);
  static const int PBW2GLPlayerTransfer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerTransfer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerTransfer, logicworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerTransfer, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerTransfer, serverid_),
  };
  PBW2GLPlayerTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GLPlayerTransfer_descriptor_,
      PBW2GLPlayerTransfer::default_instance_,
      PBW2GLPlayerTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GLPlayerTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GLPlayerTransfer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WAGLMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GLPlayerLogin_descriptor_, &PBW2GLPlayerLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GLPlayerLogout_descriptor_, &PBW2GLPlayerLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GLPlayerTransfer_descriptor_, &PBW2GLPlayerTransfer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WAGLMsg_2eproto() {
  delete PBW2GLPlayerLogin::default_instance_;
  delete PBW2GLPlayerLogin_reflection_;
  delete PBW2GLPlayerLogout::default_instance_;
  delete PBW2GLPlayerLogout_reflection_;
  delete PBW2GLPlayerTransfer::default_instance_;
  delete PBW2GLPlayerTransfer_reflection_;
}

void protobuf_AddDesc_WAGLMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PlayerStruct_2eproto();
  ::protobuf_AddDesc_GameStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rWAGLMsg.proto\032\022PlayerStruct.proto\032\020Gam"
    "eStruct.proto\"r\n\021PBW2GLPlayerLogin\022!\n\004in"
    "fo\030\001 \001(\0132\023.PBPlayerGlobalBase\022\024\n\014logicwo"
    "rldid\030\002 \001(\r\022\022\n\nservertype\030\003 \001(\r\022\020\n\010serve"
    "rid\030\004 \001(\r\"&\n\022PBW2GLPlayerLogout\022\020\n\010playe"
    "rid\030\001 \001(\r\"d\n\024PBW2GLPlayerTransfer\022\020\n\010pla"
    "yerid\030\001 \001(\r\022\024\n\014logicworldid\030\002 \001(\r\022\022\n\nser"
    "vertype\030\003 \001(\r\022\020\n\010serverid\030\004 \001(\r", 311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WAGLMsg.proto", &protobuf_RegisterTypes);
  PBW2GLPlayerLogin::default_instance_ = new PBW2GLPlayerLogin();
  PBW2GLPlayerLogout::default_instance_ = new PBW2GLPlayerLogout();
  PBW2GLPlayerTransfer::default_instance_ = new PBW2GLPlayerTransfer();
  PBW2GLPlayerLogin::default_instance_->InitAsDefaultInstance();
  PBW2GLPlayerLogout::default_instance_->InitAsDefaultInstance();
  PBW2GLPlayerTransfer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WAGLMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WAGLMsg_2eproto {
  StaticDescriptorInitializer_WAGLMsg_2eproto() {
    protobuf_AddDesc_WAGLMsg_2eproto();
  }
} static_descriptor_initializer_WAGLMsg_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBW2GLPlayerLogin::kInfoFieldNumber;
const int PBW2GLPlayerLogin::kLogicworldidFieldNumber;
const int PBW2GLPlayerLogin::kServertypeFieldNumber;
const int PBW2GLPlayerLogin::kServeridFieldNumber;
#endif  // !_MSC_VER

PBW2GLPlayerLogin::PBW2GLPlayerLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GLPlayerLogin::InitAsDefaultInstance() {
  info_ = const_cast< ::PBPlayerGlobalBase*>(&::PBPlayerGlobalBase::default_instance());
}

PBW2GLPlayerLogin::PBW2GLPlayerLogin(const PBW2GLPlayerLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GLPlayerLogin::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  logicworldid_ = 0u;
  servertype_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GLPlayerLogin::~PBW2GLPlayerLogin() {
  SharedDtor();
}

void PBW2GLPlayerLogin::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PBW2GLPlayerLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GLPlayerLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GLPlayerLogin_descriptor_;
}

const PBW2GLPlayerLogin& PBW2GLPlayerLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGLMsg_2eproto();  return *default_instance_;
}

PBW2GLPlayerLogin* PBW2GLPlayerLogin::default_instance_ = NULL;

PBW2GLPlayerLogin* PBW2GLPlayerLogin::New() const {
  return new PBW2GLPlayerLogin;
}

void PBW2GLPlayerLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::PBPlayerGlobalBase::Clear();
    }
    logicworldid_ = 0u;
    servertype_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GLPlayerLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerGlobalBase info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logicworldid;
        break;
      }
      
      // optional uint32 logicworldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicworldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicworldid_)));
          set_has_logicworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_servertype;
        break;
      }
      
      // optional uint32 servertype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverid;
        break;
      }
      
      // optional uint32 serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GLPlayerLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerGlobalBase info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logicworldid(), output);
  }
  
  // optional uint32 servertype = 3;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->servertype(), output);
  }
  
  // optional uint32 serverid = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GLPlayerLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerGlobalBase info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logicworldid(), target);
  }
  
  // optional uint32 servertype = 3;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->servertype(), target);
  }
  
  // optional uint32 serverid = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GLPlayerLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerGlobalBase info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional uint32 logicworldid = 2;
    if (has_logicworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicworldid());
    }
    
    // optional uint32 servertype = 3;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }
    
    // optional uint32 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GLPlayerLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GLPlayerLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GLPlayerLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GLPlayerLogin::MergeFrom(const PBW2GLPlayerLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::PBPlayerGlobalBase::MergeFrom(from.info());
    }
    if (from.has_logicworldid()) {
      set_logicworldid(from.logicworldid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GLPlayerLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GLPlayerLogin::CopyFrom(const PBW2GLPlayerLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GLPlayerLogin::IsInitialized() const {
  
  return true;
}

void PBW2GLPlayerLogin::Swap(PBW2GLPlayerLogin* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(logicworldid_, other->logicworldid_);
    std::swap(servertype_, other->servertype_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GLPlayerLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GLPlayerLogin_descriptor_;
  metadata.reflection = PBW2GLPlayerLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GLPlayerLogout::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBW2GLPlayerLogout::PBW2GLPlayerLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GLPlayerLogout::InitAsDefaultInstance() {
}

PBW2GLPlayerLogout::PBW2GLPlayerLogout(const PBW2GLPlayerLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GLPlayerLogout::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GLPlayerLogout::~PBW2GLPlayerLogout() {
  SharedDtor();
}

void PBW2GLPlayerLogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GLPlayerLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GLPlayerLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GLPlayerLogout_descriptor_;
}

const PBW2GLPlayerLogout& PBW2GLPlayerLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGLMsg_2eproto();  return *default_instance_;
}

PBW2GLPlayerLogout* PBW2GLPlayerLogout::default_instance_ = NULL;

PBW2GLPlayerLogout* PBW2GLPlayerLogout::New() const {
  return new PBW2GLPlayerLogout;
}

void PBW2GLPlayerLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GLPlayerLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GLPlayerLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GLPlayerLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GLPlayerLogout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GLPlayerLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GLPlayerLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GLPlayerLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GLPlayerLogout::MergeFrom(const PBW2GLPlayerLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GLPlayerLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GLPlayerLogout::CopyFrom(const PBW2GLPlayerLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GLPlayerLogout::IsInitialized() const {
  
  return true;
}

void PBW2GLPlayerLogout::Swap(PBW2GLPlayerLogout* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GLPlayerLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GLPlayerLogout_descriptor_;
  metadata.reflection = PBW2GLPlayerLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GLPlayerTransfer::kPlayeridFieldNumber;
const int PBW2GLPlayerTransfer::kLogicworldidFieldNumber;
const int PBW2GLPlayerTransfer::kServertypeFieldNumber;
const int PBW2GLPlayerTransfer::kServeridFieldNumber;
#endif  // !_MSC_VER

PBW2GLPlayerTransfer::PBW2GLPlayerTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GLPlayerTransfer::InitAsDefaultInstance() {
}

PBW2GLPlayerTransfer::PBW2GLPlayerTransfer(const PBW2GLPlayerTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GLPlayerTransfer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  logicworldid_ = 0u;
  servertype_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GLPlayerTransfer::~PBW2GLPlayerTransfer() {
  SharedDtor();
}

void PBW2GLPlayerTransfer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GLPlayerTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GLPlayerTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GLPlayerTransfer_descriptor_;
}

const PBW2GLPlayerTransfer& PBW2GLPlayerTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAGLMsg_2eproto();  return *default_instance_;
}

PBW2GLPlayerTransfer* PBW2GLPlayerTransfer::default_instance_ = NULL;

PBW2GLPlayerTransfer* PBW2GLPlayerTransfer::New() const {
  return new PBW2GLPlayerTransfer;
}

void PBW2GLPlayerTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    logicworldid_ = 0u;
    servertype_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GLPlayerTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logicworldid;
        break;
      }
      
      // optional uint32 logicworldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicworldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicworldid_)));
          set_has_logicworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_servertype;
        break;
      }
      
      // optional uint32 servertype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverid;
        break;
      }
      
      // optional uint32 serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GLPlayerTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logicworldid(), output);
  }
  
  // optional uint32 servertype = 3;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->servertype(), output);
  }
  
  // optional uint32 serverid = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GLPlayerTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 logicworldid = 2;
  if (has_logicworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logicworldid(), target);
  }
  
  // optional uint32 servertype = 3;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->servertype(), target);
  }
  
  // optional uint32 serverid = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GLPlayerTransfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 logicworldid = 2;
    if (has_logicworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicworldid());
    }
    
    // optional uint32 servertype = 3;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }
    
    // optional uint32 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GLPlayerTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GLPlayerTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GLPlayerTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GLPlayerTransfer::MergeFrom(const PBW2GLPlayerTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_logicworldid()) {
      set_logicworldid(from.logicworldid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GLPlayerTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GLPlayerTransfer::CopyFrom(const PBW2GLPlayerTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GLPlayerTransfer::IsInitialized() const {
  
  return true;
}

void PBW2GLPlayerTransfer::Swap(PBW2GLPlayerTransfer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(logicworldid_, other->logicworldid_);
    std::swap(servertype_, other->servertype_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GLPlayerTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GLPlayerTransfer_descriptor_;
  metadata.reflection = PBW2GLPlayerTransfer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
