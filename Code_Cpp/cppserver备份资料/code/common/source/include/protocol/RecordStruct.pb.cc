// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RecordStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBLog_Common_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLog_Common_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLog_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLog_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLog_Doing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLog_Doing_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLog_Dartcar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLog_Dartcar_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RecordStruct_2eproto() {
  protobuf_AddDesc_RecordStruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RecordStruct.proto");
  GOOGLE_CHECK(file != NULL);
  PBLog_Common_descriptor_ = file->message_type(0);
  static const int PBLog_Common_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Common, doingevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Common, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Common, stamp_),
  };
  PBLog_Common_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLog_Common_descriptor_,
      PBLog_Common::default_instance_,
      PBLog_Common_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Common, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Common, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLog_Common));
  PBLog_Item_descriptor_ = file->message_type(1);
  static const int PBLog_Item_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Item, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Item, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Item, doingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Item, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Item, itemsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Item, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Item, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Item, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Item, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Item, enhanceexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Item, forgeexp_),
  };
  PBLog_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLog_Item_descriptor_,
      PBLog_Item::default_instance_,
      PBLog_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLog_Item));
  PBLog_Doing_descriptor_ = file->message_type(2);
  static const int PBLog_Doing_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Doing, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Doing, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Doing, scenecell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Doing, doingobj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Doing, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Doing, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Doing, linkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Doing, fromvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Doing, tovalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Doing, value_),
  };
  PBLog_Doing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLog_Doing_descriptor_,
      PBLog_Doing::default_instance_,
      PBLog_Doing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Doing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Doing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLog_Doing));
  PBLog_Dartcar_descriptor_ = file->message_type(3);
  static const int PBLog_Dartcar_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, scenecellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, dynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, liushui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, dartcarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, honghuo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, prizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, prizecount_),
  };
  PBLog_Dartcar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLog_Dartcar_descriptor_,
      PBLog_Dartcar::default_instance_,
      PBLog_Dartcar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLog_Dartcar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLog_Dartcar));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RecordStruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLog_Common_descriptor_, &PBLog_Common::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLog_Item_descriptor_, &PBLog_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLog_Doing_descriptor_, &PBLog_Doing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLog_Dartcar_descriptor_, &PBLog_Dartcar::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RecordStruct_2eproto() {
  delete PBLog_Common::default_instance_;
  delete PBLog_Common_reflection_;
  delete PBLog_Item::default_instance_;
  delete PBLog_Item_reflection_;
  delete PBLog_Doing::default_instance_;
  delete PBLog_Doing_reflection_;
  delete PBLog_Dartcar::default_instance_;
  delete PBLog_Dartcar_reflection_;
}

void protobuf_AddDesc_RecordStruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PlayerStruct_2eproto();
  ::protobuf_AddDesc_GameStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022RecordStruct.proto\032\022PlayerStruct.proto"
    "\032\020GameStruct.proto\"B\n\014PBLog_Common\022\022\n\ndo"
    "ingevent\030\001 \001(\r\022\017\n\007worldid\030\002 \001(\r\022\r\n\005stamp"
    "\030\003 \001(\r\"\330\001\n\nPBLog_Item\022\035\n\006common\030\001 \001(\0132\r."
    "PBLog_Common\022\020\n\010playerid\030\002 \001(\r\022\021\n\tdoingt"
    "ype\030\003 \001(\r\022\016\n\006itemId\030\004 \001(\r\022\016\n\006itemSN\030\005 \001("
    "\004\022\017\n\007itemNum\030\006 \001(\r\022\014\n\004flag\030\007 \001(\r\022\020\n\010left"
    "time\030\010 \001(\r\022\017\n\007endtime\030\t \001(\r\022\022\n\nenhanceex"
    "p\030\n \001(\r\022\020\n\010forgeexp\030\013 \001(\r\"\311\001\n\013PBLog_Doin"
    "g\022\035\n\006common\030\001 \001(\0132\r.PBLog_Common\022\017\n\007scen"
    "eid\030\002 \001(\r\022\021\n\tscenecell\030\003 \001(\r\022\020\n\010doingobj"
    "\030\004 \001(\r\022\020\n\010playerid\030\005 \001(\r\022\020\n\010objectid\030\006 \001"
    "(\004\022\016\n\006linkid\030\007 \001(\r\022\021\n\tfromvalue\030\010 \001(\004\022\017\n"
    "\007tovalue\030\t \001(\004\022\r\n\005value\030\n \001(\004\"\362\001\n\rPBLog_"
    "Dartcar\022\035\n\006common\030\001 \001(\0132\r.PBLog_Common\022\r"
    "\n\005event\030\002 \001(\r\022\017\n\007sceneid\030\003 \001(\r\022\023\n\013scenec"
    "ellid\030\004 \001(\r\022\r\n\005dynid\030\005 \001(\004\022\017\n\007liushui\030\006 "
    "\001(\004\022\021\n\tdartcarid\030\007 \001(\r\022\017\n\007honghuo\030\010 \001(\r\022"
    "\022\n\nplayername\030\t \001(\t\022\020\n\010playerid\030\n \001(\r\022\017\n"
    "\007prizeid\030\013 \001(\r\022\022\n\nprizecount\030\014 \001(\r", 794);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RecordStruct.proto", &protobuf_RegisterTypes);
  PBLog_Common::default_instance_ = new PBLog_Common();
  PBLog_Item::default_instance_ = new PBLog_Item();
  PBLog_Doing::default_instance_ = new PBLog_Doing();
  PBLog_Dartcar::default_instance_ = new PBLog_Dartcar();
  PBLog_Common::default_instance_->InitAsDefaultInstance();
  PBLog_Item::default_instance_->InitAsDefaultInstance();
  PBLog_Doing::default_instance_->InitAsDefaultInstance();
  PBLog_Dartcar::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RecordStruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RecordStruct_2eproto {
  StaticDescriptorInitializer_RecordStruct_2eproto() {
    protobuf_AddDesc_RecordStruct_2eproto();
  }
} static_descriptor_initializer_RecordStruct_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBLog_Common::kDoingeventFieldNumber;
const int PBLog_Common::kWorldidFieldNumber;
const int PBLog_Common::kStampFieldNumber;
#endif  // !_MSC_VER

PBLog_Common::PBLog_Common()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLog_Common::InitAsDefaultInstance() {
}

PBLog_Common::PBLog_Common(const PBLog_Common& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLog_Common::SharedCtor() {
  _cached_size_ = 0;
  doingevent_ = 0u;
  worldid_ = 0u;
  stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLog_Common::~PBLog_Common() {
  SharedDtor();
}

void PBLog_Common::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBLog_Common::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLog_Common::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLog_Common_descriptor_;
}

const PBLog_Common& PBLog_Common::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordStruct_2eproto();  return *default_instance_;
}

PBLog_Common* PBLog_Common::default_instance_ = NULL;

PBLog_Common* PBLog_Common::New() const {
  return new PBLog_Common;
}

void PBLog_Common::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doingevent_ = 0u;
    worldid_ = 0u;
    stamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLog_Common::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 doingevent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doingevent_)));
          set_has_doingevent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_worldid;
        break;
      }
      
      // optional uint32 worldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stamp;
        break;
      }
      
      // optional uint32 stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLog_Common::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 doingevent = 1;
  if (has_doingevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->doingevent(), output);
  }
  
  // optional uint32 worldid = 2;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->worldid(), output);
  }
  
  // optional uint32 stamp = 3;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLog_Common::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 doingevent = 1;
  if (has_doingevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->doingevent(), target);
  }
  
  // optional uint32 worldid = 2;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->worldid(), target);
  }
  
  // optional uint32 stamp = 3;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLog_Common::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 doingevent = 1;
    if (has_doingevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->doingevent());
    }
    
    // optional uint32 worldid = 2;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 stamp = 3;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLog_Common::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLog_Common* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLog_Common*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLog_Common::MergeFrom(const PBLog_Common& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doingevent()) {
      set_doingevent(from.doingevent());
    }
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLog_Common::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLog_Common::CopyFrom(const PBLog_Common& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLog_Common::IsInitialized() const {
  
  return true;
}

void PBLog_Common::Swap(PBLog_Common* other) {
  if (other != this) {
    std::swap(doingevent_, other->doingevent_);
    std::swap(worldid_, other->worldid_);
    std::swap(stamp_, other->stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLog_Common::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLog_Common_descriptor_;
  metadata.reflection = PBLog_Common_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLog_Item::kCommonFieldNumber;
const int PBLog_Item::kPlayeridFieldNumber;
const int PBLog_Item::kDoingtypeFieldNumber;
const int PBLog_Item::kItemIdFieldNumber;
const int PBLog_Item::kItemSNFieldNumber;
const int PBLog_Item::kItemNumFieldNumber;
const int PBLog_Item::kFlagFieldNumber;
const int PBLog_Item::kLefttimeFieldNumber;
const int PBLog_Item::kEndtimeFieldNumber;
const int PBLog_Item::kEnhanceexpFieldNumber;
const int PBLog_Item::kForgeexpFieldNumber;
#endif  // !_MSC_VER

PBLog_Item::PBLog_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLog_Item::InitAsDefaultInstance() {
  common_ = const_cast< ::PBLog_Common*>(&::PBLog_Common::default_instance());
}

PBLog_Item::PBLog_Item(const PBLog_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLog_Item::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  playerid_ = 0u;
  doingtype_ = 0u;
  itemid_ = 0u;
  itemsn_ = GOOGLE_ULONGLONG(0);
  itemnum_ = 0u;
  flag_ = 0u;
  lefttime_ = 0u;
  endtime_ = 0u;
  enhanceexp_ = 0u;
  forgeexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLog_Item::~PBLog_Item() {
  SharedDtor();
}

void PBLog_Item::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void PBLog_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLog_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLog_Item_descriptor_;
}

const PBLog_Item& PBLog_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordStruct_2eproto();  return *default_instance_;
}

PBLog_Item* PBLog_Item::default_instance_ = NULL;

PBLog_Item* PBLog_Item::New() const {
  return new PBLog_Item;
}

void PBLog_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBLog_Common::Clear();
    }
    playerid_ = 0u;
    doingtype_ = 0u;
    itemid_ = 0u;
    itemsn_ = GOOGLE_ULONGLONG(0);
    itemnum_ = 0u;
    flag_ = 0u;
    lefttime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    endtime_ = 0u;
    enhanceexp_ = 0u;
    forgeexp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLog_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBLog_Common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_doingtype;
        break;
      }
      
      // optional uint32 doingtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doingtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doingtype_)));
          set_has_doingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemId;
        break;
      }
      
      // optional uint32 itemId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemSN;
        break;
      }
      
      // optional uint64 itemSN = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsn_)));
          set_has_itemsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_itemNum;
        break;
      }
      
      // optional uint32 itemNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flag;
        break;
      }
      
      // optional uint32 flag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lefttime;
        break;
      }
      
      // optional uint32 lefttime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_endtime;
        break;
      }
      
      // optional uint32 endtime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_enhanceexp;
        break;
      }
      
      // optional uint32 enhanceexp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhanceexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhanceexp_)));
          set_has_enhanceexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_forgeexp;
        break;
      }
      
      // optional uint32 forgeexp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forgeexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forgeexp_)));
          set_has_forgeexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLog_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBLog_Common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // optional uint32 doingtype = 3;
  if (has_doingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->doingtype(), output);
  }
  
  // optional uint32 itemId = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }
  
  // optional uint64 itemSN = 5;
  if (has_itemsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->itemsn(), output);
  }
  
  // optional uint32 itemNum = 6;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->itemnum(), output);
  }
  
  // optional uint32 flag = 7;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flag(), output);
  }
  
  // optional uint32 lefttime = 8;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lefttime(), output);
  }
  
  // optional uint32 endtime = 9;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->endtime(), output);
  }
  
  // optional uint32 enhanceexp = 10;
  if (has_enhanceexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->enhanceexp(), output);
  }
  
  // optional uint32 forgeexp = 11;
  if (has_forgeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->forgeexp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLog_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBLog_Common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // optional uint32 doingtype = 3;
  if (has_doingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->doingtype(), target);
  }
  
  // optional uint32 itemId = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }
  
  // optional uint64 itemSN = 5;
  if (has_itemsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->itemsn(), target);
  }
  
  // optional uint32 itemNum = 6;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->itemnum(), target);
  }
  
  // optional uint32 flag = 7;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flag(), target);
  }
  
  // optional uint32 lefttime = 8;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lefttime(), target);
  }
  
  // optional uint32 endtime = 9;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->endtime(), target);
  }
  
  // optional uint32 enhanceexp = 10;
  if (has_enhanceexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->enhanceexp(), target);
  }
  
  // optional uint32 forgeexp = 11;
  if (has_forgeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->forgeexp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLog_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBLog_Common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 doingtype = 3;
    if (has_doingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->doingtype());
    }
    
    // optional uint32 itemId = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }
    
    // optional uint64 itemSN = 5;
    if (has_itemsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsn());
    }
    
    // optional uint32 itemNum = 6;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 flag = 7;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }
    
    // optional uint32 lefttime = 8;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefttime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 endtime = 9;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }
    
    // optional uint32 enhanceexp = 10;
    if (has_enhanceexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhanceexp());
    }
    
    // optional uint32 forgeexp = 11;
    if (has_forgeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forgeexp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLog_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLog_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLog_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLog_Item::MergeFrom(const PBLog_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBLog_Common::MergeFrom(from.common());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_doingtype()) {
      set_doingtype(from.doingtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemsn()) {
      set_itemsn(from.itemsn());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_enhanceexp()) {
      set_enhanceexp(from.enhanceexp());
    }
    if (from.has_forgeexp()) {
      set_forgeexp(from.forgeexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLog_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLog_Item::CopyFrom(const PBLog_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLog_Item::IsInitialized() const {
  
  return true;
}

void PBLog_Item::Swap(PBLog_Item* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(playerid_, other->playerid_);
    std::swap(doingtype_, other->doingtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemsn_, other->itemsn_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(flag_, other->flag_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(enhanceexp_, other->enhanceexp_);
    std::swap(forgeexp_, other->forgeexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLog_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLog_Item_descriptor_;
  metadata.reflection = PBLog_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLog_Doing::kCommonFieldNumber;
const int PBLog_Doing::kSceneidFieldNumber;
const int PBLog_Doing::kScenecellFieldNumber;
const int PBLog_Doing::kDoingobjFieldNumber;
const int PBLog_Doing::kPlayeridFieldNumber;
const int PBLog_Doing::kObjectidFieldNumber;
const int PBLog_Doing::kLinkidFieldNumber;
const int PBLog_Doing::kFromvalueFieldNumber;
const int PBLog_Doing::kTovalueFieldNumber;
const int PBLog_Doing::kValueFieldNumber;
#endif  // !_MSC_VER

PBLog_Doing::PBLog_Doing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLog_Doing::InitAsDefaultInstance() {
  common_ = const_cast< ::PBLog_Common*>(&::PBLog_Common::default_instance());
}

PBLog_Doing::PBLog_Doing(const PBLog_Doing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLog_Doing::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  sceneid_ = 0u;
  scenecell_ = 0u;
  doingobj_ = 0u;
  playerid_ = 0u;
  objectid_ = GOOGLE_ULONGLONG(0);
  linkid_ = 0u;
  fromvalue_ = GOOGLE_ULONGLONG(0);
  tovalue_ = GOOGLE_ULONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLog_Doing::~PBLog_Doing() {
  SharedDtor();
}

void PBLog_Doing::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void PBLog_Doing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLog_Doing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLog_Doing_descriptor_;
}

const PBLog_Doing& PBLog_Doing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordStruct_2eproto();  return *default_instance_;
}

PBLog_Doing* PBLog_Doing::default_instance_ = NULL;

PBLog_Doing* PBLog_Doing::New() const {
  return new PBLog_Doing;
}

void PBLog_Doing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBLog_Common::Clear();
    }
    sceneid_ = 0u;
    scenecell_ = 0u;
    doingobj_ = 0u;
    playerid_ = 0u;
    objectid_ = GOOGLE_ULONGLONG(0);
    linkid_ = 0u;
    fromvalue_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tovalue_ = GOOGLE_ULONGLONG(0);
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLog_Doing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBLog_Common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneid;
        break;
      }
      
      // optional uint32 sceneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scenecell;
        break;
      }
      
      // optional uint32 scenecell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenecell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenecell_)));
          set_has_scenecell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_doingobj;
        break;
      }
      
      // optional uint32 doingobj = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doingobj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doingobj_)));
          set_has_doingobj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_objectid;
        break;
      }
      
      // optional uint64 objectid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_linkid;
        break;
      }
      
      // optional uint32 linkid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linkid_)));
          set_has_linkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fromvalue;
        break;
      }
      
      // optional uint64 fromvalue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromvalue_)));
          set_has_fromvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tovalue;
        break;
      }
      
      // optional uint64 tovalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tovalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tovalue_)));
          set_has_tovalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_value;
        break;
      }
      
      // optional uint64 value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLog_Doing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBLog_Common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  // optional uint32 sceneid = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sceneid(), output);
  }
  
  // optional uint32 scenecell = 3;
  if (has_scenecell()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scenecell(), output);
  }
  
  // optional uint32 doingobj = 4;
  if (has_doingobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->doingobj(), output);
  }
  
  // optional uint32 playerid = 5;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->playerid(), output);
  }
  
  // optional uint64 objectid = 6;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->objectid(), output);
  }
  
  // optional uint32 linkid = 7;
  if (has_linkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->linkid(), output);
  }
  
  // optional uint64 fromvalue = 8;
  if (has_fromvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fromvalue(), output);
  }
  
  // optional uint64 tovalue = 9;
  if (has_tovalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->tovalue(), output);
  }
  
  // optional uint64 value = 10;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLog_Doing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBLog_Common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  // optional uint32 sceneid = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sceneid(), target);
  }
  
  // optional uint32 scenecell = 3;
  if (has_scenecell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scenecell(), target);
  }
  
  // optional uint32 doingobj = 4;
  if (has_doingobj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->doingobj(), target);
  }
  
  // optional uint32 playerid = 5;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->playerid(), target);
  }
  
  // optional uint64 objectid = 6;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->objectid(), target);
  }
  
  // optional uint32 linkid = 7;
  if (has_linkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->linkid(), target);
  }
  
  // optional uint64 fromvalue = 8;
  if (has_fromvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fromvalue(), target);
  }
  
  // optional uint64 tovalue = 9;
  if (has_tovalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->tovalue(), target);
  }
  
  // optional uint64 value = 10;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLog_Doing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBLog_Common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
    // optional uint32 sceneid = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 scenecell = 3;
    if (has_scenecell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenecell());
    }
    
    // optional uint32 doingobj = 4;
    if (has_doingobj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->doingobj());
    }
    
    // optional uint32 playerid = 5;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint64 objectid = 6;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objectid());
    }
    
    // optional uint32 linkid = 7;
    if (has_linkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linkid());
    }
    
    // optional uint64 fromvalue = 8;
    if (has_fromvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromvalue());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 tovalue = 9;
    if (has_tovalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tovalue());
    }
    
    // optional uint64 value = 10;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLog_Doing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLog_Doing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLog_Doing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLog_Doing::MergeFrom(const PBLog_Doing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBLog_Common::MergeFrom(from.common());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenecell()) {
      set_scenecell(from.scenecell());
    }
    if (from.has_doingobj()) {
      set_doingobj(from.doingobj());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_linkid()) {
      set_linkid(from.linkid());
    }
    if (from.has_fromvalue()) {
      set_fromvalue(from.fromvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tovalue()) {
      set_tovalue(from.tovalue());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLog_Doing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLog_Doing::CopyFrom(const PBLog_Doing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLog_Doing::IsInitialized() const {
  
  return true;
}

void PBLog_Doing::Swap(PBLog_Doing* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenecell_, other->scenecell_);
    std::swap(doingobj_, other->doingobj_);
    std::swap(playerid_, other->playerid_);
    std::swap(objectid_, other->objectid_);
    std::swap(linkid_, other->linkid_);
    std::swap(fromvalue_, other->fromvalue_);
    std::swap(tovalue_, other->tovalue_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLog_Doing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLog_Doing_descriptor_;
  metadata.reflection = PBLog_Doing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLog_Dartcar::kCommonFieldNumber;
const int PBLog_Dartcar::kEventFieldNumber;
const int PBLog_Dartcar::kSceneidFieldNumber;
const int PBLog_Dartcar::kScenecellidFieldNumber;
const int PBLog_Dartcar::kDynidFieldNumber;
const int PBLog_Dartcar::kLiushuiFieldNumber;
const int PBLog_Dartcar::kDartcaridFieldNumber;
const int PBLog_Dartcar::kHonghuoFieldNumber;
const int PBLog_Dartcar::kPlayernameFieldNumber;
const int PBLog_Dartcar::kPlayeridFieldNumber;
const int PBLog_Dartcar::kPrizeidFieldNumber;
const int PBLog_Dartcar::kPrizecountFieldNumber;
#endif  // !_MSC_VER

PBLog_Dartcar::PBLog_Dartcar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLog_Dartcar::InitAsDefaultInstance() {
  common_ = const_cast< ::PBLog_Common*>(&::PBLog_Common::default_instance());
}

PBLog_Dartcar::PBLog_Dartcar(const PBLog_Dartcar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLog_Dartcar::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  event_ = 0u;
  sceneid_ = 0u;
  scenecellid_ = 0u;
  dynid_ = GOOGLE_ULONGLONG(0);
  liushui_ = GOOGLE_ULONGLONG(0);
  dartcarid_ = 0u;
  honghuo_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0u;
  prizeid_ = 0u;
  prizecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLog_Dartcar::~PBLog_Dartcar() {
  SharedDtor();
}

void PBLog_Dartcar::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete common_;
  }
}

void PBLog_Dartcar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLog_Dartcar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLog_Dartcar_descriptor_;
}

const PBLog_Dartcar& PBLog_Dartcar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordStruct_2eproto();  return *default_instance_;
}

PBLog_Dartcar* PBLog_Dartcar::default_instance_ = NULL;

PBLog_Dartcar* PBLog_Dartcar::New() const {
  return new PBLog_Dartcar;
}

void PBLog_Dartcar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBLog_Common::Clear();
    }
    event_ = 0u;
    sceneid_ = 0u;
    scenecellid_ = 0u;
    dynid_ = GOOGLE_ULONGLONG(0);
    liushui_ = GOOGLE_ULONGLONG(0);
    dartcarid_ = 0u;
    honghuo_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    playerid_ = 0u;
    prizeid_ = 0u;
    prizecount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLog_Dartcar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBLog_Common common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event;
        break;
      }
      
      // optional uint32 event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }
      
      // optional uint32 sceneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scenecellid;
        break;
      }
      
      // optional uint32 scenecellid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenecellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenecellid_)));
          set_has_scenecellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dynid;
        break;
      }
      
      // optional uint64 dynid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynid_)));
          set_has_dynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_liushui;
        break;
      }
      
      // optional uint64 liushui = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liushui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &liushui_)));
          set_has_liushui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dartcarid;
        break;
      }
      
      // optional uint32 dartcarid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dartcarid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartcarid_)));
          set_has_dartcarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_honghuo;
        break;
      }
      
      // optional uint32 honghuo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honghuo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honghuo_)));
          set_has_honghuo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_playername;
        break;
      }
      
      // optional string playername = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_prizeid;
        break;
      }
      
      // optional uint32 prizeid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizeid_)));
          set_has_prizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_prizecount;
        break;
      }
      
      // optional uint32 prizecount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizecount_)));
          set_has_prizecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLog_Dartcar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBLog_Common common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  // optional uint32 event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event(), output);
  }
  
  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }
  
  // optional uint32 scenecellid = 4;
  if (has_scenecellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scenecellid(), output);
  }
  
  // optional uint64 dynid = 5;
  if (has_dynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dynid(), output);
  }
  
  // optional uint64 liushui = 6;
  if (has_liushui()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->liushui(), output);
  }
  
  // optional uint32 dartcarid = 7;
  if (has_dartcarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dartcarid(), output);
  }
  
  // optional uint32 honghuo = 8;
  if (has_honghuo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->honghuo(), output);
  }
  
  // optional string playername = 9;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->playername(), output);
  }
  
  // optional uint32 playerid = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->playerid(), output);
  }
  
  // optional uint32 prizeid = 11;
  if (has_prizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->prizeid(), output);
  }
  
  // optional uint32 prizecount = 12;
  if (has_prizecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->prizecount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLog_Dartcar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBLog_Common common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  // optional uint32 event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event(), target);
  }
  
  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }
  
  // optional uint32 scenecellid = 4;
  if (has_scenecellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scenecellid(), target);
  }
  
  // optional uint64 dynid = 5;
  if (has_dynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->dynid(), target);
  }
  
  // optional uint64 liushui = 6;
  if (has_liushui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->liushui(), target);
  }
  
  // optional uint32 dartcarid = 7;
  if (has_dartcarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dartcarid(), target);
  }
  
  // optional uint32 honghuo = 8;
  if (has_honghuo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->honghuo(), target);
  }
  
  // optional string playername = 9;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->playername(), target);
  }
  
  // optional uint32 playerid = 10;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->playerid(), target);
  }
  
  // optional uint32 prizeid = 11;
  if (has_prizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->prizeid(), target);
  }
  
  // optional uint32 prizecount = 12;
  if (has_prizecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->prizecount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLog_Dartcar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBLog_Common common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
    // optional uint32 event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }
    
    // optional uint32 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 scenecellid = 4;
    if (has_scenecellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenecellid());
    }
    
    // optional uint64 dynid = 5;
    if (has_dynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynid());
    }
    
    // optional uint64 liushui = 6;
    if (has_liushui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->liushui());
    }
    
    // optional uint32 dartcarid = 7;
    if (has_dartcarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartcarid());
    }
    
    // optional uint32 honghuo = 8;
    if (has_honghuo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honghuo());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string playername = 9;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // optional uint32 playerid = 10;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 prizeid = 11;
    if (has_prizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizeid());
    }
    
    // optional uint32 prizecount = 12;
    if (has_prizecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizecount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLog_Dartcar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLog_Dartcar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLog_Dartcar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLog_Dartcar::MergeFrom(const PBLog_Dartcar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBLog_Common::MergeFrom(from.common());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenecellid()) {
      set_scenecellid(from.scenecellid());
    }
    if (from.has_dynid()) {
      set_dynid(from.dynid());
    }
    if (from.has_liushui()) {
      set_liushui(from.liushui());
    }
    if (from.has_dartcarid()) {
      set_dartcarid(from.dartcarid());
    }
    if (from.has_honghuo()) {
      set_honghuo(from.honghuo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_prizeid()) {
      set_prizeid(from.prizeid());
    }
    if (from.has_prizecount()) {
      set_prizecount(from.prizecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLog_Dartcar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLog_Dartcar::CopyFrom(const PBLog_Dartcar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLog_Dartcar::IsInitialized() const {
  
  return true;
}

void PBLog_Dartcar::Swap(PBLog_Dartcar* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(event_, other->event_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenecellid_, other->scenecellid_);
    std::swap(dynid_, other->dynid_);
    std::swap(liushui_, other->liushui_);
    std::swap(dartcarid_, other->dartcarid_);
    std::swap(honghuo_, other->honghuo_);
    std::swap(playername_, other->playername_);
    std::swap(playerid_, other->playerid_);
    std::swap(prizeid_, other->prizeid_);
    std::swap(prizecount_, other->prizecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLog_Dartcar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLog_Dartcar_descriptor_;
  metadata.reflection = PBLog_Dartcar_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
