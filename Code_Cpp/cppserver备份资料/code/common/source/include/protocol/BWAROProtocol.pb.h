// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BWAROProtocol.proto

#ifndef PROTOBUF_BWAROProtocol_2eproto__INCLUDED
#define PROTOBUF_BWAROProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BWAROProtocol_2eproto();
void protobuf_AssignDesc_BWAROProtocol_2eproto();
void protobuf_ShutdownFile_BWAROProtocol_2eproto();


enum _emPBW2RO_Protocol {
  P_BW2RO_Protocol_Register = 0,
  P_BW2RO_Protocol_Max = 1
};
bool _emPBW2RO_Protocol_IsValid(int value);
const _emPBW2RO_Protocol _emPBW2RO_Protocol_MIN = P_BW2RO_Protocol_Register;
const _emPBW2RO_Protocol _emPBW2RO_Protocol_MAX = P_BW2RO_Protocol_Max;
const int _emPBW2RO_Protocol_ARRAYSIZE = _emPBW2RO_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPBW2RO_Protocol_descriptor();
inline const ::std::string& _emPBW2RO_Protocol_Name(_emPBW2RO_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPBW2RO_Protocol_descriptor(), value);
}
inline bool _emPBW2RO_Protocol_Parse(
    const ::std::string& name, _emPBW2RO_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPBW2RO_Protocol>(
    _emPBW2RO_Protocol_descriptor(), name, value);
}
enum _emPRO2BW_Protocol {
  P_RO2BW_Protocol_None = 0,
  P_RO2BW_Protocol_Max = 1
};
bool _emPRO2BW_Protocol_IsValid(int value);
const _emPRO2BW_Protocol _emPRO2BW_Protocol_MIN = P_RO2BW_Protocol_None;
const _emPRO2BW_Protocol _emPRO2BW_Protocol_MAX = P_RO2BW_Protocol_Max;
const int _emPRO2BW_Protocol_ARRAYSIZE = _emPRO2BW_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPRO2BW_Protocol_descriptor();
inline const ::std::string& _emPRO2BW_Protocol_Name(_emPRO2BW_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPRO2BW_Protocol_descriptor(), value);
}
inline bool _emPRO2BW_Protocol_Parse(
    const ::std::string& name, _emPRO2BW_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPRO2BW_Protocol>(
    _emPRO2BW_Protocol_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPBW2RO_Protocol>() {
  return _emPBW2RO_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPRO2BW_Protocol>() {
  return _emPRO2BW_Protocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BWAROProtocol_2eproto__INCLUDED
