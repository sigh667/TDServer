// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GLAGMsg.proto

#ifndef PROTOBUF_GLAGMsg_2eproto__INCLUDED
#define PROTOBUF_GLAGMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "AccountStruct.pb.h"
#include "PlayerStruct.pb.h"
#include "GameStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GLAGMsg_2eproto();
void protobuf_AssignDesc_GLAGMsg_2eproto();
void protobuf_ShutdownFile_GLAGMsg_2eproto();

class PBG2GLTradePlayer;
class PBG2GLTradeInfo;
class PBGLAGFindPlayer;
class PBGLAGFindPlayerAck;
class PBGL2GSaleMoneyFail;
class PBGL2GSaleMoneyCancel;
class PBG2GLSaleMoney_salecancel;
class PBGL2GAuctionSaleFail;
class PBGL2GAuctionSaleCancel;
class PBGL2GAuctionBuyFail;
class PBG2GLAuction_sale;
class PBG2GLFriend_AddAsk;
class PBG2GLFriend_Answer;
class PBG2GLFriend_Find;
class PBG2GLFriend_Info;
class PBG2GLFriend_Syn_ToGlobal;
class PBG2GLFriend_Add_ToGlobal;
class PBG2GLFriend_Del_ToGlobal;
class PBGL2GFriendInfo;
class PBGL2GFriendInfoUpdate;
class PBGL2GFriendAdd;
class PBGL2GFriendInfoSyn;
class PBG2GLCommon_BossInfoUpdate;
class PBG2GLCommon_BossListAsk;
class PBGLAGCallPlayer;
class PBGLAGLocatePlayer;
class PBGLAGLocatePlayerAck;
class PBWorldBossStatus;
class PBG2GLWorldBossStatusReportAsk;
class PBG2GLWorldBossKillInfoAsk;
class PBGL2GWorldBossStatusNtf;
class PBGL2GWorldBossKillerInfoAck;

// ===================================================================

class PBG2GLTradePlayer : public ::google::protobuf::Message {
 public:
  PBG2GLTradePlayer();
  virtual ~PBG2GLTradePlayer();
  
  PBG2GLTradePlayer(const PBG2GLTradePlayer& from);
  
  inline PBG2GLTradePlayer& operator=(const PBG2GLTradePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLTradePlayer& default_instance();
  
  void Swap(PBG2GLTradePlayer* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLTradePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLTradePlayer& from);
  void MergeFrom(const PBG2GLTradePlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional .PBPlayerDisplay tar = 2;
  inline bool has_tar() const;
  inline void clear_tar();
  static const int kTarFieldNumber = 2;
  inline const ::PBPlayerDisplay& tar() const;
  inline ::PBPlayerDisplay* mutable_tar();
  inline ::PBPlayerDisplay* release_tar();
  
  // @@protoc_insertion_point(class_scope:PBG2GLTradePlayer)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_tar();
  inline void clear_has_tar();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBPlayerDisplay* tar_;
  ::google::protobuf::uint32 playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLTradePlayer* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLTradeInfo : public ::google::protobuf::Message {
 public:
  PBG2GLTradeInfo();
  virtual ~PBG2GLTradeInfo();
  
  PBG2GLTradeInfo(const PBG2GLTradeInfo& from);
  
  inline PBG2GLTradeInfo& operator=(const PBG2GLTradeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLTradeInfo& default_instance();
  
  void Swap(PBG2GLTradeInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLTradeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLTradeInfo& from);
  void MergeFrom(const PBG2GLTradeInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 tradeid = 1;
  inline bool has_tradeid() const;
  inline void clear_tradeid();
  static const int kTradeidFieldNumber = 1;
  inline ::google::protobuf::uint32 tradeid() const;
  inline void set_tradeid(::google::protobuf::uint32 value);
  
  // optional uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional uint32 logicworldid = 3;
  inline bool has_logicworldid() const;
  inline void clear_logicworldid();
  static const int kLogicworldidFieldNumber = 3;
  inline ::google::protobuf::uint32 logicworldid() const;
  inline void set_logicworldid(::google::protobuf::uint32 value);
  
  // repeated .PBItem myitem = 4;
  inline int myitem_size() const;
  inline void clear_myitem();
  static const int kMyitemFieldNumber = 4;
  inline const ::PBItem& myitem(int index) const;
  inline ::PBItem* mutable_myitem(int index);
  inline ::PBItem* add_myitem();
  inline const ::google::protobuf::RepeatedPtrField< ::PBItem >&
      myitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBItem >*
      mutable_myitem();
  
  // repeated .PBMoney mymoney = 5;
  inline int mymoney_size() const;
  inline void clear_mymoney();
  static const int kMymoneyFieldNumber = 5;
  inline const ::PBMoney& mymoney(int index) const;
  inline ::PBMoney* mutable_mymoney(int index);
  inline ::PBMoney* add_mymoney();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMoney >&
      mymoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMoney >*
      mutable_mymoney();
  
  // repeated .PBItem taritem = 6;
  inline int taritem_size() const;
  inline void clear_taritem();
  static const int kTaritemFieldNumber = 6;
  inline const ::PBItem& taritem(int index) const;
  inline ::PBItem* mutable_taritem(int index);
  inline ::PBItem* add_taritem();
  inline const ::google::protobuf::RepeatedPtrField< ::PBItem >&
      taritem() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBItem >*
      mutable_taritem();
  
  // repeated .PBMoney tarmoney = 7;
  inline int tarmoney_size() const;
  inline void clear_tarmoney();
  static const int kTarmoneyFieldNumber = 7;
  inline const ::PBMoney& tarmoney(int index) const;
  inline ::PBMoney* mutable_tarmoney(int index);
  inline ::PBMoney* add_tarmoney();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMoney >&
      tarmoney() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMoney >*
      mutable_tarmoney();
  
  // optional uint64 mygetsliver = 8;
  inline bool has_mygetsliver() const;
  inline void clear_mygetsliver();
  static const int kMygetsliverFieldNumber = 8;
  inline ::google::protobuf::uint64 mygetsliver() const;
  inline void set_mygetsliver(::google::protobuf::uint64 value);
  
  // optional uint64 mygivesliver = 9;
  inline bool has_mygivesliver() const;
  inline void clear_mygivesliver();
  static const int kMygivesliverFieldNumber = 9;
  inline ::google::protobuf::uint64 mygivesliver() const;
  inline void set_mygivesliver(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:PBG2GLTradeInfo)
 private:
  inline void set_has_tradeid();
  inline void clear_has_tradeid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_logicworldid();
  inline void clear_has_logicworldid();
  inline void set_has_mygetsliver();
  inline void clear_has_mygetsliver();
  inline void set_has_mygivesliver();
  inline void clear_has_mygivesliver();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 tradeid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::RepeatedPtrField< ::PBItem > myitem_;
  ::google::protobuf::RepeatedPtrField< ::PBMoney > mymoney_;
  ::google::protobuf::RepeatedPtrField< ::PBItem > taritem_;
  ::google::protobuf::RepeatedPtrField< ::PBMoney > tarmoney_;
  ::google::protobuf::uint64 mygetsliver_;
  ::google::protobuf::uint64 mygivesliver_;
  ::google::protobuf::uint32 logicworldid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLTradeInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBGLAGFindPlayer : public ::google::protobuf::Message {
 public:
  PBGLAGFindPlayer();
  virtual ~PBGLAGFindPlayer();
  
  PBGLAGFindPlayer(const PBGLAGFindPlayer& from);
  
  inline PBGLAGFindPlayer& operator=(const PBGLAGFindPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGLAGFindPlayer& default_instance();
  
  void Swap(PBGLAGFindPlayer* other);
  
  // implements Message ----------------------------------------------
  
  PBGLAGFindPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGLAGFindPlayer& from);
  void MergeFrom(const PBGLAGFindPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 sourceid = 1;
  inline bool has_sourceid() const;
  inline void clear_sourceid();
  static const int kSourceidFieldNumber = 1;
  inline ::google::protobuf::uint32 sourceid() const;
  inline void set_sourceid(::google::protobuf::uint32 value);
  
  // optional uint32 worldid = 2;
  inline bool has_worldid() const;
  inline void clear_worldid();
  static const int kWorldidFieldNumber = 2;
  inline ::google::protobuf::uint32 worldid() const;
  inline void set_worldid(::google::protobuf::uint32 value);
  
  // optional uint32 targetid = 3;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetidFieldNumber = 3;
  inline ::google::protobuf::uint32 targetid() const;
  inline void set_targetid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBGLAGFindPlayer)
 private:
  inline void set_has_sourceid();
  inline void clear_has_sourceid();
  inline void set_has_worldid();
  inline void clear_has_worldid();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 sourceid_;
  ::google::protobuf::uint32 worldid_;
  ::google::protobuf::uint32 targetid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGLAGFindPlayer* default_instance_;
};
// -------------------------------------------------------------------

class PBGLAGFindPlayerAck : public ::google::protobuf::Message {
 public:
  PBGLAGFindPlayerAck();
  virtual ~PBGLAGFindPlayerAck();
  
  PBGLAGFindPlayerAck(const PBGLAGFindPlayerAck& from);
  
  inline PBGLAGFindPlayerAck& operator=(const PBGLAGFindPlayerAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGLAGFindPlayerAck& default_instance();
  
  void Swap(PBGLAGFindPlayerAck* other);
  
  // implements Message ----------------------------------------------
  
  PBGLAGFindPlayerAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGLAGFindPlayerAck& from);
  void MergeFrom(const PBGLAGFindPlayerAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 sourceid = 1;
  inline bool has_sourceid() const;
  inline void clear_sourceid();
  static const int kSourceidFieldNumber = 1;
  inline ::google::protobuf::uint32 sourceid() const;
  inline void set_sourceid(::google::protobuf::uint32 value);
  
  // optional uint32 targetid = 2;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetidFieldNumber = 2;
  inline ::google::protobuf::uint32 targetid() const;
  inline void set_targetid(::google::protobuf::uint32 value);
  
  // optional .PBPlayerView pbView = 3;
  inline bool has_pbview() const;
  inline void clear_pbview();
  static const int kPbViewFieldNumber = 3;
  inline const ::PBPlayerView& pbview() const;
  inline ::PBPlayerView* mutable_pbview();
  inline ::PBPlayerView* release_pbview();
  
  // @@protoc_insertion_point(class_scope:PBGLAGFindPlayerAck)
 private:
  inline void set_has_sourceid();
  inline void clear_has_sourceid();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_pbview();
  inline void clear_has_pbview();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 sourceid_;
  ::google::protobuf::uint32 targetid_;
  ::PBPlayerView* pbview_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGLAGFindPlayerAck* default_instance_;
};
// -------------------------------------------------------------------

class PBGL2GSaleMoneyFail : public ::google::protobuf::Message {
 public:
  PBGL2GSaleMoneyFail();
  virtual ~PBGL2GSaleMoneyFail();
  
  PBGL2GSaleMoneyFail(const PBGL2GSaleMoneyFail& from);
  
  inline PBGL2GSaleMoneyFail& operator=(const PBGL2GSaleMoneyFail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGL2GSaleMoneyFail& default_instance();
  
  void Swap(PBGL2GSaleMoneyFail* other);
  
  // implements Message ----------------------------------------------
  
  PBGL2GSaleMoneyFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGL2GSaleMoneyFail& from);
  void MergeFrom(const PBGL2GSaleMoneyFail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional uint32 logicworldid = 2;
  inline bool has_logicworldid() const;
  inline void clear_logicworldid();
  static const int kLogicworldidFieldNumber = 2;
  inline ::google::protobuf::uint32 logicworldid() const;
  inline void set_logicworldid(::google::protobuf::uint32 value);
  
  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 cash = 4;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 4;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);
  
  // optional uint64 sliver = 5;
  inline bool has_sliver() const;
  inline void clear_sliver();
  static const int kSliverFieldNumber = 5;
  inline ::google::protobuf::uint64 sliver() const;
  inline void set_sliver(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:PBGL2GSaleMoneyFail)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_logicworldid();
  inline void clear_has_logicworldid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_sliver();
  inline void clear_has_sliver();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 logicworldid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 cash_;
  ::google::protobuf::uint64 sliver_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGL2GSaleMoneyFail* default_instance_;
};
// -------------------------------------------------------------------

class PBGL2GSaleMoneyCancel : public ::google::protobuf::Message {
 public:
  PBGL2GSaleMoneyCancel();
  virtual ~PBGL2GSaleMoneyCancel();
  
  PBGL2GSaleMoneyCancel(const PBGL2GSaleMoneyCancel& from);
  
  inline PBGL2GSaleMoneyCancel& operator=(const PBGL2GSaleMoneyCancel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGL2GSaleMoneyCancel& default_instance();
  
  void Swap(PBGL2GSaleMoneyCancel* other);
  
  // implements Message ----------------------------------------------
  
  PBGL2GSaleMoneyCancel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGL2GSaleMoneyCancel& from);
  void MergeFrom(const PBGL2GSaleMoneyCancel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional uint32 logicworldid = 2;
  inline bool has_logicworldid() const;
  inline void clear_logicworldid();
  static const int kLogicworldidFieldNumber = 2;
  inline ::google::protobuf::uint32 logicworldid() const;
  inline void set_logicworldid(::google::protobuf::uint32 value);
  
  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 cash = 4;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 4;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);
  
  // optional uint64 sliver = 5;
  inline bool has_sliver() const;
  inline void clear_sliver();
  static const int kSliverFieldNumber = 5;
  inline ::google::protobuf::uint64 sliver() const;
  inline void set_sliver(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:PBGL2GSaleMoneyCancel)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_logicworldid();
  inline void clear_has_logicworldid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_sliver();
  inline void clear_has_sliver();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 logicworldid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 cash_;
  ::google::protobuf::uint64 sliver_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGL2GSaleMoneyCancel* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLSaleMoney_salecancel : public ::google::protobuf::Message {
 public:
  PBG2GLSaleMoney_salecancel();
  virtual ~PBG2GLSaleMoney_salecancel();
  
  PBG2GLSaleMoney_salecancel(const PBG2GLSaleMoney_salecancel& from);
  
  inline PBG2GLSaleMoney_salecancel& operator=(const PBG2GLSaleMoney_salecancel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLSaleMoney_salecancel& default_instance();
  
  void Swap(PBG2GLSaleMoney_salecancel* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLSaleMoney_salecancel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLSaleMoney_salecancel& from);
  void MergeFrom(const PBG2GLSaleMoney_salecancel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional uint64 orderid = 2;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 2;
  inline ::google::protobuf::uint64 orderid() const;
  inline void set_orderid(::google::protobuf::uint64 value);
  
  // optional uint64 can_get_cash = 3;
  inline bool has_can_get_cash() const;
  inline void clear_can_get_cash();
  static const int kCanGetCashFieldNumber = 3;
  inline ::google::protobuf::uint64 can_get_cash() const;
  inline void set_can_get_cash(::google::protobuf::uint64 value);
  
  // optional uint64 can_get_sliver = 4;
  inline bool has_can_get_sliver() const;
  inline void clear_can_get_sliver();
  static const int kCanGetSliverFieldNumber = 4;
  inline ::google::protobuf::uint64 can_get_sliver() const;
  inline void set_can_get_sliver(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:PBG2GLSaleMoney_salecancel)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_can_get_cash();
  inline void clear_has_can_get_cash();
  inline void set_has_can_get_sliver();
  inline void clear_has_can_get_sliver();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 orderid_;
  ::google::protobuf::uint64 can_get_cash_;
  ::google::protobuf::uint64 can_get_sliver_;
  ::google::protobuf::uint32 playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLSaleMoney_salecancel* default_instance_;
};
// -------------------------------------------------------------------

class PBGL2GAuctionSaleFail : public ::google::protobuf::Message {
 public:
  PBGL2GAuctionSaleFail();
  virtual ~PBGL2GAuctionSaleFail();
  
  PBGL2GAuctionSaleFail(const PBGL2GAuctionSaleFail& from);
  
  inline PBGL2GAuctionSaleFail& operator=(const PBGL2GAuctionSaleFail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGL2GAuctionSaleFail& default_instance();
  
  void Swap(PBGL2GAuctionSaleFail* other);
  
  // implements Message ----------------------------------------------
  
  PBGL2GAuctionSaleFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGL2GAuctionSaleFail& from);
  void MergeFrom(const PBGL2GAuctionSaleFail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional uint32 logicworldid = 2;
  inline bool has_logicworldid() const;
  inline void clear_logicworldid();
  static const int kLogicworldidFieldNumber = 2;
  inline ::google::protobuf::uint32 logicworldid() const;
  inline void set_logicworldid(::google::protobuf::uint32 value);
  
  // optional .PBItem item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::PBItem& item() const;
  inline ::PBItem* mutable_item();
  inline ::PBItem* release_item();
  
  // optional uint32 sliver = 4;
  inline bool has_sliver() const;
  inline void clear_sliver();
  static const int kSliverFieldNumber = 4;
  inline ::google::protobuf::uint32 sliver() const;
  inline void set_sliver(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBGL2GAuctionSaleFail)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_logicworldid();
  inline void clear_has_logicworldid();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_sliver();
  inline void clear_has_sliver();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 logicworldid_;
  ::PBItem* item_;
  ::google::protobuf::uint32 sliver_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGL2GAuctionSaleFail* default_instance_;
};
// -------------------------------------------------------------------

class PBGL2GAuctionSaleCancel : public ::google::protobuf::Message {
 public:
  PBGL2GAuctionSaleCancel();
  virtual ~PBGL2GAuctionSaleCancel();
  
  PBGL2GAuctionSaleCancel(const PBGL2GAuctionSaleCancel& from);
  
  inline PBGL2GAuctionSaleCancel& operator=(const PBGL2GAuctionSaleCancel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGL2GAuctionSaleCancel& default_instance();
  
  void Swap(PBGL2GAuctionSaleCancel* other);
  
  // implements Message ----------------------------------------------
  
  PBGL2GAuctionSaleCancel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGL2GAuctionSaleCancel& from);
  void MergeFrom(const PBGL2GAuctionSaleCancel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional uint32 logicworldid = 2;
  inline bool has_logicworldid() const;
  inline void clear_logicworldid();
  static const int kLogicworldidFieldNumber = 2;
  inline ::google::protobuf::uint32 logicworldid() const;
  inline void set_logicworldid(::google::protobuf::uint32 value);
  
  // optional .PBItem item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::PBItem& item() const;
  inline ::PBItem* mutable_item();
  inline ::PBItem* release_item();
  
  // @@protoc_insertion_point(class_scope:PBGL2GAuctionSaleCancel)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_logicworldid();
  inline void clear_has_logicworldid();
  inline void set_has_item();
  inline void clear_has_item();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 logicworldid_;
  ::PBItem* item_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGL2GAuctionSaleCancel* default_instance_;
};
// -------------------------------------------------------------------

class PBGL2GAuctionBuyFail : public ::google::protobuf::Message {
 public:
  PBGL2GAuctionBuyFail();
  virtual ~PBGL2GAuctionBuyFail();
  
  PBGL2GAuctionBuyFail(const PBGL2GAuctionBuyFail& from);
  
  inline PBGL2GAuctionBuyFail& operator=(const PBGL2GAuctionBuyFail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGL2GAuctionBuyFail& default_instance();
  
  void Swap(PBGL2GAuctionBuyFail* other);
  
  // implements Message ----------------------------------------------
  
  PBGL2GAuctionBuyFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGL2GAuctionBuyFail& from);
  void MergeFrom(const PBGL2GAuctionBuyFail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional uint32 logicworldid = 2;
  inline bool has_logicworldid() const;
  inline void clear_logicworldid();
  static const int kLogicworldidFieldNumber = 2;
  inline ::google::protobuf::uint32 logicworldid() const;
  inline void set_logicworldid(::google::protobuf::uint32 value);
  
  // optional uint32 sliver = 3;
  inline bool has_sliver() const;
  inline void clear_sliver();
  static const int kSliverFieldNumber = 3;
  inline ::google::protobuf::uint32 sliver() const;
  inline void set_sliver(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBGL2GAuctionBuyFail)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_logicworldid();
  inline void clear_has_logicworldid();
  inline void set_has_sliver();
  inline void clear_has_sliver();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 logicworldid_;
  ::google::protobuf::uint32 sliver_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGL2GAuctionBuyFail* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLAuction_sale : public ::google::protobuf::Message {
 public:
  PBG2GLAuction_sale();
  virtual ~PBG2GLAuction_sale();
  
  PBG2GLAuction_sale(const PBG2GLAuction_sale& from);
  
  inline PBG2GLAuction_sale& operator=(const PBG2GLAuction_sale& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLAuction_sale& default_instance();
  
  void Swap(PBG2GLAuction_sale* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLAuction_sale* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLAuction_sale& from);
  void MergeFrom(const PBG2GLAuction_sale& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBItem item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::PBItem& item() const;
  inline ::PBItem* mutable_item();
  inline ::PBItem* release_item();
  
  // optional uint32 unitSliver = 2;
  inline bool has_unitsliver() const;
  inline void clear_unitsliver();
  static const int kUnitSliverFieldNumber = 2;
  inline ::google::protobuf::uint32 unitsliver() const;
  inline void set_unitsliver(::google::protobuf::uint32 value);
  
  // optional uint32 taxSliver = 3;
  inline bool has_taxsliver() const;
  inline void clear_taxsliver();
  static const int kTaxSliverFieldNumber = 3;
  inline ::google::protobuf::uint32 taxsliver() const;
  inline void set_taxsliver(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBG2GLAuction_sale)
 private:
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_unitsliver();
  inline void clear_has_unitsliver();
  inline void set_has_taxsliver();
  inline void clear_has_taxsliver();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBItem* item_;
  ::google::protobuf::uint32 unitsliver_;
  ::google::protobuf::uint32 taxsliver_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLAuction_sale* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLFriend_AddAsk : public ::google::protobuf::Message {
 public:
  PBG2GLFriend_AddAsk();
  virtual ~PBG2GLFriend_AddAsk();
  
  PBG2GLFriend_AddAsk(const PBG2GLFriend_AddAsk& from);
  
  inline PBG2GLFriend_AddAsk& operator=(const PBG2GLFriend_AddAsk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLFriend_AddAsk& default_instance();
  
  void Swap(PBG2GLFriend_AddAsk* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLFriend_AddAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLFriend_AddAsk& from);
  void MergeFrom(const PBG2GLFriend_AddAsk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBPlayerDisplay applyer = 1;
  inline bool has_applyer() const;
  inline void clear_applyer();
  static const int kApplyerFieldNumber = 1;
  inline const ::PBPlayerDisplay& applyer() const;
  inline ::PBPlayerDisplay* mutable_applyer();
  inline ::PBPlayerDisplay* release_applyer();
  
  // optional uint32 fithgpower = 2;
  inline bool has_fithgpower() const;
  inline void clear_fithgpower();
  static const int kFithgpowerFieldNumber = 2;
  inline ::google::protobuf::uint32 fithgpower() const;
  inline void set_fithgpower(::google::protobuf::uint32 value);
  
  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 targetid = 4;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetidFieldNumber = 4;
  inline ::google::protobuf::uint32 targetid() const;
  inline void set_targetid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBG2GLFriend_AddAsk)
 private:
  inline void set_has_applyer();
  inline void clear_has_applyer();
  inline void set_has_fithgpower();
  inline void clear_has_fithgpower();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBPlayerDisplay* applyer_;
  ::google::protobuf::uint32 fithgpower_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 targetid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLFriend_AddAsk* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLFriend_Answer : public ::google::protobuf::Message {
 public:
  PBG2GLFriend_Answer();
  virtual ~PBG2GLFriend_Answer();
  
  PBG2GLFriend_Answer(const PBG2GLFriend_Answer& from);
  
  inline PBG2GLFriend_Answer& operator=(const PBG2GLFriend_Answer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLFriend_Answer& default_instance();
  
  void Swap(PBG2GLFriend_Answer* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLFriend_Answer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLFriend_Answer& from);
  void MergeFrom(const PBG2GLFriend_Answer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBPlayerDisplay ackplayer = 1;
  inline bool has_ackplayer() const;
  inline void clear_ackplayer();
  static const int kAckplayerFieldNumber = 1;
  inline const ::PBPlayerDisplay& ackplayer() const;
  inline ::PBPlayerDisplay* mutable_ackplayer();
  inline ::PBPlayerDisplay* release_ackplayer();
  
  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 applyerid = 3;
  inline bool has_applyerid() const;
  inline void clear_applyerid();
  static const int kApplyeridFieldNumber = 3;
  inline ::google::protobuf::uint32 applyerid() const;
  inline void set_applyerid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBG2GLFriend_Answer)
 private:
  inline void set_has_ackplayer();
  inline void clear_has_ackplayer();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_applyerid();
  inline void clear_has_applyerid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBPlayerDisplay* ackplayer_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 applyerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLFriend_Answer* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLFriend_Find : public ::google::protobuf::Message {
 public:
  PBG2GLFriend_Find();
  virtual ~PBG2GLFriend_Find();
  
  PBG2GLFriend_Find(const PBG2GLFriend_Find& from);
  
  inline PBG2GLFriend_Find& operator=(const PBG2GLFriend_Find& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLFriend_Find& default_instance();
  
  void Swap(PBG2GLFriend_Find* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLFriend_Find* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLFriend_Find& from);
  void MergeFrom(const PBG2GLFriend_Find& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:PBG2GLFriend_Find)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLFriend_Find* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLFriend_Info : public ::google::protobuf::Message {
 public:
  PBG2GLFriend_Info();
  virtual ~PBG2GLFriend_Info();
  
  PBG2GLFriend_Info(const PBG2GLFriend_Info& from);
  
  inline PBG2GLFriend_Info& operator=(const PBG2GLFriend_Info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLFriend_Info& default_instance();
  
  void Swap(PBG2GLFriend_Info* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLFriend_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLFriend_Info& from);
  void MergeFrom(const PBG2GLFriend_Info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 friendid = 2;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendidFieldNumber = 2;
  inline ::google::protobuf::uint32 friendid() const;
  inline void set_friendid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBG2GLFriend_Info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_friendid();
  inline void clear_has_friendid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 friendid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLFriend_Info* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLFriend_Syn_ToGlobal : public ::google::protobuf::Message {
 public:
  PBG2GLFriend_Syn_ToGlobal();
  virtual ~PBG2GLFriend_Syn_ToGlobal();
  
  PBG2GLFriend_Syn_ToGlobal(const PBG2GLFriend_Syn_ToGlobal& from);
  
  inline PBG2GLFriend_Syn_ToGlobal& operator=(const PBG2GLFriend_Syn_ToGlobal& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLFriend_Syn_ToGlobal& default_instance();
  
  void Swap(PBG2GLFriend_Syn_ToGlobal* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLFriend_Syn_ToGlobal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLFriend_Syn_ToGlobal& from);
  void MergeFrom(const PBG2GLFriend_Syn_ToGlobal& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // repeated .PBG2GLFriend_Info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PBG2GLFriend_Info& info(int index) const;
  inline ::PBG2GLFriend_Info* mutable_info(int index);
  inline ::PBG2GLFriend_Info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PBG2GLFriend_Info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBG2GLFriend_Info >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:PBG2GLFriend_Syn_ToGlobal)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBG2GLFriend_Info > info_;
  ::google::protobuf::uint32 playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLFriend_Syn_ToGlobal* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLFriend_Add_ToGlobal : public ::google::protobuf::Message {
 public:
  PBG2GLFriend_Add_ToGlobal();
  virtual ~PBG2GLFriend_Add_ToGlobal();
  
  PBG2GLFriend_Add_ToGlobal(const PBG2GLFriend_Add_ToGlobal& from);
  
  inline PBG2GLFriend_Add_ToGlobal& operator=(const PBG2GLFriend_Add_ToGlobal& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLFriend_Add_ToGlobal& default_instance();
  
  void Swap(PBG2GLFriend_Add_ToGlobal* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLFriend_Add_ToGlobal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLFriend_Add_ToGlobal& from);
  void MergeFrom(const PBG2GLFriend_Add_ToGlobal& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional .PBG2GLFriend_Info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PBG2GLFriend_Info& info() const;
  inline ::PBG2GLFriend_Info* mutable_info();
  inline ::PBG2GLFriend_Info* release_info();
  
  // @@protoc_insertion_point(class_scope:PBG2GLFriend_Add_ToGlobal)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBG2GLFriend_Info* info_;
  ::google::protobuf::uint32 playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLFriend_Add_ToGlobal* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLFriend_Del_ToGlobal : public ::google::protobuf::Message {
 public:
  PBG2GLFriend_Del_ToGlobal();
  virtual ~PBG2GLFriend_Del_ToGlobal();
  
  PBG2GLFriend_Del_ToGlobal(const PBG2GLFriend_Del_ToGlobal& from);
  
  inline PBG2GLFriend_Del_ToGlobal& operator=(const PBG2GLFriend_Del_ToGlobal& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLFriend_Del_ToGlobal& default_instance();
  
  void Swap(PBG2GLFriend_Del_ToGlobal* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLFriend_Del_ToGlobal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLFriend_Del_ToGlobal& from);
  void MergeFrom(const PBG2GLFriend_Del_ToGlobal& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional .PBG2GLFriend_Info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PBG2GLFriend_Info& info() const;
  inline ::PBG2GLFriend_Info* mutable_info();
  inline ::PBG2GLFriend_Info* release_info();
  
  // @@protoc_insertion_point(class_scope:PBG2GLFriend_Del_ToGlobal)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBG2GLFriend_Info* info_;
  ::google::protobuf::uint32 playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLFriend_Del_ToGlobal* default_instance_;
};
// -------------------------------------------------------------------

class PBGL2GFriendInfo : public ::google::protobuf::Message {
 public:
  PBGL2GFriendInfo();
  virtual ~PBGL2GFriendInfo();
  
  PBGL2GFriendInfo(const PBGL2GFriendInfo& from);
  
  inline PBGL2GFriendInfo& operator=(const PBGL2GFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGL2GFriendInfo& default_instance();
  
  void Swap(PBGL2GFriendInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBGL2GFriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGL2GFriendInfo& from);
  void MergeFrom(const PBGL2GFriendInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional .PBPlayerDisplay display = 2;
  inline bool has_display() const;
  inline void clear_display();
  static const int kDisplayFieldNumber = 2;
  inline const ::PBPlayerDisplay& display() const;
  inline ::PBPlayerDisplay* mutable_display();
  inline ::PBPlayerDisplay* release_display();
  
  // optional bool online = 3;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 3;
  inline bool online() const;
  inline void set_online(bool value);
  
  // optional uint32 fightpower = 4;
  inline bool has_fightpower() const;
  inline void clear_fightpower();
  static const int kFightpowerFieldNumber = 4;
  inline ::google::protobuf::uint32 fightpower() const;
  inline void set_fightpower(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBGL2GFriendInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_display();
  inline void clear_has_display();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_fightpower();
  inline void clear_has_fightpower();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBPlayerDisplay* display_;
  ::google::protobuf::uint32 type_;
  bool online_;
  ::google::protobuf::uint32 fightpower_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGL2GFriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBGL2GFriendInfoUpdate : public ::google::protobuf::Message {
 public:
  PBGL2GFriendInfoUpdate();
  virtual ~PBGL2GFriendInfoUpdate();
  
  PBGL2GFriendInfoUpdate(const PBGL2GFriendInfoUpdate& from);
  
  inline PBGL2GFriendInfoUpdate& operator=(const PBGL2GFriendInfoUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGL2GFriendInfoUpdate& default_instance();
  
  void Swap(PBGL2GFriendInfoUpdate* other);
  
  // implements Message ----------------------------------------------
  
  PBGL2GFriendInfoUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGL2GFriendInfoUpdate& from);
  void MergeFrom(const PBGL2GFriendInfoUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional .PBGL2GFriendInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PBGL2GFriendInfo& info() const;
  inline ::PBGL2GFriendInfo* mutable_info();
  inline ::PBGL2GFriendInfo* release_info();
  
  // @@protoc_insertion_point(class_scope:PBGL2GFriendInfoUpdate)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBGL2GFriendInfo* info_;
  ::google::protobuf::uint32 playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGL2GFriendInfoUpdate* default_instance_;
};
// -------------------------------------------------------------------

class PBGL2GFriendAdd : public ::google::protobuf::Message {
 public:
  PBGL2GFriendAdd();
  virtual ~PBGL2GFriendAdd();
  
  PBGL2GFriendAdd(const PBGL2GFriendAdd& from);
  
  inline PBGL2GFriendAdd& operator=(const PBGL2GFriendAdd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGL2GFriendAdd& default_instance();
  
  void Swap(PBGL2GFriendAdd* other);
  
  // implements Message ----------------------------------------------
  
  PBGL2GFriendAdd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGL2GFriendAdd& from);
  void MergeFrom(const PBGL2GFriendAdd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional .PBGL2GFriendInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PBGL2GFriendInfo& info() const;
  inline ::PBGL2GFriendInfo* mutable_info();
  inline ::PBGL2GFriendInfo* release_info();
  
  // @@protoc_insertion_point(class_scope:PBGL2GFriendAdd)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBGL2GFriendInfo* info_;
  ::google::protobuf::uint32 playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGL2GFriendAdd* default_instance_;
};
// -------------------------------------------------------------------

class PBGL2GFriendInfoSyn : public ::google::protobuf::Message {
 public:
  PBGL2GFriendInfoSyn();
  virtual ~PBGL2GFriendInfoSyn();
  
  PBGL2GFriendInfoSyn(const PBGL2GFriendInfoSyn& from);
  
  inline PBGL2GFriendInfoSyn& operator=(const PBGL2GFriendInfoSyn& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGL2GFriendInfoSyn& default_instance();
  
  void Swap(PBGL2GFriendInfoSyn* other);
  
  // implements Message ----------------------------------------------
  
  PBGL2GFriendInfoSyn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGL2GFriendInfoSyn& from);
  void MergeFrom(const PBGL2GFriendInfoSyn& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // repeated .PBGL2GFriendInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PBGL2GFriendInfo& info(int index) const;
  inline ::PBGL2GFriendInfo* mutable_info(int index);
  inline ::PBGL2GFriendInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PBGL2GFriendInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBGL2GFriendInfo >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:PBGL2GFriendInfoSyn)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBGL2GFriendInfo > info_;
  ::google::protobuf::uint32 playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGL2GFriendInfoSyn* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLCommon_BossInfoUpdate : public ::google::protobuf::Message {
 public:
  PBG2GLCommon_BossInfoUpdate();
  virtual ~PBG2GLCommon_BossInfoUpdate();
  
  PBG2GLCommon_BossInfoUpdate(const PBG2GLCommon_BossInfoUpdate& from);
  
  inline PBG2GLCommon_BossInfoUpdate& operator=(const PBG2GLCommon_BossInfoUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLCommon_BossInfoUpdate& default_instance();
  
  void Swap(PBG2GLCommon_BossInfoUpdate* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLCommon_BossInfoUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLCommon_BossInfoUpdate& from);
  void MergeFrom(const PBG2GLCommon_BossInfoUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 sceneid = 1;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 1;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);
  
  // optional uint32 cellid = 2;
  inline bool has_cellid() const;
  inline void clear_cellid();
  static const int kCellidFieldNumber = 2;
  inline ::google::protobuf::uint32 cellid() const;
  inline void set_cellid(::google::protobuf::uint32 value);
  
  // optional uint32 monsterid = 3;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsteridFieldNumber = 3;
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);
  
  // optional bool alive = 4;
  inline bool has_alive() const;
  inline void clear_alive();
  static const int kAliveFieldNumber = 4;
  inline bool alive() const;
  inline void set_alive(bool value);
  
  // @@protoc_insertion_point(class_scope:PBG2GLCommon_BossInfoUpdate)
 private:
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_cellid();
  inline void clear_has_cellid();
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_alive();
  inline void clear_has_alive();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 sceneid_;
  ::google::protobuf::uint32 cellid_;
  ::google::protobuf::uint32 monsterid_;
  bool alive_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLCommon_BossInfoUpdate* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLCommon_BossListAsk : public ::google::protobuf::Message {
 public:
  PBG2GLCommon_BossListAsk();
  virtual ~PBG2GLCommon_BossListAsk();
  
  PBG2GLCommon_BossListAsk(const PBG2GLCommon_BossListAsk& from);
  
  inline PBG2GLCommon_BossListAsk& operator=(const PBG2GLCommon_BossListAsk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLCommon_BossListAsk& default_instance();
  
  void Swap(PBG2GLCommon_BossListAsk* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLCommon_BossListAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLCommon_BossListAsk& from);
  void MergeFrom(const PBG2GLCommon_BossListAsk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBG2GLCommon_BossListAsk)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLCommon_BossListAsk* default_instance_;
};
// -------------------------------------------------------------------

class PBGLAGCallPlayer : public ::google::protobuf::Message {
 public:
  PBGLAGCallPlayer();
  virtual ~PBGLAGCallPlayer();
  
  PBGLAGCallPlayer(const PBGLAGCallPlayer& from);
  
  inline PBGLAGCallPlayer& operator=(const PBGLAGCallPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGLAGCallPlayer& default_instance();
  
  void Swap(PBGLAGCallPlayer* other);
  
  // implements Message ----------------------------------------------
  
  PBGLAGCallPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGLAGCallPlayer& from);
  void MergeFrom(const PBGLAGCallPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string tarname = 1;
  inline bool has_tarname() const;
  inline void clear_tarname();
  static const int kTarnameFieldNumber = 1;
  inline const ::std::string& tarname() const;
  inline void set_tarname(const ::std::string& value);
  inline void set_tarname(const char* value);
  inline void set_tarname(const char* value, size_t size);
  inline ::std::string* mutable_tarname();
  inline ::std::string* release_tarname();
  
  // optional uint32 tarid = 2;
  inline bool has_tarid() const;
  inline void clear_tarid();
  static const int kTaridFieldNumber = 2;
  inline ::google::protobuf::uint32 tarid() const;
  inline void set_tarid(::google::protobuf::uint32 value);
  
  // optional uint32 sceneid = 3;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 3;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);
  
  // optional uint32 scenecellid = 4;
  inline bool has_scenecellid() const;
  inline void clear_scenecellid();
  static const int kScenecellidFieldNumber = 4;
  inline ::google::protobuf::uint32 scenecellid() const;
  inline void set_scenecellid(::google::protobuf::uint32 value);
  
  // optional uint64 scenedynid = 5;
  inline bool has_scenedynid() const;
  inline void clear_scenedynid();
  static const int kScenedynidFieldNumber = 5;
  inline ::google::protobuf::uint64 scenedynid() const;
  inline void set_scenedynid(::google::protobuf::uint64 value);
  
  // optional float posx = 6;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 6;
  inline float posx() const;
  inline void set_posx(float value);
  
  // optional float posy = 7;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 7;
  inline float posy() const;
  inline void set_posy(float value);
  
  // @@protoc_insertion_point(class_scope:PBGLAGCallPlayer)
 private:
  inline void set_has_tarname();
  inline void clear_has_tarname();
  inline void set_has_tarid();
  inline void clear_has_tarid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_scenecellid();
  inline void clear_has_scenecellid();
  inline void set_has_scenedynid();
  inline void clear_has_scenedynid();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* tarname_;
  ::google::protobuf::uint32 tarid_;
  ::google::protobuf::uint32 sceneid_;
  ::google::protobuf::uint64 scenedynid_;
  ::google::protobuf::uint32 scenecellid_;
  float posx_;
  float posy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGLAGCallPlayer* default_instance_;
};
// -------------------------------------------------------------------

class PBGLAGLocatePlayer : public ::google::protobuf::Message {
 public:
  PBGLAGLocatePlayer();
  virtual ~PBGLAGLocatePlayer();
  
  PBGLAGLocatePlayer(const PBGLAGLocatePlayer& from);
  
  inline PBGLAGLocatePlayer& operator=(const PBGLAGLocatePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGLAGLocatePlayer& default_instance();
  
  void Swap(PBGLAGLocatePlayer* other);
  
  // implements Message ----------------------------------------------
  
  PBGLAGLocatePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGLAGLocatePlayer& from);
  void MergeFrom(const PBGLAGLocatePlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional uint32 reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);
  
  // optional string tarname = 3;
  inline bool has_tarname() const;
  inline void clear_tarname();
  static const int kTarnameFieldNumber = 3;
  inline const ::std::string& tarname() const;
  inline void set_tarname(const ::std::string& value);
  inline void set_tarname(const char* value);
  inline void set_tarname(const char* value, size_t size);
  inline ::std::string* mutable_tarname();
  inline ::std::string* release_tarname();
  
  // optional uint32 tarid = 4;
  inline bool has_tarid() const;
  inline void clear_tarid();
  static const int kTaridFieldNumber = 4;
  inline ::google::protobuf::uint32 tarid() const;
  inline void set_tarid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBGLAGLocatePlayer)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_tarname();
  inline void clear_has_tarname();
  inline void set_has_tarid();
  inline void clear_has_tarid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 reason_;
  ::std::string* tarname_;
  ::google::protobuf::uint32 tarid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGLAGLocatePlayer* default_instance_;
};
// -------------------------------------------------------------------

class PBGLAGLocatePlayerAck : public ::google::protobuf::Message {
 public:
  PBGLAGLocatePlayerAck();
  virtual ~PBGLAGLocatePlayerAck();
  
  PBGLAGLocatePlayerAck(const PBGLAGLocatePlayerAck& from);
  
  inline PBGLAGLocatePlayerAck& operator=(const PBGLAGLocatePlayerAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGLAGLocatePlayerAck& default_instance();
  
  void Swap(PBGLAGLocatePlayerAck* other);
  
  // implements Message ----------------------------------------------
  
  PBGLAGLocatePlayerAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGLAGLocatePlayerAck& from);
  void MergeFrom(const PBGLAGLocatePlayerAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // optional uint32 reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);
  
  // optional .PBPlayerDisplay tar = 3;
  inline bool has_tar() const;
  inline void clear_tar();
  static const int kTarFieldNumber = 3;
  inline const ::PBPlayerDisplay& tar() const;
  inline ::PBPlayerDisplay* mutable_tar();
  inline ::PBPlayerDisplay* release_tar();
  
  // optional bool suc = 4;
  inline bool has_suc() const;
  inline void clear_suc();
  static const int kSucFieldNumber = 4;
  inline bool suc() const;
  inline void set_suc(bool value);
  
  // optional uint32 sceneid = 5;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 5;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);
  
  // optional uint32 scenecellid = 6;
  inline bool has_scenecellid() const;
  inline void clear_scenecellid();
  static const int kScenecellidFieldNumber = 6;
  inline ::google::protobuf::uint32 scenecellid() const;
  inline void set_scenecellid(::google::protobuf::uint32 value);
  
  // optional uint64 scenedynid = 7;
  inline bool has_scenedynid() const;
  inline void clear_scenedynid();
  static const int kScenedynidFieldNumber = 7;
  inline ::google::protobuf::uint64 scenedynid() const;
  inline void set_scenedynid(::google::protobuf::uint64 value);
  
  // optional float posx = 8;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 8;
  inline float posx() const;
  inline void set_posx(float value);
  
  // optional float posy = 9;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 9;
  inline float posy() const;
  inline void set_posy(float value);
  
  // @@protoc_insertion_point(class_scope:PBGLAGLocatePlayerAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_tar();
  inline void clear_has_tar();
  inline void set_has_suc();
  inline void clear_has_suc();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_scenecellid();
  inline void clear_has_scenecellid();
  inline void set_has_scenedynid();
  inline void clear_has_scenedynid();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 reason_;
  ::PBPlayerDisplay* tar_;
  bool suc_;
  ::google::protobuf::uint32 sceneid_;
  ::google::protobuf::uint64 scenedynid_;
  ::google::protobuf::uint32 scenecellid_;
  float posx_;
  float posy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGLAGLocatePlayerAck* default_instance_;
};
// -------------------------------------------------------------------

class PBWorldBossStatus : public ::google::protobuf::Message {
 public:
  PBWorldBossStatus();
  virtual ~PBWorldBossStatus();
  
  PBWorldBossStatus(const PBWorldBossStatus& from);
  
  inline PBWorldBossStatus& operator=(const PBWorldBossStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBWorldBossStatus& default_instance();
  
  void Swap(PBWorldBossStatus* other);
  
  // implements Message ----------------------------------------------
  
  PBWorldBossStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBWorldBossStatus& from);
  void MergeFrom(const PBWorldBossStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 bossActivityid = 1;
  inline bool has_bossactivityid() const;
  inline void clear_bossactivityid();
  static const int kBossActivityidFieldNumber = 1;
  inline ::google::protobuf::uint32 bossactivityid() const;
  inline void set_bossactivityid(::google::protobuf::uint32 value);
  
  // optional uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // optional string killerName = 3;
  inline bool has_killername() const;
  inline void clear_killername();
  static const int kKillerNameFieldNumber = 3;
  inline const ::std::string& killername() const;
  inline void set_killername(const ::std::string& value);
  inline void set_killername(const char* value);
  inline void set_killername(const char* value, size_t size);
  inline ::std::string* mutable_killername();
  inline ::std::string* release_killername();
  
  // optional uint64 lastdeadtimetick = 4;
  inline bool has_lastdeadtimetick() const;
  inline void clear_lastdeadtimetick();
  static const int kLastdeadtimetickFieldNumber = 4;
  inline ::google::protobuf::uint64 lastdeadtimetick() const;
  inline void set_lastdeadtimetick(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:PBWorldBossStatus)
 private:
  inline void set_has_bossactivityid();
  inline void clear_has_bossactivityid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_killername();
  inline void clear_has_killername();
  inline void set_has_lastdeadtimetick();
  inline void clear_has_lastdeadtimetick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 bossactivityid_;
  ::google::protobuf::uint32 status_;
  ::std::string* killername_;
  ::google::protobuf::uint64 lastdeadtimetick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBWorldBossStatus* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLWorldBossStatusReportAsk : public ::google::protobuf::Message {
 public:
  PBG2GLWorldBossStatusReportAsk();
  virtual ~PBG2GLWorldBossStatusReportAsk();
  
  PBG2GLWorldBossStatusReportAsk(const PBG2GLWorldBossStatusReportAsk& from);
  
  inline PBG2GLWorldBossStatusReportAsk& operator=(const PBG2GLWorldBossStatusReportAsk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLWorldBossStatusReportAsk& default_instance();
  
  void Swap(PBG2GLWorldBossStatusReportAsk* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLWorldBossStatusReportAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLWorldBossStatusReportAsk& from);
  void MergeFrom(const PBG2GLWorldBossStatusReportAsk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBWorldBossStatus bossStatus = 1;
  inline int bossstatus_size() const;
  inline void clear_bossstatus();
  static const int kBossStatusFieldNumber = 1;
  inline const ::PBWorldBossStatus& bossstatus(int index) const;
  inline ::PBWorldBossStatus* mutable_bossstatus(int index);
  inline ::PBWorldBossStatus* add_bossstatus();
  inline const ::google::protobuf::RepeatedPtrField< ::PBWorldBossStatus >&
      bossstatus() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBWorldBossStatus >*
      mutable_bossstatus();
  
  // @@protoc_insertion_point(class_scope:PBG2GLWorldBossStatusReportAsk)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBWorldBossStatus > bossstatus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLWorldBossStatusReportAsk* default_instance_;
};
// -------------------------------------------------------------------

class PBG2GLWorldBossKillInfoAsk : public ::google::protobuf::Message {
 public:
  PBG2GLWorldBossKillInfoAsk();
  virtual ~PBG2GLWorldBossKillInfoAsk();
  
  PBG2GLWorldBossKillInfoAsk(const PBG2GLWorldBossKillInfoAsk& from);
  
  inline PBG2GLWorldBossKillInfoAsk& operator=(const PBG2GLWorldBossKillInfoAsk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBG2GLWorldBossKillInfoAsk& default_instance();
  
  void Swap(PBG2GLWorldBossKillInfoAsk* other);
  
  // implements Message ----------------------------------------------
  
  PBG2GLWorldBossKillInfoAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBG2GLWorldBossKillInfoAsk& from);
  void MergeFrom(const PBG2GLWorldBossKillInfoAsk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:PBG2GLWorldBossKillInfoAsk)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBG2GLWorldBossKillInfoAsk* default_instance_;
};
// -------------------------------------------------------------------

class PBGL2GWorldBossStatusNtf : public ::google::protobuf::Message {
 public:
  PBGL2GWorldBossStatusNtf();
  virtual ~PBGL2GWorldBossStatusNtf();
  
  PBGL2GWorldBossStatusNtf(const PBGL2GWorldBossStatusNtf& from);
  
  inline PBGL2GWorldBossStatusNtf& operator=(const PBGL2GWorldBossStatusNtf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGL2GWorldBossStatusNtf& default_instance();
  
  void Swap(PBGL2GWorldBossStatusNtf* other);
  
  // implements Message ----------------------------------------------
  
  PBGL2GWorldBossStatusNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGL2GWorldBossStatusNtf& from);
  void MergeFrom(const PBGL2GWorldBossStatusNtf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBWorldBossStatus bossStatus = 1;
  inline int bossstatus_size() const;
  inline void clear_bossstatus();
  static const int kBossStatusFieldNumber = 1;
  inline const ::PBWorldBossStatus& bossstatus(int index) const;
  inline ::PBWorldBossStatus* mutable_bossstatus(int index);
  inline ::PBWorldBossStatus* add_bossstatus();
  inline const ::google::protobuf::RepeatedPtrField< ::PBWorldBossStatus >&
      bossstatus() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBWorldBossStatus >*
      mutable_bossstatus();
  
  // @@protoc_insertion_point(class_scope:PBGL2GWorldBossStatusNtf)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBWorldBossStatus > bossstatus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGL2GWorldBossStatusNtf* default_instance_;
};
// -------------------------------------------------------------------

class PBGL2GWorldBossKillerInfoAck : public ::google::protobuf::Message {
 public:
  PBGL2GWorldBossKillerInfoAck();
  virtual ~PBGL2GWorldBossKillerInfoAck();
  
  PBGL2GWorldBossKillerInfoAck(const PBGL2GWorldBossKillerInfoAck& from);
  
  inline PBGL2GWorldBossKillerInfoAck& operator=(const PBGL2GWorldBossKillerInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGL2GWorldBossKillerInfoAck& default_instance();
  
  void Swap(PBGL2GWorldBossKillerInfoAck* other);
  
  // implements Message ----------------------------------------------
  
  PBGL2GWorldBossKillerInfoAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGL2GWorldBossKillerInfoAck& from);
  void MergeFrom(const PBGL2GWorldBossKillerInfoAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBWorldBossKill worldbosskill = 1;
  inline bool has_worldbosskill() const;
  inline void clear_worldbosskill();
  static const int kWorldbosskillFieldNumber = 1;
  inline const ::PBWorldBossKill& worldbosskill() const;
  inline ::PBWorldBossKill* mutable_worldbosskill();
  inline ::PBWorldBossKill* release_worldbosskill();
  
  // optional bool dbvalid = 2;
  inline bool has_dbvalid() const;
  inline void clear_dbvalid();
  static const int kDbvalidFieldNumber = 2;
  inline bool dbvalid() const;
  inline void set_dbvalid(bool value);
  
  // @@protoc_insertion_point(class_scope:PBGL2GWorldBossKillerInfoAck)
 private:
  inline void set_has_worldbosskill();
  inline void clear_has_worldbosskill();
  inline void set_has_dbvalid();
  inline void clear_has_dbvalid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBWorldBossKill* worldbosskill_;
  bool dbvalid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GLAGMsg_2eproto();
  friend void protobuf_AssignDesc_GLAGMsg_2eproto();
  friend void protobuf_ShutdownFile_GLAGMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBGL2GWorldBossKillerInfoAck* default_instance_;
};
// ===================================================================


// ===================================================================

// PBG2GLTradePlayer

// optional uint32 playerid = 1;
inline bool PBG2GLTradePlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBG2GLTradePlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBG2GLTradePlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBG2GLTradePlayer::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBG2GLTradePlayer::playerid() const {
  return playerid_;
}
inline void PBG2GLTradePlayer::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional .PBPlayerDisplay tar = 2;
inline bool PBG2GLTradePlayer::has_tar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBG2GLTradePlayer::set_has_tar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBG2GLTradePlayer::clear_has_tar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBG2GLTradePlayer::clear_tar() {
  if (tar_ != NULL) tar_->::PBPlayerDisplay::Clear();
  clear_has_tar();
}
inline const ::PBPlayerDisplay& PBG2GLTradePlayer::tar() const {
  return tar_ != NULL ? *tar_ : *default_instance_->tar_;
}
inline ::PBPlayerDisplay* PBG2GLTradePlayer::mutable_tar() {
  set_has_tar();
  if (tar_ == NULL) tar_ = new ::PBPlayerDisplay;
  return tar_;
}
inline ::PBPlayerDisplay* PBG2GLTradePlayer::release_tar() {
  clear_has_tar();
  ::PBPlayerDisplay* temp = tar_;
  tar_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBG2GLTradeInfo

// optional uint32 tradeid = 1;
inline bool PBG2GLTradeInfo::has_tradeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBG2GLTradeInfo::set_has_tradeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBG2GLTradeInfo::clear_has_tradeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBG2GLTradeInfo::clear_tradeid() {
  tradeid_ = 0u;
  clear_has_tradeid();
}
inline ::google::protobuf::uint32 PBG2GLTradeInfo::tradeid() const {
  return tradeid_;
}
inline void PBG2GLTradeInfo::set_tradeid(::google::protobuf::uint32 value) {
  set_has_tradeid();
  tradeid_ = value;
}

// optional uint32 playerid = 2;
inline bool PBG2GLTradeInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBG2GLTradeInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBG2GLTradeInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBG2GLTradeInfo::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBG2GLTradeInfo::playerid() const {
  return playerid_;
}
inline void PBG2GLTradeInfo::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional uint32 logicworldid = 3;
inline bool PBG2GLTradeInfo::has_logicworldid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBG2GLTradeInfo::set_has_logicworldid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBG2GLTradeInfo::clear_has_logicworldid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBG2GLTradeInfo::clear_logicworldid() {
  logicworldid_ = 0u;
  clear_has_logicworldid();
}
inline ::google::protobuf::uint32 PBG2GLTradeInfo::logicworldid() const {
  return logicworldid_;
}
inline void PBG2GLTradeInfo::set_logicworldid(::google::protobuf::uint32 value) {
  set_has_logicworldid();
  logicworldid_ = value;
}

// repeated .PBItem myitem = 4;
inline int PBG2GLTradeInfo::myitem_size() const {
  return myitem_.size();
}
inline void PBG2GLTradeInfo::clear_myitem() {
  myitem_.Clear();
}
inline const ::PBItem& PBG2GLTradeInfo::myitem(int index) const {
  return myitem_.Get(index);
}
inline ::PBItem* PBG2GLTradeInfo::mutable_myitem(int index) {
  return myitem_.Mutable(index);
}
inline ::PBItem* PBG2GLTradeInfo::add_myitem() {
  return myitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBItem >&
PBG2GLTradeInfo::myitem() const {
  return myitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBItem >*
PBG2GLTradeInfo::mutable_myitem() {
  return &myitem_;
}

// repeated .PBMoney mymoney = 5;
inline int PBG2GLTradeInfo::mymoney_size() const {
  return mymoney_.size();
}
inline void PBG2GLTradeInfo::clear_mymoney() {
  mymoney_.Clear();
}
inline const ::PBMoney& PBG2GLTradeInfo::mymoney(int index) const {
  return mymoney_.Get(index);
}
inline ::PBMoney* PBG2GLTradeInfo::mutable_mymoney(int index) {
  return mymoney_.Mutable(index);
}
inline ::PBMoney* PBG2GLTradeInfo::add_mymoney() {
  return mymoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMoney >&
PBG2GLTradeInfo::mymoney() const {
  return mymoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMoney >*
PBG2GLTradeInfo::mutable_mymoney() {
  return &mymoney_;
}

// repeated .PBItem taritem = 6;
inline int PBG2GLTradeInfo::taritem_size() const {
  return taritem_.size();
}
inline void PBG2GLTradeInfo::clear_taritem() {
  taritem_.Clear();
}
inline const ::PBItem& PBG2GLTradeInfo::taritem(int index) const {
  return taritem_.Get(index);
}
inline ::PBItem* PBG2GLTradeInfo::mutable_taritem(int index) {
  return taritem_.Mutable(index);
}
inline ::PBItem* PBG2GLTradeInfo::add_taritem() {
  return taritem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBItem >&
PBG2GLTradeInfo::taritem() const {
  return taritem_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBItem >*
PBG2GLTradeInfo::mutable_taritem() {
  return &taritem_;
}

// repeated .PBMoney tarmoney = 7;
inline int PBG2GLTradeInfo::tarmoney_size() const {
  return tarmoney_.size();
}
inline void PBG2GLTradeInfo::clear_tarmoney() {
  tarmoney_.Clear();
}
inline const ::PBMoney& PBG2GLTradeInfo::tarmoney(int index) const {
  return tarmoney_.Get(index);
}
inline ::PBMoney* PBG2GLTradeInfo::mutable_tarmoney(int index) {
  return tarmoney_.Mutable(index);
}
inline ::PBMoney* PBG2GLTradeInfo::add_tarmoney() {
  return tarmoney_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMoney >&
PBG2GLTradeInfo::tarmoney() const {
  return tarmoney_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMoney >*
PBG2GLTradeInfo::mutable_tarmoney() {
  return &tarmoney_;
}

// optional uint64 mygetsliver = 8;
inline bool PBG2GLTradeInfo::has_mygetsliver() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBG2GLTradeInfo::set_has_mygetsliver() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBG2GLTradeInfo::clear_has_mygetsliver() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBG2GLTradeInfo::clear_mygetsliver() {
  mygetsliver_ = GOOGLE_ULONGLONG(0);
  clear_has_mygetsliver();
}
inline ::google::protobuf::uint64 PBG2GLTradeInfo::mygetsliver() const {
  return mygetsliver_;
}
inline void PBG2GLTradeInfo::set_mygetsliver(::google::protobuf::uint64 value) {
  set_has_mygetsliver();
  mygetsliver_ = value;
}

// optional uint64 mygivesliver = 9;
inline bool PBG2GLTradeInfo::has_mygivesliver() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBG2GLTradeInfo::set_has_mygivesliver() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBG2GLTradeInfo::clear_has_mygivesliver() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBG2GLTradeInfo::clear_mygivesliver() {
  mygivesliver_ = GOOGLE_ULONGLONG(0);
  clear_has_mygivesliver();
}
inline ::google::protobuf::uint64 PBG2GLTradeInfo::mygivesliver() const {
  return mygivesliver_;
}
inline void PBG2GLTradeInfo::set_mygivesliver(::google::protobuf::uint64 value) {
  set_has_mygivesliver();
  mygivesliver_ = value;
}

// -------------------------------------------------------------------

// PBGLAGFindPlayer

// optional uint32 sourceid = 1;
inline bool PBGLAGFindPlayer::has_sourceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGLAGFindPlayer::set_has_sourceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGLAGFindPlayer::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGLAGFindPlayer::clear_sourceid() {
  sourceid_ = 0u;
  clear_has_sourceid();
}
inline ::google::protobuf::uint32 PBGLAGFindPlayer::sourceid() const {
  return sourceid_;
}
inline void PBGLAGFindPlayer::set_sourceid(::google::protobuf::uint32 value) {
  set_has_sourceid();
  sourceid_ = value;
}

// optional uint32 worldid = 2;
inline bool PBGLAGFindPlayer::has_worldid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGLAGFindPlayer::set_has_worldid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGLAGFindPlayer::clear_has_worldid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGLAGFindPlayer::clear_worldid() {
  worldid_ = 0u;
  clear_has_worldid();
}
inline ::google::protobuf::uint32 PBGLAGFindPlayer::worldid() const {
  return worldid_;
}
inline void PBGLAGFindPlayer::set_worldid(::google::protobuf::uint32 value) {
  set_has_worldid();
  worldid_ = value;
}

// optional uint32 targetid = 3;
inline bool PBGLAGFindPlayer::has_targetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGLAGFindPlayer::set_has_targetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGLAGFindPlayer::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGLAGFindPlayer::clear_targetid() {
  targetid_ = 0u;
  clear_has_targetid();
}
inline ::google::protobuf::uint32 PBGLAGFindPlayer::targetid() const {
  return targetid_;
}
inline void PBGLAGFindPlayer::set_targetid(::google::protobuf::uint32 value) {
  set_has_targetid();
  targetid_ = value;
}

// -------------------------------------------------------------------

// PBGLAGFindPlayerAck

// optional uint32 sourceid = 1;
inline bool PBGLAGFindPlayerAck::has_sourceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGLAGFindPlayerAck::set_has_sourceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGLAGFindPlayerAck::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGLAGFindPlayerAck::clear_sourceid() {
  sourceid_ = 0u;
  clear_has_sourceid();
}
inline ::google::protobuf::uint32 PBGLAGFindPlayerAck::sourceid() const {
  return sourceid_;
}
inline void PBGLAGFindPlayerAck::set_sourceid(::google::protobuf::uint32 value) {
  set_has_sourceid();
  sourceid_ = value;
}

// optional uint32 targetid = 2;
inline bool PBGLAGFindPlayerAck::has_targetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGLAGFindPlayerAck::set_has_targetid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGLAGFindPlayerAck::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGLAGFindPlayerAck::clear_targetid() {
  targetid_ = 0u;
  clear_has_targetid();
}
inline ::google::protobuf::uint32 PBGLAGFindPlayerAck::targetid() const {
  return targetid_;
}
inline void PBGLAGFindPlayerAck::set_targetid(::google::protobuf::uint32 value) {
  set_has_targetid();
  targetid_ = value;
}

// optional .PBPlayerView pbView = 3;
inline bool PBGLAGFindPlayerAck::has_pbview() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGLAGFindPlayerAck::set_has_pbview() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGLAGFindPlayerAck::clear_has_pbview() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGLAGFindPlayerAck::clear_pbview() {
  if (pbview_ != NULL) pbview_->::PBPlayerView::Clear();
  clear_has_pbview();
}
inline const ::PBPlayerView& PBGLAGFindPlayerAck::pbview() const {
  return pbview_ != NULL ? *pbview_ : *default_instance_->pbview_;
}
inline ::PBPlayerView* PBGLAGFindPlayerAck::mutable_pbview() {
  set_has_pbview();
  if (pbview_ == NULL) pbview_ = new ::PBPlayerView;
  return pbview_;
}
inline ::PBPlayerView* PBGLAGFindPlayerAck::release_pbview() {
  clear_has_pbview();
  ::PBPlayerView* temp = pbview_;
  pbview_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBGL2GSaleMoneyFail

// optional uint32 playerid = 1;
inline bool PBGL2GSaleMoneyFail::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGL2GSaleMoneyFail::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGL2GSaleMoneyFail::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGL2GSaleMoneyFail::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBGL2GSaleMoneyFail::playerid() const {
  return playerid_;
}
inline void PBGL2GSaleMoneyFail::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional uint32 logicworldid = 2;
inline bool PBGL2GSaleMoneyFail::has_logicworldid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGL2GSaleMoneyFail::set_has_logicworldid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGL2GSaleMoneyFail::clear_has_logicworldid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGL2GSaleMoneyFail::clear_logicworldid() {
  logicworldid_ = 0u;
  clear_has_logicworldid();
}
inline ::google::protobuf::uint32 PBGL2GSaleMoneyFail::logicworldid() const {
  return logicworldid_;
}
inline void PBGL2GSaleMoneyFail::set_logicworldid(::google::protobuf::uint32 value) {
  set_has_logicworldid();
  logicworldid_ = value;
}

// optional uint32 type = 3;
inline bool PBGL2GSaleMoneyFail::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGL2GSaleMoneyFail::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGL2GSaleMoneyFail::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGL2GSaleMoneyFail::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PBGL2GSaleMoneyFail::type() const {
  return type_;
}
inline void PBGL2GSaleMoneyFail::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 cash = 4;
inline bool PBGL2GSaleMoneyFail::has_cash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGL2GSaleMoneyFail::set_has_cash() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGL2GSaleMoneyFail::clear_has_cash() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGL2GSaleMoneyFail::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 PBGL2GSaleMoneyFail::cash() const {
  return cash_;
}
inline void PBGL2GSaleMoneyFail::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
}

// optional uint64 sliver = 5;
inline bool PBGL2GSaleMoneyFail::has_sliver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBGL2GSaleMoneyFail::set_has_sliver() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBGL2GSaleMoneyFail::clear_has_sliver() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBGL2GSaleMoneyFail::clear_sliver() {
  sliver_ = GOOGLE_ULONGLONG(0);
  clear_has_sliver();
}
inline ::google::protobuf::uint64 PBGL2GSaleMoneyFail::sliver() const {
  return sliver_;
}
inline void PBGL2GSaleMoneyFail::set_sliver(::google::protobuf::uint64 value) {
  set_has_sliver();
  sliver_ = value;
}

// -------------------------------------------------------------------

// PBGL2GSaleMoneyCancel

// optional uint32 playerid = 1;
inline bool PBGL2GSaleMoneyCancel::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGL2GSaleMoneyCancel::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGL2GSaleMoneyCancel::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGL2GSaleMoneyCancel::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBGL2GSaleMoneyCancel::playerid() const {
  return playerid_;
}
inline void PBGL2GSaleMoneyCancel::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional uint32 logicworldid = 2;
inline bool PBGL2GSaleMoneyCancel::has_logicworldid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGL2GSaleMoneyCancel::set_has_logicworldid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGL2GSaleMoneyCancel::clear_has_logicworldid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGL2GSaleMoneyCancel::clear_logicworldid() {
  logicworldid_ = 0u;
  clear_has_logicworldid();
}
inline ::google::protobuf::uint32 PBGL2GSaleMoneyCancel::logicworldid() const {
  return logicworldid_;
}
inline void PBGL2GSaleMoneyCancel::set_logicworldid(::google::protobuf::uint32 value) {
  set_has_logicworldid();
  logicworldid_ = value;
}

// optional uint32 type = 3;
inline bool PBGL2GSaleMoneyCancel::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGL2GSaleMoneyCancel::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGL2GSaleMoneyCancel::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGL2GSaleMoneyCancel::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PBGL2GSaleMoneyCancel::type() const {
  return type_;
}
inline void PBGL2GSaleMoneyCancel::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 cash = 4;
inline bool PBGL2GSaleMoneyCancel::has_cash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGL2GSaleMoneyCancel::set_has_cash() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGL2GSaleMoneyCancel::clear_has_cash() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGL2GSaleMoneyCancel::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 PBGL2GSaleMoneyCancel::cash() const {
  return cash_;
}
inline void PBGL2GSaleMoneyCancel::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
}

// optional uint64 sliver = 5;
inline bool PBGL2GSaleMoneyCancel::has_sliver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBGL2GSaleMoneyCancel::set_has_sliver() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBGL2GSaleMoneyCancel::clear_has_sliver() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBGL2GSaleMoneyCancel::clear_sliver() {
  sliver_ = GOOGLE_ULONGLONG(0);
  clear_has_sliver();
}
inline ::google::protobuf::uint64 PBGL2GSaleMoneyCancel::sliver() const {
  return sliver_;
}
inline void PBGL2GSaleMoneyCancel::set_sliver(::google::protobuf::uint64 value) {
  set_has_sliver();
  sliver_ = value;
}

// -------------------------------------------------------------------

// PBG2GLSaleMoney_salecancel

// optional uint32 playerid = 1;
inline bool PBG2GLSaleMoney_salecancel::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBG2GLSaleMoney_salecancel::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBG2GLSaleMoney_salecancel::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBG2GLSaleMoney_salecancel::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBG2GLSaleMoney_salecancel::playerid() const {
  return playerid_;
}
inline void PBG2GLSaleMoney_salecancel::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional uint64 orderid = 2;
inline bool PBG2GLSaleMoney_salecancel::has_orderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBG2GLSaleMoney_salecancel::set_has_orderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBG2GLSaleMoney_salecancel::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBG2GLSaleMoney_salecancel::clear_orderid() {
  orderid_ = GOOGLE_ULONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::uint64 PBG2GLSaleMoney_salecancel::orderid() const {
  return orderid_;
}
inline void PBG2GLSaleMoney_salecancel::set_orderid(::google::protobuf::uint64 value) {
  set_has_orderid();
  orderid_ = value;
}

// optional uint64 can_get_cash = 3;
inline bool PBG2GLSaleMoney_salecancel::has_can_get_cash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBG2GLSaleMoney_salecancel::set_has_can_get_cash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBG2GLSaleMoney_salecancel::clear_has_can_get_cash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBG2GLSaleMoney_salecancel::clear_can_get_cash() {
  can_get_cash_ = GOOGLE_ULONGLONG(0);
  clear_has_can_get_cash();
}
inline ::google::protobuf::uint64 PBG2GLSaleMoney_salecancel::can_get_cash() const {
  return can_get_cash_;
}
inline void PBG2GLSaleMoney_salecancel::set_can_get_cash(::google::protobuf::uint64 value) {
  set_has_can_get_cash();
  can_get_cash_ = value;
}

// optional uint64 can_get_sliver = 4;
inline bool PBG2GLSaleMoney_salecancel::has_can_get_sliver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBG2GLSaleMoney_salecancel::set_has_can_get_sliver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBG2GLSaleMoney_salecancel::clear_has_can_get_sliver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBG2GLSaleMoney_salecancel::clear_can_get_sliver() {
  can_get_sliver_ = GOOGLE_ULONGLONG(0);
  clear_has_can_get_sliver();
}
inline ::google::protobuf::uint64 PBG2GLSaleMoney_salecancel::can_get_sliver() const {
  return can_get_sliver_;
}
inline void PBG2GLSaleMoney_salecancel::set_can_get_sliver(::google::protobuf::uint64 value) {
  set_has_can_get_sliver();
  can_get_sliver_ = value;
}

// -------------------------------------------------------------------

// PBGL2GAuctionSaleFail

// optional uint32 playerid = 1;
inline bool PBGL2GAuctionSaleFail::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGL2GAuctionSaleFail::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGL2GAuctionSaleFail::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGL2GAuctionSaleFail::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBGL2GAuctionSaleFail::playerid() const {
  return playerid_;
}
inline void PBGL2GAuctionSaleFail::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional uint32 logicworldid = 2;
inline bool PBGL2GAuctionSaleFail::has_logicworldid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGL2GAuctionSaleFail::set_has_logicworldid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGL2GAuctionSaleFail::clear_has_logicworldid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGL2GAuctionSaleFail::clear_logicworldid() {
  logicworldid_ = 0u;
  clear_has_logicworldid();
}
inline ::google::protobuf::uint32 PBGL2GAuctionSaleFail::logicworldid() const {
  return logicworldid_;
}
inline void PBGL2GAuctionSaleFail::set_logicworldid(::google::protobuf::uint32 value) {
  set_has_logicworldid();
  logicworldid_ = value;
}

// optional .PBItem item = 3;
inline bool PBGL2GAuctionSaleFail::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGL2GAuctionSaleFail::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGL2GAuctionSaleFail::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGL2GAuctionSaleFail::clear_item() {
  if (item_ != NULL) item_->::PBItem::Clear();
  clear_has_item();
}
inline const ::PBItem& PBGL2GAuctionSaleFail::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::PBItem* PBGL2GAuctionSaleFail::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::PBItem;
  return item_;
}
inline ::PBItem* PBGL2GAuctionSaleFail::release_item() {
  clear_has_item();
  ::PBItem* temp = item_;
  item_ = NULL;
  return temp;
}

// optional uint32 sliver = 4;
inline bool PBGL2GAuctionSaleFail::has_sliver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGL2GAuctionSaleFail::set_has_sliver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGL2GAuctionSaleFail::clear_has_sliver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGL2GAuctionSaleFail::clear_sliver() {
  sliver_ = 0u;
  clear_has_sliver();
}
inline ::google::protobuf::uint32 PBGL2GAuctionSaleFail::sliver() const {
  return sliver_;
}
inline void PBGL2GAuctionSaleFail::set_sliver(::google::protobuf::uint32 value) {
  set_has_sliver();
  sliver_ = value;
}

// -------------------------------------------------------------------

// PBGL2GAuctionSaleCancel

// optional uint32 playerid = 1;
inline bool PBGL2GAuctionSaleCancel::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGL2GAuctionSaleCancel::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGL2GAuctionSaleCancel::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGL2GAuctionSaleCancel::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBGL2GAuctionSaleCancel::playerid() const {
  return playerid_;
}
inline void PBGL2GAuctionSaleCancel::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional uint32 logicworldid = 2;
inline bool PBGL2GAuctionSaleCancel::has_logicworldid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGL2GAuctionSaleCancel::set_has_logicworldid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGL2GAuctionSaleCancel::clear_has_logicworldid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGL2GAuctionSaleCancel::clear_logicworldid() {
  logicworldid_ = 0u;
  clear_has_logicworldid();
}
inline ::google::protobuf::uint32 PBGL2GAuctionSaleCancel::logicworldid() const {
  return logicworldid_;
}
inline void PBGL2GAuctionSaleCancel::set_logicworldid(::google::protobuf::uint32 value) {
  set_has_logicworldid();
  logicworldid_ = value;
}

// optional .PBItem item = 3;
inline bool PBGL2GAuctionSaleCancel::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGL2GAuctionSaleCancel::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGL2GAuctionSaleCancel::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGL2GAuctionSaleCancel::clear_item() {
  if (item_ != NULL) item_->::PBItem::Clear();
  clear_has_item();
}
inline const ::PBItem& PBGL2GAuctionSaleCancel::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::PBItem* PBGL2GAuctionSaleCancel::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::PBItem;
  return item_;
}
inline ::PBItem* PBGL2GAuctionSaleCancel::release_item() {
  clear_has_item();
  ::PBItem* temp = item_;
  item_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBGL2GAuctionBuyFail

// optional uint32 playerid = 1;
inline bool PBGL2GAuctionBuyFail::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGL2GAuctionBuyFail::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGL2GAuctionBuyFail::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGL2GAuctionBuyFail::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBGL2GAuctionBuyFail::playerid() const {
  return playerid_;
}
inline void PBGL2GAuctionBuyFail::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional uint32 logicworldid = 2;
inline bool PBGL2GAuctionBuyFail::has_logicworldid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGL2GAuctionBuyFail::set_has_logicworldid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGL2GAuctionBuyFail::clear_has_logicworldid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGL2GAuctionBuyFail::clear_logicworldid() {
  logicworldid_ = 0u;
  clear_has_logicworldid();
}
inline ::google::protobuf::uint32 PBGL2GAuctionBuyFail::logicworldid() const {
  return logicworldid_;
}
inline void PBGL2GAuctionBuyFail::set_logicworldid(::google::protobuf::uint32 value) {
  set_has_logicworldid();
  logicworldid_ = value;
}

// optional uint32 sliver = 3;
inline bool PBGL2GAuctionBuyFail::has_sliver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGL2GAuctionBuyFail::set_has_sliver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGL2GAuctionBuyFail::clear_has_sliver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGL2GAuctionBuyFail::clear_sliver() {
  sliver_ = 0u;
  clear_has_sliver();
}
inline ::google::protobuf::uint32 PBGL2GAuctionBuyFail::sliver() const {
  return sliver_;
}
inline void PBGL2GAuctionBuyFail::set_sliver(::google::protobuf::uint32 value) {
  set_has_sliver();
  sliver_ = value;
}

// -------------------------------------------------------------------

// PBG2GLAuction_sale

// optional .PBItem item = 1;
inline bool PBG2GLAuction_sale::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBG2GLAuction_sale::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBG2GLAuction_sale::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBG2GLAuction_sale::clear_item() {
  if (item_ != NULL) item_->::PBItem::Clear();
  clear_has_item();
}
inline const ::PBItem& PBG2GLAuction_sale::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::PBItem* PBG2GLAuction_sale::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::PBItem;
  return item_;
}
inline ::PBItem* PBG2GLAuction_sale::release_item() {
  clear_has_item();
  ::PBItem* temp = item_;
  item_ = NULL;
  return temp;
}

// optional uint32 unitSliver = 2;
inline bool PBG2GLAuction_sale::has_unitsliver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBG2GLAuction_sale::set_has_unitsliver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBG2GLAuction_sale::clear_has_unitsliver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBG2GLAuction_sale::clear_unitsliver() {
  unitsliver_ = 0u;
  clear_has_unitsliver();
}
inline ::google::protobuf::uint32 PBG2GLAuction_sale::unitsliver() const {
  return unitsliver_;
}
inline void PBG2GLAuction_sale::set_unitsliver(::google::protobuf::uint32 value) {
  set_has_unitsliver();
  unitsliver_ = value;
}

// optional uint32 taxSliver = 3;
inline bool PBG2GLAuction_sale::has_taxsliver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBG2GLAuction_sale::set_has_taxsliver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBG2GLAuction_sale::clear_has_taxsliver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBG2GLAuction_sale::clear_taxsliver() {
  taxsliver_ = 0u;
  clear_has_taxsliver();
}
inline ::google::protobuf::uint32 PBG2GLAuction_sale::taxsliver() const {
  return taxsliver_;
}
inline void PBG2GLAuction_sale::set_taxsliver(::google::protobuf::uint32 value) {
  set_has_taxsliver();
  taxsliver_ = value;
}

// -------------------------------------------------------------------

// PBG2GLFriend_AddAsk

// optional .PBPlayerDisplay applyer = 1;
inline bool PBG2GLFriend_AddAsk::has_applyer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBG2GLFriend_AddAsk::set_has_applyer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBG2GLFriend_AddAsk::clear_has_applyer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBG2GLFriend_AddAsk::clear_applyer() {
  if (applyer_ != NULL) applyer_->::PBPlayerDisplay::Clear();
  clear_has_applyer();
}
inline const ::PBPlayerDisplay& PBG2GLFriend_AddAsk::applyer() const {
  return applyer_ != NULL ? *applyer_ : *default_instance_->applyer_;
}
inline ::PBPlayerDisplay* PBG2GLFriend_AddAsk::mutable_applyer() {
  set_has_applyer();
  if (applyer_ == NULL) applyer_ = new ::PBPlayerDisplay;
  return applyer_;
}
inline ::PBPlayerDisplay* PBG2GLFriend_AddAsk::release_applyer() {
  clear_has_applyer();
  ::PBPlayerDisplay* temp = applyer_;
  applyer_ = NULL;
  return temp;
}

// optional uint32 fithgpower = 2;
inline bool PBG2GLFriend_AddAsk::has_fithgpower() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBG2GLFriend_AddAsk::set_has_fithgpower() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBG2GLFriend_AddAsk::clear_has_fithgpower() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBG2GLFriend_AddAsk::clear_fithgpower() {
  fithgpower_ = 0u;
  clear_has_fithgpower();
}
inline ::google::protobuf::uint32 PBG2GLFriend_AddAsk::fithgpower() const {
  return fithgpower_;
}
inline void PBG2GLFriend_AddAsk::set_fithgpower(::google::protobuf::uint32 value) {
  set_has_fithgpower();
  fithgpower_ = value;
}

// optional uint32 type = 3;
inline bool PBG2GLFriend_AddAsk::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBG2GLFriend_AddAsk::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBG2GLFriend_AddAsk::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBG2GLFriend_AddAsk::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PBG2GLFriend_AddAsk::type() const {
  return type_;
}
inline void PBG2GLFriend_AddAsk::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 targetid = 4;
inline bool PBG2GLFriend_AddAsk::has_targetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBG2GLFriend_AddAsk::set_has_targetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBG2GLFriend_AddAsk::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBG2GLFriend_AddAsk::clear_targetid() {
  targetid_ = 0u;
  clear_has_targetid();
}
inline ::google::protobuf::uint32 PBG2GLFriend_AddAsk::targetid() const {
  return targetid_;
}
inline void PBG2GLFriend_AddAsk::set_targetid(::google::protobuf::uint32 value) {
  set_has_targetid();
  targetid_ = value;
}

// -------------------------------------------------------------------

// PBG2GLFriend_Answer

// optional .PBPlayerDisplay ackplayer = 1;
inline bool PBG2GLFriend_Answer::has_ackplayer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBG2GLFriend_Answer::set_has_ackplayer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBG2GLFriend_Answer::clear_has_ackplayer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBG2GLFriend_Answer::clear_ackplayer() {
  if (ackplayer_ != NULL) ackplayer_->::PBPlayerDisplay::Clear();
  clear_has_ackplayer();
}
inline const ::PBPlayerDisplay& PBG2GLFriend_Answer::ackplayer() const {
  return ackplayer_ != NULL ? *ackplayer_ : *default_instance_->ackplayer_;
}
inline ::PBPlayerDisplay* PBG2GLFriend_Answer::mutable_ackplayer() {
  set_has_ackplayer();
  if (ackplayer_ == NULL) ackplayer_ = new ::PBPlayerDisplay;
  return ackplayer_;
}
inline ::PBPlayerDisplay* PBG2GLFriend_Answer::release_ackplayer() {
  clear_has_ackplayer();
  ::PBPlayerDisplay* temp = ackplayer_;
  ackplayer_ = NULL;
  return temp;
}

// optional uint32 type = 2;
inline bool PBG2GLFriend_Answer::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBG2GLFriend_Answer::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBG2GLFriend_Answer::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBG2GLFriend_Answer::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PBG2GLFriend_Answer::type() const {
  return type_;
}
inline void PBG2GLFriend_Answer::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 applyerid = 3;
inline bool PBG2GLFriend_Answer::has_applyerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBG2GLFriend_Answer::set_has_applyerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBG2GLFriend_Answer::clear_has_applyerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBG2GLFriend_Answer::clear_applyerid() {
  applyerid_ = 0u;
  clear_has_applyerid();
}
inline ::google::protobuf::uint32 PBG2GLFriend_Answer::applyerid() const {
  return applyerid_;
}
inline void PBG2GLFriend_Answer::set_applyerid(::google::protobuf::uint32 value) {
  set_has_applyerid();
  applyerid_ = value;
}

// -------------------------------------------------------------------

// PBG2GLFriend_Find

// optional uint32 playerid = 1;
inline bool PBG2GLFriend_Find::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBG2GLFriend_Find::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBG2GLFriend_Find::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBG2GLFriend_Find::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBG2GLFriend_Find::playerid() const {
  return playerid_;
}
inline void PBG2GLFriend_Find::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string name = 2;
inline bool PBG2GLFriend_Find::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBG2GLFriend_Find::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBG2GLFriend_Find::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBG2GLFriend_Find::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBG2GLFriend_Find::name() const {
  return *name_;
}
inline void PBG2GLFriend_Find::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBG2GLFriend_Find::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBG2GLFriend_Find::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBG2GLFriend_Find::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBG2GLFriend_Find::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBG2GLFriend_Info

// optional uint32 type = 1;
inline bool PBG2GLFriend_Info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBG2GLFriend_Info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBG2GLFriend_Info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBG2GLFriend_Info::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PBG2GLFriend_Info::type() const {
  return type_;
}
inline void PBG2GLFriend_Info::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 friendid = 2;
inline bool PBG2GLFriend_Info::has_friendid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBG2GLFriend_Info::set_has_friendid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBG2GLFriend_Info::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBG2GLFriend_Info::clear_friendid() {
  friendid_ = 0u;
  clear_has_friendid();
}
inline ::google::protobuf::uint32 PBG2GLFriend_Info::friendid() const {
  return friendid_;
}
inline void PBG2GLFriend_Info::set_friendid(::google::protobuf::uint32 value) {
  set_has_friendid();
  friendid_ = value;
}

// -------------------------------------------------------------------

// PBG2GLFriend_Syn_ToGlobal

// optional uint32 playerid = 1;
inline bool PBG2GLFriend_Syn_ToGlobal::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBG2GLFriend_Syn_ToGlobal::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBG2GLFriend_Syn_ToGlobal::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBG2GLFriend_Syn_ToGlobal::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBG2GLFriend_Syn_ToGlobal::playerid() const {
  return playerid_;
}
inline void PBG2GLFriend_Syn_ToGlobal::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// repeated .PBG2GLFriend_Info info = 2;
inline int PBG2GLFriend_Syn_ToGlobal::info_size() const {
  return info_.size();
}
inline void PBG2GLFriend_Syn_ToGlobal::clear_info() {
  info_.Clear();
}
inline const ::PBG2GLFriend_Info& PBG2GLFriend_Syn_ToGlobal::info(int index) const {
  return info_.Get(index);
}
inline ::PBG2GLFriend_Info* PBG2GLFriend_Syn_ToGlobal::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PBG2GLFriend_Info* PBG2GLFriend_Syn_ToGlobal::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBG2GLFriend_Info >&
PBG2GLFriend_Syn_ToGlobal::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBG2GLFriend_Info >*
PBG2GLFriend_Syn_ToGlobal::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// PBG2GLFriend_Add_ToGlobal

// optional uint32 playerid = 1;
inline bool PBG2GLFriend_Add_ToGlobal::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBG2GLFriend_Add_ToGlobal::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBG2GLFriend_Add_ToGlobal::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBG2GLFriend_Add_ToGlobal::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBG2GLFriend_Add_ToGlobal::playerid() const {
  return playerid_;
}
inline void PBG2GLFriend_Add_ToGlobal::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional .PBG2GLFriend_Info info = 2;
inline bool PBG2GLFriend_Add_ToGlobal::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBG2GLFriend_Add_ToGlobal::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBG2GLFriend_Add_ToGlobal::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBG2GLFriend_Add_ToGlobal::clear_info() {
  if (info_ != NULL) info_->::PBG2GLFriend_Info::Clear();
  clear_has_info();
}
inline const ::PBG2GLFriend_Info& PBG2GLFriend_Add_ToGlobal::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PBG2GLFriend_Info* PBG2GLFriend_Add_ToGlobal::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PBG2GLFriend_Info;
  return info_;
}
inline ::PBG2GLFriend_Info* PBG2GLFriend_Add_ToGlobal::release_info() {
  clear_has_info();
  ::PBG2GLFriend_Info* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBG2GLFriend_Del_ToGlobal

// optional uint32 playerid = 1;
inline bool PBG2GLFriend_Del_ToGlobal::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBG2GLFriend_Del_ToGlobal::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBG2GLFriend_Del_ToGlobal::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBG2GLFriend_Del_ToGlobal::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBG2GLFriend_Del_ToGlobal::playerid() const {
  return playerid_;
}
inline void PBG2GLFriend_Del_ToGlobal::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional .PBG2GLFriend_Info info = 2;
inline bool PBG2GLFriend_Del_ToGlobal::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBG2GLFriend_Del_ToGlobal::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBG2GLFriend_Del_ToGlobal::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBG2GLFriend_Del_ToGlobal::clear_info() {
  if (info_ != NULL) info_->::PBG2GLFriend_Info::Clear();
  clear_has_info();
}
inline const ::PBG2GLFriend_Info& PBG2GLFriend_Del_ToGlobal::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PBG2GLFriend_Info* PBG2GLFriend_Del_ToGlobal::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PBG2GLFriend_Info;
  return info_;
}
inline ::PBG2GLFriend_Info* PBG2GLFriend_Del_ToGlobal::release_info() {
  clear_has_info();
  ::PBG2GLFriend_Info* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBGL2GFriendInfo

// optional uint32 type = 1;
inline bool PBGL2GFriendInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGL2GFriendInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGL2GFriendInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGL2GFriendInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PBGL2GFriendInfo::type() const {
  return type_;
}
inline void PBGL2GFriendInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .PBPlayerDisplay display = 2;
inline bool PBGL2GFriendInfo::has_display() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGL2GFriendInfo::set_has_display() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGL2GFriendInfo::clear_has_display() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGL2GFriendInfo::clear_display() {
  if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
  clear_has_display();
}
inline const ::PBPlayerDisplay& PBGL2GFriendInfo::display() const {
  return display_ != NULL ? *display_ : *default_instance_->display_;
}
inline ::PBPlayerDisplay* PBGL2GFriendInfo::mutable_display() {
  set_has_display();
  if (display_ == NULL) display_ = new ::PBPlayerDisplay;
  return display_;
}
inline ::PBPlayerDisplay* PBGL2GFriendInfo::release_display() {
  clear_has_display();
  ::PBPlayerDisplay* temp = display_;
  display_ = NULL;
  return temp;
}

// optional bool online = 3;
inline bool PBGL2GFriendInfo::has_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGL2GFriendInfo::set_has_online() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGL2GFriendInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGL2GFriendInfo::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool PBGL2GFriendInfo::online() const {
  return online_;
}
inline void PBGL2GFriendInfo::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// optional uint32 fightpower = 4;
inline bool PBGL2GFriendInfo::has_fightpower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGL2GFriendInfo::set_has_fightpower() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGL2GFriendInfo::clear_has_fightpower() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGL2GFriendInfo::clear_fightpower() {
  fightpower_ = 0u;
  clear_has_fightpower();
}
inline ::google::protobuf::uint32 PBGL2GFriendInfo::fightpower() const {
  return fightpower_;
}
inline void PBGL2GFriendInfo::set_fightpower(::google::protobuf::uint32 value) {
  set_has_fightpower();
  fightpower_ = value;
}

// -------------------------------------------------------------------

// PBGL2GFriendInfoUpdate

// optional uint32 playerid = 1;
inline bool PBGL2GFriendInfoUpdate::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGL2GFriendInfoUpdate::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGL2GFriendInfoUpdate::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGL2GFriendInfoUpdate::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBGL2GFriendInfoUpdate::playerid() const {
  return playerid_;
}
inline void PBGL2GFriendInfoUpdate::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional .PBGL2GFriendInfo info = 2;
inline bool PBGL2GFriendInfoUpdate::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGL2GFriendInfoUpdate::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGL2GFriendInfoUpdate::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGL2GFriendInfoUpdate::clear_info() {
  if (info_ != NULL) info_->::PBGL2GFriendInfo::Clear();
  clear_has_info();
}
inline const ::PBGL2GFriendInfo& PBGL2GFriendInfoUpdate::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PBGL2GFriendInfo* PBGL2GFriendInfoUpdate::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PBGL2GFriendInfo;
  return info_;
}
inline ::PBGL2GFriendInfo* PBGL2GFriendInfoUpdate::release_info() {
  clear_has_info();
  ::PBGL2GFriendInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBGL2GFriendAdd

// optional uint32 playerid = 1;
inline bool PBGL2GFriendAdd::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGL2GFriendAdd::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGL2GFriendAdd::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGL2GFriendAdd::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBGL2GFriendAdd::playerid() const {
  return playerid_;
}
inline void PBGL2GFriendAdd::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional .PBGL2GFriendInfo info = 2;
inline bool PBGL2GFriendAdd::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGL2GFriendAdd::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGL2GFriendAdd::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGL2GFriendAdd::clear_info() {
  if (info_ != NULL) info_->::PBGL2GFriendInfo::Clear();
  clear_has_info();
}
inline const ::PBGL2GFriendInfo& PBGL2GFriendAdd::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PBGL2GFriendInfo* PBGL2GFriendAdd::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PBGL2GFriendInfo;
  return info_;
}
inline ::PBGL2GFriendInfo* PBGL2GFriendAdd::release_info() {
  clear_has_info();
  ::PBGL2GFriendInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBGL2GFriendInfoSyn

// optional uint32 playerid = 1;
inline bool PBGL2GFriendInfoSyn::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGL2GFriendInfoSyn::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGL2GFriendInfoSyn::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGL2GFriendInfoSyn::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBGL2GFriendInfoSyn::playerid() const {
  return playerid_;
}
inline void PBGL2GFriendInfoSyn::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// repeated .PBGL2GFriendInfo info = 2;
inline int PBGL2GFriendInfoSyn::info_size() const {
  return info_.size();
}
inline void PBGL2GFriendInfoSyn::clear_info() {
  info_.Clear();
}
inline const ::PBGL2GFriendInfo& PBGL2GFriendInfoSyn::info(int index) const {
  return info_.Get(index);
}
inline ::PBGL2GFriendInfo* PBGL2GFriendInfoSyn::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PBGL2GFriendInfo* PBGL2GFriendInfoSyn::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBGL2GFriendInfo >&
PBGL2GFriendInfoSyn::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBGL2GFriendInfo >*
PBGL2GFriendInfoSyn::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// PBG2GLCommon_BossInfoUpdate

// optional uint32 sceneid = 1;
inline bool PBG2GLCommon_BossInfoUpdate::has_sceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBG2GLCommon_BossInfoUpdate::set_has_sceneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBG2GLCommon_BossInfoUpdate::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBG2GLCommon_BossInfoUpdate::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 PBG2GLCommon_BossInfoUpdate::sceneid() const {
  return sceneid_;
}
inline void PBG2GLCommon_BossInfoUpdate::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// optional uint32 cellid = 2;
inline bool PBG2GLCommon_BossInfoUpdate::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBG2GLCommon_BossInfoUpdate::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBG2GLCommon_BossInfoUpdate::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBG2GLCommon_BossInfoUpdate::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
inline ::google::protobuf::uint32 PBG2GLCommon_BossInfoUpdate::cellid() const {
  return cellid_;
}
inline void PBG2GLCommon_BossInfoUpdate::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
}

// optional uint32 monsterid = 3;
inline bool PBG2GLCommon_BossInfoUpdate::has_monsterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBG2GLCommon_BossInfoUpdate::set_has_monsterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBG2GLCommon_BossInfoUpdate::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBG2GLCommon_BossInfoUpdate::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 PBG2GLCommon_BossInfoUpdate::monsterid() const {
  return monsterid_;
}
inline void PBG2GLCommon_BossInfoUpdate::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// optional bool alive = 4;
inline bool PBG2GLCommon_BossInfoUpdate::has_alive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBG2GLCommon_BossInfoUpdate::set_has_alive() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBG2GLCommon_BossInfoUpdate::clear_has_alive() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBG2GLCommon_BossInfoUpdate::clear_alive() {
  alive_ = false;
  clear_has_alive();
}
inline bool PBG2GLCommon_BossInfoUpdate::alive() const {
  return alive_;
}
inline void PBG2GLCommon_BossInfoUpdate::set_alive(bool value) {
  set_has_alive();
  alive_ = value;
}

// -------------------------------------------------------------------

// PBG2GLCommon_BossListAsk

// optional uint32 playerid = 1;
inline bool PBG2GLCommon_BossListAsk::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBG2GLCommon_BossListAsk::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBG2GLCommon_BossListAsk::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBG2GLCommon_BossListAsk::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBG2GLCommon_BossListAsk::playerid() const {
  return playerid_;
}
inline void PBG2GLCommon_BossListAsk::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// PBGLAGCallPlayer

// optional string tarname = 1;
inline bool PBGLAGCallPlayer::has_tarname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGLAGCallPlayer::set_has_tarname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGLAGCallPlayer::clear_has_tarname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGLAGCallPlayer::clear_tarname() {
  if (tarname_ != &::google::protobuf::internal::kEmptyString) {
    tarname_->clear();
  }
  clear_has_tarname();
}
inline const ::std::string& PBGLAGCallPlayer::tarname() const {
  return *tarname_;
}
inline void PBGLAGCallPlayer::set_tarname(const ::std::string& value) {
  set_has_tarname();
  if (tarname_ == &::google::protobuf::internal::kEmptyString) {
    tarname_ = new ::std::string;
  }
  tarname_->assign(value);
}
inline void PBGLAGCallPlayer::set_tarname(const char* value) {
  set_has_tarname();
  if (tarname_ == &::google::protobuf::internal::kEmptyString) {
    tarname_ = new ::std::string;
  }
  tarname_->assign(value);
}
inline void PBGLAGCallPlayer::set_tarname(const char* value, size_t size) {
  set_has_tarname();
  if (tarname_ == &::google::protobuf::internal::kEmptyString) {
    tarname_ = new ::std::string;
  }
  tarname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBGLAGCallPlayer::mutable_tarname() {
  set_has_tarname();
  if (tarname_ == &::google::protobuf::internal::kEmptyString) {
    tarname_ = new ::std::string;
  }
  return tarname_;
}
inline ::std::string* PBGLAGCallPlayer::release_tarname() {
  clear_has_tarname();
  if (tarname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tarname_;
    tarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 tarid = 2;
inline bool PBGLAGCallPlayer::has_tarid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGLAGCallPlayer::set_has_tarid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGLAGCallPlayer::clear_has_tarid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGLAGCallPlayer::clear_tarid() {
  tarid_ = 0u;
  clear_has_tarid();
}
inline ::google::protobuf::uint32 PBGLAGCallPlayer::tarid() const {
  return tarid_;
}
inline void PBGLAGCallPlayer::set_tarid(::google::protobuf::uint32 value) {
  set_has_tarid();
  tarid_ = value;
}

// optional uint32 sceneid = 3;
inline bool PBGLAGCallPlayer::has_sceneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGLAGCallPlayer::set_has_sceneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGLAGCallPlayer::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGLAGCallPlayer::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 PBGLAGCallPlayer::sceneid() const {
  return sceneid_;
}
inline void PBGLAGCallPlayer::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// optional uint32 scenecellid = 4;
inline bool PBGLAGCallPlayer::has_scenecellid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGLAGCallPlayer::set_has_scenecellid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGLAGCallPlayer::clear_has_scenecellid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGLAGCallPlayer::clear_scenecellid() {
  scenecellid_ = 0u;
  clear_has_scenecellid();
}
inline ::google::protobuf::uint32 PBGLAGCallPlayer::scenecellid() const {
  return scenecellid_;
}
inline void PBGLAGCallPlayer::set_scenecellid(::google::protobuf::uint32 value) {
  set_has_scenecellid();
  scenecellid_ = value;
}

// optional uint64 scenedynid = 5;
inline bool PBGLAGCallPlayer::has_scenedynid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBGLAGCallPlayer::set_has_scenedynid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBGLAGCallPlayer::clear_has_scenedynid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBGLAGCallPlayer::clear_scenedynid() {
  scenedynid_ = GOOGLE_ULONGLONG(0);
  clear_has_scenedynid();
}
inline ::google::protobuf::uint64 PBGLAGCallPlayer::scenedynid() const {
  return scenedynid_;
}
inline void PBGLAGCallPlayer::set_scenedynid(::google::protobuf::uint64 value) {
  set_has_scenedynid();
  scenedynid_ = value;
}

// optional float posx = 6;
inline bool PBGLAGCallPlayer::has_posx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBGLAGCallPlayer::set_has_posx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBGLAGCallPlayer::clear_has_posx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBGLAGCallPlayer::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline float PBGLAGCallPlayer::posx() const {
  return posx_;
}
inline void PBGLAGCallPlayer::set_posx(float value) {
  set_has_posx();
  posx_ = value;
}

// optional float posy = 7;
inline bool PBGLAGCallPlayer::has_posy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBGLAGCallPlayer::set_has_posy() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBGLAGCallPlayer::clear_has_posy() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBGLAGCallPlayer::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline float PBGLAGCallPlayer::posy() const {
  return posy_;
}
inline void PBGLAGCallPlayer::set_posy(float value) {
  set_has_posy();
  posy_ = value;
}

// -------------------------------------------------------------------

// PBGLAGLocatePlayer

// optional uint32 playerid = 1;
inline bool PBGLAGLocatePlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGLAGLocatePlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGLAGLocatePlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGLAGLocatePlayer::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBGLAGLocatePlayer::playerid() const {
  return playerid_;
}
inline void PBGLAGLocatePlayer::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional uint32 reason = 2;
inline bool PBGLAGLocatePlayer::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGLAGLocatePlayer::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGLAGLocatePlayer::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGLAGLocatePlayer::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 PBGLAGLocatePlayer::reason() const {
  return reason_;
}
inline void PBGLAGLocatePlayer::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// optional string tarname = 3;
inline bool PBGLAGLocatePlayer::has_tarname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGLAGLocatePlayer::set_has_tarname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGLAGLocatePlayer::clear_has_tarname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGLAGLocatePlayer::clear_tarname() {
  if (tarname_ != &::google::protobuf::internal::kEmptyString) {
    tarname_->clear();
  }
  clear_has_tarname();
}
inline const ::std::string& PBGLAGLocatePlayer::tarname() const {
  return *tarname_;
}
inline void PBGLAGLocatePlayer::set_tarname(const ::std::string& value) {
  set_has_tarname();
  if (tarname_ == &::google::protobuf::internal::kEmptyString) {
    tarname_ = new ::std::string;
  }
  tarname_->assign(value);
}
inline void PBGLAGLocatePlayer::set_tarname(const char* value) {
  set_has_tarname();
  if (tarname_ == &::google::protobuf::internal::kEmptyString) {
    tarname_ = new ::std::string;
  }
  tarname_->assign(value);
}
inline void PBGLAGLocatePlayer::set_tarname(const char* value, size_t size) {
  set_has_tarname();
  if (tarname_ == &::google::protobuf::internal::kEmptyString) {
    tarname_ = new ::std::string;
  }
  tarname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBGLAGLocatePlayer::mutable_tarname() {
  set_has_tarname();
  if (tarname_ == &::google::protobuf::internal::kEmptyString) {
    tarname_ = new ::std::string;
  }
  return tarname_;
}
inline ::std::string* PBGLAGLocatePlayer::release_tarname() {
  clear_has_tarname();
  if (tarname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tarname_;
    tarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 tarid = 4;
inline bool PBGLAGLocatePlayer::has_tarid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGLAGLocatePlayer::set_has_tarid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGLAGLocatePlayer::clear_has_tarid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGLAGLocatePlayer::clear_tarid() {
  tarid_ = 0u;
  clear_has_tarid();
}
inline ::google::protobuf::uint32 PBGLAGLocatePlayer::tarid() const {
  return tarid_;
}
inline void PBGLAGLocatePlayer::set_tarid(::google::protobuf::uint32 value) {
  set_has_tarid();
  tarid_ = value;
}

// -------------------------------------------------------------------

// PBGLAGLocatePlayerAck

// optional uint32 playerid = 1;
inline bool PBGLAGLocatePlayerAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGLAGLocatePlayerAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGLAGLocatePlayerAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGLAGLocatePlayerAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBGLAGLocatePlayerAck::playerid() const {
  return playerid_;
}
inline void PBGLAGLocatePlayerAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional uint32 reason = 2;
inline bool PBGLAGLocatePlayerAck::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGLAGLocatePlayerAck::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGLAGLocatePlayerAck::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGLAGLocatePlayerAck::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 PBGLAGLocatePlayerAck::reason() const {
  return reason_;
}
inline void PBGLAGLocatePlayerAck::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// optional .PBPlayerDisplay tar = 3;
inline bool PBGLAGLocatePlayerAck::has_tar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGLAGLocatePlayerAck::set_has_tar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGLAGLocatePlayerAck::clear_has_tar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGLAGLocatePlayerAck::clear_tar() {
  if (tar_ != NULL) tar_->::PBPlayerDisplay::Clear();
  clear_has_tar();
}
inline const ::PBPlayerDisplay& PBGLAGLocatePlayerAck::tar() const {
  return tar_ != NULL ? *tar_ : *default_instance_->tar_;
}
inline ::PBPlayerDisplay* PBGLAGLocatePlayerAck::mutable_tar() {
  set_has_tar();
  if (tar_ == NULL) tar_ = new ::PBPlayerDisplay;
  return tar_;
}
inline ::PBPlayerDisplay* PBGLAGLocatePlayerAck::release_tar() {
  clear_has_tar();
  ::PBPlayerDisplay* temp = tar_;
  tar_ = NULL;
  return temp;
}

// optional bool suc = 4;
inline bool PBGLAGLocatePlayerAck::has_suc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBGLAGLocatePlayerAck::set_has_suc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBGLAGLocatePlayerAck::clear_has_suc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBGLAGLocatePlayerAck::clear_suc() {
  suc_ = false;
  clear_has_suc();
}
inline bool PBGLAGLocatePlayerAck::suc() const {
  return suc_;
}
inline void PBGLAGLocatePlayerAck::set_suc(bool value) {
  set_has_suc();
  suc_ = value;
}

// optional uint32 sceneid = 5;
inline bool PBGLAGLocatePlayerAck::has_sceneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBGLAGLocatePlayerAck::set_has_sceneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBGLAGLocatePlayerAck::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBGLAGLocatePlayerAck::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 PBGLAGLocatePlayerAck::sceneid() const {
  return sceneid_;
}
inline void PBGLAGLocatePlayerAck::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// optional uint32 scenecellid = 6;
inline bool PBGLAGLocatePlayerAck::has_scenecellid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBGLAGLocatePlayerAck::set_has_scenecellid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBGLAGLocatePlayerAck::clear_has_scenecellid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBGLAGLocatePlayerAck::clear_scenecellid() {
  scenecellid_ = 0u;
  clear_has_scenecellid();
}
inline ::google::protobuf::uint32 PBGLAGLocatePlayerAck::scenecellid() const {
  return scenecellid_;
}
inline void PBGLAGLocatePlayerAck::set_scenecellid(::google::protobuf::uint32 value) {
  set_has_scenecellid();
  scenecellid_ = value;
}

// optional uint64 scenedynid = 7;
inline bool PBGLAGLocatePlayerAck::has_scenedynid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBGLAGLocatePlayerAck::set_has_scenedynid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBGLAGLocatePlayerAck::clear_has_scenedynid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBGLAGLocatePlayerAck::clear_scenedynid() {
  scenedynid_ = GOOGLE_ULONGLONG(0);
  clear_has_scenedynid();
}
inline ::google::protobuf::uint64 PBGLAGLocatePlayerAck::scenedynid() const {
  return scenedynid_;
}
inline void PBGLAGLocatePlayerAck::set_scenedynid(::google::protobuf::uint64 value) {
  set_has_scenedynid();
  scenedynid_ = value;
}

// optional float posx = 8;
inline bool PBGLAGLocatePlayerAck::has_posx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBGLAGLocatePlayerAck::set_has_posx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBGLAGLocatePlayerAck::clear_has_posx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBGLAGLocatePlayerAck::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline float PBGLAGLocatePlayerAck::posx() const {
  return posx_;
}
inline void PBGLAGLocatePlayerAck::set_posx(float value) {
  set_has_posx();
  posx_ = value;
}

// optional float posy = 9;
inline bool PBGLAGLocatePlayerAck::has_posy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBGLAGLocatePlayerAck::set_has_posy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBGLAGLocatePlayerAck::clear_has_posy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBGLAGLocatePlayerAck::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline float PBGLAGLocatePlayerAck::posy() const {
  return posy_;
}
inline void PBGLAGLocatePlayerAck::set_posy(float value) {
  set_has_posy();
  posy_ = value;
}

// -------------------------------------------------------------------

// PBWorldBossStatus

// optional uint32 bossActivityid = 1;
inline bool PBWorldBossStatus::has_bossactivityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBWorldBossStatus::set_has_bossactivityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBWorldBossStatus::clear_has_bossactivityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBWorldBossStatus::clear_bossactivityid() {
  bossactivityid_ = 0u;
  clear_has_bossactivityid();
}
inline ::google::protobuf::uint32 PBWorldBossStatus::bossactivityid() const {
  return bossactivityid_;
}
inline void PBWorldBossStatus::set_bossactivityid(::google::protobuf::uint32 value) {
  set_has_bossactivityid();
  bossactivityid_ = value;
}

// optional uint32 status = 2;
inline bool PBWorldBossStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBWorldBossStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBWorldBossStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBWorldBossStatus::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 PBWorldBossStatus::status() const {
  return status_;
}
inline void PBWorldBossStatus::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional string killerName = 3;
inline bool PBWorldBossStatus::has_killername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBWorldBossStatus::set_has_killername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBWorldBossStatus::clear_has_killername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBWorldBossStatus::clear_killername() {
  if (killername_ != &::google::protobuf::internal::kEmptyString) {
    killername_->clear();
  }
  clear_has_killername();
}
inline const ::std::string& PBWorldBossStatus::killername() const {
  return *killername_;
}
inline void PBWorldBossStatus::set_killername(const ::std::string& value) {
  set_has_killername();
  if (killername_ == &::google::protobuf::internal::kEmptyString) {
    killername_ = new ::std::string;
  }
  killername_->assign(value);
}
inline void PBWorldBossStatus::set_killername(const char* value) {
  set_has_killername();
  if (killername_ == &::google::protobuf::internal::kEmptyString) {
    killername_ = new ::std::string;
  }
  killername_->assign(value);
}
inline void PBWorldBossStatus::set_killername(const char* value, size_t size) {
  set_has_killername();
  if (killername_ == &::google::protobuf::internal::kEmptyString) {
    killername_ = new ::std::string;
  }
  killername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBWorldBossStatus::mutable_killername() {
  set_has_killername();
  if (killername_ == &::google::protobuf::internal::kEmptyString) {
    killername_ = new ::std::string;
  }
  return killername_;
}
inline ::std::string* PBWorldBossStatus::release_killername() {
  clear_has_killername();
  if (killername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = killername_;
    killername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 lastdeadtimetick = 4;
inline bool PBWorldBossStatus::has_lastdeadtimetick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBWorldBossStatus::set_has_lastdeadtimetick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBWorldBossStatus::clear_has_lastdeadtimetick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBWorldBossStatus::clear_lastdeadtimetick() {
  lastdeadtimetick_ = GOOGLE_ULONGLONG(0);
  clear_has_lastdeadtimetick();
}
inline ::google::protobuf::uint64 PBWorldBossStatus::lastdeadtimetick() const {
  return lastdeadtimetick_;
}
inline void PBWorldBossStatus::set_lastdeadtimetick(::google::protobuf::uint64 value) {
  set_has_lastdeadtimetick();
  lastdeadtimetick_ = value;
}

// -------------------------------------------------------------------

// PBG2GLWorldBossStatusReportAsk

// repeated .PBWorldBossStatus bossStatus = 1;
inline int PBG2GLWorldBossStatusReportAsk::bossstatus_size() const {
  return bossstatus_.size();
}
inline void PBG2GLWorldBossStatusReportAsk::clear_bossstatus() {
  bossstatus_.Clear();
}
inline const ::PBWorldBossStatus& PBG2GLWorldBossStatusReportAsk::bossstatus(int index) const {
  return bossstatus_.Get(index);
}
inline ::PBWorldBossStatus* PBG2GLWorldBossStatusReportAsk::mutable_bossstatus(int index) {
  return bossstatus_.Mutable(index);
}
inline ::PBWorldBossStatus* PBG2GLWorldBossStatusReportAsk::add_bossstatus() {
  return bossstatus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBWorldBossStatus >&
PBG2GLWorldBossStatusReportAsk::bossstatus() const {
  return bossstatus_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBWorldBossStatus >*
PBG2GLWorldBossStatusReportAsk::mutable_bossstatus() {
  return &bossstatus_;
}

// -------------------------------------------------------------------

// PBG2GLWorldBossKillInfoAsk

// -------------------------------------------------------------------

// PBGL2GWorldBossStatusNtf

// repeated .PBWorldBossStatus bossStatus = 1;
inline int PBGL2GWorldBossStatusNtf::bossstatus_size() const {
  return bossstatus_.size();
}
inline void PBGL2GWorldBossStatusNtf::clear_bossstatus() {
  bossstatus_.Clear();
}
inline const ::PBWorldBossStatus& PBGL2GWorldBossStatusNtf::bossstatus(int index) const {
  return bossstatus_.Get(index);
}
inline ::PBWorldBossStatus* PBGL2GWorldBossStatusNtf::mutable_bossstatus(int index) {
  return bossstatus_.Mutable(index);
}
inline ::PBWorldBossStatus* PBGL2GWorldBossStatusNtf::add_bossstatus() {
  return bossstatus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBWorldBossStatus >&
PBGL2GWorldBossStatusNtf::bossstatus() const {
  return bossstatus_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBWorldBossStatus >*
PBGL2GWorldBossStatusNtf::mutable_bossstatus() {
  return &bossstatus_;
}

// -------------------------------------------------------------------

// PBGL2GWorldBossKillerInfoAck

// optional .PBWorldBossKill worldbosskill = 1;
inline bool PBGL2GWorldBossKillerInfoAck::has_worldbosskill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGL2GWorldBossKillerInfoAck::set_has_worldbosskill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGL2GWorldBossKillerInfoAck::clear_has_worldbosskill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGL2GWorldBossKillerInfoAck::clear_worldbosskill() {
  if (worldbosskill_ != NULL) worldbosskill_->::PBWorldBossKill::Clear();
  clear_has_worldbosskill();
}
inline const ::PBWorldBossKill& PBGL2GWorldBossKillerInfoAck::worldbosskill() const {
  return worldbosskill_ != NULL ? *worldbosskill_ : *default_instance_->worldbosskill_;
}
inline ::PBWorldBossKill* PBGL2GWorldBossKillerInfoAck::mutable_worldbosskill() {
  set_has_worldbosskill();
  if (worldbosskill_ == NULL) worldbosskill_ = new ::PBWorldBossKill;
  return worldbosskill_;
}
inline ::PBWorldBossKill* PBGL2GWorldBossKillerInfoAck::release_worldbosskill() {
  clear_has_worldbosskill();
  ::PBWorldBossKill* temp = worldbosskill_;
  worldbosskill_ = NULL;
  return temp;
}

// optional bool dbvalid = 2;
inline bool PBGL2GWorldBossKillerInfoAck::has_dbvalid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGL2GWorldBossKillerInfoAck::set_has_dbvalid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGL2GWorldBossKillerInfoAck::clear_has_dbvalid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGL2GWorldBossKillerInfoAck::clear_dbvalid() {
  dbvalid_ = false;
  clear_has_dbvalid();
}
inline bool PBGL2GWorldBossKillerInfoAck::dbvalid() const {
  return dbvalid_;
}
inline void PBGL2GWorldBossKillerInfoAck::set_dbvalid(bool value) {
  set_has_dbvalid();
  dbvalid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GLAGMsg_2eproto__INCLUDED
