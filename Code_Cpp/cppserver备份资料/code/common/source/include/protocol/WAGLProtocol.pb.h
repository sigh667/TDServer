// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WAGLProtocol.proto

#ifndef PROTOBUF_WAGLProtocol_2eproto__INCLUDED
#define PROTOBUF_WAGLProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WAGLProtocol_2eproto();
void protobuf_AssignDesc_WAGLProtocol_2eproto();
void protobuf_ShutdownFile_WAGLProtocol_2eproto();


enum _emPGL2W_Protocol {
  P_GL2W_Protocol_Register = 0,
  P_GL2W_Protocol_Common = 1,
  P_GL2W_Protocol_Faction = 2
};
bool _emPGL2W_Protocol_IsValid(int value);
const _emPGL2W_Protocol _emPGL2W_Protocol_MIN = P_GL2W_Protocol_Register;
const _emPGL2W_Protocol _emPGL2W_Protocol_MAX = P_GL2W_Protocol_Faction;
const int _emPGL2W_Protocol_ARRAYSIZE = _emPGL2W_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPGL2W_Protocol_descriptor();
inline const ::std::string& _emPGL2W_Protocol_Name(_emPGL2W_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPGL2W_Protocol_descriptor(), value);
}
inline bool _emPGL2W_Protocol_Parse(
    const ::std::string& name, _emPGL2W_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPGL2W_Protocol>(
    _emPGL2W_Protocol_descriptor(), name, value);
}
enum _emGL2W_Protocol_Common {
  GL2W_Common_OfflineData = 0
};
bool _emGL2W_Protocol_Common_IsValid(int value);
const _emGL2W_Protocol_Common _emGL2W_Protocol_Common_MIN = GL2W_Common_OfflineData;
const _emGL2W_Protocol_Common _emGL2W_Protocol_Common_MAX = GL2W_Common_OfflineData;
const int _emGL2W_Protocol_Common_ARRAYSIZE = _emGL2W_Protocol_Common_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emGL2W_Protocol_Common_descriptor();
inline const ::std::string& _emGL2W_Protocol_Common_Name(_emGL2W_Protocol_Common value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emGL2W_Protocol_Common_descriptor(), value);
}
inline bool _emGL2W_Protocol_Common_Parse(
    const ::std::string& name, _emGL2W_Protocol_Common* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emGL2W_Protocol_Common>(
    _emGL2W_Protocol_Common_descriptor(), name, value);
}
enum _emGL2W_Protocol_Faction {
  GL2W_Faction_Syn = 0
};
bool _emGL2W_Protocol_Faction_IsValid(int value);
const _emGL2W_Protocol_Faction _emGL2W_Protocol_Faction_MIN = GL2W_Faction_Syn;
const _emGL2W_Protocol_Faction _emGL2W_Protocol_Faction_MAX = GL2W_Faction_Syn;
const int _emGL2W_Protocol_Faction_ARRAYSIZE = _emGL2W_Protocol_Faction_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emGL2W_Protocol_Faction_descriptor();
inline const ::std::string& _emGL2W_Protocol_Faction_Name(_emGL2W_Protocol_Faction value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emGL2W_Protocol_Faction_descriptor(), value);
}
inline bool _emGL2W_Protocol_Faction_Parse(
    const ::std::string& name, _emGL2W_Protocol_Faction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emGL2W_Protocol_Faction>(
    _emGL2W_Protocol_Faction_descriptor(), name, value);
}
enum _emPW2GL_Protocol {
  P_W2GL_Protocol_Start = 0,
  P_W2GL_Protocol_Player = 1,
  P_W2GL_Protocol_Common = 2,
  P_W2GL_Protocol_Faction = 3
};
bool _emPW2GL_Protocol_IsValid(int value);
const _emPW2GL_Protocol _emPW2GL_Protocol_MIN = P_W2GL_Protocol_Start;
const _emPW2GL_Protocol _emPW2GL_Protocol_MAX = P_W2GL_Protocol_Faction;
const int _emPW2GL_Protocol_ARRAYSIZE = _emPW2GL_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPW2GL_Protocol_descriptor();
inline const ::std::string& _emPW2GL_Protocol_Name(_emPW2GL_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPW2GL_Protocol_descriptor(), value);
}
inline bool _emPW2GL_Protocol_Parse(
    const ::std::string& name, _emPW2GL_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPW2GL_Protocol>(
    _emPW2GL_Protocol_descriptor(), name, value);
}
enum _emW2GL_Protocol_Start {
  W2GL_Start_Register = 0
};
bool _emW2GL_Protocol_Start_IsValid(int value);
const _emW2GL_Protocol_Start _emW2GL_Protocol_Start_MIN = W2GL_Start_Register;
const _emW2GL_Protocol_Start _emW2GL_Protocol_Start_MAX = W2GL_Start_Register;
const int _emW2GL_Protocol_Start_ARRAYSIZE = _emW2GL_Protocol_Start_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2GL_Protocol_Start_descriptor();
inline const ::std::string& _emW2GL_Protocol_Start_Name(_emW2GL_Protocol_Start value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2GL_Protocol_Start_descriptor(), value);
}
inline bool _emW2GL_Protocol_Start_Parse(
    const ::std::string& name, _emW2GL_Protocol_Start* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2GL_Protocol_Start>(
    _emW2GL_Protocol_Start_descriptor(), name, value);
}
enum _emW2GL_Protocol_Player {
  W2GL_Player_Login = 0,
  W2GL_Player_Logout = 1,
  W2GL_Player_Transfer = 2
};
bool _emW2GL_Protocol_Player_IsValid(int value);
const _emW2GL_Protocol_Player _emW2GL_Protocol_Player_MIN = W2GL_Player_Login;
const _emW2GL_Protocol_Player _emW2GL_Protocol_Player_MAX = W2GL_Player_Transfer;
const int _emW2GL_Protocol_Player_ARRAYSIZE = _emW2GL_Protocol_Player_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2GL_Protocol_Player_descriptor();
inline const ::std::string& _emW2GL_Protocol_Player_Name(_emW2GL_Protocol_Player value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2GL_Protocol_Player_descriptor(), value);
}
inline bool _emW2GL_Protocol_Player_Parse(
    const ::std::string& name, _emW2GL_Protocol_Player* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2GL_Protocol_Player>(
    _emW2GL_Protocol_Player_descriptor(), name, value);
}
enum _emW2GL_Protocol_Common {
  W2GL_Common_GMReloadData = 0,
  W2GL_Common_GMWorldStartTime = 1
};
bool _emW2GL_Protocol_Common_IsValid(int value);
const _emW2GL_Protocol_Common _emW2GL_Protocol_Common_MIN = W2GL_Common_GMReloadData;
const _emW2GL_Protocol_Common _emW2GL_Protocol_Common_MAX = W2GL_Common_GMWorldStartTime;
const int _emW2GL_Protocol_Common_ARRAYSIZE = _emW2GL_Protocol_Common_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2GL_Protocol_Common_descriptor();
inline const ::std::string& _emW2GL_Protocol_Common_Name(_emW2GL_Protocol_Common value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2GL_Protocol_Common_descriptor(), value);
}
inline bool _emW2GL_Protocol_Common_Parse(
    const ::std::string& name, _emW2GL_Protocol_Common* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2GL_Protocol_Common>(
    _emW2GL_Protocol_Common_descriptor(), name, value);
}
enum _emW2GL_Protocol_Faction {
  W2GL_Faction_Syn = 0
};
bool _emW2GL_Protocol_Faction_IsValid(int value);
const _emW2GL_Protocol_Faction _emW2GL_Protocol_Faction_MIN = W2GL_Faction_Syn;
const _emW2GL_Protocol_Faction _emW2GL_Protocol_Faction_MAX = W2GL_Faction_Syn;
const int _emW2GL_Protocol_Faction_ARRAYSIZE = _emW2GL_Protocol_Faction_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2GL_Protocol_Faction_descriptor();
inline const ::std::string& _emW2GL_Protocol_Faction_Name(_emW2GL_Protocol_Faction value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2GL_Protocol_Faction_descriptor(), value);
}
inline bool _emW2GL_Protocol_Faction_Parse(
    const ::std::string& name, _emW2GL_Protocol_Faction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2GL_Protocol_Faction>(
    _emW2GL_Protocol_Faction_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPGL2W_Protocol>() {
  return _emPGL2W_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emGL2W_Protocol_Common>() {
  return _emGL2W_Protocol_Common_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emGL2W_Protocol_Faction>() {
  return _emGL2W_Protocol_Faction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPW2GL_Protocol>() {
  return _emPW2GL_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2GL_Protocol_Start>() {
  return _emW2GL_Protocol_Start_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2GL_Protocol_Player>() {
  return _emW2GL_Protocol_Player_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2GL_Protocol_Common>() {
  return _emW2GL_Protocol_Common_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2GL_Protocol_Faction>() {
  return _emW2GL_Protocol_Faction_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WAGLProtocol_2eproto__INCLUDED
