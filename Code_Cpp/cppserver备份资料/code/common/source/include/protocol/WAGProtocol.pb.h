// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WAGProtocol.proto

#ifndef PROTOBUF_WAGProtocol_2eproto__INCLUDED
#define PROTOBUF_WAGProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WAGProtocol_2eproto();
void protobuf_AssignDesc_WAGProtocol_2eproto();
void protobuf_ShutdownFile_WAGProtocol_2eproto();


enum _emPW2G_Protocol {
  P_W2G_Protocol_Start = 0,
  P_W2G_Protocol_Player = 1,
  P_W2G_Protocol_Scene = 2,
  P_W2G_Protocol_Team = 3,
  P_W2G_Protocol_Copymap = 4,
  P_W2G_Protocol_Common = 5,
  P_W2G_Protocol_Faction = 6,
  P_W2G_Protocol_Broadcast = 7,
  P_W2G_Protocol_DartCar = 8,
  P_W2G_Protocol_AnswerQuestion = 9,
  P_W2G_Protocol_PvpWar = 10,
  P_W2G_Protocol_Corps = 11,
  P_W2G_Protocol_Manor = 12,
  P_W2G_Protocol_SinglePvp = 13
};
bool _emPW2G_Protocol_IsValid(int value);
const _emPW2G_Protocol _emPW2G_Protocol_MIN = P_W2G_Protocol_Start;
const _emPW2G_Protocol _emPW2G_Protocol_MAX = P_W2G_Protocol_SinglePvp;
const int _emPW2G_Protocol_ARRAYSIZE = _emPW2G_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPW2G_Protocol_descriptor();
inline const ::std::string& _emPW2G_Protocol_Name(_emPW2G_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPW2G_Protocol_descriptor(), value);
}
inline bool _emPW2G_Protocol_Parse(
    const ::std::string& name, _emPW2G_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPW2G_Protocol>(
    _emPW2G_Protocol_descriptor(), name, value);
}
enum _emW2G_Protocol_SinglePvp {
  W2G_Protocol_SinglePvp_EnterMatch = 0,
  W2G_Protocol_SinglePvp_ExitMatch = 1
};
bool _emW2G_Protocol_SinglePvp_IsValid(int value);
const _emW2G_Protocol_SinglePvp _emW2G_Protocol_SinglePvp_MIN = W2G_Protocol_SinglePvp_EnterMatch;
const _emW2G_Protocol_SinglePvp _emW2G_Protocol_SinglePvp_MAX = W2G_Protocol_SinglePvp_ExitMatch;
const int _emW2G_Protocol_SinglePvp_ARRAYSIZE = _emW2G_Protocol_SinglePvp_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_SinglePvp_descriptor();
inline const ::std::string& _emW2G_Protocol_SinglePvp_Name(_emW2G_Protocol_SinglePvp value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2G_Protocol_SinglePvp_descriptor(), value);
}
inline bool _emW2G_Protocol_SinglePvp_Parse(
    const ::std::string& name, _emW2G_Protocol_SinglePvp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2G_Protocol_SinglePvp>(
    _emW2G_Protocol_SinglePvp_descriptor(), name, value);
}
enum _emW2G_Corps_Protocol {
  W2G_Corps_ChangeJob = 0
};
bool _emW2G_Corps_Protocol_IsValid(int value);
const _emW2G_Corps_Protocol _emW2G_Corps_Protocol_MIN = W2G_Corps_ChangeJob;
const _emW2G_Corps_Protocol _emW2G_Corps_Protocol_MAX = W2G_Corps_ChangeJob;
const int _emW2G_Corps_Protocol_ARRAYSIZE = _emW2G_Corps_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2G_Corps_Protocol_descriptor();
inline const ::std::string& _emW2G_Corps_Protocol_Name(_emW2G_Corps_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2G_Corps_Protocol_descriptor(), value);
}
inline bool _emW2G_Corps_Protocol_Parse(
    const ::std::string& name, _emW2G_Corps_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2G_Corps_Protocol>(
    _emW2G_Corps_Protocol_descriptor(), name, value);
}
enum _emW2G_PvpWar_Protocol {
  W2G_PvpWar_EnterMatch = 0,
  W2G_PvpWar_ExitMatch = 1,
  W2G_PvpWar_EnterReady = 2,
  W2G_PvpWar_ExitReady = 3,
  W2G_PvpWar_CompleteMatch = 4
};
bool _emW2G_PvpWar_Protocol_IsValid(int value);
const _emW2G_PvpWar_Protocol _emW2G_PvpWar_Protocol_MIN = W2G_PvpWar_EnterMatch;
const _emW2G_PvpWar_Protocol _emW2G_PvpWar_Protocol_MAX = W2G_PvpWar_CompleteMatch;
const int _emW2G_PvpWar_Protocol_ARRAYSIZE = _emW2G_PvpWar_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2G_PvpWar_Protocol_descriptor();
inline const ::std::string& _emW2G_PvpWar_Protocol_Name(_emW2G_PvpWar_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2G_PvpWar_Protocol_descriptor(), value);
}
inline bool _emW2G_PvpWar_Protocol_Parse(
    const ::std::string& name, _emW2G_PvpWar_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2G_PvpWar_Protocol>(
    _emW2G_PvpWar_Protocol_descriptor(), name, value);
}
enum _emW2G_Protocol_Common {
  W2G_Common_GmReloadData = 0,
  W2G_Common_Mail = 1,
  W2G_Common_MsgTransfer = 2,
  W2G_Common_GmWorldStartTime = 3,
  W2G_Common_TreasurePrize = 4,
  W2G_Common_ForbitSpeak = 5
};
bool _emW2G_Protocol_Common_IsValid(int value);
const _emW2G_Protocol_Common _emW2G_Protocol_Common_MIN = W2G_Common_GmReloadData;
const _emW2G_Protocol_Common _emW2G_Protocol_Common_MAX = W2G_Common_ForbitSpeak;
const int _emW2G_Protocol_Common_ARRAYSIZE = _emW2G_Protocol_Common_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Common_descriptor();
inline const ::std::string& _emW2G_Protocol_Common_Name(_emW2G_Protocol_Common value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2G_Protocol_Common_descriptor(), value);
}
inline bool _emW2G_Protocol_Common_Parse(
    const ::std::string& name, _emW2G_Protocol_Common* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2G_Protocol_Common>(
    _emW2G_Protocol_Common_descriptor(), name, value);
}
enum _emW2G_Protocol_Start {
  W2G_Start_Register = 0,
  W2G_Start_UnRegister = 1
};
bool _emW2G_Protocol_Start_IsValid(int value);
const _emW2G_Protocol_Start _emW2G_Protocol_Start_MIN = W2G_Start_Register;
const _emW2G_Protocol_Start _emW2G_Protocol_Start_MAX = W2G_Start_UnRegister;
const int _emW2G_Protocol_Start_ARRAYSIZE = _emW2G_Protocol_Start_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Start_descriptor();
inline const ::std::string& _emW2G_Protocol_Start_Name(_emW2G_Protocol_Start value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2G_Protocol_Start_descriptor(), value);
}
inline bool _emW2G_Protocol_Start_Parse(
    const ::std::string& name, _emW2G_Protocol_Start* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2G_Protocol_Start>(
    _emW2G_Protocol_Start_descriptor(), name, value);
}
enum _emW2G_Protocol_Player {
  W2G_Player_Load = 0,
  W2G_Player_SaveDone = 1,
  W2G_Player_FlyMapAck = 2,
  W2G_Player_ExitAsk = 3,
  W2G_Player_OfflineDataAdd = 4,
  W2G_Player_OfflineDataLoad = 5
};
bool _emW2G_Protocol_Player_IsValid(int value);
const _emW2G_Protocol_Player _emW2G_Protocol_Player_MIN = W2G_Player_Load;
const _emW2G_Protocol_Player _emW2G_Protocol_Player_MAX = W2G_Player_OfflineDataLoad;
const int _emW2G_Protocol_Player_ARRAYSIZE = _emW2G_Protocol_Player_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Player_descriptor();
inline const ::std::string& _emW2G_Protocol_Player_Name(_emW2G_Protocol_Player value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2G_Protocol_Player_descriptor(), value);
}
inline bool _emW2G_Protocol_Player_Parse(
    const ::std::string& name, _emW2G_Protocol_Player* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2G_Protocol_Player>(
    _emW2G_Protocol_Player_descriptor(), name, value);
}
enum _emW2G_Protocol_Scene {
  W2G_Scene_CreateCell = 0
};
bool _emW2G_Protocol_Scene_IsValid(int value);
const _emW2G_Protocol_Scene _emW2G_Protocol_Scene_MIN = W2G_Scene_CreateCell;
const _emW2G_Protocol_Scene _emW2G_Protocol_Scene_MAX = W2G_Scene_CreateCell;
const int _emW2G_Protocol_Scene_ARRAYSIZE = _emW2G_Protocol_Scene_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Scene_descriptor();
inline const ::std::string& _emW2G_Protocol_Scene_Name(_emW2G_Protocol_Scene value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2G_Protocol_Scene_descriptor(), value);
}
inline bool _emW2G_Protocol_Scene_Parse(
    const ::std::string& name, _emW2G_Protocol_Scene* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2G_Protocol_Scene>(
    _emW2G_Protocol_Scene_descriptor(), name, value);
}
enum _emW2G_Protocol_Team {
  W2G_Team_Create = 0,
  W2G_Team_Delete = 1,
  W2G_Team_Invite = 2,
  W2G_Team_Apply = 3,
  W2G_Team_ChangeCaptain = 4,
  W2G_Team_AcceptInvite = 5,
  W2G_Team_AcceptApply = 6,
  W2G_Team_MyTeamInfo = 7,
  W2G_Team_AcceptTeamTask = 8,
  W2G_Team_CompleteTeamTask = 9,
  W2G_Team_AllConfirm = 10,
  W2G_Team_Confirm = 11,
  W2G_Team_MemberAdd = 12,
  W2G_Team_MemberDel = 13
};
bool _emW2G_Protocol_Team_IsValid(int value);
const _emW2G_Protocol_Team _emW2G_Protocol_Team_MIN = W2G_Team_Create;
const _emW2G_Protocol_Team _emW2G_Protocol_Team_MAX = W2G_Team_MemberDel;
const int _emW2G_Protocol_Team_ARRAYSIZE = _emW2G_Protocol_Team_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Team_descriptor();
inline const ::std::string& _emW2G_Protocol_Team_Name(_emW2G_Protocol_Team value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2G_Protocol_Team_descriptor(), value);
}
inline bool _emW2G_Protocol_Team_Parse(
    const ::std::string& name, _emW2G_Protocol_Team* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2G_Protocol_Team>(
    _emW2G_Protocol_Team_descriptor(), name, value);
}
enum _emW2G_Protocol_Copymap {
  W2G_Copymap_Enter = 0,
  W2G_Copymap_Exit = 1,
  W2G_Copymap_PlayerInfo = 2,
  W2G_Copymap_KickPlayer = 3
};
bool _emW2G_Protocol_Copymap_IsValid(int value);
const _emW2G_Protocol_Copymap _emW2G_Protocol_Copymap_MIN = W2G_Copymap_Enter;
const _emW2G_Protocol_Copymap _emW2G_Protocol_Copymap_MAX = W2G_Copymap_KickPlayer;
const int _emW2G_Protocol_Copymap_ARRAYSIZE = _emW2G_Protocol_Copymap_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Copymap_descriptor();
inline const ::std::string& _emW2G_Protocol_Copymap_Name(_emW2G_Protocol_Copymap value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2G_Protocol_Copymap_descriptor(), value);
}
inline bool _emW2G_Protocol_Copymap_Parse(
    const ::std::string& name, _emW2G_Protocol_Copymap* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2G_Protocol_Copymap>(
    _emW2G_Protocol_Copymap_descriptor(), name, value);
}
enum _emW2G_Protocol_DartCar {
  W2G_DartCar_Fly_Ack = 0,
  W2G_DartCar_Fly_Create_Ntf = 1,
  W2G_DartCar_RobFinished_Ack = 2,
  W2G_DartCar_MemberLeave_Ntf = 3,
  W2G_DartCar_FindDartcar_Ack = 4
};
bool _emW2G_Protocol_DartCar_IsValid(int value);
const _emW2G_Protocol_DartCar _emW2G_Protocol_DartCar_MIN = W2G_DartCar_Fly_Ack;
const _emW2G_Protocol_DartCar _emW2G_Protocol_DartCar_MAX = W2G_DartCar_FindDartcar_Ack;
const int _emW2G_Protocol_DartCar_ARRAYSIZE = _emW2G_Protocol_DartCar_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_DartCar_descriptor();
inline const ::std::string& _emW2G_Protocol_DartCar_Name(_emW2G_Protocol_DartCar value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2G_Protocol_DartCar_descriptor(), value);
}
inline bool _emW2G_Protocol_DartCar_Parse(
    const ::std::string& name, _emW2G_Protocol_DartCar* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2G_Protocol_DartCar>(
    _emW2G_Protocol_DartCar_descriptor(), name, value);
}
enum _emW2G_Manor_Protocol {
  W2G_Manor_BattleField_FighterCount_Ntf = 0,
  W2G_Manor_BattleField_Enter_Ack = 1,
  W2G_Manor_Copymap_Ntf = 2
};
bool _emW2G_Manor_Protocol_IsValid(int value);
const _emW2G_Manor_Protocol _emW2G_Manor_Protocol_MIN = W2G_Manor_BattleField_FighterCount_Ntf;
const _emW2G_Manor_Protocol _emW2G_Manor_Protocol_MAX = W2G_Manor_Copymap_Ntf;
const int _emW2G_Manor_Protocol_ARRAYSIZE = _emW2G_Manor_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2G_Manor_Protocol_descriptor();
inline const ::std::string& _emW2G_Manor_Protocol_Name(_emW2G_Manor_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2G_Manor_Protocol_descriptor(), value);
}
inline bool _emW2G_Manor_Protocol_Parse(
    const ::std::string& name, _emW2G_Manor_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2G_Manor_Protocol>(
    _emW2G_Manor_Protocol_descriptor(), name, value);
}
enum _emPG2W_Protocol {
  P_G2W_Protocol_Register = 0,
  P_G2W_Protocol_Player = 1,
  P_G2W_Protocol_Scene = 2,
  P_G2W_Protocol_Team = 3,
  P_G2W_Protocol_Copymap = 4,
  P_G2W_Protocol_Common = 5,
  P_G2W_Protocol_Faction = 6,
  P_G2W_Protocol_Broadcast = 7,
  P_G2W_Protocol_DartCar = 8,
  P_G2W_Protocol_FactionBoss = 9,
  P_G2W_Protocol_GM = 10,
  P_G2W_Protocol_AnswerQuestion = 11,
  P_G2W_Protocol_PvpWar = 12,
  P_G2W_Protocol_Corps = 13,
  P_G2W_Protocol_Manor = 14,
  P_G2W_Protocol_SinglePvp = 15
};
bool _emPG2W_Protocol_IsValid(int value);
const _emPG2W_Protocol _emPG2W_Protocol_MIN = P_G2W_Protocol_Register;
const _emPG2W_Protocol _emPG2W_Protocol_MAX = P_G2W_Protocol_SinglePvp;
const int _emPG2W_Protocol_ARRAYSIZE = _emPG2W_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPG2W_Protocol_descriptor();
inline const ::std::string& _emPG2W_Protocol_Name(_emPG2W_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPG2W_Protocol_descriptor(), value);
}
inline bool _emPG2W_Protocol_Parse(
    const ::std::string& name, _emPG2W_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPG2W_Protocol>(
    _emPG2W_Protocol_descriptor(), name, value);
}
enum _emG2W_Protocol_SinglePvp {
  G2W_Protocol_SinglePvp_EnterMatch = 0,
  G2W_Protocol_SinglePvp_ExitMatch = 1
};
bool _emG2W_Protocol_SinglePvp_IsValid(int value);
const _emG2W_Protocol_SinglePvp _emG2W_Protocol_SinglePvp_MIN = G2W_Protocol_SinglePvp_EnterMatch;
const _emG2W_Protocol_SinglePvp _emG2W_Protocol_SinglePvp_MAX = G2W_Protocol_SinglePvp_ExitMatch;
const int _emG2W_Protocol_SinglePvp_ARRAYSIZE = _emG2W_Protocol_SinglePvp_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_SinglePvp_descriptor();
inline const ::std::string& _emG2W_Protocol_SinglePvp_Name(_emG2W_Protocol_SinglePvp value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emG2W_Protocol_SinglePvp_descriptor(), value);
}
inline bool _emG2W_Protocol_SinglePvp_Parse(
    const ::std::string& name, _emG2W_Protocol_SinglePvp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emG2W_Protocol_SinglePvp>(
    _emG2W_Protocol_SinglePvp_descriptor(), name, value);
}
enum _emG2W_Protocol_PvpWar {
  G2W_Protocol_PvpWar_SingleMatch = 0,
  G2W_Protocol_PvpWar_ExitMatch = 1,
  G2W_Protocol_PvpWar_ReadyEnter = 2,
  G2W_Protocol_PvpWar_ExitReadyEnter = 3
};
bool _emG2W_Protocol_PvpWar_IsValid(int value);
const _emG2W_Protocol_PvpWar _emG2W_Protocol_PvpWar_MIN = G2W_Protocol_PvpWar_SingleMatch;
const _emG2W_Protocol_PvpWar _emG2W_Protocol_PvpWar_MAX = G2W_Protocol_PvpWar_ExitReadyEnter;
const int _emG2W_Protocol_PvpWar_ARRAYSIZE = _emG2W_Protocol_PvpWar_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_PvpWar_descriptor();
inline const ::std::string& _emG2W_Protocol_PvpWar_Name(_emG2W_Protocol_PvpWar value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emG2W_Protocol_PvpWar_descriptor(), value);
}
inline bool _emG2W_Protocol_PvpWar_Parse(
    const ::std::string& name, _emG2W_Protocol_PvpWar* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emG2W_Protocol_PvpWar>(
    _emG2W_Protocol_PvpWar_descriptor(), name, value);
}
enum _emG2W_Protocol_Common {
  G2W_Common_GmReloadData = 0,
  G2W_Common_GmWorldStartTime = 1,
  G2W_Common_TreasurePrize = 2,
  G2W_Common_TransferMsg = 3,
  G2W_Common_ForbitSpeak = 4,
  G2W_Common_PlayerReady = 5
};
bool _emG2W_Protocol_Common_IsValid(int value);
const _emG2W_Protocol_Common _emG2W_Protocol_Common_MIN = G2W_Common_GmReloadData;
const _emG2W_Protocol_Common _emG2W_Protocol_Common_MAX = G2W_Common_PlayerReady;
const int _emG2W_Protocol_Common_ARRAYSIZE = _emG2W_Protocol_Common_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Common_descriptor();
inline const ::std::string& _emG2W_Protocol_Common_Name(_emG2W_Protocol_Common value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emG2W_Protocol_Common_descriptor(), value);
}
inline bool _emG2W_Protocol_Common_Parse(
    const ::std::string& name, _emG2W_Protocol_Common* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emG2W_Protocol_Common>(
    _emG2W_Protocol_Common_descriptor(), name, value);
}
enum _emG2W_Protocol_Player {
  G2W_Player_Save = 0,
  G2W_Player_FlyMapAsk = 1,
  G2W_Player_FlyMapSynInfo = 2,
  G2W_Player_ExitAck = 3,
  G2W_Player_OfflineDataAdd = 4,
  G2W_Player_OfflineDataDel = 5,
  G2W_Player_Logout = 6,
  G2W_Player_Syn = 7,
  G2W_Player_Cache = 8
};
bool _emG2W_Protocol_Player_IsValid(int value);
const _emG2W_Protocol_Player _emG2W_Protocol_Player_MIN = G2W_Player_Save;
const _emG2W_Protocol_Player _emG2W_Protocol_Player_MAX = G2W_Player_Cache;
const int _emG2W_Protocol_Player_ARRAYSIZE = _emG2W_Protocol_Player_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Player_descriptor();
inline const ::std::string& _emG2W_Protocol_Player_Name(_emG2W_Protocol_Player value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emG2W_Protocol_Player_descriptor(), value);
}
inline bool _emG2W_Protocol_Player_Parse(
    const ::std::string& name, _emG2W_Protocol_Player* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emG2W_Protocol_Player>(
    _emG2W_Protocol_Player_descriptor(), name, value);
}
enum _emG2W_Protocol_Scene {
  G2W_Scene_RegisterCell = 0,
  G2W_Scene_CloseCell = 1,
  G2W_Scene_PlayerCount = 2
};
bool _emG2W_Protocol_Scene_IsValid(int value);
const _emG2W_Protocol_Scene _emG2W_Protocol_Scene_MIN = G2W_Scene_RegisterCell;
const _emG2W_Protocol_Scene _emG2W_Protocol_Scene_MAX = G2W_Scene_PlayerCount;
const int _emG2W_Protocol_Scene_ARRAYSIZE = _emG2W_Protocol_Scene_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Scene_descriptor();
inline const ::std::string& _emG2W_Protocol_Scene_Name(_emG2W_Protocol_Scene value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emG2W_Protocol_Scene_descriptor(), value);
}
inline bool _emG2W_Protocol_Scene_Parse(
    const ::std::string& name, _emG2W_Protocol_Scene* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emG2W_Protocol_Scene>(
    _emG2W_Protocol_Scene_descriptor(), name, value);
}
enum _emG2W_Protocol_Team {
  G2W_Team_Create = 0,
  G2W_Team_Delete = 1,
  G2W_Team_Invite = 2,
  G2W_Team_Apply = 3,
  G2W_Team_ChangeCaptain = 4,
  G2W_Team_AcceptInvite = 5,
  G2W_Team_AcceptApply = 6
};
bool _emG2W_Protocol_Team_IsValid(int value);
const _emG2W_Protocol_Team _emG2W_Protocol_Team_MIN = G2W_Team_Create;
const _emG2W_Protocol_Team _emG2W_Protocol_Team_MAX = G2W_Team_AcceptApply;
const int _emG2W_Protocol_Team_ARRAYSIZE = _emG2W_Protocol_Team_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Team_descriptor();
inline const ::std::string& _emG2W_Protocol_Team_Name(_emG2W_Protocol_Team value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emG2W_Protocol_Team_descriptor(), value);
}
inline bool _emG2W_Protocol_Team_Parse(
    const ::std::string& name, _emG2W_Protocol_Team* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emG2W_Protocol_Team>(
    _emG2W_Protocol_Team_descriptor(), name, value);
}
enum _emG2W_Protocol_Copymap {
  G2W_Copymap_Create = 0,
  G2W_Copymap_Invite = 1,
  G2W_Copymap_AcceptInvite = 2,
  G2W_Copymap_TeamMemberInfo = 3,
  G2W_Copymap_AllCopymapCount = 4,
  G2W_Copymap_OneCopymapCount = 5,
  G2W_Copymap_UpdateState = 6
};
bool _emG2W_Protocol_Copymap_IsValid(int value);
const _emG2W_Protocol_Copymap _emG2W_Protocol_Copymap_MIN = G2W_Copymap_Create;
const _emG2W_Protocol_Copymap _emG2W_Protocol_Copymap_MAX = G2W_Copymap_UpdateState;
const int _emG2W_Protocol_Copymap_ARRAYSIZE = _emG2W_Protocol_Copymap_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Copymap_descriptor();
inline const ::std::string& _emG2W_Protocol_Copymap_Name(_emG2W_Protocol_Copymap value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emG2W_Protocol_Copymap_descriptor(), value);
}
inline bool _emG2W_Protocol_Copymap_Parse(
    const ::std::string& name, _emG2W_Protocol_Copymap* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emG2W_Protocol_Copymap>(
    _emG2W_Protocol_Copymap_descriptor(), name, value);
}
enum _emG2W_Protocol_DartCar {
  G2W_DartCar_Fly_Ask = 0,
  G2W_DartCar_Update_Ask = 1,
  G2W_DartCar_Delete_Ask = 2,
  G2W_DartCar_RobFinished_Ask = 3,
  G2W_DartCar_LeaveRob_Ask = 4,
  G2W_DartCar_FindDartcar_Ask = 5
};
bool _emG2W_Protocol_DartCar_IsValid(int value);
const _emG2W_Protocol_DartCar _emG2W_Protocol_DartCar_MIN = G2W_DartCar_Fly_Ask;
const _emG2W_Protocol_DartCar _emG2W_Protocol_DartCar_MAX = G2W_DartCar_FindDartcar_Ask;
const int _emG2W_Protocol_DartCar_ARRAYSIZE = _emG2W_Protocol_DartCar_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_DartCar_descriptor();
inline const ::std::string& _emG2W_Protocol_DartCar_Name(_emG2W_Protocol_DartCar value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emG2W_Protocol_DartCar_descriptor(), value);
}
inline bool _emG2W_Protocol_DartCar_Parse(
    const ::std::string& name, _emG2W_Protocol_DartCar* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emG2W_Protocol_DartCar>(
    _emG2W_Protocol_DartCar_descriptor(), name, value);
}
enum _emG2W_Protocol_FactionBoss {
  G2W_FactionBoss_PersonalTop_Ask = 0,
  G2W_FactionBoss_FactionTop_Ask = 1,
  G2W_FactionBoss_UnionTop_Ask = 2,
  G2W_FactionBoss_UpdateHurt = 3
};
bool _emG2W_Protocol_FactionBoss_IsValid(int value);
const _emG2W_Protocol_FactionBoss _emG2W_Protocol_FactionBoss_MIN = G2W_FactionBoss_PersonalTop_Ask;
const _emG2W_Protocol_FactionBoss _emG2W_Protocol_FactionBoss_MAX = G2W_FactionBoss_UpdateHurt;
const int _emG2W_Protocol_FactionBoss_ARRAYSIZE = _emG2W_Protocol_FactionBoss_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_FactionBoss_descriptor();
inline const ::std::string& _emG2W_Protocol_FactionBoss_Name(_emG2W_Protocol_FactionBoss value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emG2W_Protocol_FactionBoss_descriptor(), value);
}
inline bool _emG2W_Protocol_FactionBoss_Parse(
    const ::std::string& name, _emG2W_Protocol_FactionBoss* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emG2W_Protocol_FactionBoss>(
    _emG2W_Protocol_FactionBoss_descriptor(), name, value);
}
enum _emG2W_Protocal_GM {
  G2W_Protocal_GMCmd = 0
};
bool _emG2W_Protocal_GM_IsValid(int value);
const _emG2W_Protocal_GM _emG2W_Protocal_GM_MIN = G2W_Protocal_GMCmd;
const _emG2W_Protocal_GM _emG2W_Protocal_GM_MAX = G2W_Protocal_GMCmd;
const int _emG2W_Protocal_GM_ARRAYSIZE = _emG2W_Protocal_GM_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emG2W_Protocal_GM_descriptor();
inline const ::std::string& _emG2W_Protocal_GM_Name(_emG2W_Protocal_GM value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emG2W_Protocal_GM_descriptor(), value);
}
inline bool _emG2W_Protocal_GM_Parse(
    const ::std::string& name, _emG2W_Protocal_GM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emG2W_Protocal_GM>(
    _emG2W_Protocal_GM_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPW2G_Protocol>() {
  return _emPW2G_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2G_Protocol_SinglePvp>() {
  return _emW2G_Protocol_SinglePvp_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2G_Corps_Protocol>() {
  return _emW2G_Corps_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2G_PvpWar_Protocol>() {
  return _emW2G_PvpWar_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2G_Protocol_Common>() {
  return _emW2G_Protocol_Common_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2G_Protocol_Start>() {
  return _emW2G_Protocol_Start_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2G_Protocol_Player>() {
  return _emW2G_Protocol_Player_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2G_Protocol_Scene>() {
  return _emW2G_Protocol_Scene_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2G_Protocol_Team>() {
  return _emW2G_Protocol_Team_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2G_Protocol_Copymap>() {
  return _emW2G_Protocol_Copymap_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2G_Protocol_DartCar>() {
  return _emW2G_Protocol_DartCar_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2G_Manor_Protocol>() {
  return _emW2G_Manor_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPG2W_Protocol>() {
  return _emPG2W_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emG2W_Protocol_SinglePvp>() {
  return _emG2W_Protocol_SinglePvp_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emG2W_Protocol_PvpWar>() {
  return _emG2W_Protocol_PvpWar_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emG2W_Protocol_Common>() {
  return _emG2W_Protocol_Common_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emG2W_Protocol_Player>() {
  return _emG2W_Protocol_Player_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emG2W_Protocol_Scene>() {
  return _emG2W_Protocol_Scene_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emG2W_Protocol_Team>() {
  return _emG2W_Protocol_Team_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emG2W_Protocol_Copymap>() {
  return _emG2W_Protocol_Copymap_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emG2W_Protocol_DartCar>() {
  return _emG2W_Protocol_DartCar_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emG2W_Protocol_FactionBoss>() {
  return _emG2W_Protocol_FactionBoss_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emG2W_Protocal_GM>() {
  return _emG2W_Protocal_GM_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WAGProtocol_2eproto__INCLUDED
