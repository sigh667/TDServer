// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WARMsg.proto

#ifndef PROTOBUF_WARMsg_2eproto__INCLUDED
#define PROTOBUF_WARMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "PlayerStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WARMsg_2eproto();
void protobuf_AssignDesc_WARMsg_2eproto();
void protobuf_ShutdownFile_WARMsg_2eproto();

class PBW2RRegisterPlayerAsk;
class PBR2WRegisterPlayerAck;
class PB2WRegisterCheckPlayerNameAsk;
class PB2WRegisterCheckPlayerNameAck;

// ===================================================================

class PBW2RRegisterPlayerAsk : public ::google::protobuf::Message {
 public:
  PBW2RRegisterPlayerAsk();
  virtual ~PBW2RRegisterPlayerAsk();
  
  PBW2RRegisterPlayerAsk(const PBW2RRegisterPlayerAsk& from);
  
  inline PBW2RRegisterPlayerAsk& operator=(const PBW2RRegisterPlayerAsk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBW2RRegisterPlayerAsk& default_instance();
  
  void Swap(PBW2RRegisterPlayerAsk* other);
  
  // implements Message ----------------------------------------------
  
  PBW2RRegisterPlayerAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBW2RRegisterPlayerAsk& from);
  void MergeFrom(const PBW2RRegisterPlayerAsk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBPlayerDisplay playerdisplay = 1;
  inline bool has_playerdisplay() const;
  inline void clear_playerdisplay();
  static const int kPlayerdisplayFieldNumber = 1;
  inline const ::PBPlayerDisplay& playerdisplay() const;
  inline ::PBPlayerDisplay* mutable_playerdisplay();
  inline ::PBPlayerDisplay* release_playerdisplay();
  
  // optional uint32 accountid = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 2;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);
  
  // repeated uint32 worldid = 3;
  inline int worldid_size() const;
  inline void clear_worldid();
  static const int kWorldidFieldNumber = 3;
  inline ::google::protobuf::uint32 worldid(int index) const;
  inline void set_worldid(int index, ::google::protobuf::uint32 value);
  inline void add_worldid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      worldid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_worldid();
  
  // @@protoc_insertion_point(class_scope:PBW2RRegisterPlayerAsk)
 private:
  inline void set_has_playerdisplay();
  inline void clear_has_playerdisplay();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBPlayerDisplay* playerdisplay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > worldid_;
  ::google::protobuf::uint32 accountid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_WARMsg_2eproto();
  friend void protobuf_AssignDesc_WARMsg_2eproto();
  friend void protobuf_ShutdownFile_WARMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBW2RRegisterPlayerAsk* default_instance_;
};
// -------------------------------------------------------------------

class PBR2WRegisterPlayerAck : public ::google::protobuf::Message {
 public:
  PBR2WRegisterPlayerAck();
  virtual ~PBR2WRegisterPlayerAck();
  
  PBR2WRegisterPlayerAck(const PBR2WRegisterPlayerAck& from);
  
  inline PBR2WRegisterPlayerAck& operator=(const PBR2WRegisterPlayerAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBR2WRegisterPlayerAck& default_instance();
  
  void Swap(PBR2WRegisterPlayerAck* other);
  
  // implements Message ----------------------------------------------
  
  PBR2WRegisterPlayerAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBR2WRegisterPlayerAck& from);
  void MergeFrom(const PBR2WRegisterPlayerAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBPlayerDisplay playerdisplay = 1;
  inline bool has_playerdisplay() const;
  inline void clear_playerdisplay();
  static const int kPlayerdisplayFieldNumber = 1;
  inline const ::PBPlayerDisplay& playerdisplay() const;
  inline ::PBPlayerDisplay* mutable_playerdisplay();
  inline ::PBPlayerDisplay* release_playerdisplay();
  
  // @@protoc_insertion_point(class_scope:PBR2WRegisterPlayerAck)
 private:
  inline void set_has_playerdisplay();
  inline void clear_has_playerdisplay();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBPlayerDisplay* playerdisplay_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_WARMsg_2eproto();
  friend void protobuf_AssignDesc_WARMsg_2eproto();
  friend void protobuf_ShutdownFile_WARMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PBR2WRegisterPlayerAck* default_instance_;
};
// -------------------------------------------------------------------

class PB2WRegisterCheckPlayerNameAsk : public ::google::protobuf::Message {
 public:
  PB2WRegisterCheckPlayerNameAsk();
  virtual ~PB2WRegisterCheckPlayerNameAsk();
  
  PB2WRegisterCheckPlayerNameAsk(const PB2WRegisterCheckPlayerNameAsk& from);
  
  inline PB2WRegisterCheckPlayerNameAsk& operator=(const PB2WRegisterCheckPlayerNameAsk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB2WRegisterCheckPlayerNameAsk& default_instance();
  
  void Swap(PB2WRegisterCheckPlayerNameAsk* other);
  
  // implements Message ----------------------------------------------
  
  PB2WRegisterCheckPlayerNameAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB2WRegisterCheckPlayerNameAsk& from);
  void MergeFrom(const PB2WRegisterCheckPlayerNameAsk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated uint32 worldid = 2;
  inline int worldid_size() const;
  inline void clear_worldid();
  static const int kWorldidFieldNumber = 2;
  inline ::google::protobuf::uint32 worldid(int index) const;
  inline void set_worldid(int index, ::google::protobuf::uint32 value);
  inline void add_worldid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      worldid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_worldid();
  
  // @@protoc_insertion_point(class_scope:PB2WRegisterCheckPlayerNameAsk)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > worldid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_WARMsg_2eproto();
  friend void protobuf_AssignDesc_WARMsg_2eproto();
  friend void protobuf_ShutdownFile_WARMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PB2WRegisterCheckPlayerNameAsk* default_instance_;
};
// -------------------------------------------------------------------

class PB2WRegisterCheckPlayerNameAck : public ::google::protobuf::Message {
 public:
  PB2WRegisterCheckPlayerNameAck();
  virtual ~PB2WRegisterCheckPlayerNameAck();
  
  PB2WRegisterCheckPlayerNameAck(const PB2WRegisterCheckPlayerNameAck& from);
  
  inline PB2WRegisterCheckPlayerNameAck& operator=(const PB2WRegisterCheckPlayerNameAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB2WRegisterCheckPlayerNameAck& default_instance();
  
  void Swap(PB2WRegisterCheckPlayerNameAck* other);
  
  // implements Message ----------------------------------------------
  
  PB2WRegisterCheckPlayerNameAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB2WRegisterCheckPlayerNameAck& from);
  void MergeFrom(const PB2WRegisterCheckPlayerNameAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:PB2WRegisterCheckPlayerNameAck)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 ret_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_WARMsg_2eproto();
  friend void protobuf_AssignDesc_WARMsg_2eproto();
  friend void protobuf_ShutdownFile_WARMsg_2eproto();
  
  void InitAsDefaultInstance();
  static PB2WRegisterCheckPlayerNameAck* default_instance_;
};
// ===================================================================


// ===================================================================

// PBW2RRegisterPlayerAsk

// optional .PBPlayerDisplay playerdisplay = 1;
inline bool PBW2RRegisterPlayerAsk::has_playerdisplay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBW2RRegisterPlayerAsk::set_has_playerdisplay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBW2RRegisterPlayerAsk::clear_has_playerdisplay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBW2RRegisterPlayerAsk::clear_playerdisplay() {
  if (playerdisplay_ != NULL) playerdisplay_->::PBPlayerDisplay::Clear();
  clear_has_playerdisplay();
}
inline const ::PBPlayerDisplay& PBW2RRegisterPlayerAsk::playerdisplay() const {
  return playerdisplay_ != NULL ? *playerdisplay_ : *default_instance_->playerdisplay_;
}
inline ::PBPlayerDisplay* PBW2RRegisterPlayerAsk::mutable_playerdisplay() {
  set_has_playerdisplay();
  if (playerdisplay_ == NULL) playerdisplay_ = new ::PBPlayerDisplay;
  return playerdisplay_;
}
inline ::PBPlayerDisplay* PBW2RRegisterPlayerAsk::release_playerdisplay() {
  clear_has_playerdisplay();
  ::PBPlayerDisplay* temp = playerdisplay_;
  playerdisplay_ = NULL;
  return temp;
}

// optional uint32 accountid = 2;
inline bool PBW2RRegisterPlayerAsk::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBW2RRegisterPlayerAsk::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBW2RRegisterPlayerAsk::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBW2RRegisterPlayerAsk::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 PBW2RRegisterPlayerAsk::accountid() const {
  return accountid_;
}
inline void PBW2RRegisterPlayerAsk::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// repeated uint32 worldid = 3;
inline int PBW2RRegisterPlayerAsk::worldid_size() const {
  return worldid_.size();
}
inline void PBW2RRegisterPlayerAsk::clear_worldid() {
  worldid_.Clear();
}
inline ::google::protobuf::uint32 PBW2RRegisterPlayerAsk::worldid(int index) const {
  return worldid_.Get(index);
}
inline void PBW2RRegisterPlayerAsk::set_worldid(int index, ::google::protobuf::uint32 value) {
  worldid_.Set(index, value);
}
inline void PBW2RRegisterPlayerAsk::add_worldid(::google::protobuf::uint32 value) {
  worldid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PBW2RRegisterPlayerAsk::worldid() const {
  return worldid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PBW2RRegisterPlayerAsk::mutable_worldid() {
  return &worldid_;
}

// -------------------------------------------------------------------

// PBR2WRegisterPlayerAck

// optional .PBPlayerDisplay playerdisplay = 1;
inline bool PBR2WRegisterPlayerAck::has_playerdisplay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBR2WRegisterPlayerAck::set_has_playerdisplay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBR2WRegisterPlayerAck::clear_has_playerdisplay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBR2WRegisterPlayerAck::clear_playerdisplay() {
  if (playerdisplay_ != NULL) playerdisplay_->::PBPlayerDisplay::Clear();
  clear_has_playerdisplay();
}
inline const ::PBPlayerDisplay& PBR2WRegisterPlayerAck::playerdisplay() const {
  return playerdisplay_ != NULL ? *playerdisplay_ : *default_instance_->playerdisplay_;
}
inline ::PBPlayerDisplay* PBR2WRegisterPlayerAck::mutable_playerdisplay() {
  set_has_playerdisplay();
  if (playerdisplay_ == NULL) playerdisplay_ = new ::PBPlayerDisplay;
  return playerdisplay_;
}
inline ::PBPlayerDisplay* PBR2WRegisterPlayerAck::release_playerdisplay() {
  clear_has_playerdisplay();
  ::PBPlayerDisplay* temp = playerdisplay_;
  playerdisplay_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PB2WRegisterCheckPlayerNameAsk

// optional string name = 1;
inline bool PB2WRegisterCheckPlayerNameAsk::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB2WRegisterCheckPlayerNameAsk::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB2WRegisterCheckPlayerNameAsk::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB2WRegisterCheckPlayerNameAsk::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PB2WRegisterCheckPlayerNameAsk::name() const {
  return *name_;
}
inline void PB2WRegisterCheckPlayerNameAsk::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PB2WRegisterCheckPlayerNameAsk::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PB2WRegisterCheckPlayerNameAsk::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PB2WRegisterCheckPlayerNameAsk::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PB2WRegisterCheckPlayerNameAsk::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated uint32 worldid = 2;
inline int PB2WRegisterCheckPlayerNameAsk::worldid_size() const {
  return worldid_.size();
}
inline void PB2WRegisterCheckPlayerNameAsk::clear_worldid() {
  worldid_.Clear();
}
inline ::google::protobuf::uint32 PB2WRegisterCheckPlayerNameAsk::worldid(int index) const {
  return worldid_.Get(index);
}
inline void PB2WRegisterCheckPlayerNameAsk::set_worldid(int index, ::google::protobuf::uint32 value) {
  worldid_.Set(index, value);
}
inline void PB2WRegisterCheckPlayerNameAsk::add_worldid(::google::protobuf::uint32 value) {
  worldid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PB2WRegisterCheckPlayerNameAsk::worldid() const {
  return worldid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PB2WRegisterCheckPlayerNameAsk::mutable_worldid() {
  return &worldid_;
}

// -------------------------------------------------------------------

// PB2WRegisterCheckPlayerNameAck

// optional int32 ret = 1;
inline bool PB2WRegisterCheckPlayerNameAck::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB2WRegisterCheckPlayerNameAck::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB2WRegisterCheckPlayerNameAck::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB2WRegisterCheckPlayerNameAck::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 PB2WRegisterCheckPlayerNameAck::ret() const {
  return ret_;
}
inline void PB2WRegisterCheckPlayerNameAck::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional string name = 2;
inline bool PB2WRegisterCheckPlayerNameAck::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB2WRegisterCheckPlayerNameAck::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB2WRegisterCheckPlayerNameAck::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB2WRegisterCheckPlayerNameAck::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PB2WRegisterCheckPlayerNameAck::name() const {
  return *name_;
}
inline void PB2WRegisterCheckPlayerNameAck::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PB2WRegisterCheckPlayerNameAck::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PB2WRegisterCheckPlayerNameAck::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PB2WRegisterCheckPlayerNameAck::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PB2WRegisterCheckPlayerNameAck::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WARMsg_2eproto__INCLUDED
