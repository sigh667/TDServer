// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgResult.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* _emResultMove_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultSkill_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultBuff_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultItem_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultPickup_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultFaction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultMail_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultQuest_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultStore_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultPrize_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultCopymap_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultTrade_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultSaleMoney_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultAuction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultCommon_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultTopList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultFriend_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultDip_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultWentao_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultWulue_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultBingfu_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultTeam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultDropItem_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultIdentity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultWuxue_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultFly_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultDart_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultFactionBoss_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultTitle_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultFashion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultEquipColumn_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultClimbTower_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultPvpWar_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultQuestion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultGwTrain_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultWorldBoss_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultActivity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultRelive_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultCorps_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultWeal_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultManor_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emResultSinglePvp_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgResult_2eproto() {
  protobuf_AddDesc_MsgResult_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgResult.proto");
  GOOGLE_CHECK(file != NULL);
  _emResultMove_descriptor_ = file->enum_type(0);
  _emResultSkill_descriptor_ = file->enum_type(1);
  _emResultBuff_descriptor_ = file->enum_type(2);
  _emResultItem_descriptor_ = file->enum_type(3);
  _emResultPickup_descriptor_ = file->enum_type(4);
  _emResultFaction_descriptor_ = file->enum_type(5);
  _emResultMail_descriptor_ = file->enum_type(6);
  _emResultQuest_descriptor_ = file->enum_type(7);
  _emResultStore_descriptor_ = file->enum_type(8);
  _emResultPrize_descriptor_ = file->enum_type(9);
  _emResultCopymap_descriptor_ = file->enum_type(10);
  _emResultTrade_descriptor_ = file->enum_type(11);
  _emResultSaleMoney_descriptor_ = file->enum_type(12);
  _emResultAuction_descriptor_ = file->enum_type(13);
  _emResultCommon_descriptor_ = file->enum_type(14);
  _emResultTopList_descriptor_ = file->enum_type(15);
  _emResultFriend_descriptor_ = file->enum_type(16);
  _emResultDip_descriptor_ = file->enum_type(17);
  _emResultWentao_descriptor_ = file->enum_type(18);
  _emResultWulue_descriptor_ = file->enum_type(19);
  _emResultBingfu_descriptor_ = file->enum_type(20);
  _emResultTeam_descriptor_ = file->enum_type(21);
  _emResultDropItem_descriptor_ = file->enum_type(22);
  _emResultIdentity_descriptor_ = file->enum_type(23);
  _emResultWuxue_descriptor_ = file->enum_type(24);
  _emResultFly_descriptor_ = file->enum_type(25);
  _emResultDart_descriptor_ = file->enum_type(26);
  _emResultFactionBoss_descriptor_ = file->enum_type(27);
  _emResultTitle_descriptor_ = file->enum_type(28);
  _emResultFashion_descriptor_ = file->enum_type(29);
  _emResultEquipColumn_descriptor_ = file->enum_type(30);
  _emResultClimbTower_descriptor_ = file->enum_type(31);
  _emResultPvpWar_descriptor_ = file->enum_type(32);
  _emResultQuestion_descriptor_ = file->enum_type(33);
  _emResultGwTrain_descriptor_ = file->enum_type(34);
  _emResultWorldBoss_descriptor_ = file->enum_type(35);
  _emResultActivity_descriptor_ = file->enum_type(36);
  _emResultRelive_descriptor_ = file->enum_type(37);
  _emResultCorps_descriptor_ = file->enum_type(38);
  _emResultWeal_descriptor_ = file->enum_type(39);
  _emResultManor_descriptor_ = file->enum_type(40);
  _emResultSinglePvp_descriptor_ = file->enum_type(41);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgResult_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_MsgResult_2eproto() {
}

void protobuf_AddDesc_MsgResult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MsgResult.proto*{\n\r_emResultMove\022\030\n\024R_"
    "ResultMove_Succeed\020\000\022\025\n\021R_ResultMove_Fai"
    "l\020\001\022\033\n\027R_ResultMove_StateLimit\020\002\022\034\n\030R_Re"
    "sultMove_NotPassable\020\003*\270\003\n\016_emResultSkil"
    "l\022\031\n\025R_ResultSkill_Succeed\020\000\022\026\n\022R_Result"
    "Skill_Fail\020\001\022\031\n\025R_ResultSkill_NoSkill\020\002\022"
    "\033\n\027R_ResultSkill_ActForbid\020\003\022\031\n\025R_Result"
    "Skill_Cooling\020\004\022\031\n\025R_ResultSkill_Consume"
    "\020\005\022\026\n\022R_ResultSkill_Part\020\006\022\031\n\025R_ResultSk"
    "ill_Singing\020\007\022\030\n\024R_ResultSkill_Region\020\010\022"
    "\033\n\027R_ResultSkill_Colletion\020\t\022 \n\034R_Result"
    "Skill_ArrestNoPlayer\020\n\022\032\n\026R_ResultSkill_"
    "NoActive\020\013\022\030\n\024R_ResultSkill_NoThug\020\014\022!\n\035"
    "R_ResultSkill_Colletion_Count\020\r\022 \n\034R_Res"
    "ultSkill_Colletion_Time\020\016*Y\n\r_emResultBu"
    "ff\022\030\n\024R_ResultBuff_Succeed\020\000\022\025\n\021R_Result"
    "Buff_Fail\020\001\022\027\n\023R_ResultBuff_NoBuff\020\002*\247\013\n"
    "\r_emResultItem\022\030\n\024R_ResultItem_Succeed\020\000"
    "\022\025\n\021R_ResultItem_Fail\020\001\022\027\n\023R_ResultItem_"
    "NoItem\020\002\022\034\n\030R_ResultItem_CannotEquip\020\003\022\034"
    "\n\030R_ResultItem_CannotSplit\020\004\022\032\n\026R_Result"
    "Item_CannotUse\020\005\022\032\n\026R_ResultItem_NotEnou"
    "gh\020\006\022\031\n\025R_ResultItem_MaxCount\020\007\022\035\n\031R_Res"
    "ultItem_PreCondition\020\010\022\023\n\017R_ResultItem_C"
    "D\020\t\022\032\n\026R_ResultItem_NeedMoney\020\n\022\034\n\030R_Res"
    "ultItem_NoTimeLimit\020\013\022\037\n\033R_ResultItem_En"
    "hanceExpFull\020\014\022\035\n\031R_ResultItem_ForgeExpF"
    "ull\020\r\022 \n\034R_ResultItem_InheritNeedSame\020\016\022"
    "\034\n\030R_ResultItem_InheritOnce\020\017\022\035\n\031R_Resul"
    "tItem_MakeNeedItem\020\020\022\036\n\032R_ResultItem_Mak"
    "eNeedLucky\020\021\022 \n\034R_ResultItem_MakeNeedSpe"
    "cial\020\022\022!\n\035R_ResultItem_MountingNoChange\020"
    "\023\022\031\n\025R_ResultItem_Mounting\020\024\022\033\n\027R_Result"
    "Item_unMounting\020\025\022 \n\034R_ResultItem_Fighti"
    "ngNoMount\020\026\022\032\n\026R_ResultItem_DeadNoUse\020\027\022"
    "\033\n\027R_ResultItem_ExpendFull\020\030\022\036\n\032R_Result"
    "Item_ParamNumError\020\031\022\036\n\032R_ResultItem_Reg"
    "ionNoMount\020\032\022\037\n\033R_ResultItem_ControlNoMo"
    "unt\020\033\022#\n\037R_ResultItem_DartRobCannotEquip"
    "\020\034\022\032\n\026R_ResultItem_Level_Low\020\035\022\036\n\032R_Resu"
    "ltItem_NoDayUseCount\020\036\022\037\n\033R_ResultItem_N"
    "oWeekUseCount\020\037\022 \n\034R_ResultItem_NoMonthU"
    "seCount\020 \022\036\n\032R_ResultItem_ExpBingfuNoUp\020"
    "!\022!\n\035R_ResultItem_BingfuDayExpFull\020\"\022!\n\035"
    "R_ResultItem_ItemNoInEquipMap\020#\022\"\n\036R_Res"
    "ultItem_NotEnoughCompound\020$\022\034\n\030R_ResultI"
    "tem_UseNumError\020%\022\032\n\026R_ResultItem_NotUse"
    "rHP\020&\022\034\n\030R_ResultItem_HaveFashion\020\'\022\031\n\025R"
    "_ResultItem_NoMakeId\020(\022\031\n\025R_ResultItem_N"
    "oVigour\020)\022\032\n\026R_ResultItem_NoSkilled\020*\022\037\n"
    "\033R_ResultItem_OEM_Not_Enough\020+\022#\n\037R_Resu"
    "ltItem_OEM_Not_Enough_Fee\020,\022\037\n\033R_ResultI"
    "tem_OEM_Not_Online\020-\022\030\n\024R_ResultItem_Not"
    "Sell\020.*F\n\017_emResultPickup\022\032\n\026R_ResultPic"
    "kup_Succeed\020\000\022\027\n\023R_ResultPickup_Fail\020\001*\330"
    "\026\n\020_emResultFaction\022\033\n\027R_ResultFaction_S"
    "ucceed\020\000\022\030\n\024R_ResultFaction_Fail\020\001\022\033\n\027R_"
    "ResultFaction_DBError\020\002\022\031\n\025R_ResultFacti"
    "on_Money\020\003\022\036\n\032R_ResultFaction_NameLength"
    "\020\004\022 \n\034R_ResultFaction_BannerLength\020\005\022%\n!"
    "R_ResultFaction_DeclarationLength\020\006\022\033\n\027R"
    "_ResultFaction_BadWord\020\007\022\035\n\031R_ResultFact"
    "ion_BannerDup\020\010\022\033\n\027R_ResultFaction_NameD"
    "up\020\t\022\033\n\027R_ResultFaction_InOther\020\n\022\036\n\032R_R"
    "esultFaction_YouInOther\020\013\022\030\n\024R_ResultFac"
    "tion_Full\020\014\022\036\n\032R_ResultFaction_Permissio"
    "n\020\r\022\033\n\027R_ResultFaction_JobFull\020\016\022\036\n\032R_Re"
    "sultFaction_OtherNotIn\020\017\022\034\n\030R_ResultFact"
    "ion_YouNotIn\020\020\022\034\n\030R_ResultFaction_NotFou"
    "nd\020\021\022\036\n\032R_ResultFaction_NotInApply\020\022\022 \n\034"
    "R_ResultFaction_ApplyTooMany\020\023\022\033\n\027R_Resu"
    "ltFaction_ApplyCD\020\024\022\033\n\027R_ResultFaction_L"
    "eaveCD\020\025\022#\n\037R_ResultFaction_OtherLevelLi"
    "mit\020\026\022#\n\037R_ResultFaction_OtherNotInUnion"
    "\020\027\022 \n\034R_ResultFaction_OtherLeaveCD\020\030\022!\n\035"
    "R_ResultFaction_OtherNotValid\020\031\022$\n R_Res"
    "ultFaction_IllegalCharacter\020\032\022\036\n\032R_Resul"
    "tFaction_LeaderQuit\020\033\022\"\n\036R_ResultFaction"
    "_AlreadyInApply\020\034\022!\n\035R_ResultFaction_You"
    "LevelLimit\020\035\022!\n\035R_ResultFaction_CannotOp"
    "tSelf\020\036\022\"\n\036R_ResultFaction_OtherNotOnlin"
    "e\020\037\022\035\n\031R_ResultFaction_HasInvite\020 \022\036\n\032R_"
    "ResultFaction_InCreating\020!\022\036\n\032R_ResultFa"
    "ction_WrongCorps\020\"\022\034\n\030R_ResultFaction_Le"
    "arnMax\020#\022\036\n\032R_ResultFaction_NeedSliver\020$"
    "\022%\n!R_ResultFaction_LearnContribution\020%\022"
    "#\n\037R_ResultFaction_LearnSkillLevel\020&\022\036\n\032"
    "R_ResultFaction_DevelopMax\020\'\022\'\n#R_Result"
    "Faction_DevelopFactionLevel\020(\022$\n R_Resul"
    "tFaction_DevelopNeedStone\020)\022%\n!R_ResultF"
    "action_DevelopNeedSliver\020*\022\"\n\036R_ResultFa"
    "ction_AlreadyDevelop\020+\022 \n\034R_ResultFactio"
    "n_DevelopCount\020,\022\036\n\032R_ResultFaction_Stud"
    "yCount\020-\022 \n\034R_ResultFaction_StudyNotOpen"
    "\020.\022$\n R_ResultFaction_StudyAlreadyHave\020/"
    "\022\"\n\036R_ResultFaction_StudyNeedStone\0200\022#\n\037"
    "R_ResultFaction_StudyNeedSliver\0201\022$\n R_R"
    "esultFaction_StudyMoneyChange\0202\022$\n R_Res"
    "ultFaction_DonateMoneyCount\0203\022%\n!R_Resul"
    "tFaction_DonateMoneySliver\0204\022&\n\"R_Result"
    "Faction_DM_ContributionMax\0205\022!\n\035R_Result"
    "Faction_Task_NeedItem\0206\022%\n!R_ResultFacti"
    "on_SetEliteMaxMember\0207\022&\n\"R_ResultFactio"
    "n_SetBeautyMaxMember\0208\022%\n!R_ResultFactio"
    "n_LeaderOfflineTime\0209\022\'\n#R_ResultFaction"
    "_DeputyImpeachLeader\020:\022\036\n\032R_ResultFactio"
    "n_Impeaching\020;\022\"\n\036R_ResultFaction_DepotN"
    "eedMoney\020<\022!\n\035R_ResultFaction_DepotNeedI"
    "tem\020=\022 \n\034R_ResultFaction_CorpsBoomMax\020>\022"
    "\'\n#R_ResultFaction_DW_NeedContribution\020\?"
    "\022\"\n\036R_ResultFaction_DW_AlreadyHave\020@\022 \n\034"
    "R_ResultFaction_DW_NotInTime\020A\022\"\n\036R_Resu"
    "ltFaction_DW_NotInRegion\020B\022\035\n\031R_ResultFa"
    "ction_NewMember\020C\022\036\n\032R_ResultFaction_Tar"
    "getFull\020D\022\035\n\031R_ResultFaction_TaskCount\020E"
    "\022&\n\"R_ResultFaction_SetBeautyNewMember\020F"
    "\022#\n\037R_ResultFaction_SetBeautyLeader\020G\022!\n"
    "\035R_ResultFaction_DeputyJobFull\020H\022 \n\034R_Re"
    "sultFaction_ElderJobFull\020I\022\"\n\036R_ResultFa"
    "ction_ManagerJobFull\020J\022!\n\035R_ResultFactio"
    "n_PeopleJobFull\020K\022#\n\037R_ResultFaction_Nam"
    "eIllegalChar\020L\022\037\n\033R_ResultFaction_NameBa"
    "dWord\020M\022%\n!R_ResultFaction_BannerIllegal"
    "Char\020N\022!\n\035R_ResultFaction_BannerBadWord\020"
    "O\022%\n!R_ResultFaction_DeclarIllegalChar\020P"
    "\022!\n\035R_ResultFaction_DeclarBadWord\020Q\022\035\n\031R"
    "_ResultFaction_DW_DayMax\020R\022%\n!R_ResultFa"
    "ction_ForbitSpeamMaxNum\020S*w\n\r_emResultMa"
    "il\022\030\n\024R_ResultMail_Succeed\020\000\022\025\n\021R_Result"
    "Mail_Fail\020\001\022\030\n\024R_ResultMail_BagFull\020\002\022\033\n"
    "\027R_ResultMail_MoneyLimit\020\003*\257\002\n\016_emResult"
    "Quest\022\031\n\025R_ResultQuest_Succeed\020\000\022\026\n\022R_Re"
    "sultQuest_Fail\020\001\022\031\n\025R_ResultQuest_NoQues"
    "t\020\002\022\030\n\024R_ResultQuest_NoItem\020\003\022\032\n\026R_Resul"
    "tQuest_Accepted\020\004\022\031\n\025R_ResultQuest_NoRea"
    "ch\020\005\022 \n\034R_ResultQuest_NoClientUpdate\020\006\022\036"
    "\n\032R_ResultQuest_PreCondition\020\007\022\032\n\026R_Resu"
    "ltQuest_NoGiveUp\020\010\022 \n\034R_ResultQuest_Mast"
    "erComplete\020\t*\214\003\n\016_emResultStore\022\031\n\025R_Res"
    "ultStore_Succeed\020\000\022\026\n\022R_ResultStore_Fail"
    "\020\001\022#\n\037R_ResultStore_MismatchCondition\020\002\022"
    "\037\n\033R_ResultStore_NeedMoreMoney\020\003\022\033\n\027R_Re"
    "sultStore_OverLimit\020\004\022\025\n\021R_ResultStore_O"
    "ff\020\005\022\031\n\025R_ResultStore_Invalid\020\006\022\036\n\032R_Res"
    "ultStore_NeedMoreCash\020\007\022\"\n\036R_ResultStore"
    "_NeedMoreBindCash\020\010\022\032\n\026R_ResultStore_Add"
    "Momey\020\t\022\033\n\027R_ResultStore_MomeyType\020\n\022\032\n\026"
    "R_ResultStore_FriendID\020\013\022\031\n\025R_ResultStor"
    "e_BagFull\020\014*^\n\016_emResultPrize\022\031\n\025R_Resul"
    "tPrize_Succeed\020\000\022\026\n\022R_ResultPrize_Fail\020\001"
    "\022\031\n\025R_ResultPrize_NoPrize\020\002*\227\n\n\020_emResul"
    "tCopymap\022\033\n\027R_ResultCopymap_Succeed\020\000\022\030\n"
    "\024R_ResultCopymap_Fail\020\001\022#\n\037R_ResultCopym"
    "ap_Create_NeedItem\020\002\022\'\n#R_ResultCopymap_"
    "Create_PreCondition\020\003\022!\n\035R_ResultCopymap"
    "_Create_NoTime\020\004\022 \n\034R_ResultCopymap_Crea"
    "te_Count\020\005\022%\n!R_ResultCopymap_Create_Nee"
    "dLeader\020\006\022#\n\037R_ResultCopymap_Create_Need"
    "Team\020\007\022%\n!R_ResultCopymap_Create_SceneCl"
    "ose\020\010\022(\n$R_ResultCopymap_Create_TeamInCo"
    "pymap\020\t\022$\n R_ResultCopymap_Create_InCopy"
    "map\020\n\022\'\n#R_ResultCopymap_Invite_NotInCop"
    "ymap\020\013\022$\n R_ResultCopymap_Invite_EnterTy"
    "pe\020\014\022(\n$R_ResultCopymap_Invite_NotTeamMe"
    "mber\020\r\022$\n R_ResultCopymap_Invite_NotOnli"
    "ne\020\016\022+\n\'R_ResultCopymap_Invite_TeamNotIn"
    "Copymap\020\017\022*\n&R_ResultCopymap_AcceptInvit"
    "e_InCopymap\020\020\022*\n&R_ResultCopymap_AcceptI"
    "nvite_EnterType\020\021\022.\n*R_ResultCopymap_Acc"
    "eptInvite_NotTeamMember\020\022\0221\n-R_ResultCop"
    "ymap_AcceptInvite_TeamNotInCopymap\020\023\022%\n!"
    "R_ResultCopymap_AcceptInvite_Full\020\024\022)\n%R"
    "_ResultCopymap_TeamMemberInfo_NoTeam\020\025\022$"
    "\n R_ResultCopymap_Invite_InCopymap\020\026\022\'\n#"
    "R_ResultCopymap_FactionBoss_Cooling\020\027\022+\n"
    "\'R_ResultCopymap_FactionBoss_NeedFaction"
    "\020\030\022\036\n\032R_ResultCopymap_In_Dartcar\020\031\022\036\n\032R_"
    "ResultCopymap_LimitOwner\020\032\022#\n\037R_ResultCo"
    "pymap_MemberNotAround\020\033\022\034\n\030R_ResultCopym"
    "ap_EnterIng\020\034\022#\n\037R_ResultCopymap_Create_"
    "NeedCash\020\035\022*\n&R_ResultCopymap_AcceptInvi"
    "te_CashCount\020\036\022(\n$R_ResultCopymap_Create"
    "_CashCopymapID\020\037\022#\n\037R_ResultCopymap_Unac"
    "iveNotOwner\020\037*\331\007\n\016_emResultTrade\022\031\n\025R_Re"
    "sultTrade_Succeed\020\000\022\026\n\022R_ResultTrade_Fai"
    "l\020\001\022\035\n\031R_ResultTrade_ServerError\020\002\022\031\n\025R_"
    "ResultTrade_NoTrade\020\003\022\031\n\025R_ResultTrade_I"
    "nLock1\020\004\022\031\n\025R_ResultTrade_InLock2\020\005\022\031\n\025R"
    "_ResultTrade_InLock3\020\006\022\031\n\025R_ResultTrade_"
    "InLock4\020\007\022\032\n\026R_ResultTrade_NeedLock\020\010\022 \n"
    "\034R_ResultTrade_AlreadyConfirm\020\t\022\033\n\027R_Res"
    "ultTrade_ItemCount\020\n\022\033\n\027R_ResultTrade_De"
    "lNoItem\020\013\022\033\n\027R_ResultTrade_TradeBusy\020\014\022\037"
    "\n\033R_ResultTrade_ApplyInTrade1\020\r\022\037\n\033R_Res"
    "ultTrade_ApplyInTrade2\020\016\022 \n\034R_ResultTrad"
    "e_TargetOffline1\020\017\022 \n\034R_ResultTrade_Answ"
    "erInTrade1\020\020\022 \n\034R_ResultTrade_AnswerInTr"
    "ade2\020\021\022 \n\034R_ResultTrade_TargetOffline2\020\022"
    "\022\037\n\033R_ResultTrade_AnswerTimeOut\020\023\022\037\n\033R_R"
    "esultTrade_ApplyInBattle\020\024\022 \n\034R_ResultTr"
    "ade_AnswerInBattle\020\025\022\036\n\032R_ResultTrade_ad"
    "dItemCount\020\026\022\035\n\031R_ResultTrade_addItemBin"
    "d\020\027\022\032\n\026R_ResultTrade_setMoney\020\030\022\033\n\027R_Res"
    "ultTrade_NeedLock1\020\031\022 \n\034R_ResultTrade_Ge"
    "tSliverLimit\020\032\022!\n\035R_ResultTrade_GiveSliv"
    "erLimit\020\033\022\032\n\026R_ResultTrade_LockCool\020\034\022\031\n"
    "\025R_ResultTrade_UnLock1\020\035\022\033\n\027R_ResultTrad"
    "e_MaxSliver\020\036\022\032\n\026R_ResultTrade_BagLimit\020"
    "\037*\262\002\n\022_emResultSaleMoney\022\035\n\031R_ResultSale"
    "Money_Succeed\020\000\022\032\n\026R_ResultSaleMoney_Fai"
    "l\020\001\022\034\n\030R_ResultSaleMoney_NoCash\020\002\022\036\n\032R_R"
    "esultSaleMoney_NoSliver\020\003\022\036\n\032R_ResultSal"
    "eMoney_UnitCash\020\004\022\035\n\031R_ResultSaleMoney_N"
    "oOrder\020\005\022\036\n\032R_ResultSaleMoney_AveLimit\020\006"
    "\022!\n\035R_ResultSaleMoney_Salecancel1\020\007\022!\n\035R"
    "_ResultSaleMoney_Salecancel2\020\010*\327\002\n\020_emRe"
    "sultAuction\022\033\n\027R_ResultAuction_Succeed\020\000"
    "\022\030\n\024R_ResultAuction_Fail\020\001\022 \n\034R_ResultAu"
    "ction_CancelLocked\020\002\022\032\n\026R_ResultAuction_"
    "NoItem\020\003\022\032\n\026R_ResultAuction_NoSale\020\004\022\033\n\027"
    "R_ResultAuction_NoCount\020\005\022\034\n\030R_ResultAuc"
    "tion_IsLocked\020\006\022\035\n\031R_ResultAuction_ItemC"
    "ount\020\007\022\034\n\030R_ResultAuction_ItemBind\020\010\022\033\n\027"
    "R_ResultAuction_NeedTax\020\t\022\035\n\031R_ResultAuc"
    "tion_LackMoney\020\n*\200\006\n\017_emResultCommon\022\032\n\026"
    "R_ResultCommon_Succeed\020\000\022\027\n\023R_ResultComm"
    "on_Fail\020\001\022\034\n\030R_ResultCommon_NotOnline\020\002\022"
    "!\n\035R_ResultCommon_NoPreCondition\020\003\022\035\n\031R_"
    "ResultCommon_NoOpenTime\020\004\022#\n\037R_ResultCom"
    "mon_ReliveCountLimit\020\005\022!\n\035R_ResultCommon"
    "_ReliveLackItem\020\006\022 \n\034R_ResultCommon_Prom"
    "otionTime\020\007\022!\n\035R_ResultCommon_PromotionQ"
    "uest\020\010\022!\n\035R_ResultCommon_PromotionLevel\020"
    "\t\022\036\n\032R_ResultCommon_SystemClose\020\n\022%\n!R_R"
    "esultCommon_BattleAttrNotFound\020\013\022%\n!R_Re"
    "sultCommon_Cant_SitDown_Fight\020\014\022\'\n#R_Res"
    "ultCommon_Cant_SitDown_Collect\020\r\022)\n%R_Re"
    "sultCommon_Cant_SitDown_AutoFight\020\016\022%\n!R"
    "_ResultCommon_Cant_SitDown_Mount\020\017\022#\n\037R_"
    "ResultCommon_PromotionNeedExp\020\020\022\"\n\036R_Res"
    "ultCommon_NoRelive_Origin\020\021\022\'\n#R_ResultC"
    "ommon_StrongerReward_Exist\020\022\022+\n\'R_Result"
    "Common_StrongerReward_PowerLess\020\023\022 \n\034R_R"
    "esultCommon_BigWorldLimit\020\024*\203\001\n\020_emResul"
    "tTopList\022\033\n\027R_ResultTopList_Succeed\020\000\022\030\n"
    "\024R_ResultTopList_Fail\020\001\022\034\n\030R_ResultTopLi"
    "st_NoPlayer\020\002\022\032\n\026R_ResultTopList_NoType\020"
    "\003*\301\002\n\017_emResultFriend\022\032\n\026R_ResultFriend_"
    "Succeed\020\000\022\027\n\023R_ResultFriend_Fail\020\001\022\033\n\027R_"
    "ResultFriend_NoPlayer\020\002\022\035\n\031R_ResultFrien"
    "d_ApplyLimit\020\003\022\036\n\032R_ResultFriend_ApplyLi"
    "mit1\020\004\022\036\n\032R_ResultFriend_AnswerLimit\020\005\022\037"
    "\n\033R_ResultFriend_AnswerLimit1\020\006\022\034\n\030R_Res"
    "ultFriend_NoOnline1\020\007\022\034\n\030R_ResultFriend_"
    "NoOnline2\020\010\022 \n\034R_ResultFriend_AnswerTime"
    "Out\020\t*=\n\014_emResultDip\022\027\n\023R_ResultDip_Suc"
    "ceed\020\000\022\024\n\020R_ResultDip_Fail\020\001*\244\010\n\017_emResu"
    "ltWentao\022\032\n\026R_ResultWentao_Succeed\020\000\022\027\n\023"
    "R_ResultWentao_Fail\020\001\022\033\n\027R_ResultWentao_"
    "NoBingFa\020\002\022\033\n\027R_ResultWentao_NoScheme\020\003\022"
    "\036\n\032R_ResultWentao_SchemeLimit\020\004\022\037\n\033R_Res"
    "ultWentao_SchemeBingFa\020\005\022\035\n\031R_ResultWent"
    "ao_HaveBingFa\020\006\022\036\n\032R_ResultWentao_BingFa"
    "Error\020\007\022!\n\035R_ResultWentao_AcitveNeedItem"
    "\020\010\022\037\n\033R_ResultWentao_QianXiuLimit\020\t\022\"\n\036R"
    "_ResultWentao_QianXiuNeedItem\020\n\022\034\n\030R_Res"
    "ultWentao_TuPoLimit\020\013\022\037\n\033R_ResultWentao_"
    "TuPoNeedFull\020\014\022\037\n\033R_ResultWentao_YaoDian"
    "Limit\020\r\022$\n R_ResultWentao_YaoDianNeedExp"
    "end\020\016\022$\n R_ResultWentao_YaoDianNeedActiv"
    "e\020\017\022\033\n\027R_ResultWentao_NoBingFu\020\020\022\"\n\036R_Re"
    "sultWentao_BingFuCondition\020\021\022\035\n\031R_Result"
    "Wentao_HaveBingFu\020\022\022\"\n\036R_ResultWentao_Re"
    "setNeedExpend\020\023\022\037\n\033R_ResultWentao_ResetB"
    "agFull\020\024\022$\n R_ResultWentao_YaoDianPreYao"
    "Dian\020\025\022 \n\034R_ResultWentao_Scheme_NoHole\020\026"
    "\022!\n\035R_ResultWentao_Scheme_HoleCon\020\027\022#\n\037R"
    "_ResultWentao_YaoDian_NoNormal\020\030\022\"\n\036R_Re"
    "sultWentao_BingFu_NoBingFu\020\031\022#\n\037R_Result"
    "Wentao_BingFu_NoYaoDian\020\032\022$\n R_ResultWen"
    "tao_BingFu_PreYaoDian\020\033\022\"\n\036R_ResultWenta"
    "o_YaoDianNeedItem\020\034\022 \n\034R_ResultWentao_Re"
    "setNeedItem\020\035\022$\n R_ResultWentao_YaoDianN"
    "eedBingFu\020\036*\255\002\n\016_emResultWulue\022\031\n\025R_Resu"
    "ltWulue_Succeed\020\000\022\026\n\022R_ResultWulue_Fail\020"
    "\001\022 \n\034R_ResultWulue_NeedPreZhanlue\020\003\022\037\n\033R"
    "_ResultWulue_NeedPreBingfu\020\004\022\"\n\036R_Result"
    "Wulue_NeedPreCondition\020\005\022\"\n\036R_ResultWulu"
    "e_NeedZhanlueLevel\020\006\022 \n\034R_ResultWulue_Bi"
    "ngfuHasUsing\020\007\022\033\n\027R_ResultWulue_NoSetSam"
    "e\020\010\022\036\n\032R_ResultWulue_NeedSameType\020\t*\343\001\n\017"
    "_emResultBingfu\022\032\n\026R_ResultBingfu_Succee"
    "d\020\000\022\027\n\023R_ResultBingfu_Fail\020\001\022\031\n\025R_Result"
    "Bingfu_NoFind\020\002\022#\n\037R_ResultBingfu_NeedPr"
    "eCondition\020\003\022\030\n\024R_ResultBingfu_Using\020\004\022 "
    "\n\034R_ResultBingfu_DayWisdomFull\020\005\022\037\n\033R_Re"
    "sultBingfu_ExpNoUpgrade\020\006*\257\024\n\r_emResultT"
    "eam\022\030\n\024R_ResultTeam_Succeed\020\000\022\025\n\021R_Resul"
    "tTeam_Fail\020\001\022 \n\034R_ResultTeam_Invite_NoPl"
    "ayer\020\002\022 \n\034R_ResultTeam_Invite_HaveTeam\020\003"
    "\022!\n\035R_ResultTeam_Invite_NotLeader\020\004\022\034\n\030R"
    "_ResultTeam_Invite_Full\020\005\022&\n\"R_ResultTea"
    "m_AcceptInvite_NoPlayer\020\006\022&\n\"R_ResultTea"
    "m_AcceptInvite_HaveTeam\020\007\022\"\n\036R_ResultTea"
    "m_AcceptInvite_Full\020\010\022\037\n\033R_ResultTeam_Ap"
    "ply_NoPlayer\020\t\022\037\n\033R_ResultTeam_Apply_Hav"
    "eTeam\020\n\022\035\n\031R_ResultTeam_Apply_NoTeam\020\013\022\033"
    "\n\027R_ResultTeam_Apply_Full\020\014\022%\n!R_ResultT"
    "eam_AcceptApply_HaveTeam\020\r\022%\n!R_ResultTe"
    "am_AcceptApply_NoPlayer\020\016\022#\n\037R_ResultTea"
    "m_AcceptApply_NoTeam\020\017\022&\n\"R_ResultTeam_A"
    "cceptApply_NotLeader\020\020\022!\n\035R_ResultTeam_A"
    "cceptApply_Full\020\021\022\035\n\031R_ResultTeam_Leave_"
    "NoTeam\020\022\022$\n R_ResultTeam_ChangeLeader_No"
    "Team\020\023\022\'\n#R_ResultTeam_ChangeLeader_NotL"
    "eader\020\024\022\'\n#R_ResultTeam_ChangeLeader_Not"
    "Member\020\025\022\'\n#R_ResultTeam_ChangeLeader_No"
    "tOnline\020\026\022\035\n\031R_ResultTeam_Publish_Have\020\027"
    "\022&\n\"R_ResultTeam_Publish_Cancel_NoInfo\020\030"
    "\022&\n\"R_ResultTeam_Publish_Invite_NoInfo\020\031"
    "\022(\n$R_ResultTeam_Publish_Invite_NoPlayer"
    "\020\032\022.\n*R_ResultTeam_Publish_AcceptInvite_"
    "HaveTeam\020\033\022.\n*R_ResultTeam_Publish_Accep"
    "tInvite_NoPlayer\020\034\022*\n&R_ResultTeam_Publi"
    "sh_AcceptInvite_Full\020\035\022\034\n\030R_ResultTeam_K"
    "ick_NoTeam\020\036\022\037\n\033R_ResultTeam_Kick_NotLea"
    "der\020\037\022\037\n\033R_ResultTeam_Kick_NotMember\020 \022\034"
    "\n\030R_ResultTeam_Kick_Voting\020!\022 \n\034R_Result"
    "Team_KickVote_NoTeam\020\"\022#\n\037R_ResultTeam_K"
    "ickVote_NotMember\020#\022#\n\037R_ResultTeam_Kick"
    "Vote_NotVoting\020$\022#\n\037R_ResultTeam_KickVot"
    "e_NotTarget\020%\022 \n\034R_ResultTeam_SetAllot_N"
    "oTeam\020&\022#\n\037R_ResultTeam_SetAllot_NotLead"
    "er\020\'\022 \n\034R_ResultTeam_SetAllot_Voting\020(\022$"
    "\n R_ResultTeam_SetAllotVote_NoTeam\020)\022\'\n#"
    "R_ResultTeam_SetAllotVote_NotVoting\020*\022%\n"
    "!R_ResultTeam_SetAllotVote_NotType\020+\022%\n!"
    "R_ResultTeam_View_TargetNotOnline\020,\022!\n\035R"
    "_ResultTeam_Callup_NotLeader\020-\022 \n\034R_Resu"
    "ltTeam_Callup_CoolTime\020.\022\032\n\026R_ResultTeam"
    "_ArrestIng\020/\022\036\n\032R_ResultTeam_Arrest_NoTe"
    "am\0200\022\032\n\026R_ResultTeam_NotLeader\0201\022\033\n\027R_Re"
    "sultTeam_NeedExpend\0202\022\031\n\025R_ResultTeam_Ne"
    "edItem\0203\022\033\n\027R_ResultTeam_NeedMember\0204\022\035\n"
    "\031R_ResultTeam_NotNpcAround\0205\022!\n\035R_Result"
    "Team_NeedPreCondition\0206\022\035\n\031R_ResultTeam_"
    "NeedIdentity\0207\022\037\n\033R_ResultTeam_FullEnter"
    "Count\0208\022\"\n\036R_ResultTeam_LeaderNoDelArres"
    "t\0209\022\034\n\030R_ResultTeam_NotInArrest\020:\022%\n!R_R"
    "esultTeam_Publish_CopymapCount\020;\022 \n\034R_Re"
    "sultTeam_Create_HaveTeam\020<\022!\n\035R_ResultTe"
    "am_SetTarget_NoTeam\020=\022$\n R_ResultTeam_Se"
    "tTarget_NotLeader\020>\022%\n!R_ResultTeam_Cann"
    "ot_SetJobRequire\020\?\022\035\n\031R_ResultTeam_No_Ap"
    "plicant\020@\022#\n\037R_ResultTeam_Allready_Appli"
    "cant\020A\022%\n!R_ResultTeam_LeaveTeam_NotAllo"
    "wed\020B\022\035\n\031R_ResultTeam_HaveTeamTask\020C\022\033\n\027"
    "R_ResultTeam_NoTeamTask\020D\022\032\n\026R_ResultTea"
    "m_InCopymap\020E\022#\n\037R_ResultTeam_NoComplete"
    "TeamTask\020F\022 \n\034R_ResultTeam_Create_NeedCa"
    "sh\020G\022#\n\037R_ResultTeam_Settarget_NeedCash\020"
    "H\022 \n\034R_ResultTeam_Target_LevelErr\020I*\262\t\n\021"
    "_emResultDropItem\022\034\n\030R_ResultDropItem_Su"
    "cceed\020\000\022\031\n\025R_ResultDropItem_Fail\020\001\022 \n\034R_"
    "ResultDropItem_info_NoDrop\020\002\022\036\n\032R_Result"
    "DropItem_dice_Fail\020\003\022 \n\034R_ResultDropItem"
    "_dice_NoDrop\020\004\022 \n\034R_ResultDropItem_dice_"
    "NoItem\020\005\022\"\n\036R_ResultDropItem_dice_HaveDi"
    "ce\020\006\022#\n\037R_ResultDropItem_dice_HaveOwner\020"
    "\007\022\"\n\036R_ResultDropItem_dice_NotOwner\020\010\022!\n"
    "\035R_ResultDropItem_dice_NoAllot\020\t\022\"\n\036R_Re"
    "sultDropItem_assign_NoDrop\020\n\022\"\n\036R_Result"
    "DropItem_assign_NoItem\020\013\022%\n!R_ResultDrop"
    "Item_assign_HaveOwner\020\014\022$\n R_ResultDropI"
    "tem_assign_NotOwner\020\r\022#\n\037R_ResultDropIte"
    "m_assign_NoAllot\020\016\022#\n\037R_ResultDropItem_a"
    "ssign_NoRight\020\017\022%\n!R_ResultDropItem_assi"
    "gn_NotMember\020\020\022 \n\034R_ResultDropItem_assig"
    "n_Fail\020\021\022\"\n\036R_ResultDropItem_info_NotOwn"
    "er\020\022\022\"\n\036R_ResultDropItem_pickup_NoDrop\020\023"
    "\022$\n R_ResultDropItem_pickup_NotOwner\020\024\022\""
    "\n\036R_ResultDropItem_pickup_NoItem\020\025\022%\n!R_"
    "ResultDropItem_pickup_HaveOwner\020\026\022 \n\034R_R"
    "esultDropItem_pickup_Fail\020\027\022\"\n\036R_ResultD"
    "ropItem_abadon_NoDrop\020\030\022$\n R_ResultDropI"
    "tem_abadon_NotOwner\020\031\022\"\n\036R_ResultDropIte"
    "m_abadon_NoItem\020\032\022%\n!R_ResultDropItem_ab"
    "adon_HaveOwner\020\033\022#\n\037R_ResultDropItem_pic"
    "kall_NoDrop\020\034\022%\n!R_ResultDropItem_pickal"
    "l_NotOwner\020\035\022!\n\035R_ResultDropItem_pickall"
    "_Fail\020\036\022\"\n\036R_ResultDropItem_info_HaveOpe"
    "n\020\037\022#\n\037R_ResultDropItem_info_HaveOther\020 "
    "*\210\004\n\021_emResultIdentity\022\034\n\030R_ResultIdenti"
    "ty_Succeed\020\000\022\031\n\025R_ResultIdentity_Fail\020\001\022"
    "\034\n\030R_ResultIdentity_NoSetID\020\002\022\034\n\030R_Resul"
    "tIdentity_HadOpen\020\003\022%\n!R_ResultIdentity_"
    "NeedPreCondition\020\004\022\037\n\033R_ResultIdentity_N"
    "eedExpend\020\005\022\035\n\031R_ResultIdentity_NeedItem"
    "\020\006\022\036\n\032R_ResultIdentity_SetNoOpen\020\007\022#\n\037R_"
    "ResultIdentity_SetHasIdentity\020\010\022\037\n\033R_Res"
    "ultIdentity_NoIdentity\020\t\022\"\n\036R_ResultIden"
    "tity_ResetMaxCount\020\n\022!\n\035R_ResultIdentity"
    "_ResetCooling\020\013\022\036\n\032R_ResultIdentity_NoSk"
    "illID\020\014\022\"\n\036R_ResultIdentity_SkillMaxLeve"
    "l\020\r\022&\n\"R_ResultIdentity_SkillMaxLevelDif"
    "f\020\016*\277\002\n\016_emResultWuxue\022\031\n\025R_ResultWuxue_"
    "Succeed\020\000\022\026\n\022R_ResultWuxue_Fail\020\001\022\036\n\032R_R"
    "esultWuxue_MaxSchemeNum\020\002\022\032\n\026R_ResultWux"
    "ue_NoScheme\020\003\022\037\n\033R_ResultWuxue_NeedOneSc"
    "heme\020\004\022\036\n\032R_ResultWuxue_NoLearnSkill\020\005\022\035"
    "\n\031R_ResultWuxue_NoOugiSkill\020\006\022\037\n\033R_Resul"
    "tWuxue_FightNoChange\020\007\022\036\n\032R_ResultWuxue_"
    "SkillNoIndex\020\010\022\035\n\031R_ResultWuxue_SameSkil"
    "lID\020\t*l\n\014_emResultFly\022\027\n\023R_ResultFly_Suc"
    "ceed\020\000\022\024\n\020R_ResultFly_Fail\020\001\022\024\n\020R_Result"
    "Fly_Type\020\002\022\027\n\023R_ResultFly_Cooling\020\003*\246\003\n\r"
    "_emResultDart\022\030\n\024R_ResultDart_Succeed\020\000\022"
    "\036\n\032R_ResultDart_Not_Satisfied\020\001\022\032\n\026R_Res"
    "ultDart_No_DartID\020\002\022\037\n\033R_ResultDart_Not_"
    "TeamLeader\020\003\022\034\n\030R_ResultDart_Not_Biaoshi"
    "\020\004\022\037\n\033R_ResultDart_No_TargetScene\020\005\022\033\n\027R"
    "_ResultDart_Less_Level\020\006\022\037\n\033R_ResultDart"
    "_Less_DartCount\020\007\022\034\n\030R_ResultDart_Not_Ar"
    "round\020\010\022\037\n\033R_ResultDart_Less_ItemCount\020\t"
    "\022\"\n\036R_ResultDart_Team_Count_Failed\020\n\022\035\n\031"
    "R_ResultDart_Already_Dart\020\013\022\037\n\033R_ResultD"
    "art_New_DartLeader\020\014*U\n\024_emResultFaction"
    "Boss\022\037\n\033R_ResultFactionBoss_Succeed\020\000\022\034\n"
    "\030R_ResultFactionBoss_Fail\020\001*\261\001\n\016_emResul"
    "tTitle\022\031\n\025R_ResultTitle_Succeed\020\000\022\026\n\022R_R"
    "esultTitle_Fail\020\001\022\032\n\026R_ResultTitle_NoAct"
    "ive\020\002\022\030\n\024R_ResultTitle_Expire\020\003\022\033\n\027R_Res"
    "ultTitle_HaveEquip\020\004\022\031\n\025R_ResultTitle_No"
    "Equip\020\005*\243\001\n\020_emResultFashion\022\033\n\027R_Result"
    "Fashion_Succeed\020\000\022\030\n\024R_ResultFashion_Fai"
    "l\020\001\022\034\n\030R_ResultFashion_NoActive\020\002\022\035\n\031R_R"
    "esultFashion_HaveEquip\020\003\022\033\n\027R_ResultFash"
    "ion_NoEquip\020\004*\244\003\n\024_emResultEquipColumn\022\037"
    "\n\033R_ResultEquipColumn_Succeed\020\000\022\034\n\030R_Res"
    "ultEquipColumn_Fail\020\001\022\036\n\032R_ResultEquipCo"
    "lumn_NoFind\020\002\022\"\n\036R_ResultEquipColumn_Nee"
    "dExpend\020\003\022\036\n\032R_ResultEquipColumn_NoItem\020"
    "\004\022(\n$R_ResultEquipColumn_EnhanceLevelFul"
    "l\020\005\022$\n R_ResultEquipColumn_PreCondition\020"
    "\006\022#\n\037R_ResultEquipColumn_ItemTypeErr\020\007\022\""
    "\n\036R_ResultEquipColumn_ItemNumErr\020\010\022&\n\"R_"
    "ResultEquipColumn_ForgeLevelFull\020\t\022(\n$R_"
    "ResultEquipColumn_NeedEnhanceLevel\020\n*R\n\023"
    "_emResultClimbTower\022\035\n\031R_ResultClimbTowe"
    "_Succeed\020\000\022\034\n\030R_ResultClimbTowe_Failed\020\001"
    "*\271\003\n\017_emResultPvpWar\022\032\n\026R_ResultPvpWar_S"
    "ucceed\020\000\022\031\n\025R_ResultPvpWar_Failed\020\001\022\036\n\032R"
    "_ResultPvpWar_NotOpenTime\020\002\022\032\n\026R_ResultP"
    "vpWar_NeeItem\020\003\022\034\n\030R_ResultPvpWar_NeeExp"
    "end\020\004\022\037\n\033R_ResultPvpWar_PreCondition\020\005\022!"
    "\n\035R_ResultPvpWar_NeedEnterCount\020\006\022\034\n\030R_R"
    "esultPvpWar_InCopymap\020\007\022\032\n\026R_ResultPvpWa"
    "r_InPlane\020\010\022\032\n\026R_ResultPvpWar_NoMatch\020\t\022"
    "\032\n\026R_ResultPvpWar_InMatch\020\n\022\036\n\032R_ResultP"
    "vpWar_InExitMatch\020\013\022\035\n\031R_ResultPvpWar_Ma"
    "tchIsDel\020\014\022 \n\034R_ResultPvpWar_EnterCoolTi"
    "me\020\r*Z\n\021_emResultQuestion\022\026\n\022R_Question_"
    "Succeed\020\000\022\025\n\021R_Question_Failed\020\001\022\026\n\022R_Qu"
    "estion_NotTime\020\002*\205\001\n\020_emResultGwTrain\022\033\n"
    "\027R_ResultGwTrain_Succeed\020\000\022\032\n\026R_ResultGw"
    "Train_Failed\020\001\022\033\n\027R_ResultGwTrain_HadPas"
    "s\020\002\022\033\n\027R_ResultGwTrain_NotOpen\020\003*t\n\022_emR"
    "esultWorldBoss\022\035\n\031R_ResultWorldBoss_Succ"
    "eed\020\000\022\034\n\030R_ResultWorldBoss_Failed\020\001\022!\n\035R"
    "_ResultWorldBoss_No_HurtRank\020\002*\214\001\n\021_emRe"
    "sultActivity\022\034\n\030R_ResultActivity_Succeed"
    "\020\000\022\033\n\027R_ResultActivity_Failed\020\001\022 \n\034R_Res"
    "ultActivity_NeedLivenee\020\002\022\032\n\026R_ResultAct"
    "ivity_Exist\020\003*\337\001\n\017_emResultRelive\022\032\n\026R_R"
    "esultRelive_Succeed\020\000\022\031\n\025R_ResultRelive_"
    "Failed\020\001\022\034\n\030R_ResultRelive_SceneMark\020\002\022\036"
    "\n\032R_ResultRelive_NeedItemNum\020\003\022\035\n\031R_Resu"
    "ltRelive_CountLimit\020\004\022\034\n\030R_ResultRelive_"
    "TimeLimit\020\005\022\032\n\026R_ResultRelive_CopyMap\020\006*"
    "\213\003\n\016_emResultCorps\022\031\n\025R_ResultCorps_Succ"
    "eed\020\000\022\030\n\024R_ResultCorps_Failed\020\001\022\031\n\025R_Res"
    "ultCorps_NoCorps\020\002\022\035\n\031R_ResultCorps_NoPr"
    "ivilege\020\003\022\"\n\036R_ResultCorps_IllegalCharac"
    "ter\020\004\022\035\n\031R_ResultCorps_LengthError\020\005\022\031\n\025"
    "R_ResultCorps_BadWord\020\006\022\036\n\032R_ResultCorps"
    "_RepeatMember\020\007\022 \n\034R_ResultCorps_SetJobC"
    "oolTime\020\010\022#\n\037R_ResultCorps_ForbitSpeamMa"
    "xNum\020\t\022!\n\035R_ResultCorps_PlayerNotOnline\020"
    "\n\022\"\n\036R_ResultCorps_PlayerNotInCorps\020\013*\270\001"
    "\n\r_emResultWeal\022\030\n\024R_ResultWeal_Succeed\020"
    "\000\022\027\n\023R_ResultWeal_Failed\020\001\022\032\n\026R_ResultWe"
    "al_HavePrize\020\002\022\036\n\032R_ResultWeal_CantPrize"
    "Time\020\003\022\033\n\027R_ResultWeal_NoOpenTime\020\004\022\033\n\027R"
    "_ResultWeal_PrizeNoSet\020\005*\343\003\n\016_emResultMa"
    "nor\022\031\n\025R_ResultManor_Succeed\020\000\022\030\n\024R_Resu"
    "ltManor_Failed\020\001\022\035\n\031R_ResultManor_Alread"
    "Apply\020\002\022\037\n\033R_ResultManor_NotApply_Time\020\003"
    "\022$\n R_ResultManor_Apply_No_Authority\020\004\022#"
    "\n\037R_ResultManor_Apply_No_Activity\020\005\022&\n\"R"
    "_ResultManor_Apply_No_AlreadyHold\020\006\022#\n\037R"
    "_ResultManor_Apply_Corps_Wrong\020\007\022!\n\035R_Re"
    "sultManor_Apply_Cancle_CD\020\010\022\'\n#R_ResultM"
    "anor_Apply_No_TIAOZHANLING\020\t\022(\n$R_Result"
    "Manor_Fighting_No_ActiveTime\020\n\022#\n\037R_Resu"
    "ltManor_Fighting_No_Lobby\020\013\022)\n%R_ResultM"
    "anor_Fighting_No_BattleField\020\014*\357\004\n\022_emRe"
    "sultSinglePvp\022\035\n\031R_ResultSinglePvp_Succe"
    "ed\020\000\022\034\n\030R_ResultSinglePvp_Failed\020\001\022!\n\035R_"
    "ResultSinglePvp_NotOpenTime\020\002\022\035\n\031R_Resul"
    "tSinglePvp_NeeItem\020\003\022\037\n\033R_ResultSinglePv"
    "p_NeeExpend\020\004\022\"\n\036R_ResultSinglePvp_PreCo"
    "ndition\020\005\022$\n R_ResultSinglePvp_NeedEnter"
    "Count\020\006\022\037\n\033R_ResultSinglePvp_InCopymap\020\007"
    "\022\035\n\031R_ResultSinglePvp_InPlane\020\010\022\035\n\031R_Res"
    "ultSinglePvp_NoMatch\020\t\022\035\n\031R_ResultSingle"
    "Pvp_InMatch\020\n\022!\n\035R_ResultSinglePvp_InExi"
    "tMatch\020\013\022 \n\034R_ResultSinglePvp_MatchIsDel"
    "\020\014\022#\n\037R_ResultSinglePvp_EnterCoolTime\020\r\022"
    " \n\034R_ResultSinglePvp_NoBigWorld\020\016\022%\n!R_R"
    "esultSinglePvp_NoDayEnterCount\020\017\022\037\n\033R_Re"
    "sultSinglePvp_HavePrize\020\020\022\035\n\031R_ResultSin"
    "glePvp_NoPrize\020\021", 20856);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgResult.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgResult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgResult_2eproto {
  StaticDescriptorInitializer_MsgResult_2eproto() {
    protobuf_AddDesc_MsgResult_2eproto();
  }
} static_descriptor_initializer_MsgResult_2eproto_;

const ::google::protobuf::EnumDescriptor* _emResultMove_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultMove_descriptor_;
}
bool _emResultMove_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultSkill_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultSkill_descriptor_;
}
bool _emResultSkill_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultBuff_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultBuff_descriptor_;
}
bool _emResultBuff_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultItem_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultItem_descriptor_;
}
bool _emResultItem_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultPickup_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultPickup_descriptor_;
}
bool _emResultPickup_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultFaction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultFaction_descriptor_;
}
bool _emResultFaction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultMail_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultMail_descriptor_;
}
bool _emResultMail_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultQuest_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultQuest_descriptor_;
}
bool _emResultQuest_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultStore_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultStore_descriptor_;
}
bool _emResultStore_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultPrize_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultPrize_descriptor_;
}
bool _emResultPrize_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultCopymap_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultCopymap_descriptor_;
}
bool _emResultCopymap_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultTrade_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultTrade_descriptor_;
}
bool _emResultTrade_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultSaleMoney_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultSaleMoney_descriptor_;
}
bool _emResultSaleMoney_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultAuction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultAuction_descriptor_;
}
bool _emResultAuction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultCommon_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultCommon_descriptor_;
}
bool _emResultCommon_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultTopList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultTopList_descriptor_;
}
bool _emResultTopList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultFriend_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultFriend_descriptor_;
}
bool _emResultFriend_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultDip_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultDip_descriptor_;
}
bool _emResultDip_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultWentao_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultWentao_descriptor_;
}
bool _emResultWentao_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultWulue_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultWulue_descriptor_;
}
bool _emResultWulue_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultBingfu_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultBingfu_descriptor_;
}
bool _emResultBingfu_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultTeam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultTeam_descriptor_;
}
bool _emResultTeam_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultDropItem_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultDropItem_descriptor_;
}
bool _emResultDropItem_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultIdentity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultIdentity_descriptor_;
}
bool _emResultIdentity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultWuxue_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultWuxue_descriptor_;
}
bool _emResultWuxue_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultFly_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultFly_descriptor_;
}
bool _emResultFly_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultDart_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultDart_descriptor_;
}
bool _emResultDart_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultFactionBoss_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultFactionBoss_descriptor_;
}
bool _emResultFactionBoss_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultTitle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultTitle_descriptor_;
}
bool _emResultTitle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultFashion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultFashion_descriptor_;
}
bool _emResultFashion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultEquipColumn_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultEquipColumn_descriptor_;
}
bool _emResultEquipColumn_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultClimbTower_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultClimbTower_descriptor_;
}
bool _emResultClimbTower_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultPvpWar_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultPvpWar_descriptor_;
}
bool _emResultPvpWar_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultQuestion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultQuestion_descriptor_;
}
bool _emResultQuestion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultGwTrain_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultGwTrain_descriptor_;
}
bool _emResultGwTrain_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultWorldBoss_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultWorldBoss_descriptor_;
}
bool _emResultWorldBoss_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultActivity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultActivity_descriptor_;
}
bool _emResultActivity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultRelive_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultRelive_descriptor_;
}
bool _emResultRelive_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultCorps_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultCorps_descriptor_;
}
bool _emResultCorps_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultWeal_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultWeal_descriptor_;
}
bool _emResultWeal_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultManor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultManor_descriptor_;
}
bool _emResultManor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emResultSinglePvp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emResultSinglePvp_descriptor_;
}
bool _emResultSinglePvp_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
