// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConstantDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* _emConstantType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Game_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Quest_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Skill_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Trade_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_SaleMoney_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Auction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Friend_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_WenTao_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Team_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_DropItem_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Item_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Faction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Dartcar_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_FactionBoss_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Copymap_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Relive_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Pvp_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emConstant_Manor_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConstantDefine_2eproto() {
  protobuf_AddDesc_ConstantDefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConstantDefine.proto");
  GOOGLE_CHECK(file != NULL);
  _emConstantType_descriptor_ = file->enum_type(0);
  _emConstant_Game_descriptor_ = file->enum_type(1);
  _emConstant_Quest_descriptor_ = file->enum_type(2);
  _emConstant_Skill_descriptor_ = file->enum_type(3);
  _emConstant_Trade_descriptor_ = file->enum_type(4);
  _emConstant_SaleMoney_descriptor_ = file->enum_type(5);
  _emConstant_Auction_descriptor_ = file->enum_type(6);
  _emConstant_Friend_descriptor_ = file->enum_type(7);
  _emConstant_WenTao_descriptor_ = file->enum_type(8);
  _emConstant_Team_descriptor_ = file->enum_type(9);
  _emConstant_DropItem_descriptor_ = file->enum_type(10);
  _emConstant_Item_descriptor_ = file->enum_type(11);
  _emConstant_Faction_descriptor_ = file->enum_type(12);
  _emConstant_Dartcar_descriptor_ = file->enum_type(13);
  _emConstant_FactionBoss_descriptor_ = file->enum_type(14);
  _emConstant_Copymap_descriptor_ = file->enum_type(15);
  _emConstant_Relive_descriptor_ = file->enum_type(16);
  _emConstant_Pvp_descriptor_ = file->enum_type(17);
  _emConstant_Manor_descriptor_ = file->enum_type(18);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConstantDefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_ConstantDefine_2eproto() {
}

void protobuf_AddDesc_ConstantDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ConstantDefine.proto*\275\003\n\017_emConstantTy"
    "pe\022\021\n\rConstant_Game\020\000\022\022\n\016Constant_Quest\020"
    "\001\022\022\n\016Constant_Skill\020\002\022\022\n\016Constant_Trade\020"
    "\003\022\026\n\022Constant_SaleMoney\020\004\022\024\n\020Constant_Au"
    "ction\020\005\022\023\n\017Constant_Friend\020\006\022\023\n\017Constant"
    "_WenTao\020\007\022\021\n\rConstant_Team\020\010\022\025\n\021Constant"
    "_DropItem\020\t\022\021\n\rConstant_Item\020\n\022\024\n\020Consta"
    "nt_Faction\020\013\022\024\n\020Constant_Dartcar\020\014\022\030\n\024Co"
    "nstant_FactionBoss\020\r\022\024\n\020Constant_Copymap"
    "\020\016\022\027\n\023Constant_HorseSpeed\020\017\022\026\n\022Constant_"
    "AutoFight\020\020\022\023\n\017Constant_Relive\020\021\022\020\n\014Cons"
    "tant_Pvp\020\022\022\022\n\016Constant_Manor\020\023*\224\014\n\020_emCo"
    "nstant_Game\022\027\n\023C_Game_MaxPlayerNum\020\000\022\023\n\017"
    "C_Game_MaxLevel\020\001\022\030\n\024C_Game_LeaveFightin"
    "g\020\002\022\024\n\020C_Game_RushSpeed\020\003\022\023\n\017C_Game_FlyS"
    "peed\020\004\022\022\n\016C_Game_BlackPK\020\005\022\020\n\014C_Game_Red"
    "PK\020\006\022\031\n\025C_Game_HatredBuffHurt\020\007\022\031\n\025C_Gam"
    "e_HatredBuffCure\020\010\022\032\n\026C_Game_HatredSkill"
    "Cure\020\t\022\032\n\026C_Game_HatredSkillGain\020\n\022\030\n\024C_"
    "Game_MaxBagItemNum\020\013\022\024\n\020C_Game_EnermyMax"
    "\020\014\022\033\n\027C_Game_GloBalCacheLevel\020\r\022\031\n\025C_Gam"
    "e_AIFollowOffset\020\016\022\027\n\023C_Game_RebirthLeve"
    "l\020\017\022\023\n\017C_Game_KillTime\020\020\022\027\n\023C_Game_KillN"
    "otAddPK\020\021\022\025\n\021C_Game_AddPKValue\020\022\022\027\n\023C_Ga"
    "me_ReconnetTime\020\023\022\032\n\026C_Game_BingfuRepeat"
    "Num\020\024\022\024\n\020C_Game_FlyByWind\020\026\022\031\n\025C_Game_Au"
    "toReliveTime\020\027\022\035\n\031C_Game_WaitAutoReliveT"
    "ime\020\030\022\031\n\025C_Game_StoreScoreRate\020\031\022\032\n\026C_Ga"
    "me_BingfuBagMaxNum\020\032\022\032\n\026C_Game_ChatJiang"
    "huRate\020\033\022\034\n\030C_Game_WuxueMaxSchemeNum\020\034\022\033"
    "\n\027C_Game_WuxueMaxSkillNum\020\035\022\026\n\022C_Game_Ma"
    "pShowTime\020\036\022\027\n\023C_Game_MapTweenTime\020\037\022\026\n\022"
    "C_Game_TipShowTime\020 \022\027\n\023C_Game_TipTweenT"
    "ime\020!\022\032\n\026C_Game_LanternShowTime\020\"\022\033\n\027C_G"
    "ame_LanternTweenTime\020#\022\034\n\030C_Game_FightTi"
    "meUseSkill\020$\022 \n\034C_Game_FightTimeAttackPl"
    "ayer\020%\022\"\n\036C_Game_FightTimeBeAttackPlayer"
    "\020&\022!\n\035C_Game_FightTimeAttackMonster\020\'\022#\n"
    "\037C_Game_FightTimeBeAttackMonster\020(\022\032\n\026C_"
    "Game_FightTimeHatred\020)\022\034\n\030C_Game_FightTi"
    "meBeHatred\020*\022\024\n\020C_Game_MountCool\020+\022\035\n\031C_"
    "Game_SaleMoneyScoreRate\020,\022\027\n\023C_Game_Chec"
    "kNameNum\020-\022\036\n\032C_Game_FinalDamageRand_Low"
    "\020.\022\037\n\033C_Game_FinalDamageRand_High\020/\022\026\n\022C"
    "_Game_MailMax_Svr\0200\022\026\n\022C_Game_MailMax_Cl"
    "i\0201\022\035\n\031C_Game_MailExpirationTime\0202\022\026\n\022C_"
    "Game_DazuoBuffId\0203\022\033\n\027C_Game_DazuoGuajiB"
    "uffId\0204\022\032\n\026C_Game_MaxBingfuBagNum\0205\022\031\n\025C"
    "_Game_LogciDay_Delay\0206\022\036\n\032C_Game_Activit"
    "y_Clear_Time\0207\022\035\n\031C_Game_Corps_DeclarLen"
    "gth\0208\022\026\n\022C_Game_MailItemMax\0209*L\n\021_emCons"
    "tant_Quest\022\033\n\027C_Quest_DailyQueseCount\020\000\022"
    "\032\n\026C_Quest_MasterQueseMax\020\001*\236\001\n\021_emConst"
    "ant_Skill\022\030\n\024C_Skill_MaxBuffCount\020\000\022\032\n\026C"
    "_Skill_EnemyClearTime\020\001\022\032\n\026C_Skill_TrapA"
    "ngleSpeed\020\002\022\033\n\027C_Skill_BeAttackAddBuff\020\003"
    "\022\032\n\026C_Skill_SkillSchemeNum\020\004*]\n\021_emConst"
    "ant_Trade\022\025\n\021C_Trade_ItemCount\020\000\022\027\n\023C_Tr"
    "ade_RecoverTime\020\001\022\030\n\024C_Trade_LockCoolTim"
    "e\020\002*\275\004\n\025_emConstant_SaleMoney\022\030\n\024C_SaleM"
    "oney_UnitCash\020\000\022\032\n\026C_SaleMoney_CancelTim"
    "e\020\001\022\026\n\022C_SaleMoney_AveDay\020\002\022\031\n\025C_SaleMon"
    "ey_ListCount\020\003\022\032\n\026C_SaleMoney_DefaultAve"
    "\020\004\022\027\n\023C_SaleMoney_TaxCash\020\005\022\031\n\025C_SaleMon"
    "ey_TaxSliver\020\006\022\026\n\022C_SaleMoney_AveMin\020\007\022\026"
    "\n\022C_SaleMoney_AveMax\020\010\022\030\n\024C_SaleMoney_Lo"
    "gCount\020\t\022\034\n\030C_SaleMoney_P1_LimitVaue\020\n\022\034"
    "\n\030C_SaleMoney_P2_LimitVaue\020\013\022\031\n\025C_SaleMo"
    "ney_P1_Weight\020\014\022\031\n\025C_SaleMoney_P2_Weight"
    "\020\r\022\032\n\026C_SaleMoney_PriceHours\020\016\022\033\n\027C_Sale"
    "Money_AmountHours\020\017\022\033\n\027C_SaleMoney_Inter"
    "valMin\020\020\022\033\n\027C_SaleMoney_IntervalMax\020\021\022\035\n"
    "\031C_SaleMoney_IntervalExtra\020\022\022\035\n\031C_SaleMo"
    "ney_TradeLogCount\020\023*\340\001\n\023_emConstant_Auct"
    "ion\022\030\n\024C_Auction_CancelTime\020\000\022\026\n\022C_Aucti"
    "on_LogCount\020\001\022\032\n\026C_Auction_P1_LimitVaue\020"
    "\002\022\032\n\026C_Auction_P2_LimitVaue\020\003\022\027\n\023C_Aucti"
    "on_P1_Weight\020\004\022\027\n\023C_Auction_P2_Weight\020\005\022"
    "\025\n\021C_Auction_TaxBase\020\006\022\026\n\022C_Auction_TaxE"
    "xtra\020\007*\323\001\n\022_emConstant_Friend\022\035\n\031C_Frien"
    "d_FriendApply_Time\020\000\022\035\n\031C_Friend_FriendC"
    "ountLimit\020\001\022\034\n\030C_Friend_EnemyCountLimit\020"
    "\002\022 \n\034C_Friend_TmpFriendCountLimit\020\003\022 \n\034C"
    "_Friend_BlacklistCountLimit\020\004\022\035\n\031C_Frien"
    "d_TmpFriendTimeOut\020\005*/\n\022_emConstant_WenT"
    "ao\022\031\n\025C_WenTao_Scheme_Count\020\000*\323\001\n\020_emCon"
    "stant_Team\022\027\n\023C_Team_Member_Count\020\000\022\030\n\024C"
    "_Team_KickVote_Time\020\001\022\031\n\025C_Team_AllotVot"
    "e_Time\020\002\022\032\n\026C_Team_Callup_CoolTime\020\003\022\031\n\025"
    "C_Team_ShoulieLoopNum\020\005\022\034\n\030C_Team_Shouli"
    "ePrizeCount\020\006\022\034\n\030C_Team_RemainConfirmTim"
    "e\020\007*\201\001\n\024_emConstant_DropItem\022\030\n\024C_DropIt"
    "em_Dice_Time\020\000\022\032\n\026C_DropItem_Assign_Time"
    "\020\001\022\030\n\024C_DropItem_Pick_Time\020\002\022\031\n\025C_DropIt"
    "em_Exist_Time\020\003*\300\001\n\020_emConstant_Item\022\032\n\026"
    "C_Item_Inherit_Enhance\020\000\022\030\n\024C_Item_Inher"
    "it_Forge\020\001\022\032\n\026C_Item_Inherit_Special\020\002\022\034"
    "\n\030C_Item_EnhanceMoneyCount\020\003\022\032\n\026C_Item_F"
    "orgeMoneyCount\020\004\022 \n\034C_Item_BingfuSplitAd"
    "dPercent\020\005*\202\010\n\023_emConstant_Faction\022\032\n\026C_"
    "Faction_Create_Money\020\000\022\027\n\023C_Faction_Name"
    "_Size\020\001\022\031\n\025C_Faction_Banner_Size\020\002\022\036\n\032C_"
    "Faction_Declaration_Size\020\003\022\027\n\023C_Faction_"
    "Apply_Max\020\004\022\036\n\032C_Faction_Player_Apply_Ma"
    "x\020\005\022\035\n\031C_Faction_Apply_OutOfTime\020\006\022\026\n\022C_"
    "Faction_Apply_CD\020\007\022\026\n\022C_Faction_Leave_CD"
    "\020\010\022\034\n\030C_Faction_Invite_Timeout\020\t\022\033\n\027C_Fa"
    "ction_Develop_Count\020\n\022\031\n\025C_Faction_Study"
    "_Count\020\013\022\030\n\024C_Faction_Study_Time\020\014\022 \n\034C_"
    "Faction_Skill_DefaultLevel\020\r\022\036\n\032C_Factio"
    "n_Contribution_Max\020\016\022\030\n\024C_Faction_Task_C"
    "ount\020\017\022\037\n\033C_Faction_Task_Multi_Award1\020\020\022"
    "\037\n\033C_Faction_Task_Multi_Award2\020\021\022\025\n\021C_Fa"
    "ction_ItemMax\020\022\022\031\n\025C_Faction_HomeSceneID"
    "\020\023\022\037\n\033C_Faction_HomeSceneRegionID\020\024\022\032\n\026C"
    "_Faction_EventMemeber\020\025\022\035\n\031C_Faction_Eve"
    "ntExperience\020\026\022\030\n\024C_Faction_EventDepot\020\027"
    "\022 \n\034C_Faction_ImpeachOfflineTime\020\030\022!\n\035C_"
    "Faction_ImpeachContinueTime\020\031\022\036\n\032C_Facti"
    "on_ImpeachAgreeRate\020\032\022\036\n\032C_Faction_Forma"
    "lMemberTime\020\033\022\032\n\026C_Faction_CorpsBoomLow\020"
    "\034\022\035\n\031C_Faction_CorpsBoomMiddle\020\035\022\033\n\027C_Fa"
    "ction_CorpsBoomHigh\020\036\022\037\n\033C_Faction_NewMe"
    "mberJoinTime\020\037\022 \n\034C_Faction_ForbitSpeakH"
    "ourNum\020 \022\035\n\031C_Faction_ForbitSpeakTime\020!*"
    "V\n\023_emConstant_Dartcar\022\036\n\032C_Dartcar_Max_"
    "Count_Normal\020\001\022\037\n\033C_Dartcar_Max_Count_Ti"
    "anxia\020\002*\351\001\n\027_emConstant_FactionBoss\022 \n\034C"
    "_FactionBoss_CopymapMinTime\020\000\022 \n\034C_Facti"
    "onBoss_DelayPrizeTime\020\001\022(\n$C_FactionBoss"
    "_FactionPrizeMinPercent\020\002\022\034\n\030C_FactionBo"
    "ss_ScoreParam\020\003\022\032\n\026C_FactionBoss_CoolTim"
    "e\020\004\022&\n\"C_FactionBoss_FactionPrizeMinScor"
    "e\020\005*\317\004\n\023_emConstant_Copymap\022\030\n\024C_Copymap"
    "_LiangyiNum\020\000\022\034\n\030C_Copymap_BannerMaxScor"
    "e\020\001\022 \n\034C_Copymap_BannerKillAddScore\020\002\022!\n"
    "\035C_Copymap_BannerKillAddContri\020\003\022&\n\"C_Co"
    "pymap_BannerAssitKillAddContri\020\004\022$\n C_Co"
    "pymap_BannerCollectAddContri\020\005\022&\n\"C_Copy"
    "map_BannerAddScoreStepSecond\020\006\022\034\n\030C_Copy"
    "map_BannerAddScore\020\007\022\"\n\036C_Copymap_Banner"
    "GodlikeKillNum\020\010\022#\n\037C_Copymap_BannerMega"
    "killKillNum\020\t\022$\n C_Copymap_BannerMegakil"
    "lStepTime\020\n\022!\n\035C_Copymap_BannerReliveAdd"
    "Buff\020\013\022\037\n\033C_Copymap_BannerHookMaxTime\020\014\022"
    "\033\n\027C_Copymap_BannerDoorID1\020\r\022\033\n\027C_Copyma"
    "p_BannerDoorID2\020\016\022\027\n\023C_Copymap_CashCount"
    "\020\017\022!\n\035C_Copymap_BannerKillAssitTime\020\020*z\n"
    "\022_emConstant_Relive\022\033\n\027C_Relive_Max_Free"
    "_Count\020\001\022\024\n\020C_Relive_Item_ID\020\002\022\033\n\027C_Reli"
    "ve_SafePoint_Time\020\003\022\024\n\020C_Relive_Buff_ID\020"
    "\004*\253\001\n\017_emConstant_Pvp\022\034\n\030C_Pvp_SinglePvp"
    "_MinScore\020\001\022 \n\034C_Pvp_SinglePvp_DefaultSc"
    "ore\020\002\022\035\n\031C_Pvp_SinglePvp_RecordNum\020\003\022\032\n\026"
    "C_Pvp_SinglePvp_KValue\020\004\022\035\n\031C_Pvp_Single"
    "Pvp_WeekCount\020\005*\241\004\n\021_emConstant_Manor\022\032\n"
    "\026C_Manor_VoteTimeSecond\020\001\022\031\n\025C_Manor_App"
    "lyCDSecond\020\002\022\"\n\036C_Manor_ApplyCostFaction"
    "Silver\020\003\022\031\n\025C_Manor_Lobby_Line_CD\020\004\022\'\n#C"
    "_Manor_Lobby_Line_Max_Inside_Count\020\005\022\034\n\030"
    "C_Manor_BattleField_P_CD\020\006\022\036\n\032C_Manor_Ba"
    "ttleField_F_CD_1\020\007\022\036\n\032C_Manor_BattleFiel"
    "d_F_CD_2\020\010\022#\n\037C_Manor_BattleField_FlagSc"
    "ore_1\020\t\022#\n\037C_Manor_BattleField_FlagScore"
    "_2\020\n\022%\n!C_Manor_BattleField_LostElite_30"
    "s\020\013\022$\n C_Manor_BattleField_LostElite_2m\020"
    "\014\022#\n\037C_Manor_BattleField_SafeZone_CD\020\r\022)"
    "\n%C_Manor_BattleField_Assist_Harmful_CD\020"
    "\016\022(\n$C_Manor_BattleField_Assist_Useful_C"
    "D\020\017", 6763);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConstantDefine.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConstantDefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConstantDefine_2eproto {
  StaticDescriptorInitializer_ConstantDefine_2eproto() {
    protobuf_AddDesc_ConstantDefine_2eproto();
  }
} static_descriptor_initializer_ConstantDefine_2eproto_;

const ::google::protobuf::EnumDescriptor* _emConstantType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstantType_descriptor_;
}
bool _emConstantType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Game_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Game_descriptor_;
}
bool _emConstant_Game_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Quest_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Quest_descriptor_;
}
bool _emConstant_Quest_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Skill_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Skill_descriptor_;
}
bool _emConstant_Skill_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Trade_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Trade_descriptor_;
}
bool _emConstant_Trade_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_SaleMoney_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_SaleMoney_descriptor_;
}
bool _emConstant_SaleMoney_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Auction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Auction_descriptor_;
}
bool _emConstant_Auction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Friend_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Friend_descriptor_;
}
bool _emConstant_Friend_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_WenTao_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_WenTao_descriptor_;
}
bool _emConstant_WenTao_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Team_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Team_descriptor_;
}
bool _emConstant_Team_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_DropItem_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_DropItem_descriptor_;
}
bool _emConstant_DropItem_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Item_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Item_descriptor_;
}
bool _emConstant_Item_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Faction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Faction_descriptor_;
}
bool _emConstant_Faction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Dartcar_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Dartcar_descriptor_;
}
bool _emConstant_Dartcar_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_FactionBoss_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_FactionBoss_descriptor_;
}
bool _emConstant_FactionBoss_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Copymap_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Copymap_descriptor_;
}
bool _emConstant_Copymap_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Relive_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Relive_descriptor_;
}
bool _emConstant_Relive_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Pvp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Pvp_descriptor_;
}
bool _emConstant_Pvp_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emConstant_Manor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emConstant_Manor_descriptor_;
}
bool _emConstant_Manor_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
