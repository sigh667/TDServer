// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WADBProtocol.proto

#ifndef PROTOBUF_WADBProtocol_2eproto__INCLUDED
#define PROTOBUF_WADBProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WADBProtocol_2eproto();
void protobuf_AssignDesc_WADBProtocol_2eproto();
void protobuf_ShutdownFile_WADBProtocol_2eproto();


enum _emPW2DB_Protocol {
  P_W2DB_Operator = 0
};
bool _emPW2DB_Protocol_IsValid(int value);
const _emPW2DB_Protocol _emPW2DB_Protocol_MIN = P_W2DB_Operator;
const _emPW2DB_Protocol _emPW2DB_Protocol_MAX = P_W2DB_Operator;
const int _emPW2DB_Protocol_ARRAYSIZE = _emPW2DB_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPW2DB_Protocol_descriptor();
inline const ::std::string& _emPW2DB_Protocol_Name(_emPW2DB_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPW2DB_Protocol_descriptor(), value);
}
inline bool _emPW2DB_Protocol_Parse(
    const ::std::string& name, _emPW2DB_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPW2DB_Protocol>(
    _emPW2DB_Protocol_descriptor(), name, value);
}
enum _emW2DB_Protocol_Operator {
  W2DB_Operator_StartLoad_Ask = 0,
  W2DB_Operator_DBBlock_Ask = 1,
  W2DB_Operator_SetStartTime_Ask = 2
};
bool _emW2DB_Protocol_Operator_IsValid(int value);
const _emW2DB_Protocol_Operator _emW2DB_Protocol_Operator_MIN = W2DB_Operator_StartLoad_Ask;
const _emW2DB_Protocol_Operator _emW2DB_Protocol_Operator_MAX = W2DB_Operator_SetStartTime_Ask;
const int _emW2DB_Protocol_Operator_ARRAYSIZE = _emW2DB_Protocol_Operator_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2DB_Protocol_Operator_descriptor();
inline const ::std::string& _emW2DB_Protocol_Operator_Name(_emW2DB_Protocol_Operator value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2DB_Protocol_Operator_descriptor(), value);
}
inline bool _emW2DB_Protocol_Operator_Parse(
    const ::std::string& name, _emW2DB_Protocol_Operator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2DB_Protocol_Operator>(
    _emW2DB_Protocol_Operator_descriptor(), name, value);
}
enum _em_W2DB_Event {
  W2DB_Event_World_Load = 0,
  W2DB_Event_World_Save = 1,
  W2DB_Event_World_SetStartTime = 2,
  W2DB_Event_Account_Load = 10,
  W2DB_Event_PlayerCreate_Ask = 11,
  W2DB_Event_Player_Load = 20,
  W2DB_Event_Player_Save = 21,
  W2DB_Event_Player_Online = 22,
  W2DB_Event_PlayerDelete_Ask = 23,
  W2DB_Event_PlayerSelect_Ask = 24,
  W2DB_Event_OfflineData_Add = 25,
  W2DB_Event_OfflineData_Del = 26,
  W2DB_Event_Faction_Create = 40,
  W2DB_Event_Faction_Delete = 41,
  W2DB_Event_Faction_Load = 42,
  W2DB_Event_Faction_Save = 43,
  W2DB_Event_FactionBoss_Load = 50,
  W2DB_Event_FactionBoss_Save = 51,
  W2DB_Event_FactionBoss_Delete = 52,
  W2DB_Event_Manor_Load = 61,
  W2DB_Event_Manor_Save = 62
};
bool _em_W2DB_Event_IsValid(int value);
const _em_W2DB_Event _em_W2DB_Event_MIN = W2DB_Event_World_Load;
const _em_W2DB_Event _em_W2DB_Event_MAX = W2DB_Event_Manor_Save;
const int _em_W2DB_Event_ARRAYSIZE = _em_W2DB_Event_MAX + 1;

const ::google::protobuf::EnumDescriptor* _em_W2DB_Event_descriptor();
inline const ::std::string& _em_W2DB_Event_Name(_em_W2DB_Event value) {
  return ::google::protobuf::internal::NameOfEnum(
    _em_W2DB_Event_descriptor(), value);
}
inline bool _em_W2DB_Event_Parse(
    const ::std::string& name, _em_W2DB_Event* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_em_W2DB_Event>(
    _em_W2DB_Event_descriptor(), name, value);
}
enum _emPDB2W_Protocol {
  P_DB2W_Operator = 0
};
bool _emPDB2W_Protocol_IsValid(int value);
const _emPDB2W_Protocol _emPDB2W_Protocol_MIN = P_DB2W_Operator;
const _emPDB2W_Protocol _emPDB2W_Protocol_MAX = P_DB2W_Operator;
const int _emPDB2W_Protocol_ARRAYSIZE = _emPDB2W_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPDB2W_Protocol_descriptor();
inline const ::std::string& _emPDB2W_Protocol_Name(_emPDB2W_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPDB2W_Protocol_descriptor(), value);
}
inline bool _emPDB2W_Protocol_Parse(
    const ::std::string& name, _emPDB2W_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPDB2W_Protocol>(
    _emPDB2W_Protocol_descriptor(), name, value);
}
enum _emDB2W_Protocol_Operator {
  DB2W_Operator_DBRecv_Ack = 0,
  DB2W_Operator_WorldLoad_Ack = 1,
  DB2W_Operator_AccountLoad_Ack = 2,
  DB2W_Operator_PlayerCreate_Ack = 3,
  DB2W_Operator_PlayerDelete_Ack = 4,
  DB2W_Operator_PlayerSelect_Ack = 5,
  DB2W_Operator_PlayerLoad_Ack = 6,
  DB2W_Operator_FactionCreate_Ack = 7,
  DB2W_Operator_FactionLoad_Ack = 8,
  DB2W_Operator_FactionSave_Ack = 9,
  DB2W_Operator_FactionBossLoad_Ack = 10,
  DB2W_Operator_OfflineDataLoad = 11,
  DB2W_Operator_ManorLoad_Ack = 12,
  DB2W_Operator_ManorSave_Ack = 13
};
bool _emDB2W_Protocol_Operator_IsValid(int value);
const _emDB2W_Protocol_Operator _emDB2W_Protocol_Operator_MIN = DB2W_Operator_DBRecv_Ack;
const _emDB2W_Protocol_Operator _emDB2W_Protocol_Operator_MAX = DB2W_Operator_ManorSave_Ack;
const int _emDB2W_Protocol_Operator_ARRAYSIZE = _emDB2W_Protocol_Operator_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emDB2W_Protocol_Operator_descriptor();
inline const ::std::string& _emDB2W_Protocol_Operator_Name(_emDB2W_Protocol_Operator value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emDB2W_Protocol_Operator_descriptor(), value);
}
inline bool _emDB2W_Protocol_Operator_Parse(
    const ::std::string& name, _emDB2W_Protocol_Operator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emDB2W_Protocol_Operator>(
    _emDB2W_Protocol_Operator_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPW2DB_Protocol>() {
  return _emPW2DB_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2DB_Protocol_Operator>() {
  return _emW2DB_Protocol_Operator_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _em_W2DB_Event>() {
  return _em_W2DB_Event_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPDB2W_Protocol>() {
  return _emPDB2W_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emDB2W_Protocol_Operator>() {
  return _emDB2W_Protocol_Operator_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WADBProtocol_2eproto__INCLUDED
