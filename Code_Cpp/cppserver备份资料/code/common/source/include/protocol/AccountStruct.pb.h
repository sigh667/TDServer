// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AccountStruct.proto

#ifndef PROTOBUF_AccountStruct_2eproto__INCLUDED
#define PROTOBUF_AccountStruct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AccountStruct_2eproto();
void protobuf_AssignDesc_AccountStruct_2eproto();
void protobuf_ShutdownFile_AccountStruct_2eproto();

class PBAccountFlag;
class PBAccount;

// ===================================================================

class PBAccountFlag : public ::google::protobuf::Message {
 public:
  PBAccountFlag();
  virtual ~PBAccountFlag();
  
  PBAccountFlag(const PBAccountFlag& from);
  
  inline PBAccountFlag& operator=(const PBAccountFlag& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAccountFlag& default_instance();
  
  void Swap(PBAccountFlag* other);
  
  // implements Message ----------------------------------------------
  
  PBAccountFlag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAccountFlag& from);
  void MergeFrom(const PBAccountFlag& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string accountname = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountnameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  
  // optional uint32 accountid = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 2;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);
  
  // optional uint32 acountmark = 3;
  inline bool has_acountmark() const;
  inline void clear_acountmark();
  static const int kAcountmarkFieldNumber = 3;
  inline ::google::protobuf::uint32 acountmark() const;
  inline void set_acountmark(::google::protobuf::uint32 value);
  
  // optional uint64 loginsn = 4;
  inline bool has_loginsn() const;
  inline void clear_loginsn();
  static const int kLoginsnFieldNumber = 4;
  inline ::google::protobuf::uint64 loginsn() const;
  inline void set_loginsn(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:PBAccountFlag)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_acountmark();
  inline void clear_has_acountmark();
  inline void set_has_loginsn();
  inline void clear_has_loginsn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* accountname_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 acountmark_;
  ::google::protobuf::uint64 loginsn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_AccountStruct_2eproto();
  friend void protobuf_AssignDesc_AccountStruct_2eproto();
  friend void protobuf_ShutdownFile_AccountStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBAccountFlag* default_instance_;
};
// -------------------------------------------------------------------

class PBAccount : public ::google::protobuf::Message {
 public:
  PBAccount();
  virtual ~PBAccount();
  
  PBAccount(const PBAccount& from);
  
  inline PBAccount& operator=(const PBAccount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAccount& default_instance();
  
  void Swap(PBAccount* other);
  
  // implements Message ----------------------------------------------
  
  PBAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAccount& from);
  void MergeFrom(const PBAccount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBAccountFlag accountflag = 1;
  inline bool has_accountflag() const;
  inline void clear_accountflag();
  static const int kAccountflagFieldNumber = 1;
  inline const ::PBAccountFlag& accountflag() const;
  inline ::PBAccountFlag* mutable_accountflag();
  inline ::PBAccountFlag* release_accountflag();
  
  // optional uint32 plattype = 2;
  inline bool has_plattype() const;
  inline void clear_plattype();
  static const int kPlattypeFieldNumber = 2;
  inline ::google::protobuf::uint32 plattype() const;
  inline void set_plattype(::google::protobuf::uint32 value);
  
  // optional uint32 platid = 3;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 3;
  inline ::google::protobuf::uint32 platid() const;
  inline void set_platid(::google::protobuf::uint32 value);
  
  // optional uint32 createTime = 4;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);
  
  // optional uint32 loginTime = 5;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLoginTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 logintime() const;
  inline void set_logintime(::google::protobuf::uint32 value);
  
  // optional string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional uint64 netip = 7;
  inline bool has_netip() const;
  inline void clear_netip();
  static const int kNetipFieldNumber = 7;
  inline ::google::protobuf::uint64 netip() const;
  inline void set_netip(::google::protobuf::uint64 value);
  
  // optional string passwd = 8;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 8;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  
  // optional uint32 worldID = 9;
  inline bool has_worldid() const;
  inline void clear_worldid();
  static const int kWorldIDFieldNumber = 9;
  inline ::google::protobuf::uint32 worldid() const;
  inline void set_worldid(::google::protobuf::uint32 value);
  
  // optional uint32 curPlayerID = 10;
  inline bool has_curplayerid() const;
  inline void clear_curplayerid();
  static const int kCurPlayerIDFieldNumber = 10;
  inline ::google::protobuf::uint32 curplayerid() const;
  inline void set_curplayerid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBAccount)
 private:
  inline void set_has_accountflag();
  inline void clear_has_accountflag();
  inline void set_has_plattype();
  inline void clear_has_plattype();
  inline void set_has_platid();
  inline void clear_has_platid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_netip();
  inline void clear_has_netip();
  inline void set_has_passwd();
  inline void clear_has_passwd();
  inline void set_has_worldid();
  inline void clear_has_worldid();
  inline void set_has_curplayerid();
  inline void clear_has_curplayerid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBAccountFlag* accountflag_;
  ::google::protobuf::uint32 plattype_;
  ::google::protobuf::uint32 platid_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::uint32 logintime_;
  ::std::string* ip_;
  ::google::protobuf::uint64 netip_;
  ::std::string* passwd_;
  ::google::protobuf::uint32 worldid_;
  ::google::protobuf::uint32 curplayerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_AccountStruct_2eproto();
  friend void protobuf_AssignDesc_AccountStruct_2eproto();
  friend void protobuf_ShutdownFile_AccountStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBAccount* default_instance_;
};
// ===================================================================


// ===================================================================

// PBAccountFlag

// optional string accountname = 1;
inline bool PBAccountFlag::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAccountFlag::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAccountFlag::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAccountFlag::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& PBAccountFlag::accountname() const {
  return *accountname_;
}
inline void PBAccountFlag::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void PBAccountFlag::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void PBAccountFlag::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBAccountFlag::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* PBAccountFlag::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 accountid = 2;
inline bool PBAccountFlag::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBAccountFlag::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBAccountFlag::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBAccountFlag::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 PBAccountFlag::accountid() const {
  return accountid_;
}
inline void PBAccountFlag::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional uint32 acountmark = 3;
inline bool PBAccountFlag::has_acountmark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBAccountFlag::set_has_acountmark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBAccountFlag::clear_has_acountmark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBAccountFlag::clear_acountmark() {
  acountmark_ = 0u;
  clear_has_acountmark();
}
inline ::google::protobuf::uint32 PBAccountFlag::acountmark() const {
  return acountmark_;
}
inline void PBAccountFlag::set_acountmark(::google::protobuf::uint32 value) {
  set_has_acountmark();
  acountmark_ = value;
}

// optional uint64 loginsn = 4;
inline bool PBAccountFlag::has_loginsn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBAccountFlag::set_has_loginsn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBAccountFlag::clear_has_loginsn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBAccountFlag::clear_loginsn() {
  loginsn_ = GOOGLE_ULONGLONG(0);
  clear_has_loginsn();
}
inline ::google::protobuf::uint64 PBAccountFlag::loginsn() const {
  return loginsn_;
}
inline void PBAccountFlag::set_loginsn(::google::protobuf::uint64 value) {
  set_has_loginsn();
  loginsn_ = value;
}

// -------------------------------------------------------------------

// PBAccount

// optional .PBAccountFlag accountflag = 1;
inline bool PBAccount::has_accountflag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAccount::set_has_accountflag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAccount::clear_has_accountflag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAccount::clear_accountflag() {
  if (accountflag_ != NULL) accountflag_->::PBAccountFlag::Clear();
  clear_has_accountflag();
}
inline const ::PBAccountFlag& PBAccount::accountflag() const {
  return accountflag_ != NULL ? *accountflag_ : *default_instance_->accountflag_;
}
inline ::PBAccountFlag* PBAccount::mutable_accountflag() {
  set_has_accountflag();
  if (accountflag_ == NULL) accountflag_ = new ::PBAccountFlag;
  return accountflag_;
}
inline ::PBAccountFlag* PBAccount::release_accountflag() {
  clear_has_accountflag();
  ::PBAccountFlag* temp = accountflag_;
  accountflag_ = NULL;
  return temp;
}

// optional uint32 plattype = 2;
inline bool PBAccount::has_plattype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBAccount::set_has_plattype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBAccount::clear_has_plattype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBAccount::clear_plattype() {
  plattype_ = 0u;
  clear_has_plattype();
}
inline ::google::protobuf::uint32 PBAccount::plattype() const {
  return plattype_;
}
inline void PBAccount::set_plattype(::google::protobuf::uint32 value) {
  set_has_plattype();
  plattype_ = value;
}

// optional uint32 platid = 3;
inline bool PBAccount::has_platid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBAccount::set_has_platid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBAccount::clear_has_platid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBAccount::clear_platid() {
  platid_ = 0u;
  clear_has_platid();
}
inline ::google::protobuf::uint32 PBAccount::platid() const {
  return platid_;
}
inline void PBAccount::set_platid(::google::protobuf::uint32 value) {
  set_has_platid();
  platid_ = value;
}

// optional uint32 createTime = 4;
inline bool PBAccount::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBAccount::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBAccount::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBAccount::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 PBAccount::createtime() const {
  return createtime_;
}
inline void PBAccount::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional uint32 loginTime = 5;
inline bool PBAccount::has_logintime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBAccount::set_has_logintime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBAccount::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBAccount::clear_logintime() {
  logintime_ = 0u;
  clear_has_logintime();
}
inline ::google::protobuf::uint32 PBAccount::logintime() const {
  return logintime_;
}
inline void PBAccount::set_logintime(::google::protobuf::uint32 value) {
  set_has_logintime();
  logintime_ = value;
}

// optional string ip = 6;
inline bool PBAccount::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBAccount::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBAccount::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBAccount::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PBAccount::ip() const {
  return *ip_;
}
inline void PBAccount::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBAccount::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBAccount::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBAccount::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* PBAccount::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 netip = 7;
inline bool PBAccount::has_netip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBAccount::set_has_netip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBAccount::clear_has_netip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBAccount::clear_netip() {
  netip_ = GOOGLE_ULONGLONG(0);
  clear_has_netip();
}
inline ::google::protobuf::uint64 PBAccount::netip() const {
  return netip_;
}
inline void PBAccount::set_netip(::google::protobuf::uint64 value) {
  set_has_netip();
  netip_ = value;
}

// optional string passwd = 8;
inline bool PBAccount::has_passwd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBAccount::set_has_passwd() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBAccount::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBAccount::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& PBAccount::passwd() const {
  return *passwd_;
}
inline void PBAccount::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void PBAccount::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void PBAccount::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBAccount::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* PBAccount::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 worldID = 9;
inline bool PBAccount::has_worldid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBAccount::set_has_worldid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBAccount::clear_has_worldid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBAccount::clear_worldid() {
  worldid_ = 0u;
  clear_has_worldid();
}
inline ::google::protobuf::uint32 PBAccount::worldid() const {
  return worldid_;
}
inline void PBAccount::set_worldid(::google::protobuf::uint32 value) {
  set_has_worldid();
  worldid_ = value;
}

// optional uint32 curPlayerID = 10;
inline bool PBAccount::has_curplayerid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBAccount::set_has_curplayerid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBAccount::clear_has_curplayerid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBAccount::clear_curplayerid() {
  curplayerid_ = 0u;
  clear_has_curplayerid();
}
inline ::google::protobuf::uint32 PBAccount::curplayerid() const {
  return curplayerid_;
}
inline void PBAccount::set_curplayerid(::google::protobuf::uint32 value) {
  set_has_curplayerid();
  curplayerid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AccountStruct_2eproto__INCLUDED
