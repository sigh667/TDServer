// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CASProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* _emPC2S_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_SinglePvp_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_SinglePvp_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Weal_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Weal_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Corps_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Corps_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_PvpWar_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_PvpWar_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_EquipColumn_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Fashion_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Title_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Trade_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_SaleMoney_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Auction_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Copymap_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Faction_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Faction_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Mail_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Player_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Common_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Skill_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Buff_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Team_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Item_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Quest_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Store_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Prize_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_TopList_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Friend_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Bingfu_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Wulue_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Wentao_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_DropItem_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Identity_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Wuxue_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Dart_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_FactionBoss_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_ClimbTower_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_AnswerQuestion_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_WorldBoss_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Activity_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Relive_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emC2S_Manor_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emPS2C_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_EquipColumn_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Fashion_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Title_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Trade_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_SaleMoney_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Auction_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Mail_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Player_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Common_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Skill_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Buff_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Counter_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Team_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Item_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Quest_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Store_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Prize_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Copymap_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_TopList_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Friend_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Wulue_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Wentao_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_DropItem_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Broadcast_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Identity_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Wuxue_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Dart_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_FactionBoss_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_ClimbTower_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_AnswerQuestion_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_GreatwallTrain_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_WorldBoss_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Activity_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Relive_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emS2C_Manor_Protocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CASProtocol_2eproto() {
  protobuf_AddDesc_CASProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CASProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  _emPC2S_Protocol_descriptor_ = file->enum_type(0);
  _emC2S_SinglePvp_Protocol_descriptor_ = file->enum_type(1);
  _emS2C_SinglePvp_Protocol_descriptor_ = file->enum_type(2);
  _emC2S_Weal_Protocol_descriptor_ = file->enum_type(3);
  _emS2C_Weal_Protocol_descriptor_ = file->enum_type(4);
  _emC2S_Corps_Protocol_descriptor_ = file->enum_type(5);
  _emS2C_Corps_Protocol_descriptor_ = file->enum_type(6);
  _emC2S_PvpWar_Protocol_descriptor_ = file->enum_type(7);
  _emS2C_PvpWar_Protocol_descriptor_ = file->enum_type(8);
  _emC2S_EquipColumn_Protocol_descriptor_ = file->enum_type(9);
  _emC2S_Fashion_Protocol_descriptor_ = file->enum_type(10);
  _emC2S_Title_Protocol_descriptor_ = file->enum_type(11);
  _emC2S_Trade_Protocol_descriptor_ = file->enum_type(12);
  _emC2S_SaleMoney_Protocol_descriptor_ = file->enum_type(13);
  _emC2S_Auction_Protocol_descriptor_ = file->enum_type(14);
  _emC2S_Copymap_Protocol_descriptor_ = file->enum_type(15);
  _emC2S_Faction_Protocol_descriptor_ = file->enum_type(16);
  _emS2C_Faction_Protocol_descriptor_ = file->enum_type(17);
  _emC2S_Mail_Protocol_descriptor_ = file->enum_type(18);
  _emC2S_Player_Protocol_descriptor_ = file->enum_type(19);
  _emC2S_Common_Protocol_descriptor_ = file->enum_type(20);
  _emC2S_Skill_Protocol_descriptor_ = file->enum_type(21);
  _emC2S_Buff_Protocol_descriptor_ = file->enum_type(22);
  _emC2S_Team_Protocol_descriptor_ = file->enum_type(23);
  _emC2S_Item_Protocol_descriptor_ = file->enum_type(24);
  _emC2S_Quest_Protocol_descriptor_ = file->enum_type(25);
  _emC2S_Store_Protocol_descriptor_ = file->enum_type(26);
  _emC2S_Prize_Protocol_descriptor_ = file->enum_type(27);
  _emC2S_TopList_Protocol_descriptor_ = file->enum_type(28);
  _emC2S_Friend_Protocol_descriptor_ = file->enum_type(29);
  _emC2S_Bingfu_Protocol_descriptor_ = file->enum_type(30);
  _emC2S_Wulue_Protocol_descriptor_ = file->enum_type(31);
  _emC2S_Wentao_Protocol_descriptor_ = file->enum_type(32);
  _emC2S_DropItem_Protocol_descriptor_ = file->enum_type(33);
  _emC2S_Identity_Protocol_descriptor_ = file->enum_type(34);
  _emC2S_Wuxue_Protocol_descriptor_ = file->enum_type(35);
  _emC2S_Dart_Protocol_descriptor_ = file->enum_type(36);
  _emC2S_FactionBoss_Protocol_descriptor_ = file->enum_type(37);
  _emC2S_ClimbTower_Protocol_descriptor_ = file->enum_type(38);
  _emC2S_AnswerQuestion_Protocol_descriptor_ = file->enum_type(39);
  _emC2S_WorldBoss_Protocol_descriptor_ = file->enum_type(40);
  _emC2S_Activity_Protocol_descriptor_ = file->enum_type(41);
  _emC2S_Relive_Protocol_descriptor_ = file->enum_type(42);
  _emC2S_Manor_Protocol_descriptor_ = file->enum_type(43);
  _emPS2C_Protocol_descriptor_ = file->enum_type(44);
  _emS2C_EquipColumn_Protocol_descriptor_ = file->enum_type(45);
  _emS2C_Fashion_Protocol_descriptor_ = file->enum_type(46);
  _emS2C_Title_Protocol_descriptor_ = file->enum_type(47);
  _emS2C_Trade_Protocol_descriptor_ = file->enum_type(48);
  _emS2C_SaleMoney_Protocol_descriptor_ = file->enum_type(49);
  _emS2C_Auction_Protocol_descriptor_ = file->enum_type(50);
  _emS2C_Mail_Protocol_descriptor_ = file->enum_type(51);
  _emS2C_Player_Protocol_descriptor_ = file->enum_type(52);
  _emS2C_Common_Protocol_descriptor_ = file->enum_type(53);
  _emS2C_Skill_Protocol_descriptor_ = file->enum_type(54);
  _emS2C_Buff_Protocol_descriptor_ = file->enum_type(55);
  _emS2C_Counter_Protocol_descriptor_ = file->enum_type(56);
  _emS2C_Team_Protocol_descriptor_ = file->enum_type(57);
  _emS2C_Item_Protocol_descriptor_ = file->enum_type(58);
  _emS2C_Quest_Protocol_descriptor_ = file->enum_type(59);
  _emS2C_Store_Protocol_descriptor_ = file->enum_type(60);
  _emS2C_Prize_Protocol_descriptor_ = file->enum_type(61);
  _emS2C_Copymap_Protocol_descriptor_ = file->enum_type(62);
  _emS2C_TopList_Protocol_descriptor_ = file->enum_type(63);
  _emS2C_Friend_Protocol_descriptor_ = file->enum_type(64);
  _emS2C_Wulue_Protocol_descriptor_ = file->enum_type(65);
  _emS2C_Wentao_Protocol_descriptor_ = file->enum_type(66);
  _emS2C_DropItem_Protocol_descriptor_ = file->enum_type(67);
  _emS2C_Broadcast_Protocol_descriptor_ = file->enum_type(68);
  _emS2C_Identity_Protocol_descriptor_ = file->enum_type(69);
  _emS2C_Wuxue_Protocol_descriptor_ = file->enum_type(70);
  _emS2C_Dart_Protocol_descriptor_ = file->enum_type(71);
  _emS2C_FactionBoss_Protocol_descriptor_ = file->enum_type(72);
  _emS2C_ClimbTower_Protocol_descriptor_ = file->enum_type(73);
  _emS2C_AnswerQuestion_Protocol_descriptor_ = file->enum_type(74);
  _emS2C_GreatwallTrain_Protocol_descriptor_ = file->enum_type(75);
  _emS2C_WorldBoss_Protocol_descriptor_ = file->enum_type(76);
  _emS2C_Activity_Protocol_descriptor_ = file->enum_type(77);
  _emS2C_Relive_Protocol_descriptor_ = file->enum_type(78);
  _emS2C_Manor_Protocol_descriptor_ = file->enum_type(79);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CASProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_CASProtocol_2eproto() {
}

void protobuf_AddDesc_CASProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CASProtocol.proto*\314\010\n\020_emPC2S_Protocol"
    "\022\031\n\025P_C2S_Protocol_Player\020\000\022\031\n\025P_C2S_Pro"
    "tocol_Common\020\001\022\030\n\024P_C2S_Protocol_Skill\020\002"
    "\022\027\n\023P_C2S_Protocol_Buff\020\003\022\032\n\026P_C2S_Proto"
    "col_Counter\020\004\022\027\n\023P_C2S_Protocol_Team\020\005\022\030"
    "\n\024P_C2S_Protocol_Prize\020\006\022\027\n\023P_C2S_Protoc"
    "ol_Item\020\007\022\030\n\024P_C2S_Protocol_Quest\020\010\022\027\n\023P"
    "_C2S_Protocol_Mail\020\t\022\032\n\026P_C2S_Protocol_C"
    "opymap\020\n\022\030\n\024P_C2S_Protocol_Trade\020\013\022\034\n\030P_"
    "C2S_Protocol_SaleMoney\020\014\022\032\n\026P_C2S_Protoc"
    "ol_Auction\020\r\022\030\n\024P_C2S_Protocol_Store\020\016\022\032"
    "\n\026P_C2S_Protocol_Faction\020\017\022\032\n\026P_C2S_Prot"
    "ocol_TopList\020\020\022\031\n\025P_C2S_Protocol_PvpWar\020"
    "\021\022\031\n\025P_C2S_Protocol_Friend\020\022\022\030\n\024P_C2S_Pr"
    "otocol_Wulue\020\023\022\031\n\025P_C2S_Protocol_Wentao\020"
    "\024\022\033\n\027P_C2S_Protocol_DropItem\020\025\022\033\n\027P_C2S_"
    "Protocol_Identity\020\026\022\030\n\024P_C2S_Protocol_Wu"
    "xue\020\027\022\027\n\023P_C2S_Protocol_Dart\020\030\022\036\n\032P_C2S_"
    "Protocol_FactionBoss\020\031\022\030\n\024P_C2S_Protocol"
    "_Title\020\032\022\032\n\026P_C2S_Protocol_Fashion\020\033\022\036\n\032"
    "P_C2S_Protocol_EquipColumn\020\034\022\035\n\031P_C2S_Pr"
    "otocol_ClimbTower\020\035\022!\n\035P_C2S_Protocol_An"
    "swerQuestion\020\036\022!\n\035P_C2S_Protocol_GreatWa"
    "llTrain\020\037\022\034\n\030P_C2S_Protocol_WorldBoss\020 \022"
    "\033\n\027P_C2S_Protocol_Activity\020!\022\031\n\025P_C2S_Pr"
    "otocol_Relive\020\"\022\030\n\024P_C2S_Protocol_Corps\020"
    "#\022\027\n\023P_C2S_Protocol_Weal\020$\022\030\n\024P_C2S_Prot"
    "ocol_Manor\020%\022\034\n\030P_C2S_Protocol_SinglePvp"
    "\020&*r\n\031_emC2S_SinglePvp_Protocol\022\034\n\030C2S_S"
    "inglePvp_EnterMatch\020\000\022\033\n\027C2S_SinglePvp_E"
    "xitMatch\020\001\022\032\n\026C2S_SinglePvp_DayPrize\020\002*\216"
    "\001\n\031_emS2C_SinglePvp_Protocol\022\034\n\030S2C_Sing"
    "lePvp_EnterMatch\020\000\022\033\n\027S2C_SinglePvp_Exit"
    "Match\020\001\022\032\n\026S2C_SinglePvp_DayPrize\020\002\022\032\n\026S"
    "2C_SinglePvp_SynScore\020\003*/\n\024_emC2S_Weal_P"
    "rotocol\022\027\n\023C2S_Weal_LoginPrize\020\000*/\n\024_emS"
    "2C_Weal_Protocol\022\027\n\023S2C_Weal_LoginPrize\020"
    "\000*{\n\025_emC2S_Corps_Protocol\022\025\n\021C2S_Corps_"
    "GetInfo\020\000\022\034\n\030C2S_Corps_SetDeclaration\020\001\022"
    "\024\n\020C2S_Corps_SetJob\020\002\022\027\n\023C2S_Corps_SynAv"
    "atar\020\003*z\n\025_emS2C_Corps_Protocol\022\022\n\016S2C_C"
    "orps_Info\020\000\022\034\n\030S2C_Corps_SetDeclaration\020"
    "\001\022\024\n\020S2C_Corps_SetJob\020\002\022\031\n\025S2C_Corps_For"
    "bitSpeak\020\003*\211\001\n\026_emC2S_PvpWar_Protocol\022\034\n"
    "\030C2S_PvpWar_EnterMatchAsk\020\000\022\033\n\027C2S_PvpWa"
    "r_ExitMatchAsk\020\001\022\027\n\023C2S_PvpWar_ReadyAsk\020"
    "\002\022\033\n\027C2S_PvpWar_ExitReadyAsk\020\003*\245\001\n\026_emS2"
    "C_PvpWar_Protocol\022\034\n\030S2C_PvpWar_EnterMat"
    "chAck\020\000\022\033\n\027S2C_PvpWar_ExitMatchAck\020\001\022\027\n\023"
    "S2C_PvpWar_ReadyAck\020\002\022\033\n\027S2C_PvpWar_Exit"
    "ReadyAck\020\003\022\032\n\026S2C_PvpWar_CompleteAck\020\004*U"
    "\n\033_emC2S_EquipColumn_Protocol\022\033\n\027C2S_Equ"
    "ipColumn_Enhance\020\000\022\031\n\025C2S_EquipColumn_Fo"
    "rge\020\001*I\n\027_emC2S_Fashion_Protocol\022\025\n\021C2S_"
    "Fashion_Equip\020\000\022\027\n\023C2S_Fashion_UnEquip\020\001"
    "*C\n\025_emC2S_Title_Protocol\022\023\n\017C2S_Title_E"
    "quip\020\000\022\025\n\021C2S_Title_UnEquip\020\001*\337\001\n\025_emC2S"
    "_Trade_Protocol\022\023\n\017C2S_Trade_apply\020\000\022\024\n\020"
    "C2S_Trade_answer\020\001\022\025\n\021C2S_Trade_addItem\020"
    "\002\022\025\n\021C2S_Trade_delItem\020\003\022\026\n\022C2S_Trade_se"
    "tMoney\020\004\022\022\n\016C2S_Trade_lock\020\005\022\024\n\020C2S_Trad"
    "e_unlock\020\006\022\025\n\021C2S_Trade_confirm\020\007\022\024\n\020C2S"
    "_Trade_cancel\020\010*\205\001\n\031_emC2S_SaleMoney_Pro"
    "tocol\022\026\n\022C2S_SaleMoney_sale\020\000\022\034\n\030C2S_Sal"
    "eMoney_salecancel\020\001\022\026\n\022C2S_SaleMoney_lis"
    "t\020\002\022\032\n\026C2S_SaleMoney_tradelog\020\003*\213\001\n\027_emC"
    "2S_Auction_Protocol\022\024\n\020C2S_Auction_sale\020"
    "\000\022\032\n\026C2S_Auction_salecancel\020\001\022\023\n\017C2S_Auc"
    "tion_buy\020\002\022\024\n\020C2S_Auction_list\020\003\022\023\n\017C2S_"
    "Auction_ave\020\004*\364\001\n\027_emC2S_Copymap_Protoco"
    "l\022\026\n\022C2S_Copymap_Create\020\000\022\024\n\020C2S_Copymap"
    "_Exit\020\001\022\026\n\022C2S_Copymap_Invite\020\002\022\034\n\030C2S_C"
    "opymap_AcceptInvite\020\003\022\036\n\032C2S_Copymap_Tea"
    "mMemberInfo\020\004\022\030\n\024C2S_Copymap_EnterNpc\020\005\022"
    "!\n\035C2S_Copymap_FindAttackMonster\020\006\022\030\n\024C2"
    "S_Copymap_UnAcitve\020\007*\311\017\n\027_emC2S_Faction_"
    "Protocol\022\026\n\022C2S_Faction_Create\020\000\022\025\n\021C2S_"
    "Faction_Apply\020\001\022\024\n\020C2S_Faction_List\020\002\022\024\n"
    "\020C2S_Faction_Quit\020\003\022\032\n\026C2S_Faction_Membe"
    "rList\020\004\022\023\n\017C2S_Faction_Syn\020\005\022\030\n\024C2S_Fact"
    "ion_Applying\020\006\022\037\n\033C2S_Faction_AgreeInvit"
    "eJoin\020\010\022 \n\034C2S_Faction_RefuseInviteJoin\020"
    "\t\022 \n\034C2S_Faction_UpgradeSelfSkill\020\013\022\036\n\032C"
    "2S_Faction_WatchSelfSkill\020\014\022!\n\035C2S_Facti"
    "on_WatchStudyFaction\020\r\022\037\n\033C2S_Faction_Wa"
    "tchOhterSkill\020\016\022\036\n\032C2S_Faction_FlyFactio"
    "nHome\020\017\022\034\n\030C2S_Faction_AgreeImpeach\020\020\022\030\n"
    "\024C2S_Faction_Transfer\020\021\022\027\n\023C2S_Faction_I"
    "mpeach\020\022\022\025\n\021G2W_Faction_Begin\020\036\022%\n!G2W_F"
    "action_SetMemberContribution\020\037\022\033\n\027G2W_Fa"
    "ction_TopListList\020 \022\036\n\032G2W_Faction_TopLi"
    "stFaction\020!\022\023\n\017G2W_Faction_End\0201\022#\n\037C2S_"
    "Faction_Privilege_Opt_Begin\0202\022\031\n\025C2S_Fac"
    "tion_ApplyList\0203\022\032\n\026C2S_Faction_AgreeApp"
    "ly\0204\022\033\n\027C2S_Faction_RefuseApply\0205\022\032\n\026C2S"
    "_Faction_ClearApply\0206\022\031\n\025C2S_Faction_Aut"
    "oApply\0207\022\027\n\023C2S_Faction_Promote\0208\022\027\n\023C2S"
    "_Faction_Dismiss\0209\022\031\n\025C2S_Faction_SetBea"
    "uty\020:\022\026\n\022C2S_Faction_Remove\020;\022\032\n\026C2S_Fac"
    "tion_InviteJoin\020<\022\033\n\027C2S_Faction_BannerS"
    "peak\020=\022\030\n\024C2S_Faction_SetElite\020>\022\024\n\020C2S_"
    "Faction_Edit\020\?\022\035\n\031C2S_Faction_SetBannerN"
    "ame\020@\022\034\n\030C2S_Faction_DevelopSkill\020A\022#\n\037C"
    "2S_Faction_SuspendDevelopSkill\020B\022\031\n\025C2S_"
    "Faction_OpenStudy\020C\022\032\n\026C2S_Faction_Close"
    "Study\020D\022 \n\034C2S_Faction_AddStudyRelation\020"
    "E\022 \n\034C2S_Faction_DelStudyRelation\020F\022\033\n\027C"
    "2S_Faction_ChangeCorps\020G\022\027\n\023C2S_Faction_"
    "SetName\020H\022\032\n\026C2S_Faction_AllotMoney\020I\022\031\n"
    "\025C2S_Faction_AllotItem\020J\022\032\n\026C2S_Faction_"
    "DeclareWar\020K\022\034\n\030C2S_Faction_SetPrivilege"
    "\020L\022\031\n\025C2S_Faction_BuyEnergy\020M\022\027\n\023C2S_Fac"
    "tion_UpLevel\020N\022\036\n\032C2S_Faction_SuspendUpL"
    "evel\020O\022\037\n\033C2S_Faction_UpBuildingLevel\020P\022"
    "&\n\"C2S_Faction_SuspendUpBuildingLevel\020Q\022"
    "\035\n\031C2S_Faction_StartActivity\020R\022\036\n\032C2S_Fa"
    "ction_AllotWarehouse\020S\022\037\n\033C2S_Faction_De"
    "leteWarehouse\020T\022\033\n\027C2S_Faction_DonateIte"
    "ms\020U\022\036\n\032C2S_Faction_SetDonateItems\020V\022\033\n\027"
    "C2S_Faction_DonateMoney\020W\022\031\n\025C2S_Faction"
    "_JoinUnion\020X\022\031\n\025C2S_Faction_QuitUnion\020Y\022"
    " \n\034C2S_Faction_AddFriendFaction\020Z\022 \n\034C2S"
    "_Faction_DelFriendFaction\020[\022\031\n\025C2S_Facti"
    "on_InviteWar\020\\\022\027\n\023C2S_Faction_Require\020]\022"
    "\034\n\030C2S_Faction_CompleteTask\020^\022\031\n\025C2S_Fac"
    "tion_DrinkWine\020_*\221\024\n\027_emS2C_Faction_Prot"
    "ocol\022\026\n\022S2C_Faction_Create\020\000\022\025\n\021S2C_Fact"
    "ion_Apply\020\001\022\024\n\020S2C_Faction_List\020\002\022\024\n\020S2C"
    "_Faction_Quit\020\003\022\032\n\026S2C_Faction_MemberLis"
    "t\020\004\022\023\n\017S2C_Faction_Syn\020\005\022\030\n\024S2C_Faction_"
    "Applying\020\006\022\034\n\030S2C_Faction_BeInviteJoin\020\007"
    "\022\037\n\033S2C_Faction_AgreeInviteJoin\020\010\022 \n\034S2C"
    "_Faction_RefuseInviteJoin\020\t\022 \n\034S2C_Facti"
    "on_InviteJoinResult\020\n\022 \n\034S2C_Faction_Upg"
    "radeSelfSkill\020\013\022\036\n\032S2C_Faction_WatchSelf"
    "Skill\020\014\022!\n\035S2C_Faction_WatchStudyFaction"
    "\020\r\022\037\n\033S2C_Faction_WatchOhterSkill\020\016\022\036\n\032S"
    "2C_Faction_FlyFactionHome\020\017\022\031\n\025S2C_Facti"
    "on_AutoApply\020\020\022\"\n\036S2C_Faction_UpdateFact"
    "ionMoney\020\037\022\036\n\032S2C_Faction_AddEvent_Depot"
    "\020 \022#\n\037S2C_Faction_AddEvent_Experience\020!\022"
    "\037\n\033S2C_Faction_AddEvent_Member\020\"\022\030\n\024S2C_"
    "Faction_EventAll\020#\022\031\n\025S2C_Faction_DepotI"
    "nfo\020$\022\032\n\026S2C_Faction_UpdateItem\020%\022\027\n\023S2C"
    "_Faction_NewItem\020&\022\032\n\026S2C_Faction_Delete"
    "Item\020\'\022#\n\037S2C_Faction_UpdateFactionEnerg"
    "y\020(\022\'\n#S2C_Faction_UpdateFactionExperien"
    "ce\020)\022!\n\035S2C_Faction_UpdateFactionBoom\020*\022"
    "!\n\035S2C_Faction_DonateMoney_Broad\020+\022\"\n\036S2"
    "C_Faction_UpdateFactionLevel\020,\022\"\n\036S2C_Fa"
    "ction_UpdateFactionStone\020-\022#\n\037S2C_Factio"
    "n_UpdateFactionSliver\020.\022&\n\"S2C_Faction_U"
    "pdateSelfContribution\020/\022$\n S2C_Faction_U"
    "pdateSelfExperience\0200\022\031\n\025S2C_Faction_Opt"
    "Result\0201\022#\n\037S2C_Faction_Privilege_Opt_Be"
    "gin\0202\022\024\n\020S2C_Faction_Edit\0203\022\032\n\026S2C_Facti"
    "on_InviteJoin\0204\022\031\n\025S2C_Faction_ApplyList"
    "\0205\022\032\n\026S2C_Faction_AgreeApply\0206\022\033\n\027S2C_Fa"
    "ction_RefuseApply\0207\022\026\n\022S2C_Faction_Remov"
    "e\0208\022\027\n\023S2C_Faction_Promote\0209\022\027\n\023S2C_Fact"
    "ion_Dismiss\020:\022\030\n\024S2C_Faction_Transfer\020;\022"
    "\030\n\024S2C_Faction_SetElite\020<\022\031\n\025S2C_Faction"
    "_SetBeauty\020=\022\027\n\023S2C_Faction_Impeach\020>\022\034\n"
    "\030S2C_Faction_SetPrivilege\020\?\022\031\n\025S2C_Facti"
    "on_BuyEnergy\020@\022\027\n\023S2C_Faction_UpLevel\020A\022"
    "\036\n\032S2C_Faction_SuspendUpLevel\020B\022\037\n\033S2C_F"
    "action_UpBuildingLevel\020C\022&\n\"S2C_Faction_"
    "SuspendUpBuildingLevel\020D\022\034\n\030S2C_Faction_"
    "DevelopSkill\020E\022#\n\037S2C_Faction_SuspendDev"
    "elopSkill\020F\022\035\n\031S2C_Faction_StartActivity"
    "\020G\022\036\n\032S2C_Faction_AllotWarehouse\020H\022\037\n\033S2"
    "C_Faction_DeleteWarehouse\020I\022\033\n\027S2C_Facti"
    "on_DonateItems\020J\022\036\n\032S2C_Faction_SetDonat"
    "eItems\020K\022\033\n\027S2C_Faction_DonateMoney\020L\022\032\n"
    "\026S2C_Faction_AllotMoney\020M\022\031\n\025S2C_Faction"
    "_AllotItem\020N\022\031\n\025S2C_Faction_JoinUnion\020O\022"
    "\031\n\025S2C_Faction_QuitUnion\020P\022 \n\034S2C_Factio"
    "n_AddFriendFaction\020Q\022 \n\034S2C_Faction_DelF"
    "riendFaction\020R\022\032\n\026S2C_Faction_DeclareWar"
    "\020S\022\031\n\025S2C_Faction_InviteWar\020T\022\031\n\025S2C_Fac"
    "tion_OpenStudy\020U\022\032\n\026S2C_Faction_CloseStu"
    "dy\020V\022 \n\034S2C_Faction_AddStudyRelation\020W\022 "
    "\n\034S2C_Faction_DelStudyRelation\020X\022\027\n\023S2C_"
    "Faction_Require\020Y\022\032\n\026S2C_Faction_ClearAp"
    "ply\020Z\022\034\n\030S2C_Faction_CompleteTask\020[\022\034\n\030S"
    "2C_Faction_AgreeImpeach\020\\\022\031\n\025S2C_Faction"
    "_DrinkWine\020]\022\035\n\031S2C_Faction_DrinkWineInf"
    "o\020^\022\030\n\024S2C_Faction_SynElite\020_\022\031\n\025S2C_Fac"
    "tion_SynBeauty\020`\022\035\n\031S2C_Faction_ImpeachW"
    "indow\020a\022\033\n\027S2C_Faction_ForbitSpeak\020b*S\n\024"
    "_emC2S_Mail_Protocol\022\021\n\rC2S_Mail_Read\020\000\022"
    "\023\n\017C2S_Mail_Delete\020\001\022\023\n\017C2S_Mail_Reward\020"
    "\002*\205\001\n\026_emC2S_Player_Protocol\022\032\n\026C2S_Play"
    "er_CreatPlayer\020\000\022\030\n\024C2S_Player_DelPlayer"
    "\020\001\022\033\n\027C2S_Player_SelectPlayer\020\002\022\030\n\024C2S_P"
    "layer_CheckName\020\003*\267\005\n\026_emC2S_Common_Prot"
    "ocol\022\021\n\rC2S_Common_Go\020\000\022\031\n\025C2S_Common_Cl"
    "ientSave\020\001\022\023\n\017C2S_Common_Move\020\002\022\027\n\023C2S_C"
    "ommon_MoveStop\020\003\022\023\n\017C2S_Common_Turn\020\004\022\024\n"
    "\020C2S_Common_GMCmd\020\005\022\025\n\021C2S_Common_Pickup"
    "\020\006\022\034\n\030C2S_Common_GetClientData\020\007\022\031\n\025C2S_"
    "Common_FindPlayer\020\010\022\030\n\024C2S_Common_Promot"
    "ion\020\t\022\031\n\025C2S_Common_PlaneEnter\020\013\022\031\n\025C2S_"
    "Common_PlaneLeave\020\014\022\027\n\023C2S_Common_BossLi"
    "st\020\r\022\022\n\016C2S_Common_Fly\020\016\022\033\n\027C2S_Common_S"
    "earchPlayer\020\017\022 \n\034C2S_Common_NpcDialogCom"
    "plete\020\020\022\036\n\032C2S_Common_UnActiveMonster\020\021\022"
    "\"\n\036C2S_Common_GetBattleAttrDetail\020\022\022\025\n\021C"
    "2S_Common_PKType\020\023\022\030\n\024C2S_Common_TakeASe"
    "at\020\024\022\026\n\022C2S_Common_TaskFly\020\025\022\032\n\026C2S_Comm"
    "on_ForbitSpeak\020\026\022 \n\034C2S_Common_StrongerG"
    "etReward\020\027\022\037\n\033C2S_Common_GetSubFightPowe"
    "r\020\030\022\036\n\032C2S_Common_CopymapUnactive\020\031*\202\001\n\025"
    "_emC2S_Skill_Protocol\022\021\n\rC2S_Skill_Use\020\000"
    "\022\027\n\023C2S_Skill_UseCharge\020\001\022\023\n\017C2S_Skill_B"
    "reak\020\002\022\021\n\rC2S_Skill_Add\020\003\022\025\n\021C2S_Skill_U"
    "pgrade\020\004*(\n\024_emC2S_Buff_Protocol\022\020\n\014C2S_"
    "Buff_Del\020\000*\302\010\n\024_emC2S_Team_Protocol\022\023\n\017C"
    "2S_Team_Invite\020\000\022\031\n\025C2S_Team_AcceptInvit"
    "e\020\001\022\022\n\016C2S_Team_Apply\020\002\022\030\n\024C2S_Team_Acce"
    "ptApply\020\003\022\022\n\016C2S_Team_Leave\020\004\022\031\n\025C2S_Tea"
    "m_ChangeLeader\020\005\022\030\n\024C2S_Team_Publish_Ask"
    "\020\006\022\033\n\027C2S_Team_Publish_Cancel\020\007\022\033\n\027C2S_T"
    "eam_Publish_Invite\020\010\022!\n\035C2S_Team_Publish"
    "_AcceptInvite\020\t\022\031\n\025C2S_Team_Publish_List"
    "\020\n\022\021\n\rC2S_Team_Kick\020\013\022\026\n\022C2S_Team_Kick_V"
    "ote\020\014\022\025\n\021C2S_Team_SetAllot\020\r\022\032\n\026C2S_Team"
    "_SetAllot_Vote\020\016\022\033\n\027C2S_Team_NearPlayerL"
    "ist\020\017\022\031\n\025C2S_Team_NearTeamList\020\020\022\021\n\rC2S_"
    "Team_View\020\021\022\023\n\017C2S_Team_Callup\020\022\022\033\n\027C2S_"
    "Team_AcceptIdentity\020\023\022\033\n\027C2S_Team_CheckC"
    "ondition\020\024\022\023\n\017C2S_Team_Create\020\025\022\026\n\022C2S_T"
    "eam_SetTarget\020\026\022\032\n\026C2S_Team_SetAutoAccep"
    "t\020\027\022\031\n\025C2S_Team_SetAutoMatch\020\030\022\035\n\031C2S_Te"
    "am_SetAutoMatchJoin\020\031\022!\n\035C2S_Team_SetAut"
    "oMatchJobLimit\020\032\022\035\n\031C2S_Team_GetApplican"
    "tList\020\033\022\037\n\033C2S_Team_ClearApplicantList\020\034"
    "\022 \n\034C2S_Team_AcceptApplyFromList\020\035\022\037\n\033C2"
    "S_Team_SearchTeamByTarget\020\036\022\036\n\032C2S_Team_"
    "ApplyTeamByTarget\020\037\022$\n C2S_Team_CancleAp"
    "plyTeamByTarget\020 \022\033\n\027C2S_Team_AcceptTeam"
    "Task\020!\022!\n\035C2S_Team_EnterTeamTaskCopymap\020"
    "\"\022\035\n\031C2S_Team_CompleteTeamTask\020#\022\023\n\017C2S_"
    "Team_Follow\020$\022\032\n\026C2S_Team_RemainConfirm\020"
    "%\022\024\n\020C2S_Team_Confirm\020&*\261\004\n\024_emC2S_Item_"
    "Protocol\022\020\n\014C2S_Item_Del\020\000\022\020\n\014C2S_Item_U"
    "se\020\001\022\022\n\016C2S_Item_Equip\020\002\022\021\n\rC2S_Item_Sel"
    "l\020\003\022\024\n\020C2S_Item_BuyBack\020\004\022\022\n\016C2S_Item_Sp"
    "lit\020\005\022\021\n\rC2S_Item_Sort\020\006\022\024\n\020C2S_Item_Enh"
    "ance\020\007\022\022\n\016C2S_Item_Forge\020\010\022\024\n\020C2S_Item_I"
    "nherit\020\t\022\021\n\rC2S_Item_Make\020\n\022\025\n\021C2S_Item_"
    "Mounting\020\013\022\030\n\024C2S_Item_BingfuSplit\020\014\022\032\n\026"
    "C2S_Item_BingfuUpgrade\020\r\022\035\n\031C2S_Item_Bin"
    "gfuUpOneLevel\020\016\022\025\n\021C2S_Item_Compound\020\017\022\035"
    "\n\031C2S_Item_OpenEquipMakeDlg\020\020\022 \n\034C2S_Ite"
    "m_OpenEquipMakeOEMDlg\020\021\022\037\n\033C2S_Item_Comm"
    "itEquipMakeOEM\020\022\022\036\n\032C2S_Item_VisitEquipM"
    "akeOEM\020\023\022\031\n\025C2S_Item_EquipMakeOEM\020\024\022\036\n\032C"
    "2S_Item_EquipChangeOEMFee\020\025*u\n\025_emC2S_Qu"
    "est_Protocol\022\024\n\020C2S_Quest_Accept\020\000\022\026\n\022C2"
    "S_Quest_Complete\020\001\022\030\n\024C2S_Quest_UpdateIt"
    "em\020\002\022\024\n\020C2S_Quest_GiveUp\020\003**\n\025_emC2S_Sto"
    "re_Protocol\022\021\n\rC2S_Store_Buy\020\000*D\n\025_emC2S"
    "_Prize_Protocol\022\024\n\020C2S_Prize_Accept\020\000\022\025\n"
    "\021C2S_Prize_Abandon\020\001*G\n\027_emC2S_TopList_P"
    "rotocol\022\024\n\020C2S_TopList_List\020\000\022\026\n\022C2S_Top"
    "List_Player\020\001*t\n\026_emC2S_Friend_Protocol\022"
    "\026\n\022C2S_Friend_Add_Ask\020\000\022\026\n\022C2S_Friend_De"
    "l_Ask\020\001\022\025\n\021C2S_Friend_Answer\020\002\022\023\n\017C2S_Fr"
    "iend_Find\020\003*N\n\026_emC2S_Bingfu_Protocol\022\032\n"
    "\026C2S_Bingfu_Upgrade_Ask\020\000\022\030\n\024C2S_Bingfu_"
    "Split_Ask\020\001*n\n\025_emC2S_Wulue_Protocol\022\033\n\027"
    "C2S_Wulue_SetScheme_Ask\020\000\022\033\n\027C2S_Wulue_U"
    "pZhanlue_Ask\020\001\022\033\n\027C2S_Wulue_SetBingfu_As"
    "k\020\002*\371\001\n\026_emC2S_Wentao_Protocol\022\033\n\027C2S_We"
    "tao_SetScheme_Ask\020\000\022\031\n\025C2S_Wetao_QianXiu"
    "_Ask\020\001\022\026\n\022C2S_Wetao_TuPo_Ask\020\002\022\031\n\025C2S_We"
    "tao_Upgrate_Ask\020\003\022\033\n\027C2S_Wetao_SetBingfu"
    "_Ask\020\004\022\027\n\023C2S_Wetao_Reset_Ask\020\005\022\036\n\032C2S_W"
    "etao_ActiveScheme_Ask\020\006\022\036\n\032C2S_Wetao_Act"
    "iveBingFa_Ask\020\007*\305\001\n\030_emC2S_DropItem_Prot"
    "ocol\022\031\n\025C2S_DropItem_Info_Ask\020\000\022\031\n\025C2S_D"
    "ropItem_Dice_Ask\020\001\022\033\n\027C2S_DropItem_Assig"
    "n_Ask\020\002\022\034\n\030C2S_DropItem_PickAll_Ask\020\003\022\033\n"
    "\027C2S_DropItem_Pickup_Ask\020\004\022\033\n\027C2S_DropIt"
    "em_Abadon_Ask\020\005*\213\001\n\030_emC2S_Identity_Prot"
    "ocol\022\031\n\025C2S_Identity_Open_Ask\020\000\022\032\n\026C2S_I"
    "dentity_Learn_Ask\020\001\022\032\n\026C2S_Identity_Rese"
    "t_Ask\020\002\022\034\n\030C2S_Identity_UpSkill_Ask\020\003*\312\001"
    "\n\025_emC2S_Wuxue_Protocol\022\033\n\027C2S_Wuxue_New"
    "Scheme_Ask\020\000\022\033\n\027C2S_Wuxue_DelScheme_Ask\020"
    "\001\022\036\n\032C2S_Wuxue_ChangeScheme_Ask\020\002\022\032\n\026C2S"
    "_Wuxue_SetSkill_Ask\020\003\022\035\n\031C2S_Wuxue_SetAl"
    "lSkill_Ask\020\004\022\034\n\030C2S_Wuxue_LearnSkill_Ask"
    "\020\005*\373\001\n\024_emC2S_Dart_Protocol\022\026\n\022C2S_Dart_"
    "Check_Ask\020\000\022\026\n\022C2S_Dart_Start_Ask\020\001\022\025\n\021C"
    "2S_Dart_Quit_Ask\020\002\022\037\n\033C2S_Dart_Check_Get"
    "_Buff_Ask\020\003\022\036\n\032C2S_Dart_Check_Confirm_As"
    "k\020\004\022\032\n\026C2S_Dart_AddSupply_Ask\020\005\022\"\n\036C2S_D"
    "art_AddSupply_Confirm_Ask\020\006\022\033\n\027C2S_Dart_"
    "Back_2_Npc_Ask\020\007*\210\001\n\033_emC2S_FactionBoss_"
    "Protocol\022#\n\037C2S_FactionBoss_PersonalTop_"
    "Ask\020\000\022\"\n\036C2S_FactionBoss_FactionTop_Ask\020"
    "\001\022 \n\034C2S_FactionBoss_UnionTop_Ask\020\002*\177\n\032_"
    "emC2S_ClimbTower_Protocol\022\037\n\033C2S_ClimbTo"
    "wer_Get_Info_Ask\020\000\022\"\n\036C2S_ClimbTower_Cho"
    "osePrize_Ask\020\001\022\034\n\030C2S_ClimbTower_Clear_A"
    "sk\020\002*\?\n\036_emC2S_AnswerQuestion_Protocol\022\035"
    "\n\031C2S_AnswerQuestion_Answer\020\000*\206\001\n\031_emC2S"
    "_WorldBoss_Protocol\022\035\n\031C2S_WorldBoss_Get"
    "Info_Ask\020\000\022)\n%C2S_WorldBoss_Update_BossH"
    "urtRank_Ask\020\001\022\037\n\033C2S_WorldBoss_Goto_Boss"
    "_Ask\020\002*:\n\030_emC2S_Activity_Protocol\022\036\n\032C2"
    "S_Activity_GetReward_Ask\020\000*1\n\026_emC2S_Rel"
    "ive_Protocol\022\027\n\023C2S_Relive_Born_Ack\020\n*\246\002"
    "\n\025_emC2S_Manor_Protocol\022\036\n\032C2S_Manor_Get"
    "_All_Info_Ask\020\000\022 \n\034C2S_Manor_Get_Fight_I"
    "nfo_Ask\020\001\022\035\n\031C2S_Manor_Apply_Fight_Ask\020\002"
    "\022\035\n\031C2S_Manor_Enter_Lobby_Ask\020\003\022\031\n\025C2S_M"
    "anor_MVPVote_Ask\020\004\022*\n&G2W_Manor_BattleFi"
    "eld_FighterCount_Ask\020\005\022#\n\037G2W_Manor_Batt"
    "leField_Enter_Ask\020\006\022!\n\035G2W_Manor_GM_Set_"
    "Activity_Ask\020\007*\352\010\n\020_emPS2C_Protocol\022\031\n\025P"
    "_S2C_Protocol_Player\020\000\022\031\n\025P_S2C_Protocol"
    "_Common\020\001\022\030\n\024P_S2C_Protocol_Skill\020\002\022\027\n\023P"
    "_S2C_Protocol_Buff\020\003\022\032\n\026P_S2C_Protocol_C"
    "ounter\020\004\022\027\n\023P_S2C_Protocol_Team\020\005\022\030\n\024P_S"
    "2C_Protocol_Prize\020\006\022\027\n\023P_S2C_Protocol_It"
    "em\020\007\022\030\n\024P_S2C_Protocol_Quest\020\010\022\027\n\023P_S2C_"
    "Protocol_Mail\020\t\022\032\n\026P_S2C_Protocol_Copyma"
    "p\020\n\022\030\n\024P_S2C_Protocol_Trade\020\013\022\034\n\030P_S2C_P"
    "rotocol_SaleMoney\020\014\022\032\n\026P_S2C_Protocol_Au"
    "ction\020\r\022\030\n\024P_S2C_Protocol_Store\020\016\022\032\n\026P_S"
    "2C_Protocol_Faction\020\017\022\032\n\026P_S2C_Protocol_"
    "TopList\020\020\022\031\n\025P_S2C_Protocol_Friend\020\021\022\031\n\025"
    "P_S2C_Protocol_PvpWar\020\022\022\030\n\024P_S2C_Protoco"
    "l_Wulue\020\023\022\031\n\025P_S2C_Protocol_Wentao\020\024\022\033\n\027"
    "P_S2C_Protocol_DropItem\020\025\022\034\n\030P_S2C_Proto"
    "col_Broadcast\020\026\022\033\n\027P_S2C_Protocol_Identi"
    "ty\020\027\022\030\n\024P_S2C_Protocol_Wuxue\020\030\022\027\n\023P_S2C_"
    "Protocol_Dart\020\031\022\036\n\032P_S2C_Protocol_Factio"
    "nBoss\020\032\022\030\n\024P_S2C_Protocol_Title\020\033\022\032\n\026P_S"
    "2C_Protocol_Fashion\020\034\022\036\n\032P_S2C_Protocol_"
    "EquipColumn\020\035\022\035\n\031P_S2C_Protocol_ClimbTow"
    "er\020\036\022!\n\035P_S2C_Protocol_AnswerQuestion\020\037\022"
    "!\n\035P_S2C_Protocol_GreatWallTrain\020 \022\034\n\030P_"
    "S2C_Protocol_WorldBoss\020!\022\033\n\027P_S2C_Protoc"
    "ol_Activity\020\"\022\031\n\025P_S2C_Protocol_Relive\020#"
    "\022\030\n\024P_S2C_Protocol_Corps\020$\022\027\n\023P_S2C_Prot"
    "ocol_Weal\020%\022\030\n\024P_S2C_Protocol_Manor\020&\022\034\n"
    "\030P_S2C_Protocol_SinglePvp\020\'*U\n\033_emS2C_Eq"
    "uipColumn_Protocol\022\033\n\027S2C_EquipColumn_En"
    "hance\020\000\022\031\n\025S2C_EquipColumn_Forge\020\001*{\n\027_e"
    "mS2C_Fashion_Protocol\022\023\n\017S2C_Fashion_Add"
    "\020\000\022\023\n\017S2C_Fashion_Del\020\001\022\031\n\025S2C_Fashion_E"
    "quip_Ack\020\002\022\033\n\027S2C_Fashion_UnEquip_Ack\020\003*"
    "i\n\025_emS2C_Title_Protocol\022\021\n\rS2C_Title_Ad"
    "d\020\000\022\021\n\rS2C_Trade_Del\020\001\022\023\n\017S2C_Trade_Equi"
    "p\020\002\022\025\n\021S2C_Trade_UnEquip\020\003*\217\004\n\025_emS2C_Tr"
    "ade_Protocol\022\027\n\023S2C_Trade_apply_Ack\020\000\022\030\n"
    "\024S2C_Trade_answer_Ack\020\001\022\031\n\025S2C_Trade_add"
    "Item_Ack\020\002\022\031\n\025S2C_Trade_delItem_Ack\020\003\022\032\n"
    "\026S2C_Trade_setMoney_Ack\020\004\022\026\n\022S2C_Trade_l"
    "ock_Ack\020\005\022\030\n\024S2C_Trade_unlock_Ack\020\006\022\031\n\025S"
    "2C_Trade_confirm_Ack\020\007\022\030\n\024S2C_Trade_canc"
    "el_Ack\020\010\022\030\n\024S2C_Trade_beginTrade\020\t\022\026\n\022S2"
    "C_Trade_endTrade\020\n\022\025\n\021S2C_Trade_addItem\020"
    "\013\022\025\n\021S2C_Trade_delItem\020\014\022\026\n\022S2C_Trade_se"
    "tMoney\020\r\022\022\n\016S2C_Trade_lock\020\016\022\024\n\020S2C_Trad"
    "e_unlock\020\017\022\025\n\021S2C_Trade_confirm\020\020\022\032\n\026S2C"
    "_Trade_applyTrasfer\020\021\022\033\n\027S2C_Trade_answe"
    "rTrasfer\020\022\022\030\n\024S2C_Trade_SliverInfo\020\023*\206\002\n"
    "\031_emS2C_SaleMoney_Protocol\022\032\n\026S2C_SaleMo"
    "ney_sale_Ack\020\000\022 \n\034S2C_SaleMoney_salecanc"
    "el_Ack\020\001\022\032\n\026S2C_SaleMoney_list_Ack\020\002\022\032\n\026"
    "S2C_SaleMoney_sale_New\020\003\022\035\n\031S2C_SaleMone"
    "y_sale_Delete\020\004\022\035\n\031S2C_SaleMoney_sale_Up"
    "date\020\005\022\031\n\025S2C_SaleMoney_log_New\020\006\022\032\n\026S2C"
    "_SaleMoney_tradelog\020\007*\303\002\n\027_emS2C_Auction"
    "_Protocol\022\030\n\024S2C_Auction_sale_Ack\020\000\022\036\n\032S"
    "2C_Auction_salecancel_Ack\020\001\022\027\n\023S2C_Aucti"
    "on_buy_Ack\020\002\022\030\n\024S2C_Auction_list_Ack\020\003\022\027"
    "\n\023S2C_Auction_ave_Ack\020\004\022\030\n\024S2C_Auction_s"
    "ale_New\020\005\022\033\n\027S2C_Auction_sale_Delete\020\006\022\033"
    "\n\027S2C_Auction_sale_Update\020\007\022\030\n\024S2C_Aucti"
    "on_lock_New\020\010\022\033\n\027S2C_Auction_lock_Delete"
    "\020\t\022\027\n\023S2C_Auction_log_New\020\n*f\n\024_emS2C_Ma"
    "il_Protocol\022\021\n\rS2C_Mail_Read\020\000\022\023\n\017S2C_Ma"
    "il_Delete\020\001\022\023\n\017S2C_Mail_Reward\020\002\022\021\n\rS2C_"
    "Mail_Load\020\003*\235\003\n\026_emS2C_Player_Protocol\022\032"
    "\n\026S2C_Player_LoadAccount\020\000\022\032\n\026S2C_Player"
    "_CreatPlayer\020\001\022\030\n\024S2C_Player_DelPlayer\020\002"
    "\022\033\n\027S2C_Player_SelectPlayer\020\003\022\027\n\023S2C_Pla"
    "yer_BaseInfo\020\004\022\031\n\025S2C_Player_SystemInfo\020"
    "\005\022\026\n\022S2C_Player_BagInfo\020\006\022\030\n\024S2C_Player_"
    "DepotInfo\020\007\022\031\n\025S2C_Player_ClientInfo\020\010\022\030"
    "\n\024S2C_Player_QuestInfo\020\t\022\025\n\021S2C_Player_G"
    "lobal\020\n\022\025\n\021S2C_Player_Friend\020\013\022\023\n\017S2C_Pl"
    "ayer_Mail\020\014\022\026\n\022S2C_Player_Faction\020\r\022\036\n\032S"
    "2C_Player_CheckPlayerName\020\016*\310\013\n\026_emS2C_C"
    "ommon_Protocol\022\024\n\020S2C_Common_Ready\020\000\022\024\n\020"
    "S2C_Common_Ghost\020\001\022\032\n\026S2C_Common_Unit_Re"
    "move\020\002\022#\n\037S2C_Common_SceneFly_SameGameSv"
    "r\020\003\022#\n\037S2C_Common_SceneFly_JumpGameSvr\020\004"
    "\022\023\n\017S2C_Common_Move\020\005\022\027\n\023S2C_Common_Move"
    "Stop\020\006\022\023\n\017S2C_Common_Turn\020\007\022\024\n\020S2C_Commo"
    "n_GMCmd\020\010\022\030\n\024S2C_Common_ExpendSyn\020\t\022\025\n\021S"
    "2C_Common_Pickup\020\n\022\025\n\021S2C_Common_AddExp\020"
    "\013\022\027\n\023S2C_Common_AddLevel\020\014\022\024\n\020S2C_Common"
    "_AddHp\020\r\022\034\n\030S2C_Common_GetClientData\020\016\022\035"
    "\n\031S2C_Common_ClientDataOver\020\017\022\031\n\025S2C_Com"
    "mon_FindPlayer\020\020\022\030\n\024S2C_Common_Promotion"
    "\020\021\022\030\n\024S2C_Common_ReliveAck\020\022\022\030\n\024S2C_Comm"
    "on_TimeEvent\020\024\022\035\n\031S2C_Common_PlaneEnter_"
    "Ack\020\025\022\035\n\031S2C_Common_PlaneLeave_Ack\020\026\022\027\n\023"
    "S2C_Common_BossInfo\020\030\022\027\n\023S2C_Common_Boss"
    "List\020\031\022\026\n\022S2C_Common_Fly_Ack\020\032\022\033\n\027S2C_Co"
    "mmon_SystemSwitch\020\033\022\033\n\027S2C_Common_Search"
    "Player\020\034\022\032\n\026S2C_Common_MonsterTalk\020\035\022\033\n\027"
    "S2C_Common_BeFindNotice\020\036\022\032\n\026S2C_Common_"
    "SetPosition\020\037\022%\n!S2C_Common_SynTypeDayCo"
    "pymapCount\020 \022\032\n\026S2C_Common_PlaneUpdate\020!"
    "\022\027\n\023S2C_Common_Area_Syn\020\"\022\027\n\023S2C_Common_"
    "Area_Add\020#\022\027\n\023S2C_Common_Area_Del\020$\022 \n\034S"
    "2C_Common_QinggongStart_Ntf\020%\022\"\n\036S2C_Com"
    "mon_GetBattleAttrDetail\020&\022!\n\035S2C_Common_"
    "RegionTriggerPlane\020\'\022\025\n\021S2C_Common_PKTyp"
    "e\020(\022\030\n\024S2C_Common_TakeASeat\020)\022\026\n\022S2C_Com"
    "mon_TaskFly\020*\022!\n\035S2C_Common_DazuoguajiTo"
    "talNtf\020+\022\"\n\036S2C_Common_SynDayTeamTaskCou"
    "nt\020-\022\034\n\030S2C_Common_TreasurePrize\020.\022\033\n\027S2"
    "C_Common_BroadcastMsg\020/\022\035\n\031S2C_Common_Sy"
    "nForbitSpeak\0200\022\035\n\031S2C_Common_ForbitSpeak"
    "Ack\0201\022\032\n\026S2C_Common_SetCorpsJob\0202\022 \n\034S2C"
    "_Common_StrongerGetReward\0203\022\037\n\033S2C_Commo"
    "n_GetSubFightPower\0204\022\026\n\022S2C_Common_BaseE"
    "xp\0205\022\030\n\024S2C_Common_ClearData\0206*\225\002\n\025_emS2"
    "C_Skill_Protocol\022\021\n\rS2C_Skill_Use\020\000\022\027\n\023S"
    "2C_Skill_UseCharge\020\001\022\030\n\024S2C_Skill_SkillB"
    "reak\020\002\022\021\n\rS2C_Skill_Add\020\003\022\025\n\021S2C_Skill_U"
    "pgrade\020\004\022\024\n\020S2C_Skill_Damage\020\005\022\024\n\020S2C_Sk"
    "ill_Notice\020\006\022\030\n\024S2C_Skill_EnermyList\020\007\022\031"
    "\n\025S2C_Skill_EffectBroad\020\010\022\021\n\rS2C_Skill_D"
    "el\020\t\022\030\n\024S2C_Skill_UpCoolTime\020\n*~\n\024_emS2C"
    "_Buff_Protocol\022\020\n\014S2C_Buff_Add\020\000\022\020\n\014S2C_"
    "Buff_Del\020\001\022\024\n\020S2C_Buff_AddMove\020\002\022\027\n\023S2C_"
    "Buff_UpdateTick\020\003\022\023\n\017S2C_Buff_AllSyn\020\004*1"
    "\n\027_emS2C_Counter_Protocol\022\026\n\022S2C_Counter"
    "_Update\020\000*\201\017\n\024_emS2C_Team_Protocol\022\027\n\023S2"
    "C_Team_Invite_Ack\020\000\022\035\n\031S2C_Team_AcceptIn"
    "vite_Ack\020\001\022\026\n\022S2C_Team_Apply_Ack\020\002\022\034\n\030S2"
    "C_Team_AcceptApply_Ack\020\003\022\026\n\022S2C_Team_Lea"
    "ve_Ack\020\004\022\035\n\031S2C_Team_ChangeLeader_Ack\020\005\022"
    "\034\n\030S2C_Team_Publish_Ask_Ack\020\006\022\037\n\033S2C_Tea"
    "m_Publish_Cancel_Ack\020\007\022\037\n\033S2C_Team_Publi"
    "sh_Invite_Ack\020\010\022%\n!S2C_Team_Publish_Acce"
    "ptInvite_Ack\020\t\022\035\n\031S2C_Team_Publish_List_"
    "Ack\020\n\022\025\n\021S2C_Team_Kick_Ack\020\013\022\032\n\026S2C_Team"
    "_Kick_Vote_Ack\020\014\022\031\n\025S2C_Team_SetAllot_Ac"
    "k\020\r\022\036\n\032S2C_Team_SetAllot_Vote_Ack\020\016\022\037\n\033S"
    "2C_Team_NearPlayerList_Ack\020\017\022\035\n\031S2C_Team"
    "_NearTeamList_Ack\020\020\022\025\n\021S2C_Team_View_Ack"
    "\020\021\022\034\n\030S2C_Team_Invite_Transfer\020\022\022\"\n\036S2C_"
    "Team_AcceptInvite_Transfer\020\023\022\033\n\027S2C_Team"
    "_Apply_Transfer\020\024\022!\n\035S2C_Team_AcceptAppl"
    "y_Transfer\020\025\022\031\n\025S2C_Team_ChangeLeader\020\026\022"
    "\030\n\024S2C_Team_Publish_Add\020\027\022\030\n\024S2C_Team_Pu"
    "blish_Del\020\030\022$\n S2C_Team_Publish_Invite_T"
    "ransfer\020\031\022*\n&S2C_Team_Publish_AcceptInvi"
    "te_Transfer\020\032\022\031\n\025S2C_Team_Publish_List\020\033"
    "\022\026\n\022S2C_Team_Kick_Vote\020\034\022\025\n\021S2C_Team_Set"
    "Allot\020\035\022\032\n\026S2C_Team_SetAllot_Vote\020\036\022\033\n\027S"
    "2C_Team_NearPlayerList\020\037\022\031\n\025S2C_Team_Nea"
    "rTeamList\020 \022\027\n\023S2C_Team_MyTeamInfo\020!\022\026\n\022"
    "S2C_Team_MemberAdd\020\"\022\026\n\022S2C_Team_MemberD"
    "el\020#\022\024\n\020S2C_Team_Dismiss\020$\022\031\n\025S2C_Team_M"
    "emberUpdate\020%\022\021\n\rS2C_Team_View\020&\022\027\n\023S2C_"
    "Team_Callup_Ack\020\'\022\037\n\033S2C_Team_AcceptIden"
    "tity_Ack\020(\022\037\n\033S2C_Team_CheckCondition_Ac"
    "k\020)\022\027\n\023S2C_Team_Create_Ack\020*\022\032\n\026S2C_Team"
    "_SetTarget_Ack\020+\022\036\n\032S2C_Team_SetAutoAcce"
    "pt_Ack\020,\022\035\n\031S2C_Team_SetAutoMatch_Ack\020-\022"
    "!\n\035S2C_Team_SetAutoMatchJoin_Ack\020.\022%\n!S2"
    "C_Team_SetAutoMatchJobLimit_Ack\020/\022!\n\035S2C"
    "_Team_GetApplicantList_Ack\0200\022#\n\037S2C_Team"
    "_ClearApplicantList_Ack\0201\022$\n S2C_Team_Ac"
    "ceptApplyFromList_Ack\0202\022#\n\037S2C_Team_Sear"
    "chTeamByTarget_Ack\0203\022\"\n\036S2C_Team_ApplyTe"
    "amByTarget_Ack\0204\022(\n$S2C_Team_CancleApply"
    "TeamByTarget_Ack\0205\022\"\n\036S2C_Team_ApplyedTe"
    "amIdList_Ntf\0206\022\037\n\033S2C_Team_AcceptTeamTas"
    "k_Ack\0207\022%\n!S2C_Team_EnterTeamTaskCopymap"
    "_Ack\0208\022!\n\035S2C_Team_CompleteTeamTask_Ack\020"
    "9\022\037\n\033S2C_Team_UpdateTeamTask_Ack\020:\022\027\n\023S2"
    "C_Team_Follow_Ack\020;\022\032\n\026S2C_Team_RemainCo"
    "nfirm\020<\022\024\n\020S2C_Team_Confirm\020=\022\026\n\022S2C_Tea"
    "m_MemberHit\020>*\352\004\n\024_emS2C_Item_Protocol\022\020"
    "\n\014S2C_Item_New\020\000\022\020\n\014S2C_Item_Del\020\001\022\020\n\014S2"
    "C_Item_Use\020\002\022\022\n\016S2C_Item_Equip\020\003\022\021\n\rS2C_"
    "Item_Sell\020\004\022\024\n\020S2C_Item_BuyBack\020\005\022\022\n\016S2C"
    "_Item_Split\020\006\022\026\n\022S2C_Item_UpdateNum\020\007\022\021\n"
    "\rS2C_Item_Sort\020\010\022\024\n\020S2C_Item_Enhance\020\t\022\022"
    "\n\016S2C_Item_Forge\020\n\022\024\n\020S2C_Item_Inherit\020\013"
    "\022\021\n\rS2C_Item_Make\020\014\022\025\n\021S2C_Item_Mounting"
    "\020\r\022\027\n\023S2C_Item_UpUseCount\020\016\022\030\n\024S2C_Item_"
    "BingfuSplit\020\017\022\032\n\026S2C_Item_BingfuUpgrade\020"
    "\020\022\023\n\017S2C_Item_Update\020\021\022\025\n\021S2C_Item_Compo"
    "und\020\022\022\035\n\031S2C_Item_OpenEquipMakeDlg\020\023\022 \n\034"
    "S2C_Item_OpenEquipMakeOEMDlg\020\024\022\037\n\033S2C_It"
    "em_CommitEquipMakeOEM\020\025\022\036\n\032S2C_Item_Visi"
    "tEquipMakeOEM\020\026\022\031\n\025S2C_Item_EquipMakeOEM"
    "\020\027\022\036\n\032S2C_Item_EquipChangeOEMFee\020\030*\214\001\n\025_"
    "emS2C_Quest_Protocol\022\024\n\020S2C_Quest_Accept"
    "\020\000\022\026\n\022S2C_Quest_Complete\020\001\022\030\n\024S2C_Quest_"
    "UpdateItem\020\002\022\024\n\020S2C_Quest_GiveUp\020\003\022\025\n\021S2"
    "C_Quest_Refresh\020\004**\n\025_emS2C_Store_Protoc"
    "ol\022\021\n\rS2C_Store_Buy\020\000*_\n\025_emS2C_Prize_Pr"
    "otocol\022\030\n\024S2C_Prize_Accept_Ack\020\000\022\031\n\025S2C_"
    "Prize_Abandon_Ack\020\001\022\021\n\rS2C_Prize_New\020\002*\310"
    "\t\n\027_emS2C_Copymap_Protocol\022\032\n\026S2C_Copyma"
    "p_Create_Ack\020\000\022\030\n\024S2C_Copymap_Exit_Ack\020\001"
    "\022\032\n\026S2C_Copymap_Invite_Ack\020\002\022 \n\034S2C_Copy"
    "map_AcceptInvite_Ack\020\003\022\"\n\036S2C_Copymap_Te"
    "amMemberInfo_Ack\020\004\022\037\n\033S2C_Copymap_Invite"
    "_Transfer\020\005\022\033\n\027S2C_Copymap_AssistCount\020\006"
    "\022\032\n\026S2C_Copymap_InfoUpdate\020\007\022\025\n\021S2C_Copy"
    "map_State\020\010\022\031\n\025S2C_Copymap_QuestItem\020\t\022\025"
    "\n\021S2C_Copymap_Quest\020\n\022\031\n\025S2C_Copymap_Ent"
    "erInfo\020\013\022\036\n\032S2C_Copymap_TeamMemberInfo\020\014"
    "\022\032\n\026S2C_Copymap_SysGuardHp\020\016\022 \n\034S2C_Copy"
    "map_SynPoemAcitvePos\020\017\022\035\n\031S2C_Copymap_Sy"
    "nLiangyiNum\020\020\022\027\n\023S2C_Copymap_SynWave\020\021\022!"
    "\n\035S2C_Copymap_SynSixiangMonster\020\022\022\030\n\024S2C"
    "_Copymap_HurtInfo\020\023\022\033\n\027S2C_Copymap_Chang"
    "eQuest\020\024\022\036\n\032S2C_Copymap_SynBannerScore\020\025"
    "\022#\n\037S2C_Copymap_SynBannerPlayerInfo\020\026\022\037\n"
    "\033S2C_Copymap_SynBannerResult\020\027\022 \n\034S2C_Co"
    "pymap_SynBannerGodlike\020\030\022!\n\035S2C_Copymap_"
    "SynBannerMegakill\020\031\022\034\n\030S2C_Copymap_SynGe"
    "tBanner\020\032\022\035\n\031S2C_Copymap_SynBannerKill\020\033"
    "\022 \n\034S2C_Copymap_SynReadStartTime\020\034\022!\n\035S2"
    "C_Copymap_FindAttackMonster\020\035\022&\n\"S2C_Cop"
    "ymap_Manor_Lobby_LineUp_Ntf\020\036\022,\n(S2C_Cop"
    "ymap_Manor_BattleField_Shenfu_Ntf\020\037\022.\n*S"
    "2C_Copymap_Manor_BattleField_Comrades_Nt"
    "f\020 \0220\n,S2C_Copymap_Manor_BattleField_Tot"
    "alScore_Ntf\020!\022\030\n\024S2C_Copymap_Unactive\020\"\022"
    "*\n&S2C_Copymap_Manor_Broadcast_Prompt_Nt"
    "f\020#\022\"\n\036S2C_Copymap_SynSinglePvpResult\020$\022"
    "\030\n\024S2C_Copymap_CloseTip\020%*O\n\027_emS2C_TopL"
    "ist_Protocol\022\030\n\024S2C_TopList_List_Ack\020\000\022\032"
    "\n\026S2C_TopList_Player_Ack\020\001*\331\001\n\026_emS2C_Fr"
    "iend_Protocol\022\026\n\022S2C_Friend_Add_Ack\020\000\022\026\n"
    "\022S2C_Friend_Del_Ack\020\001\022\031\n\025S2C_Friend_Answ"
    "er_Ack\020\002\022\027\n\023S2C_Friend_Find_Ack\020\003\022\034\n\030S2C"
    "_Friend_AddAskTrasfer\020\004\022\022\n\016S2C_Friend_Ad"
    "d\020\005\022\022\n\016S2C_Friend_Del\020\006\022\025\n\021S2C_Friend_Up"
    "date\020\007*n\n\025_emS2C_Wulue_Protocol\022\033\n\027S2C_W"
    "ulue_SetScheme_Ack\020\000\022\033\n\027S2C_Wulue_UpZhan"
    "lue_Ack\020\001\022\033\n\027S2C_Wulue_SetBingfu_Ack\020\002*\327"
    "\003\n\026_emS2C_Wentao_Protocol\022\033\n\027S2C_Wetao_S"
    "etScheme_Ack\020\000\022\031\n\025S2C_Wetao_QianXiu_Ack\020"
    "\001\022\026\n\022S2C_Wetao_TuPo_Ack\020\002\022\031\n\025S2C_Wetao_U"
    "pgrate_Ack\020\003\022\033\n\027S2C_Wetao_SetBingfu_Ack\020"
    "\004\022\027\n\023S2C_Wetao_Reset_Ack\020\005\022\036\n\032S2C_Wetao_"
    "ActiveScheme_Ack\020\006\022\036\n\032S2C_Wetao_ActiveBi"
    "ngFa_Ack\020\007\022\033\n\027S2C_Wetao_Scheme_Update\020\010\022"
    "\034\n\030S2C_Wetao_YaoDian_Update\020\t\022\034\n\030S2C_Wet"
    "ao_QianXiu_Update\020\n\022\031\n\025S2C_Wetao_TuPo_Up"
    "date\020\013\022\023\n\017S2C_Wetao_Reset\020\014\022\032\n\026S2C_Wetao"
    "_ActiveBingFa\020\r\022\032\n\026S2C_Wetao_ActiveSchem"
    "e\020\016\022\033\n\027S2C_Wetao_Wisdom_Update\020\017*\252\002\n\030_em"
    "S2C_DropItem_Protocol\022\031\n\025S2C_DropItem_In"
    "fo_Ack\020\000\022\031\n\025S2C_DropItem_Dice_Ack\020\001\022\033\n\027S"
    "2C_DropItem_Assign_Ack\020\002\022\034\n\030S2C_DropItem"
    "_PickAll_Ack\020\003\022\033\n\027S2C_DropItem_Pickup_Ac"
    "k\020\004\022\033\n\027S2C_DropItem_Abadon_Ack\020\005\022\025\n\021S2C_"
    "DropItem_Info\020\006\022\034\n\030S2C_DropItem_ChangeAl"
    "lot\020\007\022\025\n\021S2C_DropItem_Dice\020\010\022\027\n\023S2C_Drop"
    "Item_Assign\020\t*\352\001\n\031_emS2C_Broadcast_Proto"
    "col\022\037\n\033S2C_Broadcast_CopymapInvite\020\000\022\037\n\033"
    "S2C_Broadcast_CreateFaction\020\001\022\037\n\033S2C_Bro"
    "adCast_TreasurePrize\020\002\022+\n\'S2C_BroadCast_"
    "TreasurePrize_RefreshBoss\020\003\022 \n\034S2C_Broad"
    "Cast_GreatWallTrain\020\004\022\033\n\027S2C_BroadCast_W"
    "orldBoss\020\005*\213\001\n\030_emS2C_Identity_Protocol\022"
    "\031\n\025S2C_Identity_Open_Ack\020\000\022\032\n\026S2C_Identi"
    "ty_Learn_Ack\020\001\022\032\n\026S2C_Identity_Reset_Ack"
    "\020\002\022\034\n\030S2C_Identity_UpSkill_Ack\020\003*\312\001\n\025_em"
    "S2C_Wuxue_Protocol\022\033\n\027S2C_Wuxue_NewSchem"
    "e_Ack\020\000\022\033\n\027S2C_Wuxue_DelScheme_Ack\020\001\022\036\n\032"
    "S2C_Wuxue_ChangeScheme_Ack\020\002\022\032\n\026S2C_Wuxu"
    "e_SetSkill_Ack\020\003\022\035\n\031S2C_Wuxue_SetAllSkil"
    "l_Ack\020\004\022\034\n\030S2C_Wuxue_LearnSkill_Ack\020\005*\351\003"
    "\n\024_emS2C_Dart_Protocol\022\026\n\022S2C_Dart_Check"
    "_Ack\020\000\022\026\n\022S2C_Dart_Start_Ack\020\001\022\025\n\021S2C_Da"
    "rt_Info_Ntf\020\002\022\034\n\030S2C_Dart_Check_Pause_Nt"
    "f\020\003\022\037\n\033S2C_Dart_Check_Get_Buff_Ack\020\004\022\033\n\027"
    "S2C_Dart_Start_Move_Ntf\020\005\022\032\n\026S2C_Dart_St"
    "art_Rob_Ntf\020\006\022!\n\035S2C_Dart_Finish_And_Pri"
    "ze_Ntf\020\007\022\033\n\027S2C_Dart_Finish_Rob_Ntf\020\010\022\032\n"
    "\026S2C_Dart_AddSupply_Ntf\020\t\022\032\n\026S2C_Dart_Ad"
    "dSupply_Ack\020\n\022\025\n\021S2C_Dart_Quit_Ack\020\013\022\036\n\032"
    "S2C_Dart_Check_Confirm_Ack\020\014\022\"\n\036S2C_Dart"
    "_AddSupply_Confirm_Ack\020\r\022\033\n\027S2C_Dart_Bac"
    "k_2_Npc_Ack\020\016\022\"\n\036S2C_Dart_Change_DartLea"
    "der_Ntf\020\017*\246\001\n\033_emS2C_FactionBoss_Protoco"
    "l\022#\n\037S2C_FactionBoss_PersonalTop_Ack\020\000\022\""
    "\n\036S2C_FactionBoss_FactionTop_Ack\020\001\022 \n\034S2"
    "C_FactionBoss_UnionTop_Ack\020\002\022\034\n\030S2C_Fact"
    "ionBoss_SelfInfo\020\003*\341\001\n\032_emS2C_ClimbTower"
    "_Protocol\022\037\n\033S2C_ClimbTower_Get_Info_Ack"
    "\020\000\022\033\n\027S2C_ClimbTower_Info_Ntf\020\001\022 \n\034S2C_C"
    "limbTower_ShowPrize_Ntf\020\002\022\"\n\036S2C_ClimbTo"
    "wer_ChoosePrize_Ack\020\003\022\034\n\030S2C_ClimbTower_"
    "Clear_Ack\020\004\022!\n\035S2C_ClimbTower_Show_Clear"
    "_Ntf\020\005*l\n\036_emS2C_AnswerQuestion_Protocol"
    "\022#\n\037S2C_AnswerQuestion_QuestionInfo\020\000\022%\n"
    "!S2C_AnswerQuestion_QuestionResult\020\001*A\n\036"
    "_emS2C_GreatwallTrain_Protocol\022\037\n\033S2C_Gr"
    "eatwallTrain_Info_Ack\020\001*\261\001\n\031_emS2C_World"
    "Boss_Protocol\022\035\n\031S2C_WorldBoss_GetInfo_A"
    "ck\020\001\022)\n%S2C_WorldBoss_Update_BossHurtRan"
    "k_Ack\020\002\022)\n%S2C_WorldBoss_Update_BossHurt"
    "Rank_Ntf\020\003\022\037\n\033S2C_WorldBoss_Goto_Boss_Ac"
    "k\020\004*\\\n\030_emS2C_Activity_Protocol\022\036\n\032S2C_A"
    "ctivity_GetReward_Ack\020\001\022 \n\034S2C_Activity_"
    "AddLiveness_Ack\020\002*1\n\026_emS2C_Relive_Proto"
    "col\022\027\n\023S2C_Relive_Born_Ack\020\001*\206\002\n\025_emS2C_"
    "Manor_Protocol\022\036\n\032S2C_Manor_Get_All_Info"
    "_Ack\020\000\022 \n\034S2C_Manor_Get_Fight_Info_Ack\020\001"
    "\022\035\n\031S2C_Manor_Apply_Fight_Ack\020\002\022\035\n\031S2C_M"
    "anor_Enter_Lobby_Ack\020\003\022\035\n\031S2C_Manor_Star"
    "t_Fight_Ntf\020\004\022\031\n\025S2C_Manor_MVPVote_Ntf\020\005"
    "\022\030\n\024S2C_Manor_Result_Ntf\020\006\022\031\n\025S2C_Manor_"
    "MVPVote_Ack\020\007", 25413);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CASProtocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CASProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CASProtocol_2eproto {
  StaticDescriptorInitializer_CASProtocol_2eproto() {
    protobuf_AddDesc_CASProtocol_2eproto();
  }
} static_descriptor_initializer_CASProtocol_2eproto_;

const ::google::protobuf::EnumDescriptor* _emPC2S_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPC2S_Protocol_descriptor_;
}
bool _emPC2S_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_SinglePvp_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_SinglePvp_Protocol_descriptor_;
}
bool _emC2S_SinglePvp_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_SinglePvp_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_SinglePvp_Protocol_descriptor_;
}
bool _emS2C_SinglePvp_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Weal_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Weal_Protocol_descriptor_;
}
bool _emC2S_Weal_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Weal_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Weal_Protocol_descriptor_;
}
bool _emS2C_Weal_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Corps_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Corps_Protocol_descriptor_;
}
bool _emC2S_Corps_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Corps_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Corps_Protocol_descriptor_;
}
bool _emS2C_Corps_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_PvpWar_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_PvpWar_Protocol_descriptor_;
}
bool _emC2S_PvpWar_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_PvpWar_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_PvpWar_Protocol_descriptor_;
}
bool _emS2C_PvpWar_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_EquipColumn_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_EquipColumn_Protocol_descriptor_;
}
bool _emC2S_EquipColumn_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Fashion_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Fashion_Protocol_descriptor_;
}
bool _emC2S_Fashion_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Title_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Title_Protocol_descriptor_;
}
bool _emC2S_Title_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Trade_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Trade_Protocol_descriptor_;
}
bool _emC2S_Trade_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_SaleMoney_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_SaleMoney_Protocol_descriptor_;
}
bool _emC2S_SaleMoney_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Auction_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Auction_Protocol_descriptor_;
}
bool _emC2S_Auction_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Copymap_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Copymap_Protocol_descriptor_;
}
bool _emC2S_Copymap_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Faction_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Faction_Protocol_descriptor_;
}
bool _emC2S_Faction_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 30:
    case 31:
    case 32:
    case 33:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Faction_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Faction_Protocol_descriptor_;
}
bool _emS2C_Faction_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Mail_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Mail_Protocol_descriptor_;
}
bool _emC2S_Mail_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Player_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Player_Protocol_descriptor_;
}
bool _emC2S_Player_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Common_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Common_Protocol_descriptor_;
}
bool _emC2S_Common_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Skill_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Skill_Protocol_descriptor_;
}
bool _emC2S_Skill_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Buff_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Buff_Protocol_descriptor_;
}
bool _emC2S_Buff_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Team_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Team_Protocol_descriptor_;
}
bool _emC2S_Team_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Item_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Item_Protocol_descriptor_;
}
bool _emC2S_Item_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Quest_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Quest_Protocol_descriptor_;
}
bool _emC2S_Quest_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Store_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Store_Protocol_descriptor_;
}
bool _emC2S_Store_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Prize_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Prize_Protocol_descriptor_;
}
bool _emC2S_Prize_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_TopList_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_TopList_Protocol_descriptor_;
}
bool _emC2S_TopList_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Friend_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Friend_Protocol_descriptor_;
}
bool _emC2S_Friend_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Bingfu_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Bingfu_Protocol_descriptor_;
}
bool _emC2S_Bingfu_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Wulue_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Wulue_Protocol_descriptor_;
}
bool _emC2S_Wulue_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Wentao_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Wentao_Protocol_descriptor_;
}
bool _emC2S_Wentao_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_DropItem_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_DropItem_Protocol_descriptor_;
}
bool _emC2S_DropItem_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Identity_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Identity_Protocol_descriptor_;
}
bool _emC2S_Identity_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Wuxue_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Wuxue_Protocol_descriptor_;
}
bool _emC2S_Wuxue_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Dart_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Dart_Protocol_descriptor_;
}
bool _emC2S_Dart_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_FactionBoss_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_FactionBoss_Protocol_descriptor_;
}
bool _emC2S_FactionBoss_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_ClimbTower_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_ClimbTower_Protocol_descriptor_;
}
bool _emC2S_ClimbTower_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_AnswerQuestion_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_AnswerQuestion_Protocol_descriptor_;
}
bool _emC2S_AnswerQuestion_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_WorldBoss_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_WorldBoss_Protocol_descriptor_;
}
bool _emC2S_WorldBoss_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Activity_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Activity_Protocol_descriptor_;
}
bool _emC2S_Activity_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Relive_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Relive_Protocol_descriptor_;
}
bool _emC2S_Relive_Protocol_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emC2S_Manor_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emC2S_Manor_Protocol_descriptor_;
}
bool _emC2S_Manor_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emPS2C_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPS2C_Protocol_descriptor_;
}
bool _emPS2C_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_EquipColumn_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_EquipColumn_Protocol_descriptor_;
}
bool _emS2C_EquipColumn_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Fashion_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Fashion_Protocol_descriptor_;
}
bool _emS2C_Fashion_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Title_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Title_Protocol_descriptor_;
}
bool _emS2C_Title_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Trade_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Trade_Protocol_descriptor_;
}
bool _emS2C_Trade_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_SaleMoney_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_SaleMoney_Protocol_descriptor_;
}
bool _emS2C_SaleMoney_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Auction_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Auction_Protocol_descriptor_;
}
bool _emS2C_Auction_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Mail_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Mail_Protocol_descriptor_;
}
bool _emS2C_Mail_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Player_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Player_Protocol_descriptor_;
}
bool _emS2C_Player_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Common_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Common_Protocol_descriptor_;
}
bool _emS2C_Common_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Skill_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Skill_Protocol_descriptor_;
}
bool _emS2C_Skill_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Buff_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Buff_Protocol_descriptor_;
}
bool _emS2C_Buff_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Counter_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Counter_Protocol_descriptor_;
}
bool _emS2C_Counter_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Team_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Team_Protocol_descriptor_;
}
bool _emS2C_Team_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Item_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Item_Protocol_descriptor_;
}
bool _emS2C_Item_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Quest_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Quest_Protocol_descriptor_;
}
bool _emS2C_Quest_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Store_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Store_Protocol_descriptor_;
}
bool _emS2C_Store_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Prize_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Prize_Protocol_descriptor_;
}
bool _emS2C_Prize_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Copymap_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Copymap_Protocol_descriptor_;
}
bool _emS2C_Copymap_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_TopList_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_TopList_Protocol_descriptor_;
}
bool _emS2C_TopList_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Friend_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Friend_Protocol_descriptor_;
}
bool _emS2C_Friend_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Wulue_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Wulue_Protocol_descriptor_;
}
bool _emS2C_Wulue_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Wentao_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Wentao_Protocol_descriptor_;
}
bool _emS2C_Wentao_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_DropItem_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_DropItem_Protocol_descriptor_;
}
bool _emS2C_DropItem_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Broadcast_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Broadcast_Protocol_descriptor_;
}
bool _emS2C_Broadcast_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Identity_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Identity_Protocol_descriptor_;
}
bool _emS2C_Identity_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Wuxue_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Wuxue_Protocol_descriptor_;
}
bool _emS2C_Wuxue_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Dart_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Dart_Protocol_descriptor_;
}
bool _emS2C_Dart_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_FactionBoss_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_FactionBoss_Protocol_descriptor_;
}
bool _emS2C_FactionBoss_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_ClimbTower_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_ClimbTower_Protocol_descriptor_;
}
bool _emS2C_ClimbTower_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_AnswerQuestion_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_AnswerQuestion_Protocol_descriptor_;
}
bool _emS2C_AnswerQuestion_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_GreatwallTrain_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_GreatwallTrain_Protocol_descriptor_;
}
bool _emS2C_GreatwallTrain_Protocol_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_WorldBoss_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_WorldBoss_Protocol_descriptor_;
}
bool _emS2C_WorldBoss_Protocol_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Activity_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Activity_Protocol_descriptor_;
}
bool _emS2C_Activity_Protocol_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Relive_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Relive_Protocol_descriptor_;
}
bool _emS2C_Relive_Protocol_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emS2C_Manor_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emS2C_Manor_Protocol_descriptor_;
}
bool _emS2C_Manor_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
