// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Broadcast.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBG2CBroadcast_CopymapInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CBroadcast_CopymapInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CBroadcast_CreateFaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CBroadcast_CreateFaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CBroadCast_TreasurePrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CBroadCast_TreasurePrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CBroadCast_TreasurePrize_RefreshBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CBroadCast_TreasurePrize_RefreshBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CBroadCast_GreatWallTrain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CBroadCast_GreatWallTrain_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CBroadCast_WorldBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CBroadCast_WorldBoss_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* _emBroadcast_Channel_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Broadcast_2eproto() {
  protobuf_AddDesc_Broadcast_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Broadcast.proto");
  GOOGLE_CHECK(file != NULL);
  PBG2CBroadcast_CopymapInvite_descriptor_ = file->message_type(0);
  static const int PBG2CBroadcast_CopymapInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadcast_CopymapInvite, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadcast_CopymapInvite, copymapid_),
  };
  PBG2CBroadcast_CopymapInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CBroadcast_CopymapInvite_descriptor_,
      PBG2CBroadcast_CopymapInvite::default_instance_,
      PBG2CBroadcast_CopymapInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadcast_CopymapInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadcast_CopymapInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CBroadcast_CopymapInvite));
  PBG2CBroadcast_CreateFaction_descriptor_ = file->message_type(1);
  static const int PBG2CBroadcast_CreateFaction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadcast_CreateFaction, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadcast_CreateFaction, factionbase_),
  };
  PBG2CBroadcast_CreateFaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CBroadcast_CreateFaction_descriptor_,
      PBG2CBroadcast_CreateFaction::default_instance_,
      PBG2CBroadcast_CreateFaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadcast_CreateFaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadcast_CreateFaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CBroadcast_CreateFaction));
  PBG2CBroadCast_TreasurePrize_descriptor_ = file->message_type(2);
  static const int PBG2CBroadCast_TreasurePrize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_TreasurePrize, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_TreasurePrize, itemid_),
  };
  PBG2CBroadCast_TreasurePrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CBroadCast_TreasurePrize_descriptor_,
      PBG2CBroadCast_TreasurePrize::default_instance_,
      PBG2CBroadCast_TreasurePrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_TreasurePrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_TreasurePrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CBroadCast_TreasurePrize));
  PBG2CBroadCast_TreasurePrize_RefreshBoss_descriptor_ = file->message_type(3);
  static const int PBG2CBroadCast_TreasurePrize_RefreshBoss_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_TreasurePrize_RefreshBoss, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_TreasurePrize_RefreshBoss, sceneid_),
  };
  PBG2CBroadCast_TreasurePrize_RefreshBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CBroadCast_TreasurePrize_RefreshBoss_descriptor_,
      PBG2CBroadCast_TreasurePrize_RefreshBoss::default_instance_,
      PBG2CBroadCast_TreasurePrize_RefreshBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_TreasurePrize_RefreshBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_TreasurePrize_RefreshBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CBroadCast_TreasurePrize_RefreshBoss));
  PBG2CBroadCast_GreatWallTrain_descriptor_ = file->message_type(4);
  static const int PBG2CBroadCast_GreatWallTrain_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_GreatWallTrain, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_GreatWallTrain, playername_),
  };
  PBG2CBroadCast_GreatWallTrain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CBroadCast_GreatWallTrain_descriptor_,
      PBG2CBroadCast_GreatWallTrain::default_instance_,
      PBG2CBroadCast_GreatWallTrain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_GreatWallTrain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_GreatWallTrain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CBroadCast_GreatWallTrain));
  PBG2CBroadCast_WorldBoss_descriptor_ = file->message_type(5);
  static const int PBG2CBroadCast_WorldBoss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_WorldBoss, bossactivityid_),
  };
  PBG2CBroadCast_WorldBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CBroadCast_WorldBoss_descriptor_,
      PBG2CBroadCast_WorldBoss::default_instance_,
      PBG2CBroadCast_WorldBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_WorldBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBroadCast_WorldBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CBroadCast_WorldBoss));
  _emBroadcast_Channel_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Broadcast_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CBroadcast_CopymapInvite_descriptor_, &PBG2CBroadcast_CopymapInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CBroadcast_CreateFaction_descriptor_, &PBG2CBroadcast_CreateFaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CBroadCast_TreasurePrize_descriptor_, &PBG2CBroadCast_TreasurePrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CBroadCast_TreasurePrize_RefreshBoss_descriptor_, &PBG2CBroadCast_TreasurePrize_RefreshBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CBroadCast_GreatWallTrain_descriptor_, &PBG2CBroadCast_GreatWallTrain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CBroadCast_WorldBoss_descriptor_, &PBG2CBroadCast_WorldBoss::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Broadcast_2eproto() {
  delete PBG2CBroadcast_CopymapInvite::default_instance_;
  delete PBG2CBroadcast_CopymapInvite_reflection_;
  delete PBG2CBroadcast_CreateFaction::default_instance_;
  delete PBG2CBroadcast_CreateFaction_reflection_;
  delete PBG2CBroadCast_TreasurePrize::default_instance_;
  delete PBG2CBroadCast_TreasurePrize_reflection_;
  delete PBG2CBroadCast_TreasurePrize_RefreshBoss::default_instance_;
  delete PBG2CBroadCast_TreasurePrize_RefreshBoss_reflection_;
  delete PBG2CBroadCast_GreatWallTrain::default_instance_;
  delete PBG2CBroadCast_GreatWallTrain_reflection_;
  delete PBG2CBroadCast_WorldBoss::default_instance_;
  delete PBG2CBroadCast_WorldBoss_reflection_;
}

void protobuf_AddDesc_Broadcast_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_AccountStruct_2eproto();
  ::protobuf_AddDesc_PlayerStruct_2eproto();
  ::protobuf_AddDesc_GameStruct_2eproto();
  ::protobuf_AddDesc_Faction_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Broadcast.proto\032\023AccountStruct.proto\032\022"
    "PlayerStruct.proto\032\020GameStruct.proto\032\rFa"
    "ction.proto\"T\n\034PBG2CBroadcast_CopymapInv"
    "ite\022!\n\007display\030\001 \001(\0132\020.PBPlayerDisplay\022\021"
    "\n\tcopymapid\030\002 \001(\r\"f\n\034PBG2CBroadcast_Crea"
    "teFaction\022!\n\007display\030\001 \001(\0132\020.PBPlayerDis"
    "play\022#\n\013factionbase\030\002 \001(\0132\016.PBFactionBas"
    "e\"B\n\034PBG2CBroadCast_TreasurePrize\022\022\n\npla"
    "yername\030\001 \001(\t\022\016\n\006itemid\030\002 \001(\r\"O\n(PBG2CBr"
    "oadCast_TreasurePrize_RefreshBoss\022\022\n\npla"
    "yername\030\001 \001(\t\022\017\n\007sceneid\030\002 \001(\r\"B\n\035PBG2CB"
    "roadCast_GreatWallTrain\022\r\n\005layer\030\001 \001(\r\022\022"
    "\n\nplayername\030\002 \001(\t\"2\n\030PBG2CBroadCast_Wor"
    "ldBoss\022\026\n\016bossActivityId\030\001 \001(\r*\365\001\n\024_emBr"
    "oadcast_Channel\022\032\n\026BroadcastChannel_Worl"
    "d\020\001\022\031\n\025BroadcastChannel_Line\020\002\022\031\n\025Broadc"
    "astChannel_Team\020\003\022\033\n\027BroadcastChannel_Pl"
    "ayer\020\004\022\034\n\030BroadcastChannel_Faction\020\005\022\030\n\024"
    "BroadcastChannel_War\020\006\022\032\n\026BroadcastChann"
    "el_Union\020\007\022\032\n\026BroadcastChannel_Corps\020\010", 798);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Broadcast.proto", &protobuf_RegisterTypes);
  PBG2CBroadcast_CopymapInvite::default_instance_ = new PBG2CBroadcast_CopymapInvite();
  PBG2CBroadcast_CreateFaction::default_instance_ = new PBG2CBroadcast_CreateFaction();
  PBG2CBroadCast_TreasurePrize::default_instance_ = new PBG2CBroadCast_TreasurePrize();
  PBG2CBroadCast_TreasurePrize_RefreshBoss::default_instance_ = new PBG2CBroadCast_TreasurePrize_RefreshBoss();
  PBG2CBroadCast_GreatWallTrain::default_instance_ = new PBG2CBroadCast_GreatWallTrain();
  PBG2CBroadCast_WorldBoss::default_instance_ = new PBG2CBroadCast_WorldBoss();
  PBG2CBroadcast_CopymapInvite::default_instance_->InitAsDefaultInstance();
  PBG2CBroadcast_CreateFaction::default_instance_->InitAsDefaultInstance();
  PBG2CBroadCast_TreasurePrize::default_instance_->InitAsDefaultInstance();
  PBG2CBroadCast_TreasurePrize_RefreshBoss::default_instance_->InitAsDefaultInstance();
  PBG2CBroadCast_GreatWallTrain::default_instance_->InitAsDefaultInstance();
  PBG2CBroadCast_WorldBoss::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Broadcast_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Broadcast_2eproto {
  StaticDescriptorInitializer_Broadcast_2eproto() {
    protobuf_AddDesc_Broadcast_2eproto();
  }
} static_descriptor_initializer_Broadcast_2eproto_;

const ::google::protobuf::EnumDescriptor* _emBroadcast_Channel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emBroadcast_Channel_descriptor_;
}
bool _emBroadcast_Channel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CBroadcast_CopymapInvite::kDisplayFieldNumber;
const int PBG2CBroadcast_CopymapInvite::kCopymapidFieldNumber;
#endif  // !_MSC_VER

PBG2CBroadcast_CopymapInvite::PBG2CBroadcast_CopymapInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CBroadcast_CopymapInvite::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CBroadcast_CopymapInvite::PBG2CBroadcast_CopymapInvite(const PBG2CBroadcast_CopymapInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CBroadcast_CopymapInvite::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CBroadcast_CopymapInvite::~PBG2CBroadcast_CopymapInvite() {
  SharedDtor();
}

void PBG2CBroadcast_CopymapInvite::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBG2CBroadcast_CopymapInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CBroadcast_CopymapInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CBroadcast_CopymapInvite_descriptor_;
}

const PBG2CBroadcast_CopymapInvite& PBG2CBroadcast_CopymapInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Broadcast_2eproto();  return *default_instance_;
}

PBG2CBroadcast_CopymapInvite* PBG2CBroadcast_CopymapInvite::default_instance_ = NULL;

PBG2CBroadcast_CopymapInvite* PBG2CBroadcast_CopymapInvite::New() const {
  return new PBG2CBroadcast_CopymapInvite;
}

void PBG2CBroadcast_CopymapInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CBroadcast_CopymapInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copymapid;
        break;
      }
      
      // optional uint32 copymapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CBroadcast_CopymapInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CBroadcast_CopymapInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CBroadcast_CopymapInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 copymapid = 2;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CBroadcast_CopymapInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CBroadcast_CopymapInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CBroadcast_CopymapInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CBroadcast_CopymapInvite::MergeFrom(const PBG2CBroadcast_CopymapInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CBroadcast_CopymapInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CBroadcast_CopymapInvite::CopyFrom(const PBG2CBroadcast_CopymapInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CBroadcast_CopymapInvite::IsInitialized() const {
  
  return true;
}

void PBG2CBroadcast_CopymapInvite::Swap(PBG2CBroadcast_CopymapInvite* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CBroadcast_CopymapInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CBroadcast_CopymapInvite_descriptor_;
  metadata.reflection = PBG2CBroadcast_CopymapInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CBroadcast_CreateFaction::kDisplayFieldNumber;
const int PBG2CBroadcast_CreateFaction::kFactionbaseFieldNumber;
#endif  // !_MSC_VER

PBG2CBroadcast_CreateFaction::PBG2CBroadcast_CreateFaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CBroadcast_CreateFaction::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
  factionbase_ = const_cast< ::PBFactionBase*>(&::PBFactionBase::default_instance());
}

PBG2CBroadcast_CreateFaction::PBG2CBroadcast_CreateFaction(const PBG2CBroadcast_CreateFaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CBroadcast_CreateFaction::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  factionbase_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CBroadcast_CreateFaction::~PBG2CBroadcast_CreateFaction() {
  SharedDtor();
}

void PBG2CBroadcast_CreateFaction::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
    delete factionbase_;
  }
}

void PBG2CBroadcast_CreateFaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CBroadcast_CreateFaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CBroadcast_CreateFaction_descriptor_;
}

const PBG2CBroadcast_CreateFaction& PBG2CBroadcast_CreateFaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Broadcast_2eproto();  return *default_instance_;
}

PBG2CBroadcast_CreateFaction* PBG2CBroadcast_CreateFaction::default_instance_ = NULL;

PBG2CBroadcast_CreateFaction* PBG2CBroadcast_CreateFaction::New() const {
  return new PBG2CBroadcast_CreateFaction;
}

void PBG2CBroadcast_CreateFaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    if (has_factionbase()) {
      if (factionbase_ != NULL) factionbase_->::PBFactionBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CBroadcast_CreateFaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_factionbase;
        break;
      }
      
      // optional .PBFactionBase factionbase = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factionbase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_factionbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CBroadcast_CreateFaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional .PBFactionBase factionbase = 2;
  if (has_factionbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->factionbase(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CBroadcast_CreateFaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional .PBFactionBase factionbase = 2;
  if (has_factionbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->factionbase(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CBroadcast_CreateFaction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional .PBFactionBase factionbase = 2;
    if (has_factionbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->factionbase());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CBroadcast_CreateFaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CBroadcast_CreateFaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CBroadcast_CreateFaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CBroadcast_CreateFaction::MergeFrom(const PBG2CBroadcast_CreateFaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_factionbase()) {
      mutable_factionbase()->::PBFactionBase::MergeFrom(from.factionbase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CBroadcast_CreateFaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CBroadcast_CreateFaction::CopyFrom(const PBG2CBroadcast_CreateFaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CBroadcast_CreateFaction::IsInitialized() const {
  
  return true;
}

void PBG2CBroadcast_CreateFaction::Swap(PBG2CBroadcast_CreateFaction* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(factionbase_, other->factionbase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CBroadcast_CreateFaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CBroadcast_CreateFaction_descriptor_;
  metadata.reflection = PBG2CBroadcast_CreateFaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CBroadCast_TreasurePrize::kPlayernameFieldNumber;
const int PBG2CBroadCast_TreasurePrize::kItemidFieldNumber;
#endif  // !_MSC_VER

PBG2CBroadCast_TreasurePrize::PBG2CBroadCast_TreasurePrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CBroadCast_TreasurePrize::InitAsDefaultInstance() {
}

PBG2CBroadCast_TreasurePrize::PBG2CBroadCast_TreasurePrize(const PBG2CBroadCast_TreasurePrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CBroadCast_TreasurePrize::SharedCtor() {
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CBroadCast_TreasurePrize::~PBG2CBroadCast_TreasurePrize() {
  SharedDtor();
}

void PBG2CBroadCast_TreasurePrize::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void PBG2CBroadCast_TreasurePrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CBroadCast_TreasurePrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CBroadCast_TreasurePrize_descriptor_;
}

const PBG2CBroadCast_TreasurePrize& PBG2CBroadCast_TreasurePrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Broadcast_2eproto();  return *default_instance_;
}

PBG2CBroadCast_TreasurePrize* PBG2CBroadCast_TreasurePrize::default_instance_ = NULL;

PBG2CBroadCast_TreasurePrize* PBG2CBroadCast_TreasurePrize::New() const {
  return new PBG2CBroadCast_TreasurePrize;
}

void PBG2CBroadCast_TreasurePrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CBroadCast_TreasurePrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }
      
      // optional uint32 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CBroadCast_TreasurePrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playername = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playername(), output);
  }
  
  // optional uint32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CBroadCast_TreasurePrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playername = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playername(), target);
  }
  
  // optional uint32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CBroadCast_TreasurePrize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playername = 1;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // optional uint32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CBroadCast_TreasurePrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CBroadCast_TreasurePrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CBroadCast_TreasurePrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CBroadCast_TreasurePrize::MergeFrom(const PBG2CBroadCast_TreasurePrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CBroadCast_TreasurePrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CBroadCast_TreasurePrize::CopyFrom(const PBG2CBroadCast_TreasurePrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CBroadCast_TreasurePrize::IsInitialized() const {
  
  return true;
}

void PBG2CBroadCast_TreasurePrize::Swap(PBG2CBroadCast_TreasurePrize* other) {
  if (other != this) {
    std::swap(playername_, other->playername_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CBroadCast_TreasurePrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CBroadCast_TreasurePrize_descriptor_;
  metadata.reflection = PBG2CBroadCast_TreasurePrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CBroadCast_TreasurePrize_RefreshBoss::kPlayernameFieldNumber;
const int PBG2CBroadCast_TreasurePrize_RefreshBoss::kSceneidFieldNumber;
#endif  // !_MSC_VER

PBG2CBroadCast_TreasurePrize_RefreshBoss::PBG2CBroadCast_TreasurePrize_RefreshBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CBroadCast_TreasurePrize_RefreshBoss::InitAsDefaultInstance() {
}

PBG2CBroadCast_TreasurePrize_RefreshBoss::PBG2CBroadCast_TreasurePrize_RefreshBoss(const PBG2CBroadCast_TreasurePrize_RefreshBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CBroadCast_TreasurePrize_RefreshBoss::SharedCtor() {
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sceneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CBroadCast_TreasurePrize_RefreshBoss::~PBG2CBroadCast_TreasurePrize_RefreshBoss() {
  SharedDtor();
}

void PBG2CBroadCast_TreasurePrize_RefreshBoss::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void PBG2CBroadCast_TreasurePrize_RefreshBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CBroadCast_TreasurePrize_RefreshBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CBroadCast_TreasurePrize_RefreshBoss_descriptor_;
}

const PBG2CBroadCast_TreasurePrize_RefreshBoss& PBG2CBroadCast_TreasurePrize_RefreshBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Broadcast_2eproto();  return *default_instance_;
}

PBG2CBroadCast_TreasurePrize_RefreshBoss* PBG2CBroadCast_TreasurePrize_RefreshBoss::default_instance_ = NULL;

PBG2CBroadCast_TreasurePrize_RefreshBoss* PBG2CBroadCast_TreasurePrize_RefreshBoss::New() const {
  return new PBG2CBroadCast_TreasurePrize_RefreshBoss;
}

void PBG2CBroadCast_TreasurePrize_RefreshBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    sceneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CBroadCast_TreasurePrize_RefreshBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneid;
        break;
      }
      
      // optional uint32 sceneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CBroadCast_TreasurePrize_RefreshBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playername = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playername(), output);
  }
  
  // optional uint32 sceneid = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sceneid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CBroadCast_TreasurePrize_RefreshBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playername = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playername(), target);
  }
  
  // optional uint32 sceneid = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sceneid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CBroadCast_TreasurePrize_RefreshBoss::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playername = 1;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // optional uint32 sceneid = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CBroadCast_TreasurePrize_RefreshBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CBroadCast_TreasurePrize_RefreshBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CBroadCast_TreasurePrize_RefreshBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CBroadCast_TreasurePrize_RefreshBoss::MergeFrom(const PBG2CBroadCast_TreasurePrize_RefreshBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CBroadCast_TreasurePrize_RefreshBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CBroadCast_TreasurePrize_RefreshBoss::CopyFrom(const PBG2CBroadCast_TreasurePrize_RefreshBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CBroadCast_TreasurePrize_RefreshBoss::IsInitialized() const {
  
  return true;
}

void PBG2CBroadCast_TreasurePrize_RefreshBoss::Swap(PBG2CBroadCast_TreasurePrize_RefreshBoss* other) {
  if (other != this) {
    std::swap(playername_, other->playername_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CBroadCast_TreasurePrize_RefreshBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CBroadCast_TreasurePrize_RefreshBoss_descriptor_;
  metadata.reflection = PBG2CBroadCast_TreasurePrize_RefreshBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CBroadCast_GreatWallTrain::kLayerFieldNumber;
const int PBG2CBroadCast_GreatWallTrain::kPlayernameFieldNumber;
#endif  // !_MSC_VER

PBG2CBroadCast_GreatWallTrain::PBG2CBroadCast_GreatWallTrain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CBroadCast_GreatWallTrain::InitAsDefaultInstance() {
}

PBG2CBroadCast_GreatWallTrain::PBG2CBroadCast_GreatWallTrain(const PBG2CBroadCast_GreatWallTrain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CBroadCast_GreatWallTrain::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CBroadCast_GreatWallTrain::~PBG2CBroadCast_GreatWallTrain() {
  SharedDtor();
}

void PBG2CBroadCast_GreatWallTrain::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void PBG2CBroadCast_GreatWallTrain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CBroadCast_GreatWallTrain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CBroadCast_GreatWallTrain_descriptor_;
}

const PBG2CBroadCast_GreatWallTrain& PBG2CBroadCast_GreatWallTrain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Broadcast_2eproto();  return *default_instance_;
}

PBG2CBroadCast_GreatWallTrain* PBG2CBroadCast_GreatWallTrain::default_instance_ = NULL;

PBG2CBroadCast_GreatWallTrain* PBG2CBroadCast_GreatWallTrain::New() const {
  return new PBG2CBroadCast_GreatWallTrain;
}

void PBG2CBroadCast_GreatWallTrain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 0u;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CBroadCast_GreatWallTrain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }
      
      // optional string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CBroadCast_GreatWallTrain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layer(), output);
  }
  
  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CBroadCast_GreatWallTrain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layer(), target);
  }
  
  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CBroadCast_GreatWallTrain::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }
    
    // optional string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CBroadCast_GreatWallTrain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CBroadCast_GreatWallTrain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CBroadCast_GreatWallTrain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CBroadCast_GreatWallTrain::MergeFrom(const PBG2CBroadCast_GreatWallTrain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CBroadCast_GreatWallTrain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CBroadCast_GreatWallTrain::CopyFrom(const PBG2CBroadCast_GreatWallTrain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CBroadCast_GreatWallTrain::IsInitialized() const {
  
  return true;
}

void PBG2CBroadCast_GreatWallTrain::Swap(PBG2CBroadCast_GreatWallTrain* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CBroadCast_GreatWallTrain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CBroadCast_GreatWallTrain_descriptor_;
  metadata.reflection = PBG2CBroadCast_GreatWallTrain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CBroadCast_WorldBoss::kBossActivityIdFieldNumber;
#endif  // !_MSC_VER

PBG2CBroadCast_WorldBoss::PBG2CBroadCast_WorldBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CBroadCast_WorldBoss::InitAsDefaultInstance() {
}

PBG2CBroadCast_WorldBoss::PBG2CBroadCast_WorldBoss(const PBG2CBroadCast_WorldBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CBroadCast_WorldBoss::SharedCtor() {
  _cached_size_ = 0;
  bossactivityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CBroadCast_WorldBoss::~PBG2CBroadCast_WorldBoss() {
  SharedDtor();
}

void PBG2CBroadCast_WorldBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CBroadCast_WorldBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CBroadCast_WorldBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CBroadCast_WorldBoss_descriptor_;
}

const PBG2CBroadCast_WorldBoss& PBG2CBroadCast_WorldBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Broadcast_2eproto();  return *default_instance_;
}

PBG2CBroadCast_WorldBoss* PBG2CBroadCast_WorldBoss::default_instance_ = NULL;

PBG2CBroadCast_WorldBoss* PBG2CBroadCast_WorldBoss::New() const {
  return new PBG2CBroadCast_WorldBoss;
}

void PBG2CBroadCast_WorldBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossactivityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CBroadCast_WorldBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bossActivityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossactivityid_)));
          set_has_bossactivityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CBroadCast_WorldBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bossActivityId = 1;
  if (has_bossactivityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossactivityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CBroadCast_WorldBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bossActivityId = 1;
  if (has_bossactivityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossactivityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CBroadCast_WorldBoss::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bossActivityId = 1;
    if (has_bossactivityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossactivityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CBroadCast_WorldBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CBroadCast_WorldBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CBroadCast_WorldBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CBroadCast_WorldBoss::MergeFrom(const PBG2CBroadCast_WorldBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossactivityid()) {
      set_bossactivityid(from.bossactivityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CBroadCast_WorldBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CBroadCast_WorldBoss::CopyFrom(const PBG2CBroadCast_WorldBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CBroadCast_WorldBoss::IsInitialized() const {
  
  return true;
}

void PBG2CBroadCast_WorldBoss::Swap(PBG2CBroadCast_WorldBoss* other) {
  if (other != this) {
    std::swap(bossactivityid_, other->bossactivityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CBroadCast_WorldBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CBroadCast_WorldBoss_descriptor_;
  metadata.reflection = PBG2CBroadCast_WorldBoss_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
