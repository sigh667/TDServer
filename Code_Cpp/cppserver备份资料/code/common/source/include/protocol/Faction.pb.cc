// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Faction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBFactionBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionDBMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionDBMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionMemberBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionMemberBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionApplyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionApplyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionStudy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionStudy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionStudyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionStudyConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionJobPrivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionJobPrivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionImpeach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionImpeach_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionDepot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionDepot_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerFactionSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerFactionSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerFactionDonateMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerFactionDonateMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerFactionTaskItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerFactionTaskItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerFactionTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerFactionTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerFaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerFaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionOfflineRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionOfflineRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionEventAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionEventAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionEdit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionEdit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionApplyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionApplyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionMemberList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionMemberList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionRequire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionRequire_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionSyn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionSyn_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionApplying_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionApplying_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CImpeachAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CImpeachAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionOpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionOpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionOptFeedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionOptFeedback_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionOptResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionOptResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCAGSetElite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCAGSetElite_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCAGSetBeauty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCAGSetBeauty_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCAGSetPrivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCAGSetPrivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionBeInviteJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionBeInviteJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionInviteJoinResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionInviteJoinResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionSelfSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionSelfSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionSelfSkillList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionSelfSkillList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionStudyFactionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionStudyFactionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionStudyFactionList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionStudyFactionList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GWatchOhterSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GWatchOhterSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionOhterSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionOhterSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionOhterSkillList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionOhterSkillList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GUpgradeSelfSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GUpgradeSelfSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CUpgradeSelfSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CUpgradeSelfSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGAWUpgradeSelfSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGAWUpgradeSelfSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAddStudyRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAddStudyRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GAddStudyRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GAddStudyRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GDelStudyRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GDelStudyRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CDelStudyRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CDelStudyRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionDevelopSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionDevelopSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionDevelopSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionDevelopSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionSuspendDevelopSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionSuspendDevelopSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionSuspendDevelopSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionSuspendDevelopSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionOpenStudy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionOpenStudy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionOpenStudy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionOpenStudy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GFactionMemberAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GFactionMemberAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionMemberAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionMemberAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionDonateMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionDonateMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionDrinkWine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionDrinkWine_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionDrinkWine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionDrinkWine_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerDrinkWine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerDrinkWine_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionDonateMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionDonateMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGAWFactionDonateMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGAWFactionDonateMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionDonateMoneyBroad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionDonateMoneyBroad_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionCompleteTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionCompleteTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFactionCompleteTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFactionCompleteTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGAWFactionCompleteTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGAWFactionCompleteTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionAllotMoneyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionAllotMoneyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionAllotItemAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionAllotItemAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionChallenger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionChallenger_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBManorCpymapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBManorCpymapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBManorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBManorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAllManor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAllManor_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBManorBattlefieldPlayerScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBManorBattlefieldPlayerScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBManorBattleFieldReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBManorBattleFieldReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBW2GFactionSyn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2GFactionSyn_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGL2WFactionSynPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGL2WFactionSynPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCorpsOfflineChangeJob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCorpsOfflineChangeJob_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Faction_2eproto() {
  protobuf_AddDesc_Faction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Faction.proto");
  GOOGLE_CHECK(file != NULL);
  PBFactionBase_descriptor_ = file->message_type(0);
  static const int PBFactionBase_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBase, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBase, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBase, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBase, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBase, union__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBase, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBase, corps_),
  };
  PBFactionBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionBase_descriptor_,
      PBFactionBase::default_instance_,
      PBFactionBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionBase));
  PBFactionDBMember_descriptor_ = file->message_type(1);
  static const int PBFactionDBMember_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBMember, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBMember, contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBMember, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBMember, jointime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBMember, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBMember, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBMember, lastofflinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBMember, fobitcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBMember, fobittime_),
  };
  PBFactionDBMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionDBMember_descriptor_,
      PBFactionDBMember::default_instance_,
      PBFactionDBMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionDBMember));
  PBFactionMemberBase_descriptor_ = file->message_type(2);
  static const int PBFactionMemberBase_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMemberBase, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMemberBase, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMemberBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMemberBase, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMemberBase, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMemberBase, force_),
  };
  PBFactionMemberBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionMemberBase_descriptor_,
      PBFactionMemberBase::default_instance_,
      PBFactionMemberBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMemberBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMemberBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionMemberBase));
  PBFactionApplyData_descriptor_ = file->message_type(3);
  static const int PBFactionApplyData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionApplyData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionApplyData, stamp_),
  };
  PBFactionApplyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionApplyData_descriptor_,
      PBFactionApplyData::default_instance_,
      PBFactionApplyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionApplyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionApplyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionApplyData));
  PBFactionSkill_descriptor_ = file->message_type(4);
  static const int PBFactionSkill_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionSkill, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionSkill, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionSkill, developlefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionSkill, developlasttime_),
  };
  PBFactionSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionSkill_descriptor_,
      PBFactionSkill::default_instance_,
      PBFactionSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionSkill));
  PBFactionStudy_descriptor_ = file->message_type(5);
  static const int PBFactionStudy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionStudy, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionStudy, begintime_),
  };
  PBFactionStudy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionStudy_descriptor_,
      PBFactionStudy::default_instance_,
      PBFactionStudy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionStudy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionStudy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionStudy));
  PBFactionStudyConfig_descriptor_ = file->message_type(6);
  static const int PBFactionStudyConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionStudyConfig, openstudy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionStudyConfig, studymoneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionStudyConfig, studymoneyvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionStudyConfig, time_),
  };
  PBFactionStudyConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionStudyConfig_descriptor_,
      PBFactionStudyConfig::default_instance_,
      PBFactionStudyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionStudyConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionStudyConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionStudyConfig));
  PBFactionJobPrivilege_descriptor_ = file->message_type(7);
  static const int PBFactionJobPrivilege_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionJobPrivilege, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionJobPrivilege, privilegeid_),
  };
  PBFactionJobPrivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionJobPrivilege_descriptor_,
      PBFactionJobPrivilege::default_instance_,
      PBFactionJobPrivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionJobPrivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionJobPrivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionJobPrivilege));
  PBFactionImpeach_descriptor_ = file->message_type(8);
  static const int PBFactionImpeach_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionImpeach, impeachid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionImpeach, impeachtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionImpeach, maxmembernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionImpeach, agreemember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionImpeach, refusemember_),
  };
  PBFactionImpeach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionImpeach_descriptor_,
      PBFactionImpeach::default_instance_,
      PBFactionImpeach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionImpeach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionImpeach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionImpeach));
  PBFactionDBData_descriptor_ = file->message_type(9);
  static const int PBFactionDBData_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, declaration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, stone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, sliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, boom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, applys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, requirelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, refuses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, study_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, curstudyconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, frontstudyconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, impeach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, toplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, autoapply_),
  };
  PBFactionDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionDBData_descriptor_,
      PBFactionDBData::default_instance_,
      PBFactionDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionDBData));
  PBFactionDepot_descriptor_ = file->message_type(10);
  static const int PBFactionDepot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDepot, uniqueindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDepot, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDepot, money_),
  };
  PBFactionDepot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionDepot_descriptor_,
      PBFactionDepot::default_instance_,
      PBFactionDepot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDepot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDepot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionDepot));
  PBFactionMember_descriptor_ = file->message_type(11);
  static const int PBFactionMember_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMember, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMember, contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMember, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMember, jointime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMember, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMember, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMember, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMember, lastofflinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMember, fobitcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMember, fobittime_),
  };
  PBFactionMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionMember_descriptor_,
      PBFactionMember::default_instance_,
      PBFactionMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionMember));
  PBFactionDisplay_descriptor_ = file->message_type(12);
  static const int PBFactionDisplay_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDisplay, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDisplay, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDisplay, people_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDisplay, peoplemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDisplay, isleaderonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDisplay, boom_),
  };
  PBFactionDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionDisplay_descriptor_,
      PBFactionDisplay::default_instance_,
      PBFactionDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionDisplay));
  PBPlayerFactionSkill_descriptor_ = file->message_type(13);
  static const int PBPlayerFactionSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionSkill, level_),
  };
  PBPlayerFactionSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerFactionSkill_descriptor_,
      PBPlayerFactionSkill::default_instance_,
      PBPlayerFactionSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerFactionSkill));
  PBPlayerFactionDonateMoney_descriptor_ = file->message_type(14);
  static const int PBPlayerFactionDonateMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionDonateMoney, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionDonateMoney, count_),
  };
  PBPlayerFactionDonateMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerFactionDonateMoney_descriptor_,
      PBPlayerFactionDonateMoney::default_instance_,
      PBPlayerFactionDonateMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionDonateMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionDonateMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerFactionDonateMoney));
  PBPlayerFactionTaskItem_descriptor_ = file->message_type(15);
  static const int PBPlayerFactionTaskItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionTaskItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionTaskItem, count_),
  };
  PBPlayerFactionTaskItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerFactionTaskItem_descriptor_,
      PBPlayerFactionTaskItem::default_instance_,
      PBPlayerFactionTaskItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionTaskItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionTaskItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerFactionTaskItem));
  PBPlayerFactionTask_descriptor_ = file->message_type(16);
  static const int PBPlayerFactionTask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionTask, taskcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionTask, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionTask, taskitem_),
  };
  PBPlayerFactionTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerFactionTask_descriptor_,
      PBPlayerFactionTask::default_instance_,
      PBPlayerFactionTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFactionTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerFactionTask));
  PBPlayerFaction_descriptor_ = file->message_type(17);
  static const int PBPlayerFaction_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFaction, saveorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFaction, lastleavetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFaction, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFaction, donatemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFaction, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFaction, drinkwine_),
  };
  PBPlayerFaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerFaction_descriptor_,
      PBPlayerFaction::default_instance_,
      PBPlayerFaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerFaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerFaction));
  PBFactionOfflineRemove_descriptor_ = file->message_type(18);
  static const int PBFactionOfflineRemove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionOfflineRemove, lastleavetime_),
  };
  PBFactionOfflineRemove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionOfflineRemove_descriptor_,
      PBFactionOfflineRemove::default_instance_,
      PBFactionOfflineRemove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionOfflineRemove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionOfflineRemove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionOfflineRemove));
  PBFactionEvent_descriptor_ = file->message_type(19);
  static const int PBFactionEvent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEvent, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEvent, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEvent, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEvent, stone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEvent, sliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEvent, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEvent, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEvent, money_),
  };
  PBFactionEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionEvent_descriptor_,
      PBFactionEvent::default_instance_,
      PBFactionEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionEvent));
  PBFactionEventAll_descriptor_ = file->message_type(20);
  static const int PBFactionEventAll_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEventAll, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEventAll, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEventAll, depot_),
  };
  PBFactionEventAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionEventAll_descriptor_,
      PBFactionEventAll::default_instance_,
      PBFactionEventAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEventAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionEventAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionEventAll));
  PBC2GFactionCreate_descriptor_ = file->message_type(21);
  static const int PBC2GFactionCreate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCreate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCreate, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCreate, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCreate, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCreate, declaration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCreate, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCreate, corps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCreate, creattime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCreate, consume_),
  };
  PBC2GFactionCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionCreate_descriptor_,
      PBC2GFactionCreate::default_instance_,
      PBC2GFactionCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionCreate));
  PBC2GFactionApply_descriptor_ = file->message_type(22);
  static const int PBC2GFactionApply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionApply, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionApply, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionApply, isapply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionApply, base_),
  };
  PBC2GFactionApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionApply_descriptor_,
      PBC2GFactionApply::default_instance_,
      PBC2GFactionApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionApply));
  PBG2CFactionList_descriptor_ = file->message_type(23);
  static const int PBG2CFactionList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionList, list_),
  };
  PBG2CFactionList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionList_descriptor_,
      PBG2CFactionList::default_instance_,
      PBG2CFactionList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionList));
  PBC2GFactionEdit_descriptor_ = file->message_type(24);
  static const int PBC2GFactionEdit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionEdit, declaration_),
  };
  PBC2GFactionEdit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionEdit_descriptor_,
      PBC2GFactionEdit::default_instance_,
      PBC2GFactionEdit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionEdit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionEdit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionEdit));
  PBG2CFactionApplyList_descriptor_ = file->message_type(25);
  static const int PBG2CFactionApplyList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionApplyList, applys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionApplyList, autoapply_),
  };
  PBG2CFactionApplyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionApplyList_descriptor_,
      PBG2CFactionApplyList::default_instance_,
      PBG2CFactionApplyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionApplyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionApplyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionApplyList));
  PBG2CFactionMemberList_descriptor_ = file->message_type(26);
  static const int PBG2CFactionMemberList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionMemberList, members_),
  };
  PBG2CFactionMemberList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionMemberList_descriptor_,
      PBG2CFactionMemberList::default_instance_,
      PBG2CFactionMemberList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionMemberList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionMemberList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionMemberList));
  PBC2GFactionRequire_descriptor_ = file->message_type(27);
  static const int PBC2GFactionRequire_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionRequire, level_),
  };
  PBC2GFactionRequire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionRequire_descriptor_,
      PBC2GFactionRequire::default_instance_,
      PBC2GFactionRequire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionRequire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionRequire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionRequire));
  PBG2CFactionSyn_descriptor_ = file->message_type(28);
  static const int PBG2CFactionSyn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionSyn, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionSyn, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionSyn, job_),
  };
  PBG2CFactionSyn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionSyn_descriptor_,
      PBG2CFactionSyn::default_instance_,
      PBG2CFactionSyn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionSyn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionSyn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionSyn));
  PBG2CFactionApplying_descriptor_ = file->message_type(29);
  static const int PBG2CFactionApplying_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionApplying, applys_),
  };
  PBG2CFactionApplying_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionApplying_descriptor_,
      PBG2CFactionApplying::default_instance_,
      PBG2CFactionApplying_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionApplying, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionApplying, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionApplying));
  PBG2CImpeachAck_descriptor_ = file->message_type(30);
  static const int PBG2CImpeachAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CImpeachAck, impeach_),
  };
  PBG2CImpeachAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CImpeachAck_descriptor_,
      PBG2CImpeachAck::default_instance_,
      PBG2CImpeachAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CImpeachAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CImpeachAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CImpeachAck));
  PBC2GFactionOpt_descriptor_ = file->message_type(31);
  static const int PBC2GFactionOpt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionOpt, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionOpt, uparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionOpt, uparam2_),
  };
  PBC2GFactionOpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionOpt_descriptor_,
      PBC2GFactionOpt::default_instance_,
      PBC2GFactionOpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionOpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionOpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionOpt));
  PBG2CFactionOptFeedback_descriptor_ = file->message_type(32);
  static const int PBG2CFactionOptFeedback_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptFeedback, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptFeedback, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptFeedback, uparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptFeedback, uparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptFeedback, sparam1_),
  };
  PBG2CFactionOptFeedback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionOptFeedback_descriptor_,
      PBG2CFactionOptFeedback::default_instance_,
      PBG2CFactionOptFeedback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptFeedback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptFeedback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionOptFeedback));
  PBG2CFactionOptResult_descriptor_ = file->message_type(33);
  static const int PBG2CFactionOptResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptResult, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptResult, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptResult, uparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptResult, uparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptResult, sparam1_),
  };
  PBG2CFactionOptResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionOptResult_descriptor_,
      PBG2CFactionOptResult::default_instance_,
      PBG2CFactionOptResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOptResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionOptResult));
  PBCAGSetElite_descriptor_ = file->message_type(34);
  static const int PBCAGSetElite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCAGSetElite, memberid_),
  };
  PBCAGSetElite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCAGSetElite_descriptor_,
      PBCAGSetElite::default_instance_,
      PBCAGSetElite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCAGSetElite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCAGSetElite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCAGSetElite));
  PBCAGSetBeauty_descriptor_ = file->message_type(35);
  static const int PBCAGSetBeauty_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCAGSetBeauty, memberid_),
  };
  PBCAGSetBeauty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCAGSetBeauty_descriptor_,
      PBCAGSetBeauty::default_instance_,
      PBCAGSetBeauty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCAGSetBeauty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCAGSetBeauty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCAGSetBeauty));
  PBCAGSetPrivilege_descriptor_ = file->message_type(36);
  static const int PBCAGSetPrivilege_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCAGSetPrivilege, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCAGSetPrivilege, privilegeid_),
  };
  PBCAGSetPrivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCAGSetPrivilege_descriptor_,
      PBCAGSetPrivilege::default_instance_,
      PBCAGSetPrivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCAGSetPrivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCAGSetPrivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCAGSetPrivilege));
  PBG2CFactionBeInviteJoin_descriptor_ = file->message_type(37);
  static const int PBG2CFactionBeInviteJoin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionBeInviteJoin, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionBeInviteJoin, inviterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionBeInviteJoin, invitername_),
  };
  PBG2CFactionBeInviteJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionBeInviteJoin_descriptor_,
      PBG2CFactionBeInviteJoin::default_instance_,
      PBG2CFactionBeInviteJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionBeInviteJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionBeInviteJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionBeInviteJoin));
  PBG2CFactionInviteJoinResult_descriptor_ = file->message_type(38);
  static const int PBG2CFactionInviteJoinResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionInviteJoinResult, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionInviteJoinResult, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionInviteJoinResult, isagree_),
  };
  PBG2CFactionInviteJoinResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionInviteJoinResult_descriptor_,
      PBG2CFactionInviteJoinResult::default_instance_,
      PBG2CFactionInviteJoinResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionInviteJoinResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionInviteJoinResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionInviteJoinResult));
  FactionSelfSkillInfo_descriptor_ = file->message_type(39);
  static const int FactionSelfSkillInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSelfSkillInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSelfSkillInfo, selflevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSelfSkillInfo, studylevel_),
  };
  FactionSelfSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionSelfSkillInfo_descriptor_,
      FactionSelfSkillInfo::default_instance_,
      FactionSelfSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSelfSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSelfSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionSelfSkillInfo));
  PBG2CFactionSelfSkillList_descriptor_ = file->message_type(40);
  static const int PBG2CFactionSelfSkillList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionSelfSkillList, list_),
  };
  PBG2CFactionSelfSkillList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionSelfSkillList_descriptor_,
      PBG2CFactionSelfSkillList::default_instance_,
      PBG2CFactionSelfSkillList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionSelfSkillList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionSelfSkillList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionSelfSkillList));
  FactionStudyFactionInfo_descriptor_ = file->message_type(41);
  static const int FactionStudyFactionInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionStudyFactionInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionStudyFactionInfo, levelsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionStudyFactionInfo, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionStudyFactionInfo, moneyvalue_),
  };
  FactionStudyFactionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionStudyFactionInfo_descriptor_,
      FactionStudyFactionInfo::default_instance_,
      FactionStudyFactionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionStudyFactionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionStudyFactionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionStudyFactionInfo));
  PBG2CFactionStudyFactionList_descriptor_ = file->message_type(42);
  static const int PBG2CFactionStudyFactionList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionStudyFactionList, list_),
  };
  PBG2CFactionStudyFactionList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionStudyFactionList_descriptor_,
      PBG2CFactionStudyFactionList::default_instance_,
      PBG2CFactionStudyFactionList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionStudyFactionList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionStudyFactionList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionStudyFactionList));
  PBC2GWatchOhterSkill_descriptor_ = file->message_type(43);
  static const int PBC2GWatchOhterSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWatchOhterSkill, factionid_),
  };
  PBC2GWatchOhterSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GWatchOhterSkill_descriptor_,
      PBC2GWatchOhterSkill::default_instance_,
      PBC2GWatchOhterSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWatchOhterSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWatchOhterSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GWatchOhterSkill));
  FactionOhterSkillInfo_descriptor_ = file->message_type(44);
  static const int FactionOhterSkillInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionOhterSkillInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionOhterSkillInfo, selflevel_),
  };
  FactionOhterSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionOhterSkillInfo_descriptor_,
      FactionOhterSkillInfo::default_instance_,
      FactionOhterSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionOhterSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionOhterSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionOhterSkillInfo));
  PBG2CFactionOhterSkillList_descriptor_ = file->message_type(45);
  static const int PBG2CFactionOhterSkillList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOhterSkillList, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOhterSkillList, list_),
  };
  PBG2CFactionOhterSkillList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionOhterSkillList_descriptor_,
      PBG2CFactionOhterSkillList::default_instance_,
      PBG2CFactionOhterSkillList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOhterSkillList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOhterSkillList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionOhterSkillList));
  PBC2GUpgradeSelfSkill_descriptor_ = file->message_type(46);
  static const int PBC2GUpgradeSelfSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUpgradeSelfSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUpgradeSelfSkill, level_),
  };
  PBC2GUpgradeSelfSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GUpgradeSelfSkill_descriptor_,
      PBC2GUpgradeSelfSkill::default_instance_,
      PBC2GUpgradeSelfSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUpgradeSelfSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUpgradeSelfSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GUpgradeSelfSkill));
  PBG2CUpgradeSelfSkill_descriptor_ = file->message_type(47);
  static const int PBG2CUpgradeSelfSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpgradeSelfSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpgradeSelfSkill, level_),
  };
  PBG2CUpgradeSelfSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CUpgradeSelfSkill_descriptor_,
      PBG2CUpgradeSelfSkill::default_instance_,
      PBG2CUpgradeSelfSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpgradeSelfSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpgradeSelfSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CUpgradeSelfSkill));
  PBGAWUpgradeSelfSkill_descriptor_ = file->message_type(48);
  static const int PBGAWUpgradeSelfSkill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWUpgradeSelfSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWUpgradeSelfSkill, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWUpgradeSelfSkill, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWUpgradeSelfSkill, contribution_),
  };
  PBGAWUpgradeSelfSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGAWUpgradeSelfSkill_descriptor_,
      PBGAWUpgradeSelfSkill::default_instance_,
      PBGAWUpgradeSelfSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWUpgradeSelfSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWUpgradeSelfSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGAWUpgradeSelfSkill));
  PBAddStudyRelation_descriptor_ = file->message_type(49);
  static const int PBAddStudyRelation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddStudyRelation, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddStudyRelation, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddStudyRelation, moneyvalue_),
  };
  PBAddStudyRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAddStudyRelation_descriptor_,
      PBAddStudyRelation::default_instance_,
      PBAddStudyRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddStudyRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddStudyRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAddStudyRelation));
  PBC2GAddStudyRelation_descriptor_ = file->message_type(50);
  static const int PBC2GAddStudyRelation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAddStudyRelation, faction_),
  };
  PBC2GAddStudyRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GAddStudyRelation_descriptor_,
      PBC2GAddStudyRelation::default_instance_,
      PBC2GAddStudyRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAddStudyRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAddStudyRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GAddStudyRelation));
  PBC2GDelStudyRelation_descriptor_ = file->message_type(51);
  static const int PBC2GDelStudyRelation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GDelStudyRelation, factionid_),
  };
  PBC2GDelStudyRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GDelStudyRelation_descriptor_,
      PBC2GDelStudyRelation::default_instance_,
      PBC2GDelStudyRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GDelStudyRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GDelStudyRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GDelStudyRelation));
  PBG2CDelStudyRelation_descriptor_ = file->message_type(52);
  static const int PBG2CDelStudyRelation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelStudyRelation, factionid_),
  };
  PBG2CDelStudyRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CDelStudyRelation_descriptor_,
      PBG2CDelStudyRelation::default_instance_,
      PBG2CDelStudyRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelStudyRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelStudyRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CDelStudyRelation));
  PBC2GFactionDevelopSkill_descriptor_ = file->message_type(53);
  static const int PBC2GFactionDevelopSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionDevelopSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionDevelopSkill, level_),
  };
  PBC2GFactionDevelopSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionDevelopSkill_descriptor_,
      PBC2GFactionDevelopSkill::default_instance_,
      PBC2GFactionDevelopSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionDevelopSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionDevelopSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionDevelopSkill));
  PBG2CFactionDevelopSkill_descriptor_ = file->message_type(54);
  static const int PBG2CFactionDevelopSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDevelopSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDevelopSkill, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDevelopSkill, lefttime_),
  };
  PBG2CFactionDevelopSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionDevelopSkill_descriptor_,
      PBG2CFactionDevelopSkill::default_instance_,
      PBG2CFactionDevelopSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDevelopSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDevelopSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionDevelopSkill));
  PBC2GFactionSuspendDevelopSkill_descriptor_ = file->message_type(55);
  static const int PBC2GFactionSuspendDevelopSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionSuspendDevelopSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionSuspendDevelopSkill, suspend_),
  };
  PBC2GFactionSuspendDevelopSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionSuspendDevelopSkill_descriptor_,
      PBC2GFactionSuspendDevelopSkill::default_instance_,
      PBC2GFactionSuspendDevelopSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionSuspendDevelopSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionSuspendDevelopSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionSuspendDevelopSkill));
  PBG2CFactionSuspendDevelopSkill_descriptor_ = file->message_type(56);
  static const int PBG2CFactionSuspendDevelopSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionSuspendDevelopSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionSuspendDevelopSkill, suspend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionSuspendDevelopSkill, lefttime_),
  };
  PBG2CFactionSuspendDevelopSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionSuspendDevelopSkill_descriptor_,
      PBG2CFactionSuspendDevelopSkill::default_instance_,
      PBG2CFactionSuspendDevelopSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionSuspendDevelopSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionSuspendDevelopSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionSuspendDevelopSkill));
  PBC2GFactionOpenStudy_descriptor_ = file->message_type(57);
  static const int PBC2GFactionOpenStudy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionOpenStudy, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionOpenStudy, moneyvalue_),
  };
  PBC2GFactionOpenStudy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionOpenStudy_descriptor_,
      PBC2GFactionOpenStudy::default_instance_,
      PBC2GFactionOpenStudy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionOpenStudy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionOpenStudy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionOpenStudy));
  PBG2CFactionOpenStudy_descriptor_ = file->message_type(58);
  static const int PBG2CFactionOpenStudy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOpenStudy, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOpenStudy, moneyvalue_),
  };
  PBG2CFactionOpenStudy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionOpenStudy_descriptor_,
      PBG2CFactionOpenStudy::default_instance_,
      PBG2CFactionOpenStudy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOpenStudy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionOpenStudy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionOpenStudy));
  PBW2GFactionMemberAttr_descriptor_ = file->message_type(59);
  static const int PBW2GFactionMemberAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionMemberAttr, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionMemberAttr, doing_),
  };
  PBW2GFactionMemberAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GFactionMemberAttr_descriptor_,
      PBW2GFactionMemberAttr::default_instance_,
      PBW2GFactionMemberAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionMemberAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionMemberAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GFactionMemberAttr));
  PBG2CFactionMemberAttr_descriptor_ = file->message_type(60);
  static const int PBG2CFactionMemberAttr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionMemberAttr, value_),
  };
  PBG2CFactionMemberAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionMemberAttr_descriptor_,
      PBG2CFactionMemberAttr::default_instance_,
      PBG2CFactionMemberAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionMemberAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionMemberAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionMemberAttr));
  PBC2GFactionDonateMoney_descriptor_ = file->message_type(61);
  static const int PBC2GFactionDonateMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionDonateMoney, id_),
  };
  PBC2GFactionDonateMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionDonateMoney_descriptor_,
      PBC2GFactionDonateMoney::default_instance_,
      PBC2GFactionDonateMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionDonateMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionDonateMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionDonateMoney));
  PBG2CFactionDrinkWine_descriptor_ = file->message_type(62);
  static const int PBG2CFactionDrinkWine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDrinkWine, id_),
  };
  PBG2CFactionDrinkWine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionDrinkWine_descriptor_,
      PBG2CFactionDrinkWine::default_instance_,
      PBG2CFactionDrinkWine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDrinkWine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDrinkWine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionDrinkWine));
  PBC2GFactionDrinkWine_descriptor_ = file->message_type(63);
  static const int PBC2GFactionDrinkWine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionDrinkWine, id_),
  };
  PBC2GFactionDrinkWine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionDrinkWine_descriptor_,
      PBC2GFactionDrinkWine::default_instance_,
      PBC2GFactionDrinkWine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionDrinkWine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionDrinkWine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionDrinkWine));
  PBPlayerDrinkWine_descriptor_ = file->message_type(64);
  static const int PBPlayerDrinkWine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDrinkWine, daywisdom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDrinkWine, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDrinkWine, curwisdom_),
  };
  PBPlayerDrinkWine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerDrinkWine_descriptor_,
      PBPlayerDrinkWine::default_instance_,
      PBPlayerDrinkWine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDrinkWine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerDrinkWine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerDrinkWine));
  PBG2CFactionDonateMoney_descriptor_ = file->message_type(65);
  static const int PBG2CFactionDonateMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDonateMoney, id_),
  };
  PBG2CFactionDonateMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionDonateMoney_descriptor_,
      PBG2CFactionDonateMoney::default_instance_,
      PBG2CFactionDonateMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDonateMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDonateMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionDonateMoney));
  PBGAWFactionDonateMoney_descriptor_ = file->message_type(66);
  static const int PBGAWFactionDonateMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWFactionDonateMoney, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWFactionDonateMoney, money_),
  };
  PBGAWFactionDonateMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGAWFactionDonateMoney_descriptor_,
      PBGAWFactionDonateMoney::default_instance_,
      PBGAWFactionDonateMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWFactionDonateMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWFactionDonateMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGAWFactionDonateMoney));
  PBG2CFactionDonateMoneyBroad_descriptor_ = file->message_type(67);
  static const int PBG2CFactionDonateMoneyBroad_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDonateMoneyBroad, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDonateMoneyBroad, id_),
  };
  PBG2CFactionDonateMoneyBroad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionDonateMoneyBroad_descriptor_,
      PBG2CFactionDonateMoneyBroad::default_instance_,
      PBG2CFactionDonateMoneyBroad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDonateMoneyBroad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionDonateMoneyBroad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionDonateMoneyBroad));
  PBC2GFactionCompleteTask_descriptor_ = file->message_type(68);
  static const int PBC2GFactionCompleteTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCompleteTask, taskid_),
  };
  PBC2GFactionCompleteTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionCompleteTask_descriptor_,
      PBC2GFactionCompleteTask::default_instance_,
      PBC2GFactionCompleteTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCompleteTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionCompleteTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionCompleteTask));
  PBG2CFactionCompleteTask_descriptor_ = file->message_type(69);
  static const int PBG2CFactionCompleteTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionCompleteTask, completetaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionCompleteTask, newtask_),
  };
  PBG2CFactionCompleteTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFactionCompleteTask_descriptor_,
      PBG2CFactionCompleteTask::default_instance_,
      PBG2CFactionCompleteTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionCompleteTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFactionCompleteTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFactionCompleteTask));
  PBGAWFactionCompleteTask_descriptor_ = file->message_type(70);
  static const int PBGAWFactionCompleteTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWFactionCompleteTask, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWFactionCompleteTask, tackindex_),
  };
  PBGAWFactionCompleteTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGAWFactionCompleteTask_descriptor_,
      PBGAWFactionCompleteTask::default_instance_,
      PBGAWFactionCompleteTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWFactionCompleteTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGAWFactionCompleteTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGAWFactionCompleteTask));
  PBC2GFactionAllotMoneyAsk_descriptor_ = file->message_type(71);
  static const int PBC2GFactionAllotMoneyAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionAllotMoneyAsk, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionAllotMoneyAsk, memberid_),
  };
  PBC2GFactionAllotMoneyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionAllotMoneyAsk_descriptor_,
      PBC2GFactionAllotMoneyAsk::default_instance_,
      PBC2GFactionAllotMoneyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionAllotMoneyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionAllotMoneyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionAllotMoneyAsk));
  PBC2GFactionAllotItemAsk_descriptor_ = file->message_type(72);
  static const int PBC2GFactionAllotItemAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionAllotItemAsk, itemsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionAllotItemAsk, itemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionAllotItemAsk, memberid_),
  };
  PBC2GFactionAllotItemAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionAllotItemAsk_descriptor_,
      PBC2GFactionAllotItemAsk::default_instance_,
      PBC2GFactionAllotItemAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionAllotItemAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionAllotItemAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionAllotItemAsk));
  PBFactionChallenger_descriptor_ = file->message_type(73);
  static const int PBFactionChallenger_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionChallenger, factionbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionChallenger, applytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionChallenger, ischallenger_),
  };
  PBFactionChallenger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionChallenger_descriptor_,
      PBFactionChallenger::default_instance_,
      PBFactionChallenger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionChallenger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionChallenger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionChallenger));
  PBManorCpymapInfo_descriptor_ = file->message_type(74);
  static const int PBManorCpymapInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorCpymapInfo, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorCpymapInfo, dynid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorCpymapInfo, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorCpymapInfo, regionid_),
  };
  PBManorCpymapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBManorCpymapInfo_descriptor_,
      PBManorCpymapInfo::default_instance_,
      PBManorCpymapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorCpymapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorCpymapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBManorCpymapInfo));
  PBManorInfo_descriptor_ = file->message_type(75);
  static const int PBManorInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfo, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfo, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfo, challengers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfo, battlefields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfo, defenderlobby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfo, challengerlobby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfo, eliteplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfo, cancleapplycd_),
  };
  PBManorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBManorInfo_descriptor_,
      PBManorInfo::default_instance_,
      PBManorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBManorInfo));
  PBAllManor_descriptor_ = file->message_type(76);
  static const int PBAllManor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllManor, manors_),
  };
  PBAllManor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAllManor_descriptor_,
      PBAllManor::default_instance_,
      PBAllManor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllManor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllManor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAllManor));
  PBManorBattlefieldPlayerScore_descriptor_ = file->message_type(77);
  static const int PBManorBattlefieldPlayerScore_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattlefieldPlayerScore, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattlefieldPlayerScore, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattlefieldPlayerScore, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattlefieldPlayerScore, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattlefieldPlayerScore, dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattlefieldPlayerScore, ischallenger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattlefieldPlayerScore, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattlefieldPlayerScore, takehurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattlefieldPlayerScore, assistkill_),
  };
  PBManorBattlefieldPlayerScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBManorBattlefieldPlayerScore_descriptor_,
      PBManorBattlefieldPlayerScore::default_instance_,
      PBManorBattlefieldPlayerScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattlefieldPlayerScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattlefieldPlayerScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBManorBattlefieldPlayerScore));
  PBManorBattleFieldReport_descriptor_ = file->message_type(78);
  static const int PBManorBattleFieldReport_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldReport, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldReport, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldReport, playerscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldReport, score_),
  };
  PBManorBattleFieldReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBManorBattleFieldReport_descriptor_,
      PBManorBattleFieldReport::default_instance_,
      PBManorBattleFieldReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBManorBattleFieldReport));
  PBW2GFactionSyn_descriptor_ = file->message_type(79);
  static const int PBW2GFactionSyn_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionSyn, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionSyn, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionSyn, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionSyn, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionSyn, union__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionSyn, corps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionSyn, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionSyn, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionSyn, unionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionSyn, banner_),
  };
  PBW2GFactionSyn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2GFactionSyn_descriptor_,
      PBW2GFactionSyn::default_instance_,
      PBW2GFactionSyn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionSyn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2GFactionSyn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2GFactionSyn));
  PBGL2WFactionSynPlayer_descriptor_ = file->message_type(80);
  static const int PBGL2WFactionSynPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2WFactionSynPlayer, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2WFactionSynPlayer, factionid_),
  };
  PBGL2WFactionSynPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGL2WFactionSynPlayer_descriptor_,
      PBGL2WFactionSynPlayer::default_instance_,
      PBGL2WFactionSynPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2WFactionSynPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGL2WFactionSynPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGL2WFactionSynPlayer));
  PBCorpsOfflineChangeJob_descriptor_ = file->message_type(81);
  static const int PBCorpsOfflineChangeJob_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsOfflineChangeJob, deljob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsOfflineChangeJob, addjob_),
  };
  PBCorpsOfflineChangeJob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCorpsOfflineChangeJob_descriptor_,
      PBCorpsOfflineChangeJob::default_instance_,
      PBCorpsOfflineChangeJob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsOfflineChangeJob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCorpsOfflineChangeJob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCorpsOfflineChangeJob));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Faction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionBase_descriptor_, &PBFactionBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionDBMember_descriptor_, &PBFactionDBMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionMemberBase_descriptor_, &PBFactionMemberBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionApplyData_descriptor_, &PBFactionApplyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionSkill_descriptor_, &PBFactionSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionStudy_descriptor_, &PBFactionStudy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionStudyConfig_descriptor_, &PBFactionStudyConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionJobPrivilege_descriptor_, &PBFactionJobPrivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionImpeach_descriptor_, &PBFactionImpeach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionDBData_descriptor_, &PBFactionDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionDepot_descriptor_, &PBFactionDepot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionMember_descriptor_, &PBFactionMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionDisplay_descriptor_, &PBFactionDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerFactionSkill_descriptor_, &PBPlayerFactionSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerFactionDonateMoney_descriptor_, &PBPlayerFactionDonateMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerFactionTaskItem_descriptor_, &PBPlayerFactionTaskItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerFactionTask_descriptor_, &PBPlayerFactionTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerFaction_descriptor_, &PBPlayerFaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionOfflineRemove_descriptor_, &PBFactionOfflineRemove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionEvent_descriptor_, &PBFactionEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionEventAll_descriptor_, &PBFactionEventAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionCreate_descriptor_, &PBC2GFactionCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionApply_descriptor_, &PBC2GFactionApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionList_descriptor_, &PBG2CFactionList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionEdit_descriptor_, &PBC2GFactionEdit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionApplyList_descriptor_, &PBG2CFactionApplyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionMemberList_descriptor_, &PBG2CFactionMemberList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionRequire_descriptor_, &PBC2GFactionRequire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionSyn_descriptor_, &PBG2CFactionSyn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionApplying_descriptor_, &PBG2CFactionApplying::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CImpeachAck_descriptor_, &PBG2CImpeachAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionOpt_descriptor_, &PBC2GFactionOpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionOptFeedback_descriptor_, &PBG2CFactionOptFeedback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionOptResult_descriptor_, &PBG2CFactionOptResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCAGSetElite_descriptor_, &PBCAGSetElite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCAGSetBeauty_descriptor_, &PBCAGSetBeauty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCAGSetPrivilege_descriptor_, &PBCAGSetPrivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionBeInviteJoin_descriptor_, &PBG2CFactionBeInviteJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionInviteJoinResult_descriptor_, &PBG2CFactionInviteJoinResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionSelfSkillInfo_descriptor_, &FactionSelfSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionSelfSkillList_descriptor_, &PBG2CFactionSelfSkillList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionStudyFactionInfo_descriptor_, &FactionStudyFactionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionStudyFactionList_descriptor_, &PBG2CFactionStudyFactionList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GWatchOhterSkill_descriptor_, &PBC2GWatchOhterSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionOhterSkillInfo_descriptor_, &FactionOhterSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionOhterSkillList_descriptor_, &PBG2CFactionOhterSkillList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GUpgradeSelfSkill_descriptor_, &PBC2GUpgradeSelfSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CUpgradeSelfSkill_descriptor_, &PBG2CUpgradeSelfSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGAWUpgradeSelfSkill_descriptor_, &PBGAWUpgradeSelfSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAddStudyRelation_descriptor_, &PBAddStudyRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GAddStudyRelation_descriptor_, &PBC2GAddStudyRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GDelStudyRelation_descriptor_, &PBC2GDelStudyRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CDelStudyRelation_descriptor_, &PBG2CDelStudyRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionDevelopSkill_descriptor_, &PBC2GFactionDevelopSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionDevelopSkill_descriptor_, &PBG2CFactionDevelopSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionSuspendDevelopSkill_descriptor_, &PBC2GFactionSuspendDevelopSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionSuspendDevelopSkill_descriptor_, &PBG2CFactionSuspendDevelopSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionOpenStudy_descriptor_, &PBC2GFactionOpenStudy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionOpenStudy_descriptor_, &PBG2CFactionOpenStudy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GFactionMemberAttr_descriptor_, &PBW2GFactionMemberAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionMemberAttr_descriptor_, &PBG2CFactionMemberAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionDonateMoney_descriptor_, &PBC2GFactionDonateMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionDrinkWine_descriptor_, &PBG2CFactionDrinkWine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionDrinkWine_descriptor_, &PBC2GFactionDrinkWine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerDrinkWine_descriptor_, &PBPlayerDrinkWine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionDonateMoney_descriptor_, &PBG2CFactionDonateMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGAWFactionDonateMoney_descriptor_, &PBGAWFactionDonateMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionDonateMoneyBroad_descriptor_, &PBG2CFactionDonateMoneyBroad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionCompleteTask_descriptor_, &PBC2GFactionCompleteTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFactionCompleteTask_descriptor_, &PBG2CFactionCompleteTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGAWFactionCompleteTask_descriptor_, &PBGAWFactionCompleteTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionAllotMoneyAsk_descriptor_, &PBC2GFactionAllotMoneyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionAllotItemAsk_descriptor_, &PBC2GFactionAllotItemAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionChallenger_descriptor_, &PBFactionChallenger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBManorCpymapInfo_descriptor_, &PBManorCpymapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBManorInfo_descriptor_, &PBManorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAllManor_descriptor_, &PBAllManor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBManorBattlefieldPlayerScore_descriptor_, &PBManorBattlefieldPlayerScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBManorBattleFieldReport_descriptor_, &PBManorBattleFieldReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2GFactionSyn_descriptor_, &PBW2GFactionSyn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGL2WFactionSynPlayer_descriptor_, &PBGL2WFactionSynPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCorpsOfflineChangeJob_descriptor_, &PBCorpsOfflineChangeJob::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Faction_2eproto() {
  delete PBFactionBase::default_instance_;
  delete PBFactionBase_reflection_;
  delete PBFactionDBMember::default_instance_;
  delete PBFactionDBMember_reflection_;
  delete PBFactionMemberBase::default_instance_;
  delete PBFactionMemberBase_reflection_;
  delete PBFactionApplyData::default_instance_;
  delete PBFactionApplyData_reflection_;
  delete PBFactionSkill::default_instance_;
  delete PBFactionSkill_reflection_;
  delete PBFactionStudy::default_instance_;
  delete PBFactionStudy_reflection_;
  delete PBFactionStudyConfig::default_instance_;
  delete PBFactionStudyConfig_reflection_;
  delete PBFactionJobPrivilege::default_instance_;
  delete PBFactionJobPrivilege_reflection_;
  delete PBFactionImpeach::default_instance_;
  delete PBFactionImpeach_reflection_;
  delete PBFactionDBData::default_instance_;
  delete PBFactionDBData_reflection_;
  delete PBFactionDepot::default_instance_;
  delete PBFactionDepot_reflection_;
  delete PBFactionMember::default_instance_;
  delete PBFactionMember_reflection_;
  delete PBFactionDisplay::default_instance_;
  delete PBFactionDisplay_reflection_;
  delete PBPlayerFactionSkill::default_instance_;
  delete PBPlayerFactionSkill_reflection_;
  delete PBPlayerFactionDonateMoney::default_instance_;
  delete PBPlayerFactionDonateMoney_reflection_;
  delete PBPlayerFactionTaskItem::default_instance_;
  delete PBPlayerFactionTaskItem_reflection_;
  delete PBPlayerFactionTask::default_instance_;
  delete PBPlayerFactionTask_reflection_;
  delete PBPlayerFaction::default_instance_;
  delete PBPlayerFaction_reflection_;
  delete PBFactionOfflineRemove::default_instance_;
  delete PBFactionOfflineRemove_reflection_;
  delete PBFactionEvent::default_instance_;
  delete PBFactionEvent_reflection_;
  delete PBFactionEventAll::default_instance_;
  delete PBFactionEventAll_reflection_;
  delete PBC2GFactionCreate::default_instance_;
  delete PBC2GFactionCreate_reflection_;
  delete PBC2GFactionApply::default_instance_;
  delete PBC2GFactionApply_reflection_;
  delete PBG2CFactionList::default_instance_;
  delete PBG2CFactionList_reflection_;
  delete PBC2GFactionEdit::default_instance_;
  delete PBC2GFactionEdit_reflection_;
  delete PBG2CFactionApplyList::default_instance_;
  delete PBG2CFactionApplyList_reflection_;
  delete PBG2CFactionMemberList::default_instance_;
  delete PBG2CFactionMemberList_reflection_;
  delete PBC2GFactionRequire::default_instance_;
  delete PBC2GFactionRequire_reflection_;
  delete PBG2CFactionSyn::default_instance_;
  delete PBG2CFactionSyn_reflection_;
  delete PBG2CFactionApplying::default_instance_;
  delete PBG2CFactionApplying_reflection_;
  delete PBG2CImpeachAck::default_instance_;
  delete PBG2CImpeachAck_reflection_;
  delete PBC2GFactionOpt::default_instance_;
  delete PBC2GFactionOpt_reflection_;
  delete PBG2CFactionOptFeedback::default_instance_;
  delete PBG2CFactionOptFeedback_reflection_;
  delete PBG2CFactionOptResult::default_instance_;
  delete PBG2CFactionOptResult_reflection_;
  delete PBCAGSetElite::default_instance_;
  delete PBCAGSetElite_reflection_;
  delete PBCAGSetBeauty::default_instance_;
  delete PBCAGSetBeauty_reflection_;
  delete PBCAGSetPrivilege::default_instance_;
  delete PBCAGSetPrivilege_reflection_;
  delete PBG2CFactionBeInviteJoin::default_instance_;
  delete PBG2CFactionBeInviteJoin_reflection_;
  delete PBG2CFactionInviteJoinResult::default_instance_;
  delete PBG2CFactionInviteJoinResult_reflection_;
  delete FactionSelfSkillInfo::default_instance_;
  delete FactionSelfSkillInfo_reflection_;
  delete PBG2CFactionSelfSkillList::default_instance_;
  delete PBG2CFactionSelfSkillList_reflection_;
  delete FactionStudyFactionInfo::default_instance_;
  delete FactionStudyFactionInfo_reflection_;
  delete PBG2CFactionStudyFactionList::default_instance_;
  delete PBG2CFactionStudyFactionList_reflection_;
  delete PBC2GWatchOhterSkill::default_instance_;
  delete PBC2GWatchOhterSkill_reflection_;
  delete FactionOhterSkillInfo::default_instance_;
  delete FactionOhterSkillInfo_reflection_;
  delete PBG2CFactionOhterSkillList::default_instance_;
  delete PBG2CFactionOhterSkillList_reflection_;
  delete PBC2GUpgradeSelfSkill::default_instance_;
  delete PBC2GUpgradeSelfSkill_reflection_;
  delete PBG2CUpgradeSelfSkill::default_instance_;
  delete PBG2CUpgradeSelfSkill_reflection_;
  delete PBGAWUpgradeSelfSkill::default_instance_;
  delete PBGAWUpgradeSelfSkill_reflection_;
  delete PBAddStudyRelation::default_instance_;
  delete PBAddStudyRelation_reflection_;
  delete PBC2GAddStudyRelation::default_instance_;
  delete PBC2GAddStudyRelation_reflection_;
  delete PBC2GDelStudyRelation::default_instance_;
  delete PBC2GDelStudyRelation_reflection_;
  delete PBG2CDelStudyRelation::default_instance_;
  delete PBG2CDelStudyRelation_reflection_;
  delete PBC2GFactionDevelopSkill::default_instance_;
  delete PBC2GFactionDevelopSkill_reflection_;
  delete PBG2CFactionDevelopSkill::default_instance_;
  delete PBG2CFactionDevelopSkill_reflection_;
  delete PBC2GFactionSuspendDevelopSkill::default_instance_;
  delete PBC2GFactionSuspendDevelopSkill_reflection_;
  delete PBG2CFactionSuspendDevelopSkill::default_instance_;
  delete PBG2CFactionSuspendDevelopSkill_reflection_;
  delete PBC2GFactionOpenStudy::default_instance_;
  delete PBC2GFactionOpenStudy_reflection_;
  delete PBG2CFactionOpenStudy::default_instance_;
  delete PBG2CFactionOpenStudy_reflection_;
  delete PBW2GFactionMemberAttr::default_instance_;
  delete PBW2GFactionMemberAttr_reflection_;
  delete PBG2CFactionMemberAttr::default_instance_;
  delete PBG2CFactionMemberAttr_reflection_;
  delete PBC2GFactionDonateMoney::default_instance_;
  delete PBC2GFactionDonateMoney_reflection_;
  delete PBG2CFactionDrinkWine::default_instance_;
  delete PBG2CFactionDrinkWine_reflection_;
  delete PBC2GFactionDrinkWine::default_instance_;
  delete PBC2GFactionDrinkWine_reflection_;
  delete PBPlayerDrinkWine::default_instance_;
  delete PBPlayerDrinkWine_reflection_;
  delete PBG2CFactionDonateMoney::default_instance_;
  delete PBG2CFactionDonateMoney_reflection_;
  delete PBGAWFactionDonateMoney::default_instance_;
  delete PBGAWFactionDonateMoney_reflection_;
  delete PBG2CFactionDonateMoneyBroad::default_instance_;
  delete PBG2CFactionDonateMoneyBroad_reflection_;
  delete PBC2GFactionCompleteTask::default_instance_;
  delete PBC2GFactionCompleteTask_reflection_;
  delete PBG2CFactionCompleteTask::default_instance_;
  delete PBG2CFactionCompleteTask_reflection_;
  delete PBGAWFactionCompleteTask::default_instance_;
  delete PBGAWFactionCompleteTask_reflection_;
  delete PBC2GFactionAllotMoneyAsk::default_instance_;
  delete PBC2GFactionAllotMoneyAsk_reflection_;
  delete PBC2GFactionAllotItemAsk::default_instance_;
  delete PBC2GFactionAllotItemAsk_reflection_;
  delete PBFactionChallenger::default_instance_;
  delete PBFactionChallenger_reflection_;
  delete PBManorCpymapInfo::default_instance_;
  delete PBManorCpymapInfo_reflection_;
  delete PBManorInfo::default_instance_;
  delete PBManorInfo_reflection_;
  delete PBAllManor::default_instance_;
  delete PBAllManor_reflection_;
  delete PBManorBattlefieldPlayerScore::default_instance_;
  delete PBManorBattlefieldPlayerScore_reflection_;
  delete PBManorBattleFieldReport::default_instance_;
  delete PBManorBattleFieldReport_reflection_;
  delete PBW2GFactionSyn::default_instance_;
  delete PBW2GFactionSyn_reflection_;
  delete PBGL2WFactionSynPlayer::default_instance_;
  delete PBGL2WFactionSynPlayer_reflection_;
  delete PBCorpsOfflineChangeJob::default_instance_;
  delete PBCorpsOfflineChangeJob_reflection_;
}

void protobuf_AddDesc_Faction_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_CASProtocol_2eproto();
  ::protobuf_AddDesc_GameStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rFaction.proto\032\021CASProtocol.proto\032\020Game"
    "Struct.proto\"\216\001\n\rPBFactionBase\022\014\n\004name\030\001"
    " \001(\t\022\021\n\tfactionid\030\002 \001(\r\022\016\n\006leader\030\003 \001(\r\022"
    "\017\n\007worldid\030\004 \001(\r\022\r\n\005level\030\005 \001(\r\022\r\n\005union"
    "\030\006 \001(\r\022\016\n\006banner\030\007 \001(\t\022\r\n\005corps\030\010 \001(\r\"\275\001"
    "\n\021PBFactionDBMember\022\020\n\010playerid\030\001 \001(\r\022\024\n"
    "\014contribution\030\002 \001(\r\022\022\n\nexperience\030\003 \001(\r\022"
    "\020\n\010jointime\030\004 \001(\r\022\013\n\003job\030\005 \001(\r\022\r\n\005title\030"
    "\006 \003(\r\022\027\n\017lastofflinetime\030\007 \001(\r\022\022\n\nfobitc"
    "ount\030\010 \001(\r\022\021\n\tfobittime\030\t \001(\r\"x\n\023PBFacti"
    "onMemberBase\022\020\n\010playerid\030\001 \001(\r\022\022\n\nplayer"
    "name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\013\n\003job\030\004 \001(\r\022\020"
    "\n\010identity\030\005 \001(\r\022\r\n\005force\030\006 \001(\r\"G\n\022PBFac"
    "tionApplyData\022\"\n\004base\030\001 \001(\0132\024.PBFactionM"
    "emberBase\022\r\n\005stamp\030\002 \001(\r\"q\n\016PBFactionSki"
    "ll\022\017\n\007skillid\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\r\n\005st"
    "ate\030\003 \001(\r\022\027\n\017developlefttime\030\004 \001(\r\022\027\n\017de"
    "veloplasttime\030\005 \001(\r\"6\n\016PBFactionStudy\022\021\n"
    "\tfactionid\030\001 \001(\r\022\021\n\tbegintime\030\002 \001(\r\"h\n\024P"
    "BFactionStudyConfig\022\021\n\topenstudy\030\001 \001(\010\022\026"
    "\n\016studymoneytype\030\002 \001(\r\022\027\n\017studymoneyvalu"
    "e\030\003 \001(\r\022\014\n\004time\030\004 \001(\r\"9\n\025PBFactionJobPri"
    "vilege\022\013\n\003job\030\001 \001(\r\022\023\n\013privilegeid\030\002 \001(\004"
    "\"{\n\020PBFactionImpeach\022\021\n\timpeachid\030\001 \001(\r\022"
    "\023\n\013impeachtime\030\002 \001(\r\022\024\n\014maxmembernum\030\003 \001"
    "(\r\022\023\n\013agreemember\030\004 \003(\r\022\024\n\014refusemember\030"
    "\005 \003(\r\"\347\004\n\017PBFactionDBData\022\034\n\004base\030\001 \001(\0132"
    "\016.PBFactionBase\022\023\n\013declaration\030\002 \001(\t\022\022\n\n"
    "createtime\030\003 \001(\r\022\r\n\005stone\030\004 \001(\004\022\016\n\006slive"
    "r\030\005 \001(\004\022\016\n\006energy\030\006 \001(\004\022\r\n\005score\030\007 \001(\004\022\014"
    "\n\004boom\030\010 \001(\004\022\022\n\nexperience\030\t \001(\004\022\r\n\005orde"
    "r\030\n \001(\r\022#\n\007members\030\013 \003(\0132\022.PBFactionDBMe"
    "mber\022#\n\006applys\030\014 \003(\0132\023.PBFactionApplyDat"
    "a\022\024\n\014requirelevel\030\r \001(\r\022\033\n\007refuses\030\016 \003(\013"
    "2\n.PBIDStamp\022\036\n\005skill\030\017 \003(\0132\017.PBFactionS"
    "kill\022\036\n\005study\030\020 \003(\0132\017.PBFactionStudy\022-\n\016"
    "curstudyconfig\030\021 \001(\0132\025.PBFactionStudyCon"
    "fig\022/\n\020frontstudyconfig\030\022 \001(\0132\025.PBFactio"
    "nStudyConfig\022)\n\tprivilege\030\023 \003(\0132\026.PBFact"
    "ionJobPrivilege\022\"\n\007impeach\030\024 \001(\0132\021.PBFac"
    "tionImpeach\022\037\n\007toplist\030\025 \001(\0132\016.PBTopList"
    "Data\022\021\n\tautoapply\030\026 \001(\010\"K\n\016PBFactionDepo"
    "t\022\023\n\013uniqueindex\030\001 \001(\004\022\025\n\004item\030\002 \003(\0132\007.P"
    "BItem\022\r\n\005money\030\003 \001(\004\"\335\001\n\017PBFactionMember"
    "\022\"\n\004base\030\001 \001(\0132\024.PBFactionMemberBase\022\024\n\014"
    "contribution\030\002 \001(\r\022\022\n\nexperience\030\003 \001(\r\022\020"
    "\n\010jointime\030\004 \001(\r\022\016\n\006online\030\005 \001(\010\022\013\n\003job\030"
    "\006 \001(\r\022\r\n\005title\030\007 \003(\r\022\027\n\017lastofflinetime\030"
    "\010 \001(\r\022\022\n\nfobitcount\030\t \001(\r\022\021\n\tfobittime\030\n"
    " \001(\r\"\215\001\n\020PBFactionDisplay\022\034\n\004base\030\001 \001(\0132"
    "\016.PBFactionBase\022\022\n\nleadername\030\002 \001(\t\022\016\n\006p"
    "eople\030\003 \001(\r\022\021\n\tpeoplemax\030\004 \001(\r\022\026\n\016islead"
    "eronline\030\005 \001(\010\022\014\n\004boom\030\006 \001(\004\"6\n\024PBPlayer"
    "FactionSkill\022\017\n\007skillid\030\001 \001(\r\022\r\n\005level\030\002"
    " \001(\r\"7\n\032PBPlayerFactionDonateMoney\022\n\n\002id"
    "\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"8\n\027PBPlayerFaction"
    "TaskItem\022\016\n\006itemid\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\""
    "d\n\023PBPlayerFactionTask\022\021\n\ttaskcount\030\001 \001("
    "\r\022\016\n\006taskid\030\002 \001(\r\022*\n\010taskitem\030\003 \003(\0132\030.PB"
    "PlayerFactionTaskItem\"\336\001\n\017PBPlayerFactio"
    "n\022\021\n\tsaveorder\030\001 \001(\r\022\025\n\rlastleavetime\030\002 "
    "\001(\r\022$\n\005skill\030\003 \003(\0132\025.PBPlayerFactionSkil"
    "l\0220\n\013donatemoney\030\004 \003(\0132\033.PBPlayerFaction"
    "DonateMoney\022\"\n\004task\030\005 \001(\0132\024.PBPlayerFact"
    "ionTask\022%\n\tdrinkwine\030\007 \001(\0132\022.PBPlayerDri"
    "nkWine\"/\n\026PBFactionOfflineRemove\022\025\n\rlast"
    "leavetime\030\001 \001(\r\"\266\001\n\016PBFactionEvent\022\014\n\004ti"
    "me\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\r\n\005level\030\003 \001(\004\022 \n"
    "\006member\030\004 \003(\0132\020.PBFactionMember\022\r\n\005stone"
    "\030\005 \001(\004\022\016\n\006sliver\030\006 \001(\004\022\022\n\nexperience\030\007 \001"
    "(\004\022\025\n\004item\030\010 \003(\0132\007.PBItem\022\r\n\005money\030\t \001(\004"
    "\"y\n\021PBFactionEventAll\022\037\n\006member\030\001 \003(\0132\017."
    "PBFactionEvent\022#\n\nexperience\030\002 \003(\0132\017.PBF"
    "actionEvent\022\036\n\005depot\030\003 \003(\0132\017.PBFactionEv"
    "ent\"\301\001\n\022PBC2GFactionCreate\022\014\n\004name\030\001 \001(\t"
    "\022\021\n\tfactionid\030\002 \001(\r\022\017\n\007worldid\030\003 \001(\r\022\016\n\006"
    "banner\030\004 \001(\t\022\023\n\013declaration\030\005 \001(\t\022\020\n\010pla"
    "yerid\030\006 \001(\r\022\r\n\005corps\030\007 \001(\r\022\021\n\tcreattime\030"
    "\010 \001(\r\022 \n\007consume\030\t \001(\0132\017.PBMoneyConsume\""
    "l\n\021PBC2GFactionApply\022\021\n\tfactionid\030\001 \001(\r\022"
    "\017\n\007worldid\030\002 \001(\r\022\017\n\007isapply\030\003 \001(\010\022\"\n\004bas"
    "e\030\004 \001(\0132\024.PBFactionMemberBase\"3\n\020PBG2CFa"
    "ctionList\022\037\n\004list\030\001 \003(\0132\021.PBFactionDispl"
    "ay\"\'\n\020PBC2GFactionEdit\022\023\n\013declaration\030\001 "
    "\001(\t\"O\n\025PBG2CFactionApplyList\022#\n\006applys\030\001"
    " \003(\0132\023.PBFactionApplyData\022\021\n\tautoapply\030\002"
    " \001(\010\";\n\026PBG2CFactionMemberList\022!\n\007member"
    "s\030\001 \003(\0132\020.PBFactionMember\"$\n\023PBC2GFactio"
    "nRequire\022\r\n\005level\030\001 \001(\r\"R\n\017PBG2CFactionS"
    "yn\022\036\n\004data\030\001 \001(\0132\020.PBFactionDBData\022\022\n\nle"
    "adername\030\002 \001(\t\022\013\n\003job\030\003 \001(\r\"&\n\024PBG2CFact"
    "ionApplying\022\016\n\006applys\030\001 \003(\r\"5\n\017PBG2CImpe"
    "achAck\022\"\n\007impeach\030\001 \001(\0132\021.PBFactionImpea"
    "ch\"F\n\017PBC2GFactionOpt\022\021\n\tfactionid\030\001 \001(\r"
    "\022\017\n\007uparam1\030\002 \001(\r\022\017\n\007uparam2\030\003 \001(\r\"l\n\027PB"
    "G2CFactionOptFeedback\022\021\n\tfactionid\030\001 \001(\r"
    "\022\013\n\003opt\030\002 \001(\r\022\017\n\007uparam1\030\003 \001(\r\022\017\n\007uparam"
    "2\030\004 \001(\r\022\017\n\007sparam1\030\005 \001(\t\"j\n\025PBG2CFaction"
    "OptResult\022\021\n\tfactionid\030\001 \001(\r\022\013\n\003opt\030\002 \001("
    "\r\022\017\n\007uparam1\030\003 \001(\r\022\017\n\007uparam2\030\004 \001(\r\022\017\n\007s"
    "param1\030\005 \001(\t\"!\n\rPBCAGSetElite\022\020\n\010memberi"
    "d\030\001 \003(\r\"\"\n\016PBCAGSetBeauty\022\020\n\010memberid\030\001 "
    "\003(\r\"7\n\021PBCAGSetPrivilege\022\r\n\005jobid\030\001 \001(\r\022"
    "\023\n\013privilegeid\030\002 \001(\004\"f\n\030PBG2CFactionBeIn"
    "viteJoin\022\"\n\007display\030\001 \001(\0132\021.PBFactionDis"
    "play\022\021\n\tinviterid\030\002 \001(\r\022\023\n\013invitername\030\003"
    " \001(\t\"U\n\034PBG2CFactionInviteJoinResult\022\020\n\010"
    "playerid\030\001 \001(\r\022\022\n\nplayername\030\002 \001(\t\022\017\n\007is"
    "agree\030\003 \001(\010\"N\n\024FactionSelfSkillInfo\022\017\n\007s"
    "killid\030\001 \001(\r\022\021\n\tselflevel\030\002 \001(\r\022\022\n\nstudy"
    "level\030\003 \001(\r\"@\n\031PBG2CFactionSelfSkillList"
    "\022#\n\004list\030\001 \003(\0132\025.FactionSelfSkillInfo\"s\n"
    "\027FactionStudyFactionInfo\022\037\n\004info\030\001 \001(\0132\021"
    ".PBFactionDisplay\022\020\n\010levelsum\030\002 \001(\r\022\021\n\tm"
    "oneytype\030\003 \001(\r\022\022\n\nmoneyvalue\030\004 \001(\r\"F\n\034PB"
    "G2CFactionStudyFactionList\022&\n\004list\030\001 \003(\013"
    "2\030.FactionStudyFactionInfo\")\n\024PBC2GWatch"
    "OhterSkill\022\021\n\tfactionid\030\001 \001(\r\";\n\025Faction"
    "OhterSkillInfo\022\017\n\007skillid\030\001 \001(\r\022\021\n\tselfl"
    "evel\030\002 \001(\r\"U\n\032PBG2CFactionOhterSkillList"
    "\022\021\n\tfactionid\030\001 \001(\r\022$\n\004list\030\002 \003(\0132\026.Fact"
    "ionOhterSkillInfo\"7\n\025PBC2GUpgradeSelfSki"
    "ll\022\017\n\007skillid\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\"7\n\025PB"
    "G2CUpgradeSelfSkill\022\017\n\007skillid\030\001 \001(\r\022\r\n\005"
    "level\030\002 \001(\r\"m\n\025PBGAWUpgradeSelfSkill\022\017\n\007"
    "skillid\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\036\n\005money\030\003 "
    "\001(\0132\017.PBMoneyConsume\022\024\n\014contribution\030\004 \001"
    "(\r\"N\n\022PBAddStudyRelation\022\021\n\tfactionid\030\001 "
    "\001(\r\022\021\n\tmoneytype\030\002 \001(\r\022\022\n\nmoneyvalue\030\003 \001"
    "(\r\"=\n\025PBC2GAddStudyRelation\022$\n\007faction\030\001"
    " \003(\0132\023.PBAddStudyRelation\"*\n\025PBC2GDelStu"
    "dyRelation\022\021\n\tfactionid\030\001 \001(\r\"*\n\025PBG2CDe"
    "lStudyRelation\022\021\n\tfactionid\030\001 \001(\r\":\n\030PBC"
    "2GFactionDevelopSkill\022\017\n\007skillid\030\001 \001(\r\022\r"
    "\n\005level\030\002 \001(\r\"L\n\030PBG2CFactionDevelopSkil"
    "l\022\017\n\007skillid\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\020\n\010lef"
    "ttime\030\003 \001(\r\"C\n\037PBC2GFactionSuspendDevelo"
    "pSkill\022\017\n\007skillid\030\001 \001(\r\022\017\n\007suspend\030\002 \001(\010"
    "\"U\n\037PBG2CFactionSuspendDevelopSkill\022\017\n\007s"
    "killid\030\001 \001(\r\022\017\n\007suspend\030\002 \001(\010\022\020\n\010lefttim"
    "e\030\003 \001(\r\">\n\025PBC2GFactionOpenStudy\022\021\n\tmone"
    "ytype\030\001 \001(\r\022\022\n\nmoneyvalue\030\002 \001(\r\">\n\025PBG2C"
    "FactionOpenStudy\022\021\n\tmoneytype\030\001 \001(\r\022\022\n\nm"
    "oneyvalue\030\002 \001(\r\"6\n\026PBW2GFactionMemberAtt"
    "r\022\r\n\005value\030\001 \001(\005\022\r\n\005doing\030\002 \001(\005\"\'\n\026PBG2C"
    "FactionMemberAttr\022\r\n\005value\030\001 \001(\004\"%\n\027PBC2"
    "GFactionDonateMoney\022\n\n\002id\030\001 \001(\r\"#\n\025PBG2C"
    "FactionDrinkWine\022\n\n\002id\030\001 \001(\r\"#\n\025PBC2GFac"
    "tionDrinkWine\022\n\n\002id\030\001 \001(\r\"E\n\021PBPlayerDri"
    "nkWine\022\021\n\tdaywisdom\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\021\n"
    "\tcurwisdom\030\003 \001(\r\"%\n\027PBG2CFactionDonateMo"
    "ney\022\n\n\002id\030\001 \001(\r\"E\n\027PBGAWFactionDonateMon"
    "ey\022\n\n\002id\030\001 \001(\r\022\036\n\005money\030\003 \001(\0132\017.PBMoneyC"
    "onsume\"L\n\034PBG2CFactionDonateMoneyBroad\022 "
    "\n\006member\030\001 \001(\0132\020.PBFactionMember\022\n\n\002id\030\002"
    " \001(\r\"*\n\030PBC2GFactionCompleteTask\022\016\n\006task"
    "id\030\001 \001(\r\"Y\n\030PBG2CFactionCompleteTask\022\026\n\016"
    "completetaskid\030\001 \001(\r\022%\n\007newtask\030\002 \001(\0132\024."
    "PBPlayerFactionTask\"=\n\030PBGAWFactionCompl"
    "eteTask\022\016\n\006taskid\030\001 \001(\r\022\021\n\ttackindex\030\002 \001"
    "(\r\"<\n\031PBC2GFactionAllotMoneyAsk\022\r\n\005count"
    "\030\001 \001(\r\022\020\n\010memberid\030\002 \003(\r\"O\n\030PBC2GFaction"
    "AllotItemAsk\022\016\n\006itemsn\030\001 \001(\004\022\021\n\titemcoun"
    "t\030\002 \001(\r\022\020\n\010memberid\030\003 \003(\r\"c\n\023PBFactionCh"
    "allenger\022#\n\013factionbase\030\001 \001(\0132\016.PBFactio"
    "nBase\022\021\n\tapplytime\030\002 \001(\r\022\024\n\014ischallenger"
    "\030\003 \001(\010\"U\n\021PBManorCpymapInfo\022\017\n\007sceneid\030\001"
    " \001(\r\022\r\n\005dynid\030\002 \001(\004\022\016\n\006cellid\030\003 \001(\r\022\020\n\010r"
    "egionid\030\004 \001(\r\"\247\002\n\013PBManorInfo\022\017\n\007manorid"
    "\030\001 \001(\r\022\016\n\006status\030\002 \001(\r\022\035\n\005owner\030\003 \001(\0132\016."
    "PBFactionBase\022)\n\013challengers\030\004 \003(\0132\024.PBF"
    "actionChallenger\022(\n\014battlefields\030\005 \003(\0132\022"
    ".PBManorCpymapInfo\022)\n\rdefenderlobby\030\006 \001("
    "\0132\022.PBManorCpymapInfo\022+\n\017challengerlobby"
    "\030\007 \001(\0132\022.PBManorCpymapInfo\022\024\n\014eliteplaye"
    "rs\030\010 \003(\r\022\025\n\rcancleapplycd\030\t \001(\004\"*\n\nPBAll"
    "Manor\022\034\n\006manors\030\001 \003(\0132\014.PBManorInfo\"\263\001\n\035"
    "PBManorBattlefieldPlayerScore\022\013\n\003job\030\001 \001"
    "(\r\022\014\n\004name\030\002 \001(\t\022\r\n\005score\030\003 \001(\r\022\014\n\004kill\030"
    "\004 \001(\r\022\014\n\004dead\030\005 \001(\r\022\024\n\014ischallenger\030\006 \001("
    "\010\022\020\n\010playerid\030\007 \001(\r\022\020\n\010takehurt\030\010 \001(\004\022\022\n"
    "\nassistkill\030\t \001(\r\"\201\001\n\030PBManorBattleField"
    "Report\022\021\n\tfactionid\030\001 \001(\r\022\r\n\005count\030\002 \001(\r"
    "\0224\n\014playerscores\030\003 \003(\0132\036.PBManorBattlefi"
    "eldPlayerScore\022\r\n\005score\030\004 \001(\r\"\261\001\n\017PBW2GF"
    "actionSyn\022\014\n\004name\030\001 \001(\t\022\021\n\tfactionid\030\002 \001"
    "(\r\022\020\n\010playerid\030\003 \001(\r\022\016\n\006leader\030\004 \001(\r\022\r\n\005"
    "union\030\005 \001(\r\022\r\n\005corps\030\006 \001(\r\022\r\n\005level\030\007 \001("
    "\r\022\013\n\003job\030\010 \001(\r\022\021\n\tunionname\030\t \001(\t\022\016\n\006ban"
    "ner\030\n \001(\t\"O\n\026PBGL2WFactionSynPlayer\022\"\n\004b"
    "ase\030\001 \001(\0132\024.PBFactionMemberBase\022\021\n\tfacti"
    "onid\030\002 \001(\r\"9\n\027PBCorpsOfflineChangeJob\022\016\n"
    "\006deljob\030\001 \001(\r\022\016\n\006addjob\030\002 \001(\r", 7709);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Faction.proto", &protobuf_RegisterTypes);
  PBFactionBase::default_instance_ = new PBFactionBase();
  PBFactionDBMember::default_instance_ = new PBFactionDBMember();
  PBFactionMemberBase::default_instance_ = new PBFactionMemberBase();
  PBFactionApplyData::default_instance_ = new PBFactionApplyData();
  PBFactionSkill::default_instance_ = new PBFactionSkill();
  PBFactionStudy::default_instance_ = new PBFactionStudy();
  PBFactionStudyConfig::default_instance_ = new PBFactionStudyConfig();
  PBFactionJobPrivilege::default_instance_ = new PBFactionJobPrivilege();
  PBFactionImpeach::default_instance_ = new PBFactionImpeach();
  PBFactionDBData::default_instance_ = new PBFactionDBData();
  PBFactionDepot::default_instance_ = new PBFactionDepot();
  PBFactionMember::default_instance_ = new PBFactionMember();
  PBFactionDisplay::default_instance_ = new PBFactionDisplay();
  PBPlayerFactionSkill::default_instance_ = new PBPlayerFactionSkill();
  PBPlayerFactionDonateMoney::default_instance_ = new PBPlayerFactionDonateMoney();
  PBPlayerFactionTaskItem::default_instance_ = new PBPlayerFactionTaskItem();
  PBPlayerFactionTask::default_instance_ = new PBPlayerFactionTask();
  PBPlayerFaction::default_instance_ = new PBPlayerFaction();
  PBFactionOfflineRemove::default_instance_ = new PBFactionOfflineRemove();
  PBFactionEvent::default_instance_ = new PBFactionEvent();
  PBFactionEventAll::default_instance_ = new PBFactionEventAll();
  PBC2GFactionCreate::default_instance_ = new PBC2GFactionCreate();
  PBC2GFactionApply::default_instance_ = new PBC2GFactionApply();
  PBG2CFactionList::default_instance_ = new PBG2CFactionList();
  PBC2GFactionEdit::default_instance_ = new PBC2GFactionEdit();
  PBG2CFactionApplyList::default_instance_ = new PBG2CFactionApplyList();
  PBG2CFactionMemberList::default_instance_ = new PBG2CFactionMemberList();
  PBC2GFactionRequire::default_instance_ = new PBC2GFactionRequire();
  PBG2CFactionSyn::default_instance_ = new PBG2CFactionSyn();
  PBG2CFactionApplying::default_instance_ = new PBG2CFactionApplying();
  PBG2CImpeachAck::default_instance_ = new PBG2CImpeachAck();
  PBC2GFactionOpt::default_instance_ = new PBC2GFactionOpt();
  PBG2CFactionOptFeedback::default_instance_ = new PBG2CFactionOptFeedback();
  PBG2CFactionOptResult::default_instance_ = new PBG2CFactionOptResult();
  PBCAGSetElite::default_instance_ = new PBCAGSetElite();
  PBCAGSetBeauty::default_instance_ = new PBCAGSetBeauty();
  PBCAGSetPrivilege::default_instance_ = new PBCAGSetPrivilege();
  PBG2CFactionBeInviteJoin::default_instance_ = new PBG2CFactionBeInviteJoin();
  PBG2CFactionInviteJoinResult::default_instance_ = new PBG2CFactionInviteJoinResult();
  FactionSelfSkillInfo::default_instance_ = new FactionSelfSkillInfo();
  PBG2CFactionSelfSkillList::default_instance_ = new PBG2CFactionSelfSkillList();
  FactionStudyFactionInfo::default_instance_ = new FactionStudyFactionInfo();
  PBG2CFactionStudyFactionList::default_instance_ = new PBG2CFactionStudyFactionList();
  PBC2GWatchOhterSkill::default_instance_ = new PBC2GWatchOhterSkill();
  FactionOhterSkillInfo::default_instance_ = new FactionOhterSkillInfo();
  PBG2CFactionOhterSkillList::default_instance_ = new PBG2CFactionOhterSkillList();
  PBC2GUpgradeSelfSkill::default_instance_ = new PBC2GUpgradeSelfSkill();
  PBG2CUpgradeSelfSkill::default_instance_ = new PBG2CUpgradeSelfSkill();
  PBGAWUpgradeSelfSkill::default_instance_ = new PBGAWUpgradeSelfSkill();
  PBAddStudyRelation::default_instance_ = new PBAddStudyRelation();
  PBC2GAddStudyRelation::default_instance_ = new PBC2GAddStudyRelation();
  PBC2GDelStudyRelation::default_instance_ = new PBC2GDelStudyRelation();
  PBG2CDelStudyRelation::default_instance_ = new PBG2CDelStudyRelation();
  PBC2GFactionDevelopSkill::default_instance_ = new PBC2GFactionDevelopSkill();
  PBG2CFactionDevelopSkill::default_instance_ = new PBG2CFactionDevelopSkill();
  PBC2GFactionSuspendDevelopSkill::default_instance_ = new PBC2GFactionSuspendDevelopSkill();
  PBG2CFactionSuspendDevelopSkill::default_instance_ = new PBG2CFactionSuspendDevelopSkill();
  PBC2GFactionOpenStudy::default_instance_ = new PBC2GFactionOpenStudy();
  PBG2CFactionOpenStudy::default_instance_ = new PBG2CFactionOpenStudy();
  PBW2GFactionMemberAttr::default_instance_ = new PBW2GFactionMemberAttr();
  PBG2CFactionMemberAttr::default_instance_ = new PBG2CFactionMemberAttr();
  PBC2GFactionDonateMoney::default_instance_ = new PBC2GFactionDonateMoney();
  PBG2CFactionDrinkWine::default_instance_ = new PBG2CFactionDrinkWine();
  PBC2GFactionDrinkWine::default_instance_ = new PBC2GFactionDrinkWine();
  PBPlayerDrinkWine::default_instance_ = new PBPlayerDrinkWine();
  PBG2CFactionDonateMoney::default_instance_ = new PBG2CFactionDonateMoney();
  PBGAWFactionDonateMoney::default_instance_ = new PBGAWFactionDonateMoney();
  PBG2CFactionDonateMoneyBroad::default_instance_ = new PBG2CFactionDonateMoneyBroad();
  PBC2GFactionCompleteTask::default_instance_ = new PBC2GFactionCompleteTask();
  PBG2CFactionCompleteTask::default_instance_ = new PBG2CFactionCompleteTask();
  PBGAWFactionCompleteTask::default_instance_ = new PBGAWFactionCompleteTask();
  PBC2GFactionAllotMoneyAsk::default_instance_ = new PBC2GFactionAllotMoneyAsk();
  PBC2GFactionAllotItemAsk::default_instance_ = new PBC2GFactionAllotItemAsk();
  PBFactionChallenger::default_instance_ = new PBFactionChallenger();
  PBManorCpymapInfo::default_instance_ = new PBManorCpymapInfo();
  PBManorInfo::default_instance_ = new PBManorInfo();
  PBAllManor::default_instance_ = new PBAllManor();
  PBManorBattlefieldPlayerScore::default_instance_ = new PBManorBattlefieldPlayerScore();
  PBManorBattleFieldReport::default_instance_ = new PBManorBattleFieldReport();
  PBW2GFactionSyn::default_instance_ = new PBW2GFactionSyn();
  PBGL2WFactionSynPlayer::default_instance_ = new PBGL2WFactionSynPlayer();
  PBCorpsOfflineChangeJob::default_instance_ = new PBCorpsOfflineChangeJob();
  PBFactionBase::default_instance_->InitAsDefaultInstance();
  PBFactionDBMember::default_instance_->InitAsDefaultInstance();
  PBFactionMemberBase::default_instance_->InitAsDefaultInstance();
  PBFactionApplyData::default_instance_->InitAsDefaultInstance();
  PBFactionSkill::default_instance_->InitAsDefaultInstance();
  PBFactionStudy::default_instance_->InitAsDefaultInstance();
  PBFactionStudyConfig::default_instance_->InitAsDefaultInstance();
  PBFactionJobPrivilege::default_instance_->InitAsDefaultInstance();
  PBFactionImpeach::default_instance_->InitAsDefaultInstance();
  PBFactionDBData::default_instance_->InitAsDefaultInstance();
  PBFactionDepot::default_instance_->InitAsDefaultInstance();
  PBFactionMember::default_instance_->InitAsDefaultInstance();
  PBFactionDisplay::default_instance_->InitAsDefaultInstance();
  PBPlayerFactionSkill::default_instance_->InitAsDefaultInstance();
  PBPlayerFactionDonateMoney::default_instance_->InitAsDefaultInstance();
  PBPlayerFactionTaskItem::default_instance_->InitAsDefaultInstance();
  PBPlayerFactionTask::default_instance_->InitAsDefaultInstance();
  PBPlayerFaction::default_instance_->InitAsDefaultInstance();
  PBFactionOfflineRemove::default_instance_->InitAsDefaultInstance();
  PBFactionEvent::default_instance_->InitAsDefaultInstance();
  PBFactionEventAll::default_instance_->InitAsDefaultInstance();
  PBC2GFactionCreate::default_instance_->InitAsDefaultInstance();
  PBC2GFactionApply::default_instance_->InitAsDefaultInstance();
  PBG2CFactionList::default_instance_->InitAsDefaultInstance();
  PBC2GFactionEdit::default_instance_->InitAsDefaultInstance();
  PBG2CFactionApplyList::default_instance_->InitAsDefaultInstance();
  PBG2CFactionMemberList::default_instance_->InitAsDefaultInstance();
  PBC2GFactionRequire::default_instance_->InitAsDefaultInstance();
  PBG2CFactionSyn::default_instance_->InitAsDefaultInstance();
  PBG2CFactionApplying::default_instance_->InitAsDefaultInstance();
  PBG2CImpeachAck::default_instance_->InitAsDefaultInstance();
  PBC2GFactionOpt::default_instance_->InitAsDefaultInstance();
  PBG2CFactionOptFeedback::default_instance_->InitAsDefaultInstance();
  PBG2CFactionOptResult::default_instance_->InitAsDefaultInstance();
  PBCAGSetElite::default_instance_->InitAsDefaultInstance();
  PBCAGSetBeauty::default_instance_->InitAsDefaultInstance();
  PBCAGSetPrivilege::default_instance_->InitAsDefaultInstance();
  PBG2CFactionBeInviteJoin::default_instance_->InitAsDefaultInstance();
  PBG2CFactionInviteJoinResult::default_instance_->InitAsDefaultInstance();
  FactionSelfSkillInfo::default_instance_->InitAsDefaultInstance();
  PBG2CFactionSelfSkillList::default_instance_->InitAsDefaultInstance();
  FactionStudyFactionInfo::default_instance_->InitAsDefaultInstance();
  PBG2CFactionStudyFactionList::default_instance_->InitAsDefaultInstance();
  PBC2GWatchOhterSkill::default_instance_->InitAsDefaultInstance();
  FactionOhterSkillInfo::default_instance_->InitAsDefaultInstance();
  PBG2CFactionOhterSkillList::default_instance_->InitAsDefaultInstance();
  PBC2GUpgradeSelfSkill::default_instance_->InitAsDefaultInstance();
  PBG2CUpgradeSelfSkill::default_instance_->InitAsDefaultInstance();
  PBGAWUpgradeSelfSkill::default_instance_->InitAsDefaultInstance();
  PBAddStudyRelation::default_instance_->InitAsDefaultInstance();
  PBC2GAddStudyRelation::default_instance_->InitAsDefaultInstance();
  PBC2GDelStudyRelation::default_instance_->InitAsDefaultInstance();
  PBG2CDelStudyRelation::default_instance_->InitAsDefaultInstance();
  PBC2GFactionDevelopSkill::default_instance_->InitAsDefaultInstance();
  PBG2CFactionDevelopSkill::default_instance_->InitAsDefaultInstance();
  PBC2GFactionSuspendDevelopSkill::default_instance_->InitAsDefaultInstance();
  PBG2CFactionSuspendDevelopSkill::default_instance_->InitAsDefaultInstance();
  PBC2GFactionOpenStudy::default_instance_->InitAsDefaultInstance();
  PBG2CFactionOpenStudy::default_instance_->InitAsDefaultInstance();
  PBW2GFactionMemberAttr::default_instance_->InitAsDefaultInstance();
  PBG2CFactionMemberAttr::default_instance_->InitAsDefaultInstance();
  PBC2GFactionDonateMoney::default_instance_->InitAsDefaultInstance();
  PBG2CFactionDrinkWine::default_instance_->InitAsDefaultInstance();
  PBC2GFactionDrinkWine::default_instance_->InitAsDefaultInstance();
  PBPlayerDrinkWine::default_instance_->InitAsDefaultInstance();
  PBG2CFactionDonateMoney::default_instance_->InitAsDefaultInstance();
  PBGAWFactionDonateMoney::default_instance_->InitAsDefaultInstance();
  PBG2CFactionDonateMoneyBroad::default_instance_->InitAsDefaultInstance();
  PBC2GFactionCompleteTask::default_instance_->InitAsDefaultInstance();
  PBG2CFactionCompleteTask::default_instance_->InitAsDefaultInstance();
  PBGAWFactionCompleteTask::default_instance_->InitAsDefaultInstance();
  PBC2GFactionAllotMoneyAsk::default_instance_->InitAsDefaultInstance();
  PBC2GFactionAllotItemAsk::default_instance_->InitAsDefaultInstance();
  PBFactionChallenger::default_instance_->InitAsDefaultInstance();
  PBManorCpymapInfo::default_instance_->InitAsDefaultInstance();
  PBManorInfo::default_instance_->InitAsDefaultInstance();
  PBAllManor::default_instance_->InitAsDefaultInstance();
  PBManorBattlefieldPlayerScore::default_instance_->InitAsDefaultInstance();
  PBManorBattleFieldReport::default_instance_->InitAsDefaultInstance();
  PBW2GFactionSyn::default_instance_->InitAsDefaultInstance();
  PBGL2WFactionSynPlayer::default_instance_->InitAsDefaultInstance();
  PBCorpsOfflineChangeJob::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Faction_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Faction_2eproto {
  StaticDescriptorInitializer_Faction_2eproto() {
    protobuf_AddDesc_Faction_2eproto();
  }
} static_descriptor_initializer_Faction_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBFactionBase::kNameFieldNumber;
const int PBFactionBase::kFactionidFieldNumber;
const int PBFactionBase::kLeaderFieldNumber;
const int PBFactionBase::kWorldidFieldNumber;
const int PBFactionBase::kLevelFieldNumber;
const int PBFactionBase::kUnionFieldNumber;
const int PBFactionBase::kBannerFieldNumber;
const int PBFactionBase::kCorpsFieldNumber;
#endif  // !_MSC_VER

PBFactionBase::PBFactionBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionBase::InitAsDefaultInstance() {
}

PBFactionBase::PBFactionBase(const PBFactionBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionBase::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  factionid_ = 0u;
  leader_ = 0u;
  worldid_ = 0u;
  level_ = 0u;
  union__ = 0u;
  banner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  corps_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionBase::~PBFactionBase() {
  SharedDtor();
}

void PBFactionBase::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (banner_ != &::google::protobuf::internal::kEmptyString) {
    delete banner_;
  }
  if (this != default_instance_) {
  }
}

void PBFactionBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionBase_descriptor_;
}

const PBFactionBase& PBFactionBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionBase* PBFactionBase::default_instance_ = NULL;

PBFactionBase* PBFactionBase::New() const {
  return new PBFactionBase;
}

void PBFactionBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    factionid_ = 0u;
    leader_ = 0u;
    worldid_ = 0u;
    level_ = 0u;
    union__ = 0u;
    if (has_banner()) {
      if (banner_ != &::google::protobuf::internal::kEmptyString) {
        banner_->clear();
      }
    }
    corps_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_factionid;
        break;
      }
      
      // optional uint32 factionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leader;
        break;
      }
      
      // optional uint32 leader = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_worldid;
        break;
      }
      
      // optional uint32 worldid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_union;
        break;
      }
      
      // optional uint32 union = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_union:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &union__)));
          set_has_union_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_banner;
        break;
      }
      
      // optional string banner = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->banner().data(), this->banner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_corps;
        break;
      }
      
      // optional uint32 corps = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_)));
          set_has_corps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional uint32 factionid = 2;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->factionid(), output);
  }
  
  // optional uint32 leader = 3;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leader(), output);
  }
  
  // optional uint32 worldid = 4;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->worldid(), output);
  }
  
  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }
  
  // optional uint32 union = 6;
  if (has_union_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->union_(), output);
  }
  
  // optional string banner = 7;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banner().data(), this->banner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->banner(), output);
  }
  
  // optional uint32 corps = 8;
  if (has_corps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->corps(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional uint32 factionid = 2;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->factionid(), target);
  }
  
  // optional uint32 leader = 3;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->leader(), target);
  }
  
  // optional uint32 worldid = 4;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->worldid(), target);
  }
  
  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }
  
  // optional uint32 union = 6;
  if (has_union_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->union_(), target);
  }
  
  // optional string banner = 7;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banner().data(), this->banner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->banner(), target);
  }
  
  // optional uint32 corps = 8;
  if (has_corps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->corps(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 factionid = 2;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
    // optional uint32 leader = 3;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader());
    }
    
    // optional uint32 worldid = 4;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 union = 6;
    if (has_union_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->union_());
    }
    
    // optional string banner = 7;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banner());
    }
    
    // optional uint32 corps = 8;
    if (has_corps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionBase::MergeFrom(const PBFactionBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_union_()) {
      set_union_(from.union_());
    }
    if (from.has_banner()) {
      set_banner(from.banner());
    }
    if (from.has_corps()) {
      set_corps(from.corps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionBase::CopyFrom(const PBFactionBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionBase::IsInitialized() const {
  
  return true;
}

void PBFactionBase::Swap(PBFactionBase* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(factionid_, other->factionid_);
    std::swap(leader_, other->leader_);
    std::swap(worldid_, other->worldid_);
    std::swap(level_, other->level_);
    std::swap(union__, other->union__);
    std::swap(banner_, other->banner_);
    std::swap(corps_, other->corps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionBase_descriptor_;
  metadata.reflection = PBFactionBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionDBMember::kPlayeridFieldNumber;
const int PBFactionDBMember::kContributionFieldNumber;
const int PBFactionDBMember::kExperienceFieldNumber;
const int PBFactionDBMember::kJointimeFieldNumber;
const int PBFactionDBMember::kJobFieldNumber;
const int PBFactionDBMember::kTitleFieldNumber;
const int PBFactionDBMember::kLastofflinetimeFieldNumber;
const int PBFactionDBMember::kFobitcountFieldNumber;
const int PBFactionDBMember::kFobittimeFieldNumber;
#endif  // !_MSC_VER

PBFactionDBMember::PBFactionDBMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionDBMember::InitAsDefaultInstance() {
}

PBFactionDBMember::PBFactionDBMember(const PBFactionDBMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionDBMember::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  contribution_ = 0u;
  experience_ = 0u;
  jointime_ = 0u;
  job_ = 0u;
  lastofflinetime_ = 0u;
  fobitcount_ = 0u;
  fobittime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionDBMember::~PBFactionDBMember() {
  SharedDtor();
}

void PBFactionDBMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFactionDBMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionDBMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionDBMember_descriptor_;
}

const PBFactionDBMember& PBFactionDBMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionDBMember* PBFactionDBMember::default_instance_ = NULL;

PBFactionDBMember* PBFactionDBMember::New() const {
  return new PBFactionDBMember;
}

void PBFactionDBMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    contribution_ = 0u;
    experience_ = 0u;
    jointime_ = 0u;
    job_ = 0u;
    lastofflinetime_ = 0u;
    fobitcount_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fobittime_ = 0u;
  }
  title_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionDBMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_contribution;
        break;
      }
      
      // optional uint32 contribution = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_)));
          set_has_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_experience;
        break;
      }
      
      // optional uint32 experience = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jointime;
        break;
      }
      
      // optional uint32 jointime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jointime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jointime_)));
          set_has_jointime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }
      
      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_title;
        break;
      }
      
      // repeated uint32 title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_title())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_title())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_title;
        if (input->ExpectTag(56)) goto parse_lastofflinetime;
        break;
      }
      
      // optional uint32 lastofflinetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastofflinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastofflinetime_)));
          set_has_lastofflinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fobitcount;
        break;
      }
      
      // optional uint32 fobitcount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fobitcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fobitcount_)));
          set_has_fobitcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fobittime;
        break;
      }
      
      // optional uint32 fobittime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fobittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fobittime_)));
          set_has_fobittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionDBMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 contribution = 2;
  if (has_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contribution(), output);
  }
  
  // optional uint32 experience = 3;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->experience(), output);
  }
  
  // optional uint32 jointime = 4;
  if (has_jointime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->jointime(), output);
  }
  
  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }
  
  // repeated uint32 title = 6;
  for (int i = 0; i < this->title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->title(i), output);
  }
  
  // optional uint32 lastofflinetime = 7;
  if (has_lastofflinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lastofflinetime(), output);
  }
  
  // optional uint32 fobitcount = 8;
  if (has_fobitcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fobitcount(), output);
  }
  
  // optional uint32 fobittime = 9;
  if (has_fobittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fobittime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionDBMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 contribution = 2;
  if (has_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contribution(), target);
  }
  
  // optional uint32 experience = 3;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->experience(), target);
  }
  
  // optional uint32 jointime = 4;
  if (has_jointime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->jointime(), target);
  }
  
  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }
  
  // repeated uint32 title = 6;
  for (int i = 0; i < this->title_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->title(i), target);
  }
  
  // optional uint32 lastofflinetime = 7;
  if (has_lastofflinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lastofflinetime(), target);
  }
  
  // optional uint32 fobitcount = 8;
  if (has_fobitcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fobitcount(), target);
  }
  
  // optional uint32 fobittime = 9;
  if (has_fobittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fobittime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionDBMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 contribution = 2;
    if (has_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribution());
    }
    
    // optional uint32 experience = 3;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->experience());
    }
    
    // optional uint32 jointime = 4;
    if (has_jointime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jointime());
    }
    
    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }
    
    // optional uint32 lastofflinetime = 7;
    if (has_lastofflinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastofflinetime());
    }
    
    // optional uint32 fobitcount = 8;
    if (has_fobitcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fobitcount());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 fobittime = 9;
    if (has_fobittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fobittime());
    }
    
  }
  // repeated uint32 title = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->title_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->title(i));
    }
    total_size += 1 * this->title_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionDBMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionDBMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionDBMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionDBMember::MergeFrom(const PBFactionDBMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  title_.MergeFrom(from.title_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_contribution()) {
      set_contribution(from.contribution());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_jointime()) {
      set_jointime(from.jointime());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_lastofflinetime()) {
      set_lastofflinetime(from.lastofflinetime());
    }
    if (from.has_fobitcount()) {
      set_fobitcount(from.fobitcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fobittime()) {
      set_fobittime(from.fobittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionDBMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionDBMember::CopyFrom(const PBFactionDBMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionDBMember::IsInitialized() const {
  
  return true;
}

void PBFactionDBMember::Swap(PBFactionDBMember* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(contribution_, other->contribution_);
    std::swap(experience_, other->experience_);
    std::swap(jointime_, other->jointime_);
    std::swap(job_, other->job_);
    title_.Swap(&other->title_);
    std::swap(lastofflinetime_, other->lastofflinetime_);
    std::swap(fobitcount_, other->fobitcount_);
    std::swap(fobittime_, other->fobittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionDBMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionDBMember_descriptor_;
  metadata.reflection = PBFactionDBMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionMemberBase::kPlayeridFieldNumber;
const int PBFactionMemberBase::kPlayernameFieldNumber;
const int PBFactionMemberBase::kLevelFieldNumber;
const int PBFactionMemberBase::kJobFieldNumber;
const int PBFactionMemberBase::kIdentityFieldNumber;
const int PBFactionMemberBase::kForceFieldNumber;
#endif  // !_MSC_VER

PBFactionMemberBase::PBFactionMemberBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionMemberBase::InitAsDefaultInstance() {
}

PBFactionMemberBase::PBFactionMemberBase(const PBFactionMemberBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionMemberBase::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  identity_ = 0u;
  force_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionMemberBase::~PBFactionMemberBase() {
  SharedDtor();
}

void PBFactionMemberBase::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void PBFactionMemberBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionMemberBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionMemberBase_descriptor_;
}

const PBFactionMemberBase& PBFactionMemberBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionMemberBase* PBFactionMemberBase::default_instance_ = NULL;

PBFactionMemberBase* PBFactionMemberBase::New() const {
  return new PBFactionMemberBase;
}

void PBFactionMemberBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    identity_ = 0u;
    force_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionMemberBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }
      
      // optional string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }
      
      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_identity;
        break;
      }
      
      // optional uint32 identity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identity_)));
          set_has_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_force;
        break;
      }
      
      // optional uint32 force = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionMemberBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }
  
  // optional uint32 identity = 5;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->identity(), output);
  }
  
  // optional uint32 force = 6;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->force(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionMemberBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }
  
  // optional uint32 identity = 5;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->identity(), target);
  }
  
  // optional uint32 force = 6;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->force(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionMemberBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }
    
    // optional uint32 identity = 5;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identity());
    }
    
    // optional uint32 force = 6;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->force());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionMemberBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionMemberBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionMemberBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionMemberBase::MergeFrom(const PBFactionMemberBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionMemberBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionMemberBase::CopyFrom(const PBFactionMemberBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionMemberBase::IsInitialized() const {
  
  return true;
}

void PBFactionMemberBase::Swap(PBFactionMemberBase* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(identity_, other->identity_);
    std::swap(force_, other->force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionMemberBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionMemberBase_descriptor_;
  metadata.reflection = PBFactionMemberBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionApplyData::kBaseFieldNumber;
const int PBFactionApplyData::kStampFieldNumber;
#endif  // !_MSC_VER

PBFactionApplyData::PBFactionApplyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionApplyData::InitAsDefaultInstance() {
  base_ = const_cast< ::PBFactionMemberBase*>(&::PBFactionMemberBase::default_instance());
}

PBFactionApplyData::PBFactionApplyData(const PBFactionApplyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionApplyData::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionApplyData::~PBFactionApplyData() {
  SharedDtor();
}

void PBFactionApplyData::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void PBFactionApplyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionApplyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionApplyData_descriptor_;
}

const PBFactionApplyData& PBFactionApplyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionApplyData* PBFactionApplyData::default_instance_ = NULL;

PBFactionApplyData* PBFactionApplyData::New() const {
  return new PBFactionApplyData;
}

void PBFactionApplyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::PBFactionMemberBase::Clear();
    }
    stamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionApplyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionMemberBase base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stamp;
        break;
      }
      
      // optional uint32 stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionApplyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionMemberBase base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional uint32 stamp = 2;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionApplyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionMemberBase base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional uint32 stamp = 2;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionApplyData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionMemberBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional uint32 stamp = 2;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionApplyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionApplyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionApplyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionApplyData::MergeFrom(const PBFactionApplyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::PBFactionMemberBase::MergeFrom(from.base());
    }
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionApplyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionApplyData::CopyFrom(const PBFactionApplyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionApplyData::IsInitialized() const {
  
  return true;
}

void PBFactionApplyData::Swap(PBFactionApplyData* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(stamp_, other->stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionApplyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionApplyData_descriptor_;
  metadata.reflection = PBFactionApplyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionSkill::kSkillidFieldNumber;
const int PBFactionSkill::kLevelFieldNumber;
const int PBFactionSkill::kStateFieldNumber;
const int PBFactionSkill::kDeveloplefttimeFieldNumber;
const int PBFactionSkill::kDeveloplasttimeFieldNumber;
#endif  // !_MSC_VER

PBFactionSkill::PBFactionSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionSkill::InitAsDefaultInstance() {
}

PBFactionSkill::PBFactionSkill(const PBFactionSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  state_ = 0u;
  developlefttime_ = 0u;
  developlasttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionSkill::~PBFactionSkill() {
  SharedDtor();
}

void PBFactionSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFactionSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionSkill_descriptor_;
}

const PBFactionSkill& PBFactionSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionSkill* PBFactionSkill::default_instance_ = NULL;

PBFactionSkill* PBFactionSkill::New() const {
  return new PBFactionSkill;
}

void PBFactionSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    level_ = 0u;
    state_ = 0u;
    developlefttime_ = 0u;
    developlasttime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }
      
      // optional uint32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_developlefttime;
        break;
      }
      
      // optional uint32 developlefttime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_developlefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &developlefttime_)));
          set_has_developlefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_developlasttime;
        break;
      }
      
      // optional uint32 developlasttime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_developlasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &developlasttime_)));
          set_has_developlasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }
  
  // optional uint32 developlefttime = 4;
  if (has_developlefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->developlefttime(), output);
  }
  
  // optional uint32 developlasttime = 5;
  if (has_developlasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->developlasttime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }
  
  // optional uint32 developlefttime = 4;
  if (has_developlefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->developlefttime(), target);
  }
  
  // optional uint32 developlasttime = 5;
  if (has_developlasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->developlasttime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }
    
    // optional uint32 developlefttime = 4;
    if (has_developlefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->developlefttime());
    }
    
    // optional uint32 developlasttime = 5;
    if (has_developlasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->developlasttime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionSkill::MergeFrom(const PBFactionSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_developlefttime()) {
      set_developlefttime(from.developlefttime());
    }
    if (from.has_developlasttime()) {
      set_developlasttime(from.developlasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionSkill::CopyFrom(const PBFactionSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionSkill::IsInitialized() const {
  
  return true;
}

void PBFactionSkill::Swap(PBFactionSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(state_, other->state_);
    std::swap(developlefttime_, other->developlefttime_);
    std::swap(developlasttime_, other->developlasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionSkill_descriptor_;
  metadata.reflection = PBFactionSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionStudy::kFactionidFieldNumber;
const int PBFactionStudy::kBegintimeFieldNumber;
#endif  // !_MSC_VER

PBFactionStudy::PBFactionStudy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionStudy::InitAsDefaultInstance() {
}

PBFactionStudy::PBFactionStudy(const PBFactionStudy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionStudy::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  begintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionStudy::~PBFactionStudy() {
  SharedDtor();
}

void PBFactionStudy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFactionStudy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionStudy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionStudy_descriptor_;
}

const PBFactionStudy& PBFactionStudy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionStudy* PBFactionStudy::default_instance_ = NULL;

PBFactionStudy* PBFactionStudy::New() const {
  return new PBFactionStudy;
}

void PBFactionStudy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    begintime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionStudy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begintime;
        break;
      }
      
      // optional uint32 begintime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionStudy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }
  
  // optional uint32 begintime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->begintime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionStudy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }
  
  // optional uint32 begintime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->begintime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionStudy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
    // optional uint32 begintime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionStudy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionStudy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionStudy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionStudy::MergeFrom(const PBFactionStudy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionStudy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionStudy::CopyFrom(const PBFactionStudy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionStudy::IsInitialized() const {
  
  return true;
}

void PBFactionStudy::Swap(PBFactionStudy* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(begintime_, other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionStudy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionStudy_descriptor_;
  metadata.reflection = PBFactionStudy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionStudyConfig::kOpenstudyFieldNumber;
const int PBFactionStudyConfig::kStudymoneytypeFieldNumber;
const int PBFactionStudyConfig::kStudymoneyvalueFieldNumber;
const int PBFactionStudyConfig::kTimeFieldNumber;
#endif  // !_MSC_VER

PBFactionStudyConfig::PBFactionStudyConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionStudyConfig::InitAsDefaultInstance() {
}

PBFactionStudyConfig::PBFactionStudyConfig(const PBFactionStudyConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionStudyConfig::SharedCtor() {
  _cached_size_ = 0;
  openstudy_ = false;
  studymoneytype_ = 0u;
  studymoneyvalue_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionStudyConfig::~PBFactionStudyConfig() {
  SharedDtor();
}

void PBFactionStudyConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFactionStudyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionStudyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionStudyConfig_descriptor_;
}

const PBFactionStudyConfig& PBFactionStudyConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionStudyConfig* PBFactionStudyConfig::default_instance_ = NULL;

PBFactionStudyConfig* PBFactionStudyConfig::New() const {
  return new PBFactionStudyConfig;
}

void PBFactionStudyConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    openstudy_ = false;
    studymoneytype_ = 0u;
    studymoneyvalue_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionStudyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool openstudy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &openstudy_)));
          set_has_openstudy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_studymoneytype;
        break;
      }
      
      // optional uint32 studymoneytype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_studymoneytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &studymoneytype_)));
          set_has_studymoneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_studymoneyvalue;
        break;
      }
      
      // optional uint32 studymoneyvalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_studymoneyvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &studymoneyvalue_)));
          set_has_studymoneyvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionStudyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool openstudy = 1;
  if (has_openstudy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->openstudy(), output);
  }
  
  // optional uint32 studymoneytype = 2;
  if (has_studymoneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->studymoneytype(), output);
  }
  
  // optional uint32 studymoneyvalue = 3;
  if (has_studymoneyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->studymoneyvalue(), output);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionStudyConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool openstudy = 1;
  if (has_openstudy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->openstudy(), target);
  }
  
  // optional uint32 studymoneytype = 2;
  if (has_studymoneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->studymoneytype(), target);
  }
  
  // optional uint32 studymoneyvalue = 3;
  if (has_studymoneyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->studymoneyvalue(), target);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionStudyConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool openstudy = 1;
    if (has_openstudy()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 studymoneytype = 2;
    if (has_studymoneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->studymoneytype());
    }
    
    // optional uint32 studymoneyvalue = 3;
    if (has_studymoneyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->studymoneyvalue());
    }
    
    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionStudyConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionStudyConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionStudyConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionStudyConfig::MergeFrom(const PBFactionStudyConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openstudy()) {
      set_openstudy(from.openstudy());
    }
    if (from.has_studymoneytype()) {
      set_studymoneytype(from.studymoneytype());
    }
    if (from.has_studymoneyvalue()) {
      set_studymoneyvalue(from.studymoneyvalue());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionStudyConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionStudyConfig::CopyFrom(const PBFactionStudyConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionStudyConfig::IsInitialized() const {
  
  return true;
}

void PBFactionStudyConfig::Swap(PBFactionStudyConfig* other) {
  if (other != this) {
    std::swap(openstudy_, other->openstudy_);
    std::swap(studymoneytype_, other->studymoneytype_);
    std::swap(studymoneyvalue_, other->studymoneyvalue_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionStudyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionStudyConfig_descriptor_;
  metadata.reflection = PBFactionStudyConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionJobPrivilege::kJobFieldNumber;
const int PBFactionJobPrivilege::kPrivilegeidFieldNumber;
#endif  // !_MSC_VER

PBFactionJobPrivilege::PBFactionJobPrivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionJobPrivilege::InitAsDefaultInstance() {
}

PBFactionJobPrivilege::PBFactionJobPrivilege(const PBFactionJobPrivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionJobPrivilege::SharedCtor() {
  _cached_size_ = 0;
  job_ = 0u;
  privilegeid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionJobPrivilege::~PBFactionJobPrivilege() {
  SharedDtor();
}

void PBFactionJobPrivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFactionJobPrivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionJobPrivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionJobPrivilege_descriptor_;
}

const PBFactionJobPrivilege& PBFactionJobPrivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionJobPrivilege* PBFactionJobPrivilege::default_instance_ = NULL;

PBFactionJobPrivilege* PBFactionJobPrivilege::New() const {
  return new PBFactionJobPrivilege;
}

void PBFactionJobPrivilege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    job_ = 0u;
    privilegeid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionJobPrivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 job = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_privilegeid;
        break;
      }
      
      // optional uint64 privilegeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privilegeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &privilegeid_)));
          set_has_privilegeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionJobPrivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 job = 1;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->job(), output);
  }
  
  // optional uint64 privilegeid = 2;
  if (has_privilegeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->privilegeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionJobPrivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 job = 1;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->job(), target);
  }
  
  // optional uint64 privilegeid = 2;
  if (has_privilegeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->privilegeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionJobPrivilege::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 job = 1;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }
    
    // optional uint64 privilegeid = 2;
    if (has_privilegeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->privilegeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionJobPrivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionJobPrivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionJobPrivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionJobPrivilege::MergeFrom(const PBFactionJobPrivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_privilegeid()) {
      set_privilegeid(from.privilegeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionJobPrivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionJobPrivilege::CopyFrom(const PBFactionJobPrivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionJobPrivilege::IsInitialized() const {
  
  return true;
}

void PBFactionJobPrivilege::Swap(PBFactionJobPrivilege* other) {
  if (other != this) {
    std::swap(job_, other->job_);
    std::swap(privilegeid_, other->privilegeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionJobPrivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionJobPrivilege_descriptor_;
  metadata.reflection = PBFactionJobPrivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionImpeach::kImpeachidFieldNumber;
const int PBFactionImpeach::kImpeachtimeFieldNumber;
const int PBFactionImpeach::kMaxmembernumFieldNumber;
const int PBFactionImpeach::kAgreememberFieldNumber;
const int PBFactionImpeach::kRefusememberFieldNumber;
#endif  // !_MSC_VER

PBFactionImpeach::PBFactionImpeach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionImpeach::InitAsDefaultInstance() {
}

PBFactionImpeach::PBFactionImpeach(const PBFactionImpeach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionImpeach::SharedCtor() {
  _cached_size_ = 0;
  impeachid_ = 0u;
  impeachtime_ = 0u;
  maxmembernum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionImpeach::~PBFactionImpeach() {
  SharedDtor();
}

void PBFactionImpeach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFactionImpeach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionImpeach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionImpeach_descriptor_;
}

const PBFactionImpeach& PBFactionImpeach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionImpeach* PBFactionImpeach::default_instance_ = NULL;

PBFactionImpeach* PBFactionImpeach::New() const {
  return new PBFactionImpeach;
}

void PBFactionImpeach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    impeachid_ = 0u;
    impeachtime_ = 0u;
    maxmembernum_ = 0u;
  }
  agreemember_.Clear();
  refusemember_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionImpeach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 impeachid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &impeachid_)));
          set_has_impeachid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_impeachtime;
        break;
      }
      
      // optional uint32 impeachtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_impeachtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &impeachtime_)));
          set_has_impeachtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxmembernum;
        break;
      }
      
      // optional uint32 maxmembernum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxmembernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmembernum_)));
          set_has_maxmembernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_agreemember;
        break;
      }
      
      // repeated uint32 agreemember = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agreemember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_agreemember())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_agreemember())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_agreemember;
        if (input->ExpectTag(40)) goto parse_refusemember;
        break;
      }
      
      // repeated uint32 refusemember = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refusemember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_refusemember())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_refusemember())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refusemember;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionImpeach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 impeachid = 1;
  if (has_impeachid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->impeachid(), output);
  }
  
  // optional uint32 impeachtime = 2;
  if (has_impeachtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->impeachtime(), output);
  }
  
  // optional uint32 maxmembernum = 3;
  if (has_maxmembernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxmembernum(), output);
  }
  
  // repeated uint32 agreemember = 4;
  for (int i = 0; i < this->agreemember_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->agreemember(i), output);
  }
  
  // repeated uint32 refusemember = 5;
  for (int i = 0; i < this->refusemember_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->refusemember(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionImpeach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 impeachid = 1;
  if (has_impeachid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->impeachid(), target);
  }
  
  // optional uint32 impeachtime = 2;
  if (has_impeachtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->impeachtime(), target);
  }
  
  // optional uint32 maxmembernum = 3;
  if (has_maxmembernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxmembernum(), target);
  }
  
  // repeated uint32 agreemember = 4;
  for (int i = 0; i < this->agreemember_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->agreemember(i), target);
  }
  
  // repeated uint32 refusemember = 5;
  for (int i = 0; i < this->refusemember_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->refusemember(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionImpeach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 impeachid = 1;
    if (has_impeachid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->impeachid());
    }
    
    // optional uint32 impeachtime = 2;
    if (has_impeachtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->impeachtime());
    }
    
    // optional uint32 maxmembernum = 3;
    if (has_maxmembernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmembernum());
    }
    
  }
  // repeated uint32 agreemember = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->agreemember_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->agreemember(i));
    }
    total_size += 1 * this->agreemember_size() + data_size;
  }
  
  // repeated uint32 refusemember = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->refusemember_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->refusemember(i));
    }
    total_size += 1 * this->refusemember_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionImpeach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionImpeach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionImpeach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionImpeach::MergeFrom(const PBFactionImpeach& from) {
  GOOGLE_CHECK_NE(&from, this);
  agreemember_.MergeFrom(from.agreemember_);
  refusemember_.MergeFrom(from.refusemember_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_impeachid()) {
      set_impeachid(from.impeachid());
    }
    if (from.has_impeachtime()) {
      set_impeachtime(from.impeachtime());
    }
    if (from.has_maxmembernum()) {
      set_maxmembernum(from.maxmembernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionImpeach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionImpeach::CopyFrom(const PBFactionImpeach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionImpeach::IsInitialized() const {
  
  return true;
}

void PBFactionImpeach::Swap(PBFactionImpeach* other) {
  if (other != this) {
    std::swap(impeachid_, other->impeachid_);
    std::swap(impeachtime_, other->impeachtime_);
    std::swap(maxmembernum_, other->maxmembernum_);
    agreemember_.Swap(&other->agreemember_);
    refusemember_.Swap(&other->refusemember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionImpeach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionImpeach_descriptor_;
  metadata.reflection = PBFactionImpeach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionDBData::kBaseFieldNumber;
const int PBFactionDBData::kDeclarationFieldNumber;
const int PBFactionDBData::kCreatetimeFieldNumber;
const int PBFactionDBData::kStoneFieldNumber;
const int PBFactionDBData::kSliverFieldNumber;
const int PBFactionDBData::kEnergyFieldNumber;
const int PBFactionDBData::kScoreFieldNumber;
const int PBFactionDBData::kBoomFieldNumber;
const int PBFactionDBData::kExperienceFieldNumber;
const int PBFactionDBData::kOrderFieldNumber;
const int PBFactionDBData::kMembersFieldNumber;
const int PBFactionDBData::kApplysFieldNumber;
const int PBFactionDBData::kRequirelevelFieldNumber;
const int PBFactionDBData::kRefusesFieldNumber;
const int PBFactionDBData::kSkillFieldNumber;
const int PBFactionDBData::kStudyFieldNumber;
const int PBFactionDBData::kCurstudyconfigFieldNumber;
const int PBFactionDBData::kFrontstudyconfigFieldNumber;
const int PBFactionDBData::kPrivilegeFieldNumber;
const int PBFactionDBData::kImpeachFieldNumber;
const int PBFactionDBData::kToplistFieldNumber;
const int PBFactionDBData::kAutoapplyFieldNumber;
#endif  // !_MSC_VER

PBFactionDBData::PBFactionDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionDBData::InitAsDefaultInstance() {
  base_ = const_cast< ::PBFactionBase*>(&::PBFactionBase::default_instance());
  curstudyconfig_ = const_cast< ::PBFactionStudyConfig*>(&::PBFactionStudyConfig::default_instance());
  frontstudyconfig_ = const_cast< ::PBFactionStudyConfig*>(&::PBFactionStudyConfig::default_instance());
  impeach_ = const_cast< ::PBFactionImpeach*>(&::PBFactionImpeach::default_instance());
  toplist_ = const_cast< ::PBTopListData*>(&::PBTopListData::default_instance());
}

PBFactionDBData::PBFactionDBData(const PBFactionDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionDBData::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtime_ = 0u;
  stone_ = GOOGLE_ULONGLONG(0);
  sliver_ = GOOGLE_ULONGLONG(0);
  energy_ = GOOGLE_ULONGLONG(0);
  score_ = GOOGLE_ULONGLONG(0);
  boom_ = GOOGLE_ULONGLONG(0);
  experience_ = GOOGLE_ULONGLONG(0);
  order_ = 0u;
  requirelevel_ = 0u;
  curstudyconfig_ = NULL;
  frontstudyconfig_ = NULL;
  impeach_ = NULL;
  toplist_ = NULL;
  autoapply_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionDBData::~PBFactionDBData() {
  SharedDtor();
}

void PBFactionDBData::SharedDtor() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (this != default_instance_) {
    delete base_;
    delete curstudyconfig_;
    delete frontstudyconfig_;
    delete impeach_;
    delete toplist_;
  }
}

void PBFactionDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionDBData_descriptor_;
}

const PBFactionDBData& PBFactionDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionDBData* PBFactionDBData::default_instance_ = NULL;

PBFactionDBData* PBFactionDBData::New() const {
  return new PBFactionDBData;
}

void PBFactionDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::PBFactionBase::Clear();
    }
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
    createtime_ = 0u;
    stone_ = GOOGLE_ULONGLONG(0);
    sliver_ = GOOGLE_ULONGLONG(0);
    energy_ = GOOGLE_ULONGLONG(0);
    score_ = GOOGLE_ULONGLONG(0);
    boom_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    experience_ = GOOGLE_ULONGLONG(0);
    order_ = 0u;
    requirelevel_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_curstudyconfig()) {
      if (curstudyconfig_ != NULL) curstudyconfig_->::PBFactionStudyConfig::Clear();
    }
    if (has_frontstudyconfig()) {
      if (frontstudyconfig_ != NULL) frontstudyconfig_->::PBFactionStudyConfig::Clear();
    }
    if (has_impeach()) {
      if (impeach_ != NULL) impeach_->::PBFactionImpeach::Clear();
    }
    if (has_toplist()) {
      if (toplist_ != NULL) toplist_->::PBTopListData::Clear();
    }
    autoapply_ = false;
  }
  members_.Clear();
  applys_.Clear();
  refuses_.Clear();
  skill_.Clear();
  study_.Clear();
  privilege_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionBase base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_declaration;
        break;
      }
      
      // optional string declaration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_declaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_createtime;
        break;
      }
      
      // optional uint32 createtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stone;
        break;
      }
      
      // optional uint64 stone = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stone_)));
          set_has_stone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sliver;
        break;
      }
      
      // optional uint64 sliver = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_energy;
        break;
      }
      
      // optional uint64 energy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_score;
        break;
      }
      
      // optional uint64 score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_boom;
        break;
      }
      
      // optional uint64 boom = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &boom_)));
          set_has_boom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_experience;
        break;
      }
      
      // optional uint64 experience = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_order;
        break;
      }
      
      // optional uint32 order = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_members;
        break;
      }
      
      // repeated .PBFactionDBMember members = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_members;
        if (input->ExpectTag(98)) goto parse_applys;
        break;
      }
      
      // repeated .PBFactionApplyData applys = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_applys;
        if (input->ExpectTag(104)) goto parse_requirelevel;
        break;
      }
      
      // optional uint32 requirelevel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requirelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requirelevel_)));
          set_has_requirelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_refuses;
        break;
      }
      
      // repeated .PBIDStamp refuses = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refuses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refuses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_refuses;
        if (input->ExpectTag(122)) goto parse_skill;
        break;
      }
      
      // repeated .PBFactionSkill skill = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_skill;
        if (input->ExpectTag(130)) goto parse_study;
        break;
      }
      
      // repeated .PBFactionStudy study = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_study:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_study()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_study;
        if (input->ExpectTag(138)) goto parse_curstudyconfig;
        break;
      }
      
      // optional .PBFactionStudyConfig curstudyconfig = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curstudyconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curstudyconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_frontstudyconfig;
        break;
      }
      
      // optional .PBFactionStudyConfig frontstudyconfig = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frontstudyconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frontstudyconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_privilege;
        break;
      }
      
      // repeated .PBFactionJobPrivilege privilege = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privilege:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_privilege()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_privilege;
        if (input->ExpectTag(162)) goto parse_impeach;
        break;
      }
      
      // optional .PBFactionImpeach impeach = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_impeach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impeach()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_toplist;
        break;
      }
      
      // optional .PBTopListData toplist = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toplist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_autoapply;
        break;
      }
      
      // optional bool autoapply = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoapply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoapply_)));
          set_has_autoapply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionBase base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional string declaration = 2;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->declaration(), output);
  }
  
  // optional uint32 createtime = 3;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->createtime(), output);
  }
  
  // optional uint64 stone = 4;
  if (has_stone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->stone(), output);
  }
  
  // optional uint64 sliver = 5;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sliver(), output);
  }
  
  // optional uint64 energy = 6;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->energy(), output);
  }
  
  // optional uint64 score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->score(), output);
  }
  
  // optional uint64 boom = 8;
  if (has_boom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->boom(), output);
  }
  
  // optional uint64 experience = 9;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->experience(), output);
  }
  
  // optional uint32 order = 10;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->order(), output);
  }
  
  // repeated .PBFactionDBMember members = 11;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->members(i), output);
  }
  
  // repeated .PBFactionApplyData applys = 12;
  for (int i = 0; i < this->applys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->applys(i), output);
  }
  
  // optional uint32 requirelevel = 13;
  if (has_requirelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->requirelevel(), output);
  }
  
  // repeated .PBIDStamp refuses = 14;
  for (int i = 0; i < this->refuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->refuses(i), output);
  }
  
  // repeated .PBFactionSkill skill = 15;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->skill(i), output);
  }
  
  // repeated .PBFactionStudy study = 16;
  for (int i = 0; i < this->study_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->study(i), output);
  }
  
  // optional .PBFactionStudyConfig curstudyconfig = 17;
  if (has_curstudyconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->curstudyconfig(), output);
  }
  
  // optional .PBFactionStudyConfig frontstudyconfig = 18;
  if (has_frontstudyconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->frontstudyconfig(), output);
  }
  
  // repeated .PBFactionJobPrivilege privilege = 19;
  for (int i = 0; i < this->privilege_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->privilege(i), output);
  }
  
  // optional .PBFactionImpeach impeach = 20;
  if (has_impeach()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->impeach(), output);
  }
  
  // optional .PBTopListData toplist = 21;
  if (has_toplist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->toplist(), output);
  }
  
  // optional bool autoapply = 22;
  if (has_autoapply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->autoapply(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionBase base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional string declaration = 2;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->declaration(), target);
  }
  
  // optional uint32 createtime = 3;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->createtime(), target);
  }
  
  // optional uint64 stone = 4;
  if (has_stone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->stone(), target);
  }
  
  // optional uint64 sliver = 5;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sliver(), target);
  }
  
  // optional uint64 energy = 6;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->energy(), target);
  }
  
  // optional uint64 score = 7;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->score(), target);
  }
  
  // optional uint64 boom = 8;
  if (has_boom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->boom(), target);
  }
  
  // optional uint64 experience = 9;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->experience(), target);
  }
  
  // optional uint32 order = 10;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->order(), target);
  }
  
  // repeated .PBFactionDBMember members = 11;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->members(i), target);
  }
  
  // repeated .PBFactionApplyData applys = 12;
  for (int i = 0; i < this->applys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->applys(i), target);
  }
  
  // optional uint32 requirelevel = 13;
  if (has_requirelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->requirelevel(), target);
  }
  
  // repeated .PBIDStamp refuses = 14;
  for (int i = 0; i < this->refuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->refuses(i), target);
  }
  
  // repeated .PBFactionSkill skill = 15;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->skill(i), target);
  }
  
  // repeated .PBFactionStudy study = 16;
  for (int i = 0; i < this->study_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->study(i), target);
  }
  
  // optional .PBFactionStudyConfig curstudyconfig = 17;
  if (has_curstudyconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->curstudyconfig(), target);
  }
  
  // optional .PBFactionStudyConfig frontstudyconfig = 18;
  if (has_frontstudyconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->frontstudyconfig(), target);
  }
  
  // repeated .PBFactionJobPrivilege privilege = 19;
  for (int i = 0; i < this->privilege_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->privilege(i), target);
  }
  
  // optional .PBFactionImpeach impeach = 20;
  if (has_impeach()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->impeach(), target);
  }
  
  // optional .PBTopListData toplist = 21;
  if (has_toplist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->toplist(), target);
  }
  
  // optional bool autoapply = 22;
  if (has_autoapply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->autoapply(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionDBData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional string declaration = 2;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }
    
    // optional uint32 createtime = 3;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }
    
    // optional uint64 stone = 4;
    if (has_stone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stone());
    }
    
    // optional uint64 sliver = 5;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sliver());
    }
    
    // optional uint64 energy = 6;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->energy());
    }
    
    // optional uint64 score = 7;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }
    
    // optional uint64 boom = 8;
    if (has_boom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->boom());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 experience = 9;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->experience());
    }
    
    // optional uint32 order = 10;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }
    
    // optional uint32 requirelevel = 13;
    if (has_requirelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requirelevel());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PBFactionStudyConfig curstudyconfig = 17;
    if (has_curstudyconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curstudyconfig());
    }
    
    // optional .PBFactionStudyConfig frontstudyconfig = 18;
    if (has_frontstudyconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frontstudyconfig());
    }
    
    // optional .PBFactionImpeach impeach = 20;
    if (has_impeach()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->impeach());
    }
    
    // optional .PBTopListData toplist = 21;
    if (has_toplist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toplist());
    }
    
    // optional bool autoapply = 22;
    if (has_autoapply()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .PBFactionDBMember members = 11;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }
  
  // repeated .PBFactionApplyData applys = 12;
  total_size += 1 * this->applys_size();
  for (int i = 0; i < this->applys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applys(i));
  }
  
  // repeated .PBIDStamp refuses = 14;
  total_size += 1 * this->refuses_size();
  for (int i = 0; i < this->refuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refuses(i));
  }
  
  // repeated .PBFactionSkill skill = 15;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }
  
  // repeated .PBFactionStudy study = 16;
  total_size += 2 * this->study_size();
  for (int i = 0; i < this->study_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->study(i));
  }
  
  // repeated .PBFactionJobPrivilege privilege = 19;
  total_size += 2 * this->privilege_size();
  for (int i = 0; i < this->privilege_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->privilege(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionDBData::MergeFrom(const PBFactionDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  applys_.MergeFrom(from.applys_);
  refuses_.MergeFrom(from.refuses_);
  skill_.MergeFrom(from.skill_);
  study_.MergeFrom(from.study_);
  privilege_.MergeFrom(from.privilege_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::PBFactionBase::MergeFrom(from.base());
    }
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_stone()) {
      set_stone(from.stone());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_boom()) {
      set_boom(from.boom());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_requirelevel()) {
      set_requirelevel(from.requirelevel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_curstudyconfig()) {
      mutable_curstudyconfig()->::PBFactionStudyConfig::MergeFrom(from.curstudyconfig());
    }
    if (from.has_frontstudyconfig()) {
      mutable_frontstudyconfig()->::PBFactionStudyConfig::MergeFrom(from.frontstudyconfig());
    }
    if (from.has_impeach()) {
      mutable_impeach()->::PBFactionImpeach::MergeFrom(from.impeach());
    }
    if (from.has_toplist()) {
      mutable_toplist()->::PBTopListData::MergeFrom(from.toplist());
    }
    if (from.has_autoapply()) {
      set_autoapply(from.autoapply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionDBData::CopyFrom(const PBFactionDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionDBData::IsInitialized() const {
  
  return true;
}

void PBFactionDBData::Swap(PBFactionDBData* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(declaration_, other->declaration_);
    std::swap(createtime_, other->createtime_);
    std::swap(stone_, other->stone_);
    std::swap(sliver_, other->sliver_);
    std::swap(energy_, other->energy_);
    std::swap(score_, other->score_);
    std::swap(boom_, other->boom_);
    std::swap(experience_, other->experience_);
    std::swap(order_, other->order_);
    members_.Swap(&other->members_);
    applys_.Swap(&other->applys_);
    std::swap(requirelevel_, other->requirelevel_);
    refuses_.Swap(&other->refuses_);
    skill_.Swap(&other->skill_);
    study_.Swap(&other->study_);
    std::swap(curstudyconfig_, other->curstudyconfig_);
    std::swap(frontstudyconfig_, other->frontstudyconfig_);
    privilege_.Swap(&other->privilege_);
    std::swap(impeach_, other->impeach_);
    std::swap(toplist_, other->toplist_);
    std::swap(autoapply_, other->autoapply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionDBData_descriptor_;
  metadata.reflection = PBFactionDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionDepot::kUniqueindexFieldNumber;
const int PBFactionDepot::kItemFieldNumber;
const int PBFactionDepot::kMoneyFieldNumber;
#endif  // !_MSC_VER

PBFactionDepot::PBFactionDepot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionDepot::InitAsDefaultInstance() {
}

PBFactionDepot::PBFactionDepot(const PBFactionDepot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionDepot::SharedCtor() {
  _cached_size_ = 0;
  uniqueindex_ = GOOGLE_ULONGLONG(0);
  money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionDepot::~PBFactionDepot() {
  SharedDtor();
}

void PBFactionDepot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFactionDepot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionDepot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionDepot_descriptor_;
}

const PBFactionDepot& PBFactionDepot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionDepot* PBFactionDepot::default_instance_ = NULL;

PBFactionDepot* PBFactionDepot::New() const {
  return new PBFactionDepot;
}

void PBFactionDepot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uniqueindex_ = GOOGLE_ULONGLONG(0);
    money_ = GOOGLE_ULONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionDepot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uniqueindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uniqueindex_)));
          set_has_uniqueindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }
      
      // repeated .PBItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }
      
      // optional uint64 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionDepot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uniqueindex = 1;
  if (has_uniqueindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uniqueindex(), output);
  }
  
  // repeated .PBItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }
  
  // optional uint64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionDepot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uniqueindex = 1;
  if (has_uniqueindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uniqueindex(), target);
  }
  
  // repeated .PBItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }
  
  // optional uint64 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionDepot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uniqueindex = 1;
    if (has_uniqueindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uniqueindex());
    }
    
    // optional uint64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }
    
  }
  // repeated .PBItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionDepot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionDepot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionDepot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionDepot::MergeFrom(const PBFactionDepot& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueindex()) {
      set_uniqueindex(from.uniqueindex());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionDepot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionDepot::CopyFrom(const PBFactionDepot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionDepot::IsInitialized() const {
  
  return true;
}

void PBFactionDepot::Swap(PBFactionDepot* other) {
  if (other != this) {
    std::swap(uniqueindex_, other->uniqueindex_);
    item_.Swap(&other->item_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionDepot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionDepot_descriptor_;
  metadata.reflection = PBFactionDepot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionMember::kBaseFieldNumber;
const int PBFactionMember::kContributionFieldNumber;
const int PBFactionMember::kExperienceFieldNumber;
const int PBFactionMember::kJointimeFieldNumber;
const int PBFactionMember::kOnlineFieldNumber;
const int PBFactionMember::kJobFieldNumber;
const int PBFactionMember::kTitleFieldNumber;
const int PBFactionMember::kLastofflinetimeFieldNumber;
const int PBFactionMember::kFobitcountFieldNumber;
const int PBFactionMember::kFobittimeFieldNumber;
#endif  // !_MSC_VER

PBFactionMember::PBFactionMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionMember::InitAsDefaultInstance() {
  base_ = const_cast< ::PBFactionMemberBase*>(&::PBFactionMemberBase::default_instance());
}

PBFactionMember::PBFactionMember(const PBFactionMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionMember::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  contribution_ = 0u;
  experience_ = 0u;
  jointime_ = 0u;
  online_ = false;
  job_ = 0u;
  lastofflinetime_ = 0u;
  fobitcount_ = 0u;
  fobittime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionMember::~PBFactionMember() {
  SharedDtor();
}

void PBFactionMember::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void PBFactionMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionMember_descriptor_;
}

const PBFactionMember& PBFactionMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionMember* PBFactionMember::default_instance_ = NULL;

PBFactionMember* PBFactionMember::New() const {
  return new PBFactionMember;
}

void PBFactionMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::PBFactionMemberBase::Clear();
    }
    contribution_ = 0u;
    experience_ = 0u;
    jointime_ = 0u;
    online_ = false;
    job_ = 0u;
    lastofflinetime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fobitcount_ = 0u;
    fobittime_ = 0u;
  }
  title_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionMemberBase base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_contribution;
        break;
      }
      
      // optional uint32 contribution = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_)));
          set_has_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_experience;
        break;
      }
      
      // optional uint32 experience = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jointime;
        break;
      }
      
      // optional uint32 jointime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jointime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jointime_)));
          set_has_jointime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_online;
        break;
      }
      
      // optional bool online = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_job;
        break;
      }
      
      // optional uint32 job = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_title;
        break;
      }
      
      // repeated uint32 title = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_title())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_title())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_title;
        if (input->ExpectTag(64)) goto parse_lastofflinetime;
        break;
      }
      
      // optional uint32 lastofflinetime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastofflinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastofflinetime_)));
          set_has_lastofflinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fobitcount;
        break;
      }
      
      // optional uint32 fobitcount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fobitcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fobitcount_)));
          set_has_fobitcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fobittime;
        break;
      }
      
      // optional uint32 fobittime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fobittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fobittime_)));
          set_has_fobittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionMemberBase base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional uint32 contribution = 2;
  if (has_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contribution(), output);
  }
  
  // optional uint32 experience = 3;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->experience(), output);
  }
  
  // optional uint32 jointime = 4;
  if (has_jointime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->jointime(), output);
  }
  
  // optional bool online = 5;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->online(), output);
  }
  
  // optional uint32 job = 6;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->job(), output);
  }
  
  // repeated uint32 title = 7;
  for (int i = 0; i < this->title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->title(i), output);
  }
  
  // optional uint32 lastofflinetime = 8;
  if (has_lastofflinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lastofflinetime(), output);
  }
  
  // optional uint32 fobitcount = 9;
  if (has_fobitcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fobitcount(), output);
  }
  
  // optional uint32 fobittime = 10;
  if (has_fobittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->fobittime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionMemberBase base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional uint32 contribution = 2;
  if (has_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contribution(), target);
  }
  
  // optional uint32 experience = 3;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->experience(), target);
  }
  
  // optional uint32 jointime = 4;
  if (has_jointime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->jointime(), target);
  }
  
  // optional bool online = 5;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->online(), target);
  }
  
  // optional uint32 job = 6;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->job(), target);
  }
  
  // repeated uint32 title = 7;
  for (int i = 0; i < this->title_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->title(i), target);
  }
  
  // optional uint32 lastofflinetime = 8;
  if (has_lastofflinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lastofflinetime(), target);
  }
  
  // optional uint32 fobitcount = 9;
  if (has_fobitcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fobitcount(), target);
  }
  
  // optional uint32 fobittime = 10;
  if (has_fobittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->fobittime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionMemberBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional uint32 contribution = 2;
    if (has_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribution());
    }
    
    // optional uint32 experience = 3;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->experience());
    }
    
    // optional uint32 jointime = 4;
    if (has_jointime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jointime());
    }
    
    // optional bool online = 5;
    if (has_online()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 job = 6;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }
    
    // optional uint32 lastofflinetime = 8;
    if (has_lastofflinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastofflinetime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 fobitcount = 9;
    if (has_fobitcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fobitcount());
    }
    
    // optional uint32 fobittime = 10;
    if (has_fobittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fobittime());
    }
    
  }
  // repeated uint32 title = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->title_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->title(i));
    }
    total_size += 1 * this->title_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionMember::MergeFrom(const PBFactionMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  title_.MergeFrom(from.title_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::PBFactionMemberBase::MergeFrom(from.base());
    }
    if (from.has_contribution()) {
      set_contribution(from.contribution());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_jointime()) {
      set_jointime(from.jointime());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_lastofflinetime()) {
      set_lastofflinetime(from.lastofflinetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fobitcount()) {
      set_fobitcount(from.fobitcount());
    }
    if (from.has_fobittime()) {
      set_fobittime(from.fobittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionMember::CopyFrom(const PBFactionMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionMember::IsInitialized() const {
  
  return true;
}

void PBFactionMember::Swap(PBFactionMember* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(contribution_, other->contribution_);
    std::swap(experience_, other->experience_);
    std::swap(jointime_, other->jointime_);
    std::swap(online_, other->online_);
    std::swap(job_, other->job_);
    title_.Swap(&other->title_);
    std::swap(lastofflinetime_, other->lastofflinetime_);
    std::swap(fobitcount_, other->fobitcount_);
    std::swap(fobittime_, other->fobittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionMember_descriptor_;
  metadata.reflection = PBFactionMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionDisplay::kBaseFieldNumber;
const int PBFactionDisplay::kLeadernameFieldNumber;
const int PBFactionDisplay::kPeopleFieldNumber;
const int PBFactionDisplay::kPeoplemaxFieldNumber;
const int PBFactionDisplay::kIsleaderonlineFieldNumber;
const int PBFactionDisplay::kBoomFieldNumber;
#endif  // !_MSC_VER

PBFactionDisplay::PBFactionDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionDisplay::InitAsDefaultInstance() {
  base_ = const_cast< ::PBFactionBase*>(&::PBFactionBase::default_instance());
}

PBFactionDisplay::PBFactionDisplay(const PBFactionDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionDisplay::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  people_ = 0u;
  peoplemax_ = 0u;
  isleaderonline_ = false;
  boom_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionDisplay::~PBFactionDisplay() {
  SharedDtor();
}

void PBFactionDisplay::SharedDtor() {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

void PBFactionDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionDisplay_descriptor_;
}

const PBFactionDisplay& PBFactionDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionDisplay* PBFactionDisplay::default_instance_ = NULL;

PBFactionDisplay* PBFactionDisplay::New() const {
  return new PBFactionDisplay;
}

void PBFactionDisplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::PBFactionBase::Clear();
    }
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::kEmptyString) {
        leadername_->clear();
      }
    }
    people_ = 0u;
    peoplemax_ = 0u;
    isleaderonline_ = false;
    boom_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionBase base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leadername;
        break;
      }
      
      // optional string leadername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leadername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_people;
        break;
      }
      
      // optional uint32 people = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_people:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &people_)));
          set_has_people();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_peoplemax;
        break;
      }
      
      // optional uint32 peoplemax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peoplemax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peoplemax_)));
          set_has_peoplemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isleaderonline;
        break;
      }
      
      // optional bool isleaderonline = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isleaderonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isleaderonline_)));
          set_has_isleaderonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_boom;
        break;
      }
      
      // optional uint64 boom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &boom_)));
          set_has_boom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionBase base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional string leadername = 2;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leadername(), output);
  }
  
  // optional uint32 people = 3;
  if (has_people()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->people(), output);
  }
  
  // optional uint32 peoplemax = 4;
  if (has_peoplemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peoplemax(), output);
  }
  
  // optional bool isleaderonline = 5;
  if (has_isleaderonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isleaderonline(), output);
  }
  
  // optional uint64 boom = 6;
  if (has_boom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->boom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionBase base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional string leadername = 2;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leadername(), target);
  }
  
  // optional uint32 people = 3;
  if (has_people()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->people(), target);
  }
  
  // optional uint32 peoplemax = 4;
  if (has_peoplemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peoplemax(), target);
  }
  
  // optional bool isleaderonline = 5;
  if (has_isleaderonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isleaderonline(), target);
  }
  
  // optional uint64 boom = 6;
  if (has_boom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->boom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionDisplay::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional string leadername = 2;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }
    
    // optional uint32 people = 3;
    if (has_people()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->people());
    }
    
    // optional uint32 peoplemax = 4;
    if (has_peoplemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peoplemax());
    }
    
    // optional bool isleaderonline = 5;
    if (has_isleaderonline()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 boom = 6;
    if (has_boom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->boom());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionDisplay::MergeFrom(const PBFactionDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::PBFactionBase::MergeFrom(from.base());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_people()) {
      set_people(from.people());
    }
    if (from.has_peoplemax()) {
      set_peoplemax(from.peoplemax());
    }
    if (from.has_isleaderonline()) {
      set_isleaderonline(from.isleaderonline());
    }
    if (from.has_boom()) {
      set_boom(from.boom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionDisplay::CopyFrom(const PBFactionDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionDisplay::IsInitialized() const {
  
  return true;
}

void PBFactionDisplay::Swap(PBFactionDisplay* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(leadername_, other->leadername_);
    std::swap(people_, other->people_);
    std::swap(peoplemax_, other->peoplemax_);
    std::swap(isleaderonline_, other->isleaderonline_);
    std::swap(boom_, other->boom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionDisplay_descriptor_;
  metadata.reflection = PBFactionDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerFactionSkill::kSkillidFieldNumber;
const int PBPlayerFactionSkill::kLevelFieldNumber;
#endif  // !_MSC_VER

PBPlayerFactionSkill::PBPlayerFactionSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerFactionSkill::InitAsDefaultInstance() {
}

PBPlayerFactionSkill::PBPlayerFactionSkill(const PBPlayerFactionSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerFactionSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerFactionSkill::~PBPlayerFactionSkill() {
  SharedDtor();
}

void PBPlayerFactionSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerFactionSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerFactionSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerFactionSkill_descriptor_;
}

const PBPlayerFactionSkill& PBPlayerFactionSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBPlayerFactionSkill* PBPlayerFactionSkill::default_instance_ = NULL;

PBPlayerFactionSkill* PBPlayerFactionSkill::New() const {
  return new PBPlayerFactionSkill;
}

void PBPlayerFactionSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerFactionSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerFactionSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerFactionSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerFactionSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerFactionSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerFactionSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerFactionSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerFactionSkill::MergeFrom(const PBPlayerFactionSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerFactionSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerFactionSkill::CopyFrom(const PBPlayerFactionSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerFactionSkill::IsInitialized() const {
  
  return true;
}

void PBPlayerFactionSkill::Swap(PBPlayerFactionSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerFactionSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerFactionSkill_descriptor_;
  metadata.reflection = PBPlayerFactionSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerFactionDonateMoney::kIdFieldNumber;
const int PBPlayerFactionDonateMoney::kCountFieldNumber;
#endif  // !_MSC_VER

PBPlayerFactionDonateMoney::PBPlayerFactionDonateMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerFactionDonateMoney::InitAsDefaultInstance() {
}

PBPlayerFactionDonateMoney::PBPlayerFactionDonateMoney(const PBPlayerFactionDonateMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerFactionDonateMoney::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerFactionDonateMoney::~PBPlayerFactionDonateMoney() {
  SharedDtor();
}

void PBPlayerFactionDonateMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerFactionDonateMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerFactionDonateMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerFactionDonateMoney_descriptor_;
}

const PBPlayerFactionDonateMoney& PBPlayerFactionDonateMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBPlayerFactionDonateMoney* PBPlayerFactionDonateMoney::default_instance_ = NULL;

PBPlayerFactionDonateMoney* PBPlayerFactionDonateMoney::New() const {
  return new PBPlayerFactionDonateMoney;
}

void PBPlayerFactionDonateMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerFactionDonateMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerFactionDonateMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerFactionDonateMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerFactionDonateMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerFactionDonateMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerFactionDonateMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerFactionDonateMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerFactionDonateMoney::MergeFrom(const PBPlayerFactionDonateMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerFactionDonateMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerFactionDonateMoney::CopyFrom(const PBPlayerFactionDonateMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerFactionDonateMoney::IsInitialized() const {
  
  return true;
}

void PBPlayerFactionDonateMoney::Swap(PBPlayerFactionDonateMoney* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerFactionDonateMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerFactionDonateMoney_descriptor_;
  metadata.reflection = PBPlayerFactionDonateMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerFactionTaskItem::kItemidFieldNumber;
const int PBPlayerFactionTaskItem::kCountFieldNumber;
#endif  // !_MSC_VER

PBPlayerFactionTaskItem::PBPlayerFactionTaskItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerFactionTaskItem::InitAsDefaultInstance() {
}

PBPlayerFactionTaskItem::PBPlayerFactionTaskItem(const PBPlayerFactionTaskItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerFactionTaskItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerFactionTaskItem::~PBPlayerFactionTaskItem() {
  SharedDtor();
}

void PBPlayerFactionTaskItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerFactionTaskItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerFactionTaskItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerFactionTaskItem_descriptor_;
}

const PBPlayerFactionTaskItem& PBPlayerFactionTaskItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBPlayerFactionTaskItem* PBPlayerFactionTaskItem::default_instance_ = NULL;

PBPlayerFactionTaskItem* PBPlayerFactionTaskItem::New() const {
  return new PBPlayerFactionTaskItem;
}

void PBPlayerFactionTaskItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerFactionTaskItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerFactionTaskItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerFactionTaskItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerFactionTaskItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerFactionTaskItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerFactionTaskItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerFactionTaskItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerFactionTaskItem::MergeFrom(const PBPlayerFactionTaskItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerFactionTaskItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerFactionTaskItem::CopyFrom(const PBPlayerFactionTaskItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerFactionTaskItem::IsInitialized() const {
  
  return true;
}

void PBPlayerFactionTaskItem::Swap(PBPlayerFactionTaskItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerFactionTaskItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerFactionTaskItem_descriptor_;
  metadata.reflection = PBPlayerFactionTaskItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerFactionTask::kTaskcountFieldNumber;
const int PBPlayerFactionTask::kTaskidFieldNumber;
const int PBPlayerFactionTask::kTaskitemFieldNumber;
#endif  // !_MSC_VER

PBPlayerFactionTask::PBPlayerFactionTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerFactionTask::InitAsDefaultInstance() {
}

PBPlayerFactionTask::PBPlayerFactionTask(const PBPlayerFactionTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerFactionTask::SharedCtor() {
  _cached_size_ = 0;
  taskcount_ = 0u;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerFactionTask::~PBPlayerFactionTask() {
  SharedDtor();
}

void PBPlayerFactionTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerFactionTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerFactionTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerFactionTask_descriptor_;
}

const PBPlayerFactionTask& PBPlayerFactionTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBPlayerFactionTask* PBPlayerFactionTask::default_instance_ = NULL;

PBPlayerFactionTask* PBPlayerFactionTask::New() const {
  return new PBPlayerFactionTask;
}

void PBPlayerFactionTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskcount_ = 0u;
    taskid_ = 0u;
  }
  taskitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerFactionTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskcount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskcount_)));
          set_has_taskcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taskid;
        break;
      }
      
      // optional uint32 taskid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_taskitem;
        break;
      }
      
      // repeated .PBPlayerFactionTaskItem taskitem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_taskitem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerFactionTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 taskcount = 1;
  if (has_taskcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskcount(), output);
  }
  
  // optional uint32 taskid = 2;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->taskid(), output);
  }
  
  // repeated .PBPlayerFactionTaskItem taskitem = 3;
  for (int i = 0; i < this->taskitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->taskitem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerFactionTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskcount = 1;
  if (has_taskcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskcount(), target);
  }
  
  // optional uint32 taskid = 2;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->taskid(), target);
  }
  
  // repeated .PBPlayerFactionTaskItem taskitem = 3;
  for (int i = 0; i < this->taskitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->taskitem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerFactionTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskcount = 1;
    if (has_taskcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskcount());
    }
    
    // optional uint32 taskid = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }
    
  }
  // repeated .PBPlayerFactionTaskItem taskitem = 3;
  total_size += 1 * this->taskitem_size();
  for (int i = 0; i < this->taskitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskitem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerFactionTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerFactionTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerFactionTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerFactionTask::MergeFrom(const PBPlayerFactionTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskitem_.MergeFrom(from.taskitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskcount()) {
      set_taskcount(from.taskcount());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerFactionTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerFactionTask::CopyFrom(const PBPlayerFactionTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerFactionTask::IsInitialized() const {
  
  return true;
}

void PBPlayerFactionTask::Swap(PBPlayerFactionTask* other) {
  if (other != this) {
    std::swap(taskcount_, other->taskcount_);
    std::swap(taskid_, other->taskid_);
    taskitem_.Swap(&other->taskitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerFactionTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerFactionTask_descriptor_;
  metadata.reflection = PBPlayerFactionTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerFaction::kSaveorderFieldNumber;
const int PBPlayerFaction::kLastleavetimeFieldNumber;
const int PBPlayerFaction::kSkillFieldNumber;
const int PBPlayerFaction::kDonatemoneyFieldNumber;
const int PBPlayerFaction::kTaskFieldNumber;
const int PBPlayerFaction::kDrinkwineFieldNumber;
#endif  // !_MSC_VER

PBPlayerFaction::PBPlayerFaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerFaction::InitAsDefaultInstance() {
  task_ = const_cast< ::PBPlayerFactionTask*>(&::PBPlayerFactionTask::default_instance());
  drinkwine_ = const_cast< ::PBPlayerDrinkWine*>(&::PBPlayerDrinkWine::default_instance());
}

PBPlayerFaction::PBPlayerFaction(const PBPlayerFaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerFaction::SharedCtor() {
  _cached_size_ = 0;
  saveorder_ = 0u;
  lastleavetime_ = 0u;
  task_ = NULL;
  drinkwine_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerFaction::~PBPlayerFaction() {
  SharedDtor();
}

void PBPlayerFaction::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
    delete drinkwine_;
  }
}

void PBPlayerFaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerFaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerFaction_descriptor_;
}

const PBPlayerFaction& PBPlayerFaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBPlayerFaction* PBPlayerFaction::default_instance_ = NULL;

PBPlayerFaction* PBPlayerFaction::New() const {
  return new PBPlayerFaction;
}

void PBPlayerFaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saveorder_ = 0u;
    lastleavetime_ = 0u;
    if (has_task()) {
      if (task_ != NULL) task_->::PBPlayerFactionTask::Clear();
    }
    if (has_drinkwine()) {
      if (drinkwine_ != NULL) drinkwine_->::PBPlayerDrinkWine::Clear();
    }
  }
  skill_.Clear();
  donatemoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerFaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 saveorder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saveorder_)));
          set_has_saveorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastleavetime;
        break;
      }
      
      // optional uint32 lastleavetime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastleavetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastleavetime_)));
          set_has_lastleavetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill;
        break;
      }
      
      // repeated .PBPlayerFactionSkill skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill;
        if (input->ExpectTag(34)) goto parse_donatemoney;
        break;
      }
      
      // repeated .PBPlayerFactionDonateMoney donatemoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_donatemoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_donatemoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_donatemoney;
        if (input->ExpectTag(42)) goto parse_task;
        break;
      }
      
      // optional .PBPlayerFactionTask task = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_drinkwine;
        break;
      }
      
      // optional .PBPlayerDrinkWine drinkwine = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drinkwine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drinkwine()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerFaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saveorder(), output);
  }
  
  // optional uint32 lastleavetime = 2;
  if (has_lastleavetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lastleavetime(), output);
  }
  
  // repeated .PBPlayerFactionSkill skill = 3;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill(i), output);
  }
  
  // repeated .PBPlayerFactionDonateMoney donatemoney = 4;
  for (int i = 0; i < this->donatemoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->donatemoney(i), output);
  }
  
  // optional .PBPlayerFactionTask task = 5;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->task(), output);
  }
  
  // optional .PBPlayerDrinkWine drinkwine = 7;
  if (has_drinkwine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->drinkwine(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerFaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 saveorder = 1;
  if (has_saveorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saveorder(), target);
  }
  
  // optional uint32 lastleavetime = 2;
  if (has_lastleavetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lastleavetime(), target);
  }
  
  // repeated .PBPlayerFactionSkill skill = 3;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill(i), target);
  }
  
  // repeated .PBPlayerFactionDonateMoney donatemoney = 4;
  for (int i = 0; i < this->donatemoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->donatemoney(i), target);
  }
  
  // optional .PBPlayerFactionTask task = 5;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->task(), target);
  }
  
  // optional .PBPlayerDrinkWine drinkwine = 7;
  if (has_drinkwine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->drinkwine(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerFaction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 saveorder = 1;
    if (has_saveorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saveorder());
    }
    
    // optional uint32 lastleavetime = 2;
    if (has_lastleavetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastleavetime());
    }
    
    // optional .PBPlayerFactionTask task = 5;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }
    
    // optional .PBPlayerDrinkWine drinkwine = 7;
    if (has_drinkwine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drinkwine());
    }
    
  }
  // repeated .PBPlayerFactionSkill skill = 3;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }
  
  // repeated .PBPlayerFactionDonateMoney donatemoney = 4;
  total_size += 1 * this->donatemoney_size();
  for (int i = 0; i < this->donatemoney_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->donatemoney(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerFaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerFaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerFaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerFaction::MergeFrom(const PBPlayerFaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  donatemoney_.MergeFrom(from.donatemoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saveorder()) {
      set_saveorder(from.saveorder());
    }
    if (from.has_lastleavetime()) {
      set_lastleavetime(from.lastleavetime());
    }
    if (from.has_task()) {
      mutable_task()->::PBPlayerFactionTask::MergeFrom(from.task());
    }
    if (from.has_drinkwine()) {
      mutable_drinkwine()->::PBPlayerDrinkWine::MergeFrom(from.drinkwine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerFaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerFaction::CopyFrom(const PBPlayerFaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerFaction::IsInitialized() const {
  
  return true;
}

void PBPlayerFaction::Swap(PBPlayerFaction* other) {
  if (other != this) {
    std::swap(saveorder_, other->saveorder_);
    std::swap(lastleavetime_, other->lastleavetime_);
    skill_.Swap(&other->skill_);
    donatemoney_.Swap(&other->donatemoney_);
    std::swap(task_, other->task_);
    std::swap(drinkwine_, other->drinkwine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerFaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerFaction_descriptor_;
  metadata.reflection = PBPlayerFaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionOfflineRemove::kLastleavetimeFieldNumber;
#endif  // !_MSC_VER

PBFactionOfflineRemove::PBFactionOfflineRemove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionOfflineRemove::InitAsDefaultInstance() {
}

PBFactionOfflineRemove::PBFactionOfflineRemove(const PBFactionOfflineRemove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionOfflineRemove::SharedCtor() {
  _cached_size_ = 0;
  lastleavetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionOfflineRemove::~PBFactionOfflineRemove() {
  SharedDtor();
}

void PBFactionOfflineRemove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFactionOfflineRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionOfflineRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionOfflineRemove_descriptor_;
}

const PBFactionOfflineRemove& PBFactionOfflineRemove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionOfflineRemove* PBFactionOfflineRemove::default_instance_ = NULL;

PBFactionOfflineRemove* PBFactionOfflineRemove::New() const {
  return new PBFactionOfflineRemove;
}

void PBFactionOfflineRemove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lastleavetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionOfflineRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lastleavetime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastleavetime_)));
          set_has_lastleavetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionOfflineRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lastleavetime = 1;
  if (has_lastleavetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lastleavetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionOfflineRemove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lastleavetime = 1;
  if (has_lastleavetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lastleavetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionOfflineRemove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lastleavetime = 1;
    if (has_lastleavetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastleavetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionOfflineRemove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionOfflineRemove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionOfflineRemove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionOfflineRemove::MergeFrom(const PBFactionOfflineRemove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lastleavetime()) {
      set_lastleavetime(from.lastleavetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionOfflineRemove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionOfflineRemove::CopyFrom(const PBFactionOfflineRemove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionOfflineRemove::IsInitialized() const {
  
  return true;
}

void PBFactionOfflineRemove::Swap(PBFactionOfflineRemove* other) {
  if (other != this) {
    std::swap(lastleavetime_, other->lastleavetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionOfflineRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionOfflineRemove_descriptor_;
  metadata.reflection = PBFactionOfflineRemove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionEvent::kTimeFieldNumber;
const int PBFactionEvent::kTypeFieldNumber;
const int PBFactionEvent::kLevelFieldNumber;
const int PBFactionEvent::kMemberFieldNumber;
const int PBFactionEvent::kStoneFieldNumber;
const int PBFactionEvent::kSliverFieldNumber;
const int PBFactionEvent::kExperienceFieldNumber;
const int PBFactionEvent::kItemFieldNumber;
const int PBFactionEvent::kMoneyFieldNumber;
#endif  // !_MSC_VER

PBFactionEvent::PBFactionEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionEvent::InitAsDefaultInstance() {
}

PBFactionEvent::PBFactionEvent(const PBFactionEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionEvent::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  type_ = 0u;
  level_ = GOOGLE_ULONGLONG(0);
  stone_ = GOOGLE_ULONGLONG(0);
  sliver_ = GOOGLE_ULONGLONG(0);
  experience_ = GOOGLE_ULONGLONG(0);
  money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionEvent::~PBFactionEvent() {
  SharedDtor();
}

void PBFactionEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFactionEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionEvent_descriptor_;
}

const PBFactionEvent& PBFactionEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionEvent* PBFactionEvent::default_instance_ = NULL;

PBFactionEvent* PBFactionEvent::New() const {
  return new PBFactionEvent;
}

void PBFactionEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    type_ = 0u;
    level_ = GOOGLE_ULONGLONG(0);
    stone_ = GOOGLE_ULONGLONG(0);
    sliver_ = GOOGLE_ULONGLONG(0);
    experience_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    money_ = GOOGLE_ULONGLONG(0);
  }
  member_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional uint64 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_member;
        break;
      }
      
      // repeated .PBFactionMember member = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_member;
        if (input->ExpectTag(40)) goto parse_stone;
        break;
      }
      
      // optional uint64 stone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stone_)));
          set_has_stone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sliver;
        break;
      }
      
      // optional uint64 sliver = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_experience;
        break;
      }
      
      // optional uint64 experience = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_item;
        break;
      }
      
      // repeated .PBItem item = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_item;
        if (input->ExpectTag(72)) goto parse_money;
        break;
      }
      
      // optional uint64 money = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint64 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->level(), output);
  }
  
  // repeated .PBFactionMember member = 4;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->member(i), output);
  }
  
  // optional uint64 stone = 5;
  if (has_stone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->stone(), output);
  }
  
  // optional uint64 sliver = 6;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sliver(), output);
  }
  
  // optional uint64 experience = 7;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->experience(), output);
  }
  
  // repeated .PBItem item = 8;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->item(i), output);
  }
  
  // optional uint64 money = 9;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint64 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->level(), target);
  }
  
  // repeated .PBFactionMember member = 4;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->member(i), target);
  }
  
  // optional uint64 stone = 5;
  if (has_stone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->stone(), target);
  }
  
  // optional uint64 sliver = 6;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sliver(), target);
  }
  
  // optional uint64 experience = 7;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->experience(), target);
  }
  
  // repeated .PBItem item = 8;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->item(i), target);
  }
  
  // optional uint64 money = 9;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint64 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->level());
    }
    
    // optional uint64 stone = 5;
    if (has_stone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stone());
    }
    
    // optional uint64 sliver = 6;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sliver());
    }
    
    // optional uint64 experience = 7;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->experience());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 money = 9;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }
    
  }
  // repeated .PBFactionMember member = 4;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }
  
  // repeated .PBItem item = 8;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionEvent::MergeFrom(const PBFactionEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_stone()) {
      set_stone(from.stone());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionEvent::CopyFrom(const PBFactionEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionEvent::IsInitialized() const {
  
  return true;
}

void PBFactionEvent::Swap(PBFactionEvent* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    member_.Swap(&other->member_);
    std::swap(stone_, other->stone_);
    std::swap(sliver_, other->sliver_);
    std::swap(experience_, other->experience_);
    item_.Swap(&other->item_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionEvent_descriptor_;
  metadata.reflection = PBFactionEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionEventAll::kMemberFieldNumber;
const int PBFactionEventAll::kExperienceFieldNumber;
const int PBFactionEventAll::kDepotFieldNumber;
#endif  // !_MSC_VER

PBFactionEventAll::PBFactionEventAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionEventAll::InitAsDefaultInstance() {
}

PBFactionEventAll::PBFactionEventAll(const PBFactionEventAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionEventAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionEventAll::~PBFactionEventAll() {
  SharedDtor();
}

void PBFactionEventAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFactionEventAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionEventAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionEventAll_descriptor_;
}

const PBFactionEventAll& PBFactionEventAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionEventAll* PBFactionEventAll::default_instance_ = NULL;

PBFactionEventAll* PBFactionEventAll::New() const {
  return new PBFactionEventAll;
}

void PBFactionEventAll::Clear() {
  member_.Clear();
  experience_.Clear();
  depot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionEventAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFactionEvent member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_member;
        if (input->ExpectTag(18)) goto parse_experience;
        break;
      }
      
      // repeated .PBFactionEvent experience = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_experience:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_experience()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_experience;
        if (input->ExpectTag(26)) goto parse_depot;
        break;
      }
      
      // repeated .PBFactionEvent depot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_depot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_depot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_depot;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionEventAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFactionEvent member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(i), output);
  }
  
  // repeated .PBFactionEvent experience = 2;
  for (int i = 0; i < this->experience_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->experience(i), output);
  }
  
  // repeated .PBFactionEvent depot = 3;
  for (int i = 0; i < this->depot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->depot(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionEventAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFactionEvent member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(i), target);
  }
  
  // repeated .PBFactionEvent experience = 2;
  for (int i = 0; i < this->experience_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->experience(i), target);
  }
  
  // repeated .PBFactionEvent depot = 3;
  for (int i = 0; i < this->depot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->depot(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionEventAll::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFactionEvent member = 1;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }
  
  // repeated .PBFactionEvent experience = 2;
  total_size += 1 * this->experience_size();
  for (int i = 0; i < this->experience_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->experience(i));
  }
  
  // repeated .PBFactionEvent depot = 3;
  total_size += 1 * this->depot_size();
  for (int i = 0; i < this->depot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->depot(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionEventAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionEventAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionEventAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionEventAll::MergeFrom(const PBFactionEventAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  experience_.MergeFrom(from.experience_);
  depot_.MergeFrom(from.depot_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionEventAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionEventAll::CopyFrom(const PBFactionEventAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionEventAll::IsInitialized() const {
  
  return true;
}

void PBFactionEventAll::Swap(PBFactionEventAll* other) {
  if (other != this) {
    member_.Swap(&other->member_);
    experience_.Swap(&other->experience_);
    depot_.Swap(&other->depot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionEventAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionEventAll_descriptor_;
  metadata.reflection = PBFactionEventAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionCreate::kNameFieldNumber;
const int PBC2GFactionCreate::kFactionidFieldNumber;
const int PBC2GFactionCreate::kWorldidFieldNumber;
const int PBC2GFactionCreate::kBannerFieldNumber;
const int PBC2GFactionCreate::kDeclarationFieldNumber;
const int PBC2GFactionCreate::kPlayeridFieldNumber;
const int PBC2GFactionCreate::kCorpsFieldNumber;
const int PBC2GFactionCreate::kCreattimeFieldNumber;
const int PBC2GFactionCreate::kConsumeFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionCreate::PBC2GFactionCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionCreate::InitAsDefaultInstance() {
  consume_ = const_cast< ::PBMoneyConsume*>(&::PBMoneyConsume::default_instance());
}

PBC2GFactionCreate::PBC2GFactionCreate(const PBC2GFactionCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionCreate::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  factionid_ = 0u;
  worldid_ = 0u;
  banner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0u;
  corps_ = 0u;
  creattime_ = 0u;
  consume_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionCreate::~PBC2GFactionCreate() {
  SharedDtor();
}

void PBC2GFactionCreate::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (banner_ != &::google::protobuf::internal::kEmptyString) {
    delete banner_;
  }
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (this != default_instance_) {
    delete consume_;
  }
}

void PBC2GFactionCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionCreate_descriptor_;
}

const PBC2GFactionCreate& PBC2GFactionCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GFactionCreate* PBC2GFactionCreate::default_instance_ = NULL;

PBC2GFactionCreate* PBC2GFactionCreate::New() const {
  return new PBC2GFactionCreate;
}

void PBC2GFactionCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    factionid_ = 0u;
    worldid_ = 0u;
    if (has_banner()) {
      if (banner_ != &::google::protobuf::internal::kEmptyString) {
        banner_->clear();
      }
    }
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
    playerid_ = 0u;
    corps_ = 0u;
    creattime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_consume()) {
      if (consume_ != NULL) consume_->::PBMoneyConsume::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_factionid;
        break;
      }
      
      // optional uint32 factionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_worldid;
        break;
      }
      
      // optional uint32 worldid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_banner;
        break;
      }
      
      // optional string banner = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->banner().data(), this->banner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_declaration;
        break;
      }
      
      // optional string declaration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_declaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_corps;
        break;
      }
      
      // optional uint32 corps = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_)));
          set_has_corps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_creattime;
        break;
      }
      
      // optional uint32 creattime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creattime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creattime_)));
          set_has_creattime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_consume;
        break;
      }
      
      // optional .PBMoneyConsume consume = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional uint32 factionid = 2;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->factionid(), output);
  }
  
  // optional uint32 worldid = 3;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->worldid(), output);
  }
  
  // optional string banner = 4;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banner().data(), this->banner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->banner(), output);
  }
  
  // optional string declaration = 5;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->declaration(), output);
  }
  
  // optional uint32 playerid = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playerid(), output);
  }
  
  // optional uint32 corps = 7;
  if (has_corps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->corps(), output);
  }
  
  // optional uint32 creattime = 8;
  if (has_creattime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->creattime(), output);
  }
  
  // optional .PBMoneyConsume consume = 9;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->consume(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional uint32 factionid = 2;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->factionid(), target);
  }
  
  // optional uint32 worldid = 3;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->worldid(), target);
  }
  
  // optional string banner = 4;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banner().data(), this->banner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->banner(), target);
  }
  
  // optional string declaration = 5;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->declaration(), target);
  }
  
  // optional uint32 playerid = 6;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->playerid(), target);
  }
  
  // optional uint32 corps = 7;
  if (has_corps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->corps(), target);
  }
  
  // optional uint32 creattime = 8;
  if (has_creattime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->creattime(), target);
  }
  
  // optional .PBMoneyConsume consume = 9;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->consume(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionCreate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 factionid = 2;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
    // optional uint32 worldid = 3;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldid());
    }
    
    // optional string banner = 4;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banner());
    }
    
    // optional string declaration = 5;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }
    
    // optional uint32 playerid = 6;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 corps = 7;
    if (has_corps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps());
    }
    
    // optional uint32 creattime = 8;
    if (has_creattime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creattime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBMoneyConsume consume = 9;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->consume());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionCreate::MergeFrom(const PBC2GFactionCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_banner()) {
      set_banner(from.banner());
    }
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_corps()) {
      set_corps(from.corps());
    }
    if (from.has_creattime()) {
      set_creattime(from.creattime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_consume()) {
      mutable_consume()->::PBMoneyConsume::MergeFrom(from.consume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionCreate::CopyFrom(const PBC2GFactionCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionCreate::IsInitialized() const {
  
  return true;
}

void PBC2GFactionCreate::Swap(PBC2GFactionCreate* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(factionid_, other->factionid_);
    std::swap(worldid_, other->worldid_);
    std::swap(banner_, other->banner_);
    std::swap(declaration_, other->declaration_);
    std::swap(playerid_, other->playerid_);
    std::swap(corps_, other->corps_);
    std::swap(creattime_, other->creattime_);
    std::swap(consume_, other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionCreate_descriptor_;
  metadata.reflection = PBC2GFactionCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionApply::kFactionidFieldNumber;
const int PBC2GFactionApply::kWorldidFieldNumber;
const int PBC2GFactionApply::kIsapplyFieldNumber;
const int PBC2GFactionApply::kBaseFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionApply::PBC2GFactionApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionApply::InitAsDefaultInstance() {
  base_ = const_cast< ::PBFactionMemberBase*>(&::PBFactionMemberBase::default_instance());
}

PBC2GFactionApply::PBC2GFactionApply(const PBC2GFactionApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionApply::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  worldid_ = 0u;
  isapply_ = false;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionApply::~PBC2GFactionApply() {
  SharedDtor();
}

void PBC2GFactionApply::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void PBC2GFactionApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionApply_descriptor_;
}

const PBC2GFactionApply& PBC2GFactionApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GFactionApply* PBC2GFactionApply::default_instance_ = NULL;

PBC2GFactionApply* PBC2GFactionApply::New() const {
  return new PBC2GFactionApply;
}

void PBC2GFactionApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    worldid_ = 0u;
    isapply_ = false;
    if (has_base()) {
      if (base_ != NULL) base_->::PBFactionMemberBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_worldid;
        break;
      }
      
      // optional uint32 worldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isapply;
        break;
      }
      
      // optional bool isapply = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isapply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isapply_)));
          set_has_isapply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_base;
        break;
      }
      
      // optional .PBFactionMemberBase base = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }
  
  // optional uint32 worldid = 2;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->worldid(), output);
  }
  
  // optional bool isapply = 3;
  if (has_isapply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isapply(), output);
  }
  
  // optional .PBFactionMemberBase base = 4;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->base(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }
  
  // optional uint32 worldid = 2;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->worldid(), target);
  }
  
  // optional bool isapply = 3;
  if (has_isapply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isapply(), target);
  }
  
  // optional .PBFactionMemberBase base = 4;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->base(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionApply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
    // optional uint32 worldid = 2;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldid());
    }
    
    // optional bool isapply = 3;
    if (has_isapply()) {
      total_size += 1 + 1;
    }
    
    // optional .PBFactionMemberBase base = 4;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionApply::MergeFrom(const PBC2GFactionApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_isapply()) {
      set_isapply(from.isapply());
    }
    if (from.has_base()) {
      mutable_base()->::PBFactionMemberBase::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionApply::CopyFrom(const PBC2GFactionApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionApply::IsInitialized() const {
  
  return true;
}

void PBC2GFactionApply::Swap(PBC2GFactionApply* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(worldid_, other->worldid_);
    std::swap(isapply_, other->isapply_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionApply_descriptor_;
  metadata.reflection = PBC2GFactionApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionList::kListFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionList::PBG2CFactionList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionList::InitAsDefaultInstance() {
}

PBG2CFactionList::PBG2CFactionList(const PBG2CFactionList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionList::~PBG2CFactionList() {
  SharedDtor();
}

void PBG2CFactionList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFactionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionList_descriptor_;
}

const PBG2CFactionList& PBG2CFactionList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionList* PBG2CFactionList::default_instance_ = NULL;

PBG2CFactionList* PBG2CFactionList::New() const {
  return new PBG2CFactionList;
}

void PBG2CFactionList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFactionDisplay list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFactionDisplay list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFactionDisplay list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFactionDisplay list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionList::MergeFrom(const PBG2CFactionList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionList::CopyFrom(const PBG2CFactionList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionList::IsInitialized() const {
  
  return true;
}

void PBG2CFactionList::Swap(PBG2CFactionList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionList_descriptor_;
  metadata.reflection = PBG2CFactionList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionEdit::kDeclarationFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionEdit::PBC2GFactionEdit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionEdit::InitAsDefaultInstance() {
}

PBC2GFactionEdit::PBC2GFactionEdit(const PBC2GFactionEdit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionEdit::SharedCtor() {
  _cached_size_ = 0;
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionEdit::~PBC2GFactionEdit() {
  SharedDtor();
}

void PBC2GFactionEdit::SharedDtor() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (this != default_instance_) {
  }
}

void PBC2GFactionEdit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionEdit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionEdit_descriptor_;
}

const PBC2GFactionEdit& PBC2GFactionEdit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GFactionEdit* PBC2GFactionEdit::default_instance_ = NULL;

PBC2GFactionEdit* PBC2GFactionEdit::New() const {
  return new PBC2GFactionEdit;
}

void PBC2GFactionEdit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionEdit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string declaration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionEdit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string declaration = 1;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->declaration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionEdit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string declaration = 1;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->declaration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionEdit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string declaration = 1;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionEdit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionEdit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionEdit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionEdit::MergeFrom(const PBC2GFactionEdit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionEdit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionEdit::CopyFrom(const PBC2GFactionEdit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionEdit::IsInitialized() const {
  
  return true;
}

void PBC2GFactionEdit::Swap(PBC2GFactionEdit* other) {
  if (other != this) {
    std::swap(declaration_, other->declaration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionEdit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionEdit_descriptor_;
  metadata.reflection = PBC2GFactionEdit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionApplyList::kApplysFieldNumber;
const int PBG2CFactionApplyList::kAutoapplyFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionApplyList::PBG2CFactionApplyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionApplyList::InitAsDefaultInstance() {
}

PBG2CFactionApplyList::PBG2CFactionApplyList(const PBG2CFactionApplyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionApplyList::SharedCtor() {
  _cached_size_ = 0;
  autoapply_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionApplyList::~PBG2CFactionApplyList() {
  SharedDtor();
}

void PBG2CFactionApplyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFactionApplyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionApplyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionApplyList_descriptor_;
}

const PBG2CFactionApplyList& PBG2CFactionApplyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionApplyList* PBG2CFactionApplyList::default_instance_ = NULL;

PBG2CFactionApplyList* PBG2CFactionApplyList::New() const {
  return new PBG2CFactionApplyList;
}

void PBG2CFactionApplyList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    autoapply_ = false;
  }
  applys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionApplyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFactionApplyData applys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_applys;
        if (input->ExpectTag(16)) goto parse_autoapply;
        break;
      }
      
      // optional bool autoapply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoapply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoapply_)));
          set_has_autoapply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionApplyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFactionApplyData applys = 1;
  for (int i = 0; i < this->applys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applys(i), output);
  }
  
  // optional bool autoapply = 2;
  if (has_autoapply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->autoapply(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionApplyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFactionApplyData applys = 1;
  for (int i = 0; i < this->applys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applys(i), target);
  }
  
  // optional bool autoapply = 2;
  if (has_autoapply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->autoapply(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionApplyList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool autoapply = 2;
    if (has_autoapply()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .PBFactionApplyData applys = 1;
  total_size += 1 * this->applys_size();
  for (int i = 0; i < this->applys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applys(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionApplyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionApplyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionApplyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionApplyList::MergeFrom(const PBG2CFactionApplyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  applys_.MergeFrom(from.applys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_autoapply()) {
      set_autoapply(from.autoapply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionApplyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionApplyList::CopyFrom(const PBG2CFactionApplyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionApplyList::IsInitialized() const {
  
  return true;
}

void PBG2CFactionApplyList::Swap(PBG2CFactionApplyList* other) {
  if (other != this) {
    applys_.Swap(&other->applys_);
    std::swap(autoapply_, other->autoapply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionApplyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionApplyList_descriptor_;
  metadata.reflection = PBG2CFactionApplyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionMemberList::kMembersFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionMemberList::PBG2CFactionMemberList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionMemberList::InitAsDefaultInstance() {
}

PBG2CFactionMemberList::PBG2CFactionMemberList(const PBG2CFactionMemberList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionMemberList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionMemberList::~PBG2CFactionMemberList() {
  SharedDtor();
}

void PBG2CFactionMemberList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFactionMemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionMemberList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionMemberList_descriptor_;
}

const PBG2CFactionMemberList& PBG2CFactionMemberList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionMemberList* PBG2CFactionMemberList::default_instance_ = NULL;

PBG2CFactionMemberList* PBG2CFactionMemberList::New() const {
  return new PBG2CFactionMemberList;
}

void PBG2CFactionMemberList::Clear() {
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFactionMember members = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFactionMember members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionMemberList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFactionMember members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->members(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionMemberList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFactionMember members = 1;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionMemberList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionMemberList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionMemberList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionMemberList::MergeFrom(const PBG2CFactionMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionMemberList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionMemberList::CopyFrom(const PBG2CFactionMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionMemberList::IsInitialized() const {
  
  return true;
}

void PBG2CFactionMemberList::Swap(PBG2CFactionMemberList* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionMemberList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionMemberList_descriptor_;
  metadata.reflection = PBG2CFactionMemberList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionRequire::kLevelFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionRequire::PBC2GFactionRequire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionRequire::InitAsDefaultInstance() {
}

PBC2GFactionRequire::PBC2GFactionRequire(const PBC2GFactionRequire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionRequire::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionRequire::~PBC2GFactionRequire() {
  SharedDtor();
}

void PBC2GFactionRequire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFactionRequire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionRequire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionRequire_descriptor_;
}

const PBC2GFactionRequire& PBC2GFactionRequire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GFactionRequire* PBC2GFactionRequire::default_instance_ = NULL;

PBC2GFactionRequire* PBC2GFactionRequire::New() const {
  return new PBC2GFactionRequire;
}

void PBC2GFactionRequire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionRequire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionRequire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionRequire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionRequire::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionRequire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionRequire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionRequire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionRequire::MergeFrom(const PBC2GFactionRequire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionRequire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionRequire::CopyFrom(const PBC2GFactionRequire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionRequire::IsInitialized() const {
  
  return true;
}

void PBC2GFactionRequire::Swap(PBC2GFactionRequire* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionRequire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionRequire_descriptor_;
  metadata.reflection = PBC2GFactionRequire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionSyn::kDataFieldNumber;
const int PBG2CFactionSyn::kLeadernameFieldNumber;
const int PBG2CFactionSyn::kJobFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionSyn::PBG2CFactionSyn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionSyn::InitAsDefaultInstance() {
  data_ = const_cast< ::PBFactionDBData*>(&::PBFactionDBData::default_instance());
}

PBG2CFactionSyn::PBG2CFactionSyn(const PBG2CFactionSyn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionSyn::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionSyn::~PBG2CFactionSyn() {
  SharedDtor();
}

void PBG2CFactionSyn::SharedDtor() {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void PBG2CFactionSyn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionSyn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionSyn_descriptor_;
}

const PBG2CFactionSyn& PBG2CFactionSyn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionSyn* PBG2CFactionSyn::default_instance_ = NULL;

PBG2CFactionSyn* PBG2CFactionSyn::New() const {
  return new PBG2CFactionSyn;
}

void PBG2CFactionSyn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::PBFactionDBData::Clear();
    }
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::kEmptyString) {
        leadername_->clear();
      }
    }
    job_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionSyn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionDBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leadername;
        break;
      }
      
      // optional string leadername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leadername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }
      
      // optional uint32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionSyn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionDBData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }
  
  // optional string leadername = 2;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leadername(), output);
  }
  
  // optional uint32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionSyn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionDBData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }
  
  // optional string leadername = 2;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leadername(), target);
  }
  
  // optional uint32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->job(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionSyn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionDBData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
    // optional string leadername = 2;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }
    
    // optional uint32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionSyn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionSyn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionSyn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionSyn::MergeFrom(const PBG2CFactionSyn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::PBFactionDBData::MergeFrom(from.data());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionSyn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionSyn::CopyFrom(const PBG2CFactionSyn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionSyn::IsInitialized() const {
  
  return true;
}

void PBG2CFactionSyn::Swap(PBG2CFactionSyn* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(leadername_, other->leadername_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionSyn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionSyn_descriptor_;
  metadata.reflection = PBG2CFactionSyn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionApplying::kApplysFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionApplying::PBG2CFactionApplying()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionApplying::InitAsDefaultInstance() {
}

PBG2CFactionApplying::PBG2CFactionApplying(const PBG2CFactionApplying& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionApplying::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionApplying::~PBG2CFactionApplying() {
  SharedDtor();
}

void PBG2CFactionApplying::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFactionApplying::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionApplying::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionApplying_descriptor_;
}

const PBG2CFactionApplying& PBG2CFactionApplying::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionApplying* PBG2CFactionApplying::default_instance_ = NULL;

PBG2CFactionApplying* PBG2CFactionApplying::New() const {
  return new PBG2CFactionApplying;
}

void PBG2CFactionApplying::Clear() {
  applys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionApplying::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 applys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_applys())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_applys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_applys;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionApplying::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 applys = 1;
  for (int i = 0; i < this->applys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->applys(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionApplying::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 applys = 1;
  for (int i = 0; i < this->applys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->applys(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionApplying::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 applys = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->applys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->applys(i));
    }
    total_size += 1 * this->applys_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionApplying::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionApplying* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionApplying*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionApplying::MergeFrom(const PBG2CFactionApplying& from) {
  GOOGLE_CHECK_NE(&from, this);
  applys_.MergeFrom(from.applys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionApplying::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionApplying::CopyFrom(const PBG2CFactionApplying& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionApplying::IsInitialized() const {
  
  return true;
}

void PBG2CFactionApplying::Swap(PBG2CFactionApplying* other) {
  if (other != this) {
    applys_.Swap(&other->applys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionApplying::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionApplying_descriptor_;
  metadata.reflection = PBG2CFactionApplying_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CImpeachAck::kImpeachFieldNumber;
#endif  // !_MSC_VER

PBG2CImpeachAck::PBG2CImpeachAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CImpeachAck::InitAsDefaultInstance() {
  impeach_ = const_cast< ::PBFactionImpeach*>(&::PBFactionImpeach::default_instance());
}

PBG2CImpeachAck::PBG2CImpeachAck(const PBG2CImpeachAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CImpeachAck::SharedCtor() {
  _cached_size_ = 0;
  impeach_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CImpeachAck::~PBG2CImpeachAck() {
  SharedDtor();
}

void PBG2CImpeachAck::SharedDtor() {
  if (this != default_instance_) {
    delete impeach_;
  }
}

void PBG2CImpeachAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CImpeachAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CImpeachAck_descriptor_;
}

const PBG2CImpeachAck& PBG2CImpeachAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CImpeachAck* PBG2CImpeachAck::default_instance_ = NULL;

PBG2CImpeachAck* PBG2CImpeachAck::New() const {
  return new PBG2CImpeachAck;
}

void PBG2CImpeachAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_impeach()) {
      if (impeach_ != NULL) impeach_->::PBFactionImpeach::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CImpeachAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionImpeach impeach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impeach()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CImpeachAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionImpeach impeach = 1;
  if (has_impeach()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->impeach(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CImpeachAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionImpeach impeach = 1;
  if (has_impeach()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->impeach(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CImpeachAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionImpeach impeach = 1;
    if (has_impeach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->impeach());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CImpeachAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CImpeachAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CImpeachAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CImpeachAck::MergeFrom(const PBG2CImpeachAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_impeach()) {
      mutable_impeach()->::PBFactionImpeach::MergeFrom(from.impeach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CImpeachAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CImpeachAck::CopyFrom(const PBG2CImpeachAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CImpeachAck::IsInitialized() const {
  
  return true;
}

void PBG2CImpeachAck::Swap(PBG2CImpeachAck* other) {
  if (other != this) {
    std::swap(impeach_, other->impeach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CImpeachAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CImpeachAck_descriptor_;
  metadata.reflection = PBG2CImpeachAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionOpt::kFactionidFieldNumber;
const int PBC2GFactionOpt::kUparam1FieldNumber;
const int PBC2GFactionOpt::kUparam2FieldNumber;
#endif  // !_MSC_VER

PBC2GFactionOpt::PBC2GFactionOpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionOpt::InitAsDefaultInstance() {
}

PBC2GFactionOpt::PBC2GFactionOpt(const PBC2GFactionOpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionOpt::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  uparam1_ = 0u;
  uparam2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionOpt::~PBC2GFactionOpt() {
  SharedDtor();
}

void PBC2GFactionOpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFactionOpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionOpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionOpt_descriptor_;
}

const PBC2GFactionOpt& PBC2GFactionOpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GFactionOpt* PBC2GFactionOpt::default_instance_ = NULL;

PBC2GFactionOpt* PBC2GFactionOpt::New() const {
  return new PBC2GFactionOpt;
}

void PBC2GFactionOpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    uparam1_ = 0u;
    uparam2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionOpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uparam1;
        break;
      }
      
      // optional uint32 uparam1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uparam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uparam1_)));
          set_has_uparam1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uparam2;
        break;
      }
      
      // optional uint32 uparam2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uparam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uparam2_)));
          set_has_uparam2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionOpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }
  
  // optional uint32 uparam1 = 2;
  if (has_uparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uparam1(), output);
  }
  
  // optional uint32 uparam2 = 3;
  if (has_uparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uparam2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionOpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }
  
  // optional uint32 uparam1 = 2;
  if (has_uparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uparam1(), target);
  }
  
  // optional uint32 uparam2 = 3;
  if (has_uparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uparam2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionOpt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
    // optional uint32 uparam1 = 2;
    if (has_uparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uparam1());
    }
    
    // optional uint32 uparam2 = 3;
    if (has_uparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uparam2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionOpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionOpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionOpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionOpt::MergeFrom(const PBC2GFactionOpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_uparam1()) {
      set_uparam1(from.uparam1());
    }
    if (from.has_uparam2()) {
      set_uparam2(from.uparam2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionOpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionOpt::CopyFrom(const PBC2GFactionOpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionOpt::IsInitialized() const {
  
  return true;
}

void PBC2GFactionOpt::Swap(PBC2GFactionOpt* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(uparam1_, other->uparam1_);
    std::swap(uparam2_, other->uparam2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionOpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionOpt_descriptor_;
  metadata.reflection = PBC2GFactionOpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionOptFeedback::kFactionidFieldNumber;
const int PBG2CFactionOptFeedback::kOptFieldNumber;
const int PBG2CFactionOptFeedback::kUparam1FieldNumber;
const int PBG2CFactionOptFeedback::kUparam2FieldNumber;
const int PBG2CFactionOptFeedback::kSparam1FieldNumber;
#endif  // !_MSC_VER

PBG2CFactionOptFeedback::PBG2CFactionOptFeedback()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionOptFeedback::InitAsDefaultInstance() {
}

PBG2CFactionOptFeedback::PBG2CFactionOptFeedback(const PBG2CFactionOptFeedback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionOptFeedback::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  opt_ = 0u;
  uparam1_ = 0u;
  uparam2_ = 0u;
  sparam1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionOptFeedback::~PBG2CFactionOptFeedback() {
  SharedDtor();
}

void PBG2CFactionOptFeedback::SharedDtor() {
  if (sparam1_ != &::google::protobuf::internal::kEmptyString) {
    delete sparam1_;
  }
  if (this != default_instance_) {
  }
}

void PBG2CFactionOptFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionOptFeedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionOptFeedback_descriptor_;
}

const PBG2CFactionOptFeedback& PBG2CFactionOptFeedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionOptFeedback* PBG2CFactionOptFeedback::default_instance_ = NULL;

PBG2CFactionOptFeedback* PBG2CFactionOptFeedback::New() const {
  return new PBG2CFactionOptFeedback;
}

void PBG2CFactionOptFeedback::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    opt_ = 0u;
    uparam1_ = 0u;
    uparam2_ = 0u;
    if (has_sparam1()) {
      if (sparam1_ != &::google::protobuf::internal::kEmptyString) {
        sparam1_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionOptFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }
      
      // optional uint32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uparam1;
        break;
      }
      
      // optional uint32 uparam1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uparam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uparam1_)));
          set_has_uparam1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uparam2;
        break;
      }
      
      // optional uint32 uparam2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uparam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uparam2_)));
          set_has_uparam2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sparam1;
        break;
      }
      
      // optional string sparam1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sparam1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sparam1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sparam1().data(), this->sparam1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionOptFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }
  
  // optional uint32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opt(), output);
  }
  
  // optional uint32 uparam1 = 3;
  if (has_uparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uparam1(), output);
  }
  
  // optional uint32 uparam2 = 4;
  if (has_uparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uparam2(), output);
  }
  
  // optional string sparam1 = 5;
  if (has_sparam1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparam1().data(), this->sparam1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sparam1(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionOptFeedback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }
  
  // optional uint32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opt(), target);
  }
  
  // optional uint32 uparam1 = 3;
  if (has_uparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uparam1(), target);
  }
  
  // optional uint32 uparam2 = 4;
  if (has_uparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uparam2(), target);
  }
  
  // optional string sparam1 = 5;
  if (has_sparam1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparam1().data(), this->sparam1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sparam1(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionOptFeedback::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
    // optional uint32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt());
    }
    
    // optional uint32 uparam1 = 3;
    if (has_uparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uparam1());
    }
    
    // optional uint32 uparam2 = 4;
    if (has_uparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uparam2());
    }
    
    // optional string sparam1 = 5;
    if (has_sparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sparam1());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionOptFeedback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionOptFeedback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionOptFeedback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionOptFeedback::MergeFrom(const PBG2CFactionOptFeedback& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_uparam1()) {
      set_uparam1(from.uparam1());
    }
    if (from.has_uparam2()) {
      set_uparam2(from.uparam2());
    }
    if (from.has_sparam1()) {
      set_sparam1(from.sparam1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionOptFeedback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionOptFeedback::CopyFrom(const PBG2CFactionOptFeedback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionOptFeedback::IsInitialized() const {
  
  return true;
}

void PBG2CFactionOptFeedback::Swap(PBG2CFactionOptFeedback* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(opt_, other->opt_);
    std::swap(uparam1_, other->uparam1_);
    std::swap(uparam2_, other->uparam2_);
    std::swap(sparam1_, other->sparam1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionOptFeedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionOptFeedback_descriptor_;
  metadata.reflection = PBG2CFactionOptFeedback_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionOptResult::kFactionidFieldNumber;
const int PBG2CFactionOptResult::kOptFieldNumber;
const int PBG2CFactionOptResult::kUparam1FieldNumber;
const int PBG2CFactionOptResult::kUparam2FieldNumber;
const int PBG2CFactionOptResult::kSparam1FieldNumber;
#endif  // !_MSC_VER

PBG2CFactionOptResult::PBG2CFactionOptResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionOptResult::InitAsDefaultInstance() {
}

PBG2CFactionOptResult::PBG2CFactionOptResult(const PBG2CFactionOptResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionOptResult::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  opt_ = 0u;
  uparam1_ = 0u;
  uparam2_ = 0u;
  sparam1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionOptResult::~PBG2CFactionOptResult() {
  SharedDtor();
}

void PBG2CFactionOptResult::SharedDtor() {
  if (sparam1_ != &::google::protobuf::internal::kEmptyString) {
    delete sparam1_;
  }
  if (this != default_instance_) {
  }
}

void PBG2CFactionOptResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionOptResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionOptResult_descriptor_;
}

const PBG2CFactionOptResult& PBG2CFactionOptResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionOptResult* PBG2CFactionOptResult::default_instance_ = NULL;

PBG2CFactionOptResult* PBG2CFactionOptResult::New() const {
  return new PBG2CFactionOptResult;
}

void PBG2CFactionOptResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    opt_ = 0u;
    uparam1_ = 0u;
    uparam2_ = 0u;
    if (has_sparam1()) {
      if (sparam1_ != &::google::protobuf::internal::kEmptyString) {
        sparam1_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionOptResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }
      
      // optional uint32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uparam1;
        break;
      }
      
      // optional uint32 uparam1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uparam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uparam1_)));
          set_has_uparam1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uparam2;
        break;
      }
      
      // optional uint32 uparam2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uparam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uparam2_)));
          set_has_uparam2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sparam1;
        break;
      }
      
      // optional string sparam1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sparam1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sparam1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sparam1().data(), this->sparam1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionOptResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }
  
  // optional uint32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opt(), output);
  }
  
  // optional uint32 uparam1 = 3;
  if (has_uparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uparam1(), output);
  }
  
  // optional uint32 uparam2 = 4;
  if (has_uparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uparam2(), output);
  }
  
  // optional string sparam1 = 5;
  if (has_sparam1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparam1().data(), this->sparam1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sparam1(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionOptResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }
  
  // optional uint32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opt(), target);
  }
  
  // optional uint32 uparam1 = 3;
  if (has_uparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uparam1(), target);
  }
  
  // optional uint32 uparam2 = 4;
  if (has_uparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uparam2(), target);
  }
  
  // optional string sparam1 = 5;
  if (has_sparam1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparam1().data(), this->sparam1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sparam1(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionOptResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
    // optional uint32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt());
    }
    
    // optional uint32 uparam1 = 3;
    if (has_uparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uparam1());
    }
    
    // optional uint32 uparam2 = 4;
    if (has_uparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uparam2());
    }
    
    // optional string sparam1 = 5;
    if (has_sparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sparam1());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionOptResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionOptResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionOptResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionOptResult::MergeFrom(const PBG2CFactionOptResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_uparam1()) {
      set_uparam1(from.uparam1());
    }
    if (from.has_uparam2()) {
      set_uparam2(from.uparam2());
    }
    if (from.has_sparam1()) {
      set_sparam1(from.sparam1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionOptResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionOptResult::CopyFrom(const PBG2CFactionOptResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionOptResult::IsInitialized() const {
  
  return true;
}

void PBG2CFactionOptResult::Swap(PBG2CFactionOptResult* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(opt_, other->opt_);
    std::swap(uparam1_, other->uparam1_);
    std::swap(uparam2_, other->uparam2_);
    std::swap(sparam1_, other->sparam1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionOptResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionOptResult_descriptor_;
  metadata.reflection = PBG2CFactionOptResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCAGSetElite::kMemberidFieldNumber;
#endif  // !_MSC_VER

PBCAGSetElite::PBCAGSetElite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCAGSetElite::InitAsDefaultInstance() {
}

PBCAGSetElite::PBCAGSetElite(const PBCAGSetElite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCAGSetElite::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCAGSetElite::~PBCAGSetElite() {
  SharedDtor();
}

void PBCAGSetElite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCAGSetElite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCAGSetElite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCAGSetElite_descriptor_;
}

const PBCAGSetElite& PBCAGSetElite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBCAGSetElite* PBCAGSetElite::default_instance_ = NULL;

PBCAGSetElite* PBCAGSetElite::New() const {
  return new PBCAGSetElite;
}

void PBCAGSetElite::Clear() {
  memberid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCAGSetElite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 memberid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_memberid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_memberid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_memberid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCAGSetElite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 memberid = 1;
  for (int i = 0; i < this->memberid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->memberid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCAGSetElite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 memberid = 1;
  for (int i = 0; i < this->memberid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->memberid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCAGSetElite::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 memberid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->memberid(i));
    }
    total_size += 1 * this->memberid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCAGSetElite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCAGSetElite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCAGSetElite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCAGSetElite::MergeFrom(const PBCAGSetElite& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberid_.MergeFrom(from.memberid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCAGSetElite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCAGSetElite::CopyFrom(const PBCAGSetElite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCAGSetElite::IsInitialized() const {
  
  return true;
}

void PBCAGSetElite::Swap(PBCAGSetElite* other) {
  if (other != this) {
    memberid_.Swap(&other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCAGSetElite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCAGSetElite_descriptor_;
  metadata.reflection = PBCAGSetElite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCAGSetBeauty::kMemberidFieldNumber;
#endif  // !_MSC_VER

PBCAGSetBeauty::PBCAGSetBeauty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCAGSetBeauty::InitAsDefaultInstance() {
}

PBCAGSetBeauty::PBCAGSetBeauty(const PBCAGSetBeauty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCAGSetBeauty::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCAGSetBeauty::~PBCAGSetBeauty() {
  SharedDtor();
}

void PBCAGSetBeauty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCAGSetBeauty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCAGSetBeauty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCAGSetBeauty_descriptor_;
}

const PBCAGSetBeauty& PBCAGSetBeauty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBCAGSetBeauty* PBCAGSetBeauty::default_instance_ = NULL;

PBCAGSetBeauty* PBCAGSetBeauty::New() const {
  return new PBCAGSetBeauty;
}

void PBCAGSetBeauty::Clear() {
  memberid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCAGSetBeauty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 memberid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_memberid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_memberid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_memberid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCAGSetBeauty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 memberid = 1;
  for (int i = 0; i < this->memberid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->memberid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCAGSetBeauty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 memberid = 1;
  for (int i = 0; i < this->memberid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->memberid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCAGSetBeauty::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 memberid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->memberid(i));
    }
    total_size += 1 * this->memberid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCAGSetBeauty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCAGSetBeauty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCAGSetBeauty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCAGSetBeauty::MergeFrom(const PBCAGSetBeauty& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberid_.MergeFrom(from.memberid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCAGSetBeauty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCAGSetBeauty::CopyFrom(const PBCAGSetBeauty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCAGSetBeauty::IsInitialized() const {
  
  return true;
}

void PBCAGSetBeauty::Swap(PBCAGSetBeauty* other) {
  if (other != this) {
    memberid_.Swap(&other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCAGSetBeauty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCAGSetBeauty_descriptor_;
  metadata.reflection = PBCAGSetBeauty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCAGSetPrivilege::kJobidFieldNumber;
const int PBCAGSetPrivilege::kPrivilegeidFieldNumber;
#endif  // !_MSC_VER

PBCAGSetPrivilege::PBCAGSetPrivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCAGSetPrivilege::InitAsDefaultInstance() {
}

PBCAGSetPrivilege::PBCAGSetPrivilege(const PBCAGSetPrivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCAGSetPrivilege::SharedCtor() {
  _cached_size_ = 0;
  jobid_ = 0u;
  privilegeid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCAGSetPrivilege::~PBCAGSetPrivilege() {
  SharedDtor();
}

void PBCAGSetPrivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCAGSetPrivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCAGSetPrivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCAGSetPrivilege_descriptor_;
}

const PBCAGSetPrivilege& PBCAGSetPrivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBCAGSetPrivilege* PBCAGSetPrivilege::default_instance_ = NULL;

PBCAGSetPrivilege* PBCAGSetPrivilege::New() const {
  return new PBCAGSetPrivilege;
}

void PBCAGSetPrivilege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jobid_ = 0u;
    privilegeid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCAGSetPrivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 jobid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jobid_)));
          set_has_jobid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_privilegeid;
        break;
      }
      
      // optional uint64 privilegeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privilegeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &privilegeid_)));
          set_has_privilegeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCAGSetPrivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 jobid = 1;
  if (has_jobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->jobid(), output);
  }
  
  // optional uint64 privilegeid = 2;
  if (has_privilegeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->privilegeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCAGSetPrivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 jobid = 1;
  if (has_jobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->jobid(), target);
  }
  
  // optional uint64 privilegeid = 2;
  if (has_privilegeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->privilegeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCAGSetPrivilege::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 jobid = 1;
    if (has_jobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jobid());
    }
    
    // optional uint64 privilegeid = 2;
    if (has_privilegeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->privilegeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCAGSetPrivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCAGSetPrivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCAGSetPrivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCAGSetPrivilege::MergeFrom(const PBCAGSetPrivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jobid()) {
      set_jobid(from.jobid());
    }
    if (from.has_privilegeid()) {
      set_privilegeid(from.privilegeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCAGSetPrivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCAGSetPrivilege::CopyFrom(const PBCAGSetPrivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCAGSetPrivilege::IsInitialized() const {
  
  return true;
}

void PBCAGSetPrivilege::Swap(PBCAGSetPrivilege* other) {
  if (other != this) {
    std::swap(jobid_, other->jobid_);
    std::swap(privilegeid_, other->privilegeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCAGSetPrivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCAGSetPrivilege_descriptor_;
  metadata.reflection = PBCAGSetPrivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionBeInviteJoin::kDisplayFieldNumber;
const int PBG2CFactionBeInviteJoin::kInviteridFieldNumber;
const int PBG2CFactionBeInviteJoin::kInviternameFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionBeInviteJoin::PBG2CFactionBeInviteJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionBeInviteJoin::InitAsDefaultInstance() {
  display_ = const_cast< ::PBFactionDisplay*>(&::PBFactionDisplay::default_instance());
}

PBG2CFactionBeInviteJoin::PBG2CFactionBeInviteJoin(const PBG2CFactionBeInviteJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionBeInviteJoin::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  inviterid_ = 0u;
  invitername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionBeInviteJoin::~PBG2CFactionBeInviteJoin() {
  SharedDtor();
}

void PBG2CFactionBeInviteJoin::SharedDtor() {
  if (invitername_ != &::google::protobuf::internal::kEmptyString) {
    delete invitername_;
  }
  if (this != default_instance_) {
    delete display_;
  }
}

void PBG2CFactionBeInviteJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionBeInviteJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionBeInviteJoin_descriptor_;
}

const PBG2CFactionBeInviteJoin& PBG2CFactionBeInviteJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionBeInviteJoin* PBG2CFactionBeInviteJoin::default_instance_ = NULL;

PBG2CFactionBeInviteJoin* PBG2CFactionBeInviteJoin::New() const {
  return new PBG2CFactionBeInviteJoin;
}

void PBG2CFactionBeInviteJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBFactionDisplay::Clear();
    }
    inviterid_ = 0u;
    if (has_invitername()) {
      if (invitername_ != &::google::protobuf::internal::kEmptyString) {
        invitername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionBeInviteJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inviterid;
        break;
      }
      
      // optional uint32 inviterid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviterid_)));
          set_has_inviterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_invitername;
        break;
      }
      
      // optional string invitername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invitername().data(), this->invitername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionBeInviteJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 inviterid = 2;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inviterid(), output);
  }
  
  // optional string invitername = 3;
  if (has_invitername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitername().data(), this->invitername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->invitername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionBeInviteJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 inviterid = 2;
  if (has_inviterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inviterid(), target);
  }
  
  // optional string invitername = 3;
  if (has_invitername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitername().data(), this->invitername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->invitername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionBeInviteJoin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 inviterid = 2;
    if (has_inviterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviterid());
    }
    
    // optional string invitername = 3;
    if (has_invitername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionBeInviteJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionBeInviteJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionBeInviteJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionBeInviteJoin::MergeFrom(const PBG2CFactionBeInviteJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBFactionDisplay::MergeFrom(from.display());
    }
    if (from.has_inviterid()) {
      set_inviterid(from.inviterid());
    }
    if (from.has_invitername()) {
      set_invitername(from.invitername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionBeInviteJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionBeInviteJoin::CopyFrom(const PBG2CFactionBeInviteJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionBeInviteJoin::IsInitialized() const {
  
  return true;
}

void PBG2CFactionBeInviteJoin::Swap(PBG2CFactionBeInviteJoin* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(inviterid_, other->inviterid_);
    std::swap(invitername_, other->invitername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionBeInviteJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionBeInviteJoin_descriptor_;
  metadata.reflection = PBG2CFactionBeInviteJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionInviteJoinResult::kPlayeridFieldNumber;
const int PBG2CFactionInviteJoinResult::kPlayernameFieldNumber;
const int PBG2CFactionInviteJoinResult::kIsagreeFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionInviteJoinResult::PBG2CFactionInviteJoinResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionInviteJoinResult::InitAsDefaultInstance() {
}

PBG2CFactionInviteJoinResult::PBG2CFactionInviteJoinResult(const PBG2CFactionInviteJoinResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionInviteJoinResult::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isagree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionInviteJoinResult::~PBG2CFactionInviteJoinResult() {
  SharedDtor();
}

void PBG2CFactionInviteJoinResult::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void PBG2CFactionInviteJoinResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionInviteJoinResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionInviteJoinResult_descriptor_;
}

const PBG2CFactionInviteJoinResult& PBG2CFactionInviteJoinResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionInviteJoinResult* PBG2CFactionInviteJoinResult::default_instance_ = NULL;

PBG2CFactionInviteJoinResult* PBG2CFactionInviteJoinResult::New() const {
  return new PBG2CFactionInviteJoinResult;
}

void PBG2CFactionInviteJoinResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    isagree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionInviteJoinResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }
      
      // optional string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isagree;
        break;
      }
      
      // optional bool isagree = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isagree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionInviteJoinResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }
  
  // optional bool isagree = 3;
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isagree(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionInviteJoinResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }
  
  // optional bool isagree = 3;
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isagree(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionInviteJoinResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // optional bool isagree = 3;
    if (has_isagree()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionInviteJoinResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionInviteJoinResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionInviteJoinResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionInviteJoinResult::MergeFrom(const PBG2CFactionInviteJoinResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionInviteJoinResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionInviteJoinResult::CopyFrom(const PBG2CFactionInviteJoinResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionInviteJoinResult::IsInitialized() const {
  
  return true;
}

void PBG2CFactionInviteJoinResult::Swap(PBG2CFactionInviteJoinResult* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(isagree_, other->isagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionInviteJoinResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionInviteJoinResult_descriptor_;
  metadata.reflection = PBG2CFactionInviteJoinResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionSelfSkillInfo::kSkillidFieldNumber;
const int FactionSelfSkillInfo::kSelflevelFieldNumber;
const int FactionSelfSkillInfo::kStudylevelFieldNumber;
#endif  // !_MSC_VER

FactionSelfSkillInfo::FactionSelfSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionSelfSkillInfo::InitAsDefaultInstance() {
}

FactionSelfSkillInfo::FactionSelfSkillInfo(const FactionSelfSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionSelfSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  selflevel_ = 0u;
  studylevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionSelfSkillInfo::~FactionSelfSkillInfo() {
  SharedDtor();
}

void FactionSelfSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionSelfSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionSelfSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionSelfSkillInfo_descriptor_;
}

const FactionSelfSkillInfo& FactionSelfSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

FactionSelfSkillInfo* FactionSelfSkillInfo::default_instance_ = NULL;

FactionSelfSkillInfo* FactionSelfSkillInfo::New() const {
  return new FactionSelfSkillInfo;
}

void FactionSelfSkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    selflevel_ = 0u;
    studylevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionSelfSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_selflevel;
        break;
      }
      
      // optional uint32 selflevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selflevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selflevel_)));
          set_has_selflevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_studylevel;
        break;
      }
      
      // optional uint32 studylevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_studylevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &studylevel_)));
          set_has_studylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionSelfSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 selflevel = 2;
  if (has_selflevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selflevel(), output);
  }
  
  // optional uint32 studylevel = 3;
  if (has_studylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->studylevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionSelfSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 selflevel = 2;
  if (has_selflevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selflevel(), target);
  }
  
  // optional uint32 studylevel = 3;
  if (has_studylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->studylevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionSelfSkillInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 selflevel = 2;
    if (has_selflevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selflevel());
    }
    
    // optional uint32 studylevel = 3;
    if (has_studylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->studylevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionSelfSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionSelfSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionSelfSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionSelfSkillInfo::MergeFrom(const FactionSelfSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_selflevel()) {
      set_selflevel(from.selflevel());
    }
    if (from.has_studylevel()) {
      set_studylevel(from.studylevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionSelfSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionSelfSkillInfo::CopyFrom(const FactionSelfSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionSelfSkillInfo::IsInitialized() const {
  
  return true;
}

void FactionSelfSkillInfo::Swap(FactionSelfSkillInfo* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(selflevel_, other->selflevel_);
    std::swap(studylevel_, other->studylevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionSelfSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionSelfSkillInfo_descriptor_;
  metadata.reflection = FactionSelfSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionSelfSkillList::kListFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionSelfSkillList::PBG2CFactionSelfSkillList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionSelfSkillList::InitAsDefaultInstance() {
}

PBG2CFactionSelfSkillList::PBG2CFactionSelfSkillList(const PBG2CFactionSelfSkillList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionSelfSkillList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionSelfSkillList::~PBG2CFactionSelfSkillList() {
  SharedDtor();
}

void PBG2CFactionSelfSkillList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFactionSelfSkillList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionSelfSkillList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionSelfSkillList_descriptor_;
}

const PBG2CFactionSelfSkillList& PBG2CFactionSelfSkillList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionSelfSkillList* PBG2CFactionSelfSkillList::default_instance_ = NULL;

PBG2CFactionSelfSkillList* PBG2CFactionSelfSkillList::New() const {
  return new PBG2CFactionSelfSkillList;
}

void PBG2CFactionSelfSkillList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionSelfSkillList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FactionSelfSkillInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionSelfSkillList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FactionSelfSkillInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionSelfSkillList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FactionSelfSkillInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionSelfSkillList::ByteSize() const {
  int total_size = 0;
  
  // repeated .FactionSelfSkillInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionSelfSkillList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionSelfSkillList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionSelfSkillList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionSelfSkillList::MergeFrom(const PBG2CFactionSelfSkillList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionSelfSkillList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionSelfSkillList::CopyFrom(const PBG2CFactionSelfSkillList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionSelfSkillList::IsInitialized() const {
  
  return true;
}

void PBG2CFactionSelfSkillList::Swap(PBG2CFactionSelfSkillList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionSelfSkillList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionSelfSkillList_descriptor_;
  metadata.reflection = PBG2CFactionSelfSkillList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionStudyFactionInfo::kInfoFieldNumber;
const int FactionStudyFactionInfo::kLevelsumFieldNumber;
const int FactionStudyFactionInfo::kMoneytypeFieldNumber;
const int FactionStudyFactionInfo::kMoneyvalueFieldNumber;
#endif  // !_MSC_VER

FactionStudyFactionInfo::FactionStudyFactionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionStudyFactionInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::PBFactionDisplay*>(&::PBFactionDisplay::default_instance());
}

FactionStudyFactionInfo::FactionStudyFactionInfo(const FactionStudyFactionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionStudyFactionInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  levelsum_ = 0u;
  moneytype_ = 0u;
  moneyvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionStudyFactionInfo::~FactionStudyFactionInfo() {
  SharedDtor();
}

void FactionStudyFactionInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void FactionStudyFactionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionStudyFactionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionStudyFactionInfo_descriptor_;
}

const FactionStudyFactionInfo& FactionStudyFactionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

FactionStudyFactionInfo* FactionStudyFactionInfo::default_instance_ = NULL;

FactionStudyFactionInfo* FactionStudyFactionInfo::New() const {
  return new FactionStudyFactionInfo;
}

void FactionStudyFactionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::PBFactionDisplay::Clear();
    }
    levelsum_ = 0u;
    moneytype_ = 0u;
    moneyvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionStudyFactionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionDisplay info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levelsum;
        break;
      }
      
      // optional uint32 levelsum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelsum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelsum_)));
          set_has_levelsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moneytype;
        break;
      }
      
      // optional uint32 moneytype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_moneyvalue;
        break;
      }
      
      // optional uint32 moneyvalue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneyvalue_)));
          set_has_moneyvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionStudyFactionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionDisplay info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional uint32 levelsum = 2;
  if (has_levelsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->levelsum(), output);
  }
  
  // optional uint32 moneytype = 3;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->moneytype(), output);
  }
  
  // optional uint32 moneyvalue = 4;
  if (has_moneyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->moneyvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionStudyFactionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionDisplay info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional uint32 levelsum = 2;
  if (has_levelsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->levelsum(), target);
  }
  
  // optional uint32 moneytype = 3;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->moneytype(), target);
  }
  
  // optional uint32 moneyvalue = 4;
  if (has_moneyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->moneyvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionStudyFactionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionDisplay info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional uint32 levelsum = 2;
    if (has_levelsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelsum());
    }
    
    // optional uint32 moneytype = 3;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneytype());
    }
    
    // optional uint32 moneyvalue = 4;
    if (has_moneyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneyvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionStudyFactionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionStudyFactionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionStudyFactionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionStudyFactionInfo::MergeFrom(const FactionStudyFactionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::PBFactionDisplay::MergeFrom(from.info());
    }
    if (from.has_levelsum()) {
      set_levelsum(from.levelsum());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_moneyvalue()) {
      set_moneyvalue(from.moneyvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionStudyFactionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionStudyFactionInfo::CopyFrom(const FactionStudyFactionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionStudyFactionInfo::IsInitialized() const {
  
  return true;
}

void FactionStudyFactionInfo::Swap(FactionStudyFactionInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(levelsum_, other->levelsum_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(moneyvalue_, other->moneyvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionStudyFactionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionStudyFactionInfo_descriptor_;
  metadata.reflection = FactionStudyFactionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionStudyFactionList::kListFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionStudyFactionList::PBG2CFactionStudyFactionList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionStudyFactionList::InitAsDefaultInstance() {
}

PBG2CFactionStudyFactionList::PBG2CFactionStudyFactionList(const PBG2CFactionStudyFactionList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionStudyFactionList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionStudyFactionList::~PBG2CFactionStudyFactionList() {
  SharedDtor();
}

void PBG2CFactionStudyFactionList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFactionStudyFactionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionStudyFactionList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionStudyFactionList_descriptor_;
}

const PBG2CFactionStudyFactionList& PBG2CFactionStudyFactionList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionStudyFactionList* PBG2CFactionStudyFactionList::default_instance_ = NULL;

PBG2CFactionStudyFactionList* PBG2CFactionStudyFactionList::New() const {
  return new PBG2CFactionStudyFactionList;
}

void PBG2CFactionStudyFactionList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionStudyFactionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FactionStudyFactionInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionStudyFactionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FactionStudyFactionInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionStudyFactionList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FactionStudyFactionInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionStudyFactionList::ByteSize() const {
  int total_size = 0;
  
  // repeated .FactionStudyFactionInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionStudyFactionList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionStudyFactionList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionStudyFactionList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionStudyFactionList::MergeFrom(const PBG2CFactionStudyFactionList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionStudyFactionList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionStudyFactionList::CopyFrom(const PBG2CFactionStudyFactionList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionStudyFactionList::IsInitialized() const {
  
  return true;
}

void PBG2CFactionStudyFactionList::Swap(PBG2CFactionStudyFactionList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionStudyFactionList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionStudyFactionList_descriptor_;
  metadata.reflection = PBG2CFactionStudyFactionList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GWatchOhterSkill::kFactionidFieldNumber;
#endif  // !_MSC_VER

PBC2GWatchOhterSkill::PBC2GWatchOhterSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GWatchOhterSkill::InitAsDefaultInstance() {
}

PBC2GWatchOhterSkill::PBC2GWatchOhterSkill(const PBC2GWatchOhterSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GWatchOhterSkill::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GWatchOhterSkill::~PBC2GWatchOhterSkill() {
  SharedDtor();
}

void PBC2GWatchOhterSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GWatchOhterSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GWatchOhterSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GWatchOhterSkill_descriptor_;
}

const PBC2GWatchOhterSkill& PBC2GWatchOhterSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GWatchOhterSkill* PBC2GWatchOhterSkill::default_instance_ = NULL;

PBC2GWatchOhterSkill* PBC2GWatchOhterSkill::New() const {
  return new PBC2GWatchOhterSkill;
}

void PBC2GWatchOhterSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GWatchOhterSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GWatchOhterSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GWatchOhterSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GWatchOhterSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GWatchOhterSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GWatchOhterSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GWatchOhterSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GWatchOhterSkill::MergeFrom(const PBC2GWatchOhterSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GWatchOhterSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GWatchOhterSkill::CopyFrom(const PBC2GWatchOhterSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GWatchOhterSkill::IsInitialized() const {
  
  return true;
}

void PBC2GWatchOhterSkill::Swap(PBC2GWatchOhterSkill* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GWatchOhterSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GWatchOhterSkill_descriptor_;
  metadata.reflection = PBC2GWatchOhterSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionOhterSkillInfo::kSkillidFieldNumber;
const int FactionOhterSkillInfo::kSelflevelFieldNumber;
#endif  // !_MSC_VER

FactionOhterSkillInfo::FactionOhterSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionOhterSkillInfo::InitAsDefaultInstance() {
}

FactionOhterSkillInfo::FactionOhterSkillInfo(const FactionOhterSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionOhterSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  selflevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionOhterSkillInfo::~FactionOhterSkillInfo() {
  SharedDtor();
}

void FactionOhterSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionOhterSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionOhterSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionOhterSkillInfo_descriptor_;
}

const FactionOhterSkillInfo& FactionOhterSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

FactionOhterSkillInfo* FactionOhterSkillInfo::default_instance_ = NULL;

FactionOhterSkillInfo* FactionOhterSkillInfo::New() const {
  return new FactionOhterSkillInfo;
}

void FactionOhterSkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    selflevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionOhterSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_selflevel;
        break;
      }
      
      // optional uint32 selflevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selflevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selflevel_)));
          set_has_selflevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionOhterSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 selflevel = 2;
  if (has_selflevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selflevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionOhterSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 selflevel = 2;
  if (has_selflevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selflevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionOhterSkillInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 selflevel = 2;
    if (has_selflevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selflevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionOhterSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionOhterSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionOhterSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionOhterSkillInfo::MergeFrom(const FactionOhterSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_selflevel()) {
      set_selflevel(from.selflevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionOhterSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionOhterSkillInfo::CopyFrom(const FactionOhterSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionOhterSkillInfo::IsInitialized() const {
  
  return true;
}

void FactionOhterSkillInfo::Swap(FactionOhterSkillInfo* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(selflevel_, other->selflevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionOhterSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionOhterSkillInfo_descriptor_;
  metadata.reflection = FactionOhterSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionOhterSkillList::kFactionidFieldNumber;
const int PBG2CFactionOhterSkillList::kListFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionOhterSkillList::PBG2CFactionOhterSkillList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionOhterSkillList::InitAsDefaultInstance() {
}

PBG2CFactionOhterSkillList::PBG2CFactionOhterSkillList(const PBG2CFactionOhterSkillList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionOhterSkillList::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionOhterSkillList::~PBG2CFactionOhterSkillList() {
  SharedDtor();
}

void PBG2CFactionOhterSkillList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFactionOhterSkillList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionOhterSkillList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionOhterSkillList_descriptor_;
}

const PBG2CFactionOhterSkillList& PBG2CFactionOhterSkillList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionOhterSkillList* PBG2CFactionOhterSkillList::default_instance_ = NULL;

PBG2CFactionOhterSkillList* PBG2CFactionOhterSkillList::New() const {
  return new PBG2CFactionOhterSkillList;
}

void PBG2CFactionOhterSkillList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionOhterSkillList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }
      
      // repeated .FactionOhterSkillInfo list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionOhterSkillList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }
  
  // repeated .FactionOhterSkillInfo list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionOhterSkillList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }
  
  // repeated .FactionOhterSkillInfo list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionOhterSkillList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
  }
  // repeated .FactionOhterSkillInfo list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionOhterSkillList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionOhterSkillList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionOhterSkillList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionOhterSkillList::MergeFrom(const PBG2CFactionOhterSkillList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionOhterSkillList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionOhterSkillList::CopyFrom(const PBG2CFactionOhterSkillList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionOhterSkillList::IsInitialized() const {
  
  return true;
}

void PBG2CFactionOhterSkillList::Swap(PBG2CFactionOhterSkillList* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionOhterSkillList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionOhterSkillList_descriptor_;
  metadata.reflection = PBG2CFactionOhterSkillList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GUpgradeSelfSkill::kSkillidFieldNumber;
const int PBC2GUpgradeSelfSkill::kLevelFieldNumber;
#endif  // !_MSC_VER

PBC2GUpgradeSelfSkill::PBC2GUpgradeSelfSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GUpgradeSelfSkill::InitAsDefaultInstance() {
}

PBC2GUpgradeSelfSkill::PBC2GUpgradeSelfSkill(const PBC2GUpgradeSelfSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GUpgradeSelfSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GUpgradeSelfSkill::~PBC2GUpgradeSelfSkill() {
  SharedDtor();
}

void PBC2GUpgradeSelfSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GUpgradeSelfSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GUpgradeSelfSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GUpgradeSelfSkill_descriptor_;
}

const PBC2GUpgradeSelfSkill& PBC2GUpgradeSelfSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GUpgradeSelfSkill* PBC2GUpgradeSelfSkill::default_instance_ = NULL;

PBC2GUpgradeSelfSkill* PBC2GUpgradeSelfSkill::New() const {
  return new PBC2GUpgradeSelfSkill;
}

void PBC2GUpgradeSelfSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GUpgradeSelfSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GUpgradeSelfSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GUpgradeSelfSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GUpgradeSelfSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GUpgradeSelfSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GUpgradeSelfSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GUpgradeSelfSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GUpgradeSelfSkill::MergeFrom(const PBC2GUpgradeSelfSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GUpgradeSelfSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GUpgradeSelfSkill::CopyFrom(const PBC2GUpgradeSelfSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GUpgradeSelfSkill::IsInitialized() const {
  
  return true;
}

void PBC2GUpgradeSelfSkill::Swap(PBC2GUpgradeSelfSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GUpgradeSelfSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GUpgradeSelfSkill_descriptor_;
  metadata.reflection = PBC2GUpgradeSelfSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CUpgradeSelfSkill::kSkillidFieldNumber;
const int PBG2CUpgradeSelfSkill::kLevelFieldNumber;
#endif  // !_MSC_VER

PBG2CUpgradeSelfSkill::PBG2CUpgradeSelfSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CUpgradeSelfSkill::InitAsDefaultInstance() {
}

PBG2CUpgradeSelfSkill::PBG2CUpgradeSelfSkill(const PBG2CUpgradeSelfSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CUpgradeSelfSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CUpgradeSelfSkill::~PBG2CUpgradeSelfSkill() {
  SharedDtor();
}

void PBG2CUpgradeSelfSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CUpgradeSelfSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CUpgradeSelfSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CUpgradeSelfSkill_descriptor_;
}

const PBG2CUpgradeSelfSkill& PBG2CUpgradeSelfSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CUpgradeSelfSkill* PBG2CUpgradeSelfSkill::default_instance_ = NULL;

PBG2CUpgradeSelfSkill* PBG2CUpgradeSelfSkill::New() const {
  return new PBG2CUpgradeSelfSkill;
}

void PBG2CUpgradeSelfSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CUpgradeSelfSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CUpgradeSelfSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CUpgradeSelfSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CUpgradeSelfSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CUpgradeSelfSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CUpgradeSelfSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CUpgradeSelfSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CUpgradeSelfSkill::MergeFrom(const PBG2CUpgradeSelfSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CUpgradeSelfSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CUpgradeSelfSkill::CopyFrom(const PBG2CUpgradeSelfSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CUpgradeSelfSkill::IsInitialized() const {
  
  return true;
}

void PBG2CUpgradeSelfSkill::Swap(PBG2CUpgradeSelfSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CUpgradeSelfSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CUpgradeSelfSkill_descriptor_;
  metadata.reflection = PBG2CUpgradeSelfSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGAWUpgradeSelfSkill::kSkillidFieldNumber;
const int PBGAWUpgradeSelfSkill::kLevelFieldNumber;
const int PBGAWUpgradeSelfSkill::kMoneyFieldNumber;
const int PBGAWUpgradeSelfSkill::kContributionFieldNumber;
#endif  // !_MSC_VER

PBGAWUpgradeSelfSkill::PBGAWUpgradeSelfSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGAWUpgradeSelfSkill::InitAsDefaultInstance() {
  money_ = const_cast< ::PBMoneyConsume*>(&::PBMoneyConsume::default_instance());
}

PBGAWUpgradeSelfSkill::PBGAWUpgradeSelfSkill(const PBGAWUpgradeSelfSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGAWUpgradeSelfSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  money_ = NULL;
  contribution_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGAWUpgradeSelfSkill::~PBGAWUpgradeSelfSkill() {
  SharedDtor();
}

void PBGAWUpgradeSelfSkill::SharedDtor() {
  if (this != default_instance_) {
    delete money_;
  }
}

void PBGAWUpgradeSelfSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGAWUpgradeSelfSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGAWUpgradeSelfSkill_descriptor_;
}

const PBGAWUpgradeSelfSkill& PBGAWUpgradeSelfSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBGAWUpgradeSelfSkill* PBGAWUpgradeSelfSkill::default_instance_ = NULL;

PBGAWUpgradeSelfSkill* PBGAWUpgradeSelfSkill::New() const {
  return new PBGAWUpgradeSelfSkill;
}

void PBGAWUpgradeSelfSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    level_ = 0u;
    if (has_money()) {
      if (money_ != NULL) money_->::PBMoneyConsume::Clear();
    }
    contribution_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGAWUpgradeSelfSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_money;
        break;
      }
      
      // optional .PBMoneyConsume money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_contribution;
        break;
      }
      
      // optional uint32 contribution = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_)));
          set_has_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGAWUpgradeSelfSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  // optional .PBMoneyConsume money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->money(), output);
  }
  
  // optional uint32 contribution = 4;
  if (has_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->contribution(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGAWUpgradeSelfSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional .PBMoneyConsume money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->money(), target);
  }
  
  // optional uint32 contribution = 4;
  if (has_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->contribution(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGAWUpgradeSelfSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional .PBMoneyConsume money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->money());
    }
    
    // optional uint32 contribution = 4;
    if (has_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribution());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGAWUpgradeSelfSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGAWUpgradeSelfSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGAWUpgradeSelfSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGAWUpgradeSelfSkill::MergeFrom(const PBGAWUpgradeSelfSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_money()) {
      mutable_money()->::PBMoneyConsume::MergeFrom(from.money());
    }
    if (from.has_contribution()) {
      set_contribution(from.contribution());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGAWUpgradeSelfSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGAWUpgradeSelfSkill::CopyFrom(const PBGAWUpgradeSelfSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGAWUpgradeSelfSkill::IsInitialized() const {
  
  return true;
}

void PBGAWUpgradeSelfSkill::Swap(PBGAWUpgradeSelfSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(money_, other->money_);
    std::swap(contribution_, other->contribution_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGAWUpgradeSelfSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGAWUpgradeSelfSkill_descriptor_;
  metadata.reflection = PBGAWUpgradeSelfSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAddStudyRelation::kFactionidFieldNumber;
const int PBAddStudyRelation::kMoneytypeFieldNumber;
const int PBAddStudyRelation::kMoneyvalueFieldNumber;
#endif  // !_MSC_VER

PBAddStudyRelation::PBAddStudyRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAddStudyRelation::InitAsDefaultInstance() {
}

PBAddStudyRelation::PBAddStudyRelation(const PBAddStudyRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAddStudyRelation::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  moneytype_ = 0u;
  moneyvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAddStudyRelation::~PBAddStudyRelation() {
  SharedDtor();
}

void PBAddStudyRelation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAddStudyRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAddStudyRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAddStudyRelation_descriptor_;
}

const PBAddStudyRelation& PBAddStudyRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBAddStudyRelation* PBAddStudyRelation::default_instance_ = NULL;

PBAddStudyRelation* PBAddStudyRelation::New() const {
  return new PBAddStudyRelation;
}

void PBAddStudyRelation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    moneytype_ = 0u;
    moneyvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAddStudyRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moneytype;
        break;
      }
      
      // optional uint32 moneytype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moneyvalue;
        break;
      }
      
      // optional uint32 moneyvalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneyvalue_)));
          set_has_moneyvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAddStudyRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }
  
  // optional uint32 moneytype = 2;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moneytype(), output);
  }
  
  // optional uint32 moneyvalue = 3;
  if (has_moneyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->moneyvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAddStudyRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }
  
  // optional uint32 moneytype = 2;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moneytype(), target);
  }
  
  // optional uint32 moneyvalue = 3;
  if (has_moneyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->moneyvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAddStudyRelation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
    // optional uint32 moneytype = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneytype());
    }
    
    // optional uint32 moneyvalue = 3;
    if (has_moneyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneyvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAddStudyRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAddStudyRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAddStudyRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAddStudyRelation::MergeFrom(const PBAddStudyRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_moneyvalue()) {
      set_moneyvalue(from.moneyvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAddStudyRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAddStudyRelation::CopyFrom(const PBAddStudyRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAddStudyRelation::IsInitialized() const {
  
  return true;
}

void PBAddStudyRelation::Swap(PBAddStudyRelation* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(moneyvalue_, other->moneyvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAddStudyRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAddStudyRelation_descriptor_;
  metadata.reflection = PBAddStudyRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GAddStudyRelation::kFactionFieldNumber;
#endif  // !_MSC_VER

PBC2GAddStudyRelation::PBC2GAddStudyRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GAddStudyRelation::InitAsDefaultInstance() {
}

PBC2GAddStudyRelation::PBC2GAddStudyRelation(const PBC2GAddStudyRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GAddStudyRelation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GAddStudyRelation::~PBC2GAddStudyRelation() {
  SharedDtor();
}

void PBC2GAddStudyRelation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GAddStudyRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GAddStudyRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GAddStudyRelation_descriptor_;
}

const PBC2GAddStudyRelation& PBC2GAddStudyRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GAddStudyRelation* PBC2GAddStudyRelation::default_instance_ = NULL;

PBC2GAddStudyRelation* PBC2GAddStudyRelation::New() const {
  return new PBC2GAddStudyRelation;
}

void PBC2GAddStudyRelation::Clear() {
  faction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GAddStudyRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBAddStudyRelation faction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_faction;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GAddStudyRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBAddStudyRelation faction = 1;
  for (int i = 0; i < this->faction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->faction(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GAddStudyRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBAddStudyRelation faction = 1;
  for (int i = 0; i < this->faction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->faction(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GAddStudyRelation::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBAddStudyRelation faction = 1;
  total_size += 1 * this->faction_size();
  for (int i = 0; i < this->faction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faction(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GAddStudyRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GAddStudyRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GAddStudyRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GAddStudyRelation::MergeFrom(const PBC2GAddStudyRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  faction_.MergeFrom(from.faction_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GAddStudyRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GAddStudyRelation::CopyFrom(const PBC2GAddStudyRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GAddStudyRelation::IsInitialized() const {
  
  return true;
}

void PBC2GAddStudyRelation::Swap(PBC2GAddStudyRelation* other) {
  if (other != this) {
    faction_.Swap(&other->faction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GAddStudyRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GAddStudyRelation_descriptor_;
  metadata.reflection = PBC2GAddStudyRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GDelStudyRelation::kFactionidFieldNumber;
#endif  // !_MSC_VER

PBC2GDelStudyRelation::PBC2GDelStudyRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GDelStudyRelation::InitAsDefaultInstance() {
}

PBC2GDelStudyRelation::PBC2GDelStudyRelation(const PBC2GDelStudyRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GDelStudyRelation::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GDelStudyRelation::~PBC2GDelStudyRelation() {
  SharedDtor();
}

void PBC2GDelStudyRelation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GDelStudyRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GDelStudyRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GDelStudyRelation_descriptor_;
}

const PBC2GDelStudyRelation& PBC2GDelStudyRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GDelStudyRelation* PBC2GDelStudyRelation::default_instance_ = NULL;

PBC2GDelStudyRelation* PBC2GDelStudyRelation::New() const {
  return new PBC2GDelStudyRelation;
}

void PBC2GDelStudyRelation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GDelStudyRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GDelStudyRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GDelStudyRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GDelStudyRelation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GDelStudyRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GDelStudyRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GDelStudyRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GDelStudyRelation::MergeFrom(const PBC2GDelStudyRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GDelStudyRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GDelStudyRelation::CopyFrom(const PBC2GDelStudyRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GDelStudyRelation::IsInitialized() const {
  
  return true;
}

void PBC2GDelStudyRelation::Swap(PBC2GDelStudyRelation* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GDelStudyRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GDelStudyRelation_descriptor_;
  metadata.reflection = PBC2GDelStudyRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CDelStudyRelation::kFactionidFieldNumber;
#endif  // !_MSC_VER

PBG2CDelStudyRelation::PBG2CDelStudyRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CDelStudyRelation::InitAsDefaultInstance() {
}

PBG2CDelStudyRelation::PBG2CDelStudyRelation(const PBG2CDelStudyRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CDelStudyRelation::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CDelStudyRelation::~PBG2CDelStudyRelation() {
  SharedDtor();
}

void PBG2CDelStudyRelation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CDelStudyRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CDelStudyRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CDelStudyRelation_descriptor_;
}

const PBG2CDelStudyRelation& PBG2CDelStudyRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CDelStudyRelation* PBG2CDelStudyRelation::default_instance_ = NULL;

PBG2CDelStudyRelation* PBG2CDelStudyRelation::New() const {
  return new PBG2CDelStudyRelation;
}

void PBG2CDelStudyRelation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CDelStudyRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CDelStudyRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CDelStudyRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CDelStudyRelation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CDelStudyRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CDelStudyRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CDelStudyRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CDelStudyRelation::MergeFrom(const PBG2CDelStudyRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CDelStudyRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CDelStudyRelation::CopyFrom(const PBG2CDelStudyRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CDelStudyRelation::IsInitialized() const {
  
  return true;
}

void PBG2CDelStudyRelation::Swap(PBG2CDelStudyRelation* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CDelStudyRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CDelStudyRelation_descriptor_;
  metadata.reflection = PBG2CDelStudyRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionDevelopSkill::kSkillidFieldNumber;
const int PBC2GFactionDevelopSkill::kLevelFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionDevelopSkill::PBC2GFactionDevelopSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionDevelopSkill::InitAsDefaultInstance() {
}

PBC2GFactionDevelopSkill::PBC2GFactionDevelopSkill(const PBC2GFactionDevelopSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionDevelopSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionDevelopSkill::~PBC2GFactionDevelopSkill() {
  SharedDtor();
}

void PBC2GFactionDevelopSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFactionDevelopSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionDevelopSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionDevelopSkill_descriptor_;
}

const PBC2GFactionDevelopSkill& PBC2GFactionDevelopSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GFactionDevelopSkill* PBC2GFactionDevelopSkill::default_instance_ = NULL;

PBC2GFactionDevelopSkill* PBC2GFactionDevelopSkill::New() const {
  return new PBC2GFactionDevelopSkill;
}

void PBC2GFactionDevelopSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionDevelopSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionDevelopSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionDevelopSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionDevelopSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionDevelopSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionDevelopSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionDevelopSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionDevelopSkill::MergeFrom(const PBC2GFactionDevelopSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionDevelopSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionDevelopSkill::CopyFrom(const PBC2GFactionDevelopSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionDevelopSkill::IsInitialized() const {
  
  return true;
}

void PBC2GFactionDevelopSkill::Swap(PBC2GFactionDevelopSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionDevelopSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionDevelopSkill_descriptor_;
  metadata.reflection = PBC2GFactionDevelopSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionDevelopSkill::kSkillidFieldNumber;
const int PBG2CFactionDevelopSkill::kLevelFieldNumber;
const int PBG2CFactionDevelopSkill::kLefttimeFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionDevelopSkill::PBG2CFactionDevelopSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionDevelopSkill::InitAsDefaultInstance() {
}

PBG2CFactionDevelopSkill::PBG2CFactionDevelopSkill(const PBG2CFactionDevelopSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionDevelopSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  lefttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionDevelopSkill::~PBG2CFactionDevelopSkill() {
  SharedDtor();
}

void PBG2CFactionDevelopSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFactionDevelopSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionDevelopSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionDevelopSkill_descriptor_;
}

const PBG2CFactionDevelopSkill& PBG2CFactionDevelopSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionDevelopSkill* PBG2CFactionDevelopSkill::default_instance_ = NULL;

PBG2CFactionDevelopSkill* PBG2CFactionDevelopSkill::New() const {
  return new PBG2CFactionDevelopSkill;
}

void PBG2CFactionDevelopSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    level_ = 0u;
    lefttime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionDevelopSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lefttime;
        break;
      }
      
      // optional uint32 lefttime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionDevelopSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  // optional uint32 lefttime = 3;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lefttime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionDevelopSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // optional uint32 lefttime = 3;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lefttime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionDevelopSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 lefttime = 3;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefttime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionDevelopSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionDevelopSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionDevelopSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionDevelopSkill::MergeFrom(const PBG2CFactionDevelopSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionDevelopSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionDevelopSkill::CopyFrom(const PBG2CFactionDevelopSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionDevelopSkill::IsInitialized() const {
  
  return true;
}

void PBG2CFactionDevelopSkill::Swap(PBG2CFactionDevelopSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionDevelopSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionDevelopSkill_descriptor_;
  metadata.reflection = PBG2CFactionDevelopSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionSuspendDevelopSkill::kSkillidFieldNumber;
const int PBC2GFactionSuspendDevelopSkill::kSuspendFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionSuspendDevelopSkill::PBC2GFactionSuspendDevelopSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionSuspendDevelopSkill::InitAsDefaultInstance() {
}

PBC2GFactionSuspendDevelopSkill::PBC2GFactionSuspendDevelopSkill(const PBC2GFactionSuspendDevelopSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionSuspendDevelopSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  suspend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionSuspendDevelopSkill::~PBC2GFactionSuspendDevelopSkill() {
  SharedDtor();
}

void PBC2GFactionSuspendDevelopSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFactionSuspendDevelopSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionSuspendDevelopSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionSuspendDevelopSkill_descriptor_;
}

const PBC2GFactionSuspendDevelopSkill& PBC2GFactionSuspendDevelopSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GFactionSuspendDevelopSkill* PBC2GFactionSuspendDevelopSkill::default_instance_ = NULL;

PBC2GFactionSuspendDevelopSkill* PBC2GFactionSuspendDevelopSkill::New() const {
  return new PBC2GFactionSuspendDevelopSkill;
}

void PBC2GFactionSuspendDevelopSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    suspend_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionSuspendDevelopSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_suspend;
        break;
      }
      
      // optional bool suspend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suspend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suspend_)));
          set_has_suspend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionSuspendDevelopSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional bool suspend = 2;
  if (has_suspend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->suspend(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionSuspendDevelopSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional bool suspend = 2;
  if (has_suspend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->suspend(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionSuspendDevelopSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional bool suspend = 2;
    if (has_suspend()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionSuspendDevelopSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionSuspendDevelopSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionSuspendDevelopSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionSuspendDevelopSkill::MergeFrom(const PBC2GFactionSuspendDevelopSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_suspend()) {
      set_suspend(from.suspend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionSuspendDevelopSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionSuspendDevelopSkill::CopyFrom(const PBC2GFactionSuspendDevelopSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionSuspendDevelopSkill::IsInitialized() const {
  
  return true;
}

void PBC2GFactionSuspendDevelopSkill::Swap(PBC2GFactionSuspendDevelopSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(suspend_, other->suspend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionSuspendDevelopSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionSuspendDevelopSkill_descriptor_;
  metadata.reflection = PBC2GFactionSuspendDevelopSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionSuspendDevelopSkill::kSkillidFieldNumber;
const int PBG2CFactionSuspendDevelopSkill::kSuspendFieldNumber;
const int PBG2CFactionSuspendDevelopSkill::kLefttimeFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionSuspendDevelopSkill::PBG2CFactionSuspendDevelopSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionSuspendDevelopSkill::InitAsDefaultInstance() {
}

PBG2CFactionSuspendDevelopSkill::PBG2CFactionSuspendDevelopSkill(const PBG2CFactionSuspendDevelopSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionSuspendDevelopSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  suspend_ = false;
  lefttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionSuspendDevelopSkill::~PBG2CFactionSuspendDevelopSkill() {
  SharedDtor();
}

void PBG2CFactionSuspendDevelopSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFactionSuspendDevelopSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionSuspendDevelopSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionSuspendDevelopSkill_descriptor_;
}

const PBG2CFactionSuspendDevelopSkill& PBG2CFactionSuspendDevelopSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionSuspendDevelopSkill* PBG2CFactionSuspendDevelopSkill::default_instance_ = NULL;

PBG2CFactionSuspendDevelopSkill* PBG2CFactionSuspendDevelopSkill::New() const {
  return new PBG2CFactionSuspendDevelopSkill;
}

void PBG2CFactionSuspendDevelopSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    suspend_ = false;
    lefttime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionSuspendDevelopSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_suspend;
        break;
      }
      
      // optional bool suspend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suspend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suspend_)));
          set_has_suspend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lefttime;
        break;
      }
      
      // optional uint32 lefttime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionSuspendDevelopSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional bool suspend = 2;
  if (has_suspend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->suspend(), output);
  }
  
  // optional uint32 lefttime = 3;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lefttime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionSuspendDevelopSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional bool suspend = 2;
  if (has_suspend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->suspend(), target);
  }
  
  // optional uint32 lefttime = 3;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lefttime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionSuspendDevelopSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional bool suspend = 2;
    if (has_suspend()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 lefttime = 3;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefttime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionSuspendDevelopSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionSuspendDevelopSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionSuspendDevelopSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionSuspendDevelopSkill::MergeFrom(const PBG2CFactionSuspendDevelopSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_suspend()) {
      set_suspend(from.suspend());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionSuspendDevelopSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionSuspendDevelopSkill::CopyFrom(const PBG2CFactionSuspendDevelopSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionSuspendDevelopSkill::IsInitialized() const {
  
  return true;
}

void PBG2CFactionSuspendDevelopSkill::Swap(PBG2CFactionSuspendDevelopSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(suspend_, other->suspend_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionSuspendDevelopSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionSuspendDevelopSkill_descriptor_;
  metadata.reflection = PBG2CFactionSuspendDevelopSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionOpenStudy::kMoneytypeFieldNumber;
const int PBC2GFactionOpenStudy::kMoneyvalueFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionOpenStudy::PBC2GFactionOpenStudy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionOpenStudy::InitAsDefaultInstance() {
}

PBC2GFactionOpenStudy::PBC2GFactionOpenStudy(const PBC2GFactionOpenStudy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionOpenStudy::SharedCtor() {
  _cached_size_ = 0;
  moneytype_ = 0u;
  moneyvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionOpenStudy::~PBC2GFactionOpenStudy() {
  SharedDtor();
}

void PBC2GFactionOpenStudy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFactionOpenStudy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionOpenStudy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionOpenStudy_descriptor_;
}

const PBC2GFactionOpenStudy& PBC2GFactionOpenStudy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GFactionOpenStudy* PBC2GFactionOpenStudy::default_instance_ = NULL;

PBC2GFactionOpenStudy* PBC2GFactionOpenStudy::New() const {
  return new PBC2GFactionOpenStudy;
}

void PBC2GFactionOpenStudy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moneytype_ = 0u;
    moneyvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionOpenStudy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moneytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moneyvalue;
        break;
      }
      
      // optional uint32 moneyvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneyvalue_)));
          set_has_moneyvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionOpenStudy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moneytype = 1;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moneytype(), output);
  }
  
  // optional uint32 moneyvalue = 2;
  if (has_moneyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moneyvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionOpenStudy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moneytype = 1;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->moneytype(), target);
  }
  
  // optional uint32 moneyvalue = 2;
  if (has_moneyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moneyvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionOpenStudy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moneytype = 1;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneytype());
    }
    
    // optional uint32 moneyvalue = 2;
    if (has_moneyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneyvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionOpenStudy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionOpenStudy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionOpenStudy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionOpenStudy::MergeFrom(const PBC2GFactionOpenStudy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_moneyvalue()) {
      set_moneyvalue(from.moneyvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionOpenStudy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionOpenStudy::CopyFrom(const PBC2GFactionOpenStudy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionOpenStudy::IsInitialized() const {
  
  return true;
}

void PBC2GFactionOpenStudy::Swap(PBC2GFactionOpenStudy* other) {
  if (other != this) {
    std::swap(moneytype_, other->moneytype_);
    std::swap(moneyvalue_, other->moneyvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionOpenStudy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionOpenStudy_descriptor_;
  metadata.reflection = PBC2GFactionOpenStudy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionOpenStudy::kMoneytypeFieldNumber;
const int PBG2CFactionOpenStudy::kMoneyvalueFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionOpenStudy::PBG2CFactionOpenStudy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionOpenStudy::InitAsDefaultInstance() {
}

PBG2CFactionOpenStudy::PBG2CFactionOpenStudy(const PBG2CFactionOpenStudy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionOpenStudy::SharedCtor() {
  _cached_size_ = 0;
  moneytype_ = 0u;
  moneyvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionOpenStudy::~PBG2CFactionOpenStudy() {
  SharedDtor();
}

void PBG2CFactionOpenStudy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFactionOpenStudy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionOpenStudy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionOpenStudy_descriptor_;
}

const PBG2CFactionOpenStudy& PBG2CFactionOpenStudy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionOpenStudy* PBG2CFactionOpenStudy::default_instance_ = NULL;

PBG2CFactionOpenStudy* PBG2CFactionOpenStudy::New() const {
  return new PBG2CFactionOpenStudy;
}

void PBG2CFactionOpenStudy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moneytype_ = 0u;
    moneyvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionOpenStudy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moneytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moneyvalue;
        break;
      }
      
      // optional uint32 moneyvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneyvalue_)));
          set_has_moneyvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionOpenStudy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moneytype = 1;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moneytype(), output);
  }
  
  // optional uint32 moneyvalue = 2;
  if (has_moneyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moneyvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionOpenStudy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moneytype = 1;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->moneytype(), target);
  }
  
  // optional uint32 moneyvalue = 2;
  if (has_moneyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moneyvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionOpenStudy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moneytype = 1;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneytype());
    }
    
    // optional uint32 moneyvalue = 2;
    if (has_moneyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneyvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionOpenStudy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionOpenStudy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionOpenStudy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionOpenStudy::MergeFrom(const PBG2CFactionOpenStudy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_moneyvalue()) {
      set_moneyvalue(from.moneyvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionOpenStudy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionOpenStudy::CopyFrom(const PBG2CFactionOpenStudy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionOpenStudy::IsInitialized() const {
  
  return true;
}

void PBG2CFactionOpenStudy::Swap(PBG2CFactionOpenStudy* other) {
  if (other != this) {
    std::swap(moneytype_, other->moneytype_);
    std::swap(moneyvalue_, other->moneyvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionOpenStudy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionOpenStudy_descriptor_;
  metadata.reflection = PBG2CFactionOpenStudy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GFactionMemberAttr::kValueFieldNumber;
const int PBW2GFactionMemberAttr::kDoingFieldNumber;
#endif  // !_MSC_VER

PBW2GFactionMemberAttr::PBW2GFactionMemberAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GFactionMemberAttr::InitAsDefaultInstance() {
}

PBW2GFactionMemberAttr::PBW2GFactionMemberAttr(const PBW2GFactionMemberAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GFactionMemberAttr::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  doing_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GFactionMemberAttr::~PBW2GFactionMemberAttr() {
  SharedDtor();
}

void PBW2GFactionMemberAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBW2GFactionMemberAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GFactionMemberAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GFactionMemberAttr_descriptor_;
}

const PBW2GFactionMemberAttr& PBW2GFactionMemberAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBW2GFactionMemberAttr* PBW2GFactionMemberAttr::default_instance_ = NULL;

PBW2GFactionMemberAttr* PBW2GFactionMemberAttr::New() const {
  return new PBW2GFactionMemberAttr;
}

void PBW2GFactionMemberAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    doing_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GFactionMemberAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_doing;
        break;
      }
      
      // optional int32 doing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doing_)));
          set_has_doing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GFactionMemberAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  // optional int32 doing = 2;
  if (has_doing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->doing(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GFactionMemberAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  // optional int32 doing = 2;
  if (has_doing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->doing(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GFactionMemberAttr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int32 doing = 2;
    if (has_doing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doing());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GFactionMemberAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GFactionMemberAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GFactionMemberAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GFactionMemberAttr::MergeFrom(const PBW2GFactionMemberAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_doing()) {
      set_doing(from.doing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GFactionMemberAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GFactionMemberAttr::CopyFrom(const PBW2GFactionMemberAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GFactionMemberAttr::IsInitialized() const {
  
  return true;
}

void PBW2GFactionMemberAttr::Swap(PBW2GFactionMemberAttr* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(doing_, other->doing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GFactionMemberAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GFactionMemberAttr_descriptor_;
  metadata.reflection = PBW2GFactionMemberAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionMemberAttr::kValueFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionMemberAttr::PBG2CFactionMemberAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionMemberAttr::InitAsDefaultInstance() {
}

PBG2CFactionMemberAttr::PBG2CFactionMemberAttr(const PBG2CFactionMemberAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionMemberAttr::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionMemberAttr::~PBG2CFactionMemberAttr() {
  SharedDtor();
}

void PBG2CFactionMemberAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFactionMemberAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionMemberAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionMemberAttr_descriptor_;
}

const PBG2CFactionMemberAttr& PBG2CFactionMemberAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionMemberAttr* PBG2CFactionMemberAttr::default_instance_ = NULL;

PBG2CFactionMemberAttr* PBG2CFactionMemberAttr::New() const {
  return new PBG2CFactionMemberAttr;
}

void PBG2CFactionMemberAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionMemberAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionMemberAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionMemberAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionMemberAttr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionMemberAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionMemberAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionMemberAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionMemberAttr::MergeFrom(const PBG2CFactionMemberAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionMemberAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionMemberAttr::CopyFrom(const PBG2CFactionMemberAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionMemberAttr::IsInitialized() const {
  
  return true;
}

void PBG2CFactionMemberAttr::Swap(PBG2CFactionMemberAttr* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionMemberAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionMemberAttr_descriptor_;
  metadata.reflection = PBG2CFactionMemberAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionDonateMoney::kIdFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionDonateMoney::PBC2GFactionDonateMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionDonateMoney::InitAsDefaultInstance() {
}

PBC2GFactionDonateMoney::PBC2GFactionDonateMoney(const PBC2GFactionDonateMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionDonateMoney::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionDonateMoney::~PBC2GFactionDonateMoney() {
  SharedDtor();
}

void PBC2GFactionDonateMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFactionDonateMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionDonateMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionDonateMoney_descriptor_;
}

const PBC2GFactionDonateMoney& PBC2GFactionDonateMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GFactionDonateMoney* PBC2GFactionDonateMoney::default_instance_ = NULL;

PBC2GFactionDonateMoney* PBC2GFactionDonateMoney::New() const {
  return new PBC2GFactionDonateMoney;
}

void PBC2GFactionDonateMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionDonateMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionDonateMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionDonateMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionDonateMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionDonateMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionDonateMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionDonateMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionDonateMoney::MergeFrom(const PBC2GFactionDonateMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionDonateMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionDonateMoney::CopyFrom(const PBC2GFactionDonateMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionDonateMoney::IsInitialized() const {
  
  return true;
}

void PBC2GFactionDonateMoney::Swap(PBC2GFactionDonateMoney* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionDonateMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionDonateMoney_descriptor_;
  metadata.reflection = PBC2GFactionDonateMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionDrinkWine::kIdFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionDrinkWine::PBG2CFactionDrinkWine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionDrinkWine::InitAsDefaultInstance() {
}

PBG2CFactionDrinkWine::PBG2CFactionDrinkWine(const PBG2CFactionDrinkWine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionDrinkWine::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionDrinkWine::~PBG2CFactionDrinkWine() {
  SharedDtor();
}

void PBG2CFactionDrinkWine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFactionDrinkWine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionDrinkWine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionDrinkWine_descriptor_;
}

const PBG2CFactionDrinkWine& PBG2CFactionDrinkWine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionDrinkWine* PBG2CFactionDrinkWine::default_instance_ = NULL;

PBG2CFactionDrinkWine* PBG2CFactionDrinkWine::New() const {
  return new PBG2CFactionDrinkWine;
}

void PBG2CFactionDrinkWine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionDrinkWine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionDrinkWine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionDrinkWine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionDrinkWine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionDrinkWine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionDrinkWine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionDrinkWine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionDrinkWine::MergeFrom(const PBG2CFactionDrinkWine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionDrinkWine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionDrinkWine::CopyFrom(const PBG2CFactionDrinkWine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionDrinkWine::IsInitialized() const {
  
  return true;
}

void PBG2CFactionDrinkWine::Swap(PBG2CFactionDrinkWine* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionDrinkWine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionDrinkWine_descriptor_;
  metadata.reflection = PBG2CFactionDrinkWine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionDrinkWine::kIdFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionDrinkWine::PBC2GFactionDrinkWine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionDrinkWine::InitAsDefaultInstance() {
}

PBC2GFactionDrinkWine::PBC2GFactionDrinkWine(const PBC2GFactionDrinkWine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionDrinkWine::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionDrinkWine::~PBC2GFactionDrinkWine() {
  SharedDtor();
}

void PBC2GFactionDrinkWine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFactionDrinkWine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionDrinkWine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionDrinkWine_descriptor_;
}

const PBC2GFactionDrinkWine& PBC2GFactionDrinkWine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GFactionDrinkWine* PBC2GFactionDrinkWine::default_instance_ = NULL;

PBC2GFactionDrinkWine* PBC2GFactionDrinkWine::New() const {
  return new PBC2GFactionDrinkWine;
}

void PBC2GFactionDrinkWine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionDrinkWine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionDrinkWine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionDrinkWine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionDrinkWine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionDrinkWine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionDrinkWine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionDrinkWine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionDrinkWine::MergeFrom(const PBC2GFactionDrinkWine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionDrinkWine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionDrinkWine::CopyFrom(const PBC2GFactionDrinkWine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionDrinkWine::IsInitialized() const {
  
  return true;
}

void PBC2GFactionDrinkWine::Swap(PBC2GFactionDrinkWine* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionDrinkWine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionDrinkWine_descriptor_;
  metadata.reflection = PBC2GFactionDrinkWine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerDrinkWine::kDaywisdomFieldNumber;
const int PBPlayerDrinkWine::kIdFieldNumber;
const int PBPlayerDrinkWine::kCurwisdomFieldNumber;
#endif  // !_MSC_VER

PBPlayerDrinkWine::PBPlayerDrinkWine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerDrinkWine::InitAsDefaultInstance() {
}

PBPlayerDrinkWine::PBPlayerDrinkWine(const PBPlayerDrinkWine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerDrinkWine::SharedCtor() {
  _cached_size_ = 0;
  daywisdom_ = 0u;
  id_ = 0u;
  curwisdom_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerDrinkWine::~PBPlayerDrinkWine() {
  SharedDtor();
}

void PBPlayerDrinkWine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerDrinkWine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerDrinkWine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerDrinkWine_descriptor_;
}

const PBPlayerDrinkWine& PBPlayerDrinkWine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBPlayerDrinkWine* PBPlayerDrinkWine::default_instance_ = NULL;

PBPlayerDrinkWine* PBPlayerDrinkWine::New() const {
  return new PBPlayerDrinkWine;
}

void PBPlayerDrinkWine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daywisdom_ = 0u;
    id_ = 0u;
    curwisdom_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerDrinkWine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 daywisdom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daywisdom_)));
          set_has_daywisdom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curwisdom;
        break;
      }
      
      // optional uint32 curwisdom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curwisdom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curwisdom_)));
          set_has_curwisdom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerDrinkWine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 daywisdom = 1;
  if (has_daywisdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->daywisdom(), output);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  // optional uint32 curwisdom = 3;
  if (has_curwisdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curwisdom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerDrinkWine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 daywisdom = 1;
  if (has_daywisdom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->daywisdom(), target);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  // optional uint32 curwisdom = 3;
  if (has_curwisdom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curwisdom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerDrinkWine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 daywisdom = 1;
    if (has_daywisdom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daywisdom());
    }
    
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 curwisdom = 3;
    if (has_curwisdom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curwisdom());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerDrinkWine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerDrinkWine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerDrinkWine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerDrinkWine::MergeFrom(const PBPlayerDrinkWine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daywisdom()) {
      set_daywisdom(from.daywisdom());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_curwisdom()) {
      set_curwisdom(from.curwisdom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerDrinkWine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerDrinkWine::CopyFrom(const PBPlayerDrinkWine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerDrinkWine::IsInitialized() const {
  
  return true;
}

void PBPlayerDrinkWine::Swap(PBPlayerDrinkWine* other) {
  if (other != this) {
    std::swap(daywisdom_, other->daywisdom_);
    std::swap(id_, other->id_);
    std::swap(curwisdom_, other->curwisdom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerDrinkWine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerDrinkWine_descriptor_;
  metadata.reflection = PBPlayerDrinkWine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionDonateMoney::kIdFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionDonateMoney::PBG2CFactionDonateMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionDonateMoney::InitAsDefaultInstance() {
}

PBG2CFactionDonateMoney::PBG2CFactionDonateMoney(const PBG2CFactionDonateMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionDonateMoney::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionDonateMoney::~PBG2CFactionDonateMoney() {
  SharedDtor();
}

void PBG2CFactionDonateMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFactionDonateMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionDonateMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionDonateMoney_descriptor_;
}

const PBG2CFactionDonateMoney& PBG2CFactionDonateMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionDonateMoney* PBG2CFactionDonateMoney::default_instance_ = NULL;

PBG2CFactionDonateMoney* PBG2CFactionDonateMoney::New() const {
  return new PBG2CFactionDonateMoney;
}

void PBG2CFactionDonateMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionDonateMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionDonateMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionDonateMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionDonateMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionDonateMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionDonateMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionDonateMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionDonateMoney::MergeFrom(const PBG2CFactionDonateMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionDonateMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionDonateMoney::CopyFrom(const PBG2CFactionDonateMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionDonateMoney::IsInitialized() const {
  
  return true;
}

void PBG2CFactionDonateMoney::Swap(PBG2CFactionDonateMoney* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionDonateMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionDonateMoney_descriptor_;
  metadata.reflection = PBG2CFactionDonateMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGAWFactionDonateMoney::kIdFieldNumber;
const int PBGAWFactionDonateMoney::kMoneyFieldNumber;
#endif  // !_MSC_VER

PBGAWFactionDonateMoney::PBGAWFactionDonateMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGAWFactionDonateMoney::InitAsDefaultInstance() {
  money_ = const_cast< ::PBMoneyConsume*>(&::PBMoneyConsume::default_instance());
}

PBGAWFactionDonateMoney::PBGAWFactionDonateMoney(const PBGAWFactionDonateMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGAWFactionDonateMoney::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  money_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGAWFactionDonateMoney::~PBGAWFactionDonateMoney() {
  SharedDtor();
}

void PBGAWFactionDonateMoney::SharedDtor() {
  if (this != default_instance_) {
    delete money_;
  }
}

void PBGAWFactionDonateMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGAWFactionDonateMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGAWFactionDonateMoney_descriptor_;
}

const PBGAWFactionDonateMoney& PBGAWFactionDonateMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBGAWFactionDonateMoney* PBGAWFactionDonateMoney::default_instance_ = NULL;

PBGAWFactionDonateMoney* PBGAWFactionDonateMoney::New() const {
  return new PBGAWFactionDonateMoney;
}

void PBGAWFactionDonateMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_money()) {
      if (money_ != NULL) money_->::PBMoneyConsume::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGAWFactionDonateMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_money;
        break;
      }
      
      // optional .PBMoneyConsume money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGAWFactionDonateMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional .PBMoneyConsume money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGAWFactionDonateMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional .PBMoneyConsume money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGAWFactionDonateMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional .PBMoneyConsume money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGAWFactionDonateMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGAWFactionDonateMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGAWFactionDonateMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGAWFactionDonateMoney::MergeFrom(const PBGAWFactionDonateMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_money()) {
      mutable_money()->::PBMoneyConsume::MergeFrom(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGAWFactionDonateMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGAWFactionDonateMoney::CopyFrom(const PBGAWFactionDonateMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGAWFactionDonateMoney::IsInitialized() const {
  
  return true;
}

void PBGAWFactionDonateMoney::Swap(PBGAWFactionDonateMoney* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGAWFactionDonateMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGAWFactionDonateMoney_descriptor_;
  metadata.reflection = PBGAWFactionDonateMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionDonateMoneyBroad::kMemberFieldNumber;
const int PBG2CFactionDonateMoneyBroad::kIdFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionDonateMoneyBroad::PBG2CFactionDonateMoneyBroad()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionDonateMoneyBroad::InitAsDefaultInstance() {
  member_ = const_cast< ::PBFactionMember*>(&::PBFactionMember::default_instance());
}

PBG2CFactionDonateMoneyBroad::PBG2CFactionDonateMoneyBroad(const PBG2CFactionDonateMoneyBroad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionDonateMoneyBroad::SharedCtor() {
  _cached_size_ = 0;
  member_ = NULL;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionDonateMoneyBroad::~PBG2CFactionDonateMoneyBroad() {
  SharedDtor();
}

void PBG2CFactionDonateMoneyBroad::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
  }
}

void PBG2CFactionDonateMoneyBroad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionDonateMoneyBroad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionDonateMoneyBroad_descriptor_;
}

const PBG2CFactionDonateMoneyBroad& PBG2CFactionDonateMoneyBroad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionDonateMoneyBroad* PBG2CFactionDonateMoneyBroad::default_instance_ = NULL;

PBG2CFactionDonateMoneyBroad* PBG2CFactionDonateMoneyBroad::New() const {
  return new PBG2CFactionDonateMoneyBroad;
}

void PBG2CFactionDonateMoneyBroad::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_member()) {
      if (member_ != NULL) member_->::PBFactionMember::Clear();
    }
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionDonateMoneyBroad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionMember member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionDonateMoneyBroad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionMember member = 1;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(), output);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionDonateMoneyBroad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionMember member = 1;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(), target);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionDonateMoneyBroad::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionMember member = 1;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }
    
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionDonateMoneyBroad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionDonateMoneyBroad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionDonateMoneyBroad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionDonateMoneyBroad::MergeFrom(const PBG2CFactionDonateMoneyBroad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member()) {
      mutable_member()->::PBFactionMember::MergeFrom(from.member());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionDonateMoneyBroad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionDonateMoneyBroad::CopyFrom(const PBG2CFactionDonateMoneyBroad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionDonateMoneyBroad::IsInitialized() const {
  
  return true;
}

void PBG2CFactionDonateMoneyBroad::Swap(PBG2CFactionDonateMoneyBroad* other) {
  if (other != this) {
    std::swap(member_, other->member_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionDonateMoneyBroad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionDonateMoneyBroad_descriptor_;
  metadata.reflection = PBG2CFactionDonateMoneyBroad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionCompleteTask::kTaskidFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionCompleteTask::PBC2GFactionCompleteTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionCompleteTask::InitAsDefaultInstance() {
}

PBC2GFactionCompleteTask::PBC2GFactionCompleteTask(const PBC2GFactionCompleteTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionCompleteTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionCompleteTask::~PBC2GFactionCompleteTask() {
  SharedDtor();
}

void PBC2GFactionCompleteTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFactionCompleteTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionCompleteTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionCompleteTask_descriptor_;
}

const PBC2GFactionCompleteTask& PBC2GFactionCompleteTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GFactionCompleteTask* PBC2GFactionCompleteTask::default_instance_ = NULL;

PBC2GFactionCompleteTask* PBC2GFactionCompleteTask::New() const {
  return new PBC2GFactionCompleteTask;
}

void PBC2GFactionCompleteTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionCompleteTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionCompleteTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionCompleteTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionCompleteTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionCompleteTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionCompleteTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionCompleteTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionCompleteTask::MergeFrom(const PBC2GFactionCompleteTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionCompleteTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionCompleteTask::CopyFrom(const PBC2GFactionCompleteTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionCompleteTask::IsInitialized() const {
  
  return true;
}

void PBC2GFactionCompleteTask::Swap(PBC2GFactionCompleteTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionCompleteTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionCompleteTask_descriptor_;
  metadata.reflection = PBC2GFactionCompleteTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFactionCompleteTask::kCompletetaskidFieldNumber;
const int PBG2CFactionCompleteTask::kNewtaskFieldNumber;
#endif  // !_MSC_VER

PBG2CFactionCompleteTask::PBG2CFactionCompleteTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFactionCompleteTask::InitAsDefaultInstance() {
  newtask_ = const_cast< ::PBPlayerFactionTask*>(&::PBPlayerFactionTask::default_instance());
}

PBG2CFactionCompleteTask::PBG2CFactionCompleteTask(const PBG2CFactionCompleteTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFactionCompleteTask::SharedCtor() {
  _cached_size_ = 0;
  completetaskid_ = 0u;
  newtask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFactionCompleteTask::~PBG2CFactionCompleteTask() {
  SharedDtor();
}

void PBG2CFactionCompleteTask::SharedDtor() {
  if (this != default_instance_) {
    delete newtask_;
  }
}

void PBG2CFactionCompleteTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFactionCompleteTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFactionCompleteTask_descriptor_;
}

const PBG2CFactionCompleteTask& PBG2CFactionCompleteTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBG2CFactionCompleteTask* PBG2CFactionCompleteTask::default_instance_ = NULL;

PBG2CFactionCompleteTask* PBG2CFactionCompleteTask::New() const {
  return new PBG2CFactionCompleteTask;
}

void PBG2CFactionCompleteTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    completetaskid_ = 0u;
    if (has_newtask()) {
      if (newtask_ != NULL) newtask_->::PBPlayerFactionTask::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFactionCompleteTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 completetaskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completetaskid_)));
          set_has_completetaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newtask;
        break;
      }
      
      // optional .PBPlayerFactionTask newtask = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newtask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newtask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFactionCompleteTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 completetaskid = 1;
  if (has_completetaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->completetaskid(), output);
  }
  
  // optional .PBPlayerFactionTask newtask = 2;
  if (has_newtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newtask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFactionCompleteTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 completetaskid = 1;
  if (has_completetaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->completetaskid(), target);
  }
  
  // optional .PBPlayerFactionTask newtask = 2;
  if (has_newtask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newtask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFactionCompleteTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 completetaskid = 1;
    if (has_completetaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completetaskid());
    }
    
    // optional .PBPlayerFactionTask newtask = 2;
    if (has_newtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newtask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFactionCompleteTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFactionCompleteTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFactionCompleteTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFactionCompleteTask::MergeFrom(const PBG2CFactionCompleteTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_completetaskid()) {
      set_completetaskid(from.completetaskid());
    }
    if (from.has_newtask()) {
      mutable_newtask()->::PBPlayerFactionTask::MergeFrom(from.newtask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFactionCompleteTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFactionCompleteTask::CopyFrom(const PBG2CFactionCompleteTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFactionCompleteTask::IsInitialized() const {
  
  return true;
}

void PBG2CFactionCompleteTask::Swap(PBG2CFactionCompleteTask* other) {
  if (other != this) {
    std::swap(completetaskid_, other->completetaskid_);
    std::swap(newtask_, other->newtask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFactionCompleteTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFactionCompleteTask_descriptor_;
  metadata.reflection = PBG2CFactionCompleteTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGAWFactionCompleteTask::kTaskidFieldNumber;
const int PBGAWFactionCompleteTask::kTackindexFieldNumber;
#endif  // !_MSC_VER

PBGAWFactionCompleteTask::PBGAWFactionCompleteTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGAWFactionCompleteTask::InitAsDefaultInstance() {
}

PBGAWFactionCompleteTask::PBGAWFactionCompleteTask(const PBGAWFactionCompleteTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGAWFactionCompleteTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  tackindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGAWFactionCompleteTask::~PBGAWFactionCompleteTask() {
  SharedDtor();
}

void PBGAWFactionCompleteTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGAWFactionCompleteTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGAWFactionCompleteTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGAWFactionCompleteTask_descriptor_;
}

const PBGAWFactionCompleteTask& PBGAWFactionCompleteTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBGAWFactionCompleteTask* PBGAWFactionCompleteTask::default_instance_ = NULL;

PBGAWFactionCompleteTask* PBGAWFactionCompleteTask::New() const {
  return new PBGAWFactionCompleteTask;
}

void PBGAWFactionCompleteTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    tackindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGAWFactionCompleteTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tackindex;
        break;
      }
      
      // optional uint32 tackindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tackindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tackindex_)));
          set_has_tackindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGAWFactionCompleteTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }
  
  // optional uint32 tackindex = 2;
  if (has_tackindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tackindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGAWFactionCompleteTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // optional uint32 tackindex = 2;
  if (has_tackindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tackindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGAWFactionCompleteTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }
    
    // optional uint32 tackindex = 2;
    if (has_tackindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tackindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGAWFactionCompleteTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGAWFactionCompleteTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGAWFactionCompleteTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGAWFactionCompleteTask::MergeFrom(const PBGAWFactionCompleteTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_tackindex()) {
      set_tackindex(from.tackindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGAWFactionCompleteTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGAWFactionCompleteTask::CopyFrom(const PBGAWFactionCompleteTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGAWFactionCompleteTask::IsInitialized() const {
  
  return true;
}

void PBGAWFactionCompleteTask::Swap(PBGAWFactionCompleteTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(tackindex_, other->tackindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGAWFactionCompleteTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGAWFactionCompleteTask_descriptor_;
  metadata.reflection = PBGAWFactionCompleteTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionAllotMoneyAsk::kCountFieldNumber;
const int PBC2GFactionAllotMoneyAsk::kMemberidFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionAllotMoneyAsk::PBC2GFactionAllotMoneyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionAllotMoneyAsk::InitAsDefaultInstance() {
}

PBC2GFactionAllotMoneyAsk::PBC2GFactionAllotMoneyAsk(const PBC2GFactionAllotMoneyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionAllotMoneyAsk::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionAllotMoneyAsk::~PBC2GFactionAllotMoneyAsk() {
  SharedDtor();
}

void PBC2GFactionAllotMoneyAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFactionAllotMoneyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionAllotMoneyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionAllotMoneyAsk_descriptor_;
}

const PBC2GFactionAllotMoneyAsk& PBC2GFactionAllotMoneyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GFactionAllotMoneyAsk* PBC2GFactionAllotMoneyAsk::default_instance_ = NULL;

PBC2GFactionAllotMoneyAsk* PBC2GFactionAllotMoneyAsk::New() const {
  return new PBC2GFactionAllotMoneyAsk;
}

void PBC2GFactionAllotMoneyAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  memberid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionAllotMoneyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_memberid;
        break;
      }
      
      // repeated uint32 memberid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_memberid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_memberid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_memberid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionAllotMoneyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }
  
  // repeated uint32 memberid = 2;
  for (int i = 0; i < this->memberid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->memberid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionAllotMoneyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }
  
  // repeated uint32 memberid = 2;
  for (int i = 0; i < this->memberid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->memberid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionAllotMoneyAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  // repeated uint32 memberid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->memberid(i));
    }
    total_size += 1 * this->memberid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionAllotMoneyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionAllotMoneyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionAllotMoneyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionAllotMoneyAsk::MergeFrom(const PBC2GFactionAllotMoneyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberid_.MergeFrom(from.memberid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionAllotMoneyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionAllotMoneyAsk::CopyFrom(const PBC2GFactionAllotMoneyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionAllotMoneyAsk::IsInitialized() const {
  
  return true;
}

void PBC2GFactionAllotMoneyAsk::Swap(PBC2GFactionAllotMoneyAsk* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    memberid_.Swap(&other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionAllotMoneyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionAllotMoneyAsk_descriptor_;
  metadata.reflection = PBC2GFactionAllotMoneyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionAllotItemAsk::kItemsnFieldNumber;
const int PBC2GFactionAllotItemAsk::kItemcountFieldNumber;
const int PBC2GFactionAllotItemAsk::kMemberidFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionAllotItemAsk::PBC2GFactionAllotItemAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionAllotItemAsk::InitAsDefaultInstance() {
}

PBC2GFactionAllotItemAsk::PBC2GFactionAllotItemAsk(const PBC2GFactionAllotItemAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionAllotItemAsk::SharedCtor() {
  _cached_size_ = 0;
  itemsn_ = GOOGLE_ULONGLONG(0);
  itemcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionAllotItemAsk::~PBC2GFactionAllotItemAsk() {
  SharedDtor();
}

void PBC2GFactionAllotItemAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFactionAllotItemAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionAllotItemAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionAllotItemAsk_descriptor_;
}

const PBC2GFactionAllotItemAsk& PBC2GFactionAllotItemAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBC2GFactionAllotItemAsk* PBC2GFactionAllotItemAsk::default_instance_ = NULL;

PBC2GFactionAllotItemAsk* PBC2GFactionAllotItemAsk::New() const {
  return new PBC2GFactionAllotItemAsk;
}

void PBC2GFactionAllotItemAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsn_ = GOOGLE_ULONGLONG(0);
    itemcount_ = 0u;
  }
  memberid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionAllotItemAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsn_)));
          set_has_itemsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemcount;
        break;
      }
      
      // optional uint32 itemcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memberid;
        break;
      }
      
      // repeated uint32 memberid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_memberid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_memberid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memberid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionAllotItemAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsn = 1;
  if (has_itemsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsn(), output);
  }
  
  // optional uint32 itemcount = 2;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemcount(), output);
  }
  
  // repeated uint32 memberid = 3;
  for (int i = 0; i < this->memberid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->memberid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionAllotItemAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsn = 1;
  if (has_itemsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsn(), target);
  }
  
  // optional uint32 itemcount = 2;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemcount(), target);
  }
  
  // repeated uint32 memberid = 3;
  for (int i = 0; i < this->memberid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->memberid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionAllotItemAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsn = 1;
    if (has_itemsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsn());
    }
    
    // optional uint32 itemcount = 2;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcount());
    }
    
  }
  // repeated uint32 memberid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->memberid(i));
    }
    total_size += 1 * this->memberid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionAllotItemAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionAllotItemAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionAllotItemAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionAllotItemAsk::MergeFrom(const PBC2GFactionAllotItemAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberid_.MergeFrom(from.memberid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsn()) {
      set_itemsn(from.itemsn());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionAllotItemAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionAllotItemAsk::CopyFrom(const PBC2GFactionAllotItemAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionAllotItemAsk::IsInitialized() const {
  
  return true;
}

void PBC2GFactionAllotItemAsk::Swap(PBC2GFactionAllotItemAsk* other) {
  if (other != this) {
    std::swap(itemsn_, other->itemsn_);
    std::swap(itemcount_, other->itemcount_);
    memberid_.Swap(&other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionAllotItemAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionAllotItemAsk_descriptor_;
  metadata.reflection = PBC2GFactionAllotItemAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionChallenger::kFactionbaseFieldNumber;
const int PBFactionChallenger::kApplytimeFieldNumber;
const int PBFactionChallenger::kIschallengerFieldNumber;
#endif  // !_MSC_VER

PBFactionChallenger::PBFactionChallenger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionChallenger::InitAsDefaultInstance() {
  factionbase_ = const_cast< ::PBFactionBase*>(&::PBFactionBase::default_instance());
}

PBFactionChallenger::PBFactionChallenger(const PBFactionChallenger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionChallenger::SharedCtor() {
  _cached_size_ = 0;
  factionbase_ = NULL;
  applytime_ = 0u;
  ischallenger_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionChallenger::~PBFactionChallenger() {
  SharedDtor();
}

void PBFactionChallenger::SharedDtor() {
  if (this != default_instance_) {
    delete factionbase_;
  }
}

void PBFactionChallenger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionChallenger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionChallenger_descriptor_;
}

const PBFactionChallenger& PBFactionChallenger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBFactionChallenger* PBFactionChallenger::default_instance_ = NULL;

PBFactionChallenger* PBFactionChallenger::New() const {
  return new PBFactionChallenger;
}

void PBFactionChallenger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_factionbase()) {
      if (factionbase_ != NULL) factionbase_->::PBFactionBase::Clear();
    }
    applytime_ = 0u;
    ischallenger_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionChallenger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionBase factionbase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_factionbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_applytime;
        break;
      }
      
      // optional uint32 applytime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applytime_)));
          set_has_applytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ischallenger;
        break;
      }
      
      // optional bool ischallenger = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ischallenger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischallenger_)));
          set_has_ischallenger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionChallenger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionBase factionbase = 1;
  if (has_factionbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->factionbase(), output);
  }
  
  // optional uint32 applytime = 2;
  if (has_applytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->applytime(), output);
  }
  
  // optional bool ischallenger = 3;
  if (has_ischallenger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ischallenger(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionChallenger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionBase factionbase = 1;
  if (has_factionbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->factionbase(), target);
  }
  
  // optional uint32 applytime = 2;
  if (has_applytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->applytime(), target);
  }
  
  // optional bool ischallenger = 3;
  if (has_ischallenger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ischallenger(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionChallenger::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionBase factionbase = 1;
    if (has_factionbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->factionbase());
    }
    
    // optional uint32 applytime = 2;
    if (has_applytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applytime());
    }
    
    // optional bool ischallenger = 3;
    if (has_ischallenger()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionChallenger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionChallenger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionChallenger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionChallenger::MergeFrom(const PBFactionChallenger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionbase()) {
      mutable_factionbase()->::PBFactionBase::MergeFrom(from.factionbase());
    }
    if (from.has_applytime()) {
      set_applytime(from.applytime());
    }
    if (from.has_ischallenger()) {
      set_ischallenger(from.ischallenger());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionChallenger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionChallenger::CopyFrom(const PBFactionChallenger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionChallenger::IsInitialized() const {
  
  return true;
}

void PBFactionChallenger::Swap(PBFactionChallenger* other) {
  if (other != this) {
    std::swap(factionbase_, other->factionbase_);
    std::swap(applytime_, other->applytime_);
    std::swap(ischallenger_, other->ischallenger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionChallenger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionChallenger_descriptor_;
  metadata.reflection = PBFactionChallenger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBManorCpymapInfo::kSceneidFieldNumber;
const int PBManorCpymapInfo::kDynidFieldNumber;
const int PBManorCpymapInfo::kCellidFieldNumber;
const int PBManorCpymapInfo::kRegionidFieldNumber;
#endif  // !_MSC_VER

PBManorCpymapInfo::PBManorCpymapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBManorCpymapInfo::InitAsDefaultInstance() {
}

PBManorCpymapInfo::PBManorCpymapInfo(const PBManorCpymapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBManorCpymapInfo::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  dynid_ = GOOGLE_ULONGLONG(0);
  cellid_ = 0u;
  regionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBManorCpymapInfo::~PBManorCpymapInfo() {
  SharedDtor();
}

void PBManorCpymapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBManorCpymapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBManorCpymapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBManorCpymapInfo_descriptor_;
}

const PBManorCpymapInfo& PBManorCpymapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBManorCpymapInfo* PBManorCpymapInfo::default_instance_ = NULL;

PBManorCpymapInfo* PBManorCpymapInfo::New() const {
  return new PBManorCpymapInfo;
}

void PBManorCpymapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    dynid_ = GOOGLE_ULONGLONG(0);
    cellid_ = 0u;
    regionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBManorCpymapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dynid;
        break;
      }
      
      // optional uint64 dynid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynid_)));
          set_has_dynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cellid;
        break;
      }
      
      // optional uint32 cellid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_regionid;
        break;
      }
      
      // optional uint32 regionid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regionid_)));
          set_has_regionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBManorCpymapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint64 dynid = 2;
  if (has_dynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dynid(), output);
  }
  
  // optional uint32 cellid = 3;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cellid(), output);
  }
  
  // optional uint32 regionid = 4;
  if (has_regionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->regionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBManorCpymapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint64 dynid = 2;
  if (has_dynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dynid(), target);
  }
  
  // optional uint32 cellid = 3;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cellid(), target);
  }
  
  // optional uint32 regionid = 4;
  if (has_regionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->regionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBManorCpymapInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint64 dynid = 2;
    if (has_dynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynid());
    }
    
    // optional uint32 cellid = 3;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }
    
    // optional uint32 regionid = 4;
    if (has_regionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBManorCpymapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBManorCpymapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBManorCpymapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBManorCpymapInfo::MergeFrom(const PBManorCpymapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_dynid()) {
      set_dynid(from.dynid());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_regionid()) {
      set_regionid(from.regionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBManorCpymapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBManorCpymapInfo::CopyFrom(const PBManorCpymapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBManorCpymapInfo::IsInitialized() const {
  
  return true;
}

void PBManorCpymapInfo::Swap(PBManorCpymapInfo* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(dynid_, other->dynid_);
    std::swap(cellid_, other->cellid_);
    std::swap(regionid_, other->regionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBManorCpymapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBManorCpymapInfo_descriptor_;
  metadata.reflection = PBManorCpymapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBManorInfo::kManoridFieldNumber;
const int PBManorInfo::kStatusFieldNumber;
const int PBManorInfo::kOwnerFieldNumber;
const int PBManorInfo::kChallengersFieldNumber;
const int PBManorInfo::kBattlefieldsFieldNumber;
const int PBManorInfo::kDefenderlobbyFieldNumber;
const int PBManorInfo::kChallengerlobbyFieldNumber;
const int PBManorInfo::kEliteplayersFieldNumber;
const int PBManorInfo::kCancleapplycdFieldNumber;
#endif  // !_MSC_VER

PBManorInfo::PBManorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBManorInfo::InitAsDefaultInstance() {
  owner_ = const_cast< ::PBFactionBase*>(&::PBFactionBase::default_instance());
  defenderlobby_ = const_cast< ::PBManorCpymapInfo*>(&::PBManorCpymapInfo::default_instance());
  challengerlobby_ = const_cast< ::PBManorCpymapInfo*>(&::PBManorCpymapInfo::default_instance());
}

PBManorInfo::PBManorInfo(const PBManorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBManorInfo::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  status_ = 0u;
  owner_ = NULL;
  defenderlobby_ = NULL;
  challengerlobby_ = NULL;
  cancleapplycd_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBManorInfo::~PBManorInfo() {
  SharedDtor();
}

void PBManorInfo::SharedDtor() {
  if (this != default_instance_) {
    delete owner_;
    delete defenderlobby_;
    delete challengerlobby_;
  }
}

void PBManorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBManorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBManorInfo_descriptor_;
}

const PBManorInfo& PBManorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBManorInfo* PBManorInfo::default_instance_ = NULL;

PBManorInfo* PBManorInfo::New() const {
  return new PBManorInfo;
}

void PBManorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    status_ = 0u;
    if (has_owner()) {
      if (owner_ != NULL) owner_->::PBFactionBase::Clear();
    }
    if (has_defenderlobby()) {
      if (defenderlobby_ != NULL) defenderlobby_->::PBManorCpymapInfo::Clear();
    }
    if (has_challengerlobby()) {
      if (challengerlobby_ != NULL) challengerlobby_->::PBManorCpymapInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cancleapplycd_ = GOOGLE_ULONGLONG(0);
  }
  challengers_.Clear();
  battlefields_.Clear();
  eliteplayers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBManorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_owner;
        break;
      }
      
      // optional .PBFactionBase owner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_challengers;
        break;
      }
      
      // repeated .PBFactionChallenger challengers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challengers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challengers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_challengers;
        if (input->ExpectTag(42)) goto parse_battlefields;
        break;
      }
      
      // repeated .PBManorCpymapInfo battlefields = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battlefields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battlefields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_battlefields;
        if (input->ExpectTag(50)) goto parse_defenderlobby;
        break;
      }
      
      // optional .PBManorCpymapInfo defenderlobby = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defenderlobby:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defenderlobby()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_challengerlobby;
        break;
      }
      
      // optional .PBManorCpymapInfo challengerlobby = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challengerlobby:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challengerlobby()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_eliteplayers;
        break;
      }
      
      // repeated uint32 eliteplayers = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eliteplayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_eliteplayers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_eliteplayers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_eliteplayers;
        if (input->ExpectTag(72)) goto parse_cancleapplycd;
        break;
      }
      
      // optional uint64 cancleapplycd = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cancleapplycd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cancleapplycd_)));
          set_has_cancleapplycd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBManorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }
  
  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }
  
  // optional .PBFactionBase owner = 3;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->owner(), output);
  }
  
  // repeated .PBFactionChallenger challengers = 4;
  for (int i = 0; i < this->challengers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->challengers(i), output);
  }
  
  // repeated .PBManorCpymapInfo battlefields = 5;
  for (int i = 0; i < this->battlefields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->battlefields(i), output);
  }
  
  // optional .PBManorCpymapInfo defenderlobby = 6;
  if (has_defenderlobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->defenderlobby(), output);
  }
  
  // optional .PBManorCpymapInfo challengerlobby = 7;
  if (has_challengerlobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->challengerlobby(), output);
  }
  
  // repeated uint32 eliteplayers = 8;
  for (int i = 0; i < this->eliteplayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->eliteplayers(i), output);
  }
  
  // optional uint64 cancleapplycd = 9;
  if (has_cancleapplycd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->cancleapplycd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBManorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }
  
  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }
  
  // optional .PBFactionBase owner = 3;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->owner(), target);
  }
  
  // repeated .PBFactionChallenger challengers = 4;
  for (int i = 0; i < this->challengers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->challengers(i), target);
  }
  
  // repeated .PBManorCpymapInfo battlefields = 5;
  for (int i = 0; i < this->battlefields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->battlefields(i), target);
  }
  
  // optional .PBManorCpymapInfo defenderlobby = 6;
  if (has_defenderlobby()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->defenderlobby(), target);
  }
  
  // optional .PBManorCpymapInfo challengerlobby = 7;
  if (has_challengerlobby()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->challengerlobby(), target);
  }
  
  // repeated uint32 eliteplayers = 8;
  for (int i = 0; i < this->eliteplayers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->eliteplayers(i), target);
  }
  
  // optional uint64 cancleapplycd = 9;
  if (has_cancleapplycd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->cancleapplycd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBManorInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorid = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }
    
    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // optional .PBFactionBase owner = 3;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner());
    }
    
    // optional .PBManorCpymapInfo defenderlobby = 6;
    if (has_defenderlobby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defenderlobby());
    }
    
    // optional .PBManorCpymapInfo challengerlobby = 7;
    if (has_challengerlobby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challengerlobby());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 cancleapplycd = 9;
    if (has_cancleapplycd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cancleapplycd());
    }
    
  }
  // repeated .PBFactionChallenger challengers = 4;
  total_size += 1 * this->challengers_size();
  for (int i = 0; i < this->challengers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->challengers(i));
  }
  
  // repeated .PBManorCpymapInfo battlefields = 5;
  total_size += 1 * this->battlefields_size();
  for (int i = 0; i < this->battlefields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlefields(i));
  }
  
  // repeated uint32 eliteplayers = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->eliteplayers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->eliteplayers(i));
    }
    total_size += 1 * this->eliteplayers_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBManorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBManorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBManorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBManorInfo::MergeFrom(const PBManorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  challengers_.MergeFrom(from.challengers_);
  battlefields_.MergeFrom(from.battlefields_);
  eliteplayers_.MergeFrom(from.eliteplayers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_owner()) {
      mutable_owner()->::PBFactionBase::MergeFrom(from.owner());
    }
    if (from.has_defenderlobby()) {
      mutable_defenderlobby()->::PBManorCpymapInfo::MergeFrom(from.defenderlobby());
    }
    if (from.has_challengerlobby()) {
      mutable_challengerlobby()->::PBManorCpymapInfo::MergeFrom(from.challengerlobby());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cancleapplycd()) {
      set_cancleapplycd(from.cancleapplycd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBManorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBManorInfo::CopyFrom(const PBManorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBManorInfo::IsInitialized() const {
  
  return true;
}

void PBManorInfo::Swap(PBManorInfo* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(status_, other->status_);
    std::swap(owner_, other->owner_);
    challengers_.Swap(&other->challengers_);
    battlefields_.Swap(&other->battlefields_);
    std::swap(defenderlobby_, other->defenderlobby_);
    std::swap(challengerlobby_, other->challengerlobby_);
    eliteplayers_.Swap(&other->eliteplayers_);
    std::swap(cancleapplycd_, other->cancleapplycd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBManorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBManorInfo_descriptor_;
  metadata.reflection = PBManorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAllManor::kManorsFieldNumber;
#endif  // !_MSC_VER

PBAllManor::PBAllManor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAllManor::InitAsDefaultInstance() {
}

PBAllManor::PBAllManor(const PBAllManor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAllManor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAllManor::~PBAllManor() {
  SharedDtor();
}

void PBAllManor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAllManor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAllManor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAllManor_descriptor_;
}

const PBAllManor& PBAllManor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBAllManor* PBAllManor::default_instance_ = NULL;

PBAllManor* PBAllManor::New() const {
  return new PBAllManor;
}

void PBAllManor::Clear() {
  manors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAllManor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBManorInfo manors = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manors;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAllManor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBManorInfo manors = 1;
  for (int i = 0; i < this->manors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manors(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAllManor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBManorInfo manors = 1;
  for (int i = 0; i < this->manors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manors(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAllManor::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBManorInfo manors = 1;
  total_size += 1 * this->manors_size();
  for (int i = 0; i < this->manors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manors(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAllManor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAllManor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAllManor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAllManor::MergeFrom(const PBAllManor& from) {
  GOOGLE_CHECK_NE(&from, this);
  manors_.MergeFrom(from.manors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAllManor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAllManor::CopyFrom(const PBAllManor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAllManor::IsInitialized() const {
  
  return true;
}

void PBAllManor::Swap(PBAllManor* other) {
  if (other != this) {
    manors_.Swap(&other->manors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAllManor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAllManor_descriptor_;
  metadata.reflection = PBAllManor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBManorBattlefieldPlayerScore::kJobFieldNumber;
const int PBManorBattlefieldPlayerScore::kNameFieldNumber;
const int PBManorBattlefieldPlayerScore::kScoreFieldNumber;
const int PBManorBattlefieldPlayerScore::kKillFieldNumber;
const int PBManorBattlefieldPlayerScore::kDeadFieldNumber;
const int PBManorBattlefieldPlayerScore::kIschallengerFieldNumber;
const int PBManorBattlefieldPlayerScore::kPlayeridFieldNumber;
const int PBManorBattlefieldPlayerScore::kTakehurtFieldNumber;
const int PBManorBattlefieldPlayerScore::kAssistkillFieldNumber;
#endif  // !_MSC_VER

PBManorBattlefieldPlayerScore::PBManorBattlefieldPlayerScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBManorBattlefieldPlayerScore::InitAsDefaultInstance() {
}

PBManorBattlefieldPlayerScore::PBManorBattlefieldPlayerScore(const PBManorBattlefieldPlayerScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBManorBattlefieldPlayerScore::SharedCtor() {
  _cached_size_ = 0;
  job_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0u;
  kill_ = 0u;
  dead_ = 0u;
  ischallenger_ = false;
  playerid_ = 0u;
  takehurt_ = GOOGLE_ULONGLONG(0);
  assistkill_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBManorBattlefieldPlayerScore::~PBManorBattlefieldPlayerScore() {
  SharedDtor();
}

void PBManorBattlefieldPlayerScore::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBManorBattlefieldPlayerScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBManorBattlefieldPlayerScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBManorBattlefieldPlayerScore_descriptor_;
}

const PBManorBattlefieldPlayerScore& PBManorBattlefieldPlayerScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBManorBattlefieldPlayerScore* PBManorBattlefieldPlayerScore::default_instance_ = NULL;

PBManorBattlefieldPlayerScore* PBManorBattlefieldPlayerScore::New() const {
  return new PBManorBattlefieldPlayerScore;
}

void PBManorBattlefieldPlayerScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    job_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0u;
    kill_ = 0u;
    dead_ = 0u;
    ischallenger_ = false;
    playerid_ = 0u;
    takehurt_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    assistkill_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBManorBattlefieldPlayerScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 job = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill;
        break;
      }
      
      // optional uint32 kill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dead;
        break;
      }
      
      // optional uint32 dead = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_)));
          set_has_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ischallenger;
        break;
      }
      
      // optional bool ischallenger = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ischallenger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischallenger_)));
          set_has_ischallenger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_takehurt;
        break;
      }
      
      // optional uint64 takehurt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_takehurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &takehurt_)));
          set_has_takehurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_assistkill;
        break;
      }
      
      // optional uint32 assistkill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assistkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assistkill_)));
          set_has_assistkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBManorBattlefieldPlayerScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 job = 1;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->job(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }
  
  // optional uint32 kill = 4;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kill(), output);
  }
  
  // optional uint32 dead = 5;
  if (has_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dead(), output);
  }
  
  // optional bool ischallenger = 6;
  if (has_ischallenger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ischallenger(), output);
  }
  
  // optional uint32 playerid = 7;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->playerid(), output);
  }
  
  // optional uint64 takehurt = 8;
  if (has_takehurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->takehurt(), output);
  }
  
  // optional uint32 assistkill = 9;
  if (has_assistkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->assistkill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBManorBattlefieldPlayerScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 job = 1;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->job(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }
  
  // optional uint32 kill = 4;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kill(), target);
  }
  
  // optional uint32 dead = 5;
  if (has_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dead(), target);
  }
  
  // optional bool ischallenger = 6;
  if (has_ischallenger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ischallenger(), target);
  }
  
  // optional uint32 playerid = 7;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->playerid(), target);
  }
  
  // optional uint64 takehurt = 8;
  if (has_takehurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->takehurt(), target);
  }
  
  // optional uint32 assistkill = 9;
  if (has_assistkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->assistkill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBManorBattlefieldPlayerScore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 job = 1;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
    // optional uint32 kill = 4;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill());
    }
    
    // optional uint32 dead = 5;
    if (has_dead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead());
    }
    
    // optional bool ischallenger = 6;
    if (has_ischallenger()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 playerid = 7;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint64 takehurt = 8;
    if (has_takehurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->takehurt());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 assistkill = 9;
    if (has_assistkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assistkill());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBManorBattlefieldPlayerScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBManorBattlefieldPlayerScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBManorBattlefieldPlayerScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBManorBattlefieldPlayerScore::MergeFrom(const PBManorBattlefieldPlayerScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_dead()) {
      set_dead(from.dead());
    }
    if (from.has_ischallenger()) {
      set_ischallenger(from.ischallenger());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_takehurt()) {
      set_takehurt(from.takehurt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_assistkill()) {
      set_assistkill(from.assistkill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBManorBattlefieldPlayerScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBManorBattlefieldPlayerScore::CopyFrom(const PBManorBattlefieldPlayerScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBManorBattlefieldPlayerScore::IsInitialized() const {
  
  return true;
}

void PBManorBattlefieldPlayerScore::Swap(PBManorBattlefieldPlayerScore* other) {
  if (other != this) {
    std::swap(job_, other->job_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(kill_, other->kill_);
    std::swap(dead_, other->dead_);
    std::swap(ischallenger_, other->ischallenger_);
    std::swap(playerid_, other->playerid_);
    std::swap(takehurt_, other->takehurt_);
    std::swap(assistkill_, other->assistkill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBManorBattlefieldPlayerScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBManorBattlefieldPlayerScore_descriptor_;
  metadata.reflection = PBManorBattlefieldPlayerScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBManorBattleFieldReport::kFactionidFieldNumber;
const int PBManorBattleFieldReport::kCountFieldNumber;
const int PBManorBattleFieldReport::kPlayerscoresFieldNumber;
const int PBManorBattleFieldReport::kScoreFieldNumber;
#endif  // !_MSC_VER

PBManorBattleFieldReport::PBManorBattleFieldReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBManorBattleFieldReport::InitAsDefaultInstance() {
}

PBManorBattleFieldReport::PBManorBattleFieldReport(const PBManorBattleFieldReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBManorBattleFieldReport::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  count_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBManorBattleFieldReport::~PBManorBattleFieldReport() {
  SharedDtor();
}

void PBManorBattleFieldReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBManorBattleFieldReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBManorBattleFieldReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBManorBattleFieldReport_descriptor_;
}

const PBManorBattleFieldReport& PBManorBattleFieldReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBManorBattleFieldReport* PBManorBattleFieldReport::default_instance_ = NULL;

PBManorBattleFieldReport* PBManorBattleFieldReport::New() const {
  return new PBManorBattleFieldReport;
}

void PBManorBattleFieldReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    count_ = 0u;
    score_ = 0u;
  }
  playerscores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBManorBattleFieldReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerscores;
        break;
      }
      
      // repeated .PBManorBattlefieldPlayerScore playerscores = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerscores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerscores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerscores;
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBManorBattleFieldReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // repeated .PBManorBattlefieldPlayerScore playerscores = 3;
  for (int i = 0; i < this->playerscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerscores(i), output);
  }
  
  // optional uint32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBManorBattleFieldReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // repeated .PBManorBattlefieldPlayerScore playerscores = 3;
  for (int i = 0; i < this->playerscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerscores(i), target);
  }
  
  // optional uint32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBManorBattleFieldReport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
  }
  // repeated .PBManorBattlefieldPlayerScore playerscores = 3;
  total_size += 1 * this->playerscores_size();
  for (int i = 0; i < this->playerscores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerscores(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBManorBattleFieldReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBManorBattleFieldReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBManorBattleFieldReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBManorBattleFieldReport::MergeFrom(const PBManorBattleFieldReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerscores_.MergeFrom(from.playerscores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBManorBattleFieldReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBManorBattleFieldReport::CopyFrom(const PBManorBattleFieldReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBManorBattleFieldReport::IsInitialized() const {
  
  return true;
}

void PBManorBattleFieldReport::Swap(PBManorBattleFieldReport* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(count_, other->count_);
    playerscores_.Swap(&other->playerscores_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBManorBattleFieldReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBManorBattleFieldReport_descriptor_;
  metadata.reflection = PBManorBattleFieldReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBW2GFactionSyn::kNameFieldNumber;
const int PBW2GFactionSyn::kFactionidFieldNumber;
const int PBW2GFactionSyn::kPlayeridFieldNumber;
const int PBW2GFactionSyn::kLeaderFieldNumber;
const int PBW2GFactionSyn::kUnionFieldNumber;
const int PBW2GFactionSyn::kCorpsFieldNumber;
const int PBW2GFactionSyn::kLevelFieldNumber;
const int PBW2GFactionSyn::kJobFieldNumber;
const int PBW2GFactionSyn::kUnionnameFieldNumber;
const int PBW2GFactionSyn::kBannerFieldNumber;
#endif  // !_MSC_VER

PBW2GFactionSyn::PBW2GFactionSyn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2GFactionSyn::InitAsDefaultInstance() {
}

PBW2GFactionSyn::PBW2GFactionSyn(const PBW2GFactionSyn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2GFactionSyn::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  factionid_ = 0u;
  playerid_ = 0u;
  leader_ = 0u;
  union__ = 0u;
  corps_ = 0u;
  level_ = 0u;
  job_ = 0u;
  unionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  banner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2GFactionSyn::~PBW2GFactionSyn() {
  SharedDtor();
}

void PBW2GFactionSyn::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (unionname_ != &::google::protobuf::internal::kEmptyString) {
    delete unionname_;
  }
  if (banner_ != &::google::protobuf::internal::kEmptyString) {
    delete banner_;
  }
  if (this != default_instance_) {
  }
}

void PBW2GFactionSyn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2GFactionSyn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2GFactionSyn_descriptor_;
}

const PBW2GFactionSyn& PBW2GFactionSyn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBW2GFactionSyn* PBW2GFactionSyn::default_instance_ = NULL;

PBW2GFactionSyn* PBW2GFactionSyn::New() const {
  return new PBW2GFactionSyn;
}

void PBW2GFactionSyn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    factionid_ = 0u;
    playerid_ = 0u;
    leader_ = 0u;
    union__ = 0u;
    corps_ = 0u;
    level_ = 0u;
    job_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_unionname()) {
      if (unionname_ != &::google::protobuf::internal::kEmptyString) {
        unionname_->clear();
      }
    }
    if (has_banner()) {
      if (banner_ != &::google::protobuf::internal::kEmptyString) {
        banner_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2GFactionSyn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_factionid;
        break;
      }
      
      // optional uint32 factionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leader;
        break;
      }
      
      // optional uint32 leader = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_union;
        break;
      }
      
      // optional uint32 union = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_union:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &union__)));
          set_has_union_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_corps;
        break;
      }
      
      // optional uint32 corps = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corps_)));
          set_has_corps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_job;
        break;
      }
      
      // optional uint32 job = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_unionname;
        break;
      }
      
      // optional string unionname = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unionname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unionname().data(), this->unionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_banner;
        break;
      }
      
      // optional string banner = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->banner().data(), this->banner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2GFactionSyn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional uint32 factionid = 2;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->factionid(), output);
  }
  
  // optional uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }
  
  // optional uint32 leader = 4;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leader(), output);
  }
  
  // optional uint32 union = 5;
  if (has_union_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->union_(), output);
  }
  
  // optional uint32 corps = 6;
  if (has_corps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->corps(), output);
  }
  
  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }
  
  // optional uint32 job = 8;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->job(), output);
  }
  
  // optional string unionname = 9;
  if (has_unionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unionname().data(), this->unionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->unionname(), output);
  }
  
  // optional string banner = 10;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banner().data(), this->banner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->banner(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2GFactionSyn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional uint32 factionid = 2;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->factionid(), target);
  }
  
  // optional uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }
  
  // optional uint32 leader = 4;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leader(), target);
  }
  
  // optional uint32 union = 5;
  if (has_union_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->union_(), target);
  }
  
  // optional uint32 corps = 6;
  if (has_corps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->corps(), target);
  }
  
  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }
  
  // optional uint32 job = 8;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->job(), target);
  }
  
  // optional string unionname = 9;
  if (has_unionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unionname().data(), this->unionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->unionname(), target);
  }
  
  // optional string banner = 10;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banner().data(), this->banner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->banner(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2GFactionSyn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 factionid = 2;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
    // optional uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 leader = 4;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader());
    }
    
    // optional uint32 union = 5;
    if (has_union_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->union_());
    }
    
    // optional uint32 corps = 6;
    if (has_corps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corps());
    }
    
    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 job = 8;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string unionname = 9;
    if (has_unionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unionname());
    }
    
    // optional string banner = 10;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banner());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2GFactionSyn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2GFactionSyn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2GFactionSyn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2GFactionSyn::MergeFrom(const PBW2GFactionSyn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_union_()) {
      set_union_(from.union_());
    }
    if (from.has_corps()) {
      set_corps(from.corps());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_unionname()) {
      set_unionname(from.unionname());
    }
    if (from.has_banner()) {
      set_banner(from.banner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2GFactionSyn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2GFactionSyn::CopyFrom(const PBW2GFactionSyn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2GFactionSyn::IsInitialized() const {
  
  return true;
}

void PBW2GFactionSyn::Swap(PBW2GFactionSyn* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(factionid_, other->factionid_);
    std::swap(playerid_, other->playerid_);
    std::swap(leader_, other->leader_);
    std::swap(union__, other->union__);
    std::swap(corps_, other->corps_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(unionname_, other->unionname_);
    std::swap(banner_, other->banner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2GFactionSyn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2GFactionSyn_descriptor_;
  metadata.reflection = PBW2GFactionSyn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGL2WFactionSynPlayer::kBaseFieldNumber;
const int PBGL2WFactionSynPlayer::kFactionidFieldNumber;
#endif  // !_MSC_VER

PBGL2WFactionSynPlayer::PBGL2WFactionSynPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGL2WFactionSynPlayer::InitAsDefaultInstance() {
  base_ = const_cast< ::PBFactionMemberBase*>(&::PBFactionMemberBase::default_instance());
}

PBGL2WFactionSynPlayer::PBGL2WFactionSynPlayer(const PBGL2WFactionSynPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGL2WFactionSynPlayer::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  factionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGL2WFactionSynPlayer::~PBGL2WFactionSynPlayer() {
  SharedDtor();
}

void PBGL2WFactionSynPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void PBGL2WFactionSynPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGL2WFactionSynPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGL2WFactionSynPlayer_descriptor_;
}

const PBGL2WFactionSynPlayer& PBGL2WFactionSynPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBGL2WFactionSynPlayer* PBGL2WFactionSynPlayer::default_instance_ = NULL;

PBGL2WFactionSynPlayer* PBGL2WFactionSynPlayer::New() const {
  return new PBGL2WFactionSynPlayer;
}

void PBGL2WFactionSynPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::PBFactionMemberBase::Clear();
    }
    factionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGL2WFactionSynPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionMemberBase base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_factionid;
        break;
      }
      
      // optional uint32 factionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGL2WFactionSynPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionMemberBase base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional uint32 factionid = 2;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->factionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGL2WFactionSynPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionMemberBase base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional uint32 factionid = 2;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->factionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGL2WFactionSynPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionMemberBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional uint32 factionid = 2;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGL2WFactionSynPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGL2WFactionSynPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGL2WFactionSynPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGL2WFactionSynPlayer::MergeFrom(const PBGL2WFactionSynPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::PBFactionMemberBase::MergeFrom(from.base());
    }
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGL2WFactionSynPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGL2WFactionSynPlayer::CopyFrom(const PBGL2WFactionSynPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGL2WFactionSynPlayer::IsInitialized() const {
  
  return true;
}

void PBGL2WFactionSynPlayer::Swap(PBGL2WFactionSynPlayer* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(factionid_, other->factionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGL2WFactionSynPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGL2WFactionSynPlayer_descriptor_;
  metadata.reflection = PBGL2WFactionSynPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCorpsOfflineChangeJob::kDeljobFieldNumber;
const int PBCorpsOfflineChangeJob::kAddjobFieldNumber;
#endif  // !_MSC_VER

PBCorpsOfflineChangeJob::PBCorpsOfflineChangeJob()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCorpsOfflineChangeJob::InitAsDefaultInstance() {
}

PBCorpsOfflineChangeJob::PBCorpsOfflineChangeJob(const PBCorpsOfflineChangeJob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCorpsOfflineChangeJob::SharedCtor() {
  _cached_size_ = 0;
  deljob_ = 0u;
  addjob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCorpsOfflineChangeJob::~PBCorpsOfflineChangeJob() {
  SharedDtor();
}

void PBCorpsOfflineChangeJob::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCorpsOfflineChangeJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCorpsOfflineChangeJob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCorpsOfflineChangeJob_descriptor_;
}

const PBCorpsOfflineChangeJob& PBCorpsOfflineChangeJob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Faction_2eproto();  return *default_instance_;
}

PBCorpsOfflineChangeJob* PBCorpsOfflineChangeJob::default_instance_ = NULL;

PBCorpsOfflineChangeJob* PBCorpsOfflineChangeJob::New() const {
  return new PBCorpsOfflineChangeJob;
}

void PBCorpsOfflineChangeJob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deljob_ = 0u;
    addjob_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCorpsOfflineChangeJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deljob = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deljob_)));
          set_has_deljob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addjob;
        break;
      }
      
      // optional uint32 addjob = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addjob_)));
          set_has_addjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCorpsOfflineChangeJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 deljob = 1;
  if (has_deljob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deljob(), output);
  }
  
  // optional uint32 addjob = 2;
  if (has_addjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addjob(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCorpsOfflineChangeJob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 deljob = 1;
  if (has_deljob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deljob(), target);
  }
  
  // optional uint32 addjob = 2;
  if (has_addjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addjob(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCorpsOfflineChangeJob::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deljob = 1;
    if (has_deljob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deljob());
    }
    
    // optional uint32 addjob = 2;
    if (has_addjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addjob());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCorpsOfflineChangeJob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCorpsOfflineChangeJob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCorpsOfflineChangeJob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCorpsOfflineChangeJob::MergeFrom(const PBCorpsOfflineChangeJob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deljob()) {
      set_deljob(from.deljob());
    }
    if (from.has_addjob()) {
      set_addjob(from.addjob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCorpsOfflineChangeJob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCorpsOfflineChangeJob::CopyFrom(const PBCorpsOfflineChangeJob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCorpsOfflineChangeJob::IsInitialized() const {
  
  return true;
}

void PBCorpsOfflineChangeJob::Swap(PBCorpsOfflineChangeJob* other) {
  if (other != this) {
    std::swap(deljob_, other->deljob_);
    std::swap(addjob_, other->addjob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCorpsOfflineChangeJob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCorpsOfflineChangeJob_descriptor_;
  metadata.reflection = PBCorpsOfflineChangeJob_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
