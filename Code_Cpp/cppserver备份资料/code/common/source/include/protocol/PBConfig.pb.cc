// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBCfg_MysqlDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_MysqlDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Res_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Gamelog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Gamelog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Reportlog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Reportlog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Switch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Switch_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_NetTimeout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_NetTimeout_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Net_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Net_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_ServerCommon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_ServerCommon_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_World_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_World_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Game_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_DB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_DB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Global_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Global_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Bigworld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Bigworld_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Rooter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Rooter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Dip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Dip_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_RobotServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_RobotServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_RobotClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_RobotClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Root_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Root_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Xls2Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Xls2Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCfg_Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCfg_Record_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBConfig_2eproto() {
  protobuf_AddDesc_PBConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBConfig.proto");
  GOOGLE_CHECK(file != NULL);
  PBCfg_MysqlDB_descriptor_ = file->message_type(0);
  static const int PBCfg_MysqlDB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_MysqlDB, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_MysqlDB, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_MysqlDB, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_MysqlDB, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_MysqlDB, password_),
  };
  PBCfg_MysqlDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_MysqlDB_descriptor_,
      PBCfg_MysqlDB::default_instance_,
      PBCfg_MysqlDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_MysqlDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_MysqlDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_MysqlDB));
  PBCfg_Res_descriptor_ = file->message_type(1);
  static const int PBCfg_Res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Res, datapath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Res, clientdatapath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Res, scenepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Res, aipath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Res, scriptpath_),
  };
  PBCfg_Res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Res_descriptor_,
      PBCfg_Res::default_instance_,
      PBCfg_Res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Res));
  PBCfg_Gamelog_descriptor_ = file->message_type(2);
  static const int PBCfg_Gamelog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Gamelog, sendgamelog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Gamelog, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Gamelog, port_),
  };
  PBCfg_Gamelog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Gamelog_descriptor_,
      PBCfg_Gamelog::default_instance_,
      PBCfg_Gamelog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Gamelog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Gamelog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Gamelog));
  PBCfg_Reportlog_descriptor_ = file->message_type(3);
  static const int PBCfg_Reportlog_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Reportlog, sendloadlog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Reportlog, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Reportlog, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Reportlog, sep_),
  };
  PBCfg_Reportlog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Reportlog_descriptor_,
      PBCfg_Reportlog::default_instance_,
      PBCfg_Reportlog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Reportlog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Reportlog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Reportlog));
  PBCfg_Switch_descriptor_ = file->message_type(4);
  static const int PBCfg_Switch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Switch, gm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Switch, adult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Switch, debugmsg_),
  };
  PBCfg_Switch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Switch_descriptor_,
      PBCfg_Switch::default_instance_,
      PBCfg_Switch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Switch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Switch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Switch));
  PBCfg_NetTimeout_descriptor_ = file->message_type(5);
  static const int PBCfg_NetTimeout_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_NetTimeout, connnecttimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_NetTimeout, readtimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_NetTimeout, writetimeout_),
  };
  PBCfg_NetTimeout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_NetTimeout_descriptor_,
      PBCfg_NetTimeout::default_instance_,
      PBCfg_NetTimeout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_NetTimeout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_NetTimeout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_NetTimeout));
  PBCfg_Net_descriptor_ = file->message_type(6);
  static const int PBCfg_Net_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Net, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Net, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Net, connnecttimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Net, readtimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Net, writetimeout_),
  };
  PBCfg_Net_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Net_descriptor_,
      PBCfg_Net::default_instance_,
      PBCfg_Net_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Net, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Net, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Net));
  PBCfg_ServerCommon_descriptor_ = file->message_type(7);
  static const int PBCfg_ServerCommon_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, mysql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, clientnet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, connectnet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, servicenet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, reportlog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, gamelog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, luaentry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, logicworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, localname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, logprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, logwarning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, logerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, dataflux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, logpath_),
  };
  PBCfg_ServerCommon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_ServerCommon_descriptor_,
      PBCfg_ServerCommon::default_instance_,
      PBCfg_ServerCommon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_ServerCommon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_ServerCommon));
  PBCfg_World_descriptor_ = file->message_type(8);
  static const int PBCfg_World_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_World, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_World, onlinemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_World, onlinetimeout_),
  };
  PBCfg_World_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_World_descriptor_,
      PBCfg_World::default_instance_,
      PBCfg_World_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_World, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_World, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_World));
  PBCfg_Game_descriptor_ = file->message_type(9);
  static const int PBCfg_Game_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Game, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Game, mincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Game, maxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Game, switch__),
  };
  PBCfg_Game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Game_descriptor_,
      PBCfg_Game::default_instance_,
      PBCfg_Game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Game));
  PBCfg_Login_descriptor_ = file->message_type(10);
  static const int PBCfg_Login_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Login, common_),
  };
  PBCfg_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Login_descriptor_,
      PBCfg_Login::default_instance_,
      PBCfg_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Login));
  PBCfg_Register_descriptor_ = file->message_type(11);
  static const int PBCfg_Register_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Register, common_),
  };
  PBCfg_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Register_descriptor_,
      PBCfg_Register::default_instance_,
      PBCfg_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Register));
  PBCfg_DB_descriptor_ = file->message_type(12);
  static const int PBCfg_DB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_DB, common_),
  };
  PBCfg_DB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_DB_descriptor_,
      PBCfg_DB::default_instance_,
      PBCfg_DB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_DB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_DB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_DB));
  PBCfg_Global_descriptor_ = file->message_type(13);
  static const int PBCfg_Global_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Global, common_),
  };
  PBCfg_Global_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Global_descriptor_,
      PBCfg_Global::default_instance_,
      PBCfg_Global_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Global, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Global, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Global));
  PBCfg_Bigworld_descriptor_ = file->message_type(14);
  static const int PBCfg_Bigworld_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Bigworld, common_),
  };
  PBCfg_Bigworld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Bigworld_descriptor_,
      PBCfg_Bigworld::default_instance_,
      PBCfg_Bigworld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Bigworld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Bigworld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Bigworld));
  PBCfg_Rooter_descriptor_ = file->message_type(15);
  static const int PBCfg_Rooter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Rooter, common_),
  };
  PBCfg_Rooter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Rooter_descriptor_,
      PBCfg_Rooter::default_instance_,
      PBCfg_Rooter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Rooter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Rooter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Rooter));
  PBCfg_Dip_descriptor_ = file->message_type(16);
  static const int PBCfg_Dip_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Dip, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Dip, mysql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Dip, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Dip, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Dip, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Dip, httpport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Dip, tcpport_),
  };
  PBCfg_Dip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Dip_descriptor_,
      PBCfg_Dip::default_instance_,
      PBCfg_Dip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Dip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Dip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Dip));
  PBCfg_RobotServer_descriptor_ = file->message_type(17);
  static const int PBCfg_RobotServer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_RobotServer, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_RobotServer, accprefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_RobotServer, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_RobotServer, accpostfixidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_RobotServer, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_RobotServer, interval_),
  };
  PBCfg_RobotServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_RobotServer_descriptor_,
      PBCfg_RobotServer::default_instance_,
      PBCfg_RobotServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_RobotServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_RobotServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_RobotServer));
  PBCfg_RobotClient_descriptor_ = file->message_type(18);
  static const int PBCfg_RobotClient_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_RobotClient, common_),
  };
  PBCfg_RobotClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_RobotClient_descriptor_,
      PBCfg_RobotClient::default_instance_,
      PBCfg_RobotClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_RobotClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_RobotClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_RobotClient));
  PBCfg_Root_descriptor_ = file->message_type(19);
  static const int PBCfg_Root_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, defaultcommon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, register__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, global_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, bigworld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, dip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, rooter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, robotserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, robotclient_),
  };
  PBCfg_Root_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Root_descriptor_,
      PBCfg_Root::default_instance_,
      PBCfg_Root_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Root, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Root));
  PBCfg_Xls2Data_descriptor_ = file->message_type(20);
  static const int PBCfg_Xls2Data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Xls2Data, datpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Xls2Data, xlspath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Xls2Data, binpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Xls2Data, genxml_),
  };
  PBCfg_Xls2Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Xls2Data_descriptor_,
      PBCfg_Xls2Data::default_instance_,
      PBCfg_Xls2Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Xls2Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Xls2Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Xls2Data));
  PBCfg_Record_descriptor_ = file->message_type(21);
  static const int PBCfg_Record_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Record, mysql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Record, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Record, rundroptable_),
  };
  PBCfg_Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCfg_Record_descriptor_,
      PBCfg_Record::default_instance_,
      PBCfg_Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCfg_Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCfg_Record));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_MysqlDB_descriptor_, &PBCfg_MysqlDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Res_descriptor_, &PBCfg_Res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Gamelog_descriptor_, &PBCfg_Gamelog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Reportlog_descriptor_, &PBCfg_Reportlog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Switch_descriptor_, &PBCfg_Switch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_NetTimeout_descriptor_, &PBCfg_NetTimeout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Net_descriptor_, &PBCfg_Net::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_ServerCommon_descriptor_, &PBCfg_ServerCommon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_World_descriptor_, &PBCfg_World::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Game_descriptor_, &PBCfg_Game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Login_descriptor_, &PBCfg_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Register_descriptor_, &PBCfg_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_DB_descriptor_, &PBCfg_DB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Global_descriptor_, &PBCfg_Global::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Bigworld_descriptor_, &PBCfg_Bigworld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Rooter_descriptor_, &PBCfg_Rooter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Dip_descriptor_, &PBCfg_Dip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_RobotServer_descriptor_, &PBCfg_RobotServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_RobotClient_descriptor_, &PBCfg_RobotClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Root_descriptor_, &PBCfg_Root::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Xls2Data_descriptor_, &PBCfg_Xls2Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCfg_Record_descriptor_, &PBCfg_Record::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBConfig_2eproto() {
  delete PBCfg_MysqlDB::default_instance_;
  delete PBCfg_MysqlDB_reflection_;
  delete PBCfg_Res::default_instance_;
  delete PBCfg_Res_reflection_;
  delete PBCfg_Gamelog::default_instance_;
  delete PBCfg_Gamelog_reflection_;
  delete PBCfg_Reportlog::default_instance_;
  delete PBCfg_Reportlog_reflection_;
  delete PBCfg_Switch::default_instance_;
  delete PBCfg_Switch_reflection_;
  delete PBCfg_NetTimeout::default_instance_;
  delete PBCfg_NetTimeout_reflection_;
  delete PBCfg_Net::default_instance_;
  delete PBCfg_Net_reflection_;
  delete PBCfg_ServerCommon::default_instance_;
  delete PBCfg_ServerCommon_reflection_;
  delete PBCfg_World::default_instance_;
  delete PBCfg_World_reflection_;
  delete PBCfg_Game::default_instance_;
  delete PBCfg_Game_reflection_;
  delete PBCfg_Login::default_instance_;
  delete PBCfg_Login_reflection_;
  delete PBCfg_Register::default_instance_;
  delete PBCfg_Register_reflection_;
  delete PBCfg_DB::default_instance_;
  delete PBCfg_DB_reflection_;
  delete PBCfg_Global::default_instance_;
  delete PBCfg_Global_reflection_;
  delete PBCfg_Bigworld::default_instance_;
  delete PBCfg_Bigworld_reflection_;
  delete PBCfg_Rooter::default_instance_;
  delete PBCfg_Rooter_reflection_;
  delete PBCfg_Dip::default_instance_;
  delete PBCfg_Dip_reflection_;
  delete PBCfg_RobotServer::default_instance_;
  delete PBCfg_RobotServer_reflection_;
  delete PBCfg_RobotClient::default_instance_;
  delete PBCfg_RobotClient_reflection_;
  delete PBCfg_Root::default_instance_;
  delete PBCfg_Root_reflection_;
  delete PBCfg_Xls2Data::default_instance_;
  delete PBCfg_Xls2Data_reflection_;
  delete PBCfg_Record::default_instance_;
  delete PBCfg_Record_reflection_;
}

void protobuf_AddDesc_PBConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016PBConfig.proto\"U\n\rPBCfg_MysqlDB\022\n\n\002ip\030"
    "\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\n\n\002db\030\003 \001(\t\022\014\n\004user\030"
    "\004 \001(\t\022\020\n\010password\030\005 \001(\t\"l\n\tPBCfg_Res\022\020\n\010"
    "datapath\030\001 \001(\t\022\026\n\016clientdatapath\030\002 \001(\t\022\021"
    "\n\tscenepath\030\003 \001(\t\022\016\n\006aipath\030\004 \001(\t\022\022\n\nscr"
    "iptpath\030\005 \001(\t\">\n\rPBCfg_Gamelog\022\023\n\013sendga"
    "melog\030\005 \001(\010\022\n\n\002ip\030\006 \001(\t\022\014\n\004port\030\007 \001(\r\"M\n"
    "\017PBCfg_Reportlog\022\023\n\013sendloadlog\030\001 \001(\010\022\n\n"
    "\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\022\013\n\003sep\030\004 \001(\t\";\n\014"
    "PBCfg_Switch\022\n\n\002gm\030\001 \001(\010\022\r\n\005adult\030\002 \001(\010\022"
    "\020\n\010debugmsg\030\003 \001(\010\"V\n\020PBCfg_NetTimeout\022\027\n"
    "\017connnecttimeout\030\001 \001(\r\022\023\n\013readtimeout\030\002 "
    "\001(\r\022\024\n\014writetimeout\030\003 \001(\r\"i\n\tPBCfg_Net\022\n"
    "\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\027\n\017connnecttime"
    "out\030\003 \001(\r\022\023\n\013readtimeout\030\004 \001(\r\022\024\n\014writet"
    "imeout\030\005 \001(\r\"\216\003\n\022PBCfg_ServerCommon\022\035\n\005m"
    "ysql\030\001 \001(\0132\016.PBCfg_MysqlDB\022\035\n\tclientnet\030"
    "\002 \001(\0132\n.PBCfg_Net\022%\n\nconnectnet\030\003 \001(\0132\021."
    "PBCfg_NetTimeout\022\036\n\nservicenet\030\004 \001(\0132\n.P"
    "BCfg_Net\022#\n\treportlog\030\005 \001(\0132\020.PBCfg_Repo"
    "rtlog\022\037\n\007gamelog\030\006 \001(\0132\016.PBCfg_Gamelog\022\027"
    "\n\003res\030\007 \001(\0132\n.PBCfg_Res\022\020\n\010luaentry\030\n \001("
    "\t\022\024\n\014logicworldid\030\013 \001(\r\022\021\n\tlocalname\030\014 \001"
    "(\t\022\020\n\010logprint\030\r \001(\010\022\022\n\nlogwarning\030\016 \001(\010"
    "\022\020\n\010logerror\030\017 \001(\010\022\020\n\010dataflux\030\020 \001(\010\022\017\n\007"
    "logpath\030\021 \001(\t\"\\\n\013PBCfg_World\022#\n\006common\030\001"
    " \001(\0132\023.PBCfg_ServerCommon\022\021\n\tonlinemax\030\002"
    " \001(\r\022\025\n\ronlinetimeout\030\003 \001(\r\"t\n\nPBCfg_Gam"
    "e\022#\n\006common\030\001 \001(\0132\023.PBCfg_ServerCommon\022\020"
    "\n\010mincount\030\002 \001(\r\022\020\n\010maxcount\030\003 \001(\r\022\035\n\006sw"
    "itch\030\004 \001(\0132\r.PBCfg_Switch\"2\n\013PBCfg_Login"
    "\022#\n\006common\030\001 \001(\0132\023.PBCfg_ServerCommon\"5\n"
    "\016PBCfg_Register\022#\n\006common\030\001 \001(\0132\023.PBCfg_"
    "ServerCommon\"/\n\010PBCfg_DB\022#\n\006common\030\001 \001(\013"
    "2\023.PBCfg_ServerCommon\"3\n\014PBCfg_Global\022#\n"
    "\006common\030\001 \001(\0132\023.PBCfg_ServerCommon\"5\n\016PB"
    "Cfg_Bigworld\022#\n\006common\030\001 \001(\0132\023.PBCfg_Ser"
    "verCommon\"3\n\014PBCfg_Rooter\022#\n\006common\030\001 \001("
    "\0132\023.PBCfg_ServerCommon\"\234\001\n\tPBCfg_Dip\022#\n\006"
    "common\030\001 \001(\0132\023.PBCfg_ServerCommon\022\035\n\005mys"
    "ql\030\002 \001(\0132\016.PBCfg_MysqlDB\022\013\n\003key\030\003 \001(\t\022\017\n"
    "\007timeout\030\004 \001(\r\022\n\n\002ip\030\005 \001(\t\022\020\n\010httpport\030\006"
    " \001(\r\022\017\n\007tcpport\030\007 \001(\r\"\225\001\n\021PBCfg_RobotSer"
    "ver\022#\n\006common\030\001 \001(\0132\023.PBCfg_ServerCommon"
    "\022\021\n\taccprefix\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\025\n"
    "\raccpostfixIdx\030\004 \001(\r\022\r\n\005count\030\005 \001(\r\022\020\n\010i"
    "nterval\030\006 \001(\r\"8\n\021PBCfg_RobotClient\022#\n\006co"
    "mmon\030\001 \001(\0132\023.PBCfg_ServerCommon\"\223\003\n\nPBCf"
    "g_Root\022*\n\rdefaultcommon\030\001 \001(\0132\023.PBCfg_Se"
    "rverCommon\022\033\n\005world\030e \001(\0132\014.PBCfg_World\022"
    "\031\n\004game\030f \001(\0132\013.PBCfg_Game\022\033\n\005login\030g \001("
    "\0132\014.PBCfg_Login\022!\n\010register\030h \001(\0132\017.PBCf"
    "g_Register\022\025\n\002db\030i \001(\0132\t.PBCfg_DB\022\035\n\006glo"
    "bal\030j \001(\0132\r.PBCfg_Global\022!\n\010bigworld\030k \001"
    "(\0132\017.PBCfg_Bigworld\022\027\n\003dip\030l \001(\0132\n.PBCfg"
    "_Dip\022\035\n\006rooter\030m \001(\0132\r.PBCfg_Rooter\022\'\n\013r"
    "obotserver\030n \001(\0132\022.PBCfg_RobotServer\022\'\n\013"
    "robotclient\030o \001(\0132\022.PBCfg_RobotClient\"S\n"
    "\016PBCfg_Xls2Data\022\017\n\007datpath\030\001 \001(\t\022\017\n\007xlsp"
    "ath\030\002 \001(\t\022\017\n\007binpath\030\003 \001(\t\022\016\n\006genxml\030\004 \001"
    "(\010\"Q\n\014PBCfg_Record\022\035\n\005mysql\030\001 \001(\0132\016.PBCf"
    "g_MysqlDB\022\014\n\004port\030\002 \001(\r\022\024\n\014rundroptable\030"
    "\003 \001(\010", 2485);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBConfig.proto", &protobuf_RegisterTypes);
  PBCfg_MysqlDB::default_instance_ = new PBCfg_MysqlDB();
  PBCfg_Res::default_instance_ = new PBCfg_Res();
  PBCfg_Gamelog::default_instance_ = new PBCfg_Gamelog();
  PBCfg_Reportlog::default_instance_ = new PBCfg_Reportlog();
  PBCfg_Switch::default_instance_ = new PBCfg_Switch();
  PBCfg_NetTimeout::default_instance_ = new PBCfg_NetTimeout();
  PBCfg_Net::default_instance_ = new PBCfg_Net();
  PBCfg_ServerCommon::default_instance_ = new PBCfg_ServerCommon();
  PBCfg_World::default_instance_ = new PBCfg_World();
  PBCfg_Game::default_instance_ = new PBCfg_Game();
  PBCfg_Login::default_instance_ = new PBCfg_Login();
  PBCfg_Register::default_instance_ = new PBCfg_Register();
  PBCfg_DB::default_instance_ = new PBCfg_DB();
  PBCfg_Global::default_instance_ = new PBCfg_Global();
  PBCfg_Bigworld::default_instance_ = new PBCfg_Bigworld();
  PBCfg_Rooter::default_instance_ = new PBCfg_Rooter();
  PBCfg_Dip::default_instance_ = new PBCfg_Dip();
  PBCfg_RobotServer::default_instance_ = new PBCfg_RobotServer();
  PBCfg_RobotClient::default_instance_ = new PBCfg_RobotClient();
  PBCfg_Root::default_instance_ = new PBCfg_Root();
  PBCfg_Xls2Data::default_instance_ = new PBCfg_Xls2Data();
  PBCfg_Record::default_instance_ = new PBCfg_Record();
  PBCfg_MysqlDB::default_instance_->InitAsDefaultInstance();
  PBCfg_Res::default_instance_->InitAsDefaultInstance();
  PBCfg_Gamelog::default_instance_->InitAsDefaultInstance();
  PBCfg_Reportlog::default_instance_->InitAsDefaultInstance();
  PBCfg_Switch::default_instance_->InitAsDefaultInstance();
  PBCfg_NetTimeout::default_instance_->InitAsDefaultInstance();
  PBCfg_Net::default_instance_->InitAsDefaultInstance();
  PBCfg_ServerCommon::default_instance_->InitAsDefaultInstance();
  PBCfg_World::default_instance_->InitAsDefaultInstance();
  PBCfg_Game::default_instance_->InitAsDefaultInstance();
  PBCfg_Login::default_instance_->InitAsDefaultInstance();
  PBCfg_Register::default_instance_->InitAsDefaultInstance();
  PBCfg_DB::default_instance_->InitAsDefaultInstance();
  PBCfg_Global::default_instance_->InitAsDefaultInstance();
  PBCfg_Bigworld::default_instance_->InitAsDefaultInstance();
  PBCfg_Rooter::default_instance_->InitAsDefaultInstance();
  PBCfg_Dip::default_instance_->InitAsDefaultInstance();
  PBCfg_RobotServer::default_instance_->InitAsDefaultInstance();
  PBCfg_RobotClient::default_instance_->InitAsDefaultInstance();
  PBCfg_Root::default_instance_->InitAsDefaultInstance();
  PBCfg_Xls2Data::default_instance_->InitAsDefaultInstance();
  PBCfg_Record::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBConfig_2eproto {
  StaticDescriptorInitializer_PBConfig_2eproto() {
    protobuf_AddDesc_PBConfig_2eproto();
  }
} static_descriptor_initializer_PBConfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_MysqlDB::kIpFieldNumber;
const int PBCfg_MysqlDB::kPortFieldNumber;
const int PBCfg_MysqlDB::kDbFieldNumber;
const int PBCfg_MysqlDB::kUserFieldNumber;
const int PBCfg_MysqlDB::kPasswordFieldNumber;
#endif  // !_MSC_VER

PBCfg_MysqlDB::PBCfg_MysqlDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_MysqlDB::InitAsDefaultInstance() {
}

PBCfg_MysqlDB::PBCfg_MysqlDB(const PBCfg_MysqlDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_MysqlDB::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  db_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_MysqlDB::~PBCfg_MysqlDB() {
  SharedDtor();
}

void PBCfg_MysqlDB::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (db_ != &::google::protobuf::internal::kEmptyString) {
    delete db_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void PBCfg_MysqlDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_MysqlDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_MysqlDB_descriptor_;
}

const PBCfg_MysqlDB& PBCfg_MysqlDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_MysqlDB* PBCfg_MysqlDB::default_instance_ = NULL;

PBCfg_MysqlDB* PBCfg_MysqlDB::New() const {
  return new PBCfg_MysqlDB;
}

void PBCfg_MysqlDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    if (has_db()) {
      if (db_ != &::google::protobuf::internal::kEmptyString) {
        db_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_MysqlDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_db;
        break;
      }
      
      // optional string db = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db().data(), this->db().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }
      
      // optional string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_password;
        break;
      }
      
      // optional string password = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_MysqlDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }
  
  // optional string db = 3;
  if (has_db()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->db(), output);
  }
  
  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }
  
  // optional string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_MysqlDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }
  
  // optional string db = 3;
  if (has_db()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db(), target);
  }
  
  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }
  
  // optional string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_MysqlDB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
    // optional string db = 3;
    if (has_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db());
    }
    
    // optional string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // optional string password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_MysqlDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_MysqlDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_MysqlDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_MysqlDB::MergeFrom(const PBCfg_MysqlDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_db()) {
      set_db(from.db());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_MysqlDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_MysqlDB::CopyFrom(const PBCfg_MysqlDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_MysqlDB::IsInitialized() const {
  
  return true;
}

void PBCfg_MysqlDB::Swap(PBCfg_MysqlDB* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(db_, other->db_);
    std::swap(user_, other->user_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_MysqlDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_MysqlDB_descriptor_;
  metadata.reflection = PBCfg_MysqlDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Res::kDatapathFieldNumber;
const int PBCfg_Res::kClientdatapathFieldNumber;
const int PBCfg_Res::kScenepathFieldNumber;
const int PBCfg_Res::kAipathFieldNumber;
const int PBCfg_Res::kScriptpathFieldNumber;
#endif  // !_MSC_VER

PBCfg_Res::PBCfg_Res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Res::InitAsDefaultInstance() {
}

PBCfg_Res::PBCfg_Res(const PBCfg_Res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Res::SharedCtor() {
  _cached_size_ = 0;
  datapath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientdatapath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scenepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aipath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scriptpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Res::~PBCfg_Res() {
  SharedDtor();
}

void PBCfg_Res::SharedDtor() {
  if (datapath_ != &::google::protobuf::internal::kEmptyString) {
    delete datapath_;
  }
  if (clientdatapath_ != &::google::protobuf::internal::kEmptyString) {
    delete clientdatapath_;
  }
  if (scenepath_ != &::google::protobuf::internal::kEmptyString) {
    delete scenepath_;
  }
  if (aipath_ != &::google::protobuf::internal::kEmptyString) {
    delete aipath_;
  }
  if (scriptpath_ != &::google::protobuf::internal::kEmptyString) {
    delete scriptpath_;
  }
  if (this != default_instance_) {
  }
}

void PBCfg_Res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Res_descriptor_;
}

const PBCfg_Res& PBCfg_Res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Res* PBCfg_Res::default_instance_ = NULL;

PBCfg_Res* PBCfg_Res::New() const {
  return new PBCfg_Res;
}

void PBCfg_Res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_datapath()) {
      if (datapath_ != &::google::protobuf::internal::kEmptyString) {
        datapath_->clear();
      }
    }
    if (has_clientdatapath()) {
      if (clientdatapath_ != &::google::protobuf::internal::kEmptyString) {
        clientdatapath_->clear();
      }
    }
    if (has_scenepath()) {
      if (scenepath_ != &::google::protobuf::internal::kEmptyString) {
        scenepath_->clear();
      }
    }
    if (has_aipath()) {
      if (aipath_ != &::google::protobuf::internal::kEmptyString) {
        aipath_->clear();
      }
    }
    if (has_scriptpath()) {
      if (scriptpath_ != &::google::protobuf::internal::kEmptyString) {
        scriptpath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string datapath = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datapath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datapath().data(), this->datapath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientdatapath;
        break;
      }
      
      // optional string clientdatapath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientdatapath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientdatapath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientdatapath().data(), this->clientdatapath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scenepath;
        break;
      }
      
      // optional string scenepath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scenepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scenepath().data(), this->scenepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_aipath;
        break;
      }
      
      // optional string aipath = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aipath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aipath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aipath().data(), this->aipath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_scriptpath;
        break;
      }
      
      // optional string scriptpath = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scriptpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scriptpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scriptpath().data(), this->scriptpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string datapath = 1;
  if (has_datapath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datapath().data(), this->datapath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->datapath(), output);
  }
  
  // optional string clientdatapath = 2;
  if (has_clientdatapath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientdatapath().data(), this->clientdatapath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clientdatapath(), output);
  }
  
  // optional string scenepath = 3;
  if (has_scenepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scenepath().data(), this->scenepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->scenepath(), output);
  }
  
  // optional string aipath = 4;
  if (has_aipath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aipath().data(), this->aipath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->aipath(), output);
  }
  
  // optional string scriptpath = 5;
  if (has_scriptpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptpath().data(), this->scriptpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->scriptpath(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string datapath = 1;
  if (has_datapath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datapath().data(), this->datapath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->datapath(), target);
  }
  
  // optional string clientdatapath = 2;
  if (has_clientdatapath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientdatapath().data(), this->clientdatapath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientdatapath(), target);
  }
  
  // optional string scenepath = 3;
  if (has_scenepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scenepath().data(), this->scenepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->scenepath(), target);
  }
  
  // optional string aipath = 4;
  if (has_aipath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aipath().data(), this->aipath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->aipath(), target);
  }
  
  // optional string scriptpath = 5;
  if (has_scriptpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scriptpath().data(), this->scriptpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->scriptpath(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Res::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string datapath = 1;
    if (has_datapath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datapath());
    }
    
    // optional string clientdatapath = 2;
    if (has_clientdatapath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientdatapath());
    }
    
    // optional string scenepath = 3;
    if (has_scenepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenepath());
    }
    
    // optional string aipath = 4;
    if (has_aipath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aipath());
    }
    
    // optional string scriptpath = 5;
    if (has_scriptpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scriptpath());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Res::MergeFrom(const PBCfg_Res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datapath()) {
      set_datapath(from.datapath());
    }
    if (from.has_clientdatapath()) {
      set_clientdatapath(from.clientdatapath());
    }
    if (from.has_scenepath()) {
      set_scenepath(from.scenepath());
    }
    if (from.has_aipath()) {
      set_aipath(from.aipath());
    }
    if (from.has_scriptpath()) {
      set_scriptpath(from.scriptpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Res::CopyFrom(const PBCfg_Res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Res::IsInitialized() const {
  
  return true;
}

void PBCfg_Res::Swap(PBCfg_Res* other) {
  if (other != this) {
    std::swap(datapath_, other->datapath_);
    std::swap(clientdatapath_, other->clientdatapath_);
    std::swap(scenepath_, other->scenepath_);
    std::swap(aipath_, other->aipath_);
    std::swap(scriptpath_, other->scriptpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Res_descriptor_;
  metadata.reflection = PBCfg_Res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Gamelog::kSendgamelogFieldNumber;
const int PBCfg_Gamelog::kIpFieldNumber;
const int PBCfg_Gamelog::kPortFieldNumber;
#endif  // !_MSC_VER

PBCfg_Gamelog::PBCfg_Gamelog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Gamelog::InitAsDefaultInstance() {
}

PBCfg_Gamelog::PBCfg_Gamelog(const PBCfg_Gamelog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Gamelog::SharedCtor() {
  _cached_size_ = 0;
  sendgamelog_ = false;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Gamelog::~PBCfg_Gamelog() {
  SharedDtor();
}

void PBCfg_Gamelog::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void PBCfg_Gamelog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Gamelog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Gamelog_descriptor_;
}

const PBCfg_Gamelog& PBCfg_Gamelog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Gamelog* PBCfg_Gamelog::default_instance_ = NULL;

PBCfg_Gamelog* PBCfg_Gamelog::New() const {
  return new PBCfg_Gamelog;
}

void PBCfg_Gamelog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sendgamelog_ = false;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Gamelog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool sendgamelog = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sendgamelog_)));
          set_has_sendgamelog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }
      
      // optional string ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Gamelog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool sendgamelog = 5;
  if (has_sendgamelog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sendgamelog(), output);
  }
  
  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ip(), output);
  }
  
  // optional uint32 port = 7;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Gamelog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool sendgamelog = 5;
  if (has_sendgamelog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sendgamelog(), target);
  }
  
  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }
  
  // optional uint32 port = 7;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Gamelog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool sendgamelog = 5;
    if (has_sendgamelog()) {
      total_size += 1 + 1;
    }
    
    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional uint32 port = 7;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Gamelog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Gamelog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Gamelog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Gamelog::MergeFrom(const PBCfg_Gamelog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendgamelog()) {
      set_sendgamelog(from.sendgamelog());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Gamelog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Gamelog::CopyFrom(const PBCfg_Gamelog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Gamelog::IsInitialized() const {
  
  return true;
}

void PBCfg_Gamelog::Swap(PBCfg_Gamelog* other) {
  if (other != this) {
    std::swap(sendgamelog_, other->sendgamelog_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Gamelog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Gamelog_descriptor_;
  metadata.reflection = PBCfg_Gamelog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Reportlog::kSendloadlogFieldNumber;
const int PBCfg_Reportlog::kIpFieldNumber;
const int PBCfg_Reportlog::kPortFieldNumber;
const int PBCfg_Reportlog::kSepFieldNumber;
#endif  // !_MSC_VER

PBCfg_Reportlog::PBCfg_Reportlog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Reportlog::InitAsDefaultInstance() {
}

PBCfg_Reportlog::PBCfg_Reportlog(const PBCfg_Reportlog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Reportlog::SharedCtor() {
  _cached_size_ = 0;
  sendloadlog_ = false;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  sep_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Reportlog::~PBCfg_Reportlog() {
  SharedDtor();
}

void PBCfg_Reportlog::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (sep_ != &::google::protobuf::internal::kEmptyString) {
    delete sep_;
  }
  if (this != default_instance_) {
  }
}

void PBCfg_Reportlog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Reportlog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Reportlog_descriptor_;
}

const PBCfg_Reportlog& PBCfg_Reportlog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Reportlog* PBCfg_Reportlog::default_instance_ = NULL;

PBCfg_Reportlog* PBCfg_Reportlog::New() const {
  return new PBCfg_Reportlog;
}

void PBCfg_Reportlog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sendloadlog_ = false;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    if (has_sep()) {
      if (sep_ != &::google::protobuf::internal::kEmptyString) {
        sep_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Reportlog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool sendloadlog = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sendloadlog_)));
          set_has_sendloadlog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sep;
        break;
      }
      
      // optional string sep = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sep()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sep().data(), this->sep().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Reportlog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool sendloadlog = 1;
  if (has_sendloadlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->sendloadlog(), output);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }
  
  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }
  
  // optional string sep = 4;
  if (has_sep()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sep().data(), this->sep().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sep(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Reportlog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool sendloadlog = 1;
  if (has_sendloadlog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->sendloadlog(), target);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }
  
  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }
  
  // optional string sep = 4;
  if (has_sep()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sep().data(), this->sep().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sep(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Reportlog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool sendloadlog = 1;
    if (has_sendloadlog()) {
      total_size += 1 + 1;
    }
    
    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
    // optional string sep = 4;
    if (has_sep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sep());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Reportlog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Reportlog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Reportlog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Reportlog::MergeFrom(const PBCfg_Reportlog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendloadlog()) {
      set_sendloadlog(from.sendloadlog());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_sep()) {
      set_sep(from.sep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Reportlog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Reportlog::CopyFrom(const PBCfg_Reportlog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Reportlog::IsInitialized() const {
  
  return true;
}

void PBCfg_Reportlog::Swap(PBCfg_Reportlog* other) {
  if (other != this) {
    std::swap(sendloadlog_, other->sendloadlog_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(sep_, other->sep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Reportlog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Reportlog_descriptor_;
  metadata.reflection = PBCfg_Reportlog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Switch::kGmFieldNumber;
const int PBCfg_Switch::kAdultFieldNumber;
const int PBCfg_Switch::kDebugmsgFieldNumber;
#endif  // !_MSC_VER

PBCfg_Switch::PBCfg_Switch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Switch::InitAsDefaultInstance() {
}

PBCfg_Switch::PBCfg_Switch(const PBCfg_Switch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Switch::SharedCtor() {
  _cached_size_ = 0;
  gm_ = false;
  adult_ = false;
  debugmsg_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Switch::~PBCfg_Switch() {
  SharedDtor();
}

void PBCfg_Switch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCfg_Switch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Switch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Switch_descriptor_;
}

const PBCfg_Switch& PBCfg_Switch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Switch* PBCfg_Switch::default_instance_ = NULL;

PBCfg_Switch* PBCfg_Switch::New() const {
  return new PBCfg_Switch;
}

void PBCfg_Switch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gm_ = false;
    adult_ = false;
    debugmsg_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Switch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool gm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gm_)));
          set_has_gm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_adult;
        break;
      }
      
      // optional bool adult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adult_)));
          set_has_adult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_debugmsg;
        break;
      }
      
      // optional bool debugmsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debugmsg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debugmsg_)));
          set_has_debugmsg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Switch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool gm = 1;
  if (has_gm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->gm(), output);
  }
  
  // optional bool adult = 2;
  if (has_adult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->adult(), output);
  }
  
  // optional bool debugmsg = 3;
  if (has_debugmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->debugmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Switch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool gm = 1;
  if (has_gm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->gm(), target);
  }
  
  // optional bool adult = 2;
  if (has_adult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->adult(), target);
  }
  
  // optional bool debugmsg = 3;
  if (has_debugmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->debugmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Switch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool gm = 1;
    if (has_gm()) {
      total_size += 1 + 1;
    }
    
    // optional bool adult = 2;
    if (has_adult()) {
      total_size += 1 + 1;
    }
    
    // optional bool debugmsg = 3;
    if (has_debugmsg()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Switch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Switch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Switch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Switch::MergeFrom(const PBCfg_Switch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gm()) {
      set_gm(from.gm());
    }
    if (from.has_adult()) {
      set_adult(from.adult());
    }
    if (from.has_debugmsg()) {
      set_debugmsg(from.debugmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Switch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Switch::CopyFrom(const PBCfg_Switch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Switch::IsInitialized() const {
  
  return true;
}

void PBCfg_Switch::Swap(PBCfg_Switch* other) {
  if (other != this) {
    std::swap(gm_, other->gm_);
    std::swap(adult_, other->adult_);
    std::swap(debugmsg_, other->debugmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Switch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Switch_descriptor_;
  metadata.reflection = PBCfg_Switch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_NetTimeout::kConnnecttimeoutFieldNumber;
const int PBCfg_NetTimeout::kReadtimeoutFieldNumber;
const int PBCfg_NetTimeout::kWritetimeoutFieldNumber;
#endif  // !_MSC_VER

PBCfg_NetTimeout::PBCfg_NetTimeout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_NetTimeout::InitAsDefaultInstance() {
}

PBCfg_NetTimeout::PBCfg_NetTimeout(const PBCfg_NetTimeout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_NetTimeout::SharedCtor() {
  _cached_size_ = 0;
  connnecttimeout_ = 0u;
  readtimeout_ = 0u;
  writetimeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_NetTimeout::~PBCfg_NetTimeout() {
  SharedDtor();
}

void PBCfg_NetTimeout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCfg_NetTimeout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_NetTimeout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_NetTimeout_descriptor_;
}

const PBCfg_NetTimeout& PBCfg_NetTimeout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_NetTimeout* PBCfg_NetTimeout::default_instance_ = NULL;

PBCfg_NetTimeout* PBCfg_NetTimeout::New() const {
  return new PBCfg_NetTimeout;
}

void PBCfg_NetTimeout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connnecttimeout_ = 0u;
    readtimeout_ = 0u;
    writetimeout_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_NetTimeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 connnecttimeout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connnecttimeout_)));
          set_has_connnecttimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_readtimeout;
        break;
      }
      
      // optional uint32 readtimeout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readtimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &readtimeout_)));
          set_has_readtimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_writetimeout;
        break;
      }
      
      // optional uint32 writetimeout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writetimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &writetimeout_)));
          set_has_writetimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_NetTimeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 connnecttimeout = 1;
  if (has_connnecttimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connnecttimeout(), output);
  }
  
  // optional uint32 readtimeout = 2;
  if (has_readtimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->readtimeout(), output);
  }
  
  // optional uint32 writetimeout = 3;
  if (has_writetimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->writetimeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_NetTimeout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 connnecttimeout = 1;
  if (has_connnecttimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connnecttimeout(), target);
  }
  
  // optional uint32 readtimeout = 2;
  if (has_readtimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->readtimeout(), target);
  }
  
  // optional uint32 writetimeout = 3;
  if (has_writetimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->writetimeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_NetTimeout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 connnecttimeout = 1;
    if (has_connnecttimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connnecttimeout());
    }
    
    // optional uint32 readtimeout = 2;
    if (has_readtimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->readtimeout());
    }
    
    // optional uint32 writetimeout = 3;
    if (has_writetimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->writetimeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_NetTimeout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_NetTimeout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_NetTimeout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_NetTimeout::MergeFrom(const PBCfg_NetTimeout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connnecttimeout()) {
      set_connnecttimeout(from.connnecttimeout());
    }
    if (from.has_readtimeout()) {
      set_readtimeout(from.readtimeout());
    }
    if (from.has_writetimeout()) {
      set_writetimeout(from.writetimeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_NetTimeout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_NetTimeout::CopyFrom(const PBCfg_NetTimeout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_NetTimeout::IsInitialized() const {
  
  return true;
}

void PBCfg_NetTimeout::Swap(PBCfg_NetTimeout* other) {
  if (other != this) {
    std::swap(connnecttimeout_, other->connnecttimeout_);
    std::swap(readtimeout_, other->readtimeout_);
    std::swap(writetimeout_, other->writetimeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_NetTimeout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_NetTimeout_descriptor_;
  metadata.reflection = PBCfg_NetTimeout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Net::kIpFieldNumber;
const int PBCfg_Net::kPortFieldNumber;
const int PBCfg_Net::kConnnecttimeoutFieldNumber;
const int PBCfg_Net::kReadtimeoutFieldNumber;
const int PBCfg_Net::kWritetimeoutFieldNumber;
#endif  // !_MSC_VER

PBCfg_Net::PBCfg_Net()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Net::InitAsDefaultInstance() {
}

PBCfg_Net::PBCfg_Net(const PBCfg_Net& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Net::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  connnecttimeout_ = 0u;
  readtimeout_ = 0u;
  writetimeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Net::~PBCfg_Net() {
  SharedDtor();
}

void PBCfg_Net::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void PBCfg_Net::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Net::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Net_descriptor_;
}

const PBCfg_Net& PBCfg_Net::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Net* PBCfg_Net::default_instance_ = NULL;

PBCfg_Net* PBCfg_Net::New() const {
  return new PBCfg_Net;
}

void PBCfg_Net::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    connnecttimeout_ = 0u;
    readtimeout_ = 0u;
    writetimeout_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Net::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_connnecttimeout;
        break;
      }
      
      // optional uint32 connnecttimeout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connnecttimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connnecttimeout_)));
          set_has_connnecttimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_readtimeout;
        break;
      }
      
      // optional uint32 readtimeout = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readtimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &readtimeout_)));
          set_has_readtimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_writetimeout;
        break;
      }
      
      // optional uint32 writetimeout = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writetimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &writetimeout_)));
          set_has_writetimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Net::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }
  
  // optional uint32 connnecttimeout = 3;
  if (has_connnecttimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->connnecttimeout(), output);
  }
  
  // optional uint32 readtimeout = 4;
  if (has_readtimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->readtimeout(), output);
  }
  
  // optional uint32 writetimeout = 5;
  if (has_writetimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->writetimeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Net::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }
  
  // optional uint32 connnecttimeout = 3;
  if (has_connnecttimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->connnecttimeout(), target);
  }
  
  // optional uint32 readtimeout = 4;
  if (has_readtimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->readtimeout(), target);
  }
  
  // optional uint32 writetimeout = 5;
  if (has_writetimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->writetimeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Net::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
    // optional uint32 connnecttimeout = 3;
    if (has_connnecttimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connnecttimeout());
    }
    
    // optional uint32 readtimeout = 4;
    if (has_readtimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->readtimeout());
    }
    
    // optional uint32 writetimeout = 5;
    if (has_writetimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->writetimeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Net::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Net* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Net*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Net::MergeFrom(const PBCfg_Net& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_connnecttimeout()) {
      set_connnecttimeout(from.connnecttimeout());
    }
    if (from.has_readtimeout()) {
      set_readtimeout(from.readtimeout());
    }
    if (from.has_writetimeout()) {
      set_writetimeout(from.writetimeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Net::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Net::CopyFrom(const PBCfg_Net& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Net::IsInitialized() const {
  
  return true;
}

void PBCfg_Net::Swap(PBCfg_Net* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(connnecttimeout_, other->connnecttimeout_);
    std::swap(readtimeout_, other->readtimeout_);
    std::swap(writetimeout_, other->writetimeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Net::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Net_descriptor_;
  metadata.reflection = PBCfg_Net_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_ServerCommon::kMysqlFieldNumber;
const int PBCfg_ServerCommon::kClientnetFieldNumber;
const int PBCfg_ServerCommon::kConnectnetFieldNumber;
const int PBCfg_ServerCommon::kServicenetFieldNumber;
const int PBCfg_ServerCommon::kReportlogFieldNumber;
const int PBCfg_ServerCommon::kGamelogFieldNumber;
const int PBCfg_ServerCommon::kResFieldNumber;
const int PBCfg_ServerCommon::kLuaentryFieldNumber;
const int PBCfg_ServerCommon::kLogicworldidFieldNumber;
const int PBCfg_ServerCommon::kLocalnameFieldNumber;
const int PBCfg_ServerCommon::kLogprintFieldNumber;
const int PBCfg_ServerCommon::kLogwarningFieldNumber;
const int PBCfg_ServerCommon::kLogerrorFieldNumber;
const int PBCfg_ServerCommon::kDatafluxFieldNumber;
const int PBCfg_ServerCommon::kLogpathFieldNumber;
#endif  // !_MSC_VER

PBCfg_ServerCommon::PBCfg_ServerCommon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_ServerCommon::InitAsDefaultInstance() {
  mysql_ = const_cast< ::PBCfg_MysqlDB*>(&::PBCfg_MysqlDB::default_instance());
  clientnet_ = const_cast< ::PBCfg_Net*>(&::PBCfg_Net::default_instance());
  connectnet_ = const_cast< ::PBCfg_NetTimeout*>(&::PBCfg_NetTimeout::default_instance());
  servicenet_ = const_cast< ::PBCfg_Net*>(&::PBCfg_Net::default_instance());
  reportlog_ = const_cast< ::PBCfg_Reportlog*>(&::PBCfg_Reportlog::default_instance());
  gamelog_ = const_cast< ::PBCfg_Gamelog*>(&::PBCfg_Gamelog::default_instance());
  res_ = const_cast< ::PBCfg_Res*>(&::PBCfg_Res::default_instance());
}

PBCfg_ServerCommon::PBCfg_ServerCommon(const PBCfg_ServerCommon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_ServerCommon::SharedCtor() {
  _cached_size_ = 0;
  mysql_ = NULL;
  clientnet_ = NULL;
  connectnet_ = NULL;
  servicenet_ = NULL;
  reportlog_ = NULL;
  gamelog_ = NULL;
  res_ = NULL;
  luaentry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logicworldid_ = 0u;
  localname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logprint_ = false;
  logwarning_ = false;
  logerror_ = false;
  dataflux_ = false;
  logpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_ServerCommon::~PBCfg_ServerCommon() {
  SharedDtor();
}

void PBCfg_ServerCommon::SharedDtor() {
  if (luaentry_ != &::google::protobuf::internal::kEmptyString) {
    delete luaentry_;
  }
  if (localname_ != &::google::protobuf::internal::kEmptyString) {
    delete localname_;
  }
  if (logpath_ != &::google::protobuf::internal::kEmptyString) {
    delete logpath_;
  }
  if (this != default_instance_) {
    delete mysql_;
    delete clientnet_;
    delete connectnet_;
    delete servicenet_;
    delete reportlog_;
    delete gamelog_;
    delete res_;
  }
}

void PBCfg_ServerCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_ServerCommon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_ServerCommon_descriptor_;
}

const PBCfg_ServerCommon& PBCfg_ServerCommon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_ServerCommon* PBCfg_ServerCommon::default_instance_ = NULL;

PBCfg_ServerCommon* PBCfg_ServerCommon::New() const {
  return new PBCfg_ServerCommon;
}

void PBCfg_ServerCommon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mysql()) {
      if (mysql_ != NULL) mysql_->::PBCfg_MysqlDB::Clear();
    }
    if (has_clientnet()) {
      if (clientnet_ != NULL) clientnet_->::PBCfg_Net::Clear();
    }
    if (has_connectnet()) {
      if (connectnet_ != NULL) connectnet_->::PBCfg_NetTimeout::Clear();
    }
    if (has_servicenet()) {
      if (servicenet_ != NULL) servicenet_->::PBCfg_Net::Clear();
    }
    if (has_reportlog()) {
      if (reportlog_ != NULL) reportlog_->::PBCfg_Reportlog::Clear();
    }
    if (has_gamelog()) {
      if (gamelog_ != NULL) gamelog_->::PBCfg_Gamelog::Clear();
    }
    if (has_res()) {
      if (res_ != NULL) res_->::PBCfg_Res::Clear();
    }
    if (has_luaentry()) {
      if (luaentry_ != &::google::protobuf::internal::kEmptyString) {
        luaentry_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    logicworldid_ = 0u;
    if (has_localname()) {
      if (localname_ != &::google::protobuf::internal::kEmptyString) {
        localname_->clear();
      }
    }
    logprint_ = false;
    logwarning_ = false;
    logerror_ = false;
    dataflux_ = false;
    if (has_logpath()) {
      if (logpath_ != &::google::protobuf::internal::kEmptyString) {
        logpath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_ServerCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_MysqlDB mysql = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mysql()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientnet;
        break;
      }
      
      // optional .PBCfg_Net clientnet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientnet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientnet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_connectnet;
        break;
      }
      
      // optional .PBCfg_NetTimeout connectnet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectnet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectnet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_servicenet;
        break;
      }
      
      // optional .PBCfg_Net servicenet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servicenet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servicenet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reportlog;
        break;
      }
      
      // optional .PBCfg_Reportlog reportlog = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reportlog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reportlog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gamelog;
        break;
      }
      
      // optional .PBCfg_Gamelog gamelog = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamelog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamelog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_res;
        break;
      }
      
      // optional .PBCfg_Res res = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_luaentry;
        break;
      }
      
      // optional string luaentry = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_luaentry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_luaentry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->luaentry().data(), this->luaentry().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_logicworldid;
        break;
      }
      
      // optional uint32 logicworldid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicworldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicworldid_)));
          set_has_logicworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_localname;
        break;
      }
      
      // optional string localname = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->localname().data(), this->localname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_logprint;
        break;
      }
      
      // optional bool logprint = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logprint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logprint_)));
          set_has_logprint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_logwarning;
        break;
      }
      
      // optional bool logwarning = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logwarning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logwarning_)));
          set_has_logwarning();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_logerror;
        break;
      }
      
      // optional bool logerror = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logerror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logerror_)));
          set_has_logerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_dataflux;
        break;
      }
      
      // optional bool dataflux = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataflux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dataflux_)));
          set_has_dataflux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_logpath;
        break;
      }
      
      // optional string logpath = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logpath().data(), this->logpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_ServerCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_MysqlDB mysql = 1;
  if (has_mysql()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mysql(), output);
  }
  
  // optional .PBCfg_Net clientnet = 2;
  if (has_clientnet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->clientnet(), output);
  }
  
  // optional .PBCfg_NetTimeout connectnet = 3;
  if (has_connectnet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->connectnet(), output);
  }
  
  // optional .PBCfg_Net servicenet = 4;
  if (has_servicenet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->servicenet(), output);
  }
  
  // optional .PBCfg_Reportlog reportlog = 5;
  if (has_reportlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reportlog(), output);
  }
  
  // optional .PBCfg_Gamelog gamelog = 6;
  if (has_gamelog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gamelog(), output);
  }
  
  // optional .PBCfg_Res res = 7;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->res(), output);
  }
  
  // optional string luaentry = 10;
  if (has_luaentry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->luaentry().data(), this->luaentry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->luaentry(), output);
  }
  
  // optional uint32 logicworldid = 11;
  if (has_logicworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->logicworldid(), output);
  }
  
  // optional string localname = 12;
  if (has_localname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localname().data(), this->localname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->localname(), output);
  }
  
  // optional bool logprint = 13;
  if (has_logprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->logprint(), output);
  }
  
  // optional bool logwarning = 14;
  if (has_logwarning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->logwarning(), output);
  }
  
  // optional bool logerror = 15;
  if (has_logerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->logerror(), output);
  }
  
  // optional bool dataflux = 16;
  if (has_dataflux()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->dataflux(), output);
  }
  
  // optional string logpath = 17;
  if (has_logpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logpath().data(), this->logpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->logpath(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_ServerCommon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_MysqlDB mysql = 1;
  if (has_mysql()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mysql(), target);
  }
  
  // optional .PBCfg_Net clientnet = 2;
  if (has_clientnet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->clientnet(), target);
  }
  
  // optional .PBCfg_NetTimeout connectnet = 3;
  if (has_connectnet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->connectnet(), target);
  }
  
  // optional .PBCfg_Net servicenet = 4;
  if (has_servicenet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->servicenet(), target);
  }
  
  // optional .PBCfg_Reportlog reportlog = 5;
  if (has_reportlog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reportlog(), target);
  }
  
  // optional .PBCfg_Gamelog gamelog = 6;
  if (has_gamelog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gamelog(), target);
  }
  
  // optional .PBCfg_Res res = 7;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->res(), target);
  }
  
  // optional string luaentry = 10;
  if (has_luaentry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->luaentry().data(), this->luaentry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->luaentry(), target);
  }
  
  // optional uint32 logicworldid = 11;
  if (has_logicworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->logicworldid(), target);
  }
  
  // optional string localname = 12;
  if (has_localname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localname().data(), this->localname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->localname(), target);
  }
  
  // optional bool logprint = 13;
  if (has_logprint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->logprint(), target);
  }
  
  // optional bool logwarning = 14;
  if (has_logwarning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->logwarning(), target);
  }
  
  // optional bool logerror = 15;
  if (has_logerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->logerror(), target);
  }
  
  // optional bool dataflux = 16;
  if (has_dataflux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->dataflux(), target);
  }
  
  // optional string logpath = 17;
  if (has_logpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logpath().data(), this->logpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->logpath(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_ServerCommon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_MysqlDB mysql = 1;
    if (has_mysql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mysql());
    }
    
    // optional .PBCfg_Net clientnet = 2;
    if (has_clientnet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientnet());
    }
    
    // optional .PBCfg_NetTimeout connectnet = 3;
    if (has_connectnet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connectnet());
    }
    
    // optional .PBCfg_Net servicenet = 4;
    if (has_servicenet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servicenet());
    }
    
    // optional .PBCfg_Reportlog reportlog = 5;
    if (has_reportlog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reportlog());
    }
    
    // optional .PBCfg_Gamelog gamelog = 6;
    if (has_gamelog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamelog());
    }
    
    // optional .PBCfg_Res res = 7;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->res());
    }
    
    // optional string luaentry = 10;
    if (has_luaentry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->luaentry());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 logicworldid = 11;
    if (has_logicworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicworldid());
    }
    
    // optional string localname = 12;
    if (has_localname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localname());
    }
    
    // optional bool logprint = 13;
    if (has_logprint()) {
      total_size += 1 + 1;
    }
    
    // optional bool logwarning = 14;
    if (has_logwarning()) {
      total_size += 1 + 1;
    }
    
    // optional bool logerror = 15;
    if (has_logerror()) {
      total_size += 1 + 1;
    }
    
    // optional bool dataflux = 16;
    if (has_dataflux()) {
      total_size += 2 + 1;
    }
    
    // optional string logpath = 17;
    if (has_logpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logpath());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_ServerCommon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_ServerCommon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_ServerCommon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_ServerCommon::MergeFrom(const PBCfg_ServerCommon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mysql()) {
      mutable_mysql()->::PBCfg_MysqlDB::MergeFrom(from.mysql());
    }
    if (from.has_clientnet()) {
      mutable_clientnet()->::PBCfg_Net::MergeFrom(from.clientnet());
    }
    if (from.has_connectnet()) {
      mutable_connectnet()->::PBCfg_NetTimeout::MergeFrom(from.connectnet());
    }
    if (from.has_servicenet()) {
      mutable_servicenet()->::PBCfg_Net::MergeFrom(from.servicenet());
    }
    if (from.has_reportlog()) {
      mutable_reportlog()->::PBCfg_Reportlog::MergeFrom(from.reportlog());
    }
    if (from.has_gamelog()) {
      mutable_gamelog()->::PBCfg_Gamelog::MergeFrom(from.gamelog());
    }
    if (from.has_res()) {
      mutable_res()->::PBCfg_Res::MergeFrom(from.res());
    }
    if (from.has_luaentry()) {
      set_luaentry(from.luaentry());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_logicworldid()) {
      set_logicworldid(from.logicworldid());
    }
    if (from.has_localname()) {
      set_localname(from.localname());
    }
    if (from.has_logprint()) {
      set_logprint(from.logprint());
    }
    if (from.has_logwarning()) {
      set_logwarning(from.logwarning());
    }
    if (from.has_logerror()) {
      set_logerror(from.logerror());
    }
    if (from.has_dataflux()) {
      set_dataflux(from.dataflux());
    }
    if (from.has_logpath()) {
      set_logpath(from.logpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_ServerCommon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_ServerCommon::CopyFrom(const PBCfg_ServerCommon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_ServerCommon::IsInitialized() const {
  
  return true;
}

void PBCfg_ServerCommon::Swap(PBCfg_ServerCommon* other) {
  if (other != this) {
    std::swap(mysql_, other->mysql_);
    std::swap(clientnet_, other->clientnet_);
    std::swap(connectnet_, other->connectnet_);
    std::swap(servicenet_, other->servicenet_);
    std::swap(reportlog_, other->reportlog_);
    std::swap(gamelog_, other->gamelog_);
    std::swap(res_, other->res_);
    std::swap(luaentry_, other->luaentry_);
    std::swap(logicworldid_, other->logicworldid_);
    std::swap(localname_, other->localname_);
    std::swap(logprint_, other->logprint_);
    std::swap(logwarning_, other->logwarning_);
    std::swap(logerror_, other->logerror_);
    std::swap(dataflux_, other->dataflux_);
    std::swap(logpath_, other->logpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_ServerCommon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_ServerCommon_descriptor_;
  metadata.reflection = PBCfg_ServerCommon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_World::kCommonFieldNumber;
const int PBCfg_World::kOnlinemaxFieldNumber;
const int PBCfg_World::kOnlinetimeoutFieldNumber;
#endif  // !_MSC_VER

PBCfg_World::PBCfg_World()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_World::InitAsDefaultInstance() {
  common_ = const_cast< ::PBCfg_ServerCommon*>(&::PBCfg_ServerCommon::default_instance());
}

PBCfg_World::PBCfg_World(const PBCfg_World& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_World::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  onlinemax_ = 0u;
  onlinetimeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_World::~PBCfg_World() {
  SharedDtor();
}

void PBCfg_World::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void PBCfg_World::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_World::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_World_descriptor_;
}

const PBCfg_World& PBCfg_World::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_World* PBCfg_World::default_instance_ = NULL;

PBCfg_World* PBCfg_World::New() const {
  return new PBCfg_World;
}

void PBCfg_World::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
    }
    onlinemax_ = 0u;
    onlinetimeout_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_World::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_ServerCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_onlinemax;
        break;
      }
      
      // optional uint32 onlinemax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlinemax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinemax_)));
          set_has_onlinemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_onlinetimeout;
        break;
      }
      
      // optional uint32 onlinetimeout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlinetimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetimeout_)));
          set_has_onlinetimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_World::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  // optional uint32 onlinemax = 2;
  if (has_onlinemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->onlinemax(), output);
  }
  
  // optional uint32 onlinetimeout = 3;
  if (has_onlinetimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->onlinetimeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_World::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  // optional uint32 onlinemax = 2;
  if (has_onlinemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->onlinemax(), target);
  }
  
  // optional uint32 onlinetimeout = 3;
  if (has_onlinetimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->onlinetimeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_World::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_ServerCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
    // optional uint32 onlinemax = 2;
    if (has_onlinemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinemax());
    }
    
    // optional uint32 onlinetimeout = 3;
    if (has_onlinetimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetimeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_World::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_World* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_World*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_World::MergeFrom(const PBCfg_World& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBCfg_ServerCommon::MergeFrom(from.common());
    }
    if (from.has_onlinemax()) {
      set_onlinemax(from.onlinemax());
    }
    if (from.has_onlinetimeout()) {
      set_onlinetimeout(from.onlinetimeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_World::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_World::CopyFrom(const PBCfg_World& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_World::IsInitialized() const {
  
  return true;
}

void PBCfg_World::Swap(PBCfg_World* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(onlinemax_, other->onlinemax_);
    std::swap(onlinetimeout_, other->onlinetimeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_World::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_World_descriptor_;
  metadata.reflection = PBCfg_World_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Game::kCommonFieldNumber;
const int PBCfg_Game::kMincountFieldNumber;
const int PBCfg_Game::kMaxcountFieldNumber;
const int PBCfg_Game::kSwitchFieldNumber;
#endif  // !_MSC_VER

PBCfg_Game::PBCfg_Game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Game::InitAsDefaultInstance() {
  common_ = const_cast< ::PBCfg_ServerCommon*>(&::PBCfg_ServerCommon::default_instance());
  switch__ = const_cast< ::PBCfg_Switch*>(&::PBCfg_Switch::default_instance());
}

PBCfg_Game::PBCfg_Game(const PBCfg_Game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Game::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  mincount_ = 0u;
  maxcount_ = 0u;
  switch__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Game::~PBCfg_Game() {
  SharedDtor();
}

void PBCfg_Game::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
    delete switch__;
  }
}

void PBCfg_Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Game_descriptor_;
}

const PBCfg_Game& PBCfg_Game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Game* PBCfg_Game::default_instance_ = NULL;

PBCfg_Game* PBCfg_Game::New() const {
  return new PBCfg_Game;
}

void PBCfg_Game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
    }
    mincount_ = 0u;
    maxcount_ = 0u;
    if (has_switch_()) {
      if (switch__ != NULL) switch__->::PBCfg_Switch::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_ServerCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mincount;
        break;
      }
      
      // optional uint32 mincount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mincount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mincount_)));
          set_has_mincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxcount;
        break;
      }
      
      // optional uint32 maxcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_switch;
        break;
      }
      
      // optional .PBCfg_Switch switch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  // optional uint32 mincount = 2;
  if (has_mincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mincount(), output);
  }
  
  // optional uint32 maxcount = 3;
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxcount(), output);
  }
  
  // optional .PBCfg_Switch switch = 4;
  if (has_switch_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->switch_(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  // optional uint32 mincount = 2;
  if (has_mincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mincount(), target);
  }
  
  // optional uint32 maxcount = 3;
  if (has_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxcount(), target);
  }
  
  // optional .PBCfg_Switch switch = 4;
  if (has_switch_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->switch_(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Game::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_ServerCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
    // optional uint32 mincount = 2;
    if (has_mincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mincount());
    }
    
    // optional uint32 maxcount = 3;
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcount());
    }
    
    // optional .PBCfg_Switch switch = 4;
    if (has_switch_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Game::MergeFrom(const PBCfg_Game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBCfg_ServerCommon::MergeFrom(from.common());
    }
    if (from.has_mincount()) {
      set_mincount(from.mincount());
    }
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
    if (from.has_switch_()) {
      mutable_switch_()->::PBCfg_Switch::MergeFrom(from.switch_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Game::CopyFrom(const PBCfg_Game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Game::IsInitialized() const {
  
  return true;
}

void PBCfg_Game::Swap(PBCfg_Game* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(mincount_, other->mincount_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(switch__, other->switch__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Game_descriptor_;
  metadata.reflection = PBCfg_Game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Login::kCommonFieldNumber;
#endif  // !_MSC_VER

PBCfg_Login::PBCfg_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Login::InitAsDefaultInstance() {
  common_ = const_cast< ::PBCfg_ServerCommon*>(&::PBCfg_ServerCommon::default_instance());
}

PBCfg_Login::PBCfg_Login(const PBCfg_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Login::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Login::~PBCfg_Login() {
  SharedDtor();
}

void PBCfg_Login::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void PBCfg_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Login_descriptor_;
}

const PBCfg_Login& PBCfg_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Login* PBCfg_Login::default_instance_ = NULL;

PBCfg_Login* PBCfg_Login::New() const {
  return new PBCfg_Login;
}

void PBCfg_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_ServerCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Login::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_ServerCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Login::MergeFrom(const PBCfg_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBCfg_ServerCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Login::CopyFrom(const PBCfg_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Login::IsInitialized() const {
  
  return true;
}

void PBCfg_Login::Swap(PBCfg_Login* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Login_descriptor_;
  metadata.reflection = PBCfg_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Register::kCommonFieldNumber;
#endif  // !_MSC_VER

PBCfg_Register::PBCfg_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Register::InitAsDefaultInstance() {
  common_ = const_cast< ::PBCfg_ServerCommon*>(&::PBCfg_ServerCommon::default_instance());
}

PBCfg_Register::PBCfg_Register(const PBCfg_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Register::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Register::~PBCfg_Register() {
  SharedDtor();
}

void PBCfg_Register::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void PBCfg_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Register_descriptor_;
}

const PBCfg_Register& PBCfg_Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Register* PBCfg_Register::default_instance_ = NULL;

PBCfg_Register* PBCfg_Register::New() const {
  return new PBCfg_Register;
}

void PBCfg_Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_ServerCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Register::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_ServerCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Register::MergeFrom(const PBCfg_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBCfg_ServerCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Register::CopyFrom(const PBCfg_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Register::IsInitialized() const {
  
  return true;
}

void PBCfg_Register::Swap(PBCfg_Register* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Register_descriptor_;
  metadata.reflection = PBCfg_Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_DB::kCommonFieldNumber;
#endif  // !_MSC_VER

PBCfg_DB::PBCfg_DB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_DB::InitAsDefaultInstance() {
  common_ = const_cast< ::PBCfg_ServerCommon*>(&::PBCfg_ServerCommon::default_instance());
}

PBCfg_DB::PBCfg_DB(const PBCfg_DB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_DB::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_DB::~PBCfg_DB() {
  SharedDtor();
}

void PBCfg_DB::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void PBCfg_DB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_DB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_DB_descriptor_;
}

const PBCfg_DB& PBCfg_DB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_DB* PBCfg_DB::default_instance_ = NULL;

PBCfg_DB* PBCfg_DB::New() const {
  return new PBCfg_DB;
}

void PBCfg_DB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_DB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_ServerCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_DB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_DB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_DB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_ServerCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_DB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_DB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_DB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_DB::MergeFrom(const PBCfg_DB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBCfg_ServerCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_DB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_DB::CopyFrom(const PBCfg_DB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_DB::IsInitialized() const {
  
  return true;
}

void PBCfg_DB::Swap(PBCfg_DB* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_DB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_DB_descriptor_;
  metadata.reflection = PBCfg_DB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Global::kCommonFieldNumber;
#endif  // !_MSC_VER

PBCfg_Global::PBCfg_Global()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Global::InitAsDefaultInstance() {
  common_ = const_cast< ::PBCfg_ServerCommon*>(&::PBCfg_ServerCommon::default_instance());
}

PBCfg_Global::PBCfg_Global(const PBCfg_Global& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Global::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Global::~PBCfg_Global() {
  SharedDtor();
}

void PBCfg_Global::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void PBCfg_Global::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Global::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Global_descriptor_;
}

const PBCfg_Global& PBCfg_Global::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Global* PBCfg_Global::default_instance_ = NULL;

PBCfg_Global* PBCfg_Global::New() const {
  return new PBCfg_Global;
}

void PBCfg_Global::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Global::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_ServerCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Global::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Global::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Global::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_ServerCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Global::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Global* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Global*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Global::MergeFrom(const PBCfg_Global& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBCfg_ServerCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Global::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Global::CopyFrom(const PBCfg_Global& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Global::IsInitialized() const {
  
  return true;
}

void PBCfg_Global::Swap(PBCfg_Global* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Global::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Global_descriptor_;
  metadata.reflection = PBCfg_Global_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Bigworld::kCommonFieldNumber;
#endif  // !_MSC_VER

PBCfg_Bigworld::PBCfg_Bigworld()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Bigworld::InitAsDefaultInstance() {
  common_ = const_cast< ::PBCfg_ServerCommon*>(&::PBCfg_ServerCommon::default_instance());
}

PBCfg_Bigworld::PBCfg_Bigworld(const PBCfg_Bigworld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Bigworld::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Bigworld::~PBCfg_Bigworld() {
  SharedDtor();
}

void PBCfg_Bigworld::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void PBCfg_Bigworld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Bigworld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Bigworld_descriptor_;
}

const PBCfg_Bigworld& PBCfg_Bigworld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Bigworld* PBCfg_Bigworld::default_instance_ = NULL;

PBCfg_Bigworld* PBCfg_Bigworld::New() const {
  return new PBCfg_Bigworld;
}

void PBCfg_Bigworld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Bigworld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_ServerCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Bigworld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Bigworld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Bigworld::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_ServerCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Bigworld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Bigworld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Bigworld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Bigworld::MergeFrom(const PBCfg_Bigworld& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBCfg_ServerCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Bigworld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Bigworld::CopyFrom(const PBCfg_Bigworld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Bigworld::IsInitialized() const {
  
  return true;
}

void PBCfg_Bigworld::Swap(PBCfg_Bigworld* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Bigworld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Bigworld_descriptor_;
  metadata.reflection = PBCfg_Bigworld_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Rooter::kCommonFieldNumber;
#endif  // !_MSC_VER

PBCfg_Rooter::PBCfg_Rooter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Rooter::InitAsDefaultInstance() {
  common_ = const_cast< ::PBCfg_ServerCommon*>(&::PBCfg_ServerCommon::default_instance());
}

PBCfg_Rooter::PBCfg_Rooter(const PBCfg_Rooter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Rooter::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Rooter::~PBCfg_Rooter() {
  SharedDtor();
}

void PBCfg_Rooter::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void PBCfg_Rooter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Rooter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Rooter_descriptor_;
}

const PBCfg_Rooter& PBCfg_Rooter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Rooter* PBCfg_Rooter::default_instance_ = NULL;

PBCfg_Rooter* PBCfg_Rooter::New() const {
  return new PBCfg_Rooter;
}

void PBCfg_Rooter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Rooter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_ServerCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Rooter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Rooter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Rooter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_ServerCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Rooter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Rooter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Rooter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Rooter::MergeFrom(const PBCfg_Rooter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBCfg_ServerCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Rooter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Rooter::CopyFrom(const PBCfg_Rooter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Rooter::IsInitialized() const {
  
  return true;
}

void PBCfg_Rooter::Swap(PBCfg_Rooter* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Rooter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Rooter_descriptor_;
  metadata.reflection = PBCfg_Rooter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Dip::kCommonFieldNumber;
const int PBCfg_Dip::kMysqlFieldNumber;
const int PBCfg_Dip::kKeyFieldNumber;
const int PBCfg_Dip::kTimeoutFieldNumber;
const int PBCfg_Dip::kIpFieldNumber;
const int PBCfg_Dip::kHttpportFieldNumber;
const int PBCfg_Dip::kTcpportFieldNumber;
#endif  // !_MSC_VER

PBCfg_Dip::PBCfg_Dip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Dip::InitAsDefaultInstance() {
  common_ = const_cast< ::PBCfg_ServerCommon*>(&::PBCfg_ServerCommon::default_instance());
  mysql_ = const_cast< ::PBCfg_MysqlDB*>(&::PBCfg_MysqlDB::default_instance());
}

PBCfg_Dip::PBCfg_Dip(const PBCfg_Dip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Dip::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  mysql_ = NULL;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeout_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  httpport_ = 0u;
  tcpport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Dip::~PBCfg_Dip() {
  SharedDtor();
}

void PBCfg_Dip::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete common_;
    delete mysql_;
  }
}

void PBCfg_Dip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Dip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Dip_descriptor_;
}

const PBCfg_Dip& PBCfg_Dip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Dip* PBCfg_Dip::default_instance_ = NULL;

PBCfg_Dip* PBCfg_Dip::New() const {
  return new PBCfg_Dip;
}

void PBCfg_Dip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
    }
    if (has_mysql()) {
      if (mysql_ != NULL) mysql_->::PBCfg_MysqlDB::Clear();
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    timeout_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    httpport_ = 0u;
    tcpport_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Dip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_ServerCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mysql;
        break;
      }
      
      // optional .PBCfg_MysqlDB mysql = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mysql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mysql()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }
      
      // optional string key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }
      
      // optional uint32 timeout = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_httpport;
        break;
      }
      
      // optional uint32 httpport = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &httpport_)));
          set_has_httpport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tcpport;
        break;
      }
      
      // optional uint32 tcpport = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcpport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpport_)));
          set_has_tcpport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Dip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  // optional .PBCfg_MysqlDB mysql = 2;
  if (has_mysql()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mysql(), output);
  }
  
  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->key(), output);
  }
  
  // optional uint32 timeout = 4;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timeout(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional uint32 httpport = 6;
  if (has_httpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->httpport(), output);
  }
  
  // optional uint32 tcpport = 7;
  if (has_tcpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tcpport(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Dip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  // optional .PBCfg_MysqlDB mysql = 2;
  if (has_mysql()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mysql(), target);
  }
  
  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }
  
  // optional uint32 timeout = 4;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeout(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional uint32 httpport = 6;
  if (has_httpport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->httpport(), target);
  }
  
  // optional uint32 tcpport = 7;
  if (has_tcpport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tcpport(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Dip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_ServerCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
    // optional .PBCfg_MysqlDB mysql = 2;
    if (has_mysql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mysql());
    }
    
    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional uint32 timeout = 4;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional uint32 httpport = 6;
    if (has_httpport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->httpport());
    }
    
    // optional uint32 tcpport = 7;
    if (has_tcpport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcpport());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Dip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Dip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Dip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Dip::MergeFrom(const PBCfg_Dip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBCfg_ServerCommon::MergeFrom(from.common());
    }
    if (from.has_mysql()) {
      mutable_mysql()->::PBCfg_MysqlDB::MergeFrom(from.mysql());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_httpport()) {
      set_httpport(from.httpport());
    }
    if (from.has_tcpport()) {
      set_tcpport(from.tcpport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Dip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Dip::CopyFrom(const PBCfg_Dip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Dip::IsInitialized() const {
  
  return true;
}

void PBCfg_Dip::Swap(PBCfg_Dip* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(mysql_, other->mysql_);
    std::swap(key_, other->key_);
    std::swap(timeout_, other->timeout_);
    std::swap(ip_, other->ip_);
    std::swap(httpport_, other->httpport_);
    std::swap(tcpport_, other->tcpport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Dip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Dip_descriptor_;
  metadata.reflection = PBCfg_Dip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_RobotServer::kCommonFieldNumber;
const int PBCfg_RobotServer::kAccprefixFieldNumber;
const int PBCfg_RobotServer::kPasswordFieldNumber;
const int PBCfg_RobotServer::kAccpostfixIdxFieldNumber;
const int PBCfg_RobotServer::kCountFieldNumber;
const int PBCfg_RobotServer::kIntervalFieldNumber;
#endif  // !_MSC_VER

PBCfg_RobotServer::PBCfg_RobotServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_RobotServer::InitAsDefaultInstance() {
  common_ = const_cast< ::PBCfg_ServerCommon*>(&::PBCfg_ServerCommon::default_instance());
}

PBCfg_RobotServer::PBCfg_RobotServer(const PBCfg_RobotServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_RobotServer::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  accprefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accpostfixidx_ = 0u;
  count_ = 0u;
  interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_RobotServer::~PBCfg_RobotServer() {
  SharedDtor();
}

void PBCfg_RobotServer::SharedDtor() {
  if (accprefix_ != &::google::protobuf::internal::kEmptyString) {
    delete accprefix_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete common_;
  }
}

void PBCfg_RobotServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_RobotServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_RobotServer_descriptor_;
}

const PBCfg_RobotServer& PBCfg_RobotServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_RobotServer* PBCfg_RobotServer::default_instance_ = NULL;

PBCfg_RobotServer* PBCfg_RobotServer::New() const {
  return new PBCfg_RobotServer;
}

void PBCfg_RobotServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
    }
    if (has_accprefix()) {
      if (accprefix_ != &::google::protobuf::internal::kEmptyString) {
        accprefix_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    accpostfixidx_ = 0u;
    count_ = 0u;
    interval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_RobotServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_ServerCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accprefix;
        break;
      }
      
      // optional string accprefix = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accprefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accprefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accprefix().data(), this->accprefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accpostfixIdx;
        break;
      }
      
      // optional uint32 accpostfixIdx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accpostfixIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accpostfixidx_)));
          set_has_accpostfixidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_interval;
        break;
      }
      
      // optional uint32 interval = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_RobotServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  // optional string accprefix = 2;
  if (has_accprefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accprefix().data(), this->accprefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accprefix(), output);
  }
  
  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional uint32 accpostfixIdx = 4;
  if (has_accpostfixidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accpostfixidx(), output);
  }
  
  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }
  
  // optional uint32 interval = 6;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->interval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_RobotServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  // optional string accprefix = 2;
  if (has_accprefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accprefix().data(), this->accprefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accprefix(), target);
  }
  
  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional uint32 accpostfixIdx = 4;
  if (has_accpostfixidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accpostfixidx(), target);
  }
  
  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }
  
  // optional uint32 interval = 6;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->interval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_RobotServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_ServerCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
    // optional string accprefix = 2;
    if (has_accprefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accprefix());
    }
    
    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional uint32 accpostfixIdx = 4;
    if (has_accpostfixidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accpostfixidx());
    }
    
    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 interval = 6;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_RobotServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_RobotServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_RobotServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_RobotServer::MergeFrom(const PBCfg_RobotServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBCfg_ServerCommon::MergeFrom(from.common());
    }
    if (from.has_accprefix()) {
      set_accprefix(from.accprefix());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_accpostfixidx()) {
      set_accpostfixidx(from.accpostfixidx());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_RobotServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_RobotServer::CopyFrom(const PBCfg_RobotServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_RobotServer::IsInitialized() const {
  
  return true;
}

void PBCfg_RobotServer::Swap(PBCfg_RobotServer* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(accprefix_, other->accprefix_);
    std::swap(password_, other->password_);
    std::swap(accpostfixidx_, other->accpostfixidx_);
    std::swap(count_, other->count_);
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_RobotServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_RobotServer_descriptor_;
  metadata.reflection = PBCfg_RobotServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_RobotClient::kCommonFieldNumber;
#endif  // !_MSC_VER

PBCfg_RobotClient::PBCfg_RobotClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_RobotClient::InitAsDefaultInstance() {
  common_ = const_cast< ::PBCfg_ServerCommon*>(&::PBCfg_ServerCommon::default_instance());
}

PBCfg_RobotClient::PBCfg_RobotClient(const PBCfg_RobotClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_RobotClient::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_RobotClient::~PBCfg_RobotClient() {
  SharedDtor();
}

void PBCfg_RobotClient::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void PBCfg_RobotClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_RobotClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_RobotClient_descriptor_;
}

const PBCfg_RobotClient& PBCfg_RobotClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_RobotClient* PBCfg_RobotClient::default_instance_ = NULL;

PBCfg_RobotClient* PBCfg_RobotClient::New() const {
  return new PBCfg_RobotClient;
}

void PBCfg_RobotClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_RobotClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_ServerCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_RobotClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_RobotClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_ServerCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_RobotClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_ServerCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_RobotClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_RobotClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_RobotClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_RobotClient::MergeFrom(const PBCfg_RobotClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::PBCfg_ServerCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_RobotClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_RobotClient::CopyFrom(const PBCfg_RobotClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_RobotClient::IsInitialized() const {
  
  return true;
}

void PBCfg_RobotClient::Swap(PBCfg_RobotClient* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_RobotClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_RobotClient_descriptor_;
  metadata.reflection = PBCfg_RobotClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Root::kDefaultcommonFieldNumber;
const int PBCfg_Root::kWorldFieldNumber;
const int PBCfg_Root::kGameFieldNumber;
const int PBCfg_Root::kLoginFieldNumber;
const int PBCfg_Root::kRegisterFieldNumber;
const int PBCfg_Root::kDbFieldNumber;
const int PBCfg_Root::kGlobalFieldNumber;
const int PBCfg_Root::kBigworldFieldNumber;
const int PBCfg_Root::kDipFieldNumber;
const int PBCfg_Root::kRooterFieldNumber;
const int PBCfg_Root::kRobotserverFieldNumber;
const int PBCfg_Root::kRobotclientFieldNumber;
#endif  // !_MSC_VER

PBCfg_Root::PBCfg_Root()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Root::InitAsDefaultInstance() {
  defaultcommon_ = const_cast< ::PBCfg_ServerCommon*>(&::PBCfg_ServerCommon::default_instance());
  world_ = const_cast< ::PBCfg_World*>(&::PBCfg_World::default_instance());
  game_ = const_cast< ::PBCfg_Game*>(&::PBCfg_Game::default_instance());
  login_ = const_cast< ::PBCfg_Login*>(&::PBCfg_Login::default_instance());
  register__ = const_cast< ::PBCfg_Register*>(&::PBCfg_Register::default_instance());
  db_ = const_cast< ::PBCfg_DB*>(&::PBCfg_DB::default_instance());
  global_ = const_cast< ::PBCfg_Global*>(&::PBCfg_Global::default_instance());
  bigworld_ = const_cast< ::PBCfg_Bigworld*>(&::PBCfg_Bigworld::default_instance());
  dip_ = const_cast< ::PBCfg_Dip*>(&::PBCfg_Dip::default_instance());
  rooter_ = const_cast< ::PBCfg_Rooter*>(&::PBCfg_Rooter::default_instance());
  robotserver_ = const_cast< ::PBCfg_RobotServer*>(&::PBCfg_RobotServer::default_instance());
  robotclient_ = const_cast< ::PBCfg_RobotClient*>(&::PBCfg_RobotClient::default_instance());
}

PBCfg_Root::PBCfg_Root(const PBCfg_Root& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Root::SharedCtor() {
  _cached_size_ = 0;
  defaultcommon_ = NULL;
  world_ = NULL;
  game_ = NULL;
  login_ = NULL;
  register__ = NULL;
  db_ = NULL;
  global_ = NULL;
  bigworld_ = NULL;
  dip_ = NULL;
  rooter_ = NULL;
  robotserver_ = NULL;
  robotclient_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Root::~PBCfg_Root() {
  SharedDtor();
}

void PBCfg_Root::SharedDtor() {
  if (this != default_instance_) {
    delete defaultcommon_;
    delete world_;
    delete game_;
    delete login_;
    delete register__;
    delete db_;
    delete global_;
    delete bigworld_;
    delete dip_;
    delete rooter_;
    delete robotserver_;
    delete robotclient_;
  }
}

void PBCfg_Root::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Root::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Root_descriptor_;
}

const PBCfg_Root& PBCfg_Root::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Root* PBCfg_Root::default_instance_ = NULL;

PBCfg_Root* PBCfg_Root::New() const {
  return new PBCfg_Root;
}

void PBCfg_Root::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_defaultcommon()) {
      if (defaultcommon_ != NULL) defaultcommon_->::PBCfg_ServerCommon::Clear();
    }
    if (has_world()) {
      if (world_ != NULL) world_->::PBCfg_World::Clear();
    }
    if (has_game()) {
      if (game_ != NULL) game_->::PBCfg_Game::Clear();
    }
    if (has_login()) {
      if (login_ != NULL) login_->::PBCfg_Login::Clear();
    }
    if (has_register_()) {
      if (register__ != NULL) register__->::PBCfg_Register::Clear();
    }
    if (has_db()) {
      if (db_ != NULL) db_->::PBCfg_DB::Clear();
    }
    if (has_global()) {
      if (global_ != NULL) global_->::PBCfg_Global::Clear();
    }
    if (has_bigworld()) {
      if (bigworld_ != NULL) bigworld_->::PBCfg_Bigworld::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_dip()) {
      if (dip_ != NULL) dip_->::PBCfg_Dip::Clear();
    }
    if (has_rooter()) {
      if (rooter_ != NULL) rooter_->::PBCfg_Rooter::Clear();
    }
    if (has_robotserver()) {
      if (robotserver_ != NULL) robotserver_->::PBCfg_RobotServer::Clear();
    }
    if (has_robotclient()) {
      if (robotclient_ != NULL) robotclient_->::PBCfg_RobotClient::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Root::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_ServerCommon defaultcommon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defaultcommon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_world;
        break;
      }
      
      // optional .PBCfg_World world = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_world:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_game;
        break;
      }
      
      // optional .PBCfg_Game game = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_login;
        break;
      }
      
      // optional .PBCfg_Login login = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_register;
        break;
      }
      
      // optional .PBCfg_Register register = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_register:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_db;
        break;
      }
      
      // optional .PBCfg_DB db = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_global;
        break;
      }
      
      // optional .PBCfg_Global global = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_global:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_global()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(858)) goto parse_bigworld;
        break;
      }
      
      // optional .PBCfg_Bigworld bigworld = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bigworld:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bigworld()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(866)) goto parse_dip;
        break;
      }
      
      // optional .PBCfg_Dip dip = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(874)) goto parse_rooter;
        break;
      }
      
      // optional .PBCfg_Rooter rooter = 109;
      case 109: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rooter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(882)) goto parse_robotserver;
        break;
      }
      
      // optional .PBCfg_RobotServer robotserver = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robotserver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robotserver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(890)) goto parse_robotclient;
        break;
      }
      
      // optional .PBCfg_RobotClient robotclient = 111;
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robotclient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robotclient()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Root::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_ServerCommon defaultcommon = 1;
  if (has_defaultcommon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->defaultcommon(), output);
  }
  
  // optional .PBCfg_World world = 101;
  if (has_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->world(), output);
  }
  
  // optional .PBCfg_Game game = 102;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->game(), output);
  }
  
  // optional .PBCfg_Login login = 103;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->login(), output);
  }
  
  // optional .PBCfg_Register register = 104;
  if (has_register_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->register_(), output);
  }
  
  // optional .PBCfg_DB db = 105;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->db(), output);
  }
  
  // optional .PBCfg_Global global = 106;
  if (has_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->global(), output);
  }
  
  // optional .PBCfg_Bigworld bigworld = 107;
  if (has_bigworld()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->bigworld(), output);
  }
  
  // optional .PBCfg_Dip dip = 108;
  if (has_dip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->dip(), output);
  }
  
  // optional .PBCfg_Rooter rooter = 109;
  if (has_rooter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, this->rooter(), output);
  }
  
  // optional .PBCfg_RobotServer robotserver = 110;
  if (has_robotserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, this->robotserver(), output);
  }
  
  // optional .PBCfg_RobotClient robotclient = 111;
  if (has_robotclient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, this->robotclient(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Root::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_ServerCommon defaultcommon = 1;
  if (has_defaultcommon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->defaultcommon(), target);
  }
  
  // optional .PBCfg_World world = 101;
  if (has_world()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->world(), target);
  }
  
  // optional .PBCfg_Game game = 102;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->game(), target);
  }
  
  // optional .PBCfg_Login login = 103;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->login(), target);
  }
  
  // optional .PBCfg_Register register = 104;
  if (has_register_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->register_(), target);
  }
  
  // optional .PBCfg_DB db = 105;
  if (has_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->db(), target);
  }
  
  // optional .PBCfg_Global global = 106;
  if (has_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->global(), target);
  }
  
  // optional .PBCfg_Bigworld bigworld = 107;
  if (has_bigworld()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->bigworld(), target);
  }
  
  // optional .PBCfg_Dip dip = 108;
  if (has_dip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->dip(), target);
  }
  
  // optional .PBCfg_Rooter rooter = 109;
  if (has_rooter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, this->rooter(), target);
  }
  
  // optional .PBCfg_RobotServer robotserver = 110;
  if (has_robotserver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, this->robotserver(), target);
  }
  
  // optional .PBCfg_RobotClient robotclient = 111;
  if (has_robotclient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, this->robotclient(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Root::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_ServerCommon defaultcommon = 1;
    if (has_defaultcommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defaultcommon());
    }
    
    // optional .PBCfg_World world = 101;
    if (has_world()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world());
    }
    
    // optional .PBCfg_Game game = 102;
    if (has_game()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }
    
    // optional .PBCfg_Login login = 103;
    if (has_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }
    
    // optional .PBCfg_Register register = 104;
    if (has_register_()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_());
    }
    
    // optional .PBCfg_DB db = 105;
    if (has_db()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db());
    }
    
    // optional .PBCfg_Global global = 106;
    if (has_global()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->global());
    }
    
    // optional .PBCfg_Bigworld bigworld = 107;
    if (has_bigworld()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bigworld());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PBCfg_Dip dip = 108;
    if (has_dip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dip());
    }
    
    // optional .PBCfg_Rooter rooter = 109;
    if (has_rooter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rooter());
    }
    
    // optional .PBCfg_RobotServer robotserver = 110;
    if (has_robotserver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robotserver());
    }
    
    // optional .PBCfg_RobotClient robotclient = 111;
    if (has_robotclient()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robotclient());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Root::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Root* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Root*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Root::MergeFrom(const PBCfg_Root& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defaultcommon()) {
      mutable_defaultcommon()->::PBCfg_ServerCommon::MergeFrom(from.defaultcommon());
    }
    if (from.has_world()) {
      mutable_world()->::PBCfg_World::MergeFrom(from.world());
    }
    if (from.has_game()) {
      mutable_game()->::PBCfg_Game::MergeFrom(from.game());
    }
    if (from.has_login()) {
      mutable_login()->::PBCfg_Login::MergeFrom(from.login());
    }
    if (from.has_register_()) {
      mutable_register_()->::PBCfg_Register::MergeFrom(from.register_());
    }
    if (from.has_db()) {
      mutable_db()->::PBCfg_DB::MergeFrom(from.db());
    }
    if (from.has_global()) {
      mutable_global()->::PBCfg_Global::MergeFrom(from.global());
    }
    if (from.has_bigworld()) {
      mutable_bigworld()->::PBCfg_Bigworld::MergeFrom(from.bigworld());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dip()) {
      mutable_dip()->::PBCfg_Dip::MergeFrom(from.dip());
    }
    if (from.has_rooter()) {
      mutable_rooter()->::PBCfg_Rooter::MergeFrom(from.rooter());
    }
    if (from.has_robotserver()) {
      mutable_robotserver()->::PBCfg_RobotServer::MergeFrom(from.robotserver());
    }
    if (from.has_robotclient()) {
      mutable_robotclient()->::PBCfg_RobotClient::MergeFrom(from.robotclient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Root::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Root::CopyFrom(const PBCfg_Root& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Root::IsInitialized() const {
  
  return true;
}

void PBCfg_Root::Swap(PBCfg_Root* other) {
  if (other != this) {
    std::swap(defaultcommon_, other->defaultcommon_);
    std::swap(world_, other->world_);
    std::swap(game_, other->game_);
    std::swap(login_, other->login_);
    std::swap(register__, other->register__);
    std::swap(db_, other->db_);
    std::swap(global_, other->global_);
    std::swap(bigworld_, other->bigworld_);
    std::swap(dip_, other->dip_);
    std::swap(rooter_, other->rooter_);
    std::swap(robotserver_, other->robotserver_);
    std::swap(robotclient_, other->robotclient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Root::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Root_descriptor_;
  metadata.reflection = PBCfg_Root_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Xls2Data::kDatpathFieldNumber;
const int PBCfg_Xls2Data::kXlspathFieldNumber;
const int PBCfg_Xls2Data::kBinpathFieldNumber;
const int PBCfg_Xls2Data::kGenxmlFieldNumber;
#endif  // !_MSC_VER

PBCfg_Xls2Data::PBCfg_Xls2Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Xls2Data::InitAsDefaultInstance() {
}

PBCfg_Xls2Data::PBCfg_Xls2Data(const PBCfg_Xls2Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Xls2Data::SharedCtor() {
  _cached_size_ = 0;
  datpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xlspath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  binpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  genxml_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Xls2Data::~PBCfg_Xls2Data() {
  SharedDtor();
}

void PBCfg_Xls2Data::SharedDtor() {
  if (datpath_ != &::google::protobuf::internal::kEmptyString) {
    delete datpath_;
  }
  if (xlspath_ != &::google::protobuf::internal::kEmptyString) {
    delete xlspath_;
  }
  if (binpath_ != &::google::protobuf::internal::kEmptyString) {
    delete binpath_;
  }
  if (this != default_instance_) {
  }
}

void PBCfg_Xls2Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Xls2Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Xls2Data_descriptor_;
}

const PBCfg_Xls2Data& PBCfg_Xls2Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Xls2Data* PBCfg_Xls2Data::default_instance_ = NULL;

PBCfg_Xls2Data* PBCfg_Xls2Data::New() const {
  return new PBCfg_Xls2Data;
}

void PBCfg_Xls2Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_datpath()) {
      if (datpath_ != &::google::protobuf::internal::kEmptyString) {
        datpath_->clear();
      }
    }
    if (has_xlspath()) {
      if (xlspath_ != &::google::protobuf::internal::kEmptyString) {
        xlspath_->clear();
      }
    }
    if (has_binpath()) {
      if (binpath_ != &::google::protobuf::internal::kEmptyString) {
        binpath_->clear();
      }
    }
    genxml_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Xls2Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string datpath = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datpath().data(), this->datpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xlspath;
        break;
      }
      
      // optional string xlspath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xlspath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xlspath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xlspath().data(), this->xlspath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_binpath;
        break;
      }
      
      // optional string binpath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_binpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->binpath().data(), this->binpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_genxml;
        break;
      }
      
      // optional bool genxml = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genxml:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genxml_)));
          set_has_genxml();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Xls2Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string datpath = 1;
  if (has_datpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datpath().data(), this->datpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->datpath(), output);
  }
  
  // optional string xlspath = 2;
  if (has_xlspath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xlspath().data(), this->xlspath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->xlspath(), output);
  }
  
  // optional string binpath = 3;
  if (has_binpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->binpath().data(), this->binpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->binpath(), output);
  }
  
  // optional bool genxml = 4;
  if (has_genxml()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->genxml(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Xls2Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string datpath = 1;
  if (has_datpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datpath().data(), this->datpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->datpath(), target);
  }
  
  // optional string xlspath = 2;
  if (has_xlspath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xlspath().data(), this->xlspath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->xlspath(), target);
  }
  
  // optional string binpath = 3;
  if (has_binpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->binpath().data(), this->binpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->binpath(), target);
  }
  
  // optional bool genxml = 4;
  if (has_genxml()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->genxml(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Xls2Data::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string datpath = 1;
    if (has_datpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datpath());
    }
    
    // optional string xlspath = 2;
    if (has_xlspath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xlspath());
    }
    
    // optional string binpath = 3;
    if (has_binpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->binpath());
    }
    
    // optional bool genxml = 4;
    if (has_genxml()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Xls2Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Xls2Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Xls2Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Xls2Data::MergeFrom(const PBCfg_Xls2Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datpath()) {
      set_datpath(from.datpath());
    }
    if (from.has_xlspath()) {
      set_xlspath(from.xlspath());
    }
    if (from.has_binpath()) {
      set_binpath(from.binpath());
    }
    if (from.has_genxml()) {
      set_genxml(from.genxml());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Xls2Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Xls2Data::CopyFrom(const PBCfg_Xls2Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Xls2Data::IsInitialized() const {
  
  return true;
}

void PBCfg_Xls2Data::Swap(PBCfg_Xls2Data* other) {
  if (other != this) {
    std::swap(datpath_, other->datpath_);
    std::swap(xlspath_, other->xlspath_);
    std::swap(binpath_, other->binpath_);
    std::swap(genxml_, other->genxml_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Xls2Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Xls2Data_descriptor_;
  metadata.reflection = PBCfg_Xls2Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCfg_Record::kMysqlFieldNumber;
const int PBCfg_Record::kPortFieldNumber;
const int PBCfg_Record::kRundroptableFieldNumber;
#endif  // !_MSC_VER

PBCfg_Record::PBCfg_Record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCfg_Record::InitAsDefaultInstance() {
  mysql_ = const_cast< ::PBCfg_MysqlDB*>(&::PBCfg_MysqlDB::default_instance());
}

PBCfg_Record::PBCfg_Record(const PBCfg_Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCfg_Record::SharedCtor() {
  _cached_size_ = 0;
  mysql_ = NULL;
  port_ = 0u;
  rundroptable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCfg_Record::~PBCfg_Record() {
  SharedDtor();
}

void PBCfg_Record::SharedDtor() {
  if (this != default_instance_) {
    delete mysql_;
  }
}

void PBCfg_Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCfg_Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCfg_Record_descriptor_;
}

const PBCfg_Record& PBCfg_Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBConfig_2eproto();  return *default_instance_;
}

PBCfg_Record* PBCfg_Record::default_instance_ = NULL;

PBCfg_Record* PBCfg_Record::New() const {
  return new PBCfg_Record;
}

void PBCfg_Record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mysql()) {
      if (mysql_ != NULL) mysql_->::PBCfg_MysqlDB::Clear();
    }
    port_ = 0u;
    rundroptable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCfg_Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCfg_MysqlDB mysql = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mysql()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rundroptable;
        break;
      }
      
      // optional bool rundroptable = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rundroptable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rundroptable_)));
          set_has_rundroptable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCfg_Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCfg_MysqlDB mysql = 1;
  if (has_mysql()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mysql(), output);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }
  
  // optional bool rundroptable = 3;
  if (has_rundroptable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rundroptable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCfg_Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCfg_MysqlDB mysql = 1;
  if (has_mysql()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mysql(), target);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }
  
  // optional bool rundroptable = 3;
  if (has_rundroptable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->rundroptable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCfg_Record::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCfg_MysqlDB mysql = 1;
    if (has_mysql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mysql());
    }
    
    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
    // optional bool rundroptable = 3;
    if (has_rundroptable()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCfg_Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCfg_Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCfg_Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCfg_Record::MergeFrom(const PBCfg_Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mysql()) {
      mutable_mysql()->::PBCfg_MysqlDB::MergeFrom(from.mysql());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_rundroptable()) {
      set_rundroptable(from.rundroptable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCfg_Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCfg_Record::CopyFrom(const PBCfg_Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCfg_Record::IsInitialized() const {
  
  return true;
}

void PBCfg_Record::Swap(PBCfg_Record* other) {
  if (other != this) {
    std::swap(mysql_, other->mysql_);
    std::swap(port_, other->port_);
    std::swap(rundroptable_, other->rundroptable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCfg_Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCfg_Record_descriptor_;
  metadata.reflection = PBCfg_Record_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
