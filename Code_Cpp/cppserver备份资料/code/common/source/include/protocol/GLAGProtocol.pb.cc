// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GLAGProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* _emPGL2G_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emGL2G_Protocol_Start_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emGL2G_Trade_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emGL2G_SaleMoney_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emGL2G_Auction_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emGL2G_Friend_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emGL2G_WorldBoss_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emPG2GL_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emGLAG_Common_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2GL_Player_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2GL_Trade_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2GL_SaleMoney_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2GL_Auction_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2GL_TopList_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2GL_Friend_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2GL_WorldBoss_Protocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GLAGProtocol_2eproto() {
  protobuf_AddDesc_GLAGProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GLAGProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  _emPGL2G_Protocol_descriptor_ = file->enum_type(0);
  _emGL2G_Protocol_Start_descriptor_ = file->enum_type(1);
  _emGL2G_Trade_Protocol_descriptor_ = file->enum_type(2);
  _emGL2G_SaleMoney_Protocol_descriptor_ = file->enum_type(3);
  _emGL2G_Auction_Protocol_descriptor_ = file->enum_type(4);
  _emGL2G_Friend_Protocol_descriptor_ = file->enum_type(5);
  _emGL2G_WorldBoss_Protocol_descriptor_ = file->enum_type(6);
  _emPG2GL_Protocol_descriptor_ = file->enum_type(7);
  _emGLAG_Common_Protocol_descriptor_ = file->enum_type(8);
  _emG2GL_Player_Protocol_descriptor_ = file->enum_type(9);
  _emG2GL_Trade_Protocol_descriptor_ = file->enum_type(10);
  _emG2GL_SaleMoney_Protocol_descriptor_ = file->enum_type(11);
  _emG2GL_Auction_Protocol_descriptor_ = file->enum_type(12);
  _emG2GL_TopList_Protocol_descriptor_ = file->enum_type(13);
  _emG2GL_Friend_Protocol_descriptor_ = file->enum_type(14);
  _emG2GL_WorldBoss_Protocol_descriptor_ = file->enum_type(15);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GLAGProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_GLAGProtocol_2eproto() {
}

void protobuf_AddDesc_GLAGProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022GLAGProtocol.proto*\373\001\n\021_emPGL2G_Protoc"
    "ol\022\031\n\025P_GL2G_Protocol_Start\020\000\022\035\n\031P_GL2G_"
    "Protocol_ClientMsg\020\001\022\031\n\025P_GL2G_Protocol_"
    "Trade\020\002\022\035\n\031P_GL2G_Protocol_SaleMoney\020\003\022\033"
    "\n\027P_GL2G_Protocol_Auction\020\004\022\032\n\026P_GL2G_Pr"
    "otocol_Common\020\005\022\032\n\026P_GL2G_Protocol_Frien"
    "d\020\006\022\035\n\031P_GL2G_Protocol_WorldBoss\020\007*L\n\026_e"
    "mGL2G_Protocol_Start\022\027\n\023GL2G_Start_Regis"
    "ter\020\000\022\031\n\025GL2G_Start_UnRegister\020\001*\232\001\n\026_em"
    "GL2G_Trade_Protocol\022\024\n\020GL2G_Trade_Begin\020"
    "\001\022\022\n\016GL2G_Trade_End\020\002\022\024\n\020GL2G_Trade_chec"
    "k\020\003\022\025\n\021GL2G_Trade_delete\020\004\022\022\n\016GL2G_Trade"
    "_add\020\005\022\025\n\021GL2G_Trade_Return\020\006*]\n\032_emGL2G"
    "_SaleMoney_Protocol\022\034\n\030GL2G_SaleMoney_sa"
    "le_Fail\020\000\022!\n\035GL2G_SaleMoney_salecancel_S"
    "uc\020\001*r\n\030_emGL2G_Auction_Protocol\022\032\n\026GL2G"
    "_Auction_sale_Fail\020\000\022\037\n\033GL2G_Auction_sal"
    "ecancel_Suc\020\001\022\031\n\025GL2G_Auction_buy_Fail\020\002"
    "*\236\001\n\027_emGL2G_Friend_Protocol\022 \n\034GL2G_Fri"
    "end_Add_Ask_Transfer\020\000\022\037\n\033GL2G_Friend_An"
    "swer_Transfer\020\001\022\026\n\022GL2G_Friend_Update\020\002\022"
    "\023\n\017GL2G_Friend_Syn\020\003\022\023\n\017GL2G_Friend_Add\020"
    "\004*^\n\032_emGL2G_WorldBoss_Protocol\022\035\n\031GL2G_"
    "WorldBoss_Status_Ntf\020\000\022!\n\035GL2G_WorldBoss"
    "_KillerInfo_Ack\020\001*\372\001\n\021_emPG2GL_Protocol\022"
    "\032\n\026P_G2GL_Protocol_Player\020\000\022\031\n\025P_G2GL_Pr"
    "otocol_Trade\020\001\022\035\n\031P_G2GL_Protocol_SaleMo"
    "ney\020\002\022\033\n\027P_G2GL_Protocol_Auction\020\003\022\032\n\026P_"
    "G2GL_Protocol_Common\020\004\022\033\n\027P_G2GL_Protoco"
    "l_TopList\020\005\022\032\n\026P_G2GL_Protocol_Friend\020\006\022"
    "\035\n\031P_G2GL_Protocol_WorldBoss\020\007*\240\002\n\027_emGL"
    "AG_Common_Protocol\022\032\n\026GLAG_Common_FindPl"
    "ayer\020\000\022\035\n\031GLAG_Common_FindPlayerAck\020\001\022\024\n"
    "\020GLAG_Common_Mail\020\002\022\036\n\032GLAG_Common_BossI"
    "nfoUpdate\020\003\022\033\n\027GLAG_Common_BossListAsk\020\004"
    "\022\034\n\030GLAG_Common_SearchPlayer\020\005\022\032\n\026GLAG_C"
    "ommon_CallPlayer\020\006\022\034\n\030GLAG_Common_Locate"
    "Player\020\007\022\037\n\033GLAG_Common_LocatePlayerAck\020"
    "\010*F\n\027_emG2GL_Player_Protocol\022\023\n\017G2GL_Pla"
    "yer_Syn\020\000\022\026\n\022G2GL_Player_Update\020\001*\257\002\n\026_e"
    "mG2GL_Trade_Protocol\022\024\n\020G2GL_Trade_apply"
    "\020\000\022\025\n\021G2GL_Trade_answer\020\001\022\026\n\022G2GL_Trade_"
    "addItem\020\002\022\026\n\022G2GL_Trade_delItem\020\003\022\027\n\023G2G"
    "L_Trade_setMoney\020\004\022\023\n\017G2GL_Trade_lock\020\005\022"
    "\025\n\021G2GL_Trade_unlock\020\006\022\026\n\022G2GL_Trade_con"
    "firm\020\007\022\025\n\021G2GL_Trade_cancel\020\010\022\027\n\023G2GL_Tr"
    "ade_interupt\020\t\022\024\n\020G2GL_Trade_check\020\n\022\025\n\021"
    "G2GL_Trade_delete\020\013*\305\001\n\032_emG2GL_SaleMone"
    "y_Protocol\022\027\n\023G2GL_SaleMoney_sale\020\000\022\035\n\031G"
    "2GL_SaleMoney_salecancel\020\001\022\027\n\023G2GL_SaleM"
    "oney_list\020\002\022\031\n\025G2GL_SaleMoney_supply\020\003\022\036"
    "\n\032G2GL_SaleMoney_supplyextra\020\004\022\033\n\027G2GL_S"
    "aleMoney_tradelog\020\005*\221\001\n\030_emG2GL_Auction_"
    "Protocol\022\025\n\021G2GL_Auction_Sale\020\000\022\033\n\027G2GL_"
    "Auction_SaleCancel\020\001\022\024\n\020G2GL_Auction_Buy"
    "\020\002\022\025\n\021G2GL_Auction_List\020\003\022\024\n\020G2GL_Auctio"
    "n_Ave\020\004*\202\001\n\030_emG2GL_TopList_Protocol\022\027\n\023"
    "G2GL_TopList_Update\020\000\022\025\n\021G2GL_TopList_Li"
    "st\020\001\022\027\n\023G2GL_TopList_Player\020\002\022\035\n\031G2GL_To"
    "pList_SetClearTime\020\003*\325\001\n\027_emG2GL_Friend_"
    "Protocol\022 \n\034G2GL_Friend_Add_Ask_Transfer"
    "\020\000\022\037\n\033G2GL_Friend_Answer_Transfer\020\001\022\035\n\031G"
    "2GL_Friend_Find_Transfer\020\002\022\034\n\030G2GL_Frien"
    "d_Syn_ToGlobal\020\003\022\034\n\030G2GL_Friend_Add_ToGl"
    "obal\020\004\022\034\n\030G2GL_Friend_Del_ToGlobal\020\005*c\n\032"
    "_emG2GL_WorldBoss_Protocol\022$\n G2GL_World"
    "Boss_Status_Report_Ask\020\000\022\037\n\033G2GL_WorldBo"
    "ss_KillInfo_Ask\020\001", 2697);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GLAGProtocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GLAGProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GLAGProtocol_2eproto {
  StaticDescriptorInitializer_GLAGProtocol_2eproto() {
    protobuf_AddDesc_GLAGProtocol_2eproto();
  }
} static_descriptor_initializer_GLAGProtocol_2eproto_;

const ::google::protobuf::EnumDescriptor* _emPGL2G_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPGL2G_Protocol_descriptor_;
}
bool _emPGL2G_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emGL2G_Protocol_Start_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emGL2G_Protocol_Start_descriptor_;
}
bool _emGL2G_Protocol_Start_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emGL2G_Trade_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emGL2G_Trade_Protocol_descriptor_;
}
bool _emGL2G_Trade_Protocol_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emGL2G_SaleMoney_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emGL2G_SaleMoney_Protocol_descriptor_;
}
bool _emGL2G_SaleMoney_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emGL2G_Auction_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emGL2G_Auction_Protocol_descriptor_;
}
bool _emGL2G_Auction_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emGL2G_Friend_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emGL2G_Friend_Protocol_descriptor_;
}
bool _emGL2G_Friend_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emGL2G_WorldBoss_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emGL2G_WorldBoss_Protocol_descriptor_;
}
bool _emGL2G_WorldBoss_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emPG2GL_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPG2GL_Protocol_descriptor_;
}
bool _emPG2GL_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emGLAG_Common_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emGLAG_Common_Protocol_descriptor_;
}
bool _emGLAG_Common_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2GL_Player_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2GL_Player_Protocol_descriptor_;
}
bool _emG2GL_Player_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2GL_Trade_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2GL_Trade_Protocol_descriptor_;
}
bool _emG2GL_Trade_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2GL_SaleMoney_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2GL_SaleMoney_Protocol_descriptor_;
}
bool _emG2GL_SaleMoney_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2GL_Auction_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2GL_Auction_Protocol_descriptor_;
}
bool _emG2GL_Auction_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2GL_TopList_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2GL_TopList_Protocol_descriptor_;
}
bool _emG2GL_TopList_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2GL_Friend_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2GL_Friend_Protocol_descriptor_;
}
bool _emG2GL_Friend_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2GL_WorldBoss_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2GL_WorldBoss_Protocol_descriptor_;
}
bool _emG2GL_WorldBoss_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
