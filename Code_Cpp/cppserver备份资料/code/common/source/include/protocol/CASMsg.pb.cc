// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CASMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBLoginAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLoginAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCheckPlayerNameAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCheckPlayerNameAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCreatePlayerAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCreatePlayerAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDelPlayerAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDelPlayerAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSelectPlayerAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSelectPlayerAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLoginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLoginAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAccountLoadAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAccountLoadAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerNameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerNameAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCreatePlayerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCreatePlayerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDelPlayerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDelPlayerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSelectPlayerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSelectPlayerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GLoginAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GLoginAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CLoginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CLoginAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GGMCmdTxtCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GGMCmdTxtCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CGMCmdTxtCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CGMCmdTxtCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSceneFlySameGameSvr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSceneFlySameGameSvr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSceneFlyJumpGameSvr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSceneFlyJumpGameSvr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommonUnitRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommonUnitRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommonMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommonMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GUseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GUseSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GSkillBreak_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GSkillBreak_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SSkillUseCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SSkillUseCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GSkillUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GSkillUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GSkillAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GSkillAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSkillBreak_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSkillBreak_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CUseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CUseSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CAddSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CAddSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CDelSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CDelSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CUpCoolTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CUpCoolTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CUpgradeSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CUpgradeSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSkillNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSkillNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSkillDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSkillDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CSkillEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CSkillEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CSkillEffectBroad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CSkillEffectBroad_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSkillUseCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSkillUseCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CSkillEnemyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CSkillEnemyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GDelBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GDelBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CAddBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CAddBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CAddMoveBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CAddMoveBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CDelBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CDelBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CUpdateBuffTick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CUpdateBuffTick_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCounter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCounter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GGetClientData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GGetClientData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CGetClientData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CGetClientData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CClientDataOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CClientDataOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMailID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMailID_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRewardMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRewardMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GDelItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GDelItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CDelItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CDelItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GUseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GUseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CUseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CUseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GEquipItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GEquipItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CEquipItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CEquipItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GSellItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GSellItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSellItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSellItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GBuyBackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GBuyBackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CBuyBackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CBuyBackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CUpdateItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CUpdateItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GSplitItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GSplitItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSplitItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSplitItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GSortItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GSortItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSortItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSortItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CNewItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CNewItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GEquipColumnEnhance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GEquipColumnEnhance_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CEquipColumnEnhance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CEquipColumnEnhance_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GEquipColumnForge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GEquipColumnForge_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CEquipColumnForge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CEquipColumnForge_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GEquipEnhance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GEquipEnhance_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CEquipEnhance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CEquipEnhance_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GEquipForge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GEquipForge_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CEquipForge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CEquipForge_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GEquipInherit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GEquipInherit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CEquipInherit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CEquipInherit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GEquipMake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GEquipMake_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CEquipMake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CEquipMake_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GMounting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GMounting_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CMounting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CMounting_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GItemCompoundAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GItemCompoundAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GItemOpenEquipMakeDlgAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GItemOpenEquipMakeDlgAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CItemCompoundAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CItemCompoundAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CItemOpenEquipMakeDlgAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CItemOpenEquipMakeDlgAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GItemOpenEquipMakeOEMDlgAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GItemOpenEquipMakeOEMDlgAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GItemCommitEquipMakeOEMAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GItemCommitEquipMakeOEMAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GItemVisitEquipMakeOEMAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GItemVisitEquipMakeOEMAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CItemOpenEquipMakeOEMDlgAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CItemOpenEquipMakeOEMDlgAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CItemCommitEquipMakeOEMAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CItemCommitEquipMakeOEMAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CItemVisitEquipMakeOEMAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CItemVisitEquipMakeOEMAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GItemEquipMakeOEMAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GItemEquipMakeOEMAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CItemEquipMakeOEMAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CItemEquipMakeOEMAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GItemEquipChangeOEMFeeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GItemEquipChangeOEMFeeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CItemEquipChangeOEMFeeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CItemEquipChangeOEMFeeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GQuestAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GQuestAccept_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CQuestAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CQuestAccept_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GQuestComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GQuestComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CQuestComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CQuestComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GQuestUpdateItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GQuestUpdateItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CQuestUpdateItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CQuestUpdateItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GQuestGiveUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GQuestGiveUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CQuestGiveUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CQuestGiveUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GStoreBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GStoreBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CStoreBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CStoreBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CExpendSyn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CExpendSyn_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CAddHp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CAddHp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CAddExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CAddExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CClearData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CClearData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CAddLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CAddLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GPrizeAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GPrizeAccept_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GPrizeAbandon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GPrizeAbandon_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CPrizeNew_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CPrizeNew_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTrade_apply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTrade_apply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTrade_answer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTrade_answer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTrade_addItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTrade_addItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTrade_delItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTrade_delItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTrade_setMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTrade_setMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTrade_begin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTrade_begin_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTrade_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTrade_end_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTrade_addItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTrade_addItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTrade_delItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTrade_delItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTrade_setMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTrade_setMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTrade_lock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTrade_lock_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTrade_unlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTrade_unlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTrade_confirm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTrade_confirm_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTrade_applyTrasfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTrade_applyTrasfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTrade_answerTrasfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTrade_answerTrasfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSaleMoney_tradelog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSaleMoney_tradelog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GSaleMoney_sale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GSaleMoney_sale_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GSaleMoney_salecancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GSaleMoney_salecancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSaleMoney_ListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSaleMoney_ListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSaleMoney_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSaleMoney_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFindPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFindPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFindPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFindPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GAuction_sale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GAuction_sale_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GAuction_salecancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GAuction_salecancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GAuction_buy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GAuction_buy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAuctionFilterItemType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAuctionFilterItemType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GAuction_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GAuction_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GAuction_ave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GAuction_ave_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CAuction_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CAuction_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CAuction_ave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CAuction_ave_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTopListList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTopListList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTopListOne_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTopListOne_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTopListSetClearTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTopListSetClearTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTopListDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTopListDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CTopListList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CTopListList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CTopListOne_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CTopListOne_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFriend_AddAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFriend_AddAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFriend_DelAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFriend_DelAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFriend_Answer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFriend_Answer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFriend_Find_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFriend_Find_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFriendFindInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFriendFindInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFriend_Find_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFriend_Find_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFriend_AddAskTrasfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFriend_AddAskTrasfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFriend_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFriend_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommon_PKType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommon_PKType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_PKType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_PKType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommonForbitSpeakAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommonForbitSpeakAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommonStrongerReWard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommonStrongerReWard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommonSubFightPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommonSubFightPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCopymapUnactive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCopymapUnactive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2Relive_SceneBorn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2Relive_SceneBorn_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_TimeEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_TimeEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWenTao_SetBingFa_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWenTao_SetBingFa_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWenTao_SetScheme_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWenTao_SetScheme_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWenTao_QianXiu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWenTao_QianXiu_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWenTao_TuPo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWenTao_TuPo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWenTao_Upgrate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWenTao_Upgrate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWenTao_SetBingfu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWenTao_SetBingfu_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWenTao_Reset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWenTao_Reset_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWenTao_ActiveScheme_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWenTao_ActiveScheme_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWenTao_ActiveBingFa_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWenTao_ActiveBingFa_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWenTao_QianXiuUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWenTao_QianXiuUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWenTao_TuPoUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWenTao_TuPoUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWenTao_YaoDianUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWenTao_YaoDianUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWenTao_WisdomUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWenTao_WisdomUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GWulueSetSchemeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GWulueSetSchemeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GWulueUpZhanlueAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GWulueUpZhanlueAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GWulueSetBingfuAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GWulueSetBingfuAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CWulueSetSchemeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CWulueSetSchemeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CWulueUpZhanlueAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CWulueUpZhanlueAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CWulueSetBingfuAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CWulueSetBingfuAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GBingfuUpgradeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GBingfuUpgradeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GBingfuUpOneLevelAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GBingfuUpOneLevelAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GBingfuSplitAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GBingfuSplitAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CBingfuUpgradeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CBingfuUpgradeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2DropItem_InfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2DropItem_InfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2DropItem_DiceAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2DropItem_DiceAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2DropItem_PickAllAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2DropItem_PickAllAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2DropItem_PickupAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2DropItem_PickupAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2DropItem_AbadonAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2DropItem_AbadonAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2DropItem_AssignAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2DropItem_AssignAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDropItem_DiceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDropItem_DiceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDropItem_DropCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDropItem_DropCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2DropItem_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2DropItem_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2DropItem_Dice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2DropItem_Dice_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2DropItem_Assign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2DropItem_Assign_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2DropItem_ChangeAllot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2DropItem_ChangeAllot_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommon_PlaneEnter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommon_PlaneEnter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommon_PlaneLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommon_PlaneLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommon_RegionTriggerPlane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommon_RegionTriggerPlane_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2GCommon_TakeASeatAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2GCommon_TakeASeatAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_PlaneUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_PlaneUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCopymapCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCopymapCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCopymapEnterNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCopymapEnterNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCopymapExit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCopymapExit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCopymapInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCopymapInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapInviteTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapInviteTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCopymapAcceptInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCopymapAcceptInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapState_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CReadyStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CReadyStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapCloseTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapCloseTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapFindAttackMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapFindAttackMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapQuestTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapQuestTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapChangeQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapChangeQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapHurtInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapHurtInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCopymapGuardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCopymapGuardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapSysGuardHp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapSysGuardHp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CPoemActivePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CPoemActivePos_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CLiangyiNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CLiangyiNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapWave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapWave_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CSixiangMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CSixiangMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapAssistCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapAssistCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapEnterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapEnterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCopymapTeamMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCopymapTeamMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapTeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapTeamMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapTeamMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBManorLineUpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBManorLineUpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapManorLobbyLineupNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapManorLobbyLineupNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapManorBattleFieldShenfuNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapManorBattleFieldShenfuNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBManorBattleFieldComrades_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBManorBattleFieldComrades_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapManorBattleFieldComradesNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapManorBattleFieldComradesNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFactionScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFactionScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapManorBattleFieldTotalScoreNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapManorBattleFieldTotalScoreNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCopymapManorBroadCastPromptNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCopymapManorBroadCastPromptNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_BossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_BossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_BossList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_BossList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommon_FlyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommon_FlyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_FlyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_FlyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommon_TaskFlyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommon_TaskFlyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_TaskFlyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_TaskFlyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_DazuoguajiTotalNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_DazuoguajiTotalNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CUpBingfuExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CUpBingfuExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommonTreasurePrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommonTreasurePrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommonSetCorpsJob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommonSetCorpsJob_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommonStrongerReWard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommonStrongerReWard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFightPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFightPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommonSubFightPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommonSubFightPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_SystemSwitchAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_SystemSwitchAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommonPromotion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommonPromotion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_Promotion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_Promotion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GIdentityOpenAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GIdentityOpenAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CIdentityOpenAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CIdentityOpenAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GIdentityLearnAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GIdentityLearnAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CIdentityLearnAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CIdentityLearnAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GIdentityResetAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GIdentityResetAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CIdentityResetAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CIdentityResetAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GIdentityUpSkillAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GIdentityUpSkillAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CIdentityUpSkillAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CIdentityUpSkillAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GWuxueNewAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GWuxueNewAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CWuxueNewAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CWuxueNewAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GWuxueDelAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GWuxueDelAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CWuxueDelAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CWuxueDelAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GWuxueChangeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GWuxueChangeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CWuxueChangeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CWuxueChangeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GWuxueSetSkillAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GWuxueSetSkillAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CWuxueSetSkillAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CWuxueSetSkillAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GWuxueSetAllSkillAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GWuxueSetAllSkillAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CWuxueSetAllSkillAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CWuxueSetAllSkillAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GWuxueLearnSkillAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GWuxueLearnSkillAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CWuxueLearnSkillAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CWuxueLearnSkillAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommon_SearchPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommon_SearchPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_SearchPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_SearchPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_MonsterTalk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_MonsterTalk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_BeFindNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_BeFindNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommon_NpcDialogComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommon_NpcDialogComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommon_UnActiveMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommon_UnActiveMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_SetPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_SetPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_DayCopymapCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_DayCopymapCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCommonGetBattleAttrDetailAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCommonGetBattleAttrDetailAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCommon_TakeASeatAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCommon_TakeASeatAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SDartCheckAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SDartCheckAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDartMemberResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDartMemberResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartCheckAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartCheckAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SDartStartAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SDartStartAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SDartQuitAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SDartQuitAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDartInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDartInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartStartAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartStartAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartInfoNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartInfoNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartCheckPauseNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartCheckPauseNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SDartCheckConfirmAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SDartCheckConfirmAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SDartCheckGetBuffAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SDartCheckGetBuffAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartStartMoveNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartStartMoveNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartStartRobNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartStartRobNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartFinishAndPrizeNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartFinishAndPrizeNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartCheckGetBuffAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartCheckGetBuffAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SDartAddSupplyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SDartAddSupplyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SDartAddSupplyConfirmAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SDartAddSupplyConfirmAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartFinishRobNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartFinishRobNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDartAddSupplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDartAddSupplyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartAddSupplyNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartAddSupplyNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartAddSupplyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartAddSupplyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartQuitAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartQuitAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartCheckConfirmAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartCheckConfirmAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartAddSupplyConfirmAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartAddSupplyConfirmAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SDartBack2NpcAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SDartBack2NpcAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CDartBack2NpcAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CDartBack2NpcAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionBossTopAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionBossTopAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionBossPersonalTopAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionBossPersonalTopAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionBossFactionTopAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionBossFactionTopAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFactionBossUnionTopAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFactionBossUnionTopAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CSceneAreaList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CSceneAreaList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CQinggongStartNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CQinggongStartNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleAttrDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleAttrDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CGetBattleAttrDetailAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CGetBattleAttrDetailAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTitleEquipAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTitleEquipAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTitleEquipAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTitleEquipAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GTitleUnEquipAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GTitleUnEquipAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTitleUnEquipAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTitleUnEquipAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTitleAddAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTitleAddAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CTitleDelAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CTitleDelAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFashionEquipAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFashionEquipAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFashionEquipAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFashionEquipAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GFashionUnEquipAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GFashionUnEquipAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CFashionUnEquipAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CFashionUnEquipAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClimbTowerGetInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClimbTowerGetInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClimbTowerGetInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClimbTowerGetInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClimbTowerGetInfoNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClimbTowerGetInfoNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClimbTowerPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClimbTowerPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClimbTowerShowPrizeNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClimbTowerShowPrizeNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClimbTowerChoosePrizeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClimbTowerChoosePrizeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClimbTowerChoosePrizeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClimbTowerChoosePrizeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClimbTowerClearAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClimbTowerClearAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClimbTowerClearAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClimbTowerClearAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBClimbTowerShowClearNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBClimbTowerShowClearNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GAnswerQuestion_Answer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GAnswerQuestion_Answer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CAnswerQuestion_QuestionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CAnswerQuestion_QuestionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CAnswerQuestion_QuestionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CAnswerQuestion_QuestionResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGreatWallTrainInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGreatWallTrainInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWorldBossGetInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWorldBossGetInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWorldBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWorldBossGetInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldBossGetInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWorldBossUpdateBossHurtRankAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWorldBossUpdateBossHurtRankAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWorldBossUpdateBossHurtRankAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldBossUpdateBossHurtRankAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBossHurtRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBossHurtRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWorldBossUpdateBossHurtRankNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldBossUpdateBossHurtRankNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SWorldBossGotoBossAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SWorldBossGotoBossAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBS2CWorldBossGotoBossAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBS2CWorldBossGotoBossAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SActivityGetRewardAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SActivityGetRewardAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SActivityGetRewardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SActivityGetRewardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2SActivityAddLivenessAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2SActivityAddLivenessAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GRelive_Born_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GRelive_Born_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCorpsInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCorpsInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCorpsSetDecAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCorpsSetDecAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCorpsSetDecAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCorpsSetDecAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCorpsSetJobAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCorpsSetJobAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CCorpsSetJobAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CCorpsSetJobAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GCorpsForbitSpeakAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GCorpsForbitSpeakAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GWealLoginPrizeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GWealLoginPrizeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GManorGetAllInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GManorGetAllInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CManorGetAllInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CManorGetAllInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GManorGetFightInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GManorGetFightInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CManorGetFightInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CManorGetFightInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GManorApplyFightAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GManorApplyFightAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CManorApplyFightAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CManorApplyFightAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GManorEnterLobbyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GManorEnterLobbyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CManorEnterLobbyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CManorEnterLobbyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CManorStartFightNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CManorStartFightNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GManorMVPVoteAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GManorMVPVoteAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CManorMvpVoteAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CManorMvpVoteAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CManorMVPVoteNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CManorMVPVoteNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GManorGetScoresAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GManorGetScoresAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBC2GManorGetPlayerScoresAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBC2GManorGetPlayerScoresAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBManorBattleFieldScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBManorBattleFieldScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CManorGetScoresAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CManorGetScoresAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CManorGetPlayerScoresAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CManorGetPlayerScoresAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBManorMVP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBManorMVP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBG2CManorResultNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBG2CManorResultNtf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CASMsg_2eproto() {
  protobuf_AddDesc_CASMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CASMsg.proto");
  GOOGLE_CHECK(file != NULL);
  PBLoginAsk_descriptor_ = file->message_type(0);
  static const int PBLoginAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginAsk, login_),
  };
  PBLoginAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLoginAsk_descriptor_,
      PBLoginAsk::default_instance_,
      PBLoginAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLoginAsk));
  PBCheckPlayerNameAsk_descriptor_ = file->message_type(1);
  static const int PBCheckPlayerNameAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCheckPlayerNameAsk, name_),
  };
  PBCheckPlayerNameAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCheckPlayerNameAsk_descriptor_,
      PBCheckPlayerNameAsk::default_instance_,
      PBCheckPlayerNameAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCheckPlayerNameAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCheckPlayerNameAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCheckPlayerNameAsk));
  PBCreatePlayerAsk_descriptor_ = file->message_type(2);
  static const int PBCreatePlayerAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreatePlayerAsk, playerdisplay_),
  };
  PBCreatePlayerAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCreatePlayerAsk_descriptor_,
      PBCreatePlayerAsk::default_instance_,
      PBCreatePlayerAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreatePlayerAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreatePlayerAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCreatePlayerAsk));
  PBDelPlayerAsk_descriptor_ = file->message_type(3);
  static const int PBDelPlayerAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDelPlayerAsk, playerid_),
  };
  PBDelPlayerAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDelPlayerAsk_descriptor_,
      PBDelPlayerAsk::default_instance_,
      PBDelPlayerAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDelPlayerAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDelPlayerAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDelPlayerAsk));
  PBSelectPlayerAsk_descriptor_ = file->message_type(4);
  static const int PBSelectPlayerAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSelectPlayerAsk, playerid_),
  };
  PBSelectPlayerAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSelectPlayerAsk_descriptor_,
      PBSelectPlayerAsk::default_instance_,
      PBSelectPlayerAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSelectPlayerAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSelectPlayerAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSelectPlayerAsk));
  PBLoginAck_descriptor_ = file->message_type(5);
  static const int PBLoginAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginAck, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginAck, worldcreatetime_),
  };
  PBLoginAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLoginAck_descriptor_,
      PBLoginAck::default_instance_,
      PBLoginAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLoginAck));
  PBAccountLoadAck_descriptor_ = file->message_type(6);
  static const int PBAccountLoadAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountLoadAck, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountLoadAck, avatar_),
  };
  PBAccountLoadAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAccountLoadAck_descriptor_,
      PBAccountLoadAck::default_instance_,
      PBAccountLoadAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountLoadAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountLoadAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAccountLoadAck));
  PBPlayerNameAck_descriptor_ = file->message_type(7);
  static const int PBPlayerNameAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerNameAck, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerNameAck, name_),
  };
  PBPlayerNameAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerNameAck_descriptor_,
      PBPlayerNameAck::default_instance_,
      PBPlayerNameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerNameAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerNameAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerNameAck));
  PBCreatePlayerAck_descriptor_ = file->message_type(8);
  static const int PBCreatePlayerAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreatePlayerAck, avatar_),
  };
  PBCreatePlayerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCreatePlayerAck_descriptor_,
      PBCreatePlayerAck::default_instance_,
      PBCreatePlayerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreatePlayerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCreatePlayerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCreatePlayerAck));
  PBDelPlayerAck_descriptor_ = file->message_type(9);
  static const int PBDelPlayerAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDelPlayerAck, playerid_),
  };
  PBDelPlayerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDelPlayerAck_descriptor_,
      PBDelPlayerAck::default_instance_,
      PBDelPlayerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDelPlayerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDelPlayerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDelPlayerAck));
  PBSelectPlayerAck_descriptor_ = file->message_type(10);
  static const int PBSelectPlayerAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSelectPlayerAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSelectPlayerAck, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSelectPlayerAck, port_),
  };
  PBSelectPlayerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSelectPlayerAck_descriptor_,
      PBSelectPlayerAck::default_instance_,
      PBSelectPlayerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSelectPlayerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSelectPlayerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSelectPlayerAck));
  PBC2GLoginAsk_descriptor_ = file->message_type(11);
  static const int PBC2GLoginAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GLoginAsk, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GLoginAsk, loginsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GLoginAsk, breconnet_),
  };
  PBC2GLoginAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GLoginAsk_descriptor_,
      PBC2GLoginAsk::default_instance_,
      PBC2GLoginAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GLoginAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GLoginAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GLoginAsk));
  PBG2CLoginAck_descriptor_ = file->message_type(12);
  static const int PBG2CLoginAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CLoginAck, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CLoginAck, scenecellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CLoginAck, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CLoginAck, pbpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CLoginAck, scenedynid_),
  };
  PBG2CLoginAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CLoginAck_descriptor_,
      PBG2CLoginAck::default_instance_,
      PBG2CLoginAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CLoginAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CLoginAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CLoginAck));
  PBC2GGMCmdTxtCmd_descriptor_ = file->message_type(13);
  static const int PBC2GGMCmdTxtCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GGMCmdTxtCmd, callbackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GGMCmdTxtCmd, param_),
  };
  PBC2GGMCmdTxtCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GGMCmdTxtCmd_descriptor_,
      PBC2GGMCmdTxtCmd::default_instance_,
      PBC2GGMCmdTxtCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GGMCmdTxtCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GGMCmdTxtCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GGMCmdTxtCmd));
  PBG2CGMCmdTxtCmd_descriptor_ = file->message_type(14);
  static const int PBG2CGMCmdTxtCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CGMCmdTxtCmd, callbackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CGMCmdTxtCmd, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CGMCmdTxtCmd, msg_),
  };
  PBG2CGMCmdTxtCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CGMCmdTxtCmd_descriptor_,
      PBG2CGMCmdTxtCmd::default_instance_,
      PBG2CGMCmdTxtCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CGMCmdTxtCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CGMCmdTxtCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CGMCmdTxtCmd));
  PBG2CSceneFlySameGameSvr_descriptor_ = file->message_type(15);
  static const int PBG2CSceneFlySameGameSvr_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSceneFlySameGameSvr, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSceneFlySameGameSvr, scenecellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSceneFlySameGameSvr, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSceneFlySameGameSvr, pbpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSceneFlySameGameSvr, scenedynid_),
  };
  PBG2CSceneFlySameGameSvr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSceneFlySameGameSvr_descriptor_,
      PBG2CSceneFlySameGameSvr::default_instance_,
      PBG2CSceneFlySameGameSvr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSceneFlySameGameSvr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSceneFlySameGameSvr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSceneFlySameGameSvr));
  PBG2CSceneFlyJumpGameSvr_descriptor_ = file->message_type(16);
  static const int PBG2CSceneFlyJumpGameSvr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSceneFlyJumpGameSvr, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSceneFlyJumpGameSvr, port_),
  };
  PBG2CSceneFlyJumpGameSvr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSceneFlyJumpGameSvr_descriptor_,
      PBG2CSceneFlyJumpGameSvr::default_instance_,
      PBG2CSceneFlyJumpGameSvr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSceneFlyJumpGameSvr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSceneFlyJumpGameSvr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSceneFlyJumpGameSvr));
  PBG2CCommonUnitRemove_descriptor_ = file->message_type(17);
  static const int PBG2CCommonUnitRemove_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonUnitRemove, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonUnitRemove, unitid_),
  };
  PBG2CCommonUnitRemove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommonUnitRemove_descriptor_,
      PBG2CCommonUnitRemove::default_instance_,
      PBG2CCommonUnitRemove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonUnitRemove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonUnitRemove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommonUnitRemove));
  PBC2GCommonMove_descriptor_ = file->message_type(18);
  static const int PBC2GCommonMove_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonMove, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonMove, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonMove, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonMove, type_),
  };
  PBC2GCommonMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommonMove_descriptor_,
      PBC2GCommonMove::default_instance_,
      PBC2GCommonMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommonMove));
  PBC2GUseSkill_descriptor_ = file->message_type(19);
  static const int PBC2GUseSkill_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUseSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUseSkill, pbposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUseSkill, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUseSkill, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUseSkill, pbtarget_),
  };
  PBC2GUseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GUseSkill_descriptor_,
      PBC2GUseSkill::default_instance_,
      PBC2GUseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GUseSkill));
  PBC2GSkillBreak_descriptor_ = file->message_type(20);
  static const int PBC2GSkillBreak_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSkillBreak, skillid_),
  };
  PBC2GSkillBreak_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GSkillBreak_descriptor_,
      PBC2GSkillBreak::default_instance_,
      PBC2GSkillBreak_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSkillBreak, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSkillBreak, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GSkillBreak));
  PBC2SSkillUseCharge_descriptor_ = file->message_type(21);
  static const int PBC2SSkillUseCharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SSkillUseCharge, skillid_),
  };
  PBC2SSkillUseCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SSkillUseCharge_descriptor_,
      PBC2SSkillUseCharge::default_instance_,
      PBC2SSkillUseCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SSkillUseCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SSkillUseCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SSkillUseCharge));
  PBC2GSkillUpgrade_descriptor_ = file->message_type(22);
  static const int PBC2GSkillUpgrade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSkillUpgrade, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSkillUpgrade, level_),
  };
  PBC2GSkillUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GSkillUpgrade_descriptor_,
      PBC2GSkillUpgrade::default_instance_,
      PBC2GSkillUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSkillUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSkillUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GSkillUpgrade));
  PBC2GSkillAdd_descriptor_ = file->message_type(23);
  static const int PBC2GSkillAdd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSkillAdd, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSkillAdd, level_),
  };
  PBC2GSkillAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GSkillAdd_descriptor_,
      PBC2GSkillAdd::default_instance_,
      PBC2GSkillAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSkillAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSkillAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GSkillAdd));
  PBG2CSkillBreak_descriptor_ = file->message_type(24);
  static const int PBG2CSkillBreak_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillBreak, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillBreak, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillBreak, stage_),
  };
  PBG2CSkillBreak_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSkillBreak_descriptor_,
      PBG2CSkillBreak::default_instance_,
      PBG2CSkillBreak_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillBreak, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillBreak, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSkillBreak));
  PBG2CUseSkill_descriptor_ = file->message_type(25);
  static const int PBG2CUseSkill_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUseSkill, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUseSkill, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUseSkill, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUseSkill, pbposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUseSkill, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUseSkill, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUseSkill, pbtarget_),
  };
  PBG2CUseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CUseSkill_descriptor_,
      PBG2CUseSkill::default_instance_,
      PBG2CUseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CUseSkill));
  PBG2CAddSkill_descriptor_ = file->message_type(26);
  static const int PBG2CAddSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddSkill, level_),
  };
  PBG2CAddSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CAddSkill_descriptor_,
      PBG2CAddSkill::default_instance_,
      PBG2CAddSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CAddSkill));
  PBG2CDelSkill_descriptor_ = file->message_type(27);
  static const int PBG2CDelSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelSkill, skillid_),
  };
  PBG2CDelSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CDelSkill_descriptor_,
      PBG2CDelSkill::default_instance_,
      PBG2CDelSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CDelSkill));
  PBG2CUpCoolTime_descriptor_ = file->message_type(28);
  static const int PBG2CUpCoolTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpCoolTime, coolinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpCoolTime, coolgroupinfo_),
  };
  PBG2CUpCoolTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CUpCoolTime_descriptor_,
      PBG2CUpCoolTime::default_instance_,
      PBG2CUpCoolTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpCoolTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpCoolTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CUpCoolTime));
  PBG2CUpgradeSkill_descriptor_ = file->message_type(29);
  static const int PBG2CUpgradeSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpgradeSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpgradeSkill, level_),
  };
  PBG2CUpgradeSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CUpgradeSkill_descriptor_,
      PBG2CUpgradeSkill::default_instance_,
      PBG2CUpgradeSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpgradeSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpgradeSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CUpgradeSkill));
  PBG2CSkillNotice_descriptor_ = file->message_type(30);
  static const int PBG2CSkillNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillNotice, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillNotice, type_),
  };
  PBG2CSkillNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSkillNotice_descriptor_,
      PBG2CSkillNotice::default_instance_,
      PBG2CSkillNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSkillNotice));
  PBG2CSkillDamage_descriptor_ = file->message_type(31);
  static const int PBG2CSkillDamage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillDamage, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillDamage, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillDamage, critical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillDamage, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillDamage, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillDamage, newposion_),
  };
  PBG2CSkillDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSkillDamage_descriptor_,
      PBG2CSkillDamage::default_instance_,
      PBG2CSkillDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSkillDamage));
  PBS2CSkillEffect_descriptor_ = file->message_type(32);
  static const int PBS2CSkillEffect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSkillEffect, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSkillEffect, newposion_),
  };
  PBS2CSkillEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CSkillEffect_descriptor_,
      PBS2CSkillEffect::default_instance_,
      PBS2CSkillEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSkillEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSkillEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CSkillEffect));
  PBS2CSkillEffectBroad_descriptor_ = file->message_type(33);
  static const int PBS2CSkillEffectBroad_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSkillEffectBroad, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSkillEffectBroad, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSkillEffectBroad, skilleffect_),
  };
  PBS2CSkillEffectBroad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CSkillEffectBroad_descriptor_,
      PBS2CSkillEffectBroad::default_instance_,
      PBS2CSkillEffectBroad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSkillEffectBroad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSkillEffectBroad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CSkillEffectBroad));
  PBG2CSkillUseCharge_descriptor_ = file->message_type(34);
  static const int PBG2CSkillUseCharge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillUseCharge, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillUseCharge, unitid_),
  };
  PBG2CSkillUseCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSkillUseCharge_descriptor_,
      PBG2CSkillUseCharge::default_instance_,
      PBG2CSkillUseCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillUseCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSkillUseCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSkillUseCharge));
  PBS2CSkillEnemyList_descriptor_ = file->message_type(35);
  static const int PBS2CSkillEnemyList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSkillEnemyList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSkillEnemyList, playerid_),
  };
  PBS2CSkillEnemyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CSkillEnemyList_descriptor_,
      PBS2CSkillEnemyList::default_instance_,
      PBS2CSkillEnemyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSkillEnemyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSkillEnemyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CSkillEnemyList));
  PBC2GDelBuff_descriptor_ = file->message_type(36);
  static const int PBC2GDelBuff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GDelBuff, buffid_),
  };
  PBC2GDelBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GDelBuff_descriptor_,
      PBC2GDelBuff::default_instance_,
      PBC2GDelBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GDelBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GDelBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GDelBuff));
  PBG2CAddBuff_descriptor_ = file->message_type(37);
  static const int PBG2CAddBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddBuff, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddBuff, pbbuff_),
  };
  PBG2CAddBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CAddBuff_descriptor_,
      PBG2CAddBuff::default_instance_,
      PBG2CAddBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CAddBuff));
  PBG2CAddMoveBuff_descriptor_ = file->message_type(38);
  static const int PBG2CAddMoveBuff_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddMoveBuff, pbposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddMoveBuff, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddMoveBuff, pbbuff_),
  };
  PBG2CAddMoveBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CAddMoveBuff_descriptor_,
      PBG2CAddMoveBuff::default_instance_,
      PBG2CAddMoveBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddMoveBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddMoveBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CAddMoveBuff));
  PBG2CDelBuff_descriptor_ = file->message_type(39);
  static const int PBG2CDelBuff_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelBuff, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelBuff, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelBuff, souceid_),
  };
  PBG2CDelBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CDelBuff_descriptor_,
      PBG2CDelBuff::default_instance_,
      PBG2CDelBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CDelBuff));
  PBG2CUpdateBuffTick_descriptor_ = file->message_type(40);
  static const int PBG2CUpdateBuffTick_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpdateBuffTick, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpdateBuffTick, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpdateBuffTick, lefttick_),
  };
  PBG2CUpdateBuffTick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CUpdateBuffTick_descriptor_,
      PBG2CUpdateBuffTick::default_instance_,
      PBG2CUpdateBuffTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpdateBuffTick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpdateBuffTick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CUpdateBuffTick));
  PBG2CCounter_descriptor_ = file->message_type(41);
  static const int PBG2CCounter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCounter, counter_),
  };
  PBG2CCounter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCounter_descriptor_,
      PBG2CCounter::default_instance_,
      PBG2CCounter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCounter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCounter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCounter));
  PBC2GGetClientData_descriptor_ = file->message_type(42);
  static const int PBC2GGetClientData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GGetClientData, clientdata_),
  };
  PBC2GGetClientData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GGetClientData_descriptor_,
      PBC2GGetClientData::default_instance_,
      PBC2GGetClientData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GGetClientData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GGetClientData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GGetClientData));
  PBG2CGetClientData_descriptor_ = file->message_type(43);
  static const int PBG2CGetClientData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CGetClientData, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CGetClientData, crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CGetClientData, filedata_),
  };
  PBG2CGetClientData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CGetClientData_descriptor_,
      PBG2CGetClientData::default_instance_,
      PBG2CGetClientData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CGetClientData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CGetClientData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CGetClientData));
  PBG2CClientDataOver_descriptor_ = file->message_type(44);
  static const int PBG2CClientDataOver_offsets_[1] = {
  };
  PBG2CClientDataOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CClientDataOver_descriptor_,
      PBG2CClientDataOver::default_instance_,
      PBG2CClientDataOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CClientDataOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CClientDataOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CClientDataOver));
  PBMailID_descriptor_ = file->message_type(45);
  static const int PBMailID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailID, mailid_),
  };
  PBMailID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMailID_descriptor_,
      PBMailID::default_instance_,
      PBMailID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMailID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMailID));
  PBRewardMail_descriptor_ = file->message_type(46);
  static const int PBRewardMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRewardMail, mailid_),
  };
  PBRewardMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRewardMail_descriptor_,
      PBRewardMail::default_instance_,
      PBRewardMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRewardMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRewardMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRewardMail));
  PBC2GDelItem_descriptor_ = file->message_type(47);
  static const int PBC2GDelItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GDelItem, itemsnid_),
  };
  PBC2GDelItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GDelItem_descriptor_,
      PBC2GDelItem::default_instance_,
      PBC2GDelItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GDelItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GDelItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GDelItem));
  PBG2CDelItem_descriptor_ = file->message_type(48);
  static const int PBG2CDelItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelItem, itemsnid_),
  };
  PBG2CDelItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CDelItem_descriptor_,
      PBG2CDelItem::default_instance_,
      PBG2CDelItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CDelItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CDelItem));
  PBC2GUseItem_descriptor_ = file->message_type(49);
  static const int PBC2GUseItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUseItem, itemsnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUseItem, itemnum_),
  };
  PBC2GUseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GUseItem_descriptor_,
      PBC2GUseItem::default_instance_,
      PBC2GUseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GUseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GUseItem));
  PBG2CUseItem_descriptor_ = file->message_type(50);
  static const int PBG2CUseItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUseItem, itemsnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUseItem, itemnum_),
  };
  PBG2CUseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CUseItem_descriptor_,
      PBG2CUseItem::default_instance_,
      PBG2CUseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CUseItem));
  PBC2GEquipItem_descriptor_ = file->message_type(51);
  static const int PBC2GEquipItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipItem, itemsnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipItem, equiptype_),
  };
  PBC2GEquipItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GEquipItem_descriptor_,
      PBC2GEquipItem::default_instance_,
      PBC2GEquipItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GEquipItem));
  PBG2CEquipItem_descriptor_ = file->message_type(52);
  static const int PBG2CEquipItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipItem, itemsnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipItem, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipItem, flag_),
  };
  PBG2CEquipItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CEquipItem_descriptor_,
      PBG2CEquipItem::default_instance_,
      PBG2CEquipItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CEquipItem));
  PBC2GSellItem_descriptor_ = file->message_type(53);
  static const int PBC2GSellItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSellItem, itemsnid_),
  };
  PBC2GSellItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GSellItem_descriptor_,
      PBC2GSellItem::default_instance_,
      PBC2GSellItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSellItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSellItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GSellItem));
  PBG2CSellItem_descriptor_ = file->message_type(54);
  static const int PBG2CSellItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSellItem, itemsnid_),
  };
  PBG2CSellItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSellItem_descriptor_,
      PBG2CSellItem::default_instance_,
      PBG2CSellItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSellItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSellItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSellItem));
  PBC2GBuyBackItem_descriptor_ = file->message_type(55);
  static const int PBC2GBuyBackItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GBuyBackItem, itemsnid_),
  };
  PBC2GBuyBackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GBuyBackItem_descriptor_,
      PBC2GBuyBackItem::default_instance_,
      PBC2GBuyBackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GBuyBackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GBuyBackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GBuyBackItem));
  PBG2CBuyBackItem_descriptor_ = file->message_type(56);
  static const int PBG2CBuyBackItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBuyBackItem, itemsnid_),
  };
  PBG2CBuyBackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CBuyBackItem_descriptor_,
      PBG2CBuyBackItem::default_instance_,
      PBG2CBuyBackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBuyBackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBuyBackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CBuyBackItem));
  PBG2CUpdateItem_descriptor_ = file->message_type(57);
  static const int PBG2CUpdateItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpdateItem, itemsnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpdateItem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpdateItem, doing_),
  };
  PBG2CUpdateItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CUpdateItem_descriptor_,
      PBG2CUpdateItem::default_instance_,
      PBG2CUpdateItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpdateItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpdateItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CUpdateItem));
  PBC2GSplitItem_descriptor_ = file->message_type(58);
  static const int PBC2GSplitItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSplitItem, itemsnid_),
  };
  PBC2GSplitItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GSplitItem_descriptor_,
      PBC2GSplitItem::default_instance_,
      PBC2GSplitItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSplitItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSplitItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GSplitItem));
  PBG2CSplitItem_descriptor_ = file->message_type(59);
  static const int PBG2CSplitItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSplitItem, itemsnid_),
  };
  PBG2CSplitItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSplitItem_descriptor_,
      PBG2CSplitItem::default_instance_,
      PBG2CSplitItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSplitItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSplitItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSplitItem));
  PBC2GSortItem_descriptor_ = file->message_type(60);
  static const int PBC2GSortItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSortItem, pbsort_),
  };
  PBC2GSortItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GSortItem_descriptor_,
      PBC2GSortItem::default_instance_,
      PBC2GSortItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSortItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSortItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GSortItem));
  PBG2CSortItem_descriptor_ = file->message_type(61);
  static const int PBG2CSortItem_offsets_[1] = {
  };
  PBG2CSortItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSortItem_descriptor_,
      PBG2CSortItem::default_instance_,
      PBG2CSortItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSortItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSortItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSortItem));
  PBG2CNewItem_descriptor_ = file->message_type(62);
  static const int PBG2CNewItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CNewItem, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CNewItem, doing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CNewItem, isbymail_),
  };
  PBG2CNewItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CNewItem_descriptor_,
      PBG2CNewItem::default_instance_,
      PBG2CNewItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CNewItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CNewItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CNewItem));
  PBC2GEquipColumnEnhance_descriptor_ = file->message_type(63);
  static const int PBC2GEquipColumnEnhance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipColumnEnhance, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipColumnEnhance, pbitemdata_),
  };
  PBC2GEquipColumnEnhance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GEquipColumnEnhance_descriptor_,
      PBC2GEquipColumnEnhance::default_instance_,
      PBC2GEquipColumnEnhance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipColumnEnhance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipColumnEnhance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GEquipColumnEnhance));
  PBG2CEquipColumnEnhance_descriptor_ = file->message_type(64);
  static const int PBG2CEquipColumnEnhance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipColumnEnhance, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipColumnEnhance, level_),
  };
  PBG2CEquipColumnEnhance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CEquipColumnEnhance_descriptor_,
      PBG2CEquipColumnEnhance::default_instance_,
      PBG2CEquipColumnEnhance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipColumnEnhance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipColumnEnhance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CEquipColumnEnhance));
  PBC2GEquipColumnForge_descriptor_ = file->message_type(65);
  static const int PBC2GEquipColumnForge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipColumnForge, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipColumnForge, pbitemdata_),
  };
  PBC2GEquipColumnForge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GEquipColumnForge_descriptor_,
      PBC2GEquipColumnForge::default_instance_,
      PBC2GEquipColumnForge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipColumnForge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipColumnForge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GEquipColumnForge));
  PBG2CEquipColumnForge_descriptor_ = file->message_type(66);
  static const int PBG2CEquipColumnForge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipColumnForge, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipColumnForge, level_),
  };
  PBG2CEquipColumnForge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CEquipColumnForge_descriptor_,
      PBG2CEquipColumnForge::default_instance_,
      PBG2CEquipColumnForge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipColumnForge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipColumnForge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CEquipColumnForge));
  PBC2GEquipEnhance_descriptor_ = file->message_type(67);
  static const int PBC2GEquipEnhance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipEnhance, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipEnhance, pbitemdata_),
  };
  PBC2GEquipEnhance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GEquipEnhance_descriptor_,
      PBC2GEquipEnhance::default_instance_,
      PBC2GEquipEnhance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipEnhance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipEnhance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GEquipEnhance));
  PBG2CEquipEnhance_descriptor_ = file->message_type(68);
  static const int PBG2CEquipEnhance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipEnhance, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipEnhance, exp_),
  };
  PBG2CEquipEnhance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CEquipEnhance_descriptor_,
      PBG2CEquipEnhance::default_instance_,
      PBG2CEquipEnhance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipEnhance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipEnhance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CEquipEnhance));
  PBC2GEquipForge_descriptor_ = file->message_type(69);
  static const int PBC2GEquipForge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipForge, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipForge, pbitemdata_),
  };
  PBC2GEquipForge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GEquipForge_descriptor_,
      PBC2GEquipForge::default_instance_,
      PBC2GEquipForge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipForge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipForge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GEquipForge));
  PBG2CEquipForge_descriptor_ = file->message_type(70);
  static const int PBG2CEquipForge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipForge, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipForge, exp_),
  };
  PBG2CEquipForge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CEquipForge_descriptor_,
      PBG2CEquipForge::default_instance_,
      PBG2CEquipForge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipForge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipForge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CEquipForge));
  PBC2GEquipInherit_descriptor_ = file->message_type(71);
  static const int PBC2GEquipInherit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipInherit, sourcesn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipInherit, targetsn_),
  };
  PBC2GEquipInherit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GEquipInherit_descriptor_,
      PBC2GEquipInherit::default_instance_,
      PBC2GEquipInherit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipInherit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipInherit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GEquipInherit));
  PBG2CEquipInherit_descriptor_ = file->message_type(72);
  static const int PBG2CEquipInherit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipInherit, itemsnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipInherit, specialid_),
  };
  PBG2CEquipInherit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CEquipInherit_descriptor_,
      PBG2CEquipInherit::default_instance_,
      PBG2CEquipInherit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipInherit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipInherit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CEquipInherit));
  PBC2GEquipMake_descriptor_ = file->message_type(73);
  static const int PBC2GEquipMake_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipMake, makeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipMake, mark_),
  };
  PBC2GEquipMake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GEquipMake_descriptor_,
      PBC2GEquipMake::default_instance_,
      PBC2GEquipMake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipMake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GEquipMake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GEquipMake));
  PBG2CEquipMake_descriptor_ = file->message_type(74);
  static const int PBG2CEquipMake_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipMake, makeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipMake, mark_),
  };
  PBG2CEquipMake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CEquipMake_descriptor_,
      PBG2CEquipMake::default_instance_,
      PBG2CEquipMake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipMake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CEquipMake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CEquipMake));
  PBC2GMounting_descriptor_ = file->message_type(75);
  static const int PBC2GMounting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GMounting, ismount_),
  };
  PBC2GMounting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GMounting_descriptor_,
      PBC2GMounting::default_instance_,
      PBC2GMounting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GMounting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GMounting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GMounting));
  PBG2CMounting_descriptor_ = file->message_type(76);
  static const int PBG2CMounting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CMounting, mountid_),
  };
  PBG2CMounting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CMounting_descriptor_,
      PBG2CMounting::default_instance_,
      PBG2CMounting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CMounting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CMounting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CMounting));
  PBC2GItemCompoundAsk_descriptor_ = file->message_type(77);
  static const int PBC2GItemCompoundAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemCompoundAsk, recipeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemCompoundAsk, itemnum_),
  };
  PBC2GItemCompoundAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GItemCompoundAsk_descriptor_,
      PBC2GItemCompoundAsk::default_instance_,
      PBC2GItemCompoundAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemCompoundAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemCompoundAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GItemCompoundAsk));
  PBC2GItemOpenEquipMakeDlgAsk_descriptor_ = file->message_type(78);
  static const int PBC2GItemOpenEquipMakeDlgAsk_offsets_[1] = {
  };
  PBC2GItemOpenEquipMakeDlgAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GItemOpenEquipMakeDlgAsk_descriptor_,
      PBC2GItemOpenEquipMakeDlgAsk::default_instance_,
      PBC2GItemOpenEquipMakeDlgAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemOpenEquipMakeDlgAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemOpenEquipMakeDlgAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GItemOpenEquipMakeDlgAsk));
  PBG2CItemCompoundAck_descriptor_ = file->message_type(79);
  static const int PBG2CItemCompoundAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemCompoundAck, itemid_),
  };
  PBG2CItemCompoundAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CItemCompoundAck_descriptor_,
      PBG2CItemCompoundAck::default_instance_,
      PBG2CItemCompoundAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemCompoundAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemCompoundAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CItemCompoundAck));
  PBG2CItemOpenEquipMakeDlgAck_descriptor_ = file->message_type(80);
  static const int PBG2CItemOpenEquipMakeDlgAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemOpenEquipMakeDlgAck, skilledinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemOpenEquipMakeDlgAck, vigour_),
  };
  PBG2CItemOpenEquipMakeDlgAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CItemOpenEquipMakeDlgAck_descriptor_,
      PBG2CItemOpenEquipMakeDlgAck::default_instance_,
      PBG2CItemOpenEquipMakeDlgAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemOpenEquipMakeDlgAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemOpenEquipMakeDlgAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CItemOpenEquipMakeDlgAck));
  PBC2GItemOpenEquipMakeOEMDlgAsk_descriptor_ = file->message_type(81);
  static const int PBC2GItemOpenEquipMakeOEMDlgAsk_offsets_[1] = {
  };
  PBC2GItemOpenEquipMakeOEMDlgAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GItemOpenEquipMakeOEMDlgAsk_descriptor_,
      PBC2GItemOpenEquipMakeOEMDlgAsk::default_instance_,
      PBC2GItemOpenEquipMakeOEMDlgAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemOpenEquipMakeOEMDlgAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemOpenEquipMakeOEMDlgAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GItemOpenEquipMakeOEMDlgAsk));
  PBC2GItemCommitEquipMakeOEMAsk_descriptor_ = file->message_type(82);
  static const int PBC2GItemCommitEquipMakeOEMAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemCommitEquipMakeOEMAsk, oem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemCommitEquipMakeOEMAsk, isremoved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemCommitEquipMakeOEMAsk, isclearall_),
  };
  PBC2GItemCommitEquipMakeOEMAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GItemCommitEquipMakeOEMAsk_descriptor_,
      PBC2GItemCommitEquipMakeOEMAsk::default_instance_,
      PBC2GItemCommitEquipMakeOEMAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemCommitEquipMakeOEMAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemCommitEquipMakeOEMAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GItemCommitEquipMakeOEMAsk));
  PBC2GItemVisitEquipMakeOEMAsk_descriptor_ = file->message_type(83);
  static const int PBC2GItemVisitEquipMakeOEMAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemVisitEquipMakeOEMAsk, playerid_),
  };
  PBC2GItemVisitEquipMakeOEMAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GItemVisitEquipMakeOEMAsk_descriptor_,
      PBC2GItemVisitEquipMakeOEMAsk::default_instance_,
      PBC2GItemVisitEquipMakeOEMAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemVisitEquipMakeOEMAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemVisitEquipMakeOEMAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GItemVisitEquipMakeOEMAsk));
  PBG2CItemOpenEquipMakeOEMDlgAck_descriptor_ = file->message_type(84);
  static const int PBG2CItemOpenEquipMakeOEMDlgAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemOpenEquipMakeOEMDlgAck, oem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemOpenEquipMakeOEMDlgAck, vigour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemOpenEquipMakeOEMDlgAck, vigourmax_),
  };
  PBG2CItemOpenEquipMakeOEMDlgAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CItemOpenEquipMakeOEMDlgAck_descriptor_,
      PBG2CItemOpenEquipMakeOEMDlgAck::default_instance_,
      PBG2CItemOpenEquipMakeOEMDlgAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemOpenEquipMakeOEMDlgAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemOpenEquipMakeOEMDlgAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CItemOpenEquipMakeOEMDlgAck));
  PBG2CItemCommitEquipMakeOEMAck_descriptor_ = file->message_type(85);
  static const int PBG2CItemCommitEquipMakeOEMAck_offsets_[1] = {
  };
  PBG2CItemCommitEquipMakeOEMAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CItemCommitEquipMakeOEMAck_descriptor_,
      PBG2CItemCommitEquipMakeOEMAck::default_instance_,
      PBG2CItemCommitEquipMakeOEMAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemCommitEquipMakeOEMAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemCommitEquipMakeOEMAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CItemCommitEquipMakeOEMAck));
  PBG2CItemVisitEquipMakeOEMAck_descriptor_ = file->message_type(86);
  static const int PBG2CItemVisitEquipMakeOEMAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemVisitEquipMakeOEMAck, oem_),
  };
  PBG2CItemVisitEquipMakeOEMAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CItemVisitEquipMakeOEMAck_descriptor_,
      PBG2CItemVisitEquipMakeOEMAck::default_instance_,
      PBG2CItemVisitEquipMakeOEMAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemVisitEquipMakeOEMAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemVisitEquipMakeOEMAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CItemVisitEquipMakeOEMAck));
  PBC2GItemEquipMakeOEMAsk_descriptor_ = file->message_type(87);
  static const int PBC2GItemEquipMakeOEMAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemEquipMakeOEMAsk, makeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemEquipMakeOEMAsk, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemEquipMakeOEMAsk, playerid_),
  };
  PBC2GItemEquipMakeOEMAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GItemEquipMakeOEMAsk_descriptor_,
      PBC2GItemEquipMakeOEMAsk::default_instance_,
      PBC2GItemEquipMakeOEMAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemEquipMakeOEMAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemEquipMakeOEMAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GItemEquipMakeOEMAsk));
  PBG2CItemEquipMakeOEMAck_descriptor_ = file->message_type(88);
  static const int PBG2CItemEquipMakeOEMAck_offsets_[1] = {
  };
  PBG2CItemEquipMakeOEMAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CItemEquipMakeOEMAck_descriptor_,
      PBG2CItemEquipMakeOEMAck::default_instance_,
      PBG2CItemEquipMakeOEMAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemEquipMakeOEMAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemEquipMakeOEMAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CItemEquipMakeOEMAck));
  PBC2GItemEquipChangeOEMFeeAsk_descriptor_ = file->message_type(89);
  static const int PBC2GItemEquipChangeOEMFeeAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemEquipChangeOEMFeeAsk, makeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemEquipChangeOEMFeeAsk, fee_),
  };
  PBC2GItemEquipChangeOEMFeeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GItemEquipChangeOEMFeeAsk_descriptor_,
      PBC2GItemEquipChangeOEMFeeAsk::default_instance_,
      PBC2GItemEquipChangeOEMFeeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemEquipChangeOEMFeeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GItemEquipChangeOEMFeeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GItemEquipChangeOEMFeeAsk));
  PBG2CItemEquipChangeOEMFeeAck_descriptor_ = file->message_type(90);
  static const int PBG2CItemEquipChangeOEMFeeAck_offsets_[1] = {
  };
  PBG2CItemEquipChangeOEMFeeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CItemEquipChangeOEMFeeAck_descriptor_,
      PBG2CItemEquipChangeOEMFeeAck::default_instance_,
      PBG2CItemEquipChangeOEMFeeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemEquipChangeOEMFeeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CItemEquipChangeOEMFeeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CItemEquipChangeOEMFeeAck));
  PBC2GQuestAccept_descriptor_ = file->message_type(91);
  static const int PBC2GQuestAccept_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestAccept, questid_),
  };
  PBC2GQuestAccept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GQuestAccept_descriptor_,
      PBC2GQuestAccept::default_instance_,
      PBC2GQuestAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestAccept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestAccept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GQuestAccept));
  PBG2CQuestAccept_descriptor_ = file->message_type(92);
  static const int PBG2CQuestAccept_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestAccept, quest_),
  };
  PBG2CQuestAccept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CQuestAccept_descriptor_,
      PBG2CQuestAccept::default_instance_,
      PBG2CQuestAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestAccept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestAccept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CQuestAccept));
  PBC2GQuestComplete_descriptor_ = file->message_type(93);
  static const int PBC2GQuestComplete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestComplete, questid_),
  };
  PBC2GQuestComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GQuestComplete_descriptor_,
      PBC2GQuestComplete::default_instance_,
      PBC2GQuestComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GQuestComplete));
  PBG2CQuestComplete_descriptor_ = file->message_type(94);
  static const int PBG2CQuestComplete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestComplete, questid_),
  };
  PBG2CQuestComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CQuestComplete_descriptor_,
      PBG2CQuestComplete::default_instance_,
      PBG2CQuestComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CQuestComplete));
  PBC2GQuestUpdateItem_descriptor_ = file->message_type(95);
  static const int PBC2GQuestUpdateItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestUpdateItem, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestUpdateItem, tarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestUpdateItem, count_),
  };
  PBC2GQuestUpdateItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GQuestUpdateItem_descriptor_,
      PBC2GQuestUpdateItem::default_instance_,
      PBC2GQuestUpdateItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestUpdateItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestUpdateItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GQuestUpdateItem));
  PBG2CQuestUpdateItem_descriptor_ = file->message_type(96);
  static const int PBG2CQuestUpdateItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestUpdateItem, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestUpdateItem, tarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestUpdateItem, count_),
  };
  PBG2CQuestUpdateItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CQuestUpdateItem_descriptor_,
      PBG2CQuestUpdateItem::default_instance_,
      PBG2CQuestUpdateItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestUpdateItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestUpdateItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CQuestUpdateItem));
  PBC2GQuestGiveUp_descriptor_ = file->message_type(97);
  static const int PBC2GQuestGiveUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestGiveUp, questid_),
  };
  PBC2GQuestGiveUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GQuestGiveUp_descriptor_,
      PBC2GQuestGiveUp::default_instance_,
      PBC2GQuestGiveUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestGiveUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GQuestGiveUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GQuestGiveUp));
  PBG2CQuestGiveUp_descriptor_ = file->message_type(98);
  static const int PBG2CQuestGiveUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestGiveUp, questid_),
  };
  PBG2CQuestGiveUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CQuestGiveUp_descriptor_,
      PBG2CQuestGiveUp::default_instance_,
      PBG2CQuestGiveUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestGiveUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CQuestGiveUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CQuestGiveUp));
  PBC2GStoreBuy_descriptor_ = file->message_type(99);
  static const int PBC2GStoreBuy_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GStoreBuy, storetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GStoreBuy, goodsindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GStoreBuy, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GStoreBuy, friendid_),
  };
  PBC2GStoreBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GStoreBuy_descriptor_,
      PBC2GStoreBuy::default_instance_,
      PBC2GStoreBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GStoreBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GStoreBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GStoreBuy));
  PBG2CStoreBuy_descriptor_ = file->message_type(100);
  static const int PBG2CStoreBuy_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CStoreBuy, storetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CStoreBuy, goodsindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CStoreBuy, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CStoreBuy, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CStoreBuy, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CStoreBuy, isgift_),
  };
  PBG2CStoreBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CStoreBuy_descriptor_,
      PBG2CStoreBuy::default_instance_,
      PBG2CStoreBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CStoreBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CStoreBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CStoreBuy));
  PBG2CExpendSyn_descriptor_ = file->message_type(101);
  static const int PBG2CExpendSyn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CExpendSyn, expendtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CExpendSyn, value_),
  };
  PBG2CExpendSyn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CExpendSyn_descriptor_,
      PBG2CExpendSyn::default_instance_,
      PBG2CExpendSyn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CExpendSyn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CExpendSyn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CExpendSyn));
  PBG2CAddHp_descriptor_ = file->message_type(102);
  static const int PBG2CAddHp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddHp, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddHp, addvalue_),
  };
  PBG2CAddHp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CAddHp_descriptor_,
      PBG2CAddHp::default_instance_,
      PBG2CAddHp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddHp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddHp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CAddHp));
  PBG2CAddExp_descriptor_ = file->message_type(103);
  static const int PBG2CAddExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddExp, expvalue_),
  };
  PBG2CAddExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CAddExp_descriptor_,
      PBG2CAddExp::default_instance_,
      PBG2CAddExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CAddExp));
  PBG2CClearData_descriptor_ = file->message_type(104);
  static const int PBG2CClearData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CClearData, type_),
  };
  PBG2CClearData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CClearData_descriptor_,
      PBG2CClearData::default_instance_,
      PBG2CClearData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CClearData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CClearData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CClearData));
  PBG2CAddLevel_descriptor_ = file->message_type(105);
  static const int PBG2CAddLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddLevel, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddLevel, level_),
  };
  PBG2CAddLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CAddLevel_descriptor_,
      PBG2CAddLevel::default_instance_,
      PBG2CAddLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAddLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CAddLevel));
  PBC2GPrizeAccept_descriptor_ = file->message_type(106);
  static const int PBC2GPrizeAccept_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GPrizeAccept, prizesn_),
  };
  PBC2GPrizeAccept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GPrizeAccept_descriptor_,
      PBC2GPrizeAccept::default_instance_,
      PBC2GPrizeAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GPrizeAccept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GPrizeAccept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GPrizeAccept));
  PBC2GPrizeAbandon_descriptor_ = file->message_type(107);
  static const int PBC2GPrizeAbandon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GPrizeAbandon, prizesn_),
  };
  PBC2GPrizeAbandon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GPrizeAbandon_descriptor_,
      PBC2GPrizeAbandon::default_instance_,
      PBC2GPrizeAbandon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GPrizeAbandon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GPrizeAbandon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GPrizeAbandon));
  PBG2CPrizeNew_descriptor_ = file->message_type(108);
  static const int PBG2CPrizeNew_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPrizeNew, prize_),
  };
  PBG2CPrizeNew_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CPrizeNew_descriptor_,
      PBG2CPrizeNew::default_instance_,
      PBG2CPrizeNew_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPrizeNew, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPrizeNew, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CPrizeNew));
  PBC2GTrade_apply_descriptor_ = file->message_type(109);
  static const int PBC2GTrade_apply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_apply, targetid_),
  };
  PBC2GTrade_apply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTrade_apply_descriptor_,
      PBC2GTrade_apply::default_instance_,
      PBC2GTrade_apply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_apply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_apply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTrade_apply));
  PBC2GTrade_answer_descriptor_ = file->message_type(110);
  static const int PBC2GTrade_answer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_answer, applyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_answer, ok_),
  };
  PBC2GTrade_answer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTrade_answer_descriptor_,
      PBC2GTrade_answer::default_instance_,
      PBC2GTrade_answer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_answer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_answer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTrade_answer));
  PBC2GTrade_addItem_descriptor_ = file->message_type(111);
  static const int PBC2GTrade_addItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_addItem, itemsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_addItem, itemnum_),
  };
  PBC2GTrade_addItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTrade_addItem_descriptor_,
      PBC2GTrade_addItem::default_instance_,
      PBC2GTrade_addItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_addItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_addItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTrade_addItem));
  PBC2GTrade_delItem_descriptor_ = file->message_type(112);
  static const int PBC2GTrade_delItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_delItem, itemsn_),
  };
  PBC2GTrade_delItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTrade_delItem_descriptor_,
      PBC2GTrade_delItem::default_instance_,
      PBC2GTrade_delItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_delItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_delItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTrade_delItem));
  PBC2GTrade_setMoney_descriptor_ = file->message_type(113);
  static const int PBC2GTrade_setMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_setMoney, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_setMoney, money_),
  };
  PBC2GTrade_setMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTrade_setMoney_descriptor_,
      PBC2GTrade_setMoney::default_instance_,
      PBC2GTrade_setMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_setMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTrade_setMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTrade_setMoney));
  PBG2CTrade_begin_descriptor_ = file->message_type(114);
  static const int PBG2CTrade_begin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_begin, target_),
  };
  PBG2CTrade_begin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTrade_begin_descriptor_,
      PBG2CTrade_begin::default_instance_,
      PBG2CTrade_begin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_begin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_begin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTrade_begin));
  PBG2CTrade_end_descriptor_ = file->message_type(115);
  static const int PBG2CTrade_end_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_end, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_end, playerid_),
  };
  PBG2CTrade_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTrade_end_descriptor_,
      PBG2CTrade_end::default_instance_,
      PBG2CTrade_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTrade_end));
  PBG2CTrade_addItem_descriptor_ = file->message_type(116);
  static const int PBG2CTrade_addItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_addItem, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_addItem, item_),
  };
  PBG2CTrade_addItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTrade_addItem_descriptor_,
      PBG2CTrade_addItem::default_instance_,
      PBG2CTrade_addItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_addItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_addItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTrade_addItem));
  PBG2CTrade_delItem_descriptor_ = file->message_type(117);
  static const int PBG2CTrade_delItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_delItem, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_delItem, itemsn_),
  };
  PBG2CTrade_delItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTrade_delItem_descriptor_,
      PBG2CTrade_delItem::default_instance_,
      PBG2CTrade_delItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_delItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_delItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTrade_delItem));
  PBG2CTrade_setMoney_descriptor_ = file->message_type(118);
  static const int PBG2CTrade_setMoney_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_setMoney, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_setMoney, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_setMoney, money_),
  };
  PBG2CTrade_setMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTrade_setMoney_descriptor_,
      PBG2CTrade_setMoney::default_instance_,
      PBG2CTrade_setMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_setMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_setMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTrade_setMoney));
  PBG2CTrade_lock_descriptor_ = file->message_type(119);
  static const int PBG2CTrade_lock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_lock, playerid_),
  };
  PBG2CTrade_lock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTrade_lock_descriptor_,
      PBG2CTrade_lock::default_instance_,
      PBG2CTrade_lock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_lock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_lock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTrade_lock));
  PBG2CTrade_unlock_descriptor_ = file->message_type(120);
  static const int PBG2CTrade_unlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_unlock, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_unlock, lockcooltime_),
  };
  PBG2CTrade_unlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTrade_unlock_descriptor_,
      PBG2CTrade_unlock::default_instance_,
      PBG2CTrade_unlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_unlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_unlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTrade_unlock));
  PBG2CTrade_confirm_descriptor_ = file->message_type(121);
  static const int PBG2CTrade_confirm_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_confirm, playerid_),
  };
  PBG2CTrade_confirm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTrade_confirm_descriptor_,
      PBG2CTrade_confirm::default_instance_,
      PBG2CTrade_confirm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_confirm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_confirm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTrade_confirm));
  PBG2CTrade_applyTrasfer_descriptor_ = file->message_type(122);
  static const int PBG2CTrade_applyTrasfer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_applyTrasfer, applyer_),
  };
  PBG2CTrade_applyTrasfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTrade_applyTrasfer_descriptor_,
      PBG2CTrade_applyTrasfer::default_instance_,
      PBG2CTrade_applyTrasfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_applyTrasfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_applyTrasfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTrade_applyTrasfer));
  PBG2CTrade_answerTrasfer_descriptor_ = file->message_type(123);
  static const int PBG2CTrade_answerTrasfer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_answerTrasfer, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_answerTrasfer, ok_),
  };
  PBG2CTrade_answerTrasfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTrade_answerTrasfer_descriptor_,
      PBG2CTrade_answerTrasfer::default_instance_,
      PBG2CTrade_answerTrasfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_answerTrasfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTrade_answerTrasfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTrade_answerTrasfer));
  PBG2CSaleMoney_tradelog_descriptor_ = file->message_type(124);
  static const int PBG2CSaleMoney_tradelog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSaleMoney_tradelog, log_),
  };
  PBG2CSaleMoney_tradelog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSaleMoney_tradelog_descriptor_,
      PBG2CSaleMoney_tradelog::default_instance_,
      PBG2CSaleMoney_tradelog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSaleMoney_tradelog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSaleMoney_tradelog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSaleMoney_tradelog));
  PBC2GSaleMoney_sale_descriptor_ = file->message_type(125);
  static const int PBC2GSaleMoney_sale_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSaleMoney_sale, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSaleMoney_sale, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSaleMoney_sale, sliver_),
  };
  PBC2GSaleMoney_sale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GSaleMoney_sale_descriptor_,
      PBC2GSaleMoney_sale::default_instance_,
      PBC2GSaleMoney_sale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSaleMoney_sale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSaleMoney_sale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GSaleMoney_sale));
  PBC2GSaleMoney_salecancel_descriptor_ = file->message_type(126);
  static const int PBC2GSaleMoney_salecancel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSaleMoney_salecancel, orderid_),
  };
  PBC2GSaleMoney_salecancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GSaleMoney_salecancel_descriptor_,
      PBC2GSaleMoney_salecancel::default_instance_,
      PBC2GSaleMoney_salecancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSaleMoney_salecancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GSaleMoney_salecancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GSaleMoney_salecancel));
  PBG2CSaleMoney_ListInfo_descriptor_ = file->message_type(127);
  static const int PBG2CSaleMoney_ListInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSaleMoney_ListInfo, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSaleMoney_ListInfo, sliver_),
  };
  PBG2CSaleMoney_ListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSaleMoney_ListInfo_descriptor_,
      PBG2CSaleMoney_ListInfo::default_instance_,
      PBG2CSaleMoney_ListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSaleMoney_ListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSaleMoney_ListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSaleMoney_ListInfo));
  PBG2CSaleMoney_list_descriptor_ = file->message_type(128);
  static const int PBG2CSaleMoney_list_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSaleMoney_list, ave_sliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSaleMoney_list, sale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSaleMoney_list, buy_),
  };
  PBG2CSaleMoney_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSaleMoney_list_descriptor_,
      PBG2CSaleMoney_list::default_instance_,
      PBG2CSaleMoney_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSaleMoney_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSaleMoney_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSaleMoney_list));
  PBC2GFindPlayer_descriptor_ = file->message_type(129);
  static const int PBC2GFindPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFindPlayer, playerid_),
  };
  PBC2GFindPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFindPlayer_descriptor_,
      PBC2GFindPlayer::default_instance_,
      PBC2GFindPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFindPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFindPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFindPlayer));
  PBG2CFindPlayer_descriptor_ = file->message_type(130);
  static const int PBG2CFindPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFindPlayer, pbview_),
  };
  PBG2CFindPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFindPlayer_descriptor_,
      PBG2CFindPlayer::default_instance_,
      PBG2CFindPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFindPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFindPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFindPlayer));
  PBC2GAuction_sale_descriptor_ = file->message_type(131);
  static const int PBC2GAuction_sale_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_sale, itemsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_sale, unitsliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_sale, salecount_),
  };
  PBC2GAuction_sale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GAuction_sale_descriptor_,
      PBC2GAuction_sale::default_instance_,
      PBC2GAuction_sale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_sale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_sale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GAuction_sale));
  PBC2GAuction_salecancel_descriptor_ = file->message_type(132);
  static const int PBC2GAuction_salecancel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_salecancel, saleorderid_),
  };
  PBC2GAuction_salecancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GAuction_salecancel_descriptor_,
      PBC2GAuction_salecancel::default_instance_,
      PBC2GAuction_salecancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_salecancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_salecancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GAuction_salecancel));
  PBC2GAuction_buy_descriptor_ = file->message_type(133);
  static const int PBC2GAuction_buy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_buy, saleorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_buy, unitsliver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_buy, buycount_),
  };
  PBC2GAuction_buy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GAuction_buy_descriptor_,
      PBC2GAuction_buy::default_instance_,
      PBC2GAuction_buy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_buy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_buy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GAuction_buy));
  PBAuctionFilterItemType_descriptor_ = file->message_type(134);
  static const int PBAuctionFilterItemType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionFilterItemType, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionFilterItemType, itemsubtype_),
  };
  PBAuctionFilterItemType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAuctionFilterItemType_descriptor_,
      PBAuctionFilterItemType::default_instance_,
      PBAuctionFilterItemType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionFilterItemType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAuctionFilterItemType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAuctionFilterItemType));
  PBC2GAuction_list_descriptor_ = file->message_type(135);
  static const int PBC2GAuction_list_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_list, client_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_list, type_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_list, quality_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_list, id_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_list, attr_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_list, sort_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_list, begin_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_list, end_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_list, sortascending_),
  };
  PBC2GAuction_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GAuction_list_descriptor_,
      PBC2GAuction_list::default_instance_,
      PBC2GAuction_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GAuction_list));
  PBC2GAuction_ave_descriptor_ = file->message_type(136);
  static const int PBC2GAuction_ave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_ave, itemid_),
  };
  PBC2GAuction_ave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GAuction_ave_descriptor_,
      PBC2GAuction_ave::default_instance_,
      PBC2GAuction_ave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_ave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAuction_ave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GAuction_ave));
  PBG2CAuction_list_descriptor_ = file->message_type(137);
  static const int PBG2CAuction_list_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAuction_list, client_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAuction_list, all_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAuction_list, list_),
  };
  PBG2CAuction_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CAuction_list_descriptor_,
      PBG2CAuction_list::default_instance_,
      PBG2CAuction_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAuction_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAuction_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CAuction_list));
  PBG2CAuction_ave_descriptor_ = file->message_type(138);
  static const int PBG2CAuction_ave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAuction_ave, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAuction_ave, unitsliver_),
  };
  PBG2CAuction_ave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CAuction_ave_descriptor_,
      PBG2CAuction_ave::default_instance_,
      PBG2CAuction_ave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAuction_ave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAuction_ave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CAuction_ave));
  PBC2GTopListList_descriptor_ = file->message_type(139);
  static const int PBC2GTopListList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTopListList, sorttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTopListList, beginorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTopListList, count_),
  };
  PBC2GTopListList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTopListList_descriptor_,
      PBC2GTopListList::default_instance_,
      PBC2GTopListList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTopListList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTopListList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTopListList));
  PBC2GTopListOne_descriptor_ = file->message_type(140);
  static const int PBC2GTopListOne_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTopListOne, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTopListOne, targetid_),
  };
  PBC2GTopListOne_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTopListOne_descriptor_,
      PBC2GTopListOne::default_instance_,
      PBC2GTopListOne_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTopListOne, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTopListOne, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTopListOne));
  PBC2GTopListSetClearTime_descriptor_ = file->message_type(141);
  static const int PBC2GTopListSetClearTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTopListSetClearTime, time_),
  };
  PBC2GTopListSetClearTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTopListSetClearTime_descriptor_,
      PBC2GTopListSetClearTime::default_instance_,
      PBC2GTopListSetClearTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTopListSetClearTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTopListSetClearTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTopListSetClearTime));
  PBTopListDetail_descriptor_ = file->message_type(142);
  static const int PBTopListDetail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListDetail, view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListDetail, factiondisplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListDetail, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListDetail, order_),
  };
  PBTopListDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTopListDetail_descriptor_,
      PBTopListDetail::default_instance_,
      PBTopListDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTopListDetail));
  PBS2CTopListList_descriptor_ = file->message_type(143);
  static const int PBS2CTopListList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CTopListList, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CTopListList, allcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CTopListList, list_),
  };
  PBS2CTopListList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CTopListList_descriptor_,
      PBS2CTopListList::default_instance_,
      PBS2CTopListList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CTopListList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CTopListList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CTopListList));
  PBS2CTopListOne_descriptor_ = file->message_type(144);
  static const int PBS2CTopListOne_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CTopListOne, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CTopListOne, data_),
  };
  PBS2CTopListOne_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CTopListOne_descriptor_,
      PBS2CTopListOne::default_instance_,
      PBS2CTopListOne_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CTopListOne, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CTopListOne, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CTopListOne));
  PBC2GFriend_AddAsk_descriptor_ = file->message_type(145);
  static const int PBC2GFriend_AddAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_AddAsk, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_AddAsk, playerid_),
  };
  PBC2GFriend_AddAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFriend_AddAsk_descriptor_,
      PBC2GFriend_AddAsk::default_instance_,
      PBC2GFriend_AddAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_AddAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_AddAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFriend_AddAsk));
  PBC2GFriend_DelAsk_descriptor_ = file->message_type(146);
  static const int PBC2GFriend_DelAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_DelAsk, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_DelAsk, playerid_),
  };
  PBC2GFriend_DelAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFriend_DelAsk_descriptor_,
      PBC2GFriend_DelAsk::default_instance_,
      PBC2GFriend_DelAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_DelAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_DelAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFriend_DelAsk));
  PBC2GFriend_Answer_descriptor_ = file->message_type(147);
  static const int PBC2GFriend_Answer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_Answer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_Answer, targetid_),
  };
  PBC2GFriend_Answer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFriend_Answer_descriptor_,
      PBC2GFriend_Answer::default_instance_,
      PBC2GFriend_Answer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_Answer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_Answer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFriend_Answer));
  PBC2GFriend_Find_descriptor_ = file->message_type(148);
  static const int PBC2GFriend_Find_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_Find, name_),
  };
  PBC2GFriend_Find_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFriend_Find_descriptor_,
      PBC2GFriend_Find::default_instance_,
      PBC2GFriend_Find_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_Find, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFriend_Find, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFriend_Find));
  PBFriendFindInfo_descriptor_ = file->message_type(149);
  static const int PBFriendFindInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendFindInfo, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendFindInfo, fightpower_),
  };
  PBFriendFindInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFriendFindInfo_descriptor_,
      PBFriendFindInfo::default_instance_,
      PBFriendFindInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendFindInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendFindInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFriendFindInfo));
  PBG2CFriend_Find_descriptor_ = file->message_type(150);
  static const int PBG2CFriend_Find_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFriend_Find, info_),
  };
  PBG2CFriend_Find_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFriend_Find_descriptor_,
      PBG2CFriend_Find::default_instance_,
      PBG2CFriend_Find_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFriend_Find, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFriend_Find, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFriend_Find));
  PBG2CFriend_AddAskTrasfer_descriptor_ = file->message_type(151);
  static const int PBG2CFriend_AddAskTrasfer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFriend_AddAskTrasfer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFriend_AddAskTrasfer, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFriend_AddAskTrasfer, fightpower_),
  };
  PBG2CFriend_AddAskTrasfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFriend_AddAskTrasfer_descriptor_,
      PBG2CFriend_AddAskTrasfer::default_instance_,
      PBG2CFriend_AddAskTrasfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFriend_AddAskTrasfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFriend_AddAskTrasfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFriend_AddAskTrasfer));
  PBG2CFriend_Info_descriptor_ = file->message_type(152);
  static const int PBG2CFriend_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFriend_Info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFriend_Info, info_),
  };
  PBG2CFriend_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFriend_Info_descriptor_,
      PBG2CFriend_Info::default_instance_,
      PBG2CFriend_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFriend_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFriend_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFriend_Info));
  PBC2GCommon_PKType_descriptor_ = file->message_type(153);
  static const int PBC2GCommon_PKType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_PKType, pktype_),
  };
  PBC2GCommon_PKType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommon_PKType_descriptor_,
      PBC2GCommon_PKType::default_instance_,
      PBC2GCommon_PKType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_PKType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_PKType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommon_PKType));
  PBG2CCommon_PKType_descriptor_ = file->message_type(154);
  static const int PBG2CCommon_PKType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_PKType, pktype_),
  };
  PBG2CCommon_PKType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_PKType_descriptor_,
      PBG2CCommon_PKType::default_instance_,
      PBG2CCommon_PKType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_PKType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_PKType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_PKType));
  PBC2GCommonForbitSpeakAsk_descriptor_ = file->message_type(155);
  static const int PBC2GCommonForbitSpeakAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonForbitSpeakAsk, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonForbitSpeakAsk, playerid_),
  };
  PBC2GCommonForbitSpeakAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommonForbitSpeakAsk_descriptor_,
      PBC2GCommonForbitSpeakAsk::default_instance_,
      PBC2GCommonForbitSpeakAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonForbitSpeakAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonForbitSpeakAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommonForbitSpeakAsk));
  PBC2GCommonStrongerReWard_descriptor_ = file->message_type(156);
  static const int PBC2GCommonStrongerReWard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonStrongerReWard, uid_),
  };
  PBC2GCommonStrongerReWard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommonStrongerReWard_descriptor_,
      PBC2GCommonStrongerReWard::default_instance_,
      PBC2GCommonStrongerReWard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonStrongerReWard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonStrongerReWard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommonStrongerReWard));
  PBC2GCommonSubFightPower_descriptor_ = file->message_type(157);
  static const int PBC2GCommonSubFightPower_offsets_[1] = {
  };
  PBC2GCommonSubFightPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommonSubFightPower_descriptor_,
      PBC2GCommonSubFightPower::default_instance_,
      PBC2GCommonSubFightPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonSubFightPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonSubFightPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommonSubFightPower));
  PBC2GCopymapUnactive_descriptor_ = file->message_type(158);
  static const int PBC2GCopymapUnactive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapUnactive, unitid_),
  };
  PBC2GCopymapUnactive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCopymapUnactive_descriptor_,
      PBC2GCopymapUnactive::default_instance_,
      PBC2GCopymapUnactive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapUnactive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapUnactive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCopymapUnactive));
  PBG2Relive_SceneBorn_descriptor_ = file->message_type(159);
  static const int PBG2Relive_SceneBorn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2Relive_SceneBorn, freecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2Relive_SceneBorn, relivecount_),
  };
  PBG2Relive_SceneBorn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2Relive_SceneBorn_descriptor_,
      PBG2Relive_SceneBorn::default_instance_,
      PBG2Relive_SceneBorn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2Relive_SceneBorn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2Relive_SceneBorn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2Relive_SceneBorn));
  PBG2CCommon_TimeEvent_descriptor_ = file->message_type(160);
  static const int PBG2CCommon_TimeEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_TimeEvent, newday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_TimeEvent, newweek_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_TimeEvent, newmonth_),
  };
  PBG2CCommon_TimeEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_TimeEvent_descriptor_,
      PBG2CCommon_TimeEvent::default_instance_,
      PBG2CCommon_TimeEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_TimeEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_TimeEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_TimeEvent));
  PBC2SWenTao_SetBingFa_descriptor_ = file->message_type(161);
  static const int PBC2SWenTao_SetBingFa_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_SetBingFa, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_SetBingFa, bingfaid_),
  };
  PBC2SWenTao_SetBingFa_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWenTao_SetBingFa_descriptor_,
      PBC2SWenTao_SetBingFa::default_instance_,
      PBC2SWenTao_SetBingFa_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_SetBingFa, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_SetBingFa, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWenTao_SetBingFa));
  PBC2SWenTao_SetScheme_descriptor_ = file->message_type(162);
  static const int PBC2SWenTao_SetScheme_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_SetScheme, schemeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_SetScheme, info_),
  };
  PBC2SWenTao_SetScheme_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWenTao_SetScheme_descriptor_,
      PBC2SWenTao_SetScheme::default_instance_,
      PBC2SWenTao_SetScheme_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_SetScheme, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_SetScheme, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWenTao_SetScheme));
  PBC2SWenTao_QianXiu_descriptor_ = file->message_type(163);
  static const int PBC2SWenTao_QianXiu_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_QianXiu, bingfaid_),
  };
  PBC2SWenTao_QianXiu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWenTao_QianXiu_descriptor_,
      PBC2SWenTao_QianXiu::default_instance_,
      PBC2SWenTao_QianXiu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_QianXiu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_QianXiu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWenTao_QianXiu));
  PBC2SWenTao_TuPo_descriptor_ = file->message_type(164);
  static const int PBC2SWenTao_TuPo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_TuPo, bingfaid_),
  };
  PBC2SWenTao_TuPo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWenTao_TuPo_descriptor_,
      PBC2SWenTao_TuPo::default_instance_,
      PBC2SWenTao_TuPo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_TuPo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_TuPo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWenTao_TuPo));
  PBC2SWenTao_Upgrate_descriptor_ = file->message_type(165);
  static const int PBC2SWenTao_Upgrate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_Upgrate, bingfaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_Upgrate, yaodianid_),
  };
  PBC2SWenTao_Upgrate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWenTao_Upgrate_descriptor_,
      PBC2SWenTao_Upgrate::default_instance_,
      PBC2SWenTao_Upgrate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_Upgrate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_Upgrate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWenTao_Upgrate));
  PBC2SWenTao_SetBingfu_descriptor_ = file->message_type(166);
  static const int PBC2SWenTao_SetBingfu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_SetBingfu, bingfaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_SetBingfu, yaodianid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_SetBingfu, bingfusn_),
  };
  PBC2SWenTao_SetBingfu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWenTao_SetBingfu_descriptor_,
      PBC2SWenTao_SetBingfu::default_instance_,
      PBC2SWenTao_SetBingfu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_SetBingfu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_SetBingfu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWenTao_SetBingfu));
  PBC2SWenTao_Reset_descriptor_ = file->message_type(167);
  static const int PBC2SWenTao_Reset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_Reset, bingfaid_),
  };
  PBC2SWenTao_Reset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWenTao_Reset_descriptor_,
      PBC2SWenTao_Reset::default_instance_,
      PBC2SWenTao_Reset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_Reset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_Reset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWenTao_Reset));
  PBC2SWenTao_ActiveScheme_descriptor_ = file->message_type(168);
  static const int PBC2SWenTao_ActiveScheme_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_ActiveScheme, schemeid_),
  };
  PBC2SWenTao_ActiveScheme_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWenTao_ActiveScheme_descriptor_,
      PBC2SWenTao_ActiveScheme::default_instance_,
      PBC2SWenTao_ActiveScheme_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_ActiveScheme, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_ActiveScheme, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWenTao_ActiveScheme));
  PBC2SWenTao_ActiveBingFa_descriptor_ = file->message_type(169);
  static const int PBC2SWenTao_ActiveBingFa_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_ActiveBingFa, bingfaid_),
  };
  PBC2SWenTao_ActiveBingFa_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWenTao_ActiveBingFa_descriptor_,
      PBC2SWenTao_ActiveBingFa::default_instance_,
      PBC2SWenTao_ActiveBingFa_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_ActiveBingFa, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_ActiveBingFa, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWenTao_ActiveBingFa));
  PBC2SWenTao_QianXiuUpdate_descriptor_ = file->message_type(170);
  static const int PBC2SWenTao_QianXiuUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_QianXiuUpdate, bingfaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_QianXiuUpdate, qianxiulevel_),
  };
  PBC2SWenTao_QianXiuUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWenTao_QianXiuUpdate_descriptor_,
      PBC2SWenTao_QianXiuUpdate::default_instance_,
      PBC2SWenTao_QianXiuUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_QianXiuUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_QianXiuUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWenTao_QianXiuUpdate));
  PBC2SWenTao_TuPoUpdate_descriptor_ = file->message_type(171);
  static const int PBC2SWenTao_TuPoUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_TuPoUpdate, bingfaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_TuPoUpdate, tupolevel_),
  };
  PBC2SWenTao_TuPoUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWenTao_TuPoUpdate_descriptor_,
      PBC2SWenTao_TuPoUpdate::default_instance_,
      PBC2SWenTao_TuPoUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_TuPoUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_TuPoUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWenTao_TuPoUpdate));
  PBC2SWenTao_YaoDianUpdate_descriptor_ = file->message_type(172);
  static const int PBC2SWenTao_YaoDianUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_YaoDianUpdate, bingfaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_YaoDianUpdate, tupolevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_YaoDianUpdate, yaodianid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_YaoDianUpdate, yaodianlevel_),
  };
  PBC2SWenTao_YaoDianUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWenTao_YaoDianUpdate_descriptor_,
      PBC2SWenTao_YaoDianUpdate::default_instance_,
      PBC2SWenTao_YaoDianUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_YaoDianUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_YaoDianUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWenTao_YaoDianUpdate));
  PBC2SWenTao_WisdomUpdate_descriptor_ = file->message_type(173);
  static const int PBC2SWenTao_WisdomUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_WisdomUpdate, wisdom_),
  };
  PBC2SWenTao_WisdomUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWenTao_WisdomUpdate_descriptor_,
      PBC2SWenTao_WisdomUpdate::default_instance_,
      PBC2SWenTao_WisdomUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_WisdomUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWenTao_WisdomUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWenTao_WisdomUpdate));
  PBC2GWulueSetSchemeAsk_descriptor_ = file->message_type(174);
  static const int PBC2GWulueSetSchemeAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWulueSetSchemeAsk, schemeid_),
  };
  PBC2GWulueSetSchemeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GWulueSetSchemeAsk_descriptor_,
      PBC2GWulueSetSchemeAsk::default_instance_,
      PBC2GWulueSetSchemeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWulueSetSchemeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWulueSetSchemeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GWulueSetSchemeAsk));
  PBC2GWulueUpZhanlueAsk_descriptor_ = file->message_type(175);
  static const int PBC2GWulueUpZhanlueAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWulueUpZhanlueAsk, wuluetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWulueUpZhanlueAsk, yaodianid_),
  };
  PBC2GWulueUpZhanlueAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GWulueUpZhanlueAsk_descriptor_,
      PBC2GWulueUpZhanlueAsk::default_instance_,
      PBC2GWulueUpZhanlueAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWulueUpZhanlueAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWulueUpZhanlueAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GWulueUpZhanlueAsk));
  PBC2GWulueSetBingfuAsk_descriptor_ = file->message_type(176);
  static const int PBC2GWulueSetBingfuAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWulueSetBingfuAsk, wuluetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWulueSetBingfuAsk, yaodianid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWulueSetBingfuAsk, bingfusn_),
  };
  PBC2GWulueSetBingfuAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GWulueSetBingfuAsk_descriptor_,
      PBC2GWulueSetBingfuAsk::default_instance_,
      PBC2GWulueSetBingfuAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWulueSetBingfuAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWulueSetBingfuAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GWulueSetBingfuAsk));
  PBG2CWulueSetSchemeAck_descriptor_ = file->message_type(177);
  static const int PBG2CWulueSetSchemeAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWulueSetSchemeAck, schemeid_),
  };
  PBG2CWulueSetSchemeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CWulueSetSchemeAck_descriptor_,
      PBG2CWulueSetSchemeAck::default_instance_,
      PBG2CWulueSetSchemeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWulueSetSchemeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWulueSetSchemeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CWulueSetSchemeAck));
  PBG2CWulueUpZhanlueAck_descriptor_ = file->message_type(178);
  static const int PBG2CWulueUpZhanlueAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWulueUpZhanlueAck, wuluetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWulueUpZhanlueAck, yaodianid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWulueUpZhanlueAck, curlevel_),
  };
  PBG2CWulueUpZhanlueAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CWulueUpZhanlueAck_descriptor_,
      PBG2CWulueUpZhanlueAck::default_instance_,
      PBG2CWulueUpZhanlueAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWulueUpZhanlueAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWulueUpZhanlueAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CWulueUpZhanlueAck));
  PBG2CWulueSetBingfuAck_descriptor_ = file->message_type(179);
  static const int PBG2CWulueSetBingfuAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWulueSetBingfuAck, wuluetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWulueSetBingfuAck, yaodianid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWulueSetBingfuAck, bingfusn_),
  };
  PBG2CWulueSetBingfuAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CWulueSetBingfuAck_descriptor_,
      PBG2CWulueSetBingfuAck::default_instance_,
      PBG2CWulueSetBingfuAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWulueSetBingfuAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWulueSetBingfuAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CWulueSetBingfuAck));
  PBC2GBingfuUpgradeAsk_descriptor_ = file->message_type(180);
  static const int PBC2GBingfuUpgradeAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GBingfuUpgradeAsk, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GBingfuUpgradeAsk, expend_),
  };
  PBC2GBingfuUpgradeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GBingfuUpgradeAsk_descriptor_,
      PBC2GBingfuUpgradeAsk::default_instance_,
      PBC2GBingfuUpgradeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GBingfuUpgradeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GBingfuUpgradeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GBingfuUpgradeAsk));
  PBC2GBingfuUpOneLevelAsk_descriptor_ = file->message_type(181);
  static const int PBC2GBingfuUpOneLevelAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GBingfuUpOneLevelAsk, sn_),
  };
  PBC2GBingfuUpOneLevelAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GBingfuUpOneLevelAsk_descriptor_,
      PBC2GBingfuUpOneLevelAsk::default_instance_,
      PBC2GBingfuUpOneLevelAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GBingfuUpOneLevelAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GBingfuUpOneLevelAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GBingfuUpOneLevelAsk));
  PBC2GBingfuSplitAsk_descriptor_ = file->message_type(182);
  static const int PBC2GBingfuSplitAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GBingfuSplitAsk, expend_),
  };
  PBC2GBingfuSplitAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GBingfuSplitAsk_descriptor_,
      PBC2GBingfuSplitAsk::default_instance_,
      PBC2GBingfuSplitAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GBingfuSplitAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GBingfuSplitAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GBingfuSplitAsk));
  PBG2CBingfuUpgradeAck_descriptor_ = file->message_type(183);
  static const int PBG2CBingfuUpgradeAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBingfuUpgradeAck, bingfusn_),
  };
  PBG2CBingfuUpgradeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CBingfuUpgradeAck_descriptor_,
      PBG2CBingfuUpgradeAck::default_instance_,
      PBG2CBingfuUpgradeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBingfuUpgradeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CBingfuUpgradeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CBingfuUpgradeAck));
  PBC2DropItem_InfoAsk_descriptor_ = file->message_type(184);
  static const int PBC2DropItem_InfoAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_InfoAsk, dropunitid_),
  };
  PBC2DropItem_InfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2DropItem_InfoAsk_descriptor_,
      PBC2DropItem_InfoAsk::default_instance_,
      PBC2DropItem_InfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_InfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_InfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2DropItem_InfoAsk));
  PBC2DropItem_DiceAsk_descriptor_ = file->message_type(185);
  static const int PBC2DropItem_DiceAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_DiceAsk, dropunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_DiceAsk, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_DiceAsk, abandon_),
  };
  PBC2DropItem_DiceAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2DropItem_DiceAsk_descriptor_,
      PBC2DropItem_DiceAsk::default_instance_,
      PBC2DropItem_DiceAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_DiceAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_DiceAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2DropItem_DiceAsk));
  PBC2DropItem_PickAllAsk_descriptor_ = file->message_type(186);
  static const int PBC2DropItem_PickAllAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_PickAllAsk, dropunitid_),
  };
  PBC2DropItem_PickAllAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2DropItem_PickAllAsk_descriptor_,
      PBC2DropItem_PickAllAsk::default_instance_,
      PBC2DropItem_PickAllAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_PickAllAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_PickAllAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2DropItem_PickAllAsk));
  PBC2DropItem_PickupAsk_descriptor_ = file->message_type(187);
  static const int PBC2DropItem_PickupAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_PickupAsk, dropunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_PickupAsk, itemindex_),
  };
  PBC2DropItem_PickupAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2DropItem_PickupAsk_descriptor_,
      PBC2DropItem_PickupAsk::default_instance_,
      PBC2DropItem_PickupAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_PickupAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_PickupAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2DropItem_PickupAsk));
  PBC2DropItem_AbadonAsk_descriptor_ = file->message_type(188);
  static const int PBC2DropItem_AbadonAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_AbadonAsk, dropunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_AbadonAsk, itemindex_),
  };
  PBC2DropItem_AbadonAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2DropItem_AbadonAsk_descriptor_,
      PBC2DropItem_AbadonAsk::default_instance_,
      PBC2DropItem_AbadonAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_AbadonAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_AbadonAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2DropItem_AbadonAsk));
  PBC2DropItem_AssignAsk_descriptor_ = file->message_type(189);
  static const int PBC2DropItem_AssignAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_AssignAsk, dropunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_AssignAsk, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_AssignAsk, targetid_),
  };
  PBC2DropItem_AssignAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2DropItem_AssignAsk_descriptor_,
      PBC2DropItem_AssignAsk::default_instance_,
      PBC2DropItem_AssignAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_AssignAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_AssignAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2DropItem_AssignAsk));
  PBDropItem_DiceInfo_descriptor_ = file->message_type(190);
  static const int PBDropItem_DiceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem_DiceInfo, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem_DiceInfo, number_),
  };
  PBDropItem_DiceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDropItem_DiceInfo_descriptor_,
      PBDropItem_DiceInfo::default_instance_,
      PBDropItem_DiceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem_DiceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem_DiceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDropItem_DiceInfo));
  PBDropItem_DropCell_descriptor_ = file->message_type(191);
  static const int PBDropItem_DropCell_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem_DropCell, itemidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem_DropCell, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem_DropCell, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem_DropCell, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem_DropCell, dice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem_DropCell, ownerid_),
  };
  PBDropItem_DropCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDropItem_DropCell_descriptor_,
      PBDropItem_DropCell::default_instance_,
      PBDropItem_DropCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem_DropCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDropItem_DropCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDropItem_DropCell));
  PBC2DropItem_Info_descriptor_ = file->message_type(192);
  static const int PBC2DropItem_Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Info, dropunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Info, cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Info, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Info, allottype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Info, endtime_),
  };
  PBC2DropItem_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2DropItem_Info_descriptor_,
      PBC2DropItem_Info::default_instance_,
      PBC2DropItem_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2DropItem_Info));
  PBC2DropItem_Dice_descriptor_ = file->message_type(193);
  static const int PBC2DropItem_Dice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Dice, dropunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Dice, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Dice, info_),
  };
  PBC2DropItem_Dice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2DropItem_Dice_descriptor_,
      PBC2DropItem_Dice::default_instance_,
      PBC2DropItem_Dice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Dice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Dice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2DropItem_Dice));
  PBC2DropItem_Assign_descriptor_ = file->message_type(194);
  static const int PBC2DropItem_Assign_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Assign, dropunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Assign, cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Assign, display_),
  };
  PBC2DropItem_Assign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2DropItem_Assign_descriptor_,
      PBC2DropItem_Assign::default_instance_,
      PBC2DropItem_Assign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Assign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_Assign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2DropItem_Assign));
  PBC2DropItem_ChangeAllot_descriptor_ = file->message_type(195);
  static const int PBC2DropItem_ChangeAllot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_ChangeAllot, dropunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_ChangeAllot, allottype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_ChangeAllot, endtime_),
  };
  PBC2DropItem_ChangeAllot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2DropItem_ChangeAllot_descriptor_,
      PBC2DropItem_ChangeAllot::default_instance_,
      PBC2DropItem_ChangeAllot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_ChangeAllot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2DropItem_ChangeAllot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2DropItem_ChangeAllot));
  PBC2GCommon_PlaneEnter_descriptor_ = file->message_type(196);
  static const int PBC2GCommon_PlaneEnter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_PlaneEnter, param_),
  };
  PBC2GCommon_PlaneEnter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommon_PlaneEnter_descriptor_,
      PBC2GCommon_PlaneEnter::default_instance_,
      PBC2GCommon_PlaneEnter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_PlaneEnter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_PlaneEnter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommon_PlaneEnter));
  PBC2GCommon_PlaneLeave_descriptor_ = file->message_type(197);
  static const int PBC2GCommon_PlaneLeave_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_PlaneLeave, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_PlaneLeave, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_PlaneLeave, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_PlaneLeave, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_PlaneLeave, curenergy_),
  };
  PBC2GCommon_PlaneLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommon_PlaneLeave_descriptor_,
      PBC2GCommon_PlaneLeave::default_instance_,
      PBC2GCommon_PlaneLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_PlaneLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_PlaneLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommon_PlaneLeave));
  PBC2GCommon_RegionTriggerPlane_descriptor_ = file->message_type(198);
  static const int PBC2GCommon_RegionTriggerPlane_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_RegionTriggerPlane, plane_id_),
  };
  PBC2GCommon_RegionTriggerPlane_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommon_RegionTriggerPlane_descriptor_,
      PBC2GCommon_RegionTriggerPlane::default_instance_,
      PBC2GCommon_RegionTriggerPlane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_RegionTriggerPlane, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_RegionTriggerPlane, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommon_RegionTriggerPlane));
  PBS2GCommon_TakeASeatAck_descriptor_ = file->message_type(199);
  static const int PBS2GCommon_TakeASeatAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2GCommon_TakeASeatAck, issitdown_),
  };
  PBS2GCommon_TakeASeatAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2GCommon_TakeASeatAck_descriptor_,
      PBS2GCommon_TakeASeatAck::default_instance_,
      PBS2GCommon_TakeASeatAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2GCommon_TakeASeatAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2GCommon_TakeASeatAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2GCommon_TakeASeatAck));
  PBG2CCommon_PlaneUpdate_descriptor_ = file->message_type(200);
  static const int PBG2CCommon_PlaneUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_PlaneUpdate, attr_),
  };
  PBG2CCommon_PlaneUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_PlaneUpdate_descriptor_,
      PBG2CCommon_PlaneUpdate::default_instance_,
      PBG2CCommon_PlaneUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_PlaneUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_PlaneUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_PlaneUpdate));
  PBC2GCopymapCreate_descriptor_ = file->message_type(201);
  static const int PBC2GCopymapCreate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapCreate, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapCreate, param_),
  };
  PBC2GCopymapCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCopymapCreate_descriptor_,
      PBC2GCopymapCreate::default_instance_,
      PBC2GCopymapCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCopymapCreate));
  PBC2GCopymapEnterNpc_descriptor_ = file->message_type(202);
  static const int PBC2GCopymapEnterNpc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapEnterNpc, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapEnterNpc, npcunitid_),
  };
  PBC2GCopymapEnterNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCopymapEnterNpc_descriptor_,
      PBC2GCopymapEnterNpc::default_instance_,
      PBC2GCopymapEnterNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapEnterNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapEnterNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCopymapEnterNpc));
  PBC2GCopymapExit_descriptor_ = file->message_type(203);
  static const int PBC2GCopymapExit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapExit, copymapid_),
  };
  PBC2GCopymapExit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCopymapExit_descriptor_,
      PBC2GCopymapExit::default_instance_,
      PBC2GCopymapExit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapExit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapExit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCopymapExit));
  PBC2GCopymapInvite_descriptor_ = file->message_type(204);
  static const int PBC2GCopymapInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapInvite, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapInvite, copymapid_),
  };
  PBC2GCopymapInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCopymapInvite_descriptor_,
      PBC2GCopymapInvite::default_instance_,
      PBC2GCopymapInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCopymapInvite));
  PBG2CCopymapInviteTransfer_descriptor_ = file->message_type(205);
  static const int PBG2CCopymapInviteTransfer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapInviteTransfer, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapInviteTransfer, copymapid_),
  };
  PBG2CCopymapInviteTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapInviteTransfer_descriptor_,
      PBG2CCopymapInviteTransfer::default_instance_,
      PBG2CCopymapInviteTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapInviteTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapInviteTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapInviteTransfer));
  PBC2GCopymapAcceptInvite_descriptor_ = file->message_type(206);
  static const int PBC2GCopymapAcceptInvite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapAcceptInvite, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapAcceptInvite, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapAcceptInvite, accept_),
  };
  PBC2GCopymapAcceptInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCopymapAcceptInvite_descriptor_,
      PBC2GCopymapAcceptInvite::default_instance_,
      PBC2GCopymapAcceptInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapAcceptInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapAcceptInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCopymapAcceptInvite));
  PBG2CCopymapState_descriptor_ = file->message_type(207);
  static const int PBG2CCopymapState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapState, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapState, completetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapState, completetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapState, prizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapState, itemnum_),
  };
  PBG2CCopymapState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapState_descriptor_,
      PBG2CCopymapState::default_instance_,
      PBG2CCopymapState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapState));
  PBG2CReadyStart_descriptor_ = file->message_type(208);
  static const int PBG2CReadyStart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CReadyStart, leftscond_),
  };
  PBG2CReadyStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CReadyStart_descriptor_,
      PBG2CReadyStart::default_instance_,
      PBG2CReadyStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CReadyStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CReadyStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CReadyStart));
  PBG2CCopymapCloseTip_descriptor_ = file->message_type(209);
  static const int PBG2CCopymapCloseTip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapCloseTip, chatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapCloseTip, time_),
  };
  PBG2CCopymapCloseTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapCloseTip_descriptor_,
      PBG2CCopymapCloseTip::default_instance_,
      PBG2CCopymapCloseTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapCloseTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapCloseTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapCloseTip));
  PBG2CCopymapFindAttackMonster_descriptor_ = file->message_type(210);
  static const int PBG2CCopymapFindAttackMonster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapFindAttackMonster, point_),
  };
  PBG2CCopymapFindAttackMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapFindAttackMonster_descriptor_,
      PBG2CCopymapFindAttackMonster::default_instance_,
      PBG2CCopymapFindAttackMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapFindAttackMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapFindAttackMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapFindAttackMonster));
  PBG2CCopymapQuestTarget_descriptor_ = file->message_type(211);
  static const int PBG2CCopymapQuestTarget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapQuestTarget, tarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapQuestTarget, count_),
  };
  PBG2CCopymapQuestTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapQuestTarget_descriptor_,
      PBG2CCopymapQuestTarget::default_instance_,
      PBG2CCopymapQuestTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapQuestTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapQuestTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapQuestTarget));
  PBG2CCopymapQuest_descriptor_ = file->message_type(212);
  static const int PBG2CCopymapQuest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapQuest, tar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapQuest, questid_),
  };
  PBG2CCopymapQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapQuest_descriptor_,
      PBG2CCopymapQuest::default_instance_,
      PBG2CCopymapQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapQuest));
  PBG2CCopymapChangeQuest_descriptor_ = file->message_type(213);
  static const int PBG2CCopymapChangeQuest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapChangeQuest, questid_),
  };
  PBG2CCopymapChangeQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapChangeQuest_descriptor_,
      PBG2CCopymapChangeQuest::default_instance_,
      PBG2CCopymapChangeQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapChangeQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapChangeQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapChangeQuest));
  PBG2CCopymapHurtInfo_descriptor_ = file->message_type(214);
  static const int PBG2CCopymapHurtInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapHurtInfo, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapHurtInfo, hurtvalue_),
  };
  PBG2CCopymapHurtInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapHurtInfo_descriptor_,
      PBG2CCopymapHurtInfo::default_instance_,
      PBG2CCopymapHurtInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapHurtInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapHurtInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapHurtInfo));
  PBCopymapGuardInfo_descriptor_ = file->message_type(215);
  static const int PBCopymapGuardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapGuardInfo, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapGuardInfo, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapGuardInfo, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapGuardInfo, curhp_),
  };
  PBCopymapGuardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCopymapGuardInfo_descriptor_,
      PBCopymapGuardInfo::default_instance_,
      PBCopymapGuardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapGuardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCopymapGuardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCopymapGuardInfo));
  PBG2CCopymapSysGuardHp_descriptor_ = file->message_type(216);
  static const int PBG2CCopymapSysGuardHp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSysGuardHp, pbgurdinfo_),
  };
  PBG2CCopymapSysGuardHp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapSysGuardHp_descriptor_,
      PBG2CCopymapSysGuardHp::default_instance_,
      PBG2CCopymapSysGuardHp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSysGuardHp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapSysGuardHp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapSysGuardHp));
  PBG2CPoemActivePos_descriptor_ = file->message_type(217);
  static const int PBG2CPoemActivePos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPoemActivePos, poemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPoemActivePos, pos_),
  };
  PBG2CPoemActivePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CPoemActivePos_descriptor_,
      PBG2CPoemActivePos::default_instance_,
      PBG2CPoemActivePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPoemActivePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CPoemActivePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CPoemActivePos));
  PBG2CLiangyiNum_descriptor_ = file->message_type(218);
  static const int PBG2CLiangyiNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CLiangyiNum, totalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CLiangyiNum, num_),
  };
  PBG2CLiangyiNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CLiangyiNum_descriptor_,
      PBG2CLiangyiNum::default_instance_,
      PBG2CLiangyiNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CLiangyiNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CLiangyiNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CLiangyiNum));
  PBG2CCopymapWave_descriptor_ = file->message_type(219);
  static const int PBG2CCopymapWave_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapWave, copymappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapWave, totalwave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapWave, curwave_),
  };
  PBG2CCopymapWave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapWave_descriptor_,
      PBG2CCopymapWave::default_instance_,
      PBG2CCopymapWave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapWave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapWave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapWave));
  PBG2CSixiangMonster_descriptor_ = file->message_type(220);
  static const int PBG2CSixiangMonster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSixiangMonster, pbsubmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSixiangMonster, pbmainmonster_),
  };
  PBG2CSixiangMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CSixiangMonster_descriptor_,
      PBG2CSixiangMonster::default_instance_,
      PBG2CSixiangMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSixiangMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CSixiangMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CSixiangMonster));
  PBG2CCopymapAssistCount_descriptor_ = file->message_type(221);
  static const int PBG2CCopymapAssistCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapAssistCount, assistcount_),
  };
  PBG2CCopymapAssistCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapAssistCount_descriptor_,
      PBG2CCopymapAssistCount::default_instance_,
      PBG2CCopymapAssistCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapAssistCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapAssistCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapAssistCount));
  PBG2CCopymapEnterInfo_descriptor_ = file->message_type(222);
  static const int PBG2CCopymapEnterInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapEnterInfo, assist_),
  };
  PBG2CCopymapEnterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapEnterInfo_descriptor_,
      PBG2CCopymapEnterInfo::default_instance_,
      PBG2CCopymapEnterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapEnterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapEnterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapEnterInfo));
  PBC2GCopymapTeamMemberInfo_descriptor_ = file->message_type(223);
  static const int PBC2GCopymapTeamMemberInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapTeamMemberInfo, copymapid_),
  };
  PBC2GCopymapTeamMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCopymapTeamMemberInfo_descriptor_,
      PBC2GCopymapTeamMemberInfo::default_instance_,
      PBC2GCopymapTeamMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapTeamMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCopymapTeamMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCopymapTeamMemberInfo));
  PBG2CCopymapTeamMember_descriptor_ = file->message_type(224);
  static const int PBG2CCopymapTeamMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapTeamMember, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapTeamMember, entercount_),
  };
  PBG2CCopymapTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapTeamMember_descriptor_,
      PBG2CCopymapTeamMember::default_instance_,
      PBG2CCopymapTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapTeamMember));
  PBG2CCopymapTeamMemberInfo_descriptor_ = file->message_type(225);
  static const int PBG2CCopymapTeamMemberInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapTeamMemberInfo, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapTeamMemberInfo, info_),
  };
  PBG2CCopymapTeamMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapTeamMemberInfo_descriptor_,
      PBG2CCopymapTeamMemberInfo::default_instance_,
      PBG2CCopymapTeamMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapTeamMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapTeamMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapTeamMemberInfo));
  PBManorLineUpInfo_descriptor_ = file->message_type(226);
  static const int PBManorLineUpInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorLineUpInfo, regionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorLineUpInfo, insidecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorLineUpInfo, lineupcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorLineUpInfo, insidelimit_),
  };
  PBManorLineUpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBManorLineUpInfo_descriptor_,
      PBManorLineUpInfo::default_instance_,
      PBManorLineUpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorLineUpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorLineUpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBManorLineUpInfo));
  PBG2CCopymapManorLobbyLineupNtf_descriptor_ = file->message_type(227);
  static const int PBG2CCopymapManorLobbyLineupNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorLobbyLineupNtf, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorLobbyLineupNtf, lines_),
  };
  PBG2CCopymapManorLobbyLineupNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapManorLobbyLineupNtf_descriptor_,
      PBG2CCopymapManorLobbyLineupNtf::default_instance_,
      PBG2CCopymapManorLobbyLineupNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorLobbyLineupNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorLobbyLineupNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapManorLobbyLineupNtf));
  PBG2CCopymapManorBattleFieldShenfuNtf_descriptor_ = file->message_type(228);
  static const int PBG2CCopymapManorBattleFieldShenfuNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBattleFieldShenfuNtf, ischallenger_),
  };
  PBG2CCopymapManorBattleFieldShenfuNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapManorBattleFieldShenfuNtf_descriptor_,
      PBG2CCopymapManorBattleFieldShenfuNtf::default_instance_,
      PBG2CCopymapManorBattleFieldShenfuNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBattleFieldShenfuNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBattleFieldShenfuNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapManorBattleFieldShenfuNtf));
  PBManorBattleFieldComrades_descriptor_ = file->message_type(229);
  static const int PBManorBattleFieldComrades_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldComrades, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldComrades, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldComrades, maxhp_),
  };
  PBManorBattleFieldComrades_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBManorBattleFieldComrades_descriptor_,
      PBManorBattleFieldComrades::default_instance_,
      PBManorBattleFieldComrades_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldComrades, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldComrades, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBManorBattleFieldComrades));
  PBG2CCopymapManorBattleFieldComradesNtf_descriptor_ = file->message_type(230);
  static const int PBG2CCopymapManorBattleFieldComradesNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBattleFieldComradesNtf, comrades_),
  };
  PBG2CCopymapManorBattleFieldComradesNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapManorBattleFieldComradesNtf_descriptor_,
      PBG2CCopymapManorBattleFieldComradesNtf::default_instance_,
      PBG2CCopymapManorBattleFieldComradesNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBattleFieldComradesNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBattleFieldComradesNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapManorBattleFieldComradesNtf));
  PBFactionScore_descriptor_ = file->message_type(231);
  static const int PBFactionScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionScore, factionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionScore, totalscore_),
  };
  PBFactionScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFactionScore_descriptor_,
      PBFactionScore::default_instance_,
      PBFactionScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFactionScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFactionScore));
  PBG2CCopymapManorBattleFieldTotalScoreNtf_descriptor_ = file->message_type(232);
  static const int PBG2CCopymapManorBattleFieldTotalScoreNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBattleFieldTotalScoreNtf, defender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBattleFieldTotalScoreNtf, challenger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBattleFieldTotalScoreNtf, leftsecond_),
  };
  PBG2CCopymapManorBattleFieldTotalScoreNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapManorBattleFieldTotalScoreNtf_descriptor_,
      PBG2CCopymapManorBattleFieldTotalScoreNtf::default_instance_,
      PBG2CCopymapManorBattleFieldTotalScoreNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBattleFieldTotalScoreNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBattleFieldTotalScoreNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapManorBattleFieldTotalScoreNtf));
  PBG2CCopymapManorBroadCastPromptNtf_descriptor_ = file->message_type(233);
  static const int PBG2CCopymapManorBroadCastPromptNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBroadCastPromptNtf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBroadCastPromptNtf, argnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBroadCastPromptNtf, argstring_),
  };
  PBG2CCopymapManorBroadCastPromptNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCopymapManorBroadCastPromptNtf_descriptor_,
      PBG2CCopymapManorBroadCastPromptNtf::default_instance_,
      PBG2CCopymapManorBroadCastPromptNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBroadCastPromptNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCopymapManorBroadCastPromptNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCopymapManorBroadCastPromptNtf));
  PBG2CCommon_BossInfo_descriptor_ = file->message_type(234);
  static const int PBG2CCommon_BossInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_BossInfo, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_BossInfo, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_BossInfo, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_BossInfo, alive_),
  };
  PBG2CCommon_BossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_BossInfo_descriptor_,
      PBG2CCommon_BossInfo::default_instance_,
      PBG2CCommon_BossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_BossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_BossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_BossInfo));
  PBG2CCommon_BossList_descriptor_ = file->message_type(235);
  static const int PBG2CCommon_BossList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_BossList, info_),
  };
  PBG2CCommon_BossList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_BossList_descriptor_,
      PBG2CCommon_BossList::default_instance_,
      PBG2CCommon_BossList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_BossList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_BossList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_BossList));
  PBC2GCommon_FlyAsk_descriptor_ = file->message_type(236);
  static const int PBC2GCommon_FlyAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_FlyAsk, flytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_FlyAsk, id_),
  };
  PBC2GCommon_FlyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommon_FlyAsk_descriptor_,
      PBC2GCommon_FlyAsk::default_instance_,
      PBC2GCommon_FlyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_FlyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_FlyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommon_FlyAsk));
  PBG2CCommon_FlyAck_descriptor_ = file->message_type(237);
  static const int PBG2CCommon_FlyAck_offsets_[1] = {
  };
  PBG2CCommon_FlyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_FlyAck_descriptor_,
      PBG2CCommon_FlyAck::default_instance_,
      PBG2CCommon_FlyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_FlyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_FlyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_FlyAck));
  PBC2GCommon_TaskFlyAsk_descriptor_ = file->message_type(238);
  static const int PBC2GCommon_TaskFlyAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_TaskFlyAsk, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_TaskFlyAsk, regionid_),
  };
  PBC2GCommon_TaskFlyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommon_TaskFlyAsk_descriptor_,
      PBC2GCommon_TaskFlyAsk::default_instance_,
      PBC2GCommon_TaskFlyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_TaskFlyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_TaskFlyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommon_TaskFlyAsk));
  PBG2CCommon_TaskFlyAck_descriptor_ = file->message_type(239);
  static const int PBG2CCommon_TaskFlyAck_offsets_[1] = {
  };
  PBG2CCommon_TaskFlyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_TaskFlyAck_descriptor_,
      PBG2CCommon_TaskFlyAck::default_instance_,
      PBG2CCommon_TaskFlyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_TaskFlyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_TaskFlyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_TaskFlyAck));
  PBG2CCommon_DazuoguajiTotalNtf_descriptor_ = file->message_type(240);
  static const int PBG2CCommon_DazuoguajiTotalNtf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_DazuoguajiTotalNtf, dailydazuoguajiexpleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_DazuoguajiTotalNtf, dailydazuoguajiwisdomleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_DazuoguajiTotalNtf, showprompt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_DazuoguajiTotalNtf, expadded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_DazuoguajiTotalNtf, wisdomadded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_DazuoguajiTotalNtf, closepanel_),
  };
  PBG2CCommon_DazuoguajiTotalNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_DazuoguajiTotalNtf_descriptor_,
      PBG2CCommon_DazuoguajiTotalNtf::default_instance_,
      PBG2CCommon_DazuoguajiTotalNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_DazuoguajiTotalNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_DazuoguajiTotalNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_DazuoguajiTotalNtf));
  PBG2CUpBingfuExp_descriptor_ = file->message_type(241);
  static const int PBG2CUpBingfuExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpBingfuExp, bingfuexp_),
  };
  PBG2CUpBingfuExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CUpBingfuExp_descriptor_,
      PBG2CUpBingfuExp::default_instance_,
      PBG2CUpBingfuExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpBingfuExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CUpBingfuExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CUpBingfuExp));
  PBG2CCommonTreasurePrize_descriptor_ = file->message_type(242);
  static const int PBG2CCommonTreasurePrize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonTreasurePrize, prizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonTreasurePrize, treasureid_),
  };
  PBG2CCommonTreasurePrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommonTreasurePrize_descriptor_,
      PBG2CCommonTreasurePrize::default_instance_,
      PBG2CCommonTreasurePrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonTreasurePrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonTreasurePrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommonTreasurePrize));
  PBG2CCommonSetCorpsJob_descriptor_ = file->message_type(243);
  static const int PBG2CCommonSetCorpsJob_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonSetCorpsJob, corpsjob_),
  };
  PBG2CCommonSetCorpsJob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommonSetCorpsJob_descriptor_,
      PBG2CCommonSetCorpsJob::default_instance_,
      PBG2CCommonSetCorpsJob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonSetCorpsJob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonSetCorpsJob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommonSetCorpsJob));
  PBG2CCommonStrongerReWard_descriptor_ = file->message_type(244);
  static const int PBG2CCommonStrongerReWard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonStrongerReWard, uid_),
  };
  PBG2CCommonStrongerReWard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommonStrongerReWard_descriptor_,
      PBG2CCommonStrongerReWard::default_instance_,
      PBG2CCommonStrongerReWard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonStrongerReWard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonStrongerReWard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommonStrongerReWard));
  PBG2CFightPower_descriptor_ = file->message_type(245);
  static const int PBG2CFightPower_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFightPower, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFightPower, fightpower_),
  };
  PBG2CFightPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFightPower_descriptor_,
      PBG2CFightPower::default_instance_,
      PBG2CFightPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFightPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFightPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFightPower));
  PBG2CCommonSubFightPower_descriptor_ = file->message_type(246);
  static const int PBG2CCommonSubFightPower_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonSubFightPower, info_),
  };
  PBG2CCommonSubFightPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommonSubFightPower_descriptor_,
      PBG2CCommonSubFightPower::default_instance_,
      PBG2CCommonSubFightPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonSubFightPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommonSubFightPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommonSubFightPower));
  PBG2CCommon_SystemSwitchAck_descriptor_ = file->message_type(247);
  static const int PBG2CCommon_SystemSwitchAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_SystemSwitchAck, id_),
  };
  PBG2CCommon_SystemSwitchAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_SystemSwitchAck_descriptor_,
      PBG2CCommon_SystemSwitchAck::default_instance_,
      PBG2CCommon_SystemSwitchAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_SystemSwitchAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_SystemSwitchAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_SystemSwitchAck));
  PBC2GCommonPromotion_descriptor_ = file->message_type(248);
  static const int PBC2GCommonPromotion_offsets_[1] = {
  };
  PBC2GCommonPromotion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommonPromotion_descriptor_,
      PBC2GCommonPromotion::default_instance_,
      PBC2GCommonPromotion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonPromotion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonPromotion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommonPromotion));
  PBG2CCommon_Promotion_descriptor_ = file->message_type(249);
  static const int PBG2CCommon_Promotion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_Promotion, step_),
  };
  PBG2CCommon_Promotion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_Promotion_descriptor_,
      PBG2CCommon_Promotion::default_instance_,
      PBG2CCommon_Promotion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_Promotion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_Promotion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_Promotion));
  PBC2GIdentityOpenAsk_descriptor_ = file->message_type(250);
  static const int PBC2GIdentityOpenAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityOpenAsk, setid_),
  };
  PBC2GIdentityOpenAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GIdentityOpenAsk_descriptor_,
      PBC2GIdentityOpenAsk::default_instance_,
      PBC2GIdentityOpenAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityOpenAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityOpenAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GIdentityOpenAsk));
  PBG2CIdentityOpenAck_descriptor_ = file->message_type(251);
  static const int PBG2CIdentityOpenAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityOpenAck, setid_),
  };
  PBG2CIdentityOpenAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CIdentityOpenAck_descriptor_,
      PBG2CIdentityOpenAck::default_instance_,
      PBG2CIdentityOpenAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityOpenAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityOpenAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CIdentityOpenAck));
  PBC2GIdentityLearnAsk_descriptor_ = file->message_type(252);
  static const int PBC2GIdentityLearnAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityLearnAsk, setid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityLearnAsk, identityid_),
  };
  PBC2GIdentityLearnAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GIdentityLearnAsk_descriptor_,
      PBC2GIdentityLearnAsk::default_instance_,
      PBC2GIdentityLearnAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityLearnAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityLearnAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GIdentityLearnAsk));
  PBG2CIdentityLearnAck_descriptor_ = file->message_type(253);
  static const int PBG2CIdentityLearnAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityLearnAck, setid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityLearnAck, identityid_),
  };
  PBG2CIdentityLearnAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CIdentityLearnAck_descriptor_,
      PBG2CIdentityLearnAck::default_instance_,
      PBG2CIdentityLearnAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityLearnAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityLearnAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CIdentityLearnAck));
  PBC2GIdentityResetAsk_descriptor_ = file->message_type(254);
  static const int PBC2GIdentityResetAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityResetAsk, setid_),
  };
  PBC2GIdentityResetAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GIdentityResetAsk_descriptor_,
      PBC2GIdentityResetAsk::default_instance_,
      PBC2GIdentityResetAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityResetAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityResetAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GIdentityResetAsk));
  PBG2CIdentityResetAck_descriptor_ = file->message_type(255);
  static const int PBG2CIdentityResetAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityResetAck, setid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityResetAck, resettime_),
  };
  PBG2CIdentityResetAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CIdentityResetAck_descriptor_,
      PBG2CIdentityResetAck::default_instance_,
      PBG2CIdentityResetAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityResetAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityResetAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CIdentityResetAck));
  PBC2GIdentityUpSkillAsk_descriptor_ = file->message_type(256);
  static const int PBC2GIdentityUpSkillAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityUpSkillAsk, setid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityUpSkillAsk, skillid_),
  };
  PBC2GIdentityUpSkillAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GIdentityUpSkillAsk_descriptor_,
      PBC2GIdentityUpSkillAsk::default_instance_,
      PBC2GIdentityUpSkillAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityUpSkillAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GIdentityUpSkillAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GIdentityUpSkillAsk));
  PBG2CIdentityUpSkillAck_descriptor_ = file->message_type(257);
  static const int PBG2CIdentityUpSkillAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityUpSkillAck, setid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityUpSkillAck, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityUpSkillAck, skilllevel_),
  };
  PBG2CIdentityUpSkillAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CIdentityUpSkillAck_descriptor_,
      PBG2CIdentityUpSkillAck::default_instance_,
      PBG2CIdentityUpSkillAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityUpSkillAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CIdentityUpSkillAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CIdentityUpSkillAck));
  PBC2GWuxueNewAsk_descriptor_ = file->message_type(258);
  static const int PBC2GWuxueNewAsk_offsets_[1] = {
  };
  PBC2GWuxueNewAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GWuxueNewAsk_descriptor_,
      PBC2GWuxueNewAsk::default_instance_,
      PBC2GWuxueNewAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueNewAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueNewAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GWuxueNewAsk));
  PBG2CWuxueNewAck_descriptor_ = file->message_type(259);
  static const int PBG2CWuxueNewAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueNewAck, nameid_),
  };
  PBG2CWuxueNewAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CWuxueNewAck_descriptor_,
      PBG2CWuxueNewAck::default_instance_,
      PBG2CWuxueNewAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueNewAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueNewAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CWuxueNewAck));
  PBC2GWuxueDelAsk_descriptor_ = file->message_type(260);
  static const int PBC2GWuxueDelAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueDelAsk, schemenum_),
  };
  PBC2GWuxueDelAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GWuxueDelAsk_descriptor_,
      PBC2GWuxueDelAsk::default_instance_,
      PBC2GWuxueDelAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueDelAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueDelAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GWuxueDelAsk));
  PBG2CWuxueDelAck_descriptor_ = file->message_type(261);
  static const int PBG2CWuxueDelAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueDelAck, schemenum_),
  };
  PBG2CWuxueDelAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CWuxueDelAck_descriptor_,
      PBG2CWuxueDelAck::default_instance_,
      PBG2CWuxueDelAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueDelAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueDelAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CWuxueDelAck));
  PBC2GWuxueChangeAsk_descriptor_ = file->message_type(262);
  static const int PBC2GWuxueChangeAsk_offsets_[1] = {
  };
  PBC2GWuxueChangeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GWuxueChangeAsk_descriptor_,
      PBC2GWuxueChangeAsk::default_instance_,
      PBC2GWuxueChangeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueChangeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueChangeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GWuxueChangeAsk));
  PBG2CWuxueChangeAck_descriptor_ = file->message_type(263);
  static const int PBG2CWuxueChangeAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueChangeAck, schemenum_),
  };
  PBG2CWuxueChangeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CWuxueChangeAck_descriptor_,
      PBG2CWuxueChangeAck::default_instance_,
      PBG2CWuxueChangeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueChangeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueChangeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CWuxueChangeAck));
  PBC2GWuxueSetSkillAsk_descriptor_ = file->message_type(264);
  static const int PBC2GWuxueSetSkillAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueSetSkillAsk, schemenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueSetSkillAsk, skillindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueSetSkillAsk, skillid_),
  };
  PBC2GWuxueSetSkillAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GWuxueSetSkillAsk_descriptor_,
      PBC2GWuxueSetSkillAsk::default_instance_,
      PBC2GWuxueSetSkillAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueSetSkillAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueSetSkillAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GWuxueSetSkillAsk));
  PBG2CWuxueSetSkillAck_descriptor_ = file->message_type(265);
  static const int PBG2CWuxueSetSkillAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueSetSkillAck, schemenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueSetSkillAck, skillindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueSetSkillAck, skillid_),
  };
  PBG2CWuxueSetSkillAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CWuxueSetSkillAck_descriptor_,
      PBG2CWuxueSetSkillAck::default_instance_,
      PBG2CWuxueSetSkillAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueSetSkillAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueSetSkillAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CWuxueSetSkillAck));
  PBC2GWuxueSetAllSkillAsk_descriptor_ = file->message_type(266);
  static const int PBC2GWuxueSetAllSkillAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueSetAllSkillAsk, schemenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueSetAllSkillAsk, skilldata_),
  };
  PBC2GWuxueSetAllSkillAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GWuxueSetAllSkillAsk_descriptor_,
      PBC2GWuxueSetAllSkillAsk::default_instance_,
      PBC2GWuxueSetAllSkillAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueSetAllSkillAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueSetAllSkillAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GWuxueSetAllSkillAsk));
  PBG2CWuxueSetAllSkillAck_descriptor_ = file->message_type(267);
  static const int PBG2CWuxueSetAllSkillAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueSetAllSkillAck, schemenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueSetAllSkillAck, skilldata_),
  };
  PBG2CWuxueSetAllSkillAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CWuxueSetAllSkillAck_descriptor_,
      PBG2CWuxueSetAllSkillAck::default_instance_,
      PBG2CWuxueSetAllSkillAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueSetAllSkillAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueSetAllSkillAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CWuxueSetAllSkillAck));
  PBC2GWuxueLearnSkillAsk_descriptor_ = file->message_type(268);
  static const int PBC2GWuxueLearnSkillAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueLearnSkillAsk, schemenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueLearnSkillAsk, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueLearnSkillAsk, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueLearnSkillAsk, newskillid_),
  };
  PBC2GWuxueLearnSkillAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GWuxueLearnSkillAsk_descriptor_,
      PBC2GWuxueLearnSkillAsk::default_instance_,
      PBC2GWuxueLearnSkillAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueLearnSkillAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWuxueLearnSkillAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GWuxueLearnSkillAsk));
  PBG2CWuxueLearnSkillAck_descriptor_ = file->message_type(269);
  static const int PBG2CWuxueLearnSkillAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueLearnSkillAck, schemenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueLearnSkillAck, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueLearnSkillAck, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueLearnSkillAck, newskillid_),
  };
  PBG2CWuxueLearnSkillAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CWuxueLearnSkillAck_descriptor_,
      PBG2CWuxueLearnSkillAck::default_instance_,
      PBG2CWuxueLearnSkillAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueLearnSkillAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CWuxueLearnSkillAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CWuxueLearnSkillAck));
  PBC2GCommon_SearchPlayer_descriptor_ = file->message_type(270);
  static const int PBC2GCommon_SearchPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_SearchPlayer, clientparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_SearchPlayer, name_),
  };
  PBC2GCommon_SearchPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommon_SearchPlayer_descriptor_,
      PBC2GCommon_SearchPlayer::default_instance_,
      PBC2GCommon_SearchPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_SearchPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_SearchPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommon_SearchPlayer));
  PBG2CCommon_SearchPlayer_descriptor_ = file->message_type(271);
  static const int PBG2CCommon_SearchPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_SearchPlayer, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_SearchPlayer, playerdisplay_),
  };
  PBG2CCommon_SearchPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_SearchPlayer_descriptor_,
      PBG2CCommon_SearchPlayer::default_instance_,
      PBG2CCommon_SearchPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_SearchPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_SearchPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_SearchPlayer));
  PBG2CCommon_MonsterTalk_descriptor_ = file->message_type(272);
  static const int PBG2CCommon_MonsterTalk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_MonsterTalk, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_MonsterTalk, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_MonsterTalk, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_MonsterTalk, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_MonsterTalk, talkid_),
  };
  PBG2CCommon_MonsterTalk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_MonsterTalk_descriptor_,
      PBG2CCommon_MonsterTalk::default_instance_,
      PBG2CCommon_MonsterTalk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_MonsterTalk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_MonsterTalk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_MonsterTalk));
  PBG2CCommon_BeFindNotice_descriptor_ = file->message_type(273);
  static const int PBG2CCommon_BeFindNotice_offsets_[1] = {
  };
  PBG2CCommon_BeFindNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_BeFindNotice_descriptor_,
      PBG2CCommon_BeFindNotice::default_instance_,
      PBG2CCommon_BeFindNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_BeFindNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_BeFindNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_BeFindNotice));
  PBC2GCommon_NpcDialogComplete_descriptor_ = file->message_type(274);
  static const int PBC2GCommon_NpcDialogComplete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_NpcDialogComplete, unitid_),
  };
  PBC2GCommon_NpcDialogComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommon_NpcDialogComplete_descriptor_,
      PBC2GCommon_NpcDialogComplete::default_instance_,
      PBC2GCommon_NpcDialogComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_NpcDialogComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_NpcDialogComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommon_NpcDialogComplete));
  PBC2GCommon_UnActiveMonster_descriptor_ = file->message_type(275);
  static const int PBC2GCommon_UnActiveMonster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_UnActiveMonster, unitid_),
  };
  PBC2GCommon_UnActiveMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommon_UnActiveMonster_descriptor_,
      PBC2GCommon_UnActiveMonster::default_instance_,
      PBC2GCommon_UnActiveMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_UnActiveMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommon_UnActiveMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommon_UnActiveMonster));
  PBG2CCommon_SetPosition_descriptor_ = file->message_type(276);
  static const int PBG2CCommon_SetPosition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_SetPosition, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_SetPosition, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_SetPosition, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_SetPosition, dir_),
  };
  PBG2CCommon_SetPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_SetPosition_descriptor_,
      PBG2CCommon_SetPosition::default_instance_,
      PBG2CCommon_SetPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_SetPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_SetPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_SetPosition));
  PBG2CCommon_DayCopymapCount_descriptor_ = file->message_type(277);
  static const int PBG2CCommon_DayCopymapCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_DayCopymapCount, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_DayCopymapCount, count_),
  };
  PBG2CCommon_DayCopymapCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_DayCopymapCount_descriptor_,
      PBG2CCommon_DayCopymapCount::default_instance_,
      PBG2CCommon_DayCopymapCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_DayCopymapCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_DayCopymapCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_DayCopymapCount));
  PBC2GCommonGetBattleAttrDetailAsk_descriptor_ = file->message_type(278);
  static const int PBC2GCommonGetBattleAttrDetailAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonGetBattleAttrDetailAsk, type_),
  };
  PBC2GCommonGetBattleAttrDetailAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCommonGetBattleAttrDetailAsk_descriptor_,
      PBC2GCommonGetBattleAttrDetailAsk::default_instance_,
      PBC2GCommonGetBattleAttrDetailAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonGetBattleAttrDetailAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCommonGetBattleAttrDetailAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCommonGetBattleAttrDetailAsk));
  PBG2CCommon_TakeASeatAsk_descriptor_ = file->message_type(279);
  static const int PBG2CCommon_TakeASeatAsk_offsets_[1] = {
  };
  PBG2CCommon_TakeASeatAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCommon_TakeASeatAsk_descriptor_,
      PBG2CCommon_TakeASeatAsk::default_instance_,
      PBG2CCommon_TakeASeatAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_TakeASeatAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCommon_TakeASeatAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCommon_TakeASeatAsk));
  PBC2SDartCheckAsk_descriptor_ = file->message_type(280);
  static const int PBC2SDartCheckAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartCheckAsk, dartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartCheckAsk, npcunitid_),
  };
  PBC2SDartCheckAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SDartCheckAsk_descriptor_,
      PBC2SDartCheckAsk::default_instance_,
      PBC2SDartCheckAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartCheckAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartCheckAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SDartCheckAsk));
  PBDartMemberResourceInfo_descriptor_ = file->message_type(281);
  static const int PBDartMemberResourceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartMemberResourceInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartMemberResourceInfo, itemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartMemberResourceInfo, dartcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartMemberResourceInfo, notaround_),
  };
  PBDartMemberResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDartMemberResourceInfo_descriptor_,
      PBDartMemberResourceInfo::default_instance_,
      PBDartMemberResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartMemberResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartMemberResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDartMemberResourceInfo));
  PBS2CDartCheckAck_descriptor_ = file->message_type(282);
  static const int PBS2CDartCheckAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartCheckAck, dartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartCheckAck, info_),
  };
  PBS2CDartCheckAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartCheckAck_descriptor_,
      PBS2CDartCheckAck::default_instance_,
      PBS2CDartCheckAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartCheckAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartCheckAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartCheckAck));
  PBC2SDartStartAsk_descriptor_ = file->message_type(283);
  static const int PBC2SDartStartAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartStartAsk, dartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartStartAsk, npcunitid_),
  };
  PBC2SDartStartAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SDartStartAsk_descriptor_,
      PBC2SDartStartAsk::default_instance_,
      PBC2SDartStartAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartStartAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartStartAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SDartStartAsk));
  PBC2SDartQuitAsk_descriptor_ = file->message_type(284);
  static const int PBC2SDartQuitAsk_offsets_[1] = {
  };
  PBC2SDartQuitAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SDartQuitAsk_descriptor_,
      PBC2SDartQuitAsk::default_instance_,
      PBC2SDartQuitAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartQuitAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartQuitAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SDartQuitAsk));
  PBDartInfo_descriptor_ = file->message_type(285);
  static const int PBDartInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartInfo, prizetime_),
  };
  PBDartInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDartInfo_descriptor_,
      PBDartInfo::default_instance_,
      PBDartInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDartInfo));
  PBS2CDartStartAck_descriptor_ = file->message_type(286);
  static const int PBS2CDartStartAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartStartAck, dartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartStartAck, dartinfo_),
  };
  PBS2CDartStartAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartStartAck_descriptor_,
      PBS2CDartStartAck::default_instance_,
      PBS2CDartStartAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartStartAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartStartAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartStartAck));
  PBS2CDartInfoNtf_descriptor_ = file->message_type(287);
  static const int PBS2CDartInfoNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartInfoNtf, dartleftcountnormal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartInfoNtf, dartleftcounttianxia_),
  };
  PBS2CDartInfoNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartInfoNtf_descriptor_,
      PBS2CDartInfoNtf::default_instance_,
      PBS2CDartInfoNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartInfoNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartInfoNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartInfoNtf));
  PBS2CDartCheckPauseNtf_descriptor_ = file->message_type(288);
  static const int PBS2CDartCheckPauseNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartCheckPauseNtf, needconfirm_),
  };
  PBS2CDartCheckPauseNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartCheckPauseNtf_descriptor_,
      PBS2CDartCheckPauseNtf::default_instance_,
      PBS2CDartCheckPauseNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartCheckPauseNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartCheckPauseNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartCheckPauseNtf));
  PBC2SDartCheckConfirmAsk_descriptor_ = file->message_type(289);
  static const int PBC2SDartCheckConfirmAsk_offsets_[1] = {
  };
  PBC2SDartCheckConfirmAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SDartCheckConfirmAsk_descriptor_,
      PBC2SDartCheckConfirmAsk::default_instance_,
      PBC2SDartCheckConfirmAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartCheckConfirmAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartCheckConfirmAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SDartCheckConfirmAsk));
  PBC2SDartCheckGetBuffAsk_descriptor_ = file->message_type(290);
  static const int PBC2SDartCheckGetBuffAsk_offsets_[1] = {
  };
  PBC2SDartCheckGetBuffAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SDartCheckGetBuffAsk_descriptor_,
      PBC2SDartCheckGetBuffAsk::default_instance_,
      PBC2SDartCheckGetBuffAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartCheckGetBuffAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartCheckGetBuffAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SDartCheckGetBuffAsk));
  PBS2CDartStartMoveNtf_descriptor_ = file->message_type(291);
  static const int PBS2CDartStartMoveNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartStartMoveNtf, leftcd_),
  };
  PBS2CDartStartMoveNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartStartMoveNtf_descriptor_,
      PBS2CDartStartMoveNtf::default_instance_,
      PBS2CDartStartMoveNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartStartMoveNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartStartMoveNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartStartMoveNtf));
  PBS2CDartStartRobNtf_descriptor_ = file->message_type(292);
  static const int PBS2CDartStartRobNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartStartRobNtf, startrobcd_),
  };
  PBS2CDartStartRobNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartStartRobNtf_descriptor_,
      PBS2CDartStartRobNtf::default_instance_,
      PBS2CDartStartRobNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartStartRobNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartStartRobNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartStartRobNtf));
  PBS2CDartFinishAndPrizeNtf_descriptor_ = file->message_type(293);
  static const int PBS2CDartFinishAndPrizeNtf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartFinishAndPrizeNtf, dartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartFinishAndPrizeNtf, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartFinishAndPrizeNtf, memberplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartFinishAndPrizeNtf, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartFinishAndPrizeNtf, moneycount_),
  };
  PBS2CDartFinishAndPrizeNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartFinishAndPrizeNtf_descriptor_,
      PBS2CDartFinishAndPrizeNtf::default_instance_,
      PBS2CDartFinishAndPrizeNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartFinishAndPrizeNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartFinishAndPrizeNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartFinishAndPrizeNtf));
  PBS2CDartCheckGetBuffAck_descriptor_ = file->message_type(294);
  static const int PBS2CDartCheckGetBuffAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartCheckGetBuffAck, buffid_),
  };
  PBS2CDartCheckGetBuffAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartCheckGetBuffAck_descriptor_,
      PBS2CDartCheckGetBuffAck::default_instance_,
      PBS2CDartCheckGetBuffAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartCheckGetBuffAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartCheckGetBuffAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartCheckGetBuffAck));
  PBC2SDartAddSupplyAsk_descriptor_ = file->message_type(295);
  static const int PBC2SDartAddSupplyAsk_offsets_[1] = {
  };
  PBC2SDartAddSupplyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SDartAddSupplyAsk_descriptor_,
      PBC2SDartAddSupplyAsk::default_instance_,
      PBC2SDartAddSupplyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartAddSupplyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartAddSupplyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SDartAddSupplyAsk));
  PBC2SDartAddSupplyConfirmAsk_descriptor_ = file->message_type(296);
  static const int PBC2SDartAddSupplyConfirmAsk_offsets_[1] = {
  };
  PBC2SDartAddSupplyConfirmAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SDartAddSupplyConfirmAsk_descriptor_,
      PBC2SDartAddSupplyConfirmAsk::default_instance_,
      PBC2SDartAddSupplyConfirmAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartAddSupplyConfirmAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartAddSupplyConfirmAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SDartAddSupplyConfirmAsk));
  PBS2CDartFinishRobNtf_descriptor_ = file->message_type(297);
  static const int PBS2CDartFinishRobNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartFinishRobNtf, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartFinishRobNtf, leavecd_),
  };
  PBS2CDartFinishRobNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartFinishRobNtf_descriptor_,
      PBS2CDartFinishRobNtf::default_instance_,
      PBS2CDartFinishRobNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartFinishRobNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartFinishRobNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartFinishRobNtf));
  PBDartAddSupplyInfo_descriptor_ = file->message_type(298);
  static const int PBDartAddSupplyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartAddSupplyInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartAddSupplyInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartAddSupplyInfo, playerid_),
  };
  PBDartAddSupplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDartAddSupplyInfo_descriptor_,
      PBDartAddSupplyInfo::default_instance_,
      PBDartAddSupplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartAddSupplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDartAddSupplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDartAddSupplyInfo));
  PBS2CDartAddSupplyNtf_descriptor_ = file->message_type(299);
  static const int PBS2CDartAddSupplyNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartAddSupplyNtf, addinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartAddSupplyNtf, isleader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartAddSupplyNtf, isclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartAddSupplyNtf, leaderplayerid_),
  };
  PBS2CDartAddSupplyNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartAddSupplyNtf_descriptor_,
      PBS2CDartAddSupplyNtf::default_instance_,
      PBS2CDartAddSupplyNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartAddSupplyNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartAddSupplyNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartAddSupplyNtf));
  PBS2CDartAddSupplyAck_descriptor_ = file->message_type(300);
  static const int PBS2CDartAddSupplyAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartAddSupplyAck, result_),
  };
  PBS2CDartAddSupplyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartAddSupplyAck_descriptor_,
      PBS2CDartAddSupplyAck::default_instance_,
      PBS2CDartAddSupplyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartAddSupplyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartAddSupplyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartAddSupplyAck));
  PBS2CDartQuitAck_descriptor_ = file->message_type(301);
  static const int PBS2CDartQuitAck_offsets_[1] = {
  };
  PBS2CDartQuitAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartQuitAck_descriptor_,
      PBS2CDartQuitAck::default_instance_,
      PBS2CDartQuitAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartQuitAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartQuitAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartQuitAck));
  PBS2CDartCheckConfirmAck_descriptor_ = file->message_type(302);
  static const int PBS2CDartCheckConfirmAck_offsets_[1] = {
  };
  PBS2CDartCheckConfirmAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartCheckConfirmAck_descriptor_,
      PBS2CDartCheckConfirmAck::default_instance_,
      PBS2CDartCheckConfirmAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartCheckConfirmAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartCheckConfirmAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartCheckConfirmAck));
  PBS2CDartAddSupplyConfirmAck_descriptor_ = file->message_type(303);
  static const int PBS2CDartAddSupplyConfirmAck_offsets_[1] = {
  };
  PBS2CDartAddSupplyConfirmAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartAddSupplyConfirmAck_descriptor_,
      PBS2CDartAddSupplyConfirmAck::default_instance_,
      PBS2CDartAddSupplyConfirmAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartAddSupplyConfirmAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartAddSupplyConfirmAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartAddSupplyConfirmAck));
  PBC2SDartBack2NpcAsk_descriptor_ = file->message_type(304);
  static const int PBC2SDartBack2NpcAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartBack2NpcAsk, dartid_),
  };
  PBC2SDartBack2NpcAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SDartBack2NpcAsk_descriptor_,
      PBC2SDartBack2NpcAsk::default_instance_,
      PBC2SDartBack2NpcAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartBack2NpcAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SDartBack2NpcAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SDartBack2NpcAsk));
  PBS2CDartBack2NpcAck_descriptor_ = file->message_type(305);
  static const int PBS2CDartBack2NpcAck_offsets_[1] = {
  };
  PBS2CDartBack2NpcAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CDartBack2NpcAck_descriptor_,
      PBS2CDartBack2NpcAck::default_instance_,
      PBS2CDartBack2NpcAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartBack2NpcAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CDartBack2NpcAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CDartBack2NpcAck));
  PBC2GFactionBossTopAsk_descriptor_ = file->message_type(306);
  static const int PBC2GFactionBossTopAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossTopAsk, beginorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossTopAsk, count_),
  };
  PBC2GFactionBossTopAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionBossTopAsk_descriptor_,
      PBC2GFactionBossTopAsk::default_instance_,
      PBC2GFactionBossTopAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossTopAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossTopAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionBossTopAsk));
  PBC2GFactionBossPersonalTopAck_descriptor_ = file->message_type(307);
  static const int PBC2GFactionBossPersonalTopAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossPersonalTopAck, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossPersonalTopAck, allcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossPersonalTopAck, wholescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossPersonalTopAck, self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossPersonalTopAck, list_),
  };
  PBC2GFactionBossPersonalTopAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionBossPersonalTopAck_descriptor_,
      PBC2GFactionBossPersonalTopAck::default_instance_,
      PBC2GFactionBossPersonalTopAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossPersonalTopAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossPersonalTopAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionBossPersonalTopAck));
  PBC2GFactionBossFactionTopAck_descriptor_ = file->message_type(308);
  static const int PBC2GFactionBossFactionTopAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossFactionTopAck, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossFactionTopAck, allcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossFactionTopAck, wholescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossFactionTopAck, self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossFactionTopAck, list_),
  };
  PBC2GFactionBossFactionTopAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionBossFactionTopAck_descriptor_,
      PBC2GFactionBossFactionTopAck::default_instance_,
      PBC2GFactionBossFactionTopAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossFactionTopAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossFactionTopAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionBossFactionTopAck));
  PBC2GFactionBossUnionTopAck_descriptor_ = file->message_type(309);
  static const int PBC2GFactionBossUnionTopAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossUnionTopAck, ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossUnionTopAck, allcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossUnionTopAck, wholescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossUnionTopAck, self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossUnionTopAck, list_),
  };
  PBC2GFactionBossUnionTopAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFactionBossUnionTopAck_descriptor_,
      PBC2GFactionBossUnionTopAck::default_instance_,
      PBC2GFactionBossUnionTopAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossUnionTopAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFactionBossUnionTopAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFactionBossUnionTopAck));
  PBS2CSceneAreaList_descriptor_ = file->message_type(310);
  static const int PBS2CSceneAreaList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSceneAreaList, areaid_),
  };
  PBS2CSceneAreaList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CSceneAreaList_descriptor_,
      PBS2CSceneAreaList::default_instance_,
      PBS2CSceneAreaList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSceneAreaList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CSceneAreaList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CSceneAreaList));
  PBS2CQinggongStartNtf_descriptor_ = file->message_type(311);
  static const int PBS2CQinggongStartNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CQinggongStartNtf, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CQinggongStartNtf, qinggongid_),
  };
  PBS2CQinggongStartNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CQinggongStartNtf_descriptor_,
      PBS2CQinggongStartNtf::default_instance_,
      PBS2CQinggongStartNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CQinggongStartNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CQinggongStartNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CQinggongStartNtf));
  PBBattleAttrDetail_descriptor_ = file->message_type(312);
  static const int PBBattleAttrDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAttrDetail, sourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAttrDetail, value_),
  };
  PBBattleAttrDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleAttrDetail_descriptor_,
      PBBattleAttrDetail::default_instance_,
      PBBattleAttrDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAttrDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAttrDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleAttrDetail));
  PBS2CGetBattleAttrDetailAck_descriptor_ = file->message_type(313);
  static const int PBS2CGetBattleAttrDetailAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CGetBattleAttrDetailAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CGetBattleAttrDetailAck, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CGetBattleAttrDetailAck, total_),
  };
  PBS2CGetBattleAttrDetailAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CGetBattleAttrDetailAck_descriptor_,
      PBS2CGetBattleAttrDetailAck::default_instance_,
      PBS2CGetBattleAttrDetailAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CGetBattleAttrDetailAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CGetBattleAttrDetailAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CGetBattleAttrDetailAck));
  PBC2GTitleEquipAsk_descriptor_ = file->message_type(314);
  static const int PBC2GTitleEquipAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTitleEquipAsk, id_),
  };
  PBC2GTitleEquipAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTitleEquipAsk_descriptor_,
      PBC2GTitleEquipAsk::default_instance_,
      PBC2GTitleEquipAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTitleEquipAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTitleEquipAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTitleEquipAsk));
  PBG2CTitleEquipAck_descriptor_ = file->message_type(315);
  static const int PBG2CTitleEquipAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleEquipAck, id_),
  };
  PBG2CTitleEquipAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTitleEquipAck_descriptor_,
      PBG2CTitleEquipAck::default_instance_,
      PBG2CTitleEquipAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleEquipAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleEquipAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTitleEquipAck));
  PBC2GTitleUnEquipAsk_descriptor_ = file->message_type(316);
  static const int PBC2GTitleUnEquipAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTitleUnEquipAsk, id_),
  };
  PBC2GTitleUnEquipAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GTitleUnEquipAsk_descriptor_,
      PBC2GTitleUnEquipAsk::default_instance_,
      PBC2GTitleUnEquipAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTitleUnEquipAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GTitleUnEquipAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GTitleUnEquipAsk));
  PBG2CTitleUnEquipAck_descriptor_ = file->message_type(317);
  static const int PBG2CTitleUnEquipAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleUnEquipAck, id_),
  };
  PBG2CTitleUnEquipAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTitleUnEquipAck_descriptor_,
      PBG2CTitleUnEquipAck::default_instance_,
      PBG2CTitleUnEquipAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleUnEquipAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleUnEquipAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTitleUnEquipAck));
  PBG2CTitleAddAck_descriptor_ = file->message_type(318);
  static const int PBG2CTitleAddAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleAddAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleAddAck, info_),
  };
  PBG2CTitleAddAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTitleAddAck_descriptor_,
      PBG2CTitleAddAck::default_instance_,
      PBG2CTitleAddAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleAddAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleAddAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTitleAddAck));
  PBG2CTitleDelAck_descriptor_ = file->message_type(319);
  static const int PBG2CTitleDelAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleDelAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleDelAck, id_),
  };
  PBG2CTitleDelAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CTitleDelAck_descriptor_,
      PBG2CTitleDelAck::default_instance_,
      PBG2CTitleDelAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleDelAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CTitleDelAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CTitleDelAck));
  PBC2GFashionEquipAsk_descriptor_ = file->message_type(320);
  static const int PBC2GFashionEquipAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFashionEquipAsk, id_),
  };
  PBC2GFashionEquipAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFashionEquipAsk_descriptor_,
      PBC2GFashionEquipAsk::default_instance_,
      PBC2GFashionEquipAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFashionEquipAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFashionEquipAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFashionEquipAsk));
  PBG2CFashionEquipAck_descriptor_ = file->message_type(321);
  static const int PBG2CFashionEquipAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFashionEquipAck, id_),
  };
  PBG2CFashionEquipAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFashionEquipAck_descriptor_,
      PBG2CFashionEquipAck::default_instance_,
      PBG2CFashionEquipAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFashionEquipAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFashionEquipAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFashionEquipAck));
  PBC2GFashionUnEquipAsk_descriptor_ = file->message_type(322);
  static const int PBC2GFashionUnEquipAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFashionUnEquipAsk, id_),
  };
  PBC2GFashionUnEquipAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GFashionUnEquipAsk_descriptor_,
      PBC2GFashionUnEquipAsk::default_instance_,
      PBC2GFashionUnEquipAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFashionUnEquipAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GFashionUnEquipAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GFashionUnEquipAsk));
  PBG2CFashionUnEquipAck_descriptor_ = file->message_type(323);
  static const int PBG2CFashionUnEquipAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFashionUnEquipAck, id_),
  };
  PBG2CFashionUnEquipAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CFashionUnEquipAck_descriptor_,
      PBG2CFashionUnEquipAck::default_instance_,
      PBG2CFashionUnEquipAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFashionUnEquipAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CFashionUnEquipAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CFashionUnEquipAck));
  PBClimbTowerGetInfoAsk_descriptor_ = file->message_type(324);
  static const int PBClimbTowerGetInfoAsk_offsets_[1] = {
  };
  PBClimbTowerGetInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClimbTowerGetInfoAsk_descriptor_,
      PBClimbTowerGetInfoAsk::default_instance_,
      PBClimbTowerGetInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerGetInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerGetInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClimbTowerGetInfoAsk));
  PBClimbTowerGetInfoAck_descriptor_ = file->message_type(325);
  static const int PBClimbTowerGetInfoAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerGetInfoAck, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerGetInfoAck, canchallenge_),
  };
  PBClimbTowerGetInfoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClimbTowerGetInfoAck_descriptor_,
      PBClimbTowerGetInfoAck::default_instance_,
      PBClimbTowerGetInfoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerGetInfoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerGetInfoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClimbTowerGetInfoAck));
  PBClimbTowerGetInfoNtf_descriptor_ = file->message_type(326);
  static const int PBClimbTowerGetInfoNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerGetInfoNtf, info_),
  };
  PBClimbTowerGetInfoNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClimbTowerGetInfoNtf_descriptor_,
      PBClimbTowerGetInfoNtf::default_instance_,
      PBClimbTowerGetInfoNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerGetInfoNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerGetInfoNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClimbTowerGetInfoNtf));
  PBClimbTowerPrize_descriptor_ = file->message_type(327);
  static const int PBClimbTowerPrize_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerPrize, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerPrize, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerPrize, count_),
  };
  PBClimbTowerPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClimbTowerPrize_descriptor_,
      PBClimbTowerPrize::default_instance_,
      PBClimbTowerPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClimbTowerPrize));
  PBClimbTowerShowPrizeNtf_descriptor_ = file->message_type(328);
  static const int PBClimbTowerShowPrizeNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerShowPrizeNtf, shwoprize_),
  };
  PBClimbTowerShowPrizeNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClimbTowerShowPrizeNtf_descriptor_,
      PBClimbTowerShowPrizeNtf::default_instance_,
      PBClimbTowerShowPrizeNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerShowPrizeNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerShowPrizeNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClimbTowerShowPrizeNtf));
  PBClimbTowerChoosePrizeAsk_descriptor_ = file->message_type(329);
  static const int PBClimbTowerChoosePrizeAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerChoosePrizeAsk, prizeindex_),
  };
  PBClimbTowerChoosePrizeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClimbTowerChoosePrizeAsk_descriptor_,
      PBClimbTowerChoosePrizeAsk::default_instance_,
      PBClimbTowerChoosePrizeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerChoosePrizeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerChoosePrizeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClimbTowerChoosePrizeAsk));
  PBClimbTowerChoosePrizeAck_descriptor_ = file->message_type(330);
  static const int PBClimbTowerChoosePrizeAck_offsets_[1] = {
  };
  PBClimbTowerChoosePrizeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClimbTowerChoosePrizeAck_descriptor_,
      PBClimbTowerChoosePrizeAck::default_instance_,
      PBClimbTowerChoosePrizeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerChoosePrizeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerChoosePrizeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClimbTowerChoosePrizeAck));
  PBClimbTowerClearAsk_descriptor_ = file->message_type(331);
  static const int PBClimbTowerClearAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerClearAsk, rechallenge_),
  };
  PBClimbTowerClearAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClimbTowerClearAsk_descriptor_,
      PBClimbTowerClearAsk::default_instance_,
      PBClimbTowerClearAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerClearAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerClearAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClimbTowerClearAsk));
  PBClimbTowerClearAck_descriptor_ = file->message_type(332);
  static const int PBClimbTowerClearAck_offsets_[1] = {
  };
  PBClimbTowerClearAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClimbTowerClearAck_descriptor_,
      PBClimbTowerClearAck::default_instance_,
      PBClimbTowerClearAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerClearAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerClearAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClimbTowerClearAck));
  PBClimbTowerShowClearNtf_descriptor_ = file->message_type(333);
  static const int PBClimbTowerShowClearNtf_offsets_[1] = {
  };
  PBClimbTowerShowClearNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBClimbTowerShowClearNtf_descriptor_,
      PBClimbTowerShowClearNtf::default_instance_,
      PBClimbTowerShowClearNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerShowClearNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBClimbTowerShowClearNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBClimbTowerShowClearNtf));
  PBC2GAnswerQuestion_Answer_descriptor_ = file->message_type(334);
  static const int PBC2GAnswerQuestion_Answer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAnswerQuestion_Answer, right_),
  };
  PBC2GAnswerQuestion_Answer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GAnswerQuestion_Answer_descriptor_,
      PBC2GAnswerQuestion_Answer::default_instance_,
      PBC2GAnswerQuestion_Answer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAnswerQuestion_Answer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GAnswerQuestion_Answer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GAnswerQuestion_Answer));
  PBG2CAnswerQuestion_QuestionInfo_descriptor_ = file->message_type(335);
  static const int PBG2CAnswerQuestion_QuestionInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAnswerQuestion_QuestionInfo, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAnswerQuestion_QuestionInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAnswerQuestion_QuestionInfo, time_),
  };
  PBG2CAnswerQuestion_QuestionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CAnswerQuestion_QuestionInfo_descriptor_,
      PBG2CAnswerQuestion_QuestionInfo::default_instance_,
      PBG2CAnswerQuestion_QuestionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAnswerQuestion_QuestionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAnswerQuestion_QuestionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CAnswerQuestion_QuestionInfo));
  PBG2CAnswerQuestion_QuestionResult_descriptor_ = file->message_type(336);
  static const int PBG2CAnswerQuestion_QuestionResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAnswerQuestion_QuestionResult, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAnswerQuestion_QuestionResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAnswerQuestion_QuestionResult, right_),
  };
  PBG2CAnswerQuestion_QuestionResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CAnswerQuestion_QuestionResult_descriptor_,
      PBG2CAnswerQuestion_QuestionResult::default_instance_,
      PBG2CAnswerQuestion_QuestionResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAnswerQuestion_QuestionResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CAnswerQuestion_QuestionResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CAnswerQuestion_QuestionResult));
  PBGreatWallTrainInfoAck_descriptor_ = file->message_type(337);
  static const int PBGreatWallTrainInfoAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGreatWallTrainInfoAck, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGreatWallTrainInfoAck, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGreatWallTrainInfoAck, time_),
  };
  PBGreatWallTrainInfoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGreatWallTrainInfoAck_descriptor_,
      PBGreatWallTrainInfoAck::default_instance_,
      PBGreatWallTrainInfoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGreatWallTrainInfoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGreatWallTrainInfoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGreatWallTrainInfoAck));
  PBC2SWorldBossGetInfoAsk_descriptor_ = file->message_type(338);
  static const int PBC2SWorldBossGetInfoAsk_offsets_[1] = {
  };
  PBC2SWorldBossGetInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWorldBossGetInfoAsk_descriptor_,
      PBC2SWorldBossGetInfoAsk::default_instance_,
      PBC2SWorldBossGetInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWorldBossGetInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWorldBossGetInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWorldBossGetInfoAsk));
  PBWorldBossInfo_descriptor_ = file->message_type(339);
  static const int PBWorldBossInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossInfo, bossactivityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossInfo, bossstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossInfo, lastwinner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossInfo, nextstartcd_),
  };
  PBWorldBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldBossInfo_descriptor_,
      PBWorldBossInfo::default_instance_,
      PBWorldBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldBossInfo));
  PBWorldBossGetInfoAck_descriptor_ = file->message_type(340);
  static const int PBWorldBossGetInfoAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossGetInfoAck, worldboss_),
  };
  PBWorldBossGetInfoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldBossGetInfoAck_descriptor_,
      PBWorldBossGetInfoAck::default_instance_,
      PBWorldBossGetInfoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossGetInfoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossGetInfoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldBossGetInfoAck));
  PBC2SWorldBossUpdateBossHurtRankAsk_descriptor_ = file->message_type(341);
  static const int PBC2SWorldBossUpdateBossHurtRankAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWorldBossUpdateBossHurtRankAsk, bossactivityid_),
  };
  PBC2SWorldBossUpdateBossHurtRankAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWorldBossUpdateBossHurtRankAsk_descriptor_,
      PBC2SWorldBossUpdateBossHurtRankAsk::default_instance_,
      PBC2SWorldBossUpdateBossHurtRankAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWorldBossUpdateBossHurtRankAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWorldBossUpdateBossHurtRankAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWorldBossUpdateBossHurtRankAsk));
  PBWorldBossUpdateBossHurtRankAck_descriptor_ = file->message_type(342);
  static const int PBWorldBossUpdateBossHurtRankAck_offsets_[1] = {
  };
  PBWorldBossUpdateBossHurtRankAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldBossUpdateBossHurtRankAck_descriptor_,
      PBWorldBossUpdateBossHurtRankAck::default_instance_,
      PBWorldBossUpdateBossHurtRankAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossUpdateBossHurtRankAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossUpdateBossHurtRankAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldBossUpdateBossHurtRankAck));
  PBBossHurtRank_descriptor_ = file->message_type(343);
  static const int PBBossHurtRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBossHurtRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBossHurtRank, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBossHurtRank, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBossHurtRank, hurt_),
  };
  PBBossHurtRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBossHurtRank_descriptor_,
      PBBossHurtRank::default_instance_,
      PBBossHurtRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBossHurtRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBossHurtRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBossHurtRank));
  PBWorldBossUpdateBossHurtRankNtf_descriptor_ = file->message_type(344);
  static const int PBWorldBossUpdateBossHurtRankNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossUpdateBossHurtRankNtf, ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossUpdateBossHurtRankNtf, selfranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossUpdateBossHurtRankNtf, isclosed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossUpdateBossHurtRankNtf, bossactivityid_),
  };
  PBWorldBossUpdateBossHurtRankNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldBossUpdateBossHurtRankNtf_descriptor_,
      PBWorldBossUpdateBossHurtRankNtf::default_instance_,
      PBWorldBossUpdateBossHurtRankNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossUpdateBossHurtRankNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldBossUpdateBossHurtRankNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldBossUpdateBossHurtRankNtf));
  PBC2SWorldBossGotoBossAsk_descriptor_ = file->message_type(345);
  static const int PBC2SWorldBossGotoBossAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWorldBossGotoBossAsk, bossactivityid_),
  };
  PBC2SWorldBossGotoBossAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SWorldBossGotoBossAsk_descriptor_,
      PBC2SWorldBossGotoBossAsk::default_instance_,
      PBC2SWorldBossGotoBossAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWorldBossGotoBossAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SWorldBossGotoBossAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SWorldBossGotoBossAsk));
  PBS2CWorldBossGotoBossAck_descriptor_ = file->message_type(346);
  static const int PBS2CWorldBossGotoBossAck_offsets_[1] = {
  };
  PBS2CWorldBossGotoBossAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBS2CWorldBossGotoBossAck_descriptor_,
      PBS2CWorldBossGotoBossAck::default_instance_,
      PBS2CWorldBossGotoBossAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CWorldBossGotoBossAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBS2CWorldBossGotoBossAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBS2CWorldBossGotoBossAck));
  PBC2SActivityGetRewardAsk_descriptor_ = file->message_type(347);
  static const int PBC2SActivityGetRewardAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SActivityGetRewardAsk, id_),
  };
  PBC2SActivityGetRewardAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SActivityGetRewardAsk_descriptor_,
      PBC2SActivityGetRewardAsk::default_instance_,
      PBC2SActivityGetRewardAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SActivityGetRewardAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SActivityGetRewardAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SActivityGetRewardAsk));
  PBC2SActivityGetRewardAck_descriptor_ = file->message_type(348);
  static const int PBC2SActivityGetRewardAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SActivityGetRewardAck, id_),
  };
  PBC2SActivityGetRewardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SActivityGetRewardAck_descriptor_,
      PBC2SActivityGetRewardAck::default_instance_,
      PBC2SActivityGetRewardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SActivityGetRewardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SActivityGetRewardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SActivityGetRewardAck));
  PBC2SActivityAddLivenessAck_descriptor_ = file->message_type(349);
  static const int PBC2SActivityAddLivenessAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SActivityAddLivenessAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SActivityAddLivenessAck, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SActivityAddLivenessAck, liveness_),
  };
  PBC2SActivityAddLivenessAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2SActivityAddLivenessAck_descriptor_,
      PBC2SActivityAddLivenessAck::default_instance_,
      PBC2SActivityAddLivenessAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SActivityAddLivenessAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2SActivityAddLivenessAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2SActivityAddLivenessAck));
  PBC2GRelive_Born_descriptor_ = file->message_type(350);
  static const int PBC2GRelive_Born_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GRelive_Born, type_),
  };
  PBC2GRelive_Born_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GRelive_Born_descriptor_,
      PBC2GRelive_Born::default_instance_,
      PBC2GRelive_Born_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GRelive_Born, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GRelive_Born, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GRelive_Born));
  PBG2CCorpsInfoAck_descriptor_ = file->message_type(351);
  static const int PBG2CCorpsInfoAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCorpsInfoAck, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCorpsInfoAck, boomrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCorpsInfoAck, manorfactionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCorpsInfoAck, faciontcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCorpsInfoAck, membercount_),
  };
  PBG2CCorpsInfoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCorpsInfoAck_descriptor_,
      PBG2CCorpsInfoAck::default_instance_,
      PBG2CCorpsInfoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCorpsInfoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCorpsInfoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCorpsInfoAck));
  PBC2GCorpsSetDecAsk_descriptor_ = file->message_type(352);
  static const int PBC2GCorpsSetDecAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCorpsSetDecAsk, declaration_),
  };
  PBC2GCorpsSetDecAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCorpsSetDecAsk_descriptor_,
      PBC2GCorpsSetDecAsk::default_instance_,
      PBC2GCorpsSetDecAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCorpsSetDecAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCorpsSetDecAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCorpsSetDecAsk));
  PBG2CCorpsSetDecAck_descriptor_ = file->message_type(353);
  static const int PBG2CCorpsSetDecAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCorpsSetDecAck, declaration_),
  };
  PBG2CCorpsSetDecAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCorpsSetDecAck_descriptor_,
      PBG2CCorpsSetDecAck::default_instance_,
      PBG2CCorpsSetDecAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCorpsSetDecAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCorpsSetDecAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCorpsSetDecAck));
  PBC2GCorpsSetJobAsk_descriptor_ = file->message_type(354);
  static const int PBC2GCorpsSetJobAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCorpsSetJobAsk, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCorpsSetJobAsk, corpsjob_),
  };
  PBC2GCorpsSetJobAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCorpsSetJobAsk_descriptor_,
      PBC2GCorpsSetJobAsk::default_instance_,
      PBC2GCorpsSetJobAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCorpsSetJobAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCorpsSetJobAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCorpsSetJobAsk));
  PBG2CCorpsSetJobAck_descriptor_ = file->message_type(355);
  static const int PBG2CCorpsSetJobAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCorpsSetJobAck, memberinfo_),
  };
  PBG2CCorpsSetJobAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CCorpsSetJobAck_descriptor_,
      PBG2CCorpsSetJobAck::default_instance_,
      PBG2CCorpsSetJobAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCorpsSetJobAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CCorpsSetJobAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CCorpsSetJobAck));
  PBC2GCorpsForbitSpeakAsk_descriptor_ = file->message_type(356);
  static const int PBC2GCorpsForbitSpeakAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCorpsForbitSpeakAsk, playerid_),
  };
  PBC2GCorpsForbitSpeakAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GCorpsForbitSpeakAsk_descriptor_,
      PBC2GCorpsForbitSpeakAsk::default_instance_,
      PBC2GCorpsForbitSpeakAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCorpsForbitSpeakAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GCorpsForbitSpeakAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GCorpsForbitSpeakAsk));
  PBC2GWealLoginPrizeAsk_descriptor_ = file->message_type(357);
  static const int PBC2GWealLoginPrizeAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWealLoginPrizeAsk, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWealLoginPrizeAsk, day_),
  };
  PBC2GWealLoginPrizeAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GWealLoginPrizeAsk_descriptor_,
      PBC2GWealLoginPrizeAsk::default_instance_,
      PBC2GWealLoginPrizeAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWealLoginPrizeAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GWealLoginPrizeAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GWealLoginPrizeAsk));
  PBC2GManorGetAllInfoAsk_descriptor_ = file->message_type(358);
  static const int PBC2GManorGetAllInfoAsk_offsets_[1] = {
  };
  PBC2GManorGetAllInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GManorGetAllInfoAsk_descriptor_,
      PBC2GManorGetAllInfoAsk::default_instance_,
      PBC2GManorGetAllInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorGetAllInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorGetAllInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GManorGetAllInfoAsk));
  PBG2CManorGetAllInfoAck_descriptor_ = file->message_type(359);
  static const int PBG2CManorGetAllInfoAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetAllInfoAck, manors_),
  };
  PBG2CManorGetAllInfoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CManorGetAllInfoAck_descriptor_,
      PBG2CManorGetAllInfoAck::default_instance_,
      PBG2CManorGetAllInfoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetAllInfoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetAllInfoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CManorGetAllInfoAck));
  PBC2GManorGetFightInfoAsk_descriptor_ = file->message_type(360);
  static const int PBC2GManorGetFightInfoAsk_offsets_[1] = {
  };
  PBC2GManorGetFightInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GManorGetFightInfoAsk_descriptor_,
      PBC2GManorGetFightInfoAsk::default_instance_,
      PBC2GManorGetFightInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorGetFightInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorGetFightInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GManorGetFightInfoAsk));
  PBG2CManorGetFightInfoAck_descriptor_ = file->message_type(361);
  static const int PBG2CManorGetFightInfoAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetFightInfoAck, manor_),
  };
  PBG2CManorGetFightInfoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CManorGetFightInfoAck_descriptor_,
      PBG2CManorGetFightInfoAck::default_instance_,
      PBG2CManorGetFightInfoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetFightInfoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetFightInfoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CManorGetFightInfoAck));
  PBC2GManorApplyFightAsk_descriptor_ = file->message_type(362);
  static const int PBC2GManorApplyFightAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorApplyFightAsk, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorApplyFightAsk, iscancel_),
  };
  PBC2GManorApplyFightAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GManorApplyFightAsk_descriptor_,
      PBC2GManorApplyFightAsk::default_instance_,
      PBC2GManorApplyFightAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorApplyFightAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorApplyFightAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GManorApplyFightAsk));
  PBG2CManorApplyFightAck_descriptor_ = file->message_type(363);
  static const int PBG2CManorApplyFightAck_offsets_[1] = {
  };
  PBG2CManorApplyFightAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CManorApplyFightAck_descriptor_,
      PBG2CManorApplyFightAck::default_instance_,
      PBG2CManorApplyFightAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorApplyFightAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorApplyFightAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CManorApplyFightAck));
  PBC2GManorEnterLobbyAsk_descriptor_ = file->message_type(364);
  static const int PBC2GManorEnterLobbyAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorEnterLobbyAsk, manorid_),
  };
  PBC2GManorEnterLobbyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GManorEnterLobbyAsk_descriptor_,
      PBC2GManorEnterLobbyAsk::default_instance_,
      PBC2GManorEnterLobbyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorEnterLobbyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorEnterLobbyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GManorEnterLobbyAsk));
  PBG2CManorEnterLobbyAck_descriptor_ = file->message_type(365);
  static const int PBG2CManorEnterLobbyAck_offsets_[1] = {
  };
  PBG2CManorEnterLobbyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CManorEnterLobbyAck_descriptor_,
      PBG2CManorEnterLobbyAck::default_instance_,
      PBG2CManorEnterLobbyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorEnterLobbyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorEnterLobbyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CManorEnterLobbyAck));
  PBG2CManorStartFightNtf_descriptor_ = file->message_type(366);
  static const int PBG2CManorStartFightNtf_offsets_[1] = {
  };
  PBG2CManorStartFightNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CManorStartFightNtf_descriptor_,
      PBG2CManorStartFightNtf::default_instance_,
      PBG2CManorStartFightNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorStartFightNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorStartFightNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CManorStartFightNtf));
  PBC2GManorMVPVoteAsk_descriptor_ = file->message_type(367);
  static const int PBC2GManorMVPVoteAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorMVPVoteAsk, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorMVPVoteAsk, manorid_),
  };
  PBC2GManorMVPVoteAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GManorMVPVoteAsk_descriptor_,
      PBC2GManorMVPVoteAsk::default_instance_,
      PBC2GManorMVPVoteAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorMVPVoteAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorMVPVoteAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GManorMVPVoteAsk));
  PBG2CManorMvpVoteAck_descriptor_ = file->message_type(368);
  static const int PBG2CManorMvpVoteAck_offsets_[1] = {
  };
  PBG2CManorMvpVoteAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CManorMvpVoteAck_descriptor_,
      PBG2CManorMvpVoteAck::default_instance_,
      PBG2CManorMvpVoteAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorMvpVoteAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorMvpVoteAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CManorMvpVoteAck));
  PBG2CManorMVPVoteNtf_descriptor_ = file->message_type(369);
  static const int PBG2CManorMVPVoteNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorMVPVoteNtf, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorMVPVoteNtf, votecount_),
  };
  PBG2CManorMVPVoteNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CManorMVPVoteNtf_descriptor_,
      PBG2CManorMVPVoteNtf::default_instance_,
      PBG2CManorMVPVoteNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorMVPVoteNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorMVPVoteNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CManorMVPVoteNtf));
  PBC2GManorGetScoresAsk_descriptor_ = file->message_type(370);
  static const int PBC2GManorGetScoresAsk_offsets_[1] = {
  };
  PBC2GManorGetScoresAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GManorGetScoresAsk_descriptor_,
      PBC2GManorGetScoresAsk::default_instance_,
      PBC2GManorGetScoresAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorGetScoresAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorGetScoresAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GManorGetScoresAsk));
  PBC2GManorGetPlayerScoresAsk_descriptor_ = file->message_type(371);
  static const int PBC2GManorGetPlayerScoresAsk_offsets_[1] = {
  };
  PBC2GManorGetPlayerScoresAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBC2GManorGetPlayerScoresAsk_descriptor_,
      PBC2GManorGetPlayerScoresAsk::default_instance_,
      PBC2GManorGetPlayerScoresAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorGetPlayerScoresAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBC2GManorGetPlayerScoresAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBC2GManorGetPlayerScoresAsk));
  PBManorBattleFieldScore_descriptor_ = file->message_type(372);
  static const int PBManorBattleFieldScore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldScore, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldScore, defenderscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldScore, challengerscore_),
  };
  PBManorBattleFieldScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBManorBattleFieldScore_descriptor_,
      PBManorBattleFieldScore::default_instance_,
      PBManorBattleFieldScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorBattleFieldScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBManorBattleFieldScore));
  PBG2CManorGetScoresAck_descriptor_ = file->message_type(373);
  static const int PBG2CManorGetScoresAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetScoresAck, winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetScoresAck, loser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetScoresAck, winnerscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetScoresAck, loserscore_),
  };
  PBG2CManorGetScoresAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CManorGetScoresAck_descriptor_,
      PBG2CManorGetScoresAck::default_instance_,
      PBG2CManorGetScoresAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetScoresAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetScoresAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CManorGetScoresAck));
  PBG2CManorGetPlayerScoresAck_descriptor_ = file->message_type(374);
  static const int PBG2CManorGetPlayerScoresAck_offsets_[1] = {
  };
  PBG2CManorGetPlayerScoresAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CManorGetPlayerScoresAck_descriptor_,
      PBG2CManorGetPlayerScoresAck::default_instance_,
      PBG2CManorGetPlayerScoresAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetPlayerScoresAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorGetPlayerScoresAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CManorGetPlayerScoresAck));
  PBManorMVP_descriptor_ = file->message_type(375);
  static const int PBManorMVP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorMVP, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorMVP, getvote_),
  };
  PBManorMVP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBManorMVP_descriptor_,
      PBManorMVP::default_instance_,
      PBManorMVP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorMVP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBManorMVP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBManorMVP));
  PBG2CManorResultNtf_descriptor_ = file->message_type(376);
  static const int PBG2CManorResultNtf_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorResultNtf, defender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorResultNtf, challenger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorResultNtf, best_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorResultNtf, kda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorResultNtf, killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorResultNtf, shielder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorResultNtf, scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorResultNtf, playerscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorResultNtf, winnerfactionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorResultNtf, manorid_),
  };
  PBG2CManorResultNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBG2CManorResultNtf_descriptor_,
      PBG2CManorResultNtf::default_instance_,
      PBG2CManorResultNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorResultNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBG2CManorResultNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBG2CManorResultNtf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CASMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLoginAsk_descriptor_, &PBLoginAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCheckPlayerNameAsk_descriptor_, &PBCheckPlayerNameAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCreatePlayerAsk_descriptor_, &PBCreatePlayerAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDelPlayerAsk_descriptor_, &PBDelPlayerAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSelectPlayerAsk_descriptor_, &PBSelectPlayerAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLoginAck_descriptor_, &PBLoginAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAccountLoadAck_descriptor_, &PBAccountLoadAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerNameAck_descriptor_, &PBPlayerNameAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCreatePlayerAck_descriptor_, &PBCreatePlayerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDelPlayerAck_descriptor_, &PBDelPlayerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSelectPlayerAck_descriptor_, &PBSelectPlayerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GLoginAsk_descriptor_, &PBC2GLoginAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CLoginAck_descriptor_, &PBG2CLoginAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GGMCmdTxtCmd_descriptor_, &PBC2GGMCmdTxtCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CGMCmdTxtCmd_descriptor_, &PBG2CGMCmdTxtCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSceneFlySameGameSvr_descriptor_, &PBG2CSceneFlySameGameSvr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSceneFlyJumpGameSvr_descriptor_, &PBG2CSceneFlyJumpGameSvr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommonUnitRemove_descriptor_, &PBG2CCommonUnitRemove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommonMove_descriptor_, &PBC2GCommonMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GUseSkill_descriptor_, &PBC2GUseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GSkillBreak_descriptor_, &PBC2GSkillBreak::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SSkillUseCharge_descriptor_, &PBC2SSkillUseCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GSkillUpgrade_descriptor_, &PBC2GSkillUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GSkillAdd_descriptor_, &PBC2GSkillAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSkillBreak_descriptor_, &PBG2CSkillBreak::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CUseSkill_descriptor_, &PBG2CUseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CAddSkill_descriptor_, &PBG2CAddSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CDelSkill_descriptor_, &PBG2CDelSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CUpCoolTime_descriptor_, &PBG2CUpCoolTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CUpgradeSkill_descriptor_, &PBG2CUpgradeSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSkillNotice_descriptor_, &PBG2CSkillNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSkillDamage_descriptor_, &PBG2CSkillDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CSkillEffect_descriptor_, &PBS2CSkillEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CSkillEffectBroad_descriptor_, &PBS2CSkillEffectBroad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSkillUseCharge_descriptor_, &PBG2CSkillUseCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CSkillEnemyList_descriptor_, &PBS2CSkillEnemyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GDelBuff_descriptor_, &PBC2GDelBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CAddBuff_descriptor_, &PBG2CAddBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CAddMoveBuff_descriptor_, &PBG2CAddMoveBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CDelBuff_descriptor_, &PBG2CDelBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CUpdateBuffTick_descriptor_, &PBG2CUpdateBuffTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCounter_descriptor_, &PBG2CCounter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GGetClientData_descriptor_, &PBC2GGetClientData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CGetClientData_descriptor_, &PBG2CGetClientData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CClientDataOver_descriptor_, &PBG2CClientDataOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMailID_descriptor_, &PBMailID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRewardMail_descriptor_, &PBRewardMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GDelItem_descriptor_, &PBC2GDelItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CDelItem_descriptor_, &PBG2CDelItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GUseItem_descriptor_, &PBC2GUseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CUseItem_descriptor_, &PBG2CUseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GEquipItem_descriptor_, &PBC2GEquipItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CEquipItem_descriptor_, &PBG2CEquipItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GSellItem_descriptor_, &PBC2GSellItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSellItem_descriptor_, &PBG2CSellItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GBuyBackItem_descriptor_, &PBC2GBuyBackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CBuyBackItem_descriptor_, &PBG2CBuyBackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CUpdateItem_descriptor_, &PBG2CUpdateItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GSplitItem_descriptor_, &PBC2GSplitItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSplitItem_descriptor_, &PBG2CSplitItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GSortItem_descriptor_, &PBC2GSortItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSortItem_descriptor_, &PBG2CSortItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CNewItem_descriptor_, &PBG2CNewItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GEquipColumnEnhance_descriptor_, &PBC2GEquipColumnEnhance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CEquipColumnEnhance_descriptor_, &PBG2CEquipColumnEnhance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GEquipColumnForge_descriptor_, &PBC2GEquipColumnForge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CEquipColumnForge_descriptor_, &PBG2CEquipColumnForge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GEquipEnhance_descriptor_, &PBC2GEquipEnhance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CEquipEnhance_descriptor_, &PBG2CEquipEnhance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GEquipForge_descriptor_, &PBC2GEquipForge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CEquipForge_descriptor_, &PBG2CEquipForge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GEquipInherit_descriptor_, &PBC2GEquipInherit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CEquipInherit_descriptor_, &PBG2CEquipInherit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GEquipMake_descriptor_, &PBC2GEquipMake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CEquipMake_descriptor_, &PBG2CEquipMake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GMounting_descriptor_, &PBC2GMounting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CMounting_descriptor_, &PBG2CMounting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GItemCompoundAsk_descriptor_, &PBC2GItemCompoundAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GItemOpenEquipMakeDlgAsk_descriptor_, &PBC2GItemOpenEquipMakeDlgAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CItemCompoundAck_descriptor_, &PBG2CItemCompoundAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CItemOpenEquipMakeDlgAck_descriptor_, &PBG2CItemOpenEquipMakeDlgAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GItemOpenEquipMakeOEMDlgAsk_descriptor_, &PBC2GItemOpenEquipMakeOEMDlgAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GItemCommitEquipMakeOEMAsk_descriptor_, &PBC2GItemCommitEquipMakeOEMAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GItemVisitEquipMakeOEMAsk_descriptor_, &PBC2GItemVisitEquipMakeOEMAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CItemOpenEquipMakeOEMDlgAck_descriptor_, &PBG2CItemOpenEquipMakeOEMDlgAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CItemCommitEquipMakeOEMAck_descriptor_, &PBG2CItemCommitEquipMakeOEMAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CItemVisitEquipMakeOEMAck_descriptor_, &PBG2CItemVisitEquipMakeOEMAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GItemEquipMakeOEMAsk_descriptor_, &PBC2GItemEquipMakeOEMAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CItemEquipMakeOEMAck_descriptor_, &PBG2CItemEquipMakeOEMAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GItemEquipChangeOEMFeeAsk_descriptor_, &PBC2GItemEquipChangeOEMFeeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CItemEquipChangeOEMFeeAck_descriptor_, &PBG2CItemEquipChangeOEMFeeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GQuestAccept_descriptor_, &PBC2GQuestAccept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CQuestAccept_descriptor_, &PBG2CQuestAccept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GQuestComplete_descriptor_, &PBC2GQuestComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CQuestComplete_descriptor_, &PBG2CQuestComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GQuestUpdateItem_descriptor_, &PBC2GQuestUpdateItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CQuestUpdateItem_descriptor_, &PBG2CQuestUpdateItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GQuestGiveUp_descriptor_, &PBC2GQuestGiveUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CQuestGiveUp_descriptor_, &PBG2CQuestGiveUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GStoreBuy_descriptor_, &PBC2GStoreBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CStoreBuy_descriptor_, &PBG2CStoreBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CExpendSyn_descriptor_, &PBG2CExpendSyn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CAddHp_descriptor_, &PBG2CAddHp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CAddExp_descriptor_, &PBG2CAddExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CClearData_descriptor_, &PBG2CClearData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CAddLevel_descriptor_, &PBG2CAddLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GPrizeAccept_descriptor_, &PBC2GPrizeAccept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GPrizeAbandon_descriptor_, &PBC2GPrizeAbandon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CPrizeNew_descriptor_, &PBG2CPrizeNew::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTrade_apply_descriptor_, &PBC2GTrade_apply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTrade_answer_descriptor_, &PBC2GTrade_answer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTrade_addItem_descriptor_, &PBC2GTrade_addItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTrade_delItem_descriptor_, &PBC2GTrade_delItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTrade_setMoney_descriptor_, &PBC2GTrade_setMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTrade_begin_descriptor_, &PBG2CTrade_begin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTrade_end_descriptor_, &PBG2CTrade_end::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTrade_addItem_descriptor_, &PBG2CTrade_addItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTrade_delItem_descriptor_, &PBG2CTrade_delItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTrade_setMoney_descriptor_, &PBG2CTrade_setMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTrade_lock_descriptor_, &PBG2CTrade_lock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTrade_unlock_descriptor_, &PBG2CTrade_unlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTrade_confirm_descriptor_, &PBG2CTrade_confirm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTrade_applyTrasfer_descriptor_, &PBG2CTrade_applyTrasfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTrade_answerTrasfer_descriptor_, &PBG2CTrade_answerTrasfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSaleMoney_tradelog_descriptor_, &PBG2CSaleMoney_tradelog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GSaleMoney_sale_descriptor_, &PBC2GSaleMoney_sale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GSaleMoney_salecancel_descriptor_, &PBC2GSaleMoney_salecancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSaleMoney_ListInfo_descriptor_, &PBG2CSaleMoney_ListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSaleMoney_list_descriptor_, &PBG2CSaleMoney_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFindPlayer_descriptor_, &PBC2GFindPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFindPlayer_descriptor_, &PBG2CFindPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GAuction_sale_descriptor_, &PBC2GAuction_sale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GAuction_salecancel_descriptor_, &PBC2GAuction_salecancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GAuction_buy_descriptor_, &PBC2GAuction_buy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAuctionFilterItemType_descriptor_, &PBAuctionFilterItemType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GAuction_list_descriptor_, &PBC2GAuction_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GAuction_ave_descriptor_, &PBC2GAuction_ave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CAuction_list_descriptor_, &PBG2CAuction_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CAuction_ave_descriptor_, &PBG2CAuction_ave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTopListList_descriptor_, &PBC2GTopListList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTopListOne_descriptor_, &PBC2GTopListOne::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTopListSetClearTime_descriptor_, &PBC2GTopListSetClearTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTopListDetail_descriptor_, &PBTopListDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CTopListList_descriptor_, &PBS2CTopListList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CTopListOne_descriptor_, &PBS2CTopListOne::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFriend_AddAsk_descriptor_, &PBC2GFriend_AddAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFriend_DelAsk_descriptor_, &PBC2GFriend_DelAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFriend_Answer_descriptor_, &PBC2GFriend_Answer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFriend_Find_descriptor_, &PBC2GFriend_Find::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFriendFindInfo_descriptor_, &PBFriendFindInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFriend_Find_descriptor_, &PBG2CFriend_Find::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFriend_AddAskTrasfer_descriptor_, &PBG2CFriend_AddAskTrasfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFriend_Info_descriptor_, &PBG2CFriend_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommon_PKType_descriptor_, &PBC2GCommon_PKType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_PKType_descriptor_, &PBG2CCommon_PKType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommonForbitSpeakAsk_descriptor_, &PBC2GCommonForbitSpeakAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommonStrongerReWard_descriptor_, &PBC2GCommonStrongerReWard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommonSubFightPower_descriptor_, &PBC2GCommonSubFightPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCopymapUnactive_descriptor_, &PBC2GCopymapUnactive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2Relive_SceneBorn_descriptor_, &PBG2Relive_SceneBorn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_TimeEvent_descriptor_, &PBG2CCommon_TimeEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWenTao_SetBingFa_descriptor_, &PBC2SWenTao_SetBingFa::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWenTao_SetScheme_descriptor_, &PBC2SWenTao_SetScheme::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWenTao_QianXiu_descriptor_, &PBC2SWenTao_QianXiu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWenTao_TuPo_descriptor_, &PBC2SWenTao_TuPo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWenTao_Upgrate_descriptor_, &PBC2SWenTao_Upgrate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWenTao_SetBingfu_descriptor_, &PBC2SWenTao_SetBingfu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWenTao_Reset_descriptor_, &PBC2SWenTao_Reset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWenTao_ActiveScheme_descriptor_, &PBC2SWenTao_ActiveScheme::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWenTao_ActiveBingFa_descriptor_, &PBC2SWenTao_ActiveBingFa::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWenTao_QianXiuUpdate_descriptor_, &PBC2SWenTao_QianXiuUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWenTao_TuPoUpdate_descriptor_, &PBC2SWenTao_TuPoUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWenTao_YaoDianUpdate_descriptor_, &PBC2SWenTao_YaoDianUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWenTao_WisdomUpdate_descriptor_, &PBC2SWenTao_WisdomUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GWulueSetSchemeAsk_descriptor_, &PBC2GWulueSetSchemeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GWulueUpZhanlueAsk_descriptor_, &PBC2GWulueUpZhanlueAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GWulueSetBingfuAsk_descriptor_, &PBC2GWulueSetBingfuAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CWulueSetSchemeAck_descriptor_, &PBG2CWulueSetSchemeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CWulueUpZhanlueAck_descriptor_, &PBG2CWulueUpZhanlueAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CWulueSetBingfuAck_descriptor_, &PBG2CWulueSetBingfuAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GBingfuUpgradeAsk_descriptor_, &PBC2GBingfuUpgradeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GBingfuUpOneLevelAsk_descriptor_, &PBC2GBingfuUpOneLevelAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GBingfuSplitAsk_descriptor_, &PBC2GBingfuSplitAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CBingfuUpgradeAck_descriptor_, &PBG2CBingfuUpgradeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2DropItem_InfoAsk_descriptor_, &PBC2DropItem_InfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2DropItem_DiceAsk_descriptor_, &PBC2DropItem_DiceAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2DropItem_PickAllAsk_descriptor_, &PBC2DropItem_PickAllAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2DropItem_PickupAsk_descriptor_, &PBC2DropItem_PickupAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2DropItem_AbadonAsk_descriptor_, &PBC2DropItem_AbadonAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2DropItem_AssignAsk_descriptor_, &PBC2DropItem_AssignAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDropItem_DiceInfo_descriptor_, &PBDropItem_DiceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDropItem_DropCell_descriptor_, &PBDropItem_DropCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2DropItem_Info_descriptor_, &PBC2DropItem_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2DropItem_Dice_descriptor_, &PBC2DropItem_Dice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2DropItem_Assign_descriptor_, &PBC2DropItem_Assign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2DropItem_ChangeAllot_descriptor_, &PBC2DropItem_ChangeAllot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommon_PlaneEnter_descriptor_, &PBC2GCommon_PlaneEnter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommon_PlaneLeave_descriptor_, &PBC2GCommon_PlaneLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommon_RegionTriggerPlane_descriptor_, &PBC2GCommon_RegionTriggerPlane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2GCommon_TakeASeatAck_descriptor_, &PBS2GCommon_TakeASeatAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_PlaneUpdate_descriptor_, &PBG2CCommon_PlaneUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCopymapCreate_descriptor_, &PBC2GCopymapCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCopymapEnterNpc_descriptor_, &PBC2GCopymapEnterNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCopymapExit_descriptor_, &PBC2GCopymapExit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCopymapInvite_descriptor_, &PBC2GCopymapInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapInviteTransfer_descriptor_, &PBG2CCopymapInviteTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCopymapAcceptInvite_descriptor_, &PBC2GCopymapAcceptInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapState_descriptor_, &PBG2CCopymapState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CReadyStart_descriptor_, &PBG2CReadyStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapCloseTip_descriptor_, &PBG2CCopymapCloseTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapFindAttackMonster_descriptor_, &PBG2CCopymapFindAttackMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapQuestTarget_descriptor_, &PBG2CCopymapQuestTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapQuest_descriptor_, &PBG2CCopymapQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapChangeQuest_descriptor_, &PBG2CCopymapChangeQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapHurtInfo_descriptor_, &PBG2CCopymapHurtInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCopymapGuardInfo_descriptor_, &PBCopymapGuardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapSysGuardHp_descriptor_, &PBG2CCopymapSysGuardHp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CPoemActivePos_descriptor_, &PBG2CPoemActivePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CLiangyiNum_descriptor_, &PBG2CLiangyiNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapWave_descriptor_, &PBG2CCopymapWave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CSixiangMonster_descriptor_, &PBG2CSixiangMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapAssistCount_descriptor_, &PBG2CCopymapAssistCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapEnterInfo_descriptor_, &PBG2CCopymapEnterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCopymapTeamMemberInfo_descriptor_, &PBC2GCopymapTeamMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapTeamMember_descriptor_, &PBG2CCopymapTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapTeamMemberInfo_descriptor_, &PBG2CCopymapTeamMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBManorLineUpInfo_descriptor_, &PBManorLineUpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapManorLobbyLineupNtf_descriptor_, &PBG2CCopymapManorLobbyLineupNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapManorBattleFieldShenfuNtf_descriptor_, &PBG2CCopymapManorBattleFieldShenfuNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBManorBattleFieldComrades_descriptor_, &PBManorBattleFieldComrades::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapManorBattleFieldComradesNtf_descriptor_, &PBG2CCopymapManorBattleFieldComradesNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFactionScore_descriptor_, &PBFactionScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapManorBattleFieldTotalScoreNtf_descriptor_, &PBG2CCopymapManorBattleFieldTotalScoreNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCopymapManorBroadCastPromptNtf_descriptor_, &PBG2CCopymapManorBroadCastPromptNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_BossInfo_descriptor_, &PBG2CCommon_BossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_BossList_descriptor_, &PBG2CCommon_BossList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommon_FlyAsk_descriptor_, &PBC2GCommon_FlyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_FlyAck_descriptor_, &PBG2CCommon_FlyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommon_TaskFlyAsk_descriptor_, &PBC2GCommon_TaskFlyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_TaskFlyAck_descriptor_, &PBG2CCommon_TaskFlyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_DazuoguajiTotalNtf_descriptor_, &PBG2CCommon_DazuoguajiTotalNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CUpBingfuExp_descriptor_, &PBG2CUpBingfuExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommonTreasurePrize_descriptor_, &PBG2CCommonTreasurePrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommonSetCorpsJob_descriptor_, &PBG2CCommonSetCorpsJob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommonStrongerReWard_descriptor_, &PBG2CCommonStrongerReWard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFightPower_descriptor_, &PBG2CFightPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommonSubFightPower_descriptor_, &PBG2CCommonSubFightPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_SystemSwitchAck_descriptor_, &PBG2CCommon_SystemSwitchAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommonPromotion_descriptor_, &PBC2GCommonPromotion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_Promotion_descriptor_, &PBG2CCommon_Promotion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GIdentityOpenAsk_descriptor_, &PBC2GIdentityOpenAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CIdentityOpenAck_descriptor_, &PBG2CIdentityOpenAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GIdentityLearnAsk_descriptor_, &PBC2GIdentityLearnAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CIdentityLearnAck_descriptor_, &PBG2CIdentityLearnAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GIdentityResetAsk_descriptor_, &PBC2GIdentityResetAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CIdentityResetAck_descriptor_, &PBG2CIdentityResetAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GIdentityUpSkillAsk_descriptor_, &PBC2GIdentityUpSkillAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CIdentityUpSkillAck_descriptor_, &PBG2CIdentityUpSkillAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GWuxueNewAsk_descriptor_, &PBC2GWuxueNewAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CWuxueNewAck_descriptor_, &PBG2CWuxueNewAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GWuxueDelAsk_descriptor_, &PBC2GWuxueDelAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CWuxueDelAck_descriptor_, &PBG2CWuxueDelAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GWuxueChangeAsk_descriptor_, &PBC2GWuxueChangeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CWuxueChangeAck_descriptor_, &PBG2CWuxueChangeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GWuxueSetSkillAsk_descriptor_, &PBC2GWuxueSetSkillAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CWuxueSetSkillAck_descriptor_, &PBG2CWuxueSetSkillAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GWuxueSetAllSkillAsk_descriptor_, &PBC2GWuxueSetAllSkillAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CWuxueSetAllSkillAck_descriptor_, &PBG2CWuxueSetAllSkillAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GWuxueLearnSkillAsk_descriptor_, &PBC2GWuxueLearnSkillAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CWuxueLearnSkillAck_descriptor_, &PBG2CWuxueLearnSkillAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommon_SearchPlayer_descriptor_, &PBC2GCommon_SearchPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_SearchPlayer_descriptor_, &PBG2CCommon_SearchPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_MonsterTalk_descriptor_, &PBG2CCommon_MonsterTalk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_BeFindNotice_descriptor_, &PBG2CCommon_BeFindNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommon_NpcDialogComplete_descriptor_, &PBC2GCommon_NpcDialogComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommon_UnActiveMonster_descriptor_, &PBC2GCommon_UnActiveMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_SetPosition_descriptor_, &PBG2CCommon_SetPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_DayCopymapCount_descriptor_, &PBG2CCommon_DayCopymapCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCommonGetBattleAttrDetailAsk_descriptor_, &PBC2GCommonGetBattleAttrDetailAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCommon_TakeASeatAsk_descriptor_, &PBG2CCommon_TakeASeatAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SDartCheckAsk_descriptor_, &PBC2SDartCheckAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDartMemberResourceInfo_descriptor_, &PBDartMemberResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartCheckAck_descriptor_, &PBS2CDartCheckAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SDartStartAsk_descriptor_, &PBC2SDartStartAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SDartQuitAsk_descriptor_, &PBC2SDartQuitAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDartInfo_descriptor_, &PBDartInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartStartAck_descriptor_, &PBS2CDartStartAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartInfoNtf_descriptor_, &PBS2CDartInfoNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartCheckPauseNtf_descriptor_, &PBS2CDartCheckPauseNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SDartCheckConfirmAsk_descriptor_, &PBC2SDartCheckConfirmAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SDartCheckGetBuffAsk_descriptor_, &PBC2SDartCheckGetBuffAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartStartMoveNtf_descriptor_, &PBS2CDartStartMoveNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartStartRobNtf_descriptor_, &PBS2CDartStartRobNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartFinishAndPrizeNtf_descriptor_, &PBS2CDartFinishAndPrizeNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartCheckGetBuffAck_descriptor_, &PBS2CDartCheckGetBuffAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SDartAddSupplyAsk_descriptor_, &PBC2SDartAddSupplyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SDartAddSupplyConfirmAsk_descriptor_, &PBC2SDartAddSupplyConfirmAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartFinishRobNtf_descriptor_, &PBS2CDartFinishRobNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDartAddSupplyInfo_descriptor_, &PBDartAddSupplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartAddSupplyNtf_descriptor_, &PBS2CDartAddSupplyNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartAddSupplyAck_descriptor_, &PBS2CDartAddSupplyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartQuitAck_descriptor_, &PBS2CDartQuitAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartCheckConfirmAck_descriptor_, &PBS2CDartCheckConfirmAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartAddSupplyConfirmAck_descriptor_, &PBS2CDartAddSupplyConfirmAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SDartBack2NpcAsk_descriptor_, &PBC2SDartBack2NpcAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CDartBack2NpcAck_descriptor_, &PBS2CDartBack2NpcAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionBossTopAsk_descriptor_, &PBC2GFactionBossTopAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionBossPersonalTopAck_descriptor_, &PBC2GFactionBossPersonalTopAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionBossFactionTopAck_descriptor_, &PBC2GFactionBossFactionTopAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFactionBossUnionTopAck_descriptor_, &PBC2GFactionBossUnionTopAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CSceneAreaList_descriptor_, &PBS2CSceneAreaList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CQinggongStartNtf_descriptor_, &PBS2CQinggongStartNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleAttrDetail_descriptor_, &PBBattleAttrDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CGetBattleAttrDetailAck_descriptor_, &PBS2CGetBattleAttrDetailAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTitleEquipAsk_descriptor_, &PBC2GTitleEquipAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTitleEquipAck_descriptor_, &PBG2CTitleEquipAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GTitleUnEquipAsk_descriptor_, &PBC2GTitleUnEquipAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTitleUnEquipAck_descriptor_, &PBG2CTitleUnEquipAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTitleAddAck_descriptor_, &PBG2CTitleAddAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CTitleDelAck_descriptor_, &PBG2CTitleDelAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFashionEquipAsk_descriptor_, &PBC2GFashionEquipAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFashionEquipAck_descriptor_, &PBG2CFashionEquipAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GFashionUnEquipAsk_descriptor_, &PBC2GFashionUnEquipAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CFashionUnEquipAck_descriptor_, &PBG2CFashionUnEquipAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClimbTowerGetInfoAsk_descriptor_, &PBClimbTowerGetInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClimbTowerGetInfoAck_descriptor_, &PBClimbTowerGetInfoAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClimbTowerGetInfoNtf_descriptor_, &PBClimbTowerGetInfoNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClimbTowerPrize_descriptor_, &PBClimbTowerPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClimbTowerShowPrizeNtf_descriptor_, &PBClimbTowerShowPrizeNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClimbTowerChoosePrizeAsk_descriptor_, &PBClimbTowerChoosePrizeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClimbTowerChoosePrizeAck_descriptor_, &PBClimbTowerChoosePrizeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClimbTowerClearAsk_descriptor_, &PBClimbTowerClearAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClimbTowerClearAck_descriptor_, &PBClimbTowerClearAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBClimbTowerShowClearNtf_descriptor_, &PBClimbTowerShowClearNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GAnswerQuestion_Answer_descriptor_, &PBC2GAnswerQuestion_Answer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CAnswerQuestion_QuestionInfo_descriptor_, &PBG2CAnswerQuestion_QuestionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CAnswerQuestion_QuestionResult_descriptor_, &PBG2CAnswerQuestion_QuestionResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGreatWallTrainInfoAck_descriptor_, &PBGreatWallTrainInfoAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWorldBossGetInfoAsk_descriptor_, &PBC2SWorldBossGetInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldBossInfo_descriptor_, &PBWorldBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldBossGetInfoAck_descriptor_, &PBWorldBossGetInfoAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWorldBossUpdateBossHurtRankAsk_descriptor_, &PBC2SWorldBossUpdateBossHurtRankAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldBossUpdateBossHurtRankAck_descriptor_, &PBWorldBossUpdateBossHurtRankAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBossHurtRank_descriptor_, &PBBossHurtRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldBossUpdateBossHurtRankNtf_descriptor_, &PBWorldBossUpdateBossHurtRankNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SWorldBossGotoBossAsk_descriptor_, &PBC2SWorldBossGotoBossAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBS2CWorldBossGotoBossAck_descriptor_, &PBS2CWorldBossGotoBossAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SActivityGetRewardAsk_descriptor_, &PBC2SActivityGetRewardAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SActivityGetRewardAck_descriptor_, &PBC2SActivityGetRewardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2SActivityAddLivenessAck_descriptor_, &PBC2SActivityAddLivenessAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GRelive_Born_descriptor_, &PBC2GRelive_Born::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCorpsInfoAck_descriptor_, &PBG2CCorpsInfoAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCorpsSetDecAsk_descriptor_, &PBC2GCorpsSetDecAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCorpsSetDecAck_descriptor_, &PBG2CCorpsSetDecAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCorpsSetJobAsk_descriptor_, &PBC2GCorpsSetJobAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CCorpsSetJobAck_descriptor_, &PBG2CCorpsSetJobAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GCorpsForbitSpeakAsk_descriptor_, &PBC2GCorpsForbitSpeakAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GWealLoginPrizeAsk_descriptor_, &PBC2GWealLoginPrizeAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GManorGetAllInfoAsk_descriptor_, &PBC2GManorGetAllInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CManorGetAllInfoAck_descriptor_, &PBG2CManorGetAllInfoAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GManorGetFightInfoAsk_descriptor_, &PBC2GManorGetFightInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CManorGetFightInfoAck_descriptor_, &PBG2CManorGetFightInfoAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GManorApplyFightAsk_descriptor_, &PBC2GManorApplyFightAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CManorApplyFightAck_descriptor_, &PBG2CManorApplyFightAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GManorEnterLobbyAsk_descriptor_, &PBC2GManorEnterLobbyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CManorEnterLobbyAck_descriptor_, &PBG2CManorEnterLobbyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CManorStartFightNtf_descriptor_, &PBG2CManorStartFightNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GManorMVPVoteAsk_descriptor_, &PBC2GManorMVPVoteAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CManorMvpVoteAck_descriptor_, &PBG2CManorMvpVoteAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CManorMVPVoteNtf_descriptor_, &PBG2CManorMVPVoteNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GManorGetScoresAsk_descriptor_, &PBC2GManorGetScoresAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBC2GManorGetPlayerScoresAsk_descriptor_, &PBC2GManorGetPlayerScoresAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBManorBattleFieldScore_descriptor_, &PBManorBattleFieldScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CManorGetScoresAck_descriptor_, &PBG2CManorGetScoresAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CManorGetPlayerScoresAck_descriptor_, &PBG2CManorGetPlayerScoresAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBManorMVP_descriptor_, &PBManorMVP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBG2CManorResultNtf_descriptor_, &PBG2CManorResultNtf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CASMsg_2eproto() {
  delete PBLoginAsk::default_instance_;
  delete PBLoginAsk_reflection_;
  delete PBCheckPlayerNameAsk::default_instance_;
  delete PBCheckPlayerNameAsk_reflection_;
  delete PBCreatePlayerAsk::default_instance_;
  delete PBCreatePlayerAsk_reflection_;
  delete PBDelPlayerAsk::default_instance_;
  delete PBDelPlayerAsk_reflection_;
  delete PBSelectPlayerAsk::default_instance_;
  delete PBSelectPlayerAsk_reflection_;
  delete PBLoginAck::default_instance_;
  delete PBLoginAck_reflection_;
  delete PBAccountLoadAck::default_instance_;
  delete PBAccountLoadAck_reflection_;
  delete PBPlayerNameAck::default_instance_;
  delete PBPlayerNameAck_reflection_;
  delete PBCreatePlayerAck::default_instance_;
  delete PBCreatePlayerAck_reflection_;
  delete PBDelPlayerAck::default_instance_;
  delete PBDelPlayerAck_reflection_;
  delete PBSelectPlayerAck::default_instance_;
  delete PBSelectPlayerAck_reflection_;
  delete PBC2GLoginAsk::default_instance_;
  delete PBC2GLoginAsk_reflection_;
  delete PBG2CLoginAck::default_instance_;
  delete PBG2CLoginAck_reflection_;
  delete PBC2GGMCmdTxtCmd::default_instance_;
  delete PBC2GGMCmdTxtCmd_reflection_;
  delete PBG2CGMCmdTxtCmd::default_instance_;
  delete PBG2CGMCmdTxtCmd_reflection_;
  delete PBG2CSceneFlySameGameSvr::default_instance_;
  delete PBG2CSceneFlySameGameSvr_reflection_;
  delete PBG2CSceneFlyJumpGameSvr::default_instance_;
  delete PBG2CSceneFlyJumpGameSvr_reflection_;
  delete PBG2CCommonUnitRemove::default_instance_;
  delete PBG2CCommonUnitRemove_reflection_;
  delete PBC2GCommonMove::default_instance_;
  delete PBC2GCommonMove_reflection_;
  delete PBC2GUseSkill::default_instance_;
  delete PBC2GUseSkill_reflection_;
  delete PBC2GSkillBreak::default_instance_;
  delete PBC2GSkillBreak_reflection_;
  delete PBC2SSkillUseCharge::default_instance_;
  delete PBC2SSkillUseCharge_reflection_;
  delete PBC2GSkillUpgrade::default_instance_;
  delete PBC2GSkillUpgrade_reflection_;
  delete PBC2GSkillAdd::default_instance_;
  delete PBC2GSkillAdd_reflection_;
  delete PBG2CSkillBreak::default_instance_;
  delete PBG2CSkillBreak_reflection_;
  delete PBG2CUseSkill::default_instance_;
  delete PBG2CUseSkill_reflection_;
  delete PBG2CAddSkill::default_instance_;
  delete PBG2CAddSkill_reflection_;
  delete PBG2CDelSkill::default_instance_;
  delete PBG2CDelSkill_reflection_;
  delete PBG2CUpCoolTime::default_instance_;
  delete PBG2CUpCoolTime_reflection_;
  delete PBG2CUpgradeSkill::default_instance_;
  delete PBG2CUpgradeSkill_reflection_;
  delete PBG2CSkillNotice::default_instance_;
  delete PBG2CSkillNotice_reflection_;
  delete PBG2CSkillDamage::default_instance_;
  delete PBG2CSkillDamage_reflection_;
  delete PBS2CSkillEffect::default_instance_;
  delete PBS2CSkillEffect_reflection_;
  delete PBS2CSkillEffectBroad::default_instance_;
  delete PBS2CSkillEffectBroad_reflection_;
  delete PBG2CSkillUseCharge::default_instance_;
  delete PBG2CSkillUseCharge_reflection_;
  delete PBS2CSkillEnemyList::default_instance_;
  delete PBS2CSkillEnemyList_reflection_;
  delete PBC2GDelBuff::default_instance_;
  delete PBC2GDelBuff_reflection_;
  delete PBG2CAddBuff::default_instance_;
  delete PBG2CAddBuff_reflection_;
  delete PBG2CAddMoveBuff::default_instance_;
  delete PBG2CAddMoveBuff_reflection_;
  delete PBG2CDelBuff::default_instance_;
  delete PBG2CDelBuff_reflection_;
  delete PBG2CUpdateBuffTick::default_instance_;
  delete PBG2CUpdateBuffTick_reflection_;
  delete PBG2CCounter::default_instance_;
  delete PBG2CCounter_reflection_;
  delete PBC2GGetClientData::default_instance_;
  delete PBC2GGetClientData_reflection_;
  delete PBG2CGetClientData::default_instance_;
  delete PBG2CGetClientData_reflection_;
  delete PBG2CClientDataOver::default_instance_;
  delete PBG2CClientDataOver_reflection_;
  delete PBMailID::default_instance_;
  delete PBMailID_reflection_;
  delete PBRewardMail::default_instance_;
  delete PBRewardMail_reflection_;
  delete PBC2GDelItem::default_instance_;
  delete PBC2GDelItem_reflection_;
  delete PBG2CDelItem::default_instance_;
  delete PBG2CDelItem_reflection_;
  delete PBC2GUseItem::default_instance_;
  delete PBC2GUseItem_reflection_;
  delete PBG2CUseItem::default_instance_;
  delete PBG2CUseItem_reflection_;
  delete PBC2GEquipItem::default_instance_;
  delete PBC2GEquipItem_reflection_;
  delete PBG2CEquipItem::default_instance_;
  delete PBG2CEquipItem_reflection_;
  delete PBC2GSellItem::default_instance_;
  delete PBC2GSellItem_reflection_;
  delete PBG2CSellItem::default_instance_;
  delete PBG2CSellItem_reflection_;
  delete PBC2GBuyBackItem::default_instance_;
  delete PBC2GBuyBackItem_reflection_;
  delete PBG2CBuyBackItem::default_instance_;
  delete PBG2CBuyBackItem_reflection_;
  delete PBG2CUpdateItem::default_instance_;
  delete PBG2CUpdateItem_reflection_;
  delete PBC2GSplitItem::default_instance_;
  delete PBC2GSplitItem_reflection_;
  delete PBG2CSplitItem::default_instance_;
  delete PBG2CSplitItem_reflection_;
  delete PBC2GSortItem::default_instance_;
  delete PBC2GSortItem_reflection_;
  delete PBG2CSortItem::default_instance_;
  delete PBG2CSortItem_reflection_;
  delete PBG2CNewItem::default_instance_;
  delete PBG2CNewItem_reflection_;
  delete PBC2GEquipColumnEnhance::default_instance_;
  delete PBC2GEquipColumnEnhance_reflection_;
  delete PBG2CEquipColumnEnhance::default_instance_;
  delete PBG2CEquipColumnEnhance_reflection_;
  delete PBC2GEquipColumnForge::default_instance_;
  delete PBC2GEquipColumnForge_reflection_;
  delete PBG2CEquipColumnForge::default_instance_;
  delete PBG2CEquipColumnForge_reflection_;
  delete PBC2GEquipEnhance::default_instance_;
  delete PBC2GEquipEnhance_reflection_;
  delete PBG2CEquipEnhance::default_instance_;
  delete PBG2CEquipEnhance_reflection_;
  delete PBC2GEquipForge::default_instance_;
  delete PBC2GEquipForge_reflection_;
  delete PBG2CEquipForge::default_instance_;
  delete PBG2CEquipForge_reflection_;
  delete PBC2GEquipInherit::default_instance_;
  delete PBC2GEquipInherit_reflection_;
  delete PBG2CEquipInherit::default_instance_;
  delete PBG2CEquipInherit_reflection_;
  delete PBC2GEquipMake::default_instance_;
  delete PBC2GEquipMake_reflection_;
  delete PBG2CEquipMake::default_instance_;
  delete PBG2CEquipMake_reflection_;
  delete PBC2GMounting::default_instance_;
  delete PBC2GMounting_reflection_;
  delete PBG2CMounting::default_instance_;
  delete PBG2CMounting_reflection_;
  delete PBC2GItemCompoundAsk::default_instance_;
  delete PBC2GItemCompoundAsk_reflection_;
  delete PBC2GItemOpenEquipMakeDlgAsk::default_instance_;
  delete PBC2GItemOpenEquipMakeDlgAsk_reflection_;
  delete PBG2CItemCompoundAck::default_instance_;
  delete PBG2CItemCompoundAck_reflection_;
  delete PBG2CItemOpenEquipMakeDlgAck::default_instance_;
  delete PBG2CItemOpenEquipMakeDlgAck_reflection_;
  delete PBC2GItemOpenEquipMakeOEMDlgAsk::default_instance_;
  delete PBC2GItemOpenEquipMakeOEMDlgAsk_reflection_;
  delete PBC2GItemCommitEquipMakeOEMAsk::default_instance_;
  delete PBC2GItemCommitEquipMakeOEMAsk_reflection_;
  delete PBC2GItemVisitEquipMakeOEMAsk::default_instance_;
  delete PBC2GItemVisitEquipMakeOEMAsk_reflection_;
  delete PBG2CItemOpenEquipMakeOEMDlgAck::default_instance_;
  delete PBG2CItemOpenEquipMakeOEMDlgAck_reflection_;
  delete PBG2CItemCommitEquipMakeOEMAck::default_instance_;
  delete PBG2CItemCommitEquipMakeOEMAck_reflection_;
  delete PBG2CItemVisitEquipMakeOEMAck::default_instance_;
  delete PBG2CItemVisitEquipMakeOEMAck_reflection_;
  delete PBC2GItemEquipMakeOEMAsk::default_instance_;
  delete PBC2GItemEquipMakeOEMAsk_reflection_;
  delete PBG2CItemEquipMakeOEMAck::default_instance_;
  delete PBG2CItemEquipMakeOEMAck_reflection_;
  delete PBC2GItemEquipChangeOEMFeeAsk::default_instance_;
  delete PBC2GItemEquipChangeOEMFeeAsk_reflection_;
  delete PBG2CItemEquipChangeOEMFeeAck::default_instance_;
  delete PBG2CItemEquipChangeOEMFeeAck_reflection_;
  delete PBC2GQuestAccept::default_instance_;
  delete PBC2GQuestAccept_reflection_;
  delete PBG2CQuestAccept::default_instance_;
  delete PBG2CQuestAccept_reflection_;
  delete PBC2GQuestComplete::default_instance_;
  delete PBC2GQuestComplete_reflection_;
  delete PBG2CQuestComplete::default_instance_;
  delete PBG2CQuestComplete_reflection_;
  delete PBC2GQuestUpdateItem::default_instance_;
  delete PBC2GQuestUpdateItem_reflection_;
  delete PBG2CQuestUpdateItem::default_instance_;
  delete PBG2CQuestUpdateItem_reflection_;
  delete PBC2GQuestGiveUp::default_instance_;
  delete PBC2GQuestGiveUp_reflection_;
  delete PBG2CQuestGiveUp::default_instance_;
  delete PBG2CQuestGiveUp_reflection_;
  delete PBC2GStoreBuy::default_instance_;
  delete PBC2GStoreBuy_reflection_;
  delete PBG2CStoreBuy::default_instance_;
  delete PBG2CStoreBuy_reflection_;
  delete PBG2CExpendSyn::default_instance_;
  delete PBG2CExpendSyn_reflection_;
  delete PBG2CAddHp::default_instance_;
  delete PBG2CAddHp_reflection_;
  delete PBG2CAddExp::default_instance_;
  delete PBG2CAddExp_reflection_;
  delete PBG2CClearData::default_instance_;
  delete PBG2CClearData_reflection_;
  delete PBG2CAddLevel::default_instance_;
  delete PBG2CAddLevel_reflection_;
  delete PBC2GPrizeAccept::default_instance_;
  delete PBC2GPrizeAccept_reflection_;
  delete PBC2GPrizeAbandon::default_instance_;
  delete PBC2GPrizeAbandon_reflection_;
  delete PBG2CPrizeNew::default_instance_;
  delete PBG2CPrizeNew_reflection_;
  delete PBC2GTrade_apply::default_instance_;
  delete PBC2GTrade_apply_reflection_;
  delete PBC2GTrade_answer::default_instance_;
  delete PBC2GTrade_answer_reflection_;
  delete PBC2GTrade_addItem::default_instance_;
  delete PBC2GTrade_addItem_reflection_;
  delete PBC2GTrade_delItem::default_instance_;
  delete PBC2GTrade_delItem_reflection_;
  delete PBC2GTrade_setMoney::default_instance_;
  delete PBC2GTrade_setMoney_reflection_;
  delete PBG2CTrade_begin::default_instance_;
  delete PBG2CTrade_begin_reflection_;
  delete PBG2CTrade_end::default_instance_;
  delete PBG2CTrade_end_reflection_;
  delete PBG2CTrade_addItem::default_instance_;
  delete PBG2CTrade_addItem_reflection_;
  delete PBG2CTrade_delItem::default_instance_;
  delete PBG2CTrade_delItem_reflection_;
  delete PBG2CTrade_setMoney::default_instance_;
  delete PBG2CTrade_setMoney_reflection_;
  delete PBG2CTrade_lock::default_instance_;
  delete PBG2CTrade_lock_reflection_;
  delete PBG2CTrade_unlock::default_instance_;
  delete PBG2CTrade_unlock_reflection_;
  delete PBG2CTrade_confirm::default_instance_;
  delete PBG2CTrade_confirm_reflection_;
  delete PBG2CTrade_applyTrasfer::default_instance_;
  delete PBG2CTrade_applyTrasfer_reflection_;
  delete PBG2CTrade_answerTrasfer::default_instance_;
  delete PBG2CTrade_answerTrasfer_reflection_;
  delete PBG2CSaleMoney_tradelog::default_instance_;
  delete PBG2CSaleMoney_tradelog_reflection_;
  delete PBC2GSaleMoney_sale::default_instance_;
  delete PBC2GSaleMoney_sale_reflection_;
  delete PBC2GSaleMoney_salecancel::default_instance_;
  delete PBC2GSaleMoney_salecancel_reflection_;
  delete PBG2CSaleMoney_ListInfo::default_instance_;
  delete PBG2CSaleMoney_ListInfo_reflection_;
  delete PBG2CSaleMoney_list::default_instance_;
  delete PBG2CSaleMoney_list_reflection_;
  delete PBC2GFindPlayer::default_instance_;
  delete PBC2GFindPlayer_reflection_;
  delete PBG2CFindPlayer::default_instance_;
  delete PBG2CFindPlayer_reflection_;
  delete PBC2GAuction_sale::default_instance_;
  delete PBC2GAuction_sale_reflection_;
  delete PBC2GAuction_salecancel::default_instance_;
  delete PBC2GAuction_salecancel_reflection_;
  delete PBC2GAuction_buy::default_instance_;
  delete PBC2GAuction_buy_reflection_;
  delete PBAuctionFilterItemType::default_instance_;
  delete PBAuctionFilterItemType_reflection_;
  delete PBC2GAuction_list::default_instance_;
  delete PBC2GAuction_list_reflection_;
  delete PBC2GAuction_ave::default_instance_;
  delete PBC2GAuction_ave_reflection_;
  delete PBG2CAuction_list::default_instance_;
  delete PBG2CAuction_list_reflection_;
  delete PBG2CAuction_ave::default_instance_;
  delete PBG2CAuction_ave_reflection_;
  delete PBC2GTopListList::default_instance_;
  delete PBC2GTopListList_reflection_;
  delete PBC2GTopListOne::default_instance_;
  delete PBC2GTopListOne_reflection_;
  delete PBC2GTopListSetClearTime::default_instance_;
  delete PBC2GTopListSetClearTime_reflection_;
  delete PBTopListDetail::default_instance_;
  delete PBTopListDetail_reflection_;
  delete PBS2CTopListList::default_instance_;
  delete PBS2CTopListList_reflection_;
  delete PBS2CTopListOne::default_instance_;
  delete PBS2CTopListOne_reflection_;
  delete PBC2GFriend_AddAsk::default_instance_;
  delete PBC2GFriend_AddAsk_reflection_;
  delete PBC2GFriend_DelAsk::default_instance_;
  delete PBC2GFriend_DelAsk_reflection_;
  delete PBC2GFriend_Answer::default_instance_;
  delete PBC2GFriend_Answer_reflection_;
  delete PBC2GFriend_Find::default_instance_;
  delete PBC2GFriend_Find_reflection_;
  delete PBFriendFindInfo::default_instance_;
  delete PBFriendFindInfo_reflection_;
  delete PBG2CFriend_Find::default_instance_;
  delete PBG2CFriend_Find_reflection_;
  delete PBG2CFriend_AddAskTrasfer::default_instance_;
  delete PBG2CFriend_AddAskTrasfer_reflection_;
  delete PBG2CFriend_Info::default_instance_;
  delete PBG2CFriend_Info_reflection_;
  delete PBC2GCommon_PKType::default_instance_;
  delete PBC2GCommon_PKType_reflection_;
  delete PBG2CCommon_PKType::default_instance_;
  delete PBG2CCommon_PKType_reflection_;
  delete PBC2GCommonForbitSpeakAsk::default_instance_;
  delete PBC2GCommonForbitSpeakAsk_reflection_;
  delete PBC2GCommonStrongerReWard::default_instance_;
  delete PBC2GCommonStrongerReWard_reflection_;
  delete PBC2GCommonSubFightPower::default_instance_;
  delete PBC2GCommonSubFightPower_reflection_;
  delete PBC2GCopymapUnactive::default_instance_;
  delete PBC2GCopymapUnactive_reflection_;
  delete PBG2Relive_SceneBorn::default_instance_;
  delete PBG2Relive_SceneBorn_reflection_;
  delete PBG2CCommon_TimeEvent::default_instance_;
  delete PBG2CCommon_TimeEvent_reflection_;
  delete PBC2SWenTao_SetBingFa::default_instance_;
  delete PBC2SWenTao_SetBingFa_reflection_;
  delete PBC2SWenTao_SetScheme::default_instance_;
  delete PBC2SWenTao_SetScheme_reflection_;
  delete PBC2SWenTao_QianXiu::default_instance_;
  delete PBC2SWenTao_QianXiu_reflection_;
  delete PBC2SWenTao_TuPo::default_instance_;
  delete PBC2SWenTao_TuPo_reflection_;
  delete PBC2SWenTao_Upgrate::default_instance_;
  delete PBC2SWenTao_Upgrate_reflection_;
  delete PBC2SWenTao_SetBingfu::default_instance_;
  delete PBC2SWenTao_SetBingfu_reflection_;
  delete PBC2SWenTao_Reset::default_instance_;
  delete PBC2SWenTao_Reset_reflection_;
  delete PBC2SWenTao_ActiveScheme::default_instance_;
  delete PBC2SWenTao_ActiveScheme_reflection_;
  delete PBC2SWenTao_ActiveBingFa::default_instance_;
  delete PBC2SWenTao_ActiveBingFa_reflection_;
  delete PBC2SWenTao_QianXiuUpdate::default_instance_;
  delete PBC2SWenTao_QianXiuUpdate_reflection_;
  delete PBC2SWenTao_TuPoUpdate::default_instance_;
  delete PBC2SWenTao_TuPoUpdate_reflection_;
  delete PBC2SWenTao_YaoDianUpdate::default_instance_;
  delete PBC2SWenTao_YaoDianUpdate_reflection_;
  delete PBC2SWenTao_WisdomUpdate::default_instance_;
  delete PBC2SWenTao_WisdomUpdate_reflection_;
  delete PBC2GWulueSetSchemeAsk::default_instance_;
  delete PBC2GWulueSetSchemeAsk_reflection_;
  delete PBC2GWulueUpZhanlueAsk::default_instance_;
  delete PBC2GWulueUpZhanlueAsk_reflection_;
  delete PBC2GWulueSetBingfuAsk::default_instance_;
  delete PBC2GWulueSetBingfuAsk_reflection_;
  delete PBG2CWulueSetSchemeAck::default_instance_;
  delete PBG2CWulueSetSchemeAck_reflection_;
  delete PBG2CWulueUpZhanlueAck::default_instance_;
  delete PBG2CWulueUpZhanlueAck_reflection_;
  delete PBG2CWulueSetBingfuAck::default_instance_;
  delete PBG2CWulueSetBingfuAck_reflection_;
  delete PBC2GBingfuUpgradeAsk::default_instance_;
  delete PBC2GBingfuUpgradeAsk_reflection_;
  delete PBC2GBingfuUpOneLevelAsk::default_instance_;
  delete PBC2GBingfuUpOneLevelAsk_reflection_;
  delete PBC2GBingfuSplitAsk::default_instance_;
  delete PBC2GBingfuSplitAsk_reflection_;
  delete PBG2CBingfuUpgradeAck::default_instance_;
  delete PBG2CBingfuUpgradeAck_reflection_;
  delete PBC2DropItem_InfoAsk::default_instance_;
  delete PBC2DropItem_InfoAsk_reflection_;
  delete PBC2DropItem_DiceAsk::default_instance_;
  delete PBC2DropItem_DiceAsk_reflection_;
  delete PBC2DropItem_PickAllAsk::default_instance_;
  delete PBC2DropItem_PickAllAsk_reflection_;
  delete PBC2DropItem_PickupAsk::default_instance_;
  delete PBC2DropItem_PickupAsk_reflection_;
  delete PBC2DropItem_AbadonAsk::default_instance_;
  delete PBC2DropItem_AbadonAsk_reflection_;
  delete PBC2DropItem_AssignAsk::default_instance_;
  delete PBC2DropItem_AssignAsk_reflection_;
  delete PBDropItem_DiceInfo::default_instance_;
  delete PBDropItem_DiceInfo_reflection_;
  delete PBDropItem_DropCell::default_instance_;
  delete PBDropItem_DropCell_reflection_;
  delete PBC2DropItem_Info::default_instance_;
  delete PBC2DropItem_Info_reflection_;
  delete PBC2DropItem_Dice::default_instance_;
  delete PBC2DropItem_Dice_reflection_;
  delete PBC2DropItem_Assign::default_instance_;
  delete PBC2DropItem_Assign_reflection_;
  delete PBC2DropItem_ChangeAllot::default_instance_;
  delete PBC2DropItem_ChangeAllot_reflection_;
  delete PBC2GCommon_PlaneEnter::default_instance_;
  delete PBC2GCommon_PlaneEnter_reflection_;
  delete PBC2GCommon_PlaneLeave::default_instance_;
  delete PBC2GCommon_PlaneLeave_reflection_;
  delete PBC2GCommon_RegionTriggerPlane::default_instance_;
  delete PBC2GCommon_RegionTriggerPlane_reflection_;
  delete PBS2GCommon_TakeASeatAck::default_instance_;
  delete PBS2GCommon_TakeASeatAck_reflection_;
  delete PBG2CCommon_PlaneUpdate::default_instance_;
  delete PBG2CCommon_PlaneUpdate_reflection_;
  delete PBC2GCopymapCreate::default_instance_;
  delete PBC2GCopymapCreate_reflection_;
  delete PBC2GCopymapEnterNpc::default_instance_;
  delete PBC2GCopymapEnterNpc_reflection_;
  delete PBC2GCopymapExit::default_instance_;
  delete PBC2GCopymapExit_reflection_;
  delete PBC2GCopymapInvite::default_instance_;
  delete PBC2GCopymapInvite_reflection_;
  delete PBG2CCopymapInviteTransfer::default_instance_;
  delete PBG2CCopymapInviteTransfer_reflection_;
  delete PBC2GCopymapAcceptInvite::default_instance_;
  delete PBC2GCopymapAcceptInvite_reflection_;
  delete PBG2CCopymapState::default_instance_;
  delete PBG2CCopymapState_reflection_;
  delete PBG2CReadyStart::default_instance_;
  delete PBG2CReadyStart_reflection_;
  delete PBG2CCopymapCloseTip::default_instance_;
  delete PBG2CCopymapCloseTip_reflection_;
  delete PBG2CCopymapFindAttackMonster::default_instance_;
  delete PBG2CCopymapFindAttackMonster_reflection_;
  delete PBG2CCopymapQuestTarget::default_instance_;
  delete PBG2CCopymapQuestTarget_reflection_;
  delete PBG2CCopymapQuest::default_instance_;
  delete PBG2CCopymapQuest_reflection_;
  delete PBG2CCopymapChangeQuest::default_instance_;
  delete PBG2CCopymapChangeQuest_reflection_;
  delete PBG2CCopymapHurtInfo::default_instance_;
  delete PBG2CCopymapHurtInfo_reflection_;
  delete PBCopymapGuardInfo::default_instance_;
  delete PBCopymapGuardInfo_reflection_;
  delete PBG2CCopymapSysGuardHp::default_instance_;
  delete PBG2CCopymapSysGuardHp_reflection_;
  delete PBG2CPoemActivePos::default_instance_;
  delete PBG2CPoemActivePos_reflection_;
  delete PBG2CLiangyiNum::default_instance_;
  delete PBG2CLiangyiNum_reflection_;
  delete PBG2CCopymapWave::default_instance_;
  delete PBG2CCopymapWave_reflection_;
  delete PBG2CSixiangMonster::default_instance_;
  delete PBG2CSixiangMonster_reflection_;
  delete PBG2CCopymapAssistCount::default_instance_;
  delete PBG2CCopymapAssistCount_reflection_;
  delete PBG2CCopymapEnterInfo::default_instance_;
  delete PBG2CCopymapEnterInfo_reflection_;
  delete PBC2GCopymapTeamMemberInfo::default_instance_;
  delete PBC2GCopymapTeamMemberInfo_reflection_;
  delete PBG2CCopymapTeamMember::default_instance_;
  delete PBG2CCopymapTeamMember_reflection_;
  delete PBG2CCopymapTeamMemberInfo::default_instance_;
  delete PBG2CCopymapTeamMemberInfo_reflection_;
  delete PBManorLineUpInfo::default_instance_;
  delete PBManorLineUpInfo_reflection_;
  delete PBG2CCopymapManorLobbyLineupNtf::default_instance_;
  delete PBG2CCopymapManorLobbyLineupNtf_reflection_;
  delete PBG2CCopymapManorBattleFieldShenfuNtf::default_instance_;
  delete PBG2CCopymapManorBattleFieldShenfuNtf_reflection_;
  delete PBManorBattleFieldComrades::default_instance_;
  delete PBManorBattleFieldComrades_reflection_;
  delete PBG2CCopymapManorBattleFieldComradesNtf::default_instance_;
  delete PBG2CCopymapManorBattleFieldComradesNtf_reflection_;
  delete PBFactionScore::default_instance_;
  delete PBFactionScore_reflection_;
  delete PBG2CCopymapManorBattleFieldTotalScoreNtf::default_instance_;
  delete PBG2CCopymapManorBattleFieldTotalScoreNtf_reflection_;
  delete PBG2CCopymapManorBroadCastPromptNtf::default_instance_;
  delete PBG2CCopymapManorBroadCastPromptNtf_reflection_;
  delete PBG2CCommon_BossInfo::default_instance_;
  delete PBG2CCommon_BossInfo_reflection_;
  delete PBG2CCommon_BossList::default_instance_;
  delete PBG2CCommon_BossList_reflection_;
  delete PBC2GCommon_FlyAsk::default_instance_;
  delete PBC2GCommon_FlyAsk_reflection_;
  delete PBG2CCommon_FlyAck::default_instance_;
  delete PBG2CCommon_FlyAck_reflection_;
  delete PBC2GCommon_TaskFlyAsk::default_instance_;
  delete PBC2GCommon_TaskFlyAsk_reflection_;
  delete PBG2CCommon_TaskFlyAck::default_instance_;
  delete PBG2CCommon_TaskFlyAck_reflection_;
  delete PBG2CCommon_DazuoguajiTotalNtf::default_instance_;
  delete PBG2CCommon_DazuoguajiTotalNtf_reflection_;
  delete PBG2CUpBingfuExp::default_instance_;
  delete PBG2CUpBingfuExp_reflection_;
  delete PBG2CCommonTreasurePrize::default_instance_;
  delete PBG2CCommonTreasurePrize_reflection_;
  delete PBG2CCommonSetCorpsJob::default_instance_;
  delete PBG2CCommonSetCorpsJob_reflection_;
  delete PBG2CCommonStrongerReWard::default_instance_;
  delete PBG2CCommonStrongerReWard_reflection_;
  delete PBG2CFightPower::default_instance_;
  delete PBG2CFightPower_reflection_;
  delete PBG2CCommonSubFightPower::default_instance_;
  delete PBG2CCommonSubFightPower_reflection_;
  delete PBG2CCommon_SystemSwitchAck::default_instance_;
  delete PBG2CCommon_SystemSwitchAck_reflection_;
  delete PBC2GCommonPromotion::default_instance_;
  delete PBC2GCommonPromotion_reflection_;
  delete PBG2CCommon_Promotion::default_instance_;
  delete PBG2CCommon_Promotion_reflection_;
  delete PBC2GIdentityOpenAsk::default_instance_;
  delete PBC2GIdentityOpenAsk_reflection_;
  delete PBG2CIdentityOpenAck::default_instance_;
  delete PBG2CIdentityOpenAck_reflection_;
  delete PBC2GIdentityLearnAsk::default_instance_;
  delete PBC2GIdentityLearnAsk_reflection_;
  delete PBG2CIdentityLearnAck::default_instance_;
  delete PBG2CIdentityLearnAck_reflection_;
  delete PBC2GIdentityResetAsk::default_instance_;
  delete PBC2GIdentityResetAsk_reflection_;
  delete PBG2CIdentityResetAck::default_instance_;
  delete PBG2CIdentityResetAck_reflection_;
  delete PBC2GIdentityUpSkillAsk::default_instance_;
  delete PBC2GIdentityUpSkillAsk_reflection_;
  delete PBG2CIdentityUpSkillAck::default_instance_;
  delete PBG2CIdentityUpSkillAck_reflection_;
  delete PBC2GWuxueNewAsk::default_instance_;
  delete PBC2GWuxueNewAsk_reflection_;
  delete PBG2CWuxueNewAck::default_instance_;
  delete PBG2CWuxueNewAck_reflection_;
  delete PBC2GWuxueDelAsk::default_instance_;
  delete PBC2GWuxueDelAsk_reflection_;
  delete PBG2CWuxueDelAck::default_instance_;
  delete PBG2CWuxueDelAck_reflection_;
  delete PBC2GWuxueChangeAsk::default_instance_;
  delete PBC2GWuxueChangeAsk_reflection_;
  delete PBG2CWuxueChangeAck::default_instance_;
  delete PBG2CWuxueChangeAck_reflection_;
  delete PBC2GWuxueSetSkillAsk::default_instance_;
  delete PBC2GWuxueSetSkillAsk_reflection_;
  delete PBG2CWuxueSetSkillAck::default_instance_;
  delete PBG2CWuxueSetSkillAck_reflection_;
  delete PBC2GWuxueSetAllSkillAsk::default_instance_;
  delete PBC2GWuxueSetAllSkillAsk_reflection_;
  delete PBG2CWuxueSetAllSkillAck::default_instance_;
  delete PBG2CWuxueSetAllSkillAck_reflection_;
  delete PBC2GWuxueLearnSkillAsk::default_instance_;
  delete PBC2GWuxueLearnSkillAsk_reflection_;
  delete PBG2CWuxueLearnSkillAck::default_instance_;
  delete PBG2CWuxueLearnSkillAck_reflection_;
  delete PBC2GCommon_SearchPlayer::default_instance_;
  delete PBC2GCommon_SearchPlayer_reflection_;
  delete PBG2CCommon_SearchPlayer::default_instance_;
  delete PBG2CCommon_SearchPlayer_reflection_;
  delete PBG2CCommon_MonsterTalk::default_instance_;
  delete PBG2CCommon_MonsterTalk_reflection_;
  delete PBG2CCommon_BeFindNotice::default_instance_;
  delete PBG2CCommon_BeFindNotice_reflection_;
  delete PBC2GCommon_NpcDialogComplete::default_instance_;
  delete PBC2GCommon_NpcDialogComplete_reflection_;
  delete PBC2GCommon_UnActiveMonster::default_instance_;
  delete PBC2GCommon_UnActiveMonster_reflection_;
  delete PBG2CCommon_SetPosition::default_instance_;
  delete PBG2CCommon_SetPosition_reflection_;
  delete PBG2CCommon_DayCopymapCount::default_instance_;
  delete PBG2CCommon_DayCopymapCount_reflection_;
  delete PBC2GCommonGetBattleAttrDetailAsk::default_instance_;
  delete PBC2GCommonGetBattleAttrDetailAsk_reflection_;
  delete PBG2CCommon_TakeASeatAsk::default_instance_;
  delete PBG2CCommon_TakeASeatAsk_reflection_;
  delete PBC2SDartCheckAsk::default_instance_;
  delete PBC2SDartCheckAsk_reflection_;
  delete PBDartMemberResourceInfo::default_instance_;
  delete PBDartMemberResourceInfo_reflection_;
  delete PBS2CDartCheckAck::default_instance_;
  delete PBS2CDartCheckAck_reflection_;
  delete PBC2SDartStartAsk::default_instance_;
  delete PBC2SDartStartAsk_reflection_;
  delete PBC2SDartQuitAsk::default_instance_;
  delete PBC2SDartQuitAsk_reflection_;
  delete PBDartInfo::default_instance_;
  delete PBDartInfo_reflection_;
  delete PBS2CDartStartAck::default_instance_;
  delete PBS2CDartStartAck_reflection_;
  delete PBS2CDartInfoNtf::default_instance_;
  delete PBS2CDartInfoNtf_reflection_;
  delete PBS2CDartCheckPauseNtf::default_instance_;
  delete PBS2CDartCheckPauseNtf_reflection_;
  delete PBC2SDartCheckConfirmAsk::default_instance_;
  delete PBC2SDartCheckConfirmAsk_reflection_;
  delete PBC2SDartCheckGetBuffAsk::default_instance_;
  delete PBC2SDartCheckGetBuffAsk_reflection_;
  delete PBS2CDartStartMoveNtf::default_instance_;
  delete PBS2CDartStartMoveNtf_reflection_;
  delete PBS2CDartStartRobNtf::default_instance_;
  delete PBS2CDartStartRobNtf_reflection_;
  delete PBS2CDartFinishAndPrizeNtf::default_instance_;
  delete PBS2CDartFinishAndPrizeNtf_reflection_;
  delete PBS2CDartCheckGetBuffAck::default_instance_;
  delete PBS2CDartCheckGetBuffAck_reflection_;
  delete PBC2SDartAddSupplyAsk::default_instance_;
  delete PBC2SDartAddSupplyAsk_reflection_;
  delete PBC2SDartAddSupplyConfirmAsk::default_instance_;
  delete PBC2SDartAddSupplyConfirmAsk_reflection_;
  delete PBS2CDartFinishRobNtf::default_instance_;
  delete PBS2CDartFinishRobNtf_reflection_;
  delete PBDartAddSupplyInfo::default_instance_;
  delete PBDartAddSupplyInfo_reflection_;
  delete PBS2CDartAddSupplyNtf::default_instance_;
  delete PBS2CDartAddSupplyNtf_reflection_;
  delete PBS2CDartAddSupplyAck::default_instance_;
  delete PBS2CDartAddSupplyAck_reflection_;
  delete PBS2CDartQuitAck::default_instance_;
  delete PBS2CDartQuitAck_reflection_;
  delete PBS2CDartCheckConfirmAck::default_instance_;
  delete PBS2CDartCheckConfirmAck_reflection_;
  delete PBS2CDartAddSupplyConfirmAck::default_instance_;
  delete PBS2CDartAddSupplyConfirmAck_reflection_;
  delete PBC2SDartBack2NpcAsk::default_instance_;
  delete PBC2SDartBack2NpcAsk_reflection_;
  delete PBS2CDartBack2NpcAck::default_instance_;
  delete PBS2CDartBack2NpcAck_reflection_;
  delete PBC2GFactionBossTopAsk::default_instance_;
  delete PBC2GFactionBossTopAsk_reflection_;
  delete PBC2GFactionBossPersonalTopAck::default_instance_;
  delete PBC2GFactionBossPersonalTopAck_reflection_;
  delete PBC2GFactionBossFactionTopAck::default_instance_;
  delete PBC2GFactionBossFactionTopAck_reflection_;
  delete PBC2GFactionBossUnionTopAck::default_instance_;
  delete PBC2GFactionBossUnionTopAck_reflection_;
  delete PBS2CSceneAreaList::default_instance_;
  delete PBS2CSceneAreaList_reflection_;
  delete PBS2CQinggongStartNtf::default_instance_;
  delete PBS2CQinggongStartNtf_reflection_;
  delete PBBattleAttrDetail::default_instance_;
  delete PBBattleAttrDetail_reflection_;
  delete PBS2CGetBattleAttrDetailAck::default_instance_;
  delete PBS2CGetBattleAttrDetailAck_reflection_;
  delete PBC2GTitleEquipAsk::default_instance_;
  delete PBC2GTitleEquipAsk_reflection_;
  delete PBG2CTitleEquipAck::default_instance_;
  delete PBG2CTitleEquipAck_reflection_;
  delete PBC2GTitleUnEquipAsk::default_instance_;
  delete PBC2GTitleUnEquipAsk_reflection_;
  delete PBG2CTitleUnEquipAck::default_instance_;
  delete PBG2CTitleUnEquipAck_reflection_;
  delete PBG2CTitleAddAck::default_instance_;
  delete PBG2CTitleAddAck_reflection_;
  delete PBG2CTitleDelAck::default_instance_;
  delete PBG2CTitleDelAck_reflection_;
  delete PBC2GFashionEquipAsk::default_instance_;
  delete PBC2GFashionEquipAsk_reflection_;
  delete PBG2CFashionEquipAck::default_instance_;
  delete PBG2CFashionEquipAck_reflection_;
  delete PBC2GFashionUnEquipAsk::default_instance_;
  delete PBC2GFashionUnEquipAsk_reflection_;
  delete PBG2CFashionUnEquipAck::default_instance_;
  delete PBG2CFashionUnEquipAck_reflection_;
  delete PBClimbTowerGetInfoAsk::default_instance_;
  delete PBClimbTowerGetInfoAsk_reflection_;
  delete PBClimbTowerGetInfoAck::default_instance_;
  delete PBClimbTowerGetInfoAck_reflection_;
  delete PBClimbTowerGetInfoNtf::default_instance_;
  delete PBClimbTowerGetInfoNtf_reflection_;
  delete PBClimbTowerPrize::default_instance_;
  delete PBClimbTowerPrize_reflection_;
  delete PBClimbTowerShowPrizeNtf::default_instance_;
  delete PBClimbTowerShowPrizeNtf_reflection_;
  delete PBClimbTowerChoosePrizeAsk::default_instance_;
  delete PBClimbTowerChoosePrizeAsk_reflection_;
  delete PBClimbTowerChoosePrizeAck::default_instance_;
  delete PBClimbTowerChoosePrizeAck_reflection_;
  delete PBClimbTowerClearAsk::default_instance_;
  delete PBClimbTowerClearAsk_reflection_;
  delete PBClimbTowerClearAck::default_instance_;
  delete PBClimbTowerClearAck_reflection_;
  delete PBClimbTowerShowClearNtf::default_instance_;
  delete PBClimbTowerShowClearNtf_reflection_;
  delete PBC2GAnswerQuestion_Answer::default_instance_;
  delete PBC2GAnswerQuestion_Answer_reflection_;
  delete PBG2CAnswerQuestion_QuestionInfo::default_instance_;
  delete PBG2CAnswerQuestion_QuestionInfo_reflection_;
  delete PBG2CAnswerQuestion_QuestionResult::default_instance_;
  delete PBG2CAnswerQuestion_QuestionResult_reflection_;
  delete PBGreatWallTrainInfoAck::default_instance_;
  delete PBGreatWallTrainInfoAck_reflection_;
  delete PBC2SWorldBossGetInfoAsk::default_instance_;
  delete PBC2SWorldBossGetInfoAsk_reflection_;
  delete PBWorldBossInfo::default_instance_;
  delete PBWorldBossInfo_reflection_;
  delete PBWorldBossGetInfoAck::default_instance_;
  delete PBWorldBossGetInfoAck_reflection_;
  delete PBC2SWorldBossUpdateBossHurtRankAsk::default_instance_;
  delete PBC2SWorldBossUpdateBossHurtRankAsk_reflection_;
  delete PBWorldBossUpdateBossHurtRankAck::default_instance_;
  delete PBWorldBossUpdateBossHurtRankAck_reflection_;
  delete PBBossHurtRank::default_instance_;
  delete PBBossHurtRank_reflection_;
  delete PBWorldBossUpdateBossHurtRankNtf::default_instance_;
  delete PBWorldBossUpdateBossHurtRankNtf_reflection_;
  delete PBC2SWorldBossGotoBossAsk::default_instance_;
  delete PBC2SWorldBossGotoBossAsk_reflection_;
  delete PBS2CWorldBossGotoBossAck::default_instance_;
  delete PBS2CWorldBossGotoBossAck_reflection_;
  delete PBC2SActivityGetRewardAsk::default_instance_;
  delete PBC2SActivityGetRewardAsk_reflection_;
  delete PBC2SActivityGetRewardAck::default_instance_;
  delete PBC2SActivityGetRewardAck_reflection_;
  delete PBC2SActivityAddLivenessAck::default_instance_;
  delete PBC2SActivityAddLivenessAck_reflection_;
  delete PBC2GRelive_Born::default_instance_;
  delete PBC2GRelive_Born_reflection_;
  delete PBG2CCorpsInfoAck::default_instance_;
  delete PBG2CCorpsInfoAck_reflection_;
  delete PBC2GCorpsSetDecAsk::default_instance_;
  delete PBC2GCorpsSetDecAsk_reflection_;
  delete PBG2CCorpsSetDecAck::default_instance_;
  delete PBG2CCorpsSetDecAck_reflection_;
  delete PBC2GCorpsSetJobAsk::default_instance_;
  delete PBC2GCorpsSetJobAsk_reflection_;
  delete PBG2CCorpsSetJobAck::default_instance_;
  delete PBG2CCorpsSetJobAck_reflection_;
  delete PBC2GCorpsForbitSpeakAsk::default_instance_;
  delete PBC2GCorpsForbitSpeakAsk_reflection_;
  delete PBC2GWealLoginPrizeAsk::default_instance_;
  delete PBC2GWealLoginPrizeAsk_reflection_;
  delete PBC2GManorGetAllInfoAsk::default_instance_;
  delete PBC2GManorGetAllInfoAsk_reflection_;
  delete PBG2CManorGetAllInfoAck::default_instance_;
  delete PBG2CManorGetAllInfoAck_reflection_;
  delete PBC2GManorGetFightInfoAsk::default_instance_;
  delete PBC2GManorGetFightInfoAsk_reflection_;
  delete PBG2CManorGetFightInfoAck::default_instance_;
  delete PBG2CManorGetFightInfoAck_reflection_;
  delete PBC2GManorApplyFightAsk::default_instance_;
  delete PBC2GManorApplyFightAsk_reflection_;
  delete PBG2CManorApplyFightAck::default_instance_;
  delete PBG2CManorApplyFightAck_reflection_;
  delete PBC2GManorEnterLobbyAsk::default_instance_;
  delete PBC2GManorEnterLobbyAsk_reflection_;
  delete PBG2CManorEnterLobbyAck::default_instance_;
  delete PBG2CManorEnterLobbyAck_reflection_;
  delete PBG2CManorStartFightNtf::default_instance_;
  delete PBG2CManorStartFightNtf_reflection_;
  delete PBC2GManorMVPVoteAsk::default_instance_;
  delete PBC2GManorMVPVoteAsk_reflection_;
  delete PBG2CManorMvpVoteAck::default_instance_;
  delete PBG2CManorMvpVoteAck_reflection_;
  delete PBG2CManorMVPVoteNtf::default_instance_;
  delete PBG2CManorMVPVoteNtf_reflection_;
  delete PBC2GManorGetScoresAsk::default_instance_;
  delete PBC2GManorGetScoresAsk_reflection_;
  delete PBC2GManorGetPlayerScoresAsk::default_instance_;
  delete PBC2GManorGetPlayerScoresAsk_reflection_;
  delete PBManorBattleFieldScore::default_instance_;
  delete PBManorBattleFieldScore_reflection_;
  delete PBG2CManorGetScoresAck::default_instance_;
  delete PBG2CManorGetScoresAck_reflection_;
  delete PBG2CManorGetPlayerScoresAck::default_instance_;
  delete PBG2CManorGetPlayerScoresAck_reflection_;
  delete PBManorMVP::default_instance_;
  delete PBManorMVP_reflection_;
  delete PBG2CManorResultNtf::default_instance_;
  delete PBG2CManorResultNtf_reflection_;
}

void protobuf_AddDesc_CASMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_AccountStruct_2eproto();
  ::protobuf_AddDesc_PlayerStruct_2eproto();
  ::protobuf_AddDesc_GameStruct_2eproto();
  ::protobuf_AddDesc_Team_2eproto();
  ::protobuf_AddDesc_Faction_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014CASMsg.proto\032\023AccountStruct.proto\032\022Pla"
    "yerStruct.proto\032\020GameStruct.proto\032\nTeam."
    "proto\032\rFaction.proto\"\033\n\nPBLoginAsk\022\r\n\005lo"
    "gin\030\001 \001(\t\"$\n\024PBCheckPlayerNameAsk\022\014\n\004nam"
    "e\030\001 \001(\t\"<\n\021PBCreatePlayerAsk\022\'\n\rplayerdi"
    "splay\030\001 \001(\0132\020.PBPlayerDisplay\"\"\n\016PBDelPl"
    "ayerAsk\022\020\n\010playerID\030\001 \001(\r\"%\n\021PBSelectPla"
    "yerAsk\022\020\n\010playerID\030\001 \001(\r\"B\n\nPBLoginAck\022\033"
    "\n\007account\030\001 \001(\0132\n.PBAccount\022\027\n\017worldCrea"
    "teTime\030\002 \001(\003\"F\n\020PBAccountLoadAck\022\021\n\tacco"
    "untid\030\001 \001(\r\022\037\n\006avatar\030\002 \003(\0132\017.PBPlayerAv"
    "atar\",\n\017PBPlayerNameAck\022\013\n\003ret\030\001 \001(\r\022\014\n\004"
    "name\030\002 \001(\t\"4\n\021PBCreatePlayerAck\022\037\n\006avata"
    "r\030\001 \001(\0132\017.PBPlayerAvatar\"\"\n\016PBDelPlayerA"
    "ck\022\020\n\010playerID\030\001 \001(\r\"A\n\021PBSelectPlayerAc"
    "k\022\020\n\010playerID\030\001 \001(\r\022\014\n\004host\030\002 \001(\t\022\014\n\004por"
    "t\030\003 \001(\r\"E\n\rPBC2GLoginAsk\022\020\n\010playerID\030\001 \001"
    "(\r\022\017\n\007loginSN\030\002 \001(\004\022\021\n\tbReconnet\030\003 \001(\010\"t"
    "\n\rPBG2CLoginAck\022\017\n\007sceneid\030\001 \001(\r\022\023\n\013scen"
    "ecellid\030\002 \001(\r\022\016\n\006unitid\030\003 \001(\r\022\031\n\007pbPoint"
    "\030\004 \001(\0132\010.PBPoint\022\022\n\nscenedynid\030\005 \001(\004\"5\n\020"
    "PBC2GGMCmdTxtCmd\022\022\n\ncallbackid\030\001 \001(\004\022\r\n\005"
    "param\030\002 \001(\t\"C\n\020PBG2CGMCmdTxtCmd\022\022\n\ncallb"
    "ackid\030\001 \001(\004\022\016\n\006result\030\002 \001(\010\022\013\n\003msg\030\003 \001(\t"
    "\"\177\n\030PBG2CSceneFlySameGameSvr\022\017\n\007sceneid\030"
    "\001 \001(\r\022\023\n\013scenecellid\030\002 \001(\r\022\016\n\006unitid\030\003 \001"
    "(\r\022\031\n\007pbPoint\030\004 \001(\0132\010.PBPoint\022\022\n\nscenedy"
    "nid\030\005 \001(\004\"6\n\030PBG2CSceneFlyJumpGameSvr\022\014\n"
    "\004host\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\"9\n\025PBG2CCommon"
    "UnitRemove\022\020\n\010unittype\030\001 \002(\r\022\016\n\006unitid\030\002"
    " \002(\r\"H\n\017PBC2GCommonMove\022\014\n\004posx\030\001 \001(\002\022\014\n"
    "\004posy\030\002 \001(\002\022\013\n\003dir\030\003 \001(\002\022\014\n\004type\030\004 \001(\r\"\177"
    "\n\rPBC2GUseSkill\022\017\n\007skillid\030\001 \001(\r\022\034\n\npbpo"
    "sition\030\002 \001(\0132\010.PBPoint\022\021\n\tdirection\030\003 \001("
    "\002\022\020\n\010targetid\030\004 \001(\r\022\032\n\010pbtarget\030\005 \001(\0132\010."
    "PBPoint\"\"\n\017PBC2GSkillBreak\022\017\n\007skillid\030\001 "
    "\001(\r\"&\n\023PBC2SSkillUseCharge\022\017\n\007skillid\030\001 "
    "\001(\r\"3\n\021PBC2GSkillUpgrade\022\017\n\007skillid\030\001 \001("
    "\r\022\r\n\005level\030\002 \001(\r\"/\n\rPBC2GSkillAdd\022\017\n\007ski"
    "llid\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\"A\n\017PBG2CSkillB"
    "reak\022\017\n\007skillid\030\001 \001(\r\022\016\n\006unitid\030\002 \001(\r\022\r\n"
    "\005stage\030\003 \001(\r\"\246\001\n\rPBG2CUseSkill\022\027\n\005skill\030"
    "\001 \001(\0132\010.PBSkill\022\r\n\005stage\030\002 \001(\r\022\021\n\tdirect"
    "ion\030\003 \001(\002\022\034\n\npbposition\030\004 \001(\0132\010.PBPoint\022"
    "\016\n\006unitid\030\005 \001(\r\022\020\n\010targetid\030\006 \001(\r\022\032\n\010pbt"
    "arget\030\007 \001(\0132\010.PBPoint\"/\n\rPBG2CAddSkill\022\017"
    "\n\007skillid\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\" \n\rPBG2CD"
    "elSkill\022\017\n\007skillid\030\001 \001(\r\"Z\n\017PBG2CUpCoolT"
    "ime\022 \n\010coolinfo\030\001 \001(\0132\016.PBCoolingInfo\022%\n"
    "\rcoolgroupinfo\030\002 \001(\0132\016.PBCoolingInfo\"3\n\021"
    "PBG2CUpgradeSkill\022\017\n\007skillid\030\001 \001(\r\022\r\n\005le"
    "vel\030\002 \001(\r\"2\n\020PBG2CSkillNotice\022\020\n\010targeti"
    "d\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\"\205\001\n\020PBG2CSkillDama"
    "ge\022\020\n\010sourceid\030\001 \001(\r\022\020\n\010targetid\030\002 \001(\r\022\020"
    "\n\010critical\030\003 \001(\r\022\r\n\005value\030\004 \001(\005\022\017\n\007skill"
    "id\030\005 \001(\r\022\033\n\tnewposion\030\006 \001(\0132\010.PBPoint\"A\n"
    "\020PBS2CSkillEffect\022\020\n\010targetid\030\001 \001(\r\022\033\n\tn"
    "ewposion\030\002 \001(\0132\010.PBPoint\"b\n\025PBS2CSkillEf"
    "fectBroad\022\020\n\010sourceid\030\001 \001(\r\022\017\n\007skillid\030\002"
    " \001(\r\022&\n\013skilleffect\030\003 \003(\0132\021.PBS2CSkillEf"
    "fect\"6\n\023PBG2CSkillUseCharge\022\017\n\007skillid\030\001"
    " \001(\r\022\016\n\006unitid\030\002 \001(\r\"5\n\023PBS2CSkillEnemyL"
    "ist\022\014\n\004type\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\r\"\036\n\014P"
    "BC2GDelBuff\022\016\n\006buffid\030\001 \001(\r\"9\n\014PBG2CAddB"
    "uff\022\020\n\010targetid\030\001 \001(\r\022\027\n\006pbbuff\030\002 \003(\0132\007."
    "PBBuff\"[\n\020PBG2CAddMoveBuff\022\034\n\npbposition"
    "\030\001 \001(\0132\010.PBPoint\022\020\n\010targetid\030\002 \001(\r\022\027\n\006pb"
    "buff\030\003 \001(\0132\007.PBBuff\"\?\n\014PBG2CDelBuff\022\016\n\006u"
    "nitid\030\001 \001(\r\022\016\n\006buffid\030\002 \001(\r\022\017\n\007souceid\030\003"
    " \001(\r\"G\n\023PBG2CUpdateBuffTick\022\016\n\006unitid\030\001 "
    "\001(\r\022\016\n\006buffid\030\002 \001(\r\022\020\n\010lefttick\030\003 \001(\004\"+\n"
    "\014PBG2CCounter\022\033\n\007counter\030\001 \003(\0132\n.PBCount"
    "er\":\n\022PBC2GGetClientData\022$\n\nclientdata\030\001"
    " \003(\0132\020.PBVerClientData\"E\n\022PBG2CGetClient"
    "Data\022\020\n\010filename\030\001 \001(\t\022\013\n\003crc\030\002 \001(\r\022\020\n\010f"
    "iledata\030\003 \001(\014\"\025\n\023PBG2CClientDataOver\"\032\n\010"
    "PBMailID\022\016\n\006mailid\030\001 \001(\r\"\036\n\014PBRewardMail"
    "\022\016\n\006mailid\030\001 \003(\r\" \n\014PBC2GDelItem\022\020\n\010item"
    "snid\030\001 \001(\004\" \n\014PBG2CDelItem\022\020\n\010itemsnid\030\001"
    " \001(\004\"1\n\014PBC2GUseItem\022\020\n\010itemsnid\030\001 \001(\004\022\017"
    "\n\007itemNum\030\002 \001(\r\"1\n\014PBG2CUseItem\022\020\n\010items"
    "nid\030\001 \001(\004\022\017\n\007itemNum\030\002 \001(\r\"5\n\016PBC2GEquip"
    "Item\022\020\n\010itemsnid\030\001 \001(\004\022\021\n\tequiptype\030\002 \001("
    "\r\"C\n\016PBG2CEquipItem\022\020\n\010itemsnid\030\001 \001(\004\022\021\n"
    "\tequiptype\030\002 \001(\r\022\014\n\004flag\030\003 \001(\r\"!\n\rPBC2GS"
    "ellItem\022\020\n\010itemsnid\030\001 \001(\004\"!\n\rPBG2CSellIt"
    "em\022\020\n\010itemsnid\030\001 \001(\004\"$\n\020PBC2GBuyBackItem"
    "\022\020\n\010itemsnid\030\001 \001(\004\"$\n\020PBG2CBuyBackItem\022\020"
    "\n\010itemsnid\030\001 \001(\004\"C\n\017PBG2CUpdateItem\022\020\n\010i"
    "temsnid\030\001 \001(\004\022\017\n\007itemNum\030\002 \001(\005\022\r\n\005doing\030"
    "\003 \001(\r\"\"\n\016PBC2GSplitItem\022\020\n\010itemsnid\030\001 \003("
    "\004\"\"\n\016PBG2CSplitItem\022\020\n\010itemsnid\030\001 \003(\004\"0\n"
    "\rPBC2GSortItem\022\037\n\006pbsort\030\001 \003(\0132\017.PBItemS"
    "ortData\"\017\n\rPBG2CSortItem\"J\n\014PBG2CNewItem"
    "\022\031\n\010iteminfo\030\001 \001(\0132\007.PBItem\022\r\n\005doing\030\002 \001"
    "(\r\022\020\n\010isbymail\030\003 \001(\010\"O\n\027PBC2GEquipColumn"
    "Enhance\022\021\n\tequiptype\030\001 \001(\r\022!\n\npbitemdata"
    "\030\002 \003(\0132\r.PBDelItemata\";\n\027PBG2CEquipColum"
    "nEnhance\022\021\n\tequiptype\030\001 \001(\r\022\r\n\005level\030\002 \001"
    "(\r\"M\n\025PBC2GEquipColumnForge\022\021\n\tequiptype"
    "\030\001 \001(\r\022!\n\npbitemdata\030\002 \003(\0132\r.PBDelItemat"
    "a\"9\n\025PBG2CEquipColumnForge\022\021\n\tequiptype\030"
    "\001 \001(\r\022\r\n\005level\030\002 \001(\r\"I\n\021PBC2GEquipEnhanc"
    "e\022\021\n\tequiptype\030\001 \001(\r\022!\n\npbitemdata\030\002 \003(\013"
    "2\r.PBDelItemata\"3\n\021PBG2CEquipEnhance\022\021\n\t"
    "equiptype\030\001 \001(\r\022\013\n\003exp\030\002 \001(\r\"G\n\017PBC2GEqu"
    "ipForge\022\021\n\tequiptype\030\001 \001(\r\022!\n\npbitemdata"
    "\030\002 \003(\0132\r.PBDelItemata\"1\n\017PBG2CEquipForge"
    "\022\021\n\tequiptype\030\001 \001(\r\022\013\n\003exp\030\002 \001(\r\"7\n\021PBC2"
    "GEquipInherit\022\020\n\010sourcesn\030\001 \001(\004\022\020\n\010targe"
    "tsn\030\002 \001(\004\"8\n\021PBG2CEquipInherit\022\020\n\010itemsn"
    "id\030\001 \001(\004\022\021\n\tspecialid\030\002 \003(\r\".\n\016PBC2GEqui"
    "pMake\022\016\n\006makeid\030\001 \001(\r\022\014\n\004mark\030\002 \001(\r\".\n\016P"
    "BG2CEquipMake\022\016\n\006makeid\030\001 \001(\r\022\014\n\004mark\030\002 "
    "\001(\r\" \n\rPBC2GMounting\022\017\n\007ismount\030\001 \001(\010\" \n"
    "\rPBG2CMounting\022\017\n\007mountid\030\001 \001(\r\"G\n\024PBC2G"
    "ItemCompoundAsk\022\020\n\010recipeid\030\001 \001(\r\022\035\n\007ite"
    "mnum\030\002 \003(\0132\014.PBItemSnNum\"\036\n\034PBC2GItemOpe"
    "nEquipMakeDlgAsk\"&\n\024PBG2CItemCompoundAck"
    "\022\016\n\006itemid\030\001 \001(\r\"Y\n\034PBG2CItemOpenEquipMa"
    "keDlgAck\022)\n\014skilledInfos\030\001 \003(\0132\023.PBEquip"
    "MakeSkilled\022\016\n\006vigour\030\002 \001(\r\"!\n\037PBC2GItem"
    "OpenEquipMakeOEMDlgAsk\"e\n\036PBC2GItemCommi"
    "tEquipMakeOEMAsk\022\034\n\003oem\030\001 \001(\0132\017.PBEquipM"
    "akeOEM\022\021\n\tisremoved\030\002 \001(\010\022\022\n\nisclearall\030"
    "\003 \001(\010\"1\n\035PBC2GItemVisitEquipMakeOEMAsk\022\020"
    "\n\010playerID\030\001 \001(\r\"b\n\037PBG2CItemOpenEquipMa"
    "keOEMDlgAck\022\034\n\003oem\030\001 \003(\0132\017.PBEquipMakeOE"
    "M\022\016\n\006vigour\030\002 \001(\r\022\021\n\tvigourMax\030\003 \001(\r\" \n\036"
    "PBG2CItemCommitEquipMakeOEMAck\"=\n\035PBG2CI"
    "temVisitEquipMakeOEMAck\022\034\n\003oem\030\001 \003(\0132\017.P"
    "BEquipMakeOEM\"J\n\030PBC2GItemEquipMakeOEMAs"
    "k\022\016\n\006makeID\030\001 \001(\r\022\014\n\004mark\030\002 \001(\r\022\020\n\010playe"
    "rID\030\003 \001(\r\"\032\n\030PBG2CItemEquipMakeOEMAck\"<\n"
    "\035PBC2GItemEquipChangeOEMFeeAsk\022\016\n\006makeID"
    "\030\001 \001(\r\022\013\n\003fee\030\002 \001(\r\"\037\n\035PBG2CItemEquipCha"
    "ngeOEMFeeAck\"#\n\020PBC2GQuestAccept\022\017\n\007ques"
    "tid\030\001 \001(\r\"+\n\020PBG2CQuestAccept\022\027\n\005quest\030\001"
    " \001(\0132\010.PBQuest\"%\n\022PBC2GQuestComplete\022\017\n\007"
    "questid\030\001 \001(\r\"%\n\022PBG2CQuestComplete\022\017\n\007q"
    "uestid\030\001 \001(\r\"E\n\024PBC2GQuestUpdateItem\022\017\n\007"
    "questid\030\001 \001(\r\022\r\n\005tarid\030\002 \001(\r\022\r\n\005count\030\003 "
    "\001(\r\"E\n\024PBG2CQuestUpdateItem\022\017\n\007questid\030\001"
    " \001(\r\022\r\n\005tarid\030\002 \001(\r\022\r\n\005count\030\003 \001(\r\"#\n\020PB"
    "C2GQuestGiveUp\022\017\n\007questid\030\001 \001(\r\"#\n\020PBG2C"
    "QuestGiveUp\022\017\n\007questid\030\001 \001(\r\"W\n\rPBC2GSto"
    "reBuy\022\021\n\tstoretype\030\001 \001(\r\022\022\n\ngoodsindex\030\002"
    " \001(\r\022\r\n\005count\030\003 \001(\r\022\020\n\010friendid\030\004 \001(\r\"r\n"
    "\rPBG2CStoreBuy\022\021\n\tstoretype\030\001 \001(\r\022\022\n\ngoo"
    "dsindex\030\002 \001(\r\022\r\n\005count\030\003 \001(\r\022\014\n\004time\030\004 \001"
    "(\r\022\r\n\005score\030\005 \001(\r\022\016\n\006isGift\030\006 \001(\r\"3\n\016PBG"
    "2CExpendSyn\022\022\n\nexpendtype\030\001 \001(\r\022\r\n\005value"
    "\030\002 \001(\004\"0\n\nPBG2CAddHp\022\020\n\010objectid\030\001 \001(\r\022\020"
    "\n\010addvalue\030\002 \001(\005\"\037\n\013PBG2CAddExp\022\020\n\010expva"
    "lue\030\001 \001(\004\"\036\n\016PBG2CClearData\022\014\n\004type\030\001 \001("
    "\r\"0\n\rPBG2CAddLevel\022\020\n\010objectid\030\001 \001(\r\022\r\n\005"
    "level\030\002 \001(\r\"#\n\020PBC2GPrizeAccept\022\017\n\007prize"
    "sn\030\001 \001(\004\"$\n\021PBC2GPrizeAbandon\022\017\n\007prizesn"
    "\030\001 \001(\004\"(\n\rPBG2CPrizeNew\022\027\n\005prize\030\001 \001(\0132\010"
    ".PBPrize\"$\n\020PBC2GTrade_apply\022\020\n\010targetid"
    "\030\001 \001(\r\"0\n\021PBC2GTrade_answer\022\017\n\007applyid\030\001"
    " \001(\r\022\n\n\002ok\030\002 \001(\010\"5\n\022PBC2GTrade_addItem\022\016"
    "\n\006itemsn\030\001 \001(\004\022\017\n\007itemnum\030\002 \001(\r\"$\n\022PBC2G"
    "Trade_delItem\022\016\n\006itemsn\030\001 \001(\004\"7\n\023PBC2GTr"
    "ade_setMoney\022\021\n\tmoneytype\030\001 \001(\r\022\r\n\005money"
    "\030\002 \001(\004\"4\n\020PBG2CTrade_begin\022 \n\006target\030\001 \001"
    "(\0132\020.PBPlayerDisplay\"2\n\016PBG2CTrade_end\022\016"
    "\n\006reason\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\r\"=\n\022PBG2"
    "CTrade_addItem\022\020\n\010playerid\030\001 \001(\r\022\025\n\004item"
    "\030\002 \001(\0132\007.PBItem\"6\n\022PBG2CTrade_delItem\022\020\n"
    "\010playerid\030\001 \001(\r\022\016\n\006itemsn\030\002 \001(\004\"I\n\023PBG2C"
    "Trade_setMoney\022\020\n\010playerid\030\001 \001(\r\022\021\n\tmone"
    "ytype\030\002 \001(\r\022\r\n\005money\030\003 \001(\004\"#\n\017PBG2CTrade"
    "_lock\022\020\n\010playerid\030\001 \001(\r\";\n\021PBG2CTrade_un"
    "lock\022\020\n\010playerid\030\001 \001(\r\022\024\n\014lockcooltime\030\002"
    " \001(\r\"&\n\022PBG2CTrade_confirm\022\020\n\010playerid\030\001"
    " \001(\r\"<\n\027PBG2CTrade_applyTrasfer\022!\n\007apply"
    "er\030\001 \001(\0132\020.PBPlayerDisplay\"H\n\030PBG2CTrade"
    "_answerTrasfer\022 \n\006player\030\001 \001(\0132\020.PBPlaye"
    "rDisplay\022\n\n\002ok\030\002 \001(\010\"B\n\027PBG2CSaleMoney_t"
    "radelog\022\'\n\003log\030\001 \003(\0132\032.PBSaleMoneyRecent"
    "TradeLog\"A\n\023PBC2GSaleMoney_sale\022\014\n\004type\030"
    "\001 \001(\r\022\014\n\004cash\030\002 \001(\r\022\016\n\006sliver\030\003 \001(\004\",\n\031P"
    "BC2GSaleMoney_salecancel\022\017\n\007orderid\030\001 \001("
    "\004\"7\n\027PBG2CSaleMoney_ListInfo\022\014\n\004cash\030\001 \001"
    "(\004\022\016\n\006sliver\030\002 \001(\004\"x\n\023PBG2CSaleMoney_lis"
    "t\022\022\n\nave_sliver\030\001 \001(\r\022&\n\004sale\030\002 \003(\0132\030.PB"
    "G2CSaleMoney_ListInfo\022%\n\003buy\030\003 \003(\0132\030.PBG"
    "2CSaleMoney_ListInfo\"#\n\017PBC2GFindPlayer\022"
    "\020\n\010playerid\030\001 \001(\r\"0\n\017PBG2CFindPlayer\022\035\n\006"
    "pbView\030\001 \001(\0132\r.PBPlayerView\"J\n\021PBC2GAuct"
    "ion_sale\022\016\n\006itemSN\030\001 \001(\004\022\022\n\nunitSliver\030\002"
    " \001(\r\022\021\n\tsaleCount\030\003 \001(\r\".\n\027PBC2GAuction_"
    "salecancel\022\023\n\013saleOrderID\030\001 \001(\004\"M\n\020PBC2G"
    "Auction_buy\022\023\n\013saleOrderID\030\001 \001(\004\022\022\n\nunit"
    "Sliver\030\002 \001(\r\022\020\n\010buyCount\030\003 \001(\r\"@\n\027PBAuct"
    "ionFilterItemType\022\020\n\010itemtype\030\001 \001(\r\022\023\n\013i"
    "temsubtype\030\002 \001(\r\"\352\001\n\021PBC2GAuction_list\022\024"
    "\n\014client_param\030\001 \001(\r\022-\n\013type_filter\030\002 \003("
    "\0132\030.PBAuctionFilterItemType\022\026\n\016quality_f"
    "ilter\030\003 \003(\r\022\021\n\tid_filter\030\004 \003(\r\022\023\n\013attr_f"
    "ilter\030\005 \003(\r\022\021\n\tsort_type\030\006 \001(\r\022\023\n\013begin_"
    "index\030\007 \001(\r\022\021\n\tend_index\030\010 \001(\r\022\025\n\rsortas"
    "cending\030\t \001(\010\"\"\n\020PBC2GAuction_ave\022\016\n\006ite"
    "mid\030\001 \001(\r\"^\n\021PBG2CAuction_list\022\024\n\014client"
    "_param\030\001 \001(\r\022\021\n\tall_count\030\002 \001(\r\022 \n\004list\030"
    "\003 \003(\0132\022.PBAuctionItemInfo\"6\n\020PBG2CAuctio"
    "n_ave\022\016\n\006itemid\030\001 \001(\r\022\022\n\nunitsliver\030\002 \001("
    "\r\"[\n\020PBC2GTopListList\022$\n\010sorttype\030\001 \001(\0132"
    "\022.PBTopListSortType\022\022\n\nbeginorder\030\002 \001(\r\022"
    "\r\n\005count\030\003 \001(\r\"1\n\017PBC2GTopListOne\022\014\n\004typ"
    "e\030\001 \001(\r\022\020\n\010targetid\030\002 \001(\r\"(\n\030PBC2GTopLis"
    "tSetClearTime\022\014\n\004time\030\001 \001(\r\"\206\001\n\017PBTopLis"
    "tDetail\022\033\n\004view\030\001 \001(\0132\r.PBPlayerView\022)\n\016"
    "FactionDisplay\030\002 \001(\0132\021.PBFactionDisplay\022"
    "\034\n\004info\030\003 \001(\0132\016.PBTopListInfo\022\r\n\005order\030\004"
    " \001(\r\"d\n\020PBS2CTopListList\022\036\n\003ask\030\001 \001(\0132\021."
    "PBC2GTopListList\022\020\n\010allcount\030\002 \001(\r\022\036\n\004li"
    "st\030\003 \003(\0132\020.PBTopListDetail\"N\n\017PBS2CTopLi"
    "stOne\022\035\n\003ask\030\001 \001(\0132\020.PBC2GTopListOne\022\034\n\004"
    "data\030\002 \001(\0132\016.PBTopListData\"4\n\022PBC2GFrien"
    "d_AddAsk\022\014\n\004type\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\r"
    "\"4\n\022PBC2GFriend_DelAsk\022\014\n\004type\030\001 \001(\r\022\020\n\010"
    "playerid\030\002 \001(\r\"4\n\022PBC2GFriend_Answer\022\014\n\004"
    "type\030\001 \001(\r\022\020\n\010targetid\030\002 \001(\r\" \n\020PBC2GFri"
    "end_Find\022\014\n\004name\030\001 \001(\t\"I\n\020PBFriendFindIn"
    "fo\022!\n\007display\030\001 \001(\0132\020.PBPlayerDisplay\022\022\n"
    "\nfightpower\030\002 \001(\r\"3\n\020PBG2CFriend_Find\022\037\n"
    "\004info\030\001 \003(\0132\021.PBFriendFindInfo\"`\n\031PBG2CF"
    "riend_AddAskTrasfer\022\014\n\004type\030\001 \001(\r\022!\n\007dis"
    "play\030\002 \001(\0132\020.PBPlayerDisplay\022\022\n\nfightpow"
    "er\030\003 \001(\r\"=\n\020PBG2CFriend_Info\022\014\n\004type\030\001 \001"
    "(\r\022\033\n\004info\030\002 \001(\0132\r.PBFriendInfo\"$\n\022PBC2G"
    "Common_PKType\022\016\n\006pktype\030\001 \001(\r\"$\n\022PBG2CCo"
    "mmon_PKType\022\016\n\006pktype\030\001 \001(\r\">\n\031PBC2GComm"
    "onForbitSpeakAsk\022\017\n\007channel\030\001 \001(\r\022\020\n\010pla"
    "yerid\030\002 \001(\r\"(\n\031PBC2GCommonStrongerReWard"
    "\022\013\n\003uID\030\001 \001(\r\"\032\n\030PBC2GCommonSubFightPowe"
    "r\"&\n\024PBC2GCopymapUnactive\022\016\n\006unitid\030\001 \001("
    "\r\">\n\024PBG2Relive_SceneBorn\022\021\n\tfreecount\030\001"
    " \001(\r\022\023\n\013relivecount\030\002 \001(\r\"J\n\025PBG2CCommon"
    "_TimeEvent\022\016\n\006newday\030\001 \001(\010\022\017\n\007newweek\030\002 "
    "\001(\010\022\020\n\010newmonth\030\003 \001(\010\"8\n\025PBC2SWenTao_Set"
    "BingFa\022\r\n\005index\030\001 \001(\r\022\020\n\010bingfaid\030\002 \001(\r\""
    "O\n\025PBC2SWenTao_SetScheme\022\020\n\010schemeid\030\001 \001"
    "(\r\022$\n\004info\030\002 \003(\0132\026.PBC2SWenTao_SetBingFa"
    "\"\'\n\023PBC2SWenTao_QianXiu\022\020\n\010bingfaid\030\001 \001("
    "\r\"$\n\020PBC2SWenTao_TuPo\022\020\n\010bingfaid\030\001 \001(\r\""
    ":\n\023PBC2SWenTao_Upgrate\022\020\n\010bingfaid\030\001 \001(\r"
    "\022\021\n\tyaodianid\030\002 \001(\r\"N\n\025PBC2SWenTao_SetBi"
    "ngfu\022\020\n\010bingfaid\030\001 \001(\r\022\021\n\tyaodianid\030\002 \001("
    "\r\022\020\n\010bingfusn\030\003 \001(\r\"%\n\021PBC2SWenTao_Reset"
    "\022\020\n\010bingfaid\030\001 \001(\r\",\n\030PBC2SWenTao_Active"
    "Scheme\022\020\n\010schemeid\030\001 \001(\r\",\n\030PBC2SWenTao_"
    "ActiveBingFa\022\020\n\010bingfaid\030\001 \001(\r\"C\n\031PBC2SW"
    "enTao_QianXiuUpdate\022\020\n\010bingfaid\030\001 \001(\r\022\024\n"
    "\014qianxiulevel\030\002 \001(\r\"=\n\026PBC2SWenTao_TuPoU"
    "pdate\022\020\n\010bingfaid\030\001 \001(\r\022\021\n\ttupolevel\030\002 \001"
    "(\r\"i\n\031PBC2SWenTao_YaoDianUpdate\022\020\n\010bingf"
    "aid\030\001 \001(\r\022\021\n\ttupolevel\030\002 \001(\r\022\021\n\tyaodiani"
    "d\030\003 \001(\r\022\024\n\014yaodianlevel\030\004 \001(\r\"*\n\030PBC2SWe"
    "nTao_WisdomUpdate\022\016\n\006wisdom\030\001 \001(\004\"*\n\026PBC"
    "2GWulueSetSchemeAsk\022\020\n\010schemeid\030\001 \001(\r\">\n"
    "\026PBC2GWulueUpZhanlueAsk\022\021\n\twuluetype\030\001 \001"
    "(\r\022\021\n\tyaodianid\030\002 \001(\r\"P\n\026PBC2GWulueSetBi"
    "ngfuAsk\022\021\n\twuluetype\030\001 \001(\r\022\021\n\tyaodianid\030"
    "\002 \001(\r\022\020\n\010bingfusn\030\003 \001(\004\"*\n\026PBG2CWulueSet"
    "SchemeAck\022\020\n\010schemeid\030\001 \001(\r\"P\n\026PBG2CWulu"
    "eUpZhanlueAck\022\021\n\twuluetype\030\001 \001(\r\022\021\n\tyaod"
    "ianid\030\002 \001(\r\022\020\n\010curlevel\030\003 \001(\r\"P\n\026PBG2CWu"
    "lueSetBingfuAck\022\021\n\twuluetype\030\001 \001(\r\022\021\n\tya"
    "odianid\030\002 \001(\r\022\020\n\010bingfusn\030\003 \001(\004\"E\n\025PBC2G"
    "BingfuUpgradeAsk\022\n\n\002sn\030\001 \001(\004\022 \n\006expend\030\002"
    " \003(\0132\020.PBBingfuNumData\"&\n\030PBC2GBingfuUpO"
    "neLevelAsk\022\n\n\002sn\030\001 \001(\004\"7\n\023PBC2GBingfuSpl"
    "itAsk\022 \n\006expend\030\002 \003(\0132\020.PBBingfuNumData\""
    ")\n\025PBG2CBingfuUpgradeAck\022\020\n\010bingfusn\030\001 \001"
    "(\004\"*\n\024PBC2DropItem_InfoAsk\022\022\n\ndropunitid"
    "\030\001 \001(\r\"N\n\024PBC2DropItem_DiceAsk\022\022\n\ndropun"
    "itid\030\001 \001(\r\022\021\n\titemindex\030\002 \001(\r\022\017\n\007abandon"
    "\030\003 \001(\010\"-\n\027PBC2DropItem_PickAllAsk\022\022\n\ndro"
    "punitid\030\001 \001(\r\"\?\n\026PBC2DropItem_PickupAsk\022"
    "\022\n\ndropunitid\030\001 \001(\r\022\021\n\titemindex\030\002 \001(\r\"\?"
    "\n\026PBC2DropItem_AbadonAsk\022\022\n\ndropunitid\030\001"
    " \001(\r\022\021\n\titemindex\030\002 \001(\r\"Q\n\026PBC2DropItem_"
    "AssignAsk\022\022\n\ndropunitid\030\001 \001(\r\022\021\n\titemind"
    "ex\030\002 \001(\r\022\020\n\010targetid\030\003 \001(\r\"7\n\023PBDropItem"
    "_DiceInfo\022\020\n\010memberid\030\001 \001(\r\022\016\n\006number\030\002 "
    "\001(\r\"\212\001\n\023PBDropItem_DropCell\022\017\n\007itemidx\030\001"
    " \001(\r\022\016\n\006itemid\030\002 \001(\r\022\017\n\007itemnum\030\003 \001(\r\022\014\n"
    "\004bind\030\004 \001(\010\022\"\n\004dice\030\005 \003(\0132\024.PBDropItem_D"
    "iceInfo\022\017\n\007ownerid\030\006 \001(\r\"\212\001\n\021PBC2DropIte"
    "m_Info\022\022\n\ndropunitid\030\001 \001(\r\022\"\n\004cell\030\002 \003(\013"
    "2\024.PBDropItem_DropCell\022\031\n\004team\030\003 \001(\0132\013.P"
    "BTeamInfo\022\021\n\tallottype\030\004 \001(\r\022\017\n\007endtime\030"
    "\005 \001(\r\"^\n\021PBC2DropItem_Dice\022\022\n\ndropunitid"
    "\030\001 \001(\r\022\021\n\titemindex\030\002 \001(\r\022\"\n\004info\030\003 \001(\0132"
    "\024.PBDropItem_DiceInfo\"p\n\023PBC2DropItem_As"
    "sign\022\022\n\ndropunitid\030\001 \001(\r\022\"\n\004cell\030\002 \001(\0132\024"
    ".PBDropItem_DropCell\022!\n\007display\030\003 \001(\0132\020."
    "PBPlayerDisplay\"R\n\030PBC2DropItem_ChangeAl"
    "lot\022\022\n\ndropunitid\030\001 \001(\r\022\021\n\tallottype\030\002 \001"
    "(\r\022\017\n\007endtime\030\003 \001(\r\"\'\n\026PBC2GCommon_Plane"
    "Enter\022\r\n\005param\030\001 \001(\r\"n\n\026PBC2GCommon_Plan"
    "eLeave\022\014\n\004posx\030\001 \001(\002\022\014\n\004posy\030\002 \001(\002\022\013\n\003di"
    "r\030\003 \001(\002\022\r\n\005curhp\030\004 \001(\r\022\034\n\tcurenergy\030\005 \003("
    "\0132\t.PBEnergy\"2\n\036PBC2GCommon_RegionTrigge"
    "rPlane\022\020\n\010plane_id\030\001 \001(\r\"-\n\030PBS2GCommon_"
    "TakeASeatAck\022\021\n\tisSitDown\030\001 \001(\010\"9\n\027PBG2C"
    "Common_PlaneUpdate\022\036\n\004attr\030\001 \001(\0132\020.PBGho"
    "stGameAttr\"6\n\022PBC2GCopymapCreate\022\021\n\tcopy"
    "mapid\030\001 \001(\r\022\r\n\005param\030\002 \001(\r\"<\n\024PBC2GCopym"
    "apEnterNpc\022\021\n\tcopymapid\030\001 \001(\r\022\021\n\tnpcunit"
    "id\030\002 \001(\r\"%\n\020PBC2GCopymapExit\022\021\n\tcopymapi"
    "d\030\001 \001(\r\"9\n\022PBC2GCopymapInvite\022\020\n\010targeti"
    "d\030\001 \001(\r\022\021\n\tcopymapid\030\002 \001(\r\"R\n\032PBG2CCopym"
    "apInviteTransfer\022!\n\007display\030\001 \001(\0132\020.PBPl"
    "ayerDisplay\022\021\n\tcopymapid\030\002 \001(\r\"O\n\030PBC2GC"
    "opymapAcceptInvite\022\020\n\010targetid\030\001 \001(\r\022\021\n\t"
    "copymapid\030\002 \001(\r\022\016\n\006accept\030\003 \001(\010\"\215\001\n\021PBG2"
    "CCopymapState\022\r\n\005state\030\001 \001(\r\022\017\n\007endtime\030"
    "\002 \001(\r\022\024\n\014completetime\030\003 \001(\r\022\024\n\014completet"
    "ype\030\004 \001(\r\022\017\n\007prizeid\030\005 \003(\r\022\033\n\007itemnum\030\006 "
    "\003(\0132\n.PBItemNum\"$\n\017PBG2CReadyStart\022\021\n\tle"
    "ftscond\030\001 \001(\r\"4\n\024PBG2CCopymapCloseTip\022\016\n"
    "\006chatid\030\001 \001(\r\022\014\n\004time\030\002 \001(\r\"8\n\035PBG2CCopy"
    "mapFindAttackMonster\022\027\n\005point\030\001 \001(\0132\010.PB"
    "Point\"7\n\027PBG2CCopymapQuestTarget\022\r\n\005tari"
    "d\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"K\n\021PBG2CCopymapQu"
    "est\022%\n\003tar\030\001 \003(\0132\030.PBG2CCopymapQuestTarg"
    "et\022\017\n\007questid\030\002 \001(\r\"*\n\027PBG2CCopymapChang"
    "eQuest\022\017\n\007questid\030\001 \001(\r\"L\n\024PBG2CCopymapH"
    "urtInfo\022!\n\007display\030\001 \001(\0132\020.PBPlayerDispl"
    "ay\022\021\n\thurtvalue\030\002 \001(\004\"U\n\022PBCopymapGuardI"
    "nfo\022\016\n\006unitid\030\001 \001(\r\022\021\n\tmonsterid\030\002 \001(\r\022\r"
    "\n\005maxhp\030\003 \001(\r\022\r\n\005curhp\030\004 \001(\r\"A\n\026PBG2CCop"
    "ymapSysGuardHp\022\'\n\npbGurdInfo\030\001 \003(\0132\023.PBC"
    "opymapGuardInfo\"1\n\022PBG2CPoemActivePos\022\016\n"
    "\006poemid\030\001 \001(\r\022\013\n\003pos\030\002 \001(\r\"0\n\017PBG2CLiang"
    "yiNum\022\020\n\010totalnum\030\001 \001(\r\022\013\n\003num\030\002 \003(\r\"J\n\020"
    "PBG2CCopymapWave\022\022\n\ncopymappid\030\001 \001(\r\022\021\n\t"
    "totalwave\030\002 \001(\r\022\017\n\007curwave\030\003 \001(\r\"p\n\023PBG2"
    "CSixiangMonster\022+\n\014pbsubmonster\030\001 \003(\0132\025."
    "PBSixiangMonsterInfo\022,\n\rpbmainmonster\030\002 "
    "\001(\0132\025.PBSixiangMonsterInfo\".\n\027PBG2CCopym"
    "apAssistCount\022\023\n\013assistcount\030\001 \001(\r\"\'\n\025PB"
    "G2CCopymapEnterInfo\022\016\n\006assist\030\001 \001(\010\"/\n\032P"
    "BC2GCopymapTeamMemberInfo\022\021\n\tcopymapid\030\001"
    " \001(\r\">\n\026PBG2CCopymapTeamMember\022\020\n\010player"
    "id\030\001 \001(\r\022\022\n\nentercount\030\002 \001(\r\"V\n\032PBG2CCop"
    "ymapTeamMemberInfo\022\021\n\tcopymapid\030\001 \001(\r\022%\n"
    "\004info\030\002 \003(\0132\027.PBG2CCopymapTeamMember\"d\n\021"
    "PBManorLineUpInfo\022\020\n\010regionid\030\001 \001(\r\022\023\n\013i"
    "nsidecount\030\002 \001(\r\022\023\n\013lineupcount\030\003 \001(\r\022\023\n"
    "\013insidelimit\030\004 \001(\r\"U\n\037PBG2CCopymapManorL"
    "obbyLineupNtf\022\017\n\007manorid\030\001 \001(\r\022!\n\005lines\030"
    "\002 \003(\0132\022.PBManorLineUpInfo\"=\n%PBG2CCopyma"
    "pManorBattleFieldShenfuNtf\022\024\n\014ischalleng"
    "er\030\001 \001(\010\"]\n\032PBManorBattleFieldComrades\022!"
    "\n\007display\030\001 \001(\0132\020.PBPlayerDisplay\022\r\n\005cur"
    "hp\030\002 \001(\005\022\r\n\005maxhp\030\003 \001(\005\"X\n\'PBG2CCopymapM"
    "anorBattleFieldComradesNtf\022-\n\010comrades\030\001"
    " \003(\0132\033.PBManorBattleFieldComrades\"9\n\016PBF"
    "actionScore\022\023\n\013factionname\030\001 \001(\t\022\022\n\ntota"
    "lscore\030\002 \001(\r\"\207\001\n)PBG2CCopymapManorBattle"
    "FieldTotalScoreNtf\022!\n\010defender\030\001 \001(\0132\017.P"
    "BFactionScore\022#\n\nchallenger\030\002 \001(\0132\017.PBFa"
    "ctionScore\022\022\n\nleftsecond\030\003 \001(\r\"V\n#PBG2CC"
    "opymapManorBroadCastPromptNtf\022\014\n\004type\030\001 "
    "\001(\r\022\016\n\006argnum\030\002 \003(\r\022\021\n\targstring\030\003 \003(\t\"Y"
    "\n\024PBG2CCommon_BossInfo\022\017\n\007sceneid\030\001 \001(\r\022"
    "\016\n\006cellid\030\002 \001(\r\022\021\n\tmonsterid\030\003 \001(\r\022\r\n\005al"
    "ive\030\004 \001(\010\";\n\024PBG2CCommon_BossList\022#\n\004inf"
    "o\030\001 \003(\0132\025.PBG2CCommon_BossInfo\"1\n\022PBC2GC"
    "ommon_FlyAsk\022\017\n\007flyType\030\001 \001(\r\022\n\n\002ID\030\002 \001("
    "\r\"\024\n\022PBG2CCommon_FlyAck\";\n\026PBC2GCommon_T"
    "askFlyAsk\022\017\n\007sceneid\030\001 \001(\r\022\020\n\010regionid\030\002"
    " \001(\r\"\030\n\026PBG2CCommon_TaskFlyAck\"\262\001\n\036PBG2C"
    "Common_DazuoguajiTotalNtf\022\036\n\026dailyDazuog"
    "uajiExpLeft\030\001 \001(\r\022!\n\031dailyDazuoguajiWisd"
    "omLeft\030\002 \001(\r\022\022\n\nshowPrompt\030\003 \001(\010\022\020\n\010expA"
    "dded\030\004 \001(\r\022\023\n\013wisdomAdded\030\005 \001(\r\022\022\n\nclose"
    "Panel\030\006 \001(\010\"%\n\020PBG2CUpBingfuExp\022\021\n\tbingf"
    "uexp\030\001 \001(\004\"\?\n\030PBG2CCommonTreasurePrize\022\017"
    "\n\007prizeid\030\001 \001(\r\022\022\n\ntreasureid\030\002 \001(\r\"*\n\026P"
    "BG2CCommonSetCorpsJob\022\020\n\010corpsjob\030\001 \001(\r\""
    "(\n\031PBG2CCommonStrongerReWard\022\013\n\003uID\030\001 \001("
    "\r\"1\n\017PBG2CFightPower\022\n\n\002id\030\001 \001(\r\022\022\n\nfigh"
    "tpower\030\002 \001(\r\":\n\030PBG2CCommonSubFightPower"
    "\022\036\n\004info\030\001 \003(\0132\020.PBG2CFightPower\")\n\033PBG2"
    "CCommon_SystemSwitchAck\022\n\n\002ID\030\001 \001(\r\"\026\n\024P"
    "BC2GCommonPromotion\"%\n\025PBG2CCommon_Promo"
    "tion\022\014\n\004Step\030\001 \001(\005\"%\n\024PBC2GIdentityOpenA"
    "sk\022\r\n\005setid\030\001 \001(\r\"%\n\024PBG2CIdentityOpenAc"
    "k\022\r\n\005setid\030\001 \001(\r\":\n\025PBC2GIdentityLearnAs"
    "k\022\r\n\005setid\030\001 \001(\r\022\022\n\nidentityid\030\002 \001(\r\":\n\025"
    "PBG2CIdentityLearnAck\022\r\n\005setid\030\001 \001(\r\022\022\n\n"
    "identityid\030\002 \001(\r\"&\n\025PBC2GIdentityResetAs"
    "k\022\r\n\005setid\030\001 \001(\r\"9\n\025PBG2CIdentityResetAc"
    "k\022\r\n\005setid\030\001 \001(\r\022\021\n\tresettime\030\002 \001(\r\"9\n\027P"
    "BC2GIdentityUpSkillAsk\022\r\n\005setid\030\001 \001(\r\022\017\n"
    "\007skillid\030\002 \001(\r\"M\n\027PBG2CIdentityUpSkillAc"
    "k\022\r\n\005setid\030\001 \001(\r\022\017\n\007skillid\030\002 \001(\r\022\022\n\nski"
    "lllevel\030\003 \001(\r\"\022\n\020PBC2GWuxueNewAsk\"\"\n\020PBG"
    "2CWuxueNewAck\022\016\n\006nameid\030\001 \001(\r\"%\n\020PBC2GWu"
    "xueDelAsk\022\021\n\tschemenum\030\001 \001(\r\"%\n\020PBG2CWux"
    "ueDelAck\022\021\n\tschemenum\030\001 \001(\r\"\025\n\023PBC2GWuxu"
    "eChangeAsk\"(\n\023PBG2CWuxueChangeAck\022\021\n\tsch"
    "emenum\030\001 \001(\r\"O\n\025PBC2GWuxueSetSkillAsk\022\021\n"
    "\tschemenum\030\001 \001(\r\022\022\n\nskillindex\030\002 \001(\r\022\017\n\007"
    "skillid\030\003 \001(\r\"O\n\025PBG2CWuxueSetSkillAck\022\021"
    "\n\tschemenum\030\001 \001(\r\022\022\n\nskillindex\030\002 \001(\r\022\017\n"
    "\007skillid\030\003 \001(\r\"V\n\030PBC2GWuxueSetAllSkillA"
    "sk\022\021\n\tschemenum\030\001 \001(\r\022\'\n\tskilldata\030\002 \003(\013"
    "2\024.PBWuxueSetSkillData\"V\n\030PBG2CWuxueSetA"
    "llSkillAck\022\021\n\tschemenum\030\001 \001(\r\022\'\n\tskillda"
    "ta\030\002 \003(\0132\024.PBWuxueSetSkillData\"]\n\027PBC2GW"
    "uxueLearnSkillAsk\022\021\n\tschemenum\030\001 \001(\r\022\014\n\004"
    "page\030\002 \001(\r\022\r\n\005index\030\003 \001(\r\022\022\n\nnewskillid\030"
    "\004 \001(\r\"]\n\027PBG2CWuxueLearnSkillAck\022\021\n\tsche"
    "menum\030\001 \001(\r\022\014\n\004page\030\002 \001(\r\022\r\n\005index\030\003 \001(\r"
    "\022\022\n\nnewskillid\030\004 \001(\r\">\n\030PBC2GCommon_Sear"
    "chPlayer\022\024\n\014clientparam1\030\001 \001(\t\022\014\n\004name\030\002"
    " \001(\t\"k\n\030PBG2CCommon_SearchPlayer\022&\n\003msg\030"
    "\001 \001(\0132\031.PBC2GCommon_SearchPlayer\022\'\n\rplay"
    "erdisplay\030\002 \001(\0132\020.PBPlayerDisplay\"h\n\027PBG"
    "2CCommon_MonsterTalk\022\016\n\006unitid\030\001 \001(\r\022\021\n\t"
    "monsterid\030\002 \001(\r\022\014\n\004posx\030\003 \001(\002\022\014\n\004posy\030\004 "
    "\001(\002\022\016\n\006talkid\030\005 \001(\r\"\032\n\030PBG2CCommon_BeFin"
    "dNotice\"/\n\035PBC2GCommon_NpcDialogComplete"
    "\022\016\n\006unitID\030\001 \001(\r\"-\n\033PBC2GCommon_UnActive"
    "Monster\022\016\n\006unitID\030\001 \001(\r\"R\n\027PBG2CCommon_S"
    "etPosition\022\016\n\006unitID\030\001 \001(\r\022\014\n\004posx\030\002 \002(\002"
    "\022\014\n\004posy\030\003 \002(\002\022\013\n\003dir\030\004 \002(\002\":\n\033PBG2CComm"
    "on_DayCopymapCount\022\014\n\004type\030\001 \001(\r\022\r\n\005coun"
    "t\030\002 \001(\r\"1\n!PBC2GCommonGetBattleAttrDetai"
    "lAsk\022\014\n\004type\030\001 \001(\r\"\032\n\030PBG2CCommon_TakeAS"
    "eatAsk\"6\n\021PBC2SDartCheckAsk\022\016\n\006dartID\030\001 "
    "\001(\r\022\021\n\tnpcUnitID\030\002 \001(\r\"e\n\030PBDartMemberRe"
    "sourceInfo\022\020\n\010playerID\030\001 \001(\r\022\021\n\titemCoun"
    "t\030\002 \001(\r\022\021\n\tdartCount\030\003 \001(\r\022\021\n\tnotAround\030"
    "\004 \001(\010\"L\n\021PBS2CDartCheckAck\022\016\n\006dartID\030\001 \001"
    "(\r\022\'\n\004info\030\002 \003(\0132\031.PBDartMemberResourceI"
    "nfo\"6\n\021PBC2SDartStartAsk\022\016\n\006dartID\030\001 \001(\r"
    "\022\021\n\tnpcUnitID\030\002 \001(\r\"\022\n\020PBC2SDartQuitAsk\""
    "\037\n\nPBDartInfo\022\021\n\tprizeTime\030\001 \001(\r\"B\n\021PBS2"
    "CDartStartAck\022\016\n\006dartID\030\001 \001(\r\022\035\n\010dartInf"
    "o\030\002 \001(\0132\013.PBDartInfo\"M\n\020PBS2CDartInfoNtf"
    "\022\033\n\023dartLeftCountNormal\030\001 \001(\r\022\034\n\024dartLef"
    "tCountTianxia\030\002 \001(\r\"-\n\026PBS2CDartCheckPau"
    "seNtf\022\023\n\013needConfirm\030\001 \001(\r\"\032\n\030PBC2SDartC"
    "heckConfirmAsk\"\032\n\030PBC2SDartCheckGetBuffA"
    "sk\"\'\n\025PBS2CDartStartMoveNtf\022\016\n\006leftCD\030\001 "
    "\001(\r\"*\n\024PBS2CDartStartRobNtf\022\022\n\nstartRobC"
    "D\030\001 \001(\r\"{\n\032PBS2CDartFinishAndPrizeNtf\022\016\n"
    "\006dartID\030\001 \001(\r\022\016\n\006reason\030\002 \001(\r\022\026\n\016memberP"
    "layerID\030\003 \003(\r\022\021\n\tmoneytype\030\004 \001(\r\022\022\n\nmone"
    "ycount\030\005 \001(\004\"*\n\030PBS2CDartCheckGetBuffAck"
    "\022\016\n\006buffID\030\001 \001(\r\"\027\n\025PBC2SDartAddSupplyAs"
    "k\"\036\n\034PBC2SDartAddSupplyConfirmAsk\"8\n\025PBS"
    "2CDartFinishRobNtf\022\016\n\006reason\030\001 \001(\r\022\017\n\007le"
    "aveCD\030\002 \001(\r\"D\n\023PBDartAddSupplyInfo\022\014\n\004na"
    "me\030\001 \001(\t\022\r\n\005count\030\002 \001(\r\022\020\n\010playerID\030\003 \001("
    "\r\"y\n\025PBS2CDartAddSupplyNtf\022%\n\007addInfo\030\001 "
    "\003(\0132\024.PBDartAddSupplyInfo\022\020\n\010isLeader\030\002 "
    "\001(\010\022\017\n\007isClose\030\003 \001(\010\022\026\n\016leaderPlayerID\030\004"
    " \001(\r\"\'\n\025PBS2CDartAddSupplyAck\022\016\n\006result\030"
    "\001 \001(\r\"\022\n\020PBS2CDartQuitAck\"\032\n\030PBS2CDartCh"
    "eckConfirmAck\"\036\n\034PBS2CDartAddSupplyConfi"
    "rmAck\"&\n\024PBC2SDartBack2NpcAsk\022\016\n\006dartID\030"
    "\001 \001(\r\"\026\n\024PBS2CDartBack2NpcAck\";\n\026PBC2GFa"
    "ctionBossTopAsk\022\022\n\nbeginorder\030\001 \001(\r\022\r\n\005c"
    "ount\030\002 \001(\r\"\276\001\n\036PBC2GFactionBossPersonalT"
    "opAck\022$\n\003ask\030\001 \001(\0132\027.PBC2GFactionBossTop"
    "Ask\022\020\n\010allcount\030\002 \001(\r\022\022\n\nwholescore\030\003 \001("
    "\004\022\'\n\004self\030\004 \001(\0132\031.PBFactionBossPersonalT"
    "op\022\'\n\004list\030\005 \003(\0132\031.PBFactionBossPersonal"
    "Top\"\273\001\n\035PBC2GFactionBossFactionTopAck\022$\n"
    "\003ask\030\001 \001(\0132\027.PBC2GFactionBossTopAsk\022\020\n\010a"
    "llcount\030\002 \001(\r\022\022\n\nwholescore\030\003 \001(\004\022&\n\004sel"
    "f\030\004 \001(\0132\030.PBFactionBossFactionTop\022&\n\004lis"
    "t\030\005 \003(\0132\030.PBFactionBossFactionTop\"\265\001\n\033PB"
    "C2GFactionBossUnionTopAck\022$\n\003ask\030\001 \001(\0132\027"
    ".PBC2GFactionBossTopAsk\022\020\n\010allcount\030\002 \001("
    "\r\022\022\n\nwholescore\030\003 \001(\004\022$\n\004self\030\004 \001(\0132\026.PB"
    "FactionBossUnionTop\022$\n\004list\030\005 \003(\0132\026.PBFa"
    "ctionBossUnionTop\"$\n\022PBS2CSceneAreaList\022"
    "\016\n\006areaid\030\001 \003(\r\";\n\025PBS2CQinggongStartNtf"
    "\022\016\n\006unitid\030\001 \001(\r\022\022\n\nqinggongid\030\002 \001(\r\"7\n\022"
    "PBBattleAttrDetail\022\022\n\nsourcetype\030\001 \001(\r\022\r"
    "\n\005value\030\002 \001(\005\"_\n\033PBS2CGetBattleAttrDetai"
    "lAck\022\014\n\004type\030\001 \001(\r\022#\n\006detail\030\002 \003(\0132\023.PBB"
    "attleAttrDetail\022\r\n\005total\030\003 \001(\005\" \n\022PBC2GT"
    "itleEquipAsk\022\n\n\002id\030\001 \001(\r\" \n\022PBG2CTitleEq"
    "uipAck\022\n\n\002id\030\001 \001(\r\"\"\n\024PBC2GTitleUnEquipA"
    "sk\022\n\n\002id\030\001 \001(\r\"\"\n\024PBG2CTitleUnEquipAck\022\n"
    "\n\002id\030\001 \001(\r\"B\n\020PBG2CTitleAddAck\022\014\n\004type\030\001"
    " \001(\r\022 \n\004info\030\002 \001(\0132\022.PBPlayerTitleInfo\","
    "\n\020PBG2CTitleDelAck\022\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002"
    " \001(\r\"\"\n\024PBC2GFashionEquipAsk\022\n\n\002id\030\001 \001(\r"
    "\"\"\n\024PBG2CFashionEquipAck\022\n\n\002id\030\001 \001(\r\"$\n\026"
    "PBC2GFashionUnEquipAsk\022\n\n\002id\030\001 \001(\r\"$\n\026PB"
    "G2CFashionUnEquipAck\022\n\n\002id\030\001 \001(\r\"\030\n\026PBCl"
    "imbTowerGetInfoAsk\"Q\n\026PBClimbTowerGetInf"
    "oAck\022!\n\004info\030\001 \001(\0132\023.PBPlayerClimbTower\022"
    "\024\n\014canChallenge\030\002 \001(\010\";\n\026PBClimbTowerGet"
    "InfoNtf\022!\n\004info\030\001 \001(\0132\023.PBPlayerClimbTow"
    "er\"=\n\021PBClimbTowerPrize\022\014\n\004type\030\001 \001(\r\022\013\n"
    "\003key\030\002 \001(\r\022\r\n\005count\030\003 \001(\r\"A\n\030PBClimbTowe"
    "rShowPrizeNtf\022%\n\tshwoPrize\030\001 \003(\0132\022.PBCli"
    "mbTowerPrize\"0\n\032PBClimbTowerChoosePrizeA"
    "sk\022\022\n\nprizeIndex\030\001 \001(\r\"\034\n\032PBClimbTowerCh"
    "oosePrizeAck\"+\n\024PBClimbTowerClearAsk\022\023\n\013"
    "rechallenge\030\001 \001(\010\"\026\n\024PBClimbTowerClearAc"
    "k\"\032\n\030PBClimbTowerShowClearNtf\"+\n\032PBC2GAn"
    "swerQuestion_Answer\022\r\n\005right\030\001 \001(\010\"K\n PB"
    "G2CAnswerQuestion_QuestionInfo\022\r\n\005order\030"
    "\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\014\n\004time\030\003 \001(\r\"N\n\"PBG2C"
    "AnswerQuestion_QuestionResult\022\r\n\005order\030\001"
    " \001(\r\022\n\n\002id\030\002 \001(\r\022\r\n\005right\030\003 \001(\010\"I\n\027PBGre"
    "atWallTrainInfoAck\022\021\n\tcopymapid\030\001 \001(\r\022\r\n"
    "\005layer\030\002 \001(\r\022\014\n\004time\030\003 \001(\r\"\032\n\030PBC2SWorld"
    "BossGetInfoAsk\"f\n\017PBWorldBossInfo\022\026\n\016bos"
    "sActivityId\030\001 \001(\r\022\022\n\nbossStatus\030\002 \001(\r\022\022\n"
    "\nlastWinner\030\003 \001(\t\022\023\n\013nextStartCD\030\004 \001(\r\"<"
    "\n\025PBWorldBossGetInfoAck\022#\n\tworldBoss\030\001 \003"
    "(\0132\020.PBWorldBossInfo\"=\n#PBC2SWorldBossUp"
    "dateBossHurtRankAsk\022\026\n\016bossActivityId\030\001 "
    "\001(\r\"\"\n PBWorldBossUpdateBossHurtRankAck\""
    "I\n\016PBBossHurtRank\022\014\n\004rank\030\001 \001(\r\022\014\n\004name\030"
    "\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\014\n\004hurt\030\004 \001(\r\"\220\001\n P"
    "BWorldBossUpdateBossHurtRankNtf\022\036\n\005ranks"
    "\030\001 \003(\0132\017.PBBossHurtRank\022\"\n\tselfRanks\030\002 \003"
    "(\0132\017.PBBossHurtRank\022\020\n\010isClosed\030\003 \001(\010\022\026\n"
    "\016bossActivityId\030\004 \001(\r\"3\n\031PBC2SWorldBossG"
    "otoBossAsk\022\026\n\016bossActivityId\030\001 \001(\r\"\033\n\031PB"
    "S2CWorldBossGotoBossAck\"\'\n\031PBC2SActivity"
    "GetRewardAsk\022\n\n\002id\030\001 \001(\r\"\'\n\031PBC2SActivit"
    "yGetRewardAck\022\n\n\002id\030\001 \001(\r\"J\n\033PBC2SActivi"
    "tyAddLivenessAck\022\n\n\002id\030\001 \001(\r\022\r\n\005count\030\002 "
    "\001(\r\022\020\n\010liveness\030\003 \001(\r\" \n\020PBC2GRelive_Bor"
    "n\022\014\n\004type\030\001 \001(\r\"\206\001\n\021PBG2CCorpsInfoAck\022\032\n"
    "\004base\030\001 \001(\0132\014.PBCorpsInfo\022\020\n\010boomrate\030\002 "
    "\001(\r\022\030\n\020manorfactionname\030\003 \001(\t\022\024\n\014faciont"
    "count\030\004 \001(\r\022\023\n\013membercount\030\005 \001(\r\"*\n\023PBC2"
    "GCorpsSetDecAsk\022\023\n\013declaration\030\001 \001(\t\"*\n\023"
    "PBG2CCorpsSetDecAck\022\023\n\013declaration\030\001 \001(\t"
    "\"9\n\023PBC2GCorpsSetJobAsk\022\020\n\010playerid\030\001 \001("
    "\r\022\020\n\010corpsjob\030\002 \001(\r\"=\n\023PBG2CCorpsSetJobA"
    "ck\022&\n\nmemberinfo\030\001 \001(\0132\022.PBCorpsMemberIn"
    "fo\",\n\030PBC2GCorpsForbitSpeakAsk\022\020\n\010player"
    "id\030\001 \001(\r\"1\n\026PBC2GWealLoginPrizeAsk\022\n\n\002id"
    "\030\001 \001(\r\022\013\n\003day\030\002 \001(\r\"\031\n\027PBC2GManorGetAllI"
    "nfoAsk\"7\n\027PBG2CManorGetAllInfoAck\022\034\n\006man"
    "ors\030\001 \003(\0132\014.PBManorInfo\"\033\n\031PBC2GManorGet"
    "FightInfoAsk\"8\n\031PBG2CManorGetFightInfoAc"
    "k\022\033\n\005manor\030\001 \001(\0132\014.PBManorInfo\"<\n\027PBC2GM"
    "anorApplyFightAsk\022\017\n\007manorid\030\001 \001(\r\022\020\n\010is"
    "cancel\030\002 \001(\010\"\031\n\027PBG2CManorApplyFightAck\""
    "*\n\027PBC2GManorEnterLobbyAsk\022\017\n\007manorid\030\001 "
    "\001(\r\"\031\n\027PBG2CManorEnterLobbyAck\"\031\n\027PBG2CM"
    "anorStartFightNtf\"9\n\024PBC2GManorMVPVoteAs"
    "k\022\020\n\010playerid\030\001 \001(\r\022\017\n\007manorid\030\002 \001(\r\"\026\n\024"
    "PBG2CManorMvpVoteAck\";\n\024PBG2CManorMVPVot"
    "eNtf\022\020\n\010playerid\030\001 \001(\r\022\021\n\tvotecount\030\002 \001("
    "\r\"\030\n\026PBC2GManorGetScoresAsk\"\036\n\034PBC2GMano"
    "rGetPlayerScoresAsk\"Z\n\027PBManorBattleFiel"
    "dScore\022\017\n\007sceneid\030\001 \001(\r\022\025\n\rdefenderscore"
    "\030\002 \001(\r\022\027\n\017challengerscore\030\003 \001(\r\"\214\001\n\026PBG2"
    "CManorGetScoresAck\022$\n\006winner\030\001 \001(\0132\024.PBF"
    "actionChallenger\022#\n\005loser\030\002 \001(\0132\024.PBFact"
    "ionChallenger\022\023\n\013winnerscore\030\003 \001(\r\022\022\n\nlo"
    "serscore\030\004 \001(\r\"\036\n\034PBG2CManorGetPlayerSco"
    "resAck\">\n\nPBManorMVP\022\037\n\006avatar\030\001 \001(\0132\017.P"
    "BPlayerAvatar\022\017\n\007getvote\030\002 \001(\r\"\342\002\n\023PBG2C"
    "ManorResultNtf\022&\n\010defender\030\001 \001(\0132\024.PBFac"
    "tionChallenger\022(\n\nchallenger\030\002 \001(\0132\024.PBF"
    "actionChallenger\022\031\n\004best\030\003 \001(\0132\013.PBManor"
    "MVP\022\030\n\003kda\030\004 \001(\0132\013.PBManorMVP\022\033\n\006killer\030"
    "\005 \001(\0132\013.PBManorMVP\022\035\n\010shielder\030\006 \001(\0132\013.P"
    "BManorMVP\022(\n\006scores\030\007 \003(\0132\030.PBManorBattl"
    "eFieldScore\0224\n\014playerscores\030\010 \003(\0132\036.PBMa"
    "norBattlefieldPlayerScore\022\027\n\017winnerfacti"
    "onid\030\t \001(\r\022\017\n\007manorid\030\n \001(\r", 23347);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CASMsg.proto", &protobuf_RegisterTypes);
  PBLoginAsk::default_instance_ = new PBLoginAsk();
  PBCheckPlayerNameAsk::default_instance_ = new PBCheckPlayerNameAsk();
  PBCreatePlayerAsk::default_instance_ = new PBCreatePlayerAsk();
  PBDelPlayerAsk::default_instance_ = new PBDelPlayerAsk();
  PBSelectPlayerAsk::default_instance_ = new PBSelectPlayerAsk();
  PBLoginAck::default_instance_ = new PBLoginAck();
  PBAccountLoadAck::default_instance_ = new PBAccountLoadAck();
  PBPlayerNameAck::default_instance_ = new PBPlayerNameAck();
  PBCreatePlayerAck::default_instance_ = new PBCreatePlayerAck();
  PBDelPlayerAck::default_instance_ = new PBDelPlayerAck();
  PBSelectPlayerAck::default_instance_ = new PBSelectPlayerAck();
  PBC2GLoginAsk::default_instance_ = new PBC2GLoginAsk();
  PBG2CLoginAck::default_instance_ = new PBG2CLoginAck();
  PBC2GGMCmdTxtCmd::default_instance_ = new PBC2GGMCmdTxtCmd();
  PBG2CGMCmdTxtCmd::default_instance_ = new PBG2CGMCmdTxtCmd();
  PBG2CSceneFlySameGameSvr::default_instance_ = new PBG2CSceneFlySameGameSvr();
  PBG2CSceneFlyJumpGameSvr::default_instance_ = new PBG2CSceneFlyJumpGameSvr();
  PBG2CCommonUnitRemove::default_instance_ = new PBG2CCommonUnitRemove();
  PBC2GCommonMove::default_instance_ = new PBC2GCommonMove();
  PBC2GUseSkill::default_instance_ = new PBC2GUseSkill();
  PBC2GSkillBreak::default_instance_ = new PBC2GSkillBreak();
  PBC2SSkillUseCharge::default_instance_ = new PBC2SSkillUseCharge();
  PBC2GSkillUpgrade::default_instance_ = new PBC2GSkillUpgrade();
  PBC2GSkillAdd::default_instance_ = new PBC2GSkillAdd();
  PBG2CSkillBreak::default_instance_ = new PBG2CSkillBreak();
  PBG2CUseSkill::default_instance_ = new PBG2CUseSkill();
  PBG2CAddSkill::default_instance_ = new PBG2CAddSkill();
  PBG2CDelSkill::default_instance_ = new PBG2CDelSkill();
  PBG2CUpCoolTime::default_instance_ = new PBG2CUpCoolTime();
  PBG2CUpgradeSkill::default_instance_ = new PBG2CUpgradeSkill();
  PBG2CSkillNotice::default_instance_ = new PBG2CSkillNotice();
  PBG2CSkillDamage::default_instance_ = new PBG2CSkillDamage();
  PBS2CSkillEffect::default_instance_ = new PBS2CSkillEffect();
  PBS2CSkillEffectBroad::default_instance_ = new PBS2CSkillEffectBroad();
  PBG2CSkillUseCharge::default_instance_ = new PBG2CSkillUseCharge();
  PBS2CSkillEnemyList::default_instance_ = new PBS2CSkillEnemyList();
  PBC2GDelBuff::default_instance_ = new PBC2GDelBuff();
  PBG2CAddBuff::default_instance_ = new PBG2CAddBuff();
  PBG2CAddMoveBuff::default_instance_ = new PBG2CAddMoveBuff();
  PBG2CDelBuff::default_instance_ = new PBG2CDelBuff();
  PBG2CUpdateBuffTick::default_instance_ = new PBG2CUpdateBuffTick();
  PBG2CCounter::default_instance_ = new PBG2CCounter();
  PBC2GGetClientData::default_instance_ = new PBC2GGetClientData();
  PBG2CGetClientData::default_instance_ = new PBG2CGetClientData();
  PBG2CClientDataOver::default_instance_ = new PBG2CClientDataOver();
  PBMailID::default_instance_ = new PBMailID();
  PBRewardMail::default_instance_ = new PBRewardMail();
  PBC2GDelItem::default_instance_ = new PBC2GDelItem();
  PBG2CDelItem::default_instance_ = new PBG2CDelItem();
  PBC2GUseItem::default_instance_ = new PBC2GUseItem();
  PBG2CUseItem::default_instance_ = new PBG2CUseItem();
  PBC2GEquipItem::default_instance_ = new PBC2GEquipItem();
  PBG2CEquipItem::default_instance_ = new PBG2CEquipItem();
  PBC2GSellItem::default_instance_ = new PBC2GSellItem();
  PBG2CSellItem::default_instance_ = new PBG2CSellItem();
  PBC2GBuyBackItem::default_instance_ = new PBC2GBuyBackItem();
  PBG2CBuyBackItem::default_instance_ = new PBG2CBuyBackItem();
  PBG2CUpdateItem::default_instance_ = new PBG2CUpdateItem();
  PBC2GSplitItem::default_instance_ = new PBC2GSplitItem();
  PBG2CSplitItem::default_instance_ = new PBG2CSplitItem();
  PBC2GSortItem::default_instance_ = new PBC2GSortItem();
  PBG2CSortItem::default_instance_ = new PBG2CSortItem();
  PBG2CNewItem::default_instance_ = new PBG2CNewItem();
  PBC2GEquipColumnEnhance::default_instance_ = new PBC2GEquipColumnEnhance();
  PBG2CEquipColumnEnhance::default_instance_ = new PBG2CEquipColumnEnhance();
  PBC2GEquipColumnForge::default_instance_ = new PBC2GEquipColumnForge();
  PBG2CEquipColumnForge::default_instance_ = new PBG2CEquipColumnForge();
  PBC2GEquipEnhance::default_instance_ = new PBC2GEquipEnhance();
  PBG2CEquipEnhance::default_instance_ = new PBG2CEquipEnhance();
  PBC2GEquipForge::default_instance_ = new PBC2GEquipForge();
  PBG2CEquipForge::default_instance_ = new PBG2CEquipForge();
  PBC2GEquipInherit::default_instance_ = new PBC2GEquipInherit();
  PBG2CEquipInherit::default_instance_ = new PBG2CEquipInherit();
  PBC2GEquipMake::default_instance_ = new PBC2GEquipMake();
  PBG2CEquipMake::default_instance_ = new PBG2CEquipMake();
  PBC2GMounting::default_instance_ = new PBC2GMounting();
  PBG2CMounting::default_instance_ = new PBG2CMounting();
  PBC2GItemCompoundAsk::default_instance_ = new PBC2GItemCompoundAsk();
  PBC2GItemOpenEquipMakeDlgAsk::default_instance_ = new PBC2GItemOpenEquipMakeDlgAsk();
  PBG2CItemCompoundAck::default_instance_ = new PBG2CItemCompoundAck();
  PBG2CItemOpenEquipMakeDlgAck::default_instance_ = new PBG2CItemOpenEquipMakeDlgAck();
  PBC2GItemOpenEquipMakeOEMDlgAsk::default_instance_ = new PBC2GItemOpenEquipMakeOEMDlgAsk();
  PBC2GItemCommitEquipMakeOEMAsk::default_instance_ = new PBC2GItemCommitEquipMakeOEMAsk();
  PBC2GItemVisitEquipMakeOEMAsk::default_instance_ = new PBC2GItemVisitEquipMakeOEMAsk();
  PBG2CItemOpenEquipMakeOEMDlgAck::default_instance_ = new PBG2CItemOpenEquipMakeOEMDlgAck();
  PBG2CItemCommitEquipMakeOEMAck::default_instance_ = new PBG2CItemCommitEquipMakeOEMAck();
  PBG2CItemVisitEquipMakeOEMAck::default_instance_ = new PBG2CItemVisitEquipMakeOEMAck();
  PBC2GItemEquipMakeOEMAsk::default_instance_ = new PBC2GItemEquipMakeOEMAsk();
  PBG2CItemEquipMakeOEMAck::default_instance_ = new PBG2CItemEquipMakeOEMAck();
  PBC2GItemEquipChangeOEMFeeAsk::default_instance_ = new PBC2GItemEquipChangeOEMFeeAsk();
  PBG2CItemEquipChangeOEMFeeAck::default_instance_ = new PBG2CItemEquipChangeOEMFeeAck();
  PBC2GQuestAccept::default_instance_ = new PBC2GQuestAccept();
  PBG2CQuestAccept::default_instance_ = new PBG2CQuestAccept();
  PBC2GQuestComplete::default_instance_ = new PBC2GQuestComplete();
  PBG2CQuestComplete::default_instance_ = new PBG2CQuestComplete();
  PBC2GQuestUpdateItem::default_instance_ = new PBC2GQuestUpdateItem();
  PBG2CQuestUpdateItem::default_instance_ = new PBG2CQuestUpdateItem();
  PBC2GQuestGiveUp::default_instance_ = new PBC2GQuestGiveUp();
  PBG2CQuestGiveUp::default_instance_ = new PBG2CQuestGiveUp();
  PBC2GStoreBuy::default_instance_ = new PBC2GStoreBuy();
  PBG2CStoreBuy::default_instance_ = new PBG2CStoreBuy();
  PBG2CExpendSyn::default_instance_ = new PBG2CExpendSyn();
  PBG2CAddHp::default_instance_ = new PBG2CAddHp();
  PBG2CAddExp::default_instance_ = new PBG2CAddExp();
  PBG2CClearData::default_instance_ = new PBG2CClearData();
  PBG2CAddLevel::default_instance_ = new PBG2CAddLevel();
  PBC2GPrizeAccept::default_instance_ = new PBC2GPrizeAccept();
  PBC2GPrizeAbandon::default_instance_ = new PBC2GPrizeAbandon();
  PBG2CPrizeNew::default_instance_ = new PBG2CPrizeNew();
  PBC2GTrade_apply::default_instance_ = new PBC2GTrade_apply();
  PBC2GTrade_answer::default_instance_ = new PBC2GTrade_answer();
  PBC2GTrade_addItem::default_instance_ = new PBC2GTrade_addItem();
  PBC2GTrade_delItem::default_instance_ = new PBC2GTrade_delItem();
  PBC2GTrade_setMoney::default_instance_ = new PBC2GTrade_setMoney();
  PBG2CTrade_begin::default_instance_ = new PBG2CTrade_begin();
  PBG2CTrade_end::default_instance_ = new PBG2CTrade_end();
  PBG2CTrade_addItem::default_instance_ = new PBG2CTrade_addItem();
  PBG2CTrade_delItem::default_instance_ = new PBG2CTrade_delItem();
  PBG2CTrade_setMoney::default_instance_ = new PBG2CTrade_setMoney();
  PBG2CTrade_lock::default_instance_ = new PBG2CTrade_lock();
  PBG2CTrade_unlock::default_instance_ = new PBG2CTrade_unlock();
  PBG2CTrade_confirm::default_instance_ = new PBG2CTrade_confirm();
  PBG2CTrade_applyTrasfer::default_instance_ = new PBG2CTrade_applyTrasfer();
  PBG2CTrade_answerTrasfer::default_instance_ = new PBG2CTrade_answerTrasfer();
  PBG2CSaleMoney_tradelog::default_instance_ = new PBG2CSaleMoney_tradelog();
  PBC2GSaleMoney_sale::default_instance_ = new PBC2GSaleMoney_sale();
  PBC2GSaleMoney_salecancel::default_instance_ = new PBC2GSaleMoney_salecancel();
  PBG2CSaleMoney_ListInfo::default_instance_ = new PBG2CSaleMoney_ListInfo();
  PBG2CSaleMoney_list::default_instance_ = new PBG2CSaleMoney_list();
  PBC2GFindPlayer::default_instance_ = new PBC2GFindPlayer();
  PBG2CFindPlayer::default_instance_ = new PBG2CFindPlayer();
  PBC2GAuction_sale::default_instance_ = new PBC2GAuction_sale();
  PBC2GAuction_salecancel::default_instance_ = new PBC2GAuction_salecancel();
  PBC2GAuction_buy::default_instance_ = new PBC2GAuction_buy();
  PBAuctionFilterItemType::default_instance_ = new PBAuctionFilterItemType();
  PBC2GAuction_list::default_instance_ = new PBC2GAuction_list();
  PBC2GAuction_ave::default_instance_ = new PBC2GAuction_ave();
  PBG2CAuction_list::default_instance_ = new PBG2CAuction_list();
  PBG2CAuction_ave::default_instance_ = new PBG2CAuction_ave();
  PBC2GTopListList::default_instance_ = new PBC2GTopListList();
  PBC2GTopListOne::default_instance_ = new PBC2GTopListOne();
  PBC2GTopListSetClearTime::default_instance_ = new PBC2GTopListSetClearTime();
  PBTopListDetail::default_instance_ = new PBTopListDetail();
  PBS2CTopListList::default_instance_ = new PBS2CTopListList();
  PBS2CTopListOne::default_instance_ = new PBS2CTopListOne();
  PBC2GFriend_AddAsk::default_instance_ = new PBC2GFriend_AddAsk();
  PBC2GFriend_DelAsk::default_instance_ = new PBC2GFriend_DelAsk();
  PBC2GFriend_Answer::default_instance_ = new PBC2GFriend_Answer();
  PBC2GFriend_Find::default_instance_ = new PBC2GFriend_Find();
  PBFriendFindInfo::default_instance_ = new PBFriendFindInfo();
  PBG2CFriend_Find::default_instance_ = new PBG2CFriend_Find();
  PBG2CFriend_AddAskTrasfer::default_instance_ = new PBG2CFriend_AddAskTrasfer();
  PBG2CFriend_Info::default_instance_ = new PBG2CFriend_Info();
  PBC2GCommon_PKType::default_instance_ = new PBC2GCommon_PKType();
  PBG2CCommon_PKType::default_instance_ = new PBG2CCommon_PKType();
  PBC2GCommonForbitSpeakAsk::default_instance_ = new PBC2GCommonForbitSpeakAsk();
  PBC2GCommonStrongerReWard::default_instance_ = new PBC2GCommonStrongerReWard();
  PBC2GCommonSubFightPower::default_instance_ = new PBC2GCommonSubFightPower();
  PBC2GCopymapUnactive::default_instance_ = new PBC2GCopymapUnactive();
  PBG2Relive_SceneBorn::default_instance_ = new PBG2Relive_SceneBorn();
  PBG2CCommon_TimeEvent::default_instance_ = new PBG2CCommon_TimeEvent();
  PBC2SWenTao_SetBingFa::default_instance_ = new PBC2SWenTao_SetBingFa();
  PBC2SWenTao_SetScheme::default_instance_ = new PBC2SWenTao_SetScheme();
  PBC2SWenTao_QianXiu::default_instance_ = new PBC2SWenTao_QianXiu();
  PBC2SWenTao_TuPo::default_instance_ = new PBC2SWenTao_TuPo();
  PBC2SWenTao_Upgrate::default_instance_ = new PBC2SWenTao_Upgrate();
  PBC2SWenTao_SetBingfu::default_instance_ = new PBC2SWenTao_SetBingfu();
  PBC2SWenTao_Reset::default_instance_ = new PBC2SWenTao_Reset();
  PBC2SWenTao_ActiveScheme::default_instance_ = new PBC2SWenTao_ActiveScheme();
  PBC2SWenTao_ActiveBingFa::default_instance_ = new PBC2SWenTao_ActiveBingFa();
  PBC2SWenTao_QianXiuUpdate::default_instance_ = new PBC2SWenTao_QianXiuUpdate();
  PBC2SWenTao_TuPoUpdate::default_instance_ = new PBC2SWenTao_TuPoUpdate();
  PBC2SWenTao_YaoDianUpdate::default_instance_ = new PBC2SWenTao_YaoDianUpdate();
  PBC2SWenTao_WisdomUpdate::default_instance_ = new PBC2SWenTao_WisdomUpdate();
  PBC2GWulueSetSchemeAsk::default_instance_ = new PBC2GWulueSetSchemeAsk();
  PBC2GWulueUpZhanlueAsk::default_instance_ = new PBC2GWulueUpZhanlueAsk();
  PBC2GWulueSetBingfuAsk::default_instance_ = new PBC2GWulueSetBingfuAsk();
  PBG2CWulueSetSchemeAck::default_instance_ = new PBG2CWulueSetSchemeAck();
  PBG2CWulueUpZhanlueAck::default_instance_ = new PBG2CWulueUpZhanlueAck();
  PBG2CWulueSetBingfuAck::default_instance_ = new PBG2CWulueSetBingfuAck();
  PBC2GBingfuUpgradeAsk::default_instance_ = new PBC2GBingfuUpgradeAsk();
  PBC2GBingfuUpOneLevelAsk::default_instance_ = new PBC2GBingfuUpOneLevelAsk();
  PBC2GBingfuSplitAsk::default_instance_ = new PBC2GBingfuSplitAsk();
  PBG2CBingfuUpgradeAck::default_instance_ = new PBG2CBingfuUpgradeAck();
  PBC2DropItem_InfoAsk::default_instance_ = new PBC2DropItem_InfoAsk();
  PBC2DropItem_DiceAsk::default_instance_ = new PBC2DropItem_DiceAsk();
  PBC2DropItem_PickAllAsk::default_instance_ = new PBC2DropItem_PickAllAsk();
  PBC2DropItem_PickupAsk::default_instance_ = new PBC2DropItem_PickupAsk();
  PBC2DropItem_AbadonAsk::default_instance_ = new PBC2DropItem_AbadonAsk();
  PBC2DropItem_AssignAsk::default_instance_ = new PBC2DropItem_AssignAsk();
  PBDropItem_DiceInfo::default_instance_ = new PBDropItem_DiceInfo();
  PBDropItem_DropCell::default_instance_ = new PBDropItem_DropCell();
  PBC2DropItem_Info::default_instance_ = new PBC2DropItem_Info();
  PBC2DropItem_Dice::default_instance_ = new PBC2DropItem_Dice();
  PBC2DropItem_Assign::default_instance_ = new PBC2DropItem_Assign();
  PBC2DropItem_ChangeAllot::default_instance_ = new PBC2DropItem_ChangeAllot();
  PBC2GCommon_PlaneEnter::default_instance_ = new PBC2GCommon_PlaneEnter();
  PBC2GCommon_PlaneLeave::default_instance_ = new PBC2GCommon_PlaneLeave();
  PBC2GCommon_RegionTriggerPlane::default_instance_ = new PBC2GCommon_RegionTriggerPlane();
  PBS2GCommon_TakeASeatAck::default_instance_ = new PBS2GCommon_TakeASeatAck();
  PBG2CCommon_PlaneUpdate::default_instance_ = new PBG2CCommon_PlaneUpdate();
  PBC2GCopymapCreate::default_instance_ = new PBC2GCopymapCreate();
  PBC2GCopymapEnterNpc::default_instance_ = new PBC2GCopymapEnterNpc();
  PBC2GCopymapExit::default_instance_ = new PBC2GCopymapExit();
  PBC2GCopymapInvite::default_instance_ = new PBC2GCopymapInvite();
  PBG2CCopymapInviteTransfer::default_instance_ = new PBG2CCopymapInviteTransfer();
  PBC2GCopymapAcceptInvite::default_instance_ = new PBC2GCopymapAcceptInvite();
  PBG2CCopymapState::default_instance_ = new PBG2CCopymapState();
  PBG2CReadyStart::default_instance_ = new PBG2CReadyStart();
  PBG2CCopymapCloseTip::default_instance_ = new PBG2CCopymapCloseTip();
  PBG2CCopymapFindAttackMonster::default_instance_ = new PBG2CCopymapFindAttackMonster();
  PBG2CCopymapQuestTarget::default_instance_ = new PBG2CCopymapQuestTarget();
  PBG2CCopymapQuest::default_instance_ = new PBG2CCopymapQuest();
  PBG2CCopymapChangeQuest::default_instance_ = new PBG2CCopymapChangeQuest();
  PBG2CCopymapHurtInfo::default_instance_ = new PBG2CCopymapHurtInfo();
  PBCopymapGuardInfo::default_instance_ = new PBCopymapGuardInfo();
  PBG2CCopymapSysGuardHp::default_instance_ = new PBG2CCopymapSysGuardHp();
  PBG2CPoemActivePos::default_instance_ = new PBG2CPoemActivePos();
  PBG2CLiangyiNum::default_instance_ = new PBG2CLiangyiNum();
  PBG2CCopymapWave::default_instance_ = new PBG2CCopymapWave();
  PBG2CSixiangMonster::default_instance_ = new PBG2CSixiangMonster();
  PBG2CCopymapAssistCount::default_instance_ = new PBG2CCopymapAssistCount();
  PBG2CCopymapEnterInfo::default_instance_ = new PBG2CCopymapEnterInfo();
  PBC2GCopymapTeamMemberInfo::default_instance_ = new PBC2GCopymapTeamMemberInfo();
  PBG2CCopymapTeamMember::default_instance_ = new PBG2CCopymapTeamMember();
  PBG2CCopymapTeamMemberInfo::default_instance_ = new PBG2CCopymapTeamMemberInfo();
  PBManorLineUpInfo::default_instance_ = new PBManorLineUpInfo();
  PBG2CCopymapManorLobbyLineupNtf::default_instance_ = new PBG2CCopymapManorLobbyLineupNtf();
  PBG2CCopymapManorBattleFieldShenfuNtf::default_instance_ = new PBG2CCopymapManorBattleFieldShenfuNtf();
  PBManorBattleFieldComrades::default_instance_ = new PBManorBattleFieldComrades();
  PBG2CCopymapManorBattleFieldComradesNtf::default_instance_ = new PBG2CCopymapManorBattleFieldComradesNtf();
  PBFactionScore::default_instance_ = new PBFactionScore();
  PBG2CCopymapManorBattleFieldTotalScoreNtf::default_instance_ = new PBG2CCopymapManorBattleFieldTotalScoreNtf();
  PBG2CCopymapManorBroadCastPromptNtf::default_instance_ = new PBG2CCopymapManorBroadCastPromptNtf();
  PBG2CCommon_BossInfo::default_instance_ = new PBG2CCommon_BossInfo();
  PBG2CCommon_BossList::default_instance_ = new PBG2CCommon_BossList();
  PBC2GCommon_FlyAsk::default_instance_ = new PBC2GCommon_FlyAsk();
  PBG2CCommon_FlyAck::default_instance_ = new PBG2CCommon_FlyAck();
  PBC2GCommon_TaskFlyAsk::default_instance_ = new PBC2GCommon_TaskFlyAsk();
  PBG2CCommon_TaskFlyAck::default_instance_ = new PBG2CCommon_TaskFlyAck();
  PBG2CCommon_DazuoguajiTotalNtf::default_instance_ = new PBG2CCommon_DazuoguajiTotalNtf();
  PBG2CUpBingfuExp::default_instance_ = new PBG2CUpBingfuExp();
  PBG2CCommonTreasurePrize::default_instance_ = new PBG2CCommonTreasurePrize();
  PBG2CCommonSetCorpsJob::default_instance_ = new PBG2CCommonSetCorpsJob();
  PBG2CCommonStrongerReWard::default_instance_ = new PBG2CCommonStrongerReWard();
  PBG2CFightPower::default_instance_ = new PBG2CFightPower();
  PBG2CCommonSubFightPower::default_instance_ = new PBG2CCommonSubFightPower();
  PBG2CCommon_SystemSwitchAck::default_instance_ = new PBG2CCommon_SystemSwitchAck();
  PBC2GCommonPromotion::default_instance_ = new PBC2GCommonPromotion();
  PBG2CCommon_Promotion::default_instance_ = new PBG2CCommon_Promotion();
  PBC2GIdentityOpenAsk::default_instance_ = new PBC2GIdentityOpenAsk();
  PBG2CIdentityOpenAck::default_instance_ = new PBG2CIdentityOpenAck();
  PBC2GIdentityLearnAsk::default_instance_ = new PBC2GIdentityLearnAsk();
  PBG2CIdentityLearnAck::default_instance_ = new PBG2CIdentityLearnAck();
  PBC2GIdentityResetAsk::default_instance_ = new PBC2GIdentityResetAsk();
  PBG2CIdentityResetAck::default_instance_ = new PBG2CIdentityResetAck();
  PBC2GIdentityUpSkillAsk::default_instance_ = new PBC2GIdentityUpSkillAsk();
  PBG2CIdentityUpSkillAck::default_instance_ = new PBG2CIdentityUpSkillAck();
  PBC2GWuxueNewAsk::default_instance_ = new PBC2GWuxueNewAsk();
  PBG2CWuxueNewAck::default_instance_ = new PBG2CWuxueNewAck();
  PBC2GWuxueDelAsk::default_instance_ = new PBC2GWuxueDelAsk();
  PBG2CWuxueDelAck::default_instance_ = new PBG2CWuxueDelAck();
  PBC2GWuxueChangeAsk::default_instance_ = new PBC2GWuxueChangeAsk();
  PBG2CWuxueChangeAck::default_instance_ = new PBG2CWuxueChangeAck();
  PBC2GWuxueSetSkillAsk::default_instance_ = new PBC2GWuxueSetSkillAsk();
  PBG2CWuxueSetSkillAck::default_instance_ = new PBG2CWuxueSetSkillAck();
  PBC2GWuxueSetAllSkillAsk::default_instance_ = new PBC2GWuxueSetAllSkillAsk();
  PBG2CWuxueSetAllSkillAck::default_instance_ = new PBG2CWuxueSetAllSkillAck();
  PBC2GWuxueLearnSkillAsk::default_instance_ = new PBC2GWuxueLearnSkillAsk();
  PBG2CWuxueLearnSkillAck::default_instance_ = new PBG2CWuxueLearnSkillAck();
  PBC2GCommon_SearchPlayer::default_instance_ = new PBC2GCommon_SearchPlayer();
  PBG2CCommon_SearchPlayer::default_instance_ = new PBG2CCommon_SearchPlayer();
  PBG2CCommon_MonsterTalk::default_instance_ = new PBG2CCommon_MonsterTalk();
  PBG2CCommon_BeFindNotice::default_instance_ = new PBG2CCommon_BeFindNotice();
  PBC2GCommon_NpcDialogComplete::default_instance_ = new PBC2GCommon_NpcDialogComplete();
  PBC2GCommon_UnActiveMonster::default_instance_ = new PBC2GCommon_UnActiveMonster();
  PBG2CCommon_SetPosition::default_instance_ = new PBG2CCommon_SetPosition();
  PBG2CCommon_DayCopymapCount::default_instance_ = new PBG2CCommon_DayCopymapCount();
  PBC2GCommonGetBattleAttrDetailAsk::default_instance_ = new PBC2GCommonGetBattleAttrDetailAsk();
  PBG2CCommon_TakeASeatAsk::default_instance_ = new PBG2CCommon_TakeASeatAsk();
  PBC2SDartCheckAsk::default_instance_ = new PBC2SDartCheckAsk();
  PBDartMemberResourceInfo::default_instance_ = new PBDartMemberResourceInfo();
  PBS2CDartCheckAck::default_instance_ = new PBS2CDartCheckAck();
  PBC2SDartStartAsk::default_instance_ = new PBC2SDartStartAsk();
  PBC2SDartQuitAsk::default_instance_ = new PBC2SDartQuitAsk();
  PBDartInfo::default_instance_ = new PBDartInfo();
  PBS2CDartStartAck::default_instance_ = new PBS2CDartStartAck();
  PBS2CDartInfoNtf::default_instance_ = new PBS2CDartInfoNtf();
  PBS2CDartCheckPauseNtf::default_instance_ = new PBS2CDartCheckPauseNtf();
  PBC2SDartCheckConfirmAsk::default_instance_ = new PBC2SDartCheckConfirmAsk();
  PBC2SDartCheckGetBuffAsk::default_instance_ = new PBC2SDartCheckGetBuffAsk();
  PBS2CDartStartMoveNtf::default_instance_ = new PBS2CDartStartMoveNtf();
  PBS2CDartStartRobNtf::default_instance_ = new PBS2CDartStartRobNtf();
  PBS2CDartFinishAndPrizeNtf::default_instance_ = new PBS2CDartFinishAndPrizeNtf();
  PBS2CDartCheckGetBuffAck::default_instance_ = new PBS2CDartCheckGetBuffAck();
  PBC2SDartAddSupplyAsk::default_instance_ = new PBC2SDartAddSupplyAsk();
  PBC2SDartAddSupplyConfirmAsk::default_instance_ = new PBC2SDartAddSupplyConfirmAsk();
  PBS2CDartFinishRobNtf::default_instance_ = new PBS2CDartFinishRobNtf();
  PBDartAddSupplyInfo::default_instance_ = new PBDartAddSupplyInfo();
  PBS2CDartAddSupplyNtf::default_instance_ = new PBS2CDartAddSupplyNtf();
  PBS2CDartAddSupplyAck::default_instance_ = new PBS2CDartAddSupplyAck();
  PBS2CDartQuitAck::default_instance_ = new PBS2CDartQuitAck();
  PBS2CDartCheckConfirmAck::default_instance_ = new PBS2CDartCheckConfirmAck();
  PBS2CDartAddSupplyConfirmAck::default_instance_ = new PBS2CDartAddSupplyConfirmAck();
  PBC2SDartBack2NpcAsk::default_instance_ = new PBC2SDartBack2NpcAsk();
  PBS2CDartBack2NpcAck::default_instance_ = new PBS2CDartBack2NpcAck();
  PBC2GFactionBossTopAsk::default_instance_ = new PBC2GFactionBossTopAsk();
  PBC2GFactionBossPersonalTopAck::default_instance_ = new PBC2GFactionBossPersonalTopAck();
  PBC2GFactionBossFactionTopAck::default_instance_ = new PBC2GFactionBossFactionTopAck();
  PBC2GFactionBossUnionTopAck::default_instance_ = new PBC2GFactionBossUnionTopAck();
  PBS2CSceneAreaList::default_instance_ = new PBS2CSceneAreaList();
  PBS2CQinggongStartNtf::default_instance_ = new PBS2CQinggongStartNtf();
  PBBattleAttrDetail::default_instance_ = new PBBattleAttrDetail();
  PBS2CGetBattleAttrDetailAck::default_instance_ = new PBS2CGetBattleAttrDetailAck();
  PBC2GTitleEquipAsk::default_instance_ = new PBC2GTitleEquipAsk();
  PBG2CTitleEquipAck::default_instance_ = new PBG2CTitleEquipAck();
  PBC2GTitleUnEquipAsk::default_instance_ = new PBC2GTitleUnEquipAsk();
  PBG2CTitleUnEquipAck::default_instance_ = new PBG2CTitleUnEquipAck();
  PBG2CTitleAddAck::default_instance_ = new PBG2CTitleAddAck();
  PBG2CTitleDelAck::default_instance_ = new PBG2CTitleDelAck();
  PBC2GFashionEquipAsk::default_instance_ = new PBC2GFashionEquipAsk();
  PBG2CFashionEquipAck::default_instance_ = new PBG2CFashionEquipAck();
  PBC2GFashionUnEquipAsk::default_instance_ = new PBC2GFashionUnEquipAsk();
  PBG2CFashionUnEquipAck::default_instance_ = new PBG2CFashionUnEquipAck();
  PBClimbTowerGetInfoAsk::default_instance_ = new PBClimbTowerGetInfoAsk();
  PBClimbTowerGetInfoAck::default_instance_ = new PBClimbTowerGetInfoAck();
  PBClimbTowerGetInfoNtf::default_instance_ = new PBClimbTowerGetInfoNtf();
  PBClimbTowerPrize::default_instance_ = new PBClimbTowerPrize();
  PBClimbTowerShowPrizeNtf::default_instance_ = new PBClimbTowerShowPrizeNtf();
  PBClimbTowerChoosePrizeAsk::default_instance_ = new PBClimbTowerChoosePrizeAsk();
  PBClimbTowerChoosePrizeAck::default_instance_ = new PBClimbTowerChoosePrizeAck();
  PBClimbTowerClearAsk::default_instance_ = new PBClimbTowerClearAsk();
  PBClimbTowerClearAck::default_instance_ = new PBClimbTowerClearAck();
  PBClimbTowerShowClearNtf::default_instance_ = new PBClimbTowerShowClearNtf();
  PBC2GAnswerQuestion_Answer::default_instance_ = new PBC2GAnswerQuestion_Answer();
  PBG2CAnswerQuestion_QuestionInfo::default_instance_ = new PBG2CAnswerQuestion_QuestionInfo();
  PBG2CAnswerQuestion_QuestionResult::default_instance_ = new PBG2CAnswerQuestion_QuestionResult();
  PBGreatWallTrainInfoAck::default_instance_ = new PBGreatWallTrainInfoAck();
  PBC2SWorldBossGetInfoAsk::default_instance_ = new PBC2SWorldBossGetInfoAsk();
  PBWorldBossInfo::default_instance_ = new PBWorldBossInfo();
  PBWorldBossGetInfoAck::default_instance_ = new PBWorldBossGetInfoAck();
  PBC2SWorldBossUpdateBossHurtRankAsk::default_instance_ = new PBC2SWorldBossUpdateBossHurtRankAsk();
  PBWorldBossUpdateBossHurtRankAck::default_instance_ = new PBWorldBossUpdateBossHurtRankAck();
  PBBossHurtRank::default_instance_ = new PBBossHurtRank();
  PBWorldBossUpdateBossHurtRankNtf::default_instance_ = new PBWorldBossUpdateBossHurtRankNtf();
  PBC2SWorldBossGotoBossAsk::default_instance_ = new PBC2SWorldBossGotoBossAsk();
  PBS2CWorldBossGotoBossAck::default_instance_ = new PBS2CWorldBossGotoBossAck();
  PBC2SActivityGetRewardAsk::default_instance_ = new PBC2SActivityGetRewardAsk();
  PBC2SActivityGetRewardAck::default_instance_ = new PBC2SActivityGetRewardAck();
  PBC2SActivityAddLivenessAck::default_instance_ = new PBC2SActivityAddLivenessAck();
  PBC2GRelive_Born::default_instance_ = new PBC2GRelive_Born();
  PBG2CCorpsInfoAck::default_instance_ = new PBG2CCorpsInfoAck();
  PBC2GCorpsSetDecAsk::default_instance_ = new PBC2GCorpsSetDecAsk();
  PBG2CCorpsSetDecAck::default_instance_ = new PBG2CCorpsSetDecAck();
  PBC2GCorpsSetJobAsk::default_instance_ = new PBC2GCorpsSetJobAsk();
  PBG2CCorpsSetJobAck::default_instance_ = new PBG2CCorpsSetJobAck();
  PBC2GCorpsForbitSpeakAsk::default_instance_ = new PBC2GCorpsForbitSpeakAsk();
  PBC2GWealLoginPrizeAsk::default_instance_ = new PBC2GWealLoginPrizeAsk();
  PBC2GManorGetAllInfoAsk::default_instance_ = new PBC2GManorGetAllInfoAsk();
  PBG2CManorGetAllInfoAck::default_instance_ = new PBG2CManorGetAllInfoAck();
  PBC2GManorGetFightInfoAsk::default_instance_ = new PBC2GManorGetFightInfoAsk();
  PBG2CManorGetFightInfoAck::default_instance_ = new PBG2CManorGetFightInfoAck();
  PBC2GManorApplyFightAsk::default_instance_ = new PBC2GManorApplyFightAsk();
  PBG2CManorApplyFightAck::default_instance_ = new PBG2CManorApplyFightAck();
  PBC2GManorEnterLobbyAsk::default_instance_ = new PBC2GManorEnterLobbyAsk();
  PBG2CManorEnterLobbyAck::default_instance_ = new PBG2CManorEnterLobbyAck();
  PBG2CManorStartFightNtf::default_instance_ = new PBG2CManorStartFightNtf();
  PBC2GManorMVPVoteAsk::default_instance_ = new PBC2GManorMVPVoteAsk();
  PBG2CManorMvpVoteAck::default_instance_ = new PBG2CManorMvpVoteAck();
  PBG2CManorMVPVoteNtf::default_instance_ = new PBG2CManorMVPVoteNtf();
  PBC2GManorGetScoresAsk::default_instance_ = new PBC2GManorGetScoresAsk();
  PBC2GManorGetPlayerScoresAsk::default_instance_ = new PBC2GManorGetPlayerScoresAsk();
  PBManorBattleFieldScore::default_instance_ = new PBManorBattleFieldScore();
  PBG2CManorGetScoresAck::default_instance_ = new PBG2CManorGetScoresAck();
  PBG2CManorGetPlayerScoresAck::default_instance_ = new PBG2CManorGetPlayerScoresAck();
  PBManorMVP::default_instance_ = new PBManorMVP();
  PBG2CManorResultNtf::default_instance_ = new PBG2CManorResultNtf();
  PBLoginAsk::default_instance_->InitAsDefaultInstance();
  PBCheckPlayerNameAsk::default_instance_->InitAsDefaultInstance();
  PBCreatePlayerAsk::default_instance_->InitAsDefaultInstance();
  PBDelPlayerAsk::default_instance_->InitAsDefaultInstance();
  PBSelectPlayerAsk::default_instance_->InitAsDefaultInstance();
  PBLoginAck::default_instance_->InitAsDefaultInstance();
  PBAccountLoadAck::default_instance_->InitAsDefaultInstance();
  PBPlayerNameAck::default_instance_->InitAsDefaultInstance();
  PBCreatePlayerAck::default_instance_->InitAsDefaultInstance();
  PBDelPlayerAck::default_instance_->InitAsDefaultInstance();
  PBSelectPlayerAck::default_instance_->InitAsDefaultInstance();
  PBC2GLoginAsk::default_instance_->InitAsDefaultInstance();
  PBG2CLoginAck::default_instance_->InitAsDefaultInstance();
  PBC2GGMCmdTxtCmd::default_instance_->InitAsDefaultInstance();
  PBG2CGMCmdTxtCmd::default_instance_->InitAsDefaultInstance();
  PBG2CSceneFlySameGameSvr::default_instance_->InitAsDefaultInstance();
  PBG2CSceneFlyJumpGameSvr::default_instance_->InitAsDefaultInstance();
  PBG2CCommonUnitRemove::default_instance_->InitAsDefaultInstance();
  PBC2GCommonMove::default_instance_->InitAsDefaultInstance();
  PBC2GUseSkill::default_instance_->InitAsDefaultInstance();
  PBC2GSkillBreak::default_instance_->InitAsDefaultInstance();
  PBC2SSkillUseCharge::default_instance_->InitAsDefaultInstance();
  PBC2GSkillUpgrade::default_instance_->InitAsDefaultInstance();
  PBC2GSkillAdd::default_instance_->InitAsDefaultInstance();
  PBG2CSkillBreak::default_instance_->InitAsDefaultInstance();
  PBG2CUseSkill::default_instance_->InitAsDefaultInstance();
  PBG2CAddSkill::default_instance_->InitAsDefaultInstance();
  PBG2CDelSkill::default_instance_->InitAsDefaultInstance();
  PBG2CUpCoolTime::default_instance_->InitAsDefaultInstance();
  PBG2CUpgradeSkill::default_instance_->InitAsDefaultInstance();
  PBG2CSkillNotice::default_instance_->InitAsDefaultInstance();
  PBG2CSkillDamage::default_instance_->InitAsDefaultInstance();
  PBS2CSkillEffect::default_instance_->InitAsDefaultInstance();
  PBS2CSkillEffectBroad::default_instance_->InitAsDefaultInstance();
  PBG2CSkillUseCharge::default_instance_->InitAsDefaultInstance();
  PBS2CSkillEnemyList::default_instance_->InitAsDefaultInstance();
  PBC2GDelBuff::default_instance_->InitAsDefaultInstance();
  PBG2CAddBuff::default_instance_->InitAsDefaultInstance();
  PBG2CAddMoveBuff::default_instance_->InitAsDefaultInstance();
  PBG2CDelBuff::default_instance_->InitAsDefaultInstance();
  PBG2CUpdateBuffTick::default_instance_->InitAsDefaultInstance();
  PBG2CCounter::default_instance_->InitAsDefaultInstance();
  PBC2GGetClientData::default_instance_->InitAsDefaultInstance();
  PBG2CGetClientData::default_instance_->InitAsDefaultInstance();
  PBG2CClientDataOver::default_instance_->InitAsDefaultInstance();
  PBMailID::default_instance_->InitAsDefaultInstance();
  PBRewardMail::default_instance_->InitAsDefaultInstance();
  PBC2GDelItem::default_instance_->InitAsDefaultInstance();
  PBG2CDelItem::default_instance_->InitAsDefaultInstance();
  PBC2GUseItem::default_instance_->InitAsDefaultInstance();
  PBG2CUseItem::default_instance_->InitAsDefaultInstance();
  PBC2GEquipItem::default_instance_->InitAsDefaultInstance();
  PBG2CEquipItem::default_instance_->InitAsDefaultInstance();
  PBC2GSellItem::default_instance_->InitAsDefaultInstance();
  PBG2CSellItem::default_instance_->InitAsDefaultInstance();
  PBC2GBuyBackItem::default_instance_->InitAsDefaultInstance();
  PBG2CBuyBackItem::default_instance_->InitAsDefaultInstance();
  PBG2CUpdateItem::default_instance_->InitAsDefaultInstance();
  PBC2GSplitItem::default_instance_->InitAsDefaultInstance();
  PBG2CSplitItem::default_instance_->InitAsDefaultInstance();
  PBC2GSortItem::default_instance_->InitAsDefaultInstance();
  PBG2CSortItem::default_instance_->InitAsDefaultInstance();
  PBG2CNewItem::default_instance_->InitAsDefaultInstance();
  PBC2GEquipColumnEnhance::default_instance_->InitAsDefaultInstance();
  PBG2CEquipColumnEnhance::default_instance_->InitAsDefaultInstance();
  PBC2GEquipColumnForge::default_instance_->InitAsDefaultInstance();
  PBG2CEquipColumnForge::default_instance_->InitAsDefaultInstance();
  PBC2GEquipEnhance::default_instance_->InitAsDefaultInstance();
  PBG2CEquipEnhance::default_instance_->InitAsDefaultInstance();
  PBC2GEquipForge::default_instance_->InitAsDefaultInstance();
  PBG2CEquipForge::default_instance_->InitAsDefaultInstance();
  PBC2GEquipInherit::default_instance_->InitAsDefaultInstance();
  PBG2CEquipInherit::default_instance_->InitAsDefaultInstance();
  PBC2GEquipMake::default_instance_->InitAsDefaultInstance();
  PBG2CEquipMake::default_instance_->InitAsDefaultInstance();
  PBC2GMounting::default_instance_->InitAsDefaultInstance();
  PBG2CMounting::default_instance_->InitAsDefaultInstance();
  PBC2GItemCompoundAsk::default_instance_->InitAsDefaultInstance();
  PBC2GItemOpenEquipMakeDlgAsk::default_instance_->InitAsDefaultInstance();
  PBG2CItemCompoundAck::default_instance_->InitAsDefaultInstance();
  PBG2CItemOpenEquipMakeDlgAck::default_instance_->InitAsDefaultInstance();
  PBC2GItemOpenEquipMakeOEMDlgAsk::default_instance_->InitAsDefaultInstance();
  PBC2GItemCommitEquipMakeOEMAsk::default_instance_->InitAsDefaultInstance();
  PBC2GItemVisitEquipMakeOEMAsk::default_instance_->InitAsDefaultInstance();
  PBG2CItemOpenEquipMakeOEMDlgAck::default_instance_->InitAsDefaultInstance();
  PBG2CItemCommitEquipMakeOEMAck::default_instance_->InitAsDefaultInstance();
  PBG2CItemVisitEquipMakeOEMAck::default_instance_->InitAsDefaultInstance();
  PBC2GItemEquipMakeOEMAsk::default_instance_->InitAsDefaultInstance();
  PBG2CItemEquipMakeOEMAck::default_instance_->InitAsDefaultInstance();
  PBC2GItemEquipChangeOEMFeeAsk::default_instance_->InitAsDefaultInstance();
  PBG2CItemEquipChangeOEMFeeAck::default_instance_->InitAsDefaultInstance();
  PBC2GQuestAccept::default_instance_->InitAsDefaultInstance();
  PBG2CQuestAccept::default_instance_->InitAsDefaultInstance();
  PBC2GQuestComplete::default_instance_->InitAsDefaultInstance();
  PBG2CQuestComplete::default_instance_->InitAsDefaultInstance();
  PBC2GQuestUpdateItem::default_instance_->InitAsDefaultInstance();
  PBG2CQuestUpdateItem::default_instance_->InitAsDefaultInstance();
  PBC2GQuestGiveUp::default_instance_->InitAsDefaultInstance();
  PBG2CQuestGiveUp::default_instance_->InitAsDefaultInstance();
  PBC2GStoreBuy::default_instance_->InitAsDefaultInstance();
  PBG2CStoreBuy::default_instance_->InitAsDefaultInstance();
  PBG2CExpendSyn::default_instance_->InitAsDefaultInstance();
  PBG2CAddHp::default_instance_->InitAsDefaultInstance();
  PBG2CAddExp::default_instance_->InitAsDefaultInstance();
  PBG2CClearData::default_instance_->InitAsDefaultInstance();
  PBG2CAddLevel::default_instance_->InitAsDefaultInstance();
  PBC2GPrizeAccept::default_instance_->InitAsDefaultInstance();
  PBC2GPrizeAbandon::default_instance_->InitAsDefaultInstance();
  PBG2CPrizeNew::default_instance_->InitAsDefaultInstance();
  PBC2GTrade_apply::default_instance_->InitAsDefaultInstance();
  PBC2GTrade_answer::default_instance_->InitAsDefaultInstance();
  PBC2GTrade_addItem::default_instance_->InitAsDefaultInstance();
  PBC2GTrade_delItem::default_instance_->InitAsDefaultInstance();
  PBC2GTrade_setMoney::default_instance_->InitAsDefaultInstance();
  PBG2CTrade_begin::default_instance_->InitAsDefaultInstance();
  PBG2CTrade_end::default_instance_->InitAsDefaultInstance();
  PBG2CTrade_addItem::default_instance_->InitAsDefaultInstance();
  PBG2CTrade_delItem::default_instance_->InitAsDefaultInstance();
  PBG2CTrade_setMoney::default_instance_->InitAsDefaultInstance();
  PBG2CTrade_lock::default_instance_->InitAsDefaultInstance();
  PBG2CTrade_unlock::default_instance_->InitAsDefaultInstance();
  PBG2CTrade_confirm::default_instance_->InitAsDefaultInstance();
  PBG2CTrade_applyTrasfer::default_instance_->InitAsDefaultInstance();
  PBG2CTrade_answerTrasfer::default_instance_->InitAsDefaultInstance();
  PBG2CSaleMoney_tradelog::default_instance_->InitAsDefaultInstance();
  PBC2GSaleMoney_sale::default_instance_->InitAsDefaultInstance();
  PBC2GSaleMoney_salecancel::default_instance_->InitAsDefaultInstance();
  PBG2CSaleMoney_ListInfo::default_instance_->InitAsDefaultInstance();
  PBG2CSaleMoney_list::default_instance_->InitAsDefaultInstance();
  PBC2GFindPlayer::default_instance_->InitAsDefaultInstance();
  PBG2CFindPlayer::default_instance_->InitAsDefaultInstance();
  PBC2GAuction_sale::default_instance_->InitAsDefaultInstance();
  PBC2GAuction_salecancel::default_instance_->InitAsDefaultInstance();
  PBC2GAuction_buy::default_instance_->InitAsDefaultInstance();
  PBAuctionFilterItemType::default_instance_->InitAsDefaultInstance();
  PBC2GAuction_list::default_instance_->InitAsDefaultInstance();
  PBC2GAuction_ave::default_instance_->InitAsDefaultInstance();
  PBG2CAuction_list::default_instance_->InitAsDefaultInstance();
  PBG2CAuction_ave::default_instance_->InitAsDefaultInstance();
  PBC2GTopListList::default_instance_->InitAsDefaultInstance();
  PBC2GTopListOne::default_instance_->InitAsDefaultInstance();
  PBC2GTopListSetClearTime::default_instance_->InitAsDefaultInstance();
  PBTopListDetail::default_instance_->InitAsDefaultInstance();
  PBS2CTopListList::default_instance_->InitAsDefaultInstance();
  PBS2CTopListOne::default_instance_->InitAsDefaultInstance();
  PBC2GFriend_AddAsk::default_instance_->InitAsDefaultInstance();
  PBC2GFriend_DelAsk::default_instance_->InitAsDefaultInstance();
  PBC2GFriend_Answer::default_instance_->InitAsDefaultInstance();
  PBC2GFriend_Find::default_instance_->InitAsDefaultInstance();
  PBFriendFindInfo::default_instance_->InitAsDefaultInstance();
  PBG2CFriend_Find::default_instance_->InitAsDefaultInstance();
  PBG2CFriend_AddAskTrasfer::default_instance_->InitAsDefaultInstance();
  PBG2CFriend_Info::default_instance_->InitAsDefaultInstance();
  PBC2GCommon_PKType::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_PKType::default_instance_->InitAsDefaultInstance();
  PBC2GCommonForbitSpeakAsk::default_instance_->InitAsDefaultInstance();
  PBC2GCommonStrongerReWard::default_instance_->InitAsDefaultInstance();
  PBC2GCommonSubFightPower::default_instance_->InitAsDefaultInstance();
  PBC2GCopymapUnactive::default_instance_->InitAsDefaultInstance();
  PBG2Relive_SceneBorn::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_TimeEvent::default_instance_->InitAsDefaultInstance();
  PBC2SWenTao_SetBingFa::default_instance_->InitAsDefaultInstance();
  PBC2SWenTao_SetScheme::default_instance_->InitAsDefaultInstance();
  PBC2SWenTao_QianXiu::default_instance_->InitAsDefaultInstance();
  PBC2SWenTao_TuPo::default_instance_->InitAsDefaultInstance();
  PBC2SWenTao_Upgrate::default_instance_->InitAsDefaultInstance();
  PBC2SWenTao_SetBingfu::default_instance_->InitAsDefaultInstance();
  PBC2SWenTao_Reset::default_instance_->InitAsDefaultInstance();
  PBC2SWenTao_ActiveScheme::default_instance_->InitAsDefaultInstance();
  PBC2SWenTao_ActiveBingFa::default_instance_->InitAsDefaultInstance();
  PBC2SWenTao_QianXiuUpdate::default_instance_->InitAsDefaultInstance();
  PBC2SWenTao_TuPoUpdate::default_instance_->InitAsDefaultInstance();
  PBC2SWenTao_YaoDianUpdate::default_instance_->InitAsDefaultInstance();
  PBC2SWenTao_WisdomUpdate::default_instance_->InitAsDefaultInstance();
  PBC2GWulueSetSchemeAsk::default_instance_->InitAsDefaultInstance();
  PBC2GWulueUpZhanlueAsk::default_instance_->InitAsDefaultInstance();
  PBC2GWulueSetBingfuAsk::default_instance_->InitAsDefaultInstance();
  PBG2CWulueSetSchemeAck::default_instance_->InitAsDefaultInstance();
  PBG2CWulueUpZhanlueAck::default_instance_->InitAsDefaultInstance();
  PBG2CWulueSetBingfuAck::default_instance_->InitAsDefaultInstance();
  PBC2GBingfuUpgradeAsk::default_instance_->InitAsDefaultInstance();
  PBC2GBingfuUpOneLevelAsk::default_instance_->InitAsDefaultInstance();
  PBC2GBingfuSplitAsk::default_instance_->InitAsDefaultInstance();
  PBG2CBingfuUpgradeAck::default_instance_->InitAsDefaultInstance();
  PBC2DropItem_InfoAsk::default_instance_->InitAsDefaultInstance();
  PBC2DropItem_DiceAsk::default_instance_->InitAsDefaultInstance();
  PBC2DropItem_PickAllAsk::default_instance_->InitAsDefaultInstance();
  PBC2DropItem_PickupAsk::default_instance_->InitAsDefaultInstance();
  PBC2DropItem_AbadonAsk::default_instance_->InitAsDefaultInstance();
  PBC2DropItem_AssignAsk::default_instance_->InitAsDefaultInstance();
  PBDropItem_DiceInfo::default_instance_->InitAsDefaultInstance();
  PBDropItem_DropCell::default_instance_->InitAsDefaultInstance();
  PBC2DropItem_Info::default_instance_->InitAsDefaultInstance();
  PBC2DropItem_Dice::default_instance_->InitAsDefaultInstance();
  PBC2DropItem_Assign::default_instance_->InitAsDefaultInstance();
  PBC2DropItem_ChangeAllot::default_instance_->InitAsDefaultInstance();
  PBC2GCommon_PlaneEnter::default_instance_->InitAsDefaultInstance();
  PBC2GCommon_PlaneLeave::default_instance_->InitAsDefaultInstance();
  PBC2GCommon_RegionTriggerPlane::default_instance_->InitAsDefaultInstance();
  PBS2GCommon_TakeASeatAck::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_PlaneUpdate::default_instance_->InitAsDefaultInstance();
  PBC2GCopymapCreate::default_instance_->InitAsDefaultInstance();
  PBC2GCopymapEnterNpc::default_instance_->InitAsDefaultInstance();
  PBC2GCopymapExit::default_instance_->InitAsDefaultInstance();
  PBC2GCopymapInvite::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapInviteTransfer::default_instance_->InitAsDefaultInstance();
  PBC2GCopymapAcceptInvite::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapState::default_instance_->InitAsDefaultInstance();
  PBG2CReadyStart::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapCloseTip::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapFindAttackMonster::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapQuestTarget::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapQuest::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapChangeQuest::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapHurtInfo::default_instance_->InitAsDefaultInstance();
  PBCopymapGuardInfo::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapSysGuardHp::default_instance_->InitAsDefaultInstance();
  PBG2CPoemActivePos::default_instance_->InitAsDefaultInstance();
  PBG2CLiangyiNum::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapWave::default_instance_->InitAsDefaultInstance();
  PBG2CSixiangMonster::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapAssistCount::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapEnterInfo::default_instance_->InitAsDefaultInstance();
  PBC2GCopymapTeamMemberInfo::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapTeamMember::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapTeamMemberInfo::default_instance_->InitAsDefaultInstance();
  PBManorLineUpInfo::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapManorLobbyLineupNtf::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapManorBattleFieldShenfuNtf::default_instance_->InitAsDefaultInstance();
  PBManorBattleFieldComrades::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapManorBattleFieldComradesNtf::default_instance_->InitAsDefaultInstance();
  PBFactionScore::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapManorBattleFieldTotalScoreNtf::default_instance_->InitAsDefaultInstance();
  PBG2CCopymapManorBroadCastPromptNtf::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_BossInfo::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_BossList::default_instance_->InitAsDefaultInstance();
  PBC2GCommon_FlyAsk::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_FlyAck::default_instance_->InitAsDefaultInstance();
  PBC2GCommon_TaskFlyAsk::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_TaskFlyAck::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_DazuoguajiTotalNtf::default_instance_->InitAsDefaultInstance();
  PBG2CUpBingfuExp::default_instance_->InitAsDefaultInstance();
  PBG2CCommonTreasurePrize::default_instance_->InitAsDefaultInstance();
  PBG2CCommonSetCorpsJob::default_instance_->InitAsDefaultInstance();
  PBG2CCommonStrongerReWard::default_instance_->InitAsDefaultInstance();
  PBG2CFightPower::default_instance_->InitAsDefaultInstance();
  PBG2CCommonSubFightPower::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_SystemSwitchAck::default_instance_->InitAsDefaultInstance();
  PBC2GCommonPromotion::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_Promotion::default_instance_->InitAsDefaultInstance();
  PBC2GIdentityOpenAsk::default_instance_->InitAsDefaultInstance();
  PBG2CIdentityOpenAck::default_instance_->InitAsDefaultInstance();
  PBC2GIdentityLearnAsk::default_instance_->InitAsDefaultInstance();
  PBG2CIdentityLearnAck::default_instance_->InitAsDefaultInstance();
  PBC2GIdentityResetAsk::default_instance_->InitAsDefaultInstance();
  PBG2CIdentityResetAck::default_instance_->InitAsDefaultInstance();
  PBC2GIdentityUpSkillAsk::default_instance_->InitAsDefaultInstance();
  PBG2CIdentityUpSkillAck::default_instance_->InitAsDefaultInstance();
  PBC2GWuxueNewAsk::default_instance_->InitAsDefaultInstance();
  PBG2CWuxueNewAck::default_instance_->InitAsDefaultInstance();
  PBC2GWuxueDelAsk::default_instance_->InitAsDefaultInstance();
  PBG2CWuxueDelAck::default_instance_->InitAsDefaultInstance();
  PBC2GWuxueChangeAsk::default_instance_->InitAsDefaultInstance();
  PBG2CWuxueChangeAck::default_instance_->InitAsDefaultInstance();
  PBC2GWuxueSetSkillAsk::default_instance_->InitAsDefaultInstance();
  PBG2CWuxueSetSkillAck::default_instance_->InitAsDefaultInstance();
  PBC2GWuxueSetAllSkillAsk::default_instance_->InitAsDefaultInstance();
  PBG2CWuxueSetAllSkillAck::default_instance_->InitAsDefaultInstance();
  PBC2GWuxueLearnSkillAsk::default_instance_->InitAsDefaultInstance();
  PBG2CWuxueLearnSkillAck::default_instance_->InitAsDefaultInstance();
  PBC2GCommon_SearchPlayer::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_SearchPlayer::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_MonsterTalk::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_BeFindNotice::default_instance_->InitAsDefaultInstance();
  PBC2GCommon_NpcDialogComplete::default_instance_->InitAsDefaultInstance();
  PBC2GCommon_UnActiveMonster::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_SetPosition::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_DayCopymapCount::default_instance_->InitAsDefaultInstance();
  PBC2GCommonGetBattleAttrDetailAsk::default_instance_->InitAsDefaultInstance();
  PBG2CCommon_TakeASeatAsk::default_instance_->InitAsDefaultInstance();
  PBC2SDartCheckAsk::default_instance_->InitAsDefaultInstance();
  PBDartMemberResourceInfo::default_instance_->InitAsDefaultInstance();
  PBS2CDartCheckAck::default_instance_->InitAsDefaultInstance();
  PBC2SDartStartAsk::default_instance_->InitAsDefaultInstance();
  PBC2SDartQuitAsk::default_instance_->InitAsDefaultInstance();
  PBDartInfo::default_instance_->InitAsDefaultInstance();
  PBS2CDartStartAck::default_instance_->InitAsDefaultInstance();
  PBS2CDartInfoNtf::default_instance_->InitAsDefaultInstance();
  PBS2CDartCheckPauseNtf::default_instance_->InitAsDefaultInstance();
  PBC2SDartCheckConfirmAsk::default_instance_->InitAsDefaultInstance();
  PBC2SDartCheckGetBuffAsk::default_instance_->InitAsDefaultInstance();
  PBS2CDartStartMoveNtf::default_instance_->InitAsDefaultInstance();
  PBS2CDartStartRobNtf::default_instance_->InitAsDefaultInstance();
  PBS2CDartFinishAndPrizeNtf::default_instance_->InitAsDefaultInstance();
  PBS2CDartCheckGetBuffAck::default_instance_->InitAsDefaultInstance();
  PBC2SDartAddSupplyAsk::default_instance_->InitAsDefaultInstance();
  PBC2SDartAddSupplyConfirmAsk::default_instance_->InitAsDefaultInstance();
  PBS2CDartFinishRobNtf::default_instance_->InitAsDefaultInstance();
  PBDartAddSupplyInfo::default_instance_->InitAsDefaultInstance();
  PBS2CDartAddSupplyNtf::default_instance_->InitAsDefaultInstance();
  PBS2CDartAddSupplyAck::default_instance_->InitAsDefaultInstance();
  PBS2CDartQuitAck::default_instance_->InitAsDefaultInstance();
  PBS2CDartCheckConfirmAck::default_instance_->InitAsDefaultInstance();
  PBS2CDartAddSupplyConfirmAck::default_instance_->InitAsDefaultInstance();
  PBC2SDartBack2NpcAsk::default_instance_->InitAsDefaultInstance();
  PBS2CDartBack2NpcAck::default_instance_->InitAsDefaultInstance();
  PBC2GFactionBossTopAsk::default_instance_->InitAsDefaultInstance();
  PBC2GFactionBossPersonalTopAck::default_instance_->InitAsDefaultInstance();
  PBC2GFactionBossFactionTopAck::default_instance_->InitAsDefaultInstance();
  PBC2GFactionBossUnionTopAck::default_instance_->InitAsDefaultInstance();
  PBS2CSceneAreaList::default_instance_->InitAsDefaultInstance();
  PBS2CQinggongStartNtf::default_instance_->InitAsDefaultInstance();
  PBBattleAttrDetail::default_instance_->InitAsDefaultInstance();
  PBS2CGetBattleAttrDetailAck::default_instance_->InitAsDefaultInstance();
  PBC2GTitleEquipAsk::default_instance_->InitAsDefaultInstance();
  PBG2CTitleEquipAck::default_instance_->InitAsDefaultInstance();
  PBC2GTitleUnEquipAsk::default_instance_->InitAsDefaultInstance();
  PBG2CTitleUnEquipAck::default_instance_->InitAsDefaultInstance();
  PBG2CTitleAddAck::default_instance_->InitAsDefaultInstance();
  PBG2CTitleDelAck::default_instance_->InitAsDefaultInstance();
  PBC2GFashionEquipAsk::default_instance_->InitAsDefaultInstance();
  PBG2CFashionEquipAck::default_instance_->InitAsDefaultInstance();
  PBC2GFashionUnEquipAsk::default_instance_->InitAsDefaultInstance();
  PBG2CFashionUnEquipAck::default_instance_->InitAsDefaultInstance();
  PBClimbTowerGetInfoAsk::default_instance_->InitAsDefaultInstance();
  PBClimbTowerGetInfoAck::default_instance_->InitAsDefaultInstance();
  PBClimbTowerGetInfoNtf::default_instance_->InitAsDefaultInstance();
  PBClimbTowerPrize::default_instance_->InitAsDefaultInstance();
  PBClimbTowerShowPrizeNtf::default_instance_->InitAsDefaultInstance();
  PBClimbTowerChoosePrizeAsk::default_instance_->InitAsDefaultInstance();
  PBClimbTowerChoosePrizeAck::default_instance_->InitAsDefaultInstance();
  PBClimbTowerClearAsk::default_instance_->InitAsDefaultInstance();
  PBClimbTowerClearAck::default_instance_->InitAsDefaultInstance();
  PBClimbTowerShowClearNtf::default_instance_->InitAsDefaultInstance();
  PBC2GAnswerQuestion_Answer::default_instance_->InitAsDefaultInstance();
  PBG2CAnswerQuestion_QuestionInfo::default_instance_->InitAsDefaultInstance();
  PBG2CAnswerQuestion_QuestionResult::default_instance_->InitAsDefaultInstance();
  PBGreatWallTrainInfoAck::default_instance_->InitAsDefaultInstance();
  PBC2SWorldBossGetInfoAsk::default_instance_->InitAsDefaultInstance();
  PBWorldBossInfo::default_instance_->InitAsDefaultInstance();
  PBWorldBossGetInfoAck::default_instance_->InitAsDefaultInstance();
  PBC2SWorldBossUpdateBossHurtRankAsk::default_instance_->InitAsDefaultInstance();
  PBWorldBossUpdateBossHurtRankAck::default_instance_->InitAsDefaultInstance();
  PBBossHurtRank::default_instance_->InitAsDefaultInstance();
  PBWorldBossUpdateBossHurtRankNtf::default_instance_->InitAsDefaultInstance();
  PBC2SWorldBossGotoBossAsk::default_instance_->InitAsDefaultInstance();
  PBS2CWorldBossGotoBossAck::default_instance_->InitAsDefaultInstance();
  PBC2SActivityGetRewardAsk::default_instance_->InitAsDefaultInstance();
  PBC2SActivityGetRewardAck::default_instance_->InitAsDefaultInstance();
  PBC2SActivityAddLivenessAck::default_instance_->InitAsDefaultInstance();
  PBC2GRelive_Born::default_instance_->InitAsDefaultInstance();
  PBG2CCorpsInfoAck::default_instance_->InitAsDefaultInstance();
  PBC2GCorpsSetDecAsk::default_instance_->InitAsDefaultInstance();
  PBG2CCorpsSetDecAck::default_instance_->InitAsDefaultInstance();
  PBC2GCorpsSetJobAsk::default_instance_->InitAsDefaultInstance();
  PBG2CCorpsSetJobAck::default_instance_->InitAsDefaultInstance();
  PBC2GCorpsForbitSpeakAsk::default_instance_->InitAsDefaultInstance();
  PBC2GWealLoginPrizeAsk::default_instance_->InitAsDefaultInstance();
  PBC2GManorGetAllInfoAsk::default_instance_->InitAsDefaultInstance();
  PBG2CManorGetAllInfoAck::default_instance_->InitAsDefaultInstance();
  PBC2GManorGetFightInfoAsk::default_instance_->InitAsDefaultInstance();
  PBG2CManorGetFightInfoAck::default_instance_->InitAsDefaultInstance();
  PBC2GManorApplyFightAsk::default_instance_->InitAsDefaultInstance();
  PBG2CManorApplyFightAck::default_instance_->InitAsDefaultInstance();
  PBC2GManorEnterLobbyAsk::default_instance_->InitAsDefaultInstance();
  PBG2CManorEnterLobbyAck::default_instance_->InitAsDefaultInstance();
  PBG2CManorStartFightNtf::default_instance_->InitAsDefaultInstance();
  PBC2GManorMVPVoteAsk::default_instance_->InitAsDefaultInstance();
  PBG2CManorMvpVoteAck::default_instance_->InitAsDefaultInstance();
  PBG2CManorMVPVoteNtf::default_instance_->InitAsDefaultInstance();
  PBC2GManorGetScoresAsk::default_instance_->InitAsDefaultInstance();
  PBC2GManorGetPlayerScoresAsk::default_instance_->InitAsDefaultInstance();
  PBManorBattleFieldScore::default_instance_->InitAsDefaultInstance();
  PBG2CManorGetScoresAck::default_instance_->InitAsDefaultInstance();
  PBG2CManorGetPlayerScoresAck::default_instance_->InitAsDefaultInstance();
  PBManorMVP::default_instance_->InitAsDefaultInstance();
  PBG2CManorResultNtf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CASMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CASMsg_2eproto {
  StaticDescriptorInitializer_CASMsg_2eproto() {
    protobuf_AddDesc_CASMsg_2eproto();
  }
} static_descriptor_initializer_CASMsg_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBLoginAsk::kLoginFieldNumber;
#endif  // !_MSC_VER

PBLoginAsk::PBLoginAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLoginAsk::InitAsDefaultInstance() {
}

PBLoginAsk::PBLoginAsk(const PBLoginAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLoginAsk::SharedCtor() {
  _cached_size_ = 0;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLoginAsk::~PBLoginAsk() {
  SharedDtor();
}

void PBLoginAsk::SharedDtor() {
  if (login_ != &::google::protobuf::internal::kEmptyString) {
    delete login_;
  }
  if (this != default_instance_) {
  }
}

void PBLoginAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLoginAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLoginAsk_descriptor_;
}

const PBLoginAsk& PBLoginAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBLoginAsk* PBLoginAsk::default_instance_ = NULL;

PBLoginAsk* PBLoginAsk::New() const {
  return new PBLoginAsk;
}

void PBLoginAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::kEmptyString) {
        login_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLoginAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string login = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLoginAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->login(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLoginAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLoginAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLoginAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLoginAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLoginAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLoginAsk::MergeFrom(const PBLoginAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      set_login(from.login());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLoginAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLoginAsk::CopyFrom(const PBLoginAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLoginAsk::IsInitialized() const {
  
  return true;
}

void PBLoginAsk::Swap(PBLoginAsk* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLoginAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLoginAsk_descriptor_;
  metadata.reflection = PBLoginAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCheckPlayerNameAsk::kNameFieldNumber;
#endif  // !_MSC_VER

PBCheckPlayerNameAsk::PBCheckPlayerNameAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCheckPlayerNameAsk::InitAsDefaultInstance() {
}

PBCheckPlayerNameAsk::PBCheckPlayerNameAsk(const PBCheckPlayerNameAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCheckPlayerNameAsk::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCheckPlayerNameAsk::~PBCheckPlayerNameAsk() {
  SharedDtor();
}

void PBCheckPlayerNameAsk::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBCheckPlayerNameAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCheckPlayerNameAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCheckPlayerNameAsk_descriptor_;
}

const PBCheckPlayerNameAsk& PBCheckPlayerNameAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBCheckPlayerNameAsk* PBCheckPlayerNameAsk::default_instance_ = NULL;

PBCheckPlayerNameAsk* PBCheckPlayerNameAsk::New() const {
  return new PBCheckPlayerNameAsk;
}

void PBCheckPlayerNameAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCheckPlayerNameAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCheckPlayerNameAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCheckPlayerNameAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCheckPlayerNameAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCheckPlayerNameAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCheckPlayerNameAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCheckPlayerNameAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCheckPlayerNameAsk::MergeFrom(const PBCheckPlayerNameAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCheckPlayerNameAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCheckPlayerNameAsk::CopyFrom(const PBCheckPlayerNameAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCheckPlayerNameAsk::IsInitialized() const {
  
  return true;
}

void PBCheckPlayerNameAsk::Swap(PBCheckPlayerNameAsk* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCheckPlayerNameAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCheckPlayerNameAsk_descriptor_;
  metadata.reflection = PBCheckPlayerNameAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCreatePlayerAsk::kPlayerdisplayFieldNumber;
#endif  // !_MSC_VER

PBCreatePlayerAsk::PBCreatePlayerAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCreatePlayerAsk::InitAsDefaultInstance() {
  playerdisplay_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBCreatePlayerAsk::PBCreatePlayerAsk(const PBCreatePlayerAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCreatePlayerAsk::SharedCtor() {
  _cached_size_ = 0;
  playerdisplay_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCreatePlayerAsk::~PBCreatePlayerAsk() {
  SharedDtor();
}

void PBCreatePlayerAsk::SharedDtor() {
  if (this != default_instance_) {
    delete playerdisplay_;
  }
}

void PBCreatePlayerAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCreatePlayerAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCreatePlayerAsk_descriptor_;
}

const PBCreatePlayerAsk& PBCreatePlayerAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBCreatePlayerAsk* PBCreatePlayerAsk::default_instance_ = NULL;

PBCreatePlayerAsk* PBCreatePlayerAsk::New() const {
  return new PBCreatePlayerAsk;
}

void PBCreatePlayerAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerdisplay()) {
      if (playerdisplay_ != NULL) playerdisplay_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCreatePlayerAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay playerdisplay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdisplay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCreatePlayerAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay playerdisplay = 1;
  if (has_playerdisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerdisplay(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCreatePlayerAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay playerdisplay = 1;
  if (has_playerdisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerdisplay(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCreatePlayerAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay playerdisplay = 1;
    if (has_playerdisplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdisplay());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCreatePlayerAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCreatePlayerAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCreatePlayerAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCreatePlayerAsk::MergeFrom(const PBCreatePlayerAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerdisplay()) {
      mutable_playerdisplay()->::PBPlayerDisplay::MergeFrom(from.playerdisplay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCreatePlayerAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCreatePlayerAsk::CopyFrom(const PBCreatePlayerAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCreatePlayerAsk::IsInitialized() const {
  
  return true;
}

void PBCreatePlayerAsk::Swap(PBCreatePlayerAsk* other) {
  if (other != this) {
    std::swap(playerdisplay_, other->playerdisplay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCreatePlayerAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCreatePlayerAsk_descriptor_;
  metadata.reflection = PBCreatePlayerAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDelPlayerAsk::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

PBDelPlayerAsk::PBDelPlayerAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDelPlayerAsk::InitAsDefaultInstance() {
}

PBDelPlayerAsk::PBDelPlayerAsk(const PBDelPlayerAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDelPlayerAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDelPlayerAsk::~PBDelPlayerAsk() {
  SharedDtor();
}

void PBDelPlayerAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDelPlayerAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDelPlayerAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDelPlayerAsk_descriptor_;
}

const PBDelPlayerAsk& PBDelPlayerAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBDelPlayerAsk* PBDelPlayerAsk::default_instance_ = NULL;

PBDelPlayerAsk* PBDelPlayerAsk::New() const {
  return new PBDelPlayerAsk;
}

void PBDelPlayerAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDelPlayerAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDelPlayerAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDelPlayerAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDelPlayerAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDelPlayerAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDelPlayerAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDelPlayerAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDelPlayerAsk::MergeFrom(const PBDelPlayerAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDelPlayerAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDelPlayerAsk::CopyFrom(const PBDelPlayerAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDelPlayerAsk::IsInitialized() const {
  
  return true;
}

void PBDelPlayerAsk::Swap(PBDelPlayerAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDelPlayerAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDelPlayerAsk_descriptor_;
  metadata.reflection = PBDelPlayerAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSelectPlayerAsk::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

PBSelectPlayerAsk::PBSelectPlayerAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSelectPlayerAsk::InitAsDefaultInstance() {
}

PBSelectPlayerAsk::PBSelectPlayerAsk(const PBSelectPlayerAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSelectPlayerAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSelectPlayerAsk::~PBSelectPlayerAsk() {
  SharedDtor();
}

void PBSelectPlayerAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSelectPlayerAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSelectPlayerAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSelectPlayerAsk_descriptor_;
}

const PBSelectPlayerAsk& PBSelectPlayerAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBSelectPlayerAsk* PBSelectPlayerAsk::default_instance_ = NULL;

PBSelectPlayerAsk* PBSelectPlayerAsk::New() const {
  return new PBSelectPlayerAsk;
}

void PBSelectPlayerAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSelectPlayerAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSelectPlayerAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSelectPlayerAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSelectPlayerAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSelectPlayerAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSelectPlayerAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSelectPlayerAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSelectPlayerAsk::MergeFrom(const PBSelectPlayerAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSelectPlayerAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSelectPlayerAsk::CopyFrom(const PBSelectPlayerAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSelectPlayerAsk::IsInitialized() const {
  
  return true;
}

void PBSelectPlayerAsk::Swap(PBSelectPlayerAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSelectPlayerAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSelectPlayerAsk_descriptor_;
  metadata.reflection = PBSelectPlayerAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLoginAck::kAccountFieldNumber;
const int PBLoginAck::kWorldCreateTimeFieldNumber;
#endif  // !_MSC_VER

PBLoginAck::PBLoginAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLoginAck::InitAsDefaultInstance() {
  account_ = const_cast< ::PBAccount*>(&::PBAccount::default_instance());
}

PBLoginAck::PBLoginAck(const PBLoginAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLoginAck::SharedCtor() {
  _cached_size_ = 0;
  account_ = NULL;
  worldcreatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLoginAck::~PBLoginAck() {
  SharedDtor();
}

void PBLoginAck::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
  }
}

void PBLoginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLoginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLoginAck_descriptor_;
}

const PBLoginAck& PBLoginAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBLoginAck* PBLoginAck::default_instance_ = NULL;

PBLoginAck* PBLoginAck::New() const {
  return new PBLoginAck;
}

void PBLoginAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != NULL) account_->::PBAccount::Clear();
    }
    worldcreatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLoginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBAccount account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_worldCreateTime;
        break;
      }
      
      // optional int64 worldCreateTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldCreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worldcreatetime_)));
          set_has_worldcreatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLoginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBAccount account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->account(), output);
  }
  
  // optional int64 worldCreateTime = 2;
  if (has_worldcreatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->worldcreatetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLoginAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBAccount account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account(), target);
  }
  
  // optional int64 worldCreateTime = 2;
  if (has_worldcreatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->worldcreatetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLoginAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBAccount account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }
    
    // optional int64 worldCreateTime = 2;
    if (has_worldcreatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->worldcreatetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLoginAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLoginAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLoginAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLoginAck::MergeFrom(const PBLoginAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      mutable_account()->::PBAccount::MergeFrom(from.account());
    }
    if (from.has_worldcreatetime()) {
      set_worldcreatetime(from.worldcreatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLoginAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLoginAck::CopyFrom(const PBLoginAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLoginAck::IsInitialized() const {
  
  return true;
}

void PBLoginAck::Swap(PBLoginAck* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(worldcreatetime_, other->worldcreatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLoginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLoginAck_descriptor_;
  metadata.reflection = PBLoginAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAccountLoadAck::kAccountidFieldNumber;
const int PBAccountLoadAck::kAvatarFieldNumber;
#endif  // !_MSC_VER

PBAccountLoadAck::PBAccountLoadAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAccountLoadAck::InitAsDefaultInstance() {
}

PBAccountLoadAck::PBAccountLoadAck(const PBAccountLoadAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAccountLoadAck::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAccountLoadAck::~PBAccountLoadAck() {
  SharedDtor();
}

void PBAccountLoadAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAccountLoadAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAccountLoadAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAccountLoadAck_descriptor_;
}

const PBAccountLoadAck& PBAccountLoadAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBAccountLoadAck* PBAccountLoadAck::default_instance_ = NULL;

PBAccountLoadAck* PBAccountLoadAck::New() const {
  return new PBAccountLoadAck;
}

void PBAccountLoadAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
  }
  avatar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAccountLoadAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_avatar;
        break;
      }
      
      // repeated .PBPlayerAvatar avatar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_avatar;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAccountLoadAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }
  
  // repeated .PBPlayerAvatar avatar = 2;
  for (int i = 0; i < this->avatar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->avatar(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAccountLoadAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }
  
  // repeated .PBPlayerAvatar avatar = 2;
  for (int i = 0; i < this->avatar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->avatar(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAccountLoadAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
  }
  // repeated .PBPlayerAvatar avatar = 2;
  total_size += 1 * this->avatar_size();
  for (int i = 0; i < this->avatar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->avatar(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAccountLoadAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAccountLoadAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAccountLoadAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAccountLoadAck::MergeFrom(const PBAccountLoadAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  avatar_.MergeFrom(from.avatar_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAccountLoadAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAccountLoadAck::CopyFrom(const PBAccountLoadAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAccountLoadAck::IsInitialized() const {
  
  return true;
}

void PBAccountLoadAck::Swap(PBAccountLoadAck* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    avatar_.Swap(&other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAccountLoadAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAccountLoadAck_descriptor_;
  metadata.reflection = PBAccountLoadAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerNameAck::kRetFieldNumber;
const int PBPlayerNameAck::kNameFieldNumber;
#endif  // !_MSC_VER

PBPlayerNameAck::PBPlayerNameAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerNameAck::InitAsDefaultInstance() {
}

PBPlayerNameAck::PBPlayerNameAck(const PBPlayerNameAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerNameAck::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerNameAck::~PBPlayerNameAck() {
  SharedDtor();
}

void PBPlayerNameAck::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBPlayerNameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerNameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerNameAck_descriptor_;
}

const PBPlayerNameAck& PBPlayerNameAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBPlayerNameAck* PBPlayerNameAck::default_instance_ = NULL;

PBPlayerNameAck* PBPlayerNameAck::New() const {
  return new PBPlayerNameAck;
}

void PBPlayerNameAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerNameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerNameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerNameAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerNameAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerNameAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerNameAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerNameAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerNameAck::MergeFrom(const PBPlayerNameAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerNameAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerNameAck::CopyFrom(const PBPlayerNameAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerNameAck::IsInitialized() const {
  
  return true;
}

void PBPlayerNameAck::Swap(PBPlayerNameAck* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerNameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerNameAck_descriptor_;
  metadata.reflection = PBPlayerNameAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCreatePlayerAck::kAvatarFieldNumber;
#endif  // !_MSC_VER

PBCreatePlayerAck::PBCreatePlayerAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCreatePlayerAck::InitAsDefaultInstance() {
  avatar_ = const_cast< ::PBPlayerAvatar*>(&::PBPlayerAvatar::default_instance());
}

PBCreatePlayerAck::PBCreatePlayerAck(const PBCreatePlayerAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCreatePlayerAck::SharedCtor() {
  _cached_size_ = 0;
  avatar_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCreatePlayerAck::~PBCreatePlayerAck() {
  SharedDtor();
}

void PBCreatePlayerAck::SharedDtor() {
  if (this != default_instance_) {
    delete avatar_;
  }
}

void PBCreatePlayerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCreatePlayerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCreatePlayerAck_descriptor_;
}

const PBCreatePlayerAck& PBCreatePlayerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBCreatePlayerAck* PBCreatePlayerAck::default_instance_ = NULL;

PBCreatePlayerAck* PBCreatePlayerAck::New() const {
  return new PBCreatePlayerAck;
}

void PBCreatePlayerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::PBPlayerAvatar::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCreatePlayerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerAvatar avatar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCreatePlayerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerAvatar avatar = 1;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->avatar(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCreatePlayerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerAvatar avatar = 1;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->avatar(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCreatePlayerAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerAvatar avatar = 1;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCreatePlayerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCreatePlayerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCreatePlayerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCreatePlayerAck::MergeFrom(const PBCreatePlayerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar()) {
      mutable_avatar()->::PBPlayerAvatar::MergeFrom(from.avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCreatePlayerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCreatePlayerAck::CopyFrom(const PBCreatePlayerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCreatePlayerAck::IsInitialized() const {
  
  return true;
}

void PBCreatePlayerAck::Swap(PBCreatePlayerAck* other) {
  if (other != this) {
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCreatePlayerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCreatePlayerAck_descriptor_;
  metadata.reflection = PBCreatePlayerAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDelPlayerAck::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

PBDelPlayerAck::PBDelPlayerAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDelPlayerAck::InitAsDefaultInstance() {
}

PBDelPlayerAck::PBDelPlayerAck(const PBDelPlayerAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDelPlayerAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDelPlayerAck::~PBDelPlayerAck() {
  SharedDtor();
}

void PBDelPlayerAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDelPlayerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDelPlayerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDelPlayerAck_descriptor_;
}

const PBDelPlayerAck& PBDelPlayerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBDelPlayerAck* PBDelPlayerAck::default_instance_ = NULL;

PBDelPlayerAck* PBDelPlayerAck::New() const {
  return new PBDelPlayerAck;
}

void PBDelPlayerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDelPlayerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDelPlayerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDelPlayerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDelPlayerAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDelPlayerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDelPlayerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDelPlayerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDelPlayerAck::MergeFrom(const PBDelPlayerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDelPlayerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDelPlayerAck::CopyFrom(const PBDelPlayerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDelPlayerAck::IsInitialized() const {
  
  return true;
}

void PBDelPlayerAck::Swap(PBDelPlayerAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDelPlayerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDelPlayerAck_descriptor_;
  metadata.reflection = PBDelPlayerAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSelectPlayerAck::kPlayerIDFieldNumber;
const int PBSelectPlayerAck::kHostFieldNumber;
const int PBSelectPlayerAck::kPortFieldNumber;
#endif  // !_MSC_VER

PBSelectPlayerAck::PBSelectPlayerAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSelectPlayerAck::InitAsDefaultInstance() {
}

PBSelectPlayerAck::PBSelectPlayerAck(const PBSelectPlayerAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSelectPlayerAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSelectPlayerAck::~PBSelectPlayerAck() {
  SharedDtor();
}

void PBSelectPlayerAck::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void PBSelectPlayerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSelectPlayerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSelectPlayerAck_descriptor_;
}

const PBSelectPlayerAck& PBSelectPlayerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBSelectPlayerAck* PBSelectPlayerAck::default_instance_ = NULL;

PBSelectPlayerAck* PBSelectPlayerAck::New() const {
  return new PBSelectPlayerAck;
}

void PBSelectPlayerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSelectPlayerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }
      
      // optional string host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSelectPlayerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host(), output);
  }
  
  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSelectPlayerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }
  
  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSelectPlayerAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional string host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSelectPlayerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSelectPlayerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSelectPlayerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSelectPlayerAck::MergeFrom(const PBSelectPlayerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSelectPlayerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSelectPlayerAck::CopyFrom(const PBSelectPlayerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSelectPlayerAck::IsInitialized() const {
  
  return true;
}

void PBSelectPlayerAck::Swap(PBSelectPlayerAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSelectPlayerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSelectPlayerAck_descriptor_;
  metadata.reflection = PBSelectPlayerAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GLoginAsk::kPlayerIDFieldNumber;
const int PBC2GLoginAsk::kLoginSNFieldNumber;
const int PBC2GLoginAsk::kBReconnetFieldNumber;
#endif  // !_MSC_VER

PBC2GLoginAsk::PBC2GLoginAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GLoginAsk::InitAsDefaultInstance() {
}

PBC2GLoginAsk::PBC2GLoginAsk(const PBC2GLoginAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GLoginAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  loginsn_ = GOOGLE_ULONGLONG(0);
  breconnet_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GLoginAsk::~PBC2GLoginAsk() {
  SharedDtor();
}

void PBC2GLoginAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GLoginAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GLoginAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GLoginAsk_descriptor_;
}

const PBC2GLoginAsk& PBC2GLoginAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GLoginAsk* PBC2GLoginAsk::default_instance_ = NULL;

PBC2GLoginAsk* PBC2GLoginAsk::New() const {
  return new PBC2GLoginAsk;
}

void PBC2GLoginAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    loginsn_ = GOOGLE_ULONGLONG(0);
    breconnet_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GLoginAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_loginSN;
        break;
      }
      
      // optional uint64 loginSN = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &loginsn_)));
          set_has_loginsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bReconnet;
        break;
      }
      
      // optional bool bReconnet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bReconnet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &breconnet_)));
          set_has_breconnet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GLoginAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint64 loginSN = 2;
  if (has_loginsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->loginsn(), output);
  }
  
  // optional bool bReconnet = 3;
  if (has_breconnet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->breconnet(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GLoginAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint64 loginSN = 2;
  if (has_loginsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->loginsn(), target);
  }
  
  // optional bool bReconnet = 3;
  if (has_breconnet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->breconnet(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GLoginAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint64 loginSN = 2;
    if (has_loginsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->loginsn());
    }
    
    // optional bool bReconnet = 3;
    if (has_breconnet()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GLoginAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GLoginAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GLoginAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GLoginAsk::MergeFrom(const PBC2GLoginAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_loginsn()) {
      set_loginsn(from.loginsn());
    }
    if (from.has_breconnet()) {
      set_breconnet(from.breconnet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GLoginAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GLoginAsk::CopyFrom(const PBC2GLoginAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GLoginAsk::IsInitialized() const {
  
  return true;
}

void PBC2GLoginAsk::Swap(PBC2GLoginAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(loginsn_, other->loginsn_);
    std::swap(breconnet_, other->breconnet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GLoginAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GLoginAsk_descriptor_;
  metadata.reflection = PBC2GLoginAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CLoginAck::kSceneidFieldNumber;
const int PBG2CLoginAck::kScenecellidFieldNumber;
const int PBG2CLoginAck::kUnitidFieldNumber;
const int PBG2CLoginAck::kPbPointFieldNumber;
const int PBG2CLoginAck::kScenedynidFieldNumber;
#endif  // !_MSC_VER

PBG2CLoginAck::PBG2CLoginAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CLoginAck::InitAsDefaultInstance() {
  pbpoint_ = const_cast< ::PBPoint*>(&::PBPoint::default_instance());
}

PBG2CLoginAck::PBG2CLoginAck(const PBG2CLoginAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CLoginAck::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  scenecellid_ = 0u;
  unitid_ = 0u;
  pbpoint_ = NULL;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CLoginAck::~PBG2CLoginAck() {
  SharedDtor();
}

void PBG2CLoginAck::SharedDtor() {
  if (this != default_instance_) {
    delete pbpoint_;
  }
}

void PBG2CLoginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CLoginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CLoginAck_descriptor_;
}

const PBG2CLoginAck& PBG2CLoginAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CLoginAck* PBG2CLoginAck::default_instance_ = NULL;

PBG2CLoginAck* PBG2CLoginAck::New() const {
  return new PBG2CLoginAck;
}

void PBG2CLoginAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    scenecellid_ = 0u;
    unitid_ = 0u;
    if (has_pbpoint()) {
      if (pbpoint_ != NULL) pbpoint_->::PBPoint::Clear();
    }
    scenedynid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CLoginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scenecellid;
        break;
      }
      
      // optional uint32 scenecellid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenecellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenecellid_)));
          set_has_scenecellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unitid;
        break;
      }
      
      // optional uint32 unitid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pbPoint;
        break;
      }
      
      // optional .PBPoint pbPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scenedynid;
        break;
      }
      
      // optional uint64 scenedynid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenedynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CLoginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint32 scenecellid = 2;
  if (has_scenecellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scenecellid(), output);
  }
  
  // optional uint32 unitid = 3;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unitid(), output);
  }
  
  // optional .PBPoint pbPoint = 4;
  if (has_pbpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pbpoint(), output);
  }
  
  // optional uint64 scenedynid = 5;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->scenedynid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CLoginAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint32 scenecellid = 2;
  if (has_scenecellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scenecellid(), target);
  }
  
  // optional uint32 unitid = 3;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unitid(), target);
  }
  
  // optional .PBPoint pbPoint = 4;
  if (has_pbpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pbpoint(), target);
  }
  
  // optional uint64 scenedynid = 5;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->scenedynid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CLoginAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 scenecellid = 2;
    if (has_scenecellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenecellid());
    }
    
    // optional uint32 unitid = 3;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
    // optional .PBPoint pbPoint = 4;
    if (has_pbpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbpoint());
    }
    
    // optional uint64 scenedynid = 5;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CLoginAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CLoginAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CLoginAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CLoginAck::MergeFrom(const PBG2CLoginAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenecellid()) {
      set_scenecellid(from.scenecellid());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_pbpoint()) {
      mutable_pbpoint()->::PBPoint::MergeFrom(from.pbpoint());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CLoginAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CLoginAck::CopyFrom(const PBG2CLoginAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CLoginAck::IsInitialized() const {
  
  return true;
}

void PBG2CLoginAck::Swap(PBG2CLoginAck* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenecellid_, other->scenecellid_);
    std::swap(unitid_, other->unitid_);
    std::swap(pbpoint_, other->pbpoint_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CLoginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CLoginAck_descriptor_;
  metadata.reflection = PBG2CLoginAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GGMCmdTxtCmd::kCallbackidFieldNumber;
const int PBC2GGMCmdTxtCmd::kParamFieldNumber;
#endif  // !_MSC_VER

PBC2GGMCmdTxtCmd::PBC2GGMCmdTxtCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GGMCmdTxtCmd::InitAsDefaultInstance() {
}

PBC2GGMCmdTxtCmd::PBC2GGMCmdTxtCmd(const PBC2GGMCmdTxtCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GGMCmdTxtCmd::SharedCtor() {
  _cached_size_ = 0;
  callbackid_ = GOOGLE_ULONGLONG(0);
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GGMCmdTxtCmd::~PBC2GGMCmdTxtCmd() {
  SharedDtor();
}

void PBC2GGMCmdTxtCmd::SharedDtor() {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (this != default_instance_) {
  }
}

void PBC2GGMCmdTxtCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GGMCmdTxtCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GGMCmdTxtCmd_descriptor_;
}

const PBC2GGMCmdTxtCmd& PBC2GGMCmdTxtCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GGMCmdTxtCmd* PBC2GGMCmdTxtCmd::default_instance_ = NULL;

PBC2GGMCmdTxtCmd* PBC2GGMCmdTxtCmd::New() const {
  return new PBC2GGMCmdTxtCmd;
}

void PBC2GGMCmdTxtCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    callbackid_ = GOOGLE_ULONGLONG(0);
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::kEmptyString) {
        param_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GGMCmdTxtCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 callbackid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &callbackid_)));
          set_has_callbackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param;
        break;
      }
      
      // optional string param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GGMCmdTxtCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 callbackid = 1;
  if (has_callbackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->callbackid(), output);
  }
  
  // optional string param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GGMCmdTxtCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 callbackid = 1;
  if (has_callbackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->callbackid(), target);
  }
  
  // optional string param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GGMCmdTxtCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 callbackid = 1;
    if (has_callbackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->callbackid());
    }
    
    // optional string param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GGMCmdTxtCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GGMCmdTxtCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GGMCmdTxtCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GGMCmdTxtCmd::MergeFrom(const PBC2GGMCmdTxtCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callbackid()) {
      set_callbackid(from.callbackid());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GGMCmdTxtCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GGMCmdTxtCmd::CopyFrom(const PBC2GGMCmdTxtCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GGMCmdTxtCmd::IsInitialized() const {
  
  return true;
}

void PBC2GGMCmdTxtCmd::Swap(PBC2GGMCmdTxtCmd* other) {
  if (other != this) {
    std::swap(callbackid_, other->callbackid_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GGMCmdTxtCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GGMCmdTxtCmd_descriptor_;
  metadata.reflection = PBC2GGMCmdTxtCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CGMCmdTxtCmd::kCallbackidFieldNumber;
const int PBG2CGMCmdTxtCmd::kResultFieldNumber;
const int PBG2CGMCmdTxtCmd::kMsgFieldNumber;
#endif  // !_MSC_VER

PBG2CGMCmdTxtCmd::PBG2CGMCmdTxtCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CGMCmdTxtCmd::InitAsDefaultInstance() {
}

PBG2CGMCmdTxtCmd::PBG2CGMCmdTxtCmd(const PBG2CGMCmdTxtCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CGMCmdTxtCmd::SharedCtor() {
  _cached_size_ = 0;
  callbackid_ = GOOGLE_ULONGLONG(0);
  result_ = false;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CGMCmdTxtCmd::~PBG2CGMCmdTxtCmd() {
  SharedDtor();
}

void PBG2CGMCmdTxtCmd::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void PBG2CGMCmdTxtCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CGMCmdTxtCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CGMCmdTxtCmd_descriptor_;
}

const PBG2CGMCmdTxtCmd& PBG2CGMCmdTxtCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CGMCmdTxtCmd* PBG2CGMCmdTxtCmd::default_instance_ = NULL;

PBG2CGMCmdTxtCmd* PBG2CGMCmdTxtCmd::New() const {
  return new PBG2CGMCmdTxtCmd;
}

void PBG2CGMCmdTxtCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    callbackid_ = GOOGLE_ULONGLONG(0);
    result_ = false;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CGMCmdTxtCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 callbackid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &callbackid_)));
          set_has_callbackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }
      
      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CGMCmdTxtCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 callbackid = 1;
  if (has_callbackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->callbackid(), output);
  }
  
  // optional bool result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CGMCmdTxtCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 callbackid = 1;
  if (has_callbackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->callbackid(), target);
  }
  
  // optional bool result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }
  
  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CGMCmdTxtCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 callbackid = 1;
    if (has_callbackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->callbackid());
    }
    
    // optional bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CGMCmdTxtCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CGMCmdTxtCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CGMCmdTxtCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CGMCmdTxtCmd::MergeFrom(const PBG2CGMCmdTxtCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callbackid()) {
      set_callbackid(from.callbackid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CGMCmdTxtCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CGMCmdTxtCmd::CopyFrom(const PBG2CGMCmdTxtCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CGMCmdTxtCmd::IsInitialized() const {
  
  return true;
}

void PBG2CGMCmdTxtCmd::Swap(PBG2CGMCmdTxtCmd* other) {
  if (other != this) {
    std::swap(callbackid_, other->callbackid_);
    std::swap(result_, other->result_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CGMCmdTxtCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CGMCmdTxtCmd_descriptor_;
  metadata.reflection = PBG2CGMCmdTxtCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CSceneFlySameGameSvr::kSceneidFieldNumber;
const int PBG2CSceneFlySameGameSvr::kScenecellidFieldNumber;
const int PBG2CSceneFlySameGameSvr::kUnitidFieldNumber;
const int PBG2CSceneFlySameGameSvr::kPbPointFieldNumber;
const int PBG2CSceneFlySameGameSvr::kScenedynidFieldNumber;
#endif  // !_MSC_VER

PBG2CSceneFlySameGameSvr::PBG2CSceneFlySameGameSvr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSceneFlySameGameSvr::InitAsDefaultInstance() {
  pbpoint_ = const_cast< ::PBPoint*>(&::PBPoint::default_instance());
}

PBG2CSceneFlySameGameSvr::PBG2CSceneFlySameGameSvr(const PBG2CSceneFlySameGameSvr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSceneFlySameGameSvr::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  scenecellid_ = 0u;
  unitid_ = 0u;
  pbpoint_ = NULL;
  scenedynid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSceneFlySameGameSvr::~PBG2CSceneFlySameGameSvr() {
  SharedDtor();
}

void PBG2CSceneFlySameGameSvr::SharedDtor() {
  if (this != default_instance_) {
    delete pbpoint_;
  }
}

void PBG2CSceneFlySameGameSvr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSceneFlySameGameSvr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSceneFlySameGameSvr_descriptor_;
}

const PBG2CSceneFlySameGameSvr& PBG2CSceneFlySameGameSvr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CSceneFlySameGameSvr* PBG2CSceneFlySameGameSvr::default_instance_ = NULL;

PBG2CSceneFlySameGameSvr* PBG2CSceneFlySameGameSvr::New() const {
  return new PBG2CSceneFlySameGameSvr;
}

void PBG2CSceneFlySameGameSvr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    scenecellid_ = 0u;
    unitid_ = 0u;
    if (has_pbpoint()) {
      if (pbpoint_ != NULL) pbpoint_->::PBPoint::Clear();
    }
    scenedynid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSceneFlySameGameSvr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scenecellid;
        break;
      }
      
      // optional uint32 scenecellid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenecellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenecellid_)));
          set_has_scenecellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unitid;
        break;
      }
      
      // optional uint32 unitid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pbPoint;
        break;
      }
      
      // optional .PBPoint pbPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scenedynid;
        break;
      }
      
      // optional uint64 scenedynid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenedynid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scenedynid_)));
          set_has_scenedynid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CSceneFlySameGameSvr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint32 scenecellid = 2;
  if (has_scenecellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scenecellid(), output);
  }
  
  // optional uint32 unitid = 3;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unitid(), output);
  }
  
  // optional .PBPoint pbPoint = 4;
  if (has_pbpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pbpoint(), output);
  }
  
  // optional uint64 scenedynid = 5;
  if (has_scenedynid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->scenedynid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSceneFlySameGameSvr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint32 scenecellid = 2;
  if (has_scenecellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scenecellid(), target);
  }
  
  // optional uint32 unitid = 3;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unitid(), target);
  }
  
  // optional .PBPoint pbPoint = 4;
  if (has_pbpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pbpoint(), target);
  }
  
  // optional uint64 scenedynid = 5;
  if (has_scenedynid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->scenedynid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSceneFlySameGameSvr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 scenecellid = 2;
    if (has_scenecellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenecellid());
    }
    
    // optional uint32 unitid = 3;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
    // optional .PBPoint pbPoint = 4;
    if (has_pbpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbpoint());
    }
    
    // optional uint64 scenedynid = 5;
    if (has_scenedynid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scenedynid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSceneFlySameGameSvr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSceneFlySameGameSvr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSceneFlySameGameSvr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSceneFlySameGameSvr::MergeFrom(const PBG2CSceneFlySameGameSvr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenecellid()) {
      set_scenecellid(from.scenecellid());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_pbpoint()) {
      mutable_pbpoint()->::PBPoint::MergeFrom(from.pbpoint());
    }
    if (from.has_scenedynid()) {
      set_scenedynid(from.scenedynid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSceneFlySameGameSvr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSceneFlySameGameSvr::CopyFrom(const PBG2CSceneFlySameGameSvr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSceneFlySameGameSvr::IsInitialized() const {
  
  return true;
}

void PBG2CSceneFlySameGameSvr::Swap(PBG2CSceneFlySameGameSvr* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenecellid_, other->scenecellid_);
    std::swap(unitid_, other->unitid_);
    std::swap(pbpoint_, other->pbpoint_);
    std::swap(scenedynid_, other->scenedynid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSceneFlySameGameSvr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSceneFlySameGameSvr_descriptor_;
  metadata.reflection = PBG2CSceneFlySameGameSvr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CSceneFlyJumpGameSvr::kHostFieldNumber;
const int PBG2CSceneFlyJumpGameSvr::kPortFieldNumber;
#endif  // !_MSC_VER

PBG2CSceneFlyJumpGameSvr::PBG2CSceneFlyJumpGameSvr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSceneFlyJumpGameSvr::InitAsDefaultInstance() {
}

PBG2CSceneFlyJumpGameSvr::PBG2CSceneFlyJumpGameSvr(const PBG2CSceneFlyJumpGameSvr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSceneFlyJumpGameSvr::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSceneFlyJumpGameSvr::~PBG2CSceneFlyJumpGameSvr() {
  SharedDtor();
}

void PBG2CSceneFlyJumpGameSvr::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void PBG2CSceneFlyJumpGameSvr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSceneFlyJumpGameSvr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSceneFlyJumpGameSvr_descriptor_;
}

const PBG2CSceneFlyJumpGameSvr& PBG2CSceneFlyJumpGameSvr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CSceneFlyJumpGameSvr* PBG2CSceneFlyJumpGameSvr::default_instance_ = NULL;

PBG2CSceneFlyJumpGameSvr* PBG2CSceneFlyJumpGameSvr::New() const {
  return new PBG2CSceneFlyJumpGameSvr;
}

void PBG2CSceneFlyJumpGameSvr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSceneFlyJumpGameSvr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CSceneFlyJumpGameSvr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSceneFlyJumpGameSvr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSceneFlyJumpGameSvr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSceneFlyJumpGameSvr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSceneFlyJumpGameSvr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSceneFlyJumpGameSvr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSceneFlyJumpGameSvr::MergeFrom(const PBG2CSceneFlyJumpGameSvr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSceneFlyJumpGameSvr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSceneFlyJumpGameSvr::CopyFrom(const PBG2CSceneFlyJumpGameSvr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSceneFlyJumpGameSvr::IsInitialized() const {
  
  return true;
}

void PBG2CSceneFlyJumpGameSvr::Swap(PBG2CSceneFlyJumpGameSvr* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSceneFlyJumpGameSvr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSceneFlyJumpGameSvr_descriptor_;
  metadata.reflection = PBG2CSceneFlyJumpGameSvr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommonUnitRemove::kUnittypeFieldNumber;
const int PBG2CCommonUnitRemove::kUnitidFieldNumber;
#endif  // !_MSC_VER

PBG2CCommonUnitRemove::PBG2CCommonUnitRemove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommonUnitRemove::InitAsDefaultInstance() {
}

PBG2CCommonUnitRemove::PBG2CCommonUnitRemove(const PBG2CCommonUnitRemove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommonUnitRemove::SharedCtor() {
  _cached_size_ = 0;
  unittype_ = 0u;
  unitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommonUnitRemove::~PBG2CCommonUnitRemove() {
  SharedDtor();
}

void PBG2CCommonUnitRemove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommonUnitRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommonUnitRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommonUnitRemove_descriptor_;
}

const PBG2CCommonUnitRemove& PBG2CCommonUnitRemove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommonUnitRemove* PBG2CCommonUnitRemove::default_instance_ = NULL;

PBG2CCommonUnitRemove* PBG2CCommonUnitRemove::New() const {
  return new PBG2CCommonUnitRemove;
}

void PBG2CCommonUnitRemove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unittype_ = 0u;
    unitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommonUnitRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unittype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unittype_)));
          set_has_unittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitid;
        break;
      }
      
      // required uint32 unitid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommonUnitRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unittype = 1;
  if (has_unittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unittype(), output);
  }
  
  // required uint32 unitid = 2;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommonUnitRemove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unittype = 1;
  if (has_unittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unittype(), target);
  }
  
  // required uint32 unitid = 2;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommonUnitRemove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unittype = 1;
    if (has_unittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unittype());
    }
    
    // required uint32 unitid = 2;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommonUnitRemove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommonUnitRemove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommonUnitRemove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommonUnitRemove::MergeFrom(const PBG2CCommonUnitRemove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommonUnitRemove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommonUnitRemove::CopyFrom(const PBG2CCommonUnitRemove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommonUnitRemove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PBG2CCommonUnitRemove::Swap(PBG2CCommonUnitRemove* other) {
  if (other != this) {
    std::swap(unittype_, other->unittype_);
    std::swap(unitid_, other->unitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommonUnitRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommonUnitRemove_descriptor_;
  metadata.reflection = PBG2CCommonUnitRemove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCommonMove::kPosxFieldNumber;
const int PBC2GCommonMove::kPosyFieldNumber;
const int PBC2GCommonMove::kDirFieldNumber;
const int PBC2GCommonMove::kTypeFieldNumber;
#endif  // !_MSC_VER

PBC2GCommonMove::PBC2GCommonMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommonMove::InitAsDefaultInstance() {
}

PBC2GCommonMove::PBC2GCommonMove(const PBC2GCommonMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommonMove::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 0;
  posy_ = 0;
  dir_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommonMove::~PBC2GCommonMove() {
  SharedDtor();
}

void PBC2GCommonMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommonMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommonMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommonMove_descriptor_;
}

const PBC2GCommonMove& PBC2GCommonMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommonMove* PBC2GCommonMove::default_instance_ = NULL;

PBC2GCommonMove* PBC2GCommonMove::New() const {
  return new PBC2GCommonMove;
}

void PBC2GCommonMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posx_ = 0;
    posy_ = 0;
    dir_ = 0;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommonMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float posx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_posy;
        break;
      }
      
      // optional float posy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }
      
      // optional float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCommonMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float posx = 1;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->posx(), output);
  }
  
  // optional float posy = 2;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->posy(), output);
  }
  
  // optional float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }
  
  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommonMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float posx = 1;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->posx(), target);
  }
  
  // optional float posy = 2;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->posy(), target);
  }
  
  // optional float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }
  
  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommonMove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float posx = 1;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
    // optional float posy = 2;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
    // optional float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommonMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommonMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommonMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommonMove::MergeFrom(const PBC2GCommonMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommonMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommonMove::CopyFrom(const PBC2GCommonMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommonMove::IsInitialized() const {
  
  return true;
}

void PBC2GCommonMove::Swap(PBC2GCommonMove* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(dir_, other->dir_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommonMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommonMove_descriptor_;
  metadata.reflection = PBC2GCommonMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GUseSkill::kSkillidFieldNumber;
const int PBC2GUseSkill::kPbpositionFieldNumber;
const int PBC2GUseSkill::kDirectionFieldNumber;
const int PBC2GUseSkill::kTargetidFieldNumber;
const int PBC2GUseSkill::kPbtargetFieldNumber;
#endif  // !_MSC_VER

PBC2GUseSkill::PBC2GUseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GUseSkill::InitAsDefaultInstance() {
  pbposition_ = const_cast< ::PBPoint*>(&::PBPoint::default_instance());
  pbtarget_ = const_cast< ::PBPoint*>(&::PBPoint::default_instance());
}

PBC2GUseSkill::PBC2GUseSkill(const PBC2GUseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GUseSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  pbposition_ = NULL;
  direction_ = 0;
  targetid_ = 0u;
  pbtarget_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GUseSkill::~PBC2GUseSkill() {
  SharedDtor();
}

void PBC2GUseSkill::SharedDtor() {
  if (this != default_instance_) {
    delete pbposition_;
    delete pbtarget_;
  }
}

void PBC2GUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GUseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GUseSkill_descriptor_;
}

const PBC2GUseSkill& PBC2GUseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GUseSkill* PBC2GUseSkill::default_instance_ = NULL;

PBC2GUseSkill* PBC2GUseSkill::New() const {
  return new PBC2GUseSkill;
}

void PBC2GUseSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    if (has_pbposition()) {
      if (pbposition_ != NULL) pbposition_->::PBPoint::Clear();
    }
    direction_ = 0;
    targetid_ = 0u;
    if (has_pbtarget()) {
      if (pbtarget_ != NULL) pbtarget_->::PBPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbposition;
        break;
      }
      
      // optional .PBPoint pbposition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbposition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_direction;
        break;
      }
      
      // optional float direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pbtarget;
        break;
      }
      
      // optional .PBPoint pbtarget = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbtarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbtarget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional .PBPoint pbposition = 2;
  if (has_pbposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbposition(), output);
  }
  
  // optional float direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->direction(), output);
  }
  
  // optional uint32 targetid = 4;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->targetid(), output);
  }
  
  // optional .PBPoint pbtarget = 5;
  if (has_pbtarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pbtarget(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GUseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional .PBPoint pbposition = 2;
  if (has_pbposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbposition(), target);
  }
  
  // optional float direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->direction(), target);
  }
  
  // optional uint32 targetid = 4;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->targetid(), target);
  }
  
  // optional .PBPoint pbtarget = 5;
  if (has_pbtarget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pbtarget(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GUseSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional .PBPoint pbposition = 2;
    if (has_pbposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbposition());
    }
    
    // optional float direction = 3;
    if (has_direction()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 targetid = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
    // optional .PBPoint pbtarget = 5;
    if (has_pbtarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbtarget());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GUseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GUseSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GUseSkill::MergeFrom(const PBC2GUseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pbposition()) {
      mutable_pbposition()->::PBPoint::MergeFrom(from.pbposition());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_pbtarget()) {
      mutable_pbtarget()->::PBPoint::MergeFrom(from.pbtarget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GUseSkill::CopyFrom(const PBC2GUseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GUseSkill::IsInitialized() const {
  
  return true;
}

void PBC2GUseSkill::Swap(PBC2GUseSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(pbposition_, other->pbposition_);
    std::swap(direction_, other->direction_);
    std::swap(targetid_, other->targetid_);
    std::swap(pbtarget_, other->pbtarget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GUseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GUseSkill_descriptor_;
  metadata.reflection = PBC2GUseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GSkillBreak::kSkillidFieldNumber;
#endif  // !_MSC_VER

PBC2GSkillBreak::PBC2GSkillBreak()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GSkillBreak::InitAsDefaultInstance() {
}

PBC2GSkillBreak::PBC2GSkillBreak(const PBC2GSkillBreak& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GSkillBreak::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GSkillBreak::~PBC2GSkillBreak() {
  SharedDtor();
}

void PBC2GSkillBreak::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GSkillBreak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GSkillBreak::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GSkillBreak_descriptor_;
}

const PBC2GSkillBreak& PBC2GSkillBreak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GSkillBreak* PBC2GSkillBreak::default_instance_ = NULL;

PBC2GSkillBreak* PBC2GSkillBreak::New() const {
  return new PBC2GSkillBreak;
}

void PBC2GSkillBreak::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GSkillBreak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GSkillBreak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GSkillBreak::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GSkillBreak::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GSkillBreak::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GSkillBreak* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GSkillBreak*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GSkillBreak::MergeFrom(const PBC2GSkillBreak& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GSkillBreak::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GSkillBreak::CopyFrom(const PBC2GSkillBreak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GSkillBreak::IsInitialized() const {
  
  return true;
}

void PBC2GSkillBreak::Swap(PBC2GSkillBreak* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GSkillBreak::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GSkillBreak_descriptor_;
  metadata.reflection = PBC2GSkillBreak_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SSkillUseCharge::kSkillidFieldNumber;
#endif  // !_MSC_VER

PBC2SSkillUseCharge::PBC2SSkillUseCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SSkillUseCharge::InitAsDefaultInstance() {
}

PBC2SSkillUseCharge::PBC2SSkillUseCharge(const PBC2SSkillUseCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SSkillUseCharge::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SSkillUseCharge::~PBC2SSkillUseCharge() {
  SharedDtor();
}

void PBC2SSkillUseCharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SSkillUseCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SSkillUseCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SSkillUseCharge_descriptor_;
}

const PBC2SSkillUseCharge& PBC2SSkillUseCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SSkillUseCharge* PBC2SSkillUseCharge::default_instance_ = NULL;

PBC2SSkillUseCharge* PBC2SSkillUseCharge::New() const {
  return new PBC2SSkillUseCharge;
}

void PBC2SSkillUseCharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SSkillUseCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SSkillUseCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SSkillUseCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SSkillUseCharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SSkillUseCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SSkillUseCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SSkillUseCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SSkillUseCharge::MergeFrom(const PBC2SSkillUseCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SSkillUseCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SSkillUseCharge::CopyFrom(const PBC2SSkillUseCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SSkillUseCharge::IsInitialized() const {
  
  return true;
}

void PBC2SSkillUseCharge::Swap(PBC2SSkillUseCharge* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SSkillUseCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SSkillUseCharge_descriptor_;
  metadata.reflection = PBC2SSkillUseCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GSkillUpgrade::kSkillidFieldNumber;
const int PBC2GSkillUpgrade::kLevelFieldNumber;
#endif  // !_MSC_VER

PBC2GSkillUpgrade::PBC2GSkillUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GSkillUpgrade::InitAsDefaultInstance() {
}

PBC2GSkillUpgrade::PBC2GSkillUpgrade(const PBC2GSkillUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GSkillUpgrade::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GSkillUpgrade::~PBC2GSkillUpgrade() {
  SharedDtor();
}

void PBC2GSkillUpgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GSkillUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GSkillUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GSkillUpgrade_descriptor_;
}

const PBC2GSkillUpgrade& PBC2GSkillUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GSkillUpgrade* PBC2GSkillUpgrade::default_instance_ = NULL;

PBC2GSkillUpgrade* PBC2GSkillUpgrade::New() const {
  return new PBC2GSkillUpgrade;
}

void PBC2GSkillUpgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GSkillUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GSkillUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GSkillUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GSkillUpgrade::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GSkillUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GSkillUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GSkillUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GSkillUpgrade::MergeFrom(const PBC2GSkillUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GSkillUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GSkillUpgrade::CopyFrom(const PBC2GSkillUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GSkillUpgrade::IsInitialized() const {
  
  return true;
}

void PBC2GSkillUpgrade::Swap(PBC2GSkillUpgrade* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GSkillUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GSkillUpgrade_descriptor_;
  metadata.reflection = PBC2GSkillUpgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GSkillAdd::kSkillidFieldNumber;
const int PBC2GSkillAdd::kLevelFieldNumber;
#endif  // !_MSC_VER

PBC2GSkillAdd::PBC2GSkillAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GSkillAdd::InitAsDefaultInstance() {
}

PBC2GSkillAdd::PBC2GSkillAdd(const PBC2GSkillAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GSkillAdd::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GSkillAdd::~PBC2GSkillAdd() {
  SharedDtor();
}

void PBC2GSkillAdd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GSkillAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GSkillAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GSkillAdd_descriptor_;
}

const PBC2GSkillAdd& PBC2GSkillAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GSkillAdd* PBC2GSkillAdd::default_instance_ = NULL;

PBC2GSkillAdd* PBC2GSkillAdd::New() const {
  return new PBC2GSkillAdd;
}

void PBC2GSkillAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GSkillAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GSkillAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GSkillAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GSkillAdd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GSkillAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GSkillAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GSkillAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GSkillAdd::MergeFrom(const PBC2GSkillAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GSkillAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GSkillAdd::CopyFrom(const PBC2GSkillAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GSkillAdd::IsInitialized() const {
  
  return true;
}

void PBC2GSkillAdd::Swap(PBC2GSkillAdd* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GSkillAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GSkillAdd_descriptor_;
  metadata.reflection = PBC2GSkillAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CSkillBreak::kSkillidFieldNumber;
const int PBG2CSkillBreak::kUnitidFieldNumber;
const int PBG2CSkillBreak::kStageFieldNumber;
#endif  // !_MSC_VER

PBG2CSkillBreak::PBG2CSkillBreak()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSkillBreak::InitAsDefaultInstance() {
}

PBG2CSkillBreak::PBG2CSkillBreak(const PBG2CSkillBreak& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSkillBreak::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  unitid_ = 0u;
  stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSkillBreak::~PBG2CSkillBreak() {
  SharedDtor();
}

void PBG2CSkillBreak::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CSkillBreak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSkillBreak::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSkillBreak_descriptor_;
}

const PBG2CSkillBreak& PBG2CSkillBreak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CSkillBreak* PBG2CSkillBreak::default_instance_ = NULL;

PBG2CSkillBreak* PBG2CSkillBreak::New() const {
  return new PBG2CSkillBreak;
}

void PBG2CSkillBreak::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    unitid_ = 0u;
    stage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSkillBreak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitid;
        break;
      }
      
      // optional uint32 unitid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stage;
        break;
      }
      
      // optional uint32 stage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CSkillBreak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 unitid = 2;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unitid(), output);
  }
  
  // optional uint32 stage = 3;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSkillBreak::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 unitid = 2;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unitid(), target);
  }
  
  // optional uint32 stage = 3;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSkillBreak::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 unitid = 2;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
    // optional uint32 stage = 3;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSkillBreak::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSkillBreak* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSkillBreak*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSkillBreak::MergeFrom(const PBG2CSkillBreak& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSkillBreak::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSkillBreak::CopyFrom(const PBG2CSkillBreak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSkillBreak::IsInitialized() const {
  
  return true;
}

void PBG2CSkillBreak::Swap(PBG2CSkillBreak* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(unitid_, other->unitid_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSkillBreak::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSkillBreak_descriptor_;
  metadata.reflection = PBG2CSkillBreak_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CUseSkill::kSkillFieldNumber;
const int PBG2CUseSkill::kStageFieldNumber;
const int PBG2CUseSkill::kDirectionFieldNumber;
const int PBG2CUseSkill::kPbpositionFieldNumber;
const int PBG2CUseSkill::kUnitidFieldNumber;
const int PBG2CUseSkill::kTargetidFieldNumber;
const int PBG2CUseSkill::kPbtargetFieldNumber;
#endif  // !_MSC_VER

PBG2CUseSkill::PBG2CUseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CUseSkill::InitAsDefaultInstance() {
  skill_ = const_cast< ::PBSkill*>(&::PBSkill::default_instance());
  pbposition_ = const_cast< ::PBPoint*>(&::PBPoint::default_instance());
  pbtarget_ = const_cast< ::PBPoint*>(&::PBPoint::default_instance());
}

PBG2CUseSkill::PBG2CUseSkill(const PBG2CUseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CUseSkill::SharedCtor() {
  _cached_size_ = 0;
  skill_ = NULL;
  stage_ = 0u;
  direction_ = 0;
  pbposition_ = NULL;
  unitid_ = 0u;
  targetid_ = 0u;
  pbtarget_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CUseSkill::~PBG2CUseSkill() {
  SharedDtor();
}

void PBG2CUseSkill::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
    delete pbposition_;
    delete pbtarget_;
  }
}

void PBG2CUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CUseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CUseSkill_descriptor_;
}

const PBG2CUseSkill& PBG2CUseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CUseSkill* PBG2CUseSkill::default_instance_ = NULL;

PBG2CUseSkill* PBG2CUseSkill::New() const {
  return new PBG2CUseSkill;
}

void PBG2CUseSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_skill()) {
      if (skill_ != NULL) skill_->::PBSkill::Clear();
    }
    stage_ = 0u;
    direction_ = 0;
    if (has_pbposition()) {
      if (pbposition_ != NULL) pbposition_->::PBPoint::Clear();
    }
    unitid_ = 0u;
    targetid_ = 0u;
    if (has_pbtarget()) {
      if (pbtarget_ != NULL) pbtarget_->::PBPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBSkill skill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage;
        break;
      }
      
      // optional uint32 stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_direction;
        break;
      }
      
      // optional float direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pbposition;
        break;
      }
      
      // optional .PBPoint pbposition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbposition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unitid;
        break;
      }
      
      // optional uint32 unitid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pbtarget;
        break;
      }
      
      // optional .PBPoint pbtarget = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbtarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbtarget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBSkill skill = 1;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill(), output);
  }
  
  // optional uint32 stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stage(), output);
  }
  
  // optional float direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->direction(), output);
  }
  
  // optional .PBPoint pbposition = 4;
  if (has_pbposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pbposition(), output);
  }
  
  // optional uint32 unitid = 5;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unitid(), output);
  }
  
  // optional uint32 targetid = 6;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->targetid(), output);
  }
  
  // optional .PBPoint pbtarget = 7;
  if (has_pbtarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pbtarget(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CUseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBSkill skill = 1;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill(), target);
  }
  
  // optional uint32 stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stage(), target);
  }
  
  // optional float direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->direction(), target);
  }
  
  // optional .PBPoint pbposition = 4;
  if (has_pbposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pbposition(), target);
  }
  
  // optional uint32 unitid = 5;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->unitid(), target);
  }
  
  // optional uint32 targetid = 6;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->targetid(), target);
  }
  
  // optional .PBPoint pbtarget = 7;
  if (has_pbtarget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pbtarget(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CUseSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBSkill skill = 1;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }
    
    // optional uint32 stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }
    
    // optional float direction = 3;
    if (has_direction()) {
      total_size += 1 + 4;
    }
    
    // optional .PBPoint pbposition = 4;
    if (has_pbposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbposition());
    }
    
    // optional uint32 unitid = 5;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
    // optional uint32 targetid = 6;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
    // optional .PBPoint pbtarget = 7;
    if (has_pbtarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbtarget());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CUseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CUseSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CUseSkill::MergeFrom(const PBG2CUseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill()) {
      mutable_skill()->::PBSkill::MergeFrom(from.skill());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_pbposition()) {
      mutable_pbposition()->::PBPoint::MergeFrom(from.pbposition());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_pbtarget()) {
      mutable_pbtarget()->::PBPoint::MergeFrom(from.pbtarget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CUseSkill::CopyFrom(const PBG2CUseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CUseSkill::IsInitialized() const {
  
  return true;
}

void PBG2CUseSkill::Swap(PBG2CUseSkill* other) {
  if (other != this) {
    std::swap(skill_, other->skill_);
    std::swap(stage_, other->stage_);
    std::swap(direction_, other->direction_);
    std::swap(pbposition_, other->pbposition_);
    std::swap(unitid_, other->unitid_);
    std::swap(targetid_, other->targetid_);
    std::swap(pbtarget_, other->pbtarget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CUseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CUseSkill_descriptor_;
  metadata.reflection = PBG2CUseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CAddSkill::kSkillidFieldNumber;
const int PBG2CAddSkill::kLevelFieldNumber;
#endif  // !_MSC_VER

PBG2CAddSkill::PBG2CAddSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CAddSkill::InitAsDefaultInstance() {
}

PBG2CAddSkill::PBG2CAddSkill(const PBG2CAddSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CAddSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CAddSkill::~PBG2CAddSkill() {
  SharedDtor();
}

void PBG2CAddSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CAddSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CAddSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CAddSkill_descriptor_;
}

const PBG2CAddSkill& PBG2CAddSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CAddSkill* PBG2CAddSkill::default_instance_ = NULL;

PBG2CAddSkill* PBG2CAddSkill::New() const {
  return new PBG2CAddSkill;
}

void PBG2CAddSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CAddSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CAddSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CAddSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CAddSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CAddSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CAddSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CAddSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CAddSkill::MergeFrom(const PBG2CAddSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CAddSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CAddSkill::CopyFrom(const PBG2CAddSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CAddSkill::IsInitialized() const {
  
  return true;
}

void PBG2CAddSkill::Swap(PBG2CAddSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CAddSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CAddSkill_descriptor_;
  metadata.reflection = PBG2CAddSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CDelSkill::kSkillidFieldNumber;
#endif  // !_MSC_VER

PBG2CDelSkill::PBG2CDelSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CDelSkill::InitAsDefaultInstance() {
}

PBG2CDelSkill::PBG2CDelSkill(const PBG2CDelSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CDelSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CDelSkill::~PBG2CDelSkill() {
  SharedDtor();
}

void PBG2CDelSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CDelSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CDelSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CDelSkill_descriptor_;
}

const PBG2CDelSkill& PBG2CDelSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CDelSkill* PBG2CDelSkill::default_instance_ = NULL;

PBG2CDelSkill* PBG2CDelSkill::New() const {
  return new PBG2CDelSkill;
}

void PBG2CDelSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CDelSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CDelSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CDelSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CDelSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CDelSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CDelSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CDelSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CDelSkill::MergeFrom(const PBG2CDelSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CDelSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CDelSkill::CopyFrom(const PBG2CDelSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CDelSkill::IsInitialized() const {
  
  return true;
}

void PBG2CDelSkill::Swap(PBG2CDelSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CDelSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CDelSkill_descriptor_;
  metadata.reflection = PBG2CDelSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CUpCoolTime::kCoolinfoFieldNumber;
const int PBG2CUpCoolTime::kCoolgroupinfoFieldNumber;
#endif  // !_MSC_VER

PBG2CUpCoolTime::PBG2CUpCoolTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CUpCoolTime::InitAsDefaultInstance() {
  coolinfo_ = const_cast< ::PBCoolingInfo*>(&::PBCoolingInfo::default_instance());
  coolgroupinfo_ = const_cast< ::PBCoolingInfo*>(&::PBCoolingInfo::default_instance());
}

PBG2CUpCoolTime::PBG2CUpCoolTime(const PBG2CUpCoolTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CUpCoolTime::SharedCtor() {
  _cached_size_ = 0;
  coolinfo_ = NULL;
  coolgroupinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CUpCoolTime::~PBG2CUpCoolTime() {
  SharedDtor();
}

void PBG2CUpCoolTime::SharedDtor() {
  if (this != default_instance_) {
    delete coolinfo_;
    delete coolgroupinfo_;
  }
}

void PBG2CUpCoolTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CUpCoolTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CUpCoolTime_descriptor_;
}

const PBG2CUpCoolTime& PBG2CUpCoolTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CUpCoolTime* PBG2CUpCoolTime::default_instance_ = NULL;

PBG2CUpCoolTime* PBG2CUpCoolTime::New() const {
  return new PBG2CUpCoolTime;
}

void PBG2CUpCoolTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_coolinfo()) {
      if (coolinfo_ != NULL) coolinfo_->::PBCoolingInfo::Clear();
    }
    if (has_coolgroupinfo()) {
      if (coolgroupinfo_ != NULL) coolgroupinfo_->::PBCoolingInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CUpCoolTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCoolingInfo coolinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coolinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_coolgroupinfo;
        break;
      }
      
      // optional .PBCoolingInfo coolgroupinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coolgroupinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coolgroupinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CUpCoolTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCoolingInfo coolinfo = 1;
  if (has_coolinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coolinfo(), output);
  }
  
  // optional .PBCoolingInfo coolgroupinfo = 2;
  if (has_coolgroupinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->coolgroupinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CUpCoolTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCoolingInfo coolinfo = 1;
  if (has_coolinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coolinfo(), target);
  }
  
  // optional .PBCoolingInfo coolgroupinfo = 2;
  if (has_coolgroupinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->coolgroupinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CUpCoolTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCoolingInfo coolinfo = 1;
    if (has_coolinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coolinfo());
    }
    
    // optional .PBCoolingInfo coolgroupinfo = 2;
    if (has_coolgroupinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coolgroupinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CUpCoolTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CUpCoolTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CUpCoolTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CUpCoolTime::MergeFrom(const PBG2CUpCoolTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coolinfo()) {
      mutable_coolinfo()->::PBCoolingInfo::MergeFrom(from.coolinfo());
    }
    if (from.has_coolgroupinfo()) {
      mutable_coolgroupinfo()->::PBCoolingInfo::MergeFrom(from.coolgroupinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CUpCoolTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CUpCoolTime::CopyFrom(const PBG2CUpCoolTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CUpCoolTime::IsInitialized() const {
  
  return true;
}

void PBG2CUpCoolTime::Swap(PBG2CUpCoolTime* other) {
  if (other != this) {
    std::swap(coolinfo_, other->coolinfo_);
    std::swap(coolgroupinfo_, other->coolgroupinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CUpCoolTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CUpCoolTime_descriptor_;
  metadata.reflection = PBG2CUpCoolTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CUpgradeSkill::kSkillidFieldNumber;
const int PBG2CUpgradeSkill::kLevelFieldNumber;
#endif  // !_MSC_VER

PBG2CUpgradeSkill::PBG2CUpgradeSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CUpgradeSkill::InitAsDefaultInstance() {
}

PBG2CUpgradeSkill::PBG2CUpgradeSkill(const PBG2CUpgradeSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CUpgradeSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CUpgradeSkill::~PBG2CUpgradeSkill() {
  SharedDtor();
}

void PBG2CUpgradeSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CUpgradeSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CUpgradeSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CUpgradeSkill_descriptor_;
}

const PBG2CUpgradeSkill& PBG2CUpgradeSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CUpgradeSkill* PBG2CUpgradeSkill::default_instance_ = NULL;

PBG2CUpgradeSkill* PBG2CUpgradeSkill::New() const {
  return new PBG2CUpgradeSkill;
}

void PBG2CUpgradeSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CUpgradeSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CUpgradeSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CUpgradeSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CUpgradeSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CUpgradeSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CUpgradeSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CUpgradeSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CUpgradeSkill::MergeFrom(const PBG2CUpgradeSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CUpgradeSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CUpgradeSkill::CopyFrom(const PBG2CUpgradeSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CUpgradeSkill::IsInitialized() const {
  
  return true;
}

void PBG2CUpgradeSkill::Swap(PBG2CUpgradeSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CUpgradeSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CUpgradeSkill_descriptor_;
  metadata.reflection = PBG2CUpgradeSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CSkillNotice::kTargetidFieldNumber;
const int PBG2CSkillNotice::kTypeFieldNumber;
#endif  // !_MSC_VER

PBG2CSkillNotice::PBG2CSkillNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSkillNotice::InitAsDefaultInstance() {
}

PBG2CSkillNotice::PBG2CSkillNotice(const PBG2CSkillNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSkillNotice::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSkillNotice::~PBG2CSkillNotice() {
  SharedDtor();
}

void PBG2CSkillNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CSkillNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSkillNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSkillNotice_descriptor_;
}

const PBG2CSkillNotice& PBG2CSkillNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CSkillNotice* PBG2CSkillNotice::default_instance_ = NULL;

PBG2CSkillNotice* PBG2CSkillNotice::New() const {
  return new PBG2CSkillNotice;
}

void PBG2CSkillNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSkillNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 targetid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CSkillNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetid(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSkillNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetid(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSkillNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 targetid = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSkillNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSkillNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSkillNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSkillNotice::MergeFrom(const PBG2CSkillNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSkillNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSkillNotice::CopyFrom(const PBG2CSkillNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSkillNotice::IsInitialized() const {
  
  return true;
}

void PBG2CSkillNotice::Swap(PBG2CSkillNotice* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSkillNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSkillNotice_descriptor_;
  metadata.reflection = PBG2CSkillNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CSkillDamage::kSourceidFieldNumber;
const int PBG2CSkillDamage::kTargetidFieldNumber;
const int PBG2CSkillDamage::kCriticalFieldNumber;
const int PBG2CSkillDamage::kValueFieldNumber;
const int PBG2CSkillDamage::kSkillidFieldNumber;
const int PBG2CSkillDamage::kNewposionFieldNumber;
#endif  // !_MSC_VER

PBG2CSkillDamage::PBG2CSkillDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSkillDamage::InitAsDefaultInstance() {
  newposion_ = const_cast< ::PBPoint*>(&::PBPoint::default_instance());
}

PBG2CSkillDamage::PBG2CSkillDamage(const PBG2CSkillDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSkillDamage::SharedCtor() {
  _cached_size_ = 0;
  sourceid_ = 0u;
  targetid_ = 0u;
  critical_ = 0u;
  value_ = 0;
  skillid_ = 0u;
  newposion_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSkillDamage::~PBG2CSkillDamage() {
  SharedDtor();
}

void PBG2CSkillDamage::SharedDtor() {
  if (this != default_instance_) {
    delete newposion_;
  }
}

void PBG2CSkillDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSkillDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSkillDamage_descriptor_;
}

const PBG2CSkillDamage& PBG2CSkillDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CSkillDamage* PBG2CSkillDamage::default_instance_ = NULL;

PBG2CSkillDamage* PBG2CSkillDamage::New() const {
  return new PBG2CSkillDamage;
}

void PBG2CSkillDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourceid_ = 0u;
    targetid_ = 0u;
    critical_ = 0u;
    value_ = 0;
    skillid_ = 0u;
    if (has_newposion()) {
      if (newposion_ != NULL) newposion_->::PBPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSkillDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sourceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_critical;
        break;
      }
      
      // optional uint32 critical = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }
      
      // optional int32 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skillid;
        break;
      }
      
      // optional uint32 skillid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_newposion;
        break;
      }
      
      // optional .PBPoint newposion = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newposion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newposion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CSkillDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sourceid = 1;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sourceid(), output);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetid(), output);
  }
  
  // optional uint32 critical = 3;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->critical(), output);
  }
  
  // optional int32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }
  
  // optional uint32 skillid = 5;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skillid(), output);
  }
  
  // optional .PBPoint newposion = 6;
  if (has_newposion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->newposion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSkillDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sourceid = 1;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sourceid(), target);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetid(), target);
  }
  
  // optional uint32 critical = 3;
  if (has_critical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->critical(), target);
  }
  
  // optional int32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value(), target);
  }
  
  // optional uint32 skillid = 5;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->skillid(), target);
  }
  
  // optional .PBPoint newposion = 6;
  if (has_newposion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->newposion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSkillDamage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sourceid = 1;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }
    
    // optional uint32 targetid = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
    // optional uint32 critical = 3;
    if (has_critical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critical());
    }
    
    // optional int32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional uint32 skillid = 5;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional .PBPoint newposion = 6;
    if (has_newposion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newposion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSkillDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSkillDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSkillDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSkillDamage::MergeFrom(const PBG2CSkillDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_newposion()) {
      mutable_newposion()->::PBPoint::MergeFrom(from.newposion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSkillDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSkillDamage::CopyFrom(const PBG2CSkillDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSkillDamage::IsInitialized() const {
  
  return true;
}

void PBG2CSkillDamage::Swap(PBG2CSkillDamage* other) {
  if (other != this) {
    std::swap(sourceid_, other->sourceid_);
    std::swap(targetid_, other->targetid_);
    std::swap(critical_, other->critical_);
    std::swap(value_, other->value_);
    std::swap(skillid_, other->skillid_);
    std::swap(newposion_, other->newposion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSkillDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSkillDamage_descriptor_;
  metadata.reflection = PBG2CSkillDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CSkillEffect::kTargetidFieldNumber;
const int PBS2CSkillEffect::kNewposionFieldNumber;
#endif  // !_MSC_VER

PBS2CSkillEffect::PBS2CSkillEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CSkillEffect::InitAsDefaultInstance() {
  newposion_ = const_cast< ::PBPoint*>(&::PBPoint::default_instance());
}

PBS2CSkillEffect::PBS2CSkillEffect(const PBS2CSkillEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CSkillEffect::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0u;
  newposion_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CSkillEffect::~PBS2CSkillEffect() {
  SharedDtor();
}

void PBS2CSkillEffect::SharedDtor() {
  if (this != default_instance_) {
    delete newposion_;
  }
}

void PBS2CSkillEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CSkillEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CSkillEffect_descriptor_;
}

const PBS2CSkillEffect& PBS2CSkillEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CSkillEffect* PBS2CSkillEffect::default_instance_ = NULL;

PBS2CSkillEffect* PBS2CSkillEffect::New() const {
  return new PBS2CSkillEffect;
}

void PBS2CSkillEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = 0u;
    if (has_newposion()) {
      if (newposion_ != NULL) newposion_->::PBPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CSkillEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 targetid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newposion;
        break;
      }
      
      // optional .PBPoint newposion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newposion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newposion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CSkillEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetid(), output);
  }
  
  // optional .PBPoint newposion = 2;
  if (has_newposion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newposion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CSkillEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetid(), target);
  }
  
  // optional .PBPoint newposion = 2;
  if (has_newposion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newposion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CSkillEffect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 targetid = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
    // optional .PBPoint newposion = 2;
    if (has_newposion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newposion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CSkillEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CSkillEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CSkillEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CSkillEffect::MergeFrom(const PBS2CSkillEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_newposion()) {
      mutable_newposion()->::PBPoint::MergeFrom(from.newposion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CSkillEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CSkillEffect::CopyFrom(const PBS2CSkillEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CSkillEffect::IsInitialized() const {
  
  return true;
}

void PBS2CSkillEffect::Swap(PBS2CSkillEffect* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(newposion_, other->newposion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CSkillEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CSkillEffect_descriptor_;
  metadata.reflection = PBS2CSkillEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CSkillEffectBroad::kSourceidFieldNumber;
const int PBS2CSkillEffectBroad::kSkillidFieldNumber;
const int PBS2CSkillEffectBroad::kSkilleffectFieldNumber;
#endif  // !_MSC_VER

PBS2CSkillEffectBroad::PBS2CSkillEffectBroad()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CSkillEffectBroad::InitAsDefaultInstance() {
}

PBS2CSkillEffectBroad::PBS2CSkillEffectBroad(const PBS2CSkillEffectBroad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CSkillEffectBroad::SharedCtor() {
  _cached_size_ = 0;
  sourceid_ = 0u;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CSkillEffectBroad::~PBS2CSkillEffectBroad() {
  SharedDtor();
}

void PBS2CSkillEffectBroad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CSkillEffectBroad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CSkillEffectBroad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CSkillEffectBroad_descriptor_;
}

const PBS2CSkillEffectBroad& PBS2CSkillEffectBroad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CSkillEffectBroad* PBS2CSkillEffectBroad::default_instance_ = NULL;

PBS2CSkillEffectBroad* PBS2CSkillEffectBroad::New() const {
  return new PBS2CSkillEffectBroad;
}

void PBS2CSkillEffectBroad::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourceid_ = 0u;
    skillid_ = 0u;
  }
  skilleffect_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CSkillEffectBroad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sourceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillid;
        break;
      }
      
      // optional uint32 skillid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skilleffect;
        break;
      }
      
      // repeated .PBS2CSkillEffect skilleffect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skilleffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilleffect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skilleffect;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CSkillEffectBroad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sourceid = 1;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sourceid(), output);
  }
  
  // optional uint32 skillid = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }
  
  // repeated .PBS2CSkillEffect skilleffect = 3;
  for (int i = 0; i < this->skilleffect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skilleffect(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CSkillEffectBroad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sourceid = 1;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sourceid(), target);
  }
  
  // optional uint32 skillid = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }
  
  // repeated .PBS2CSkillEffect skilleffect = 3;
  for (int i = 0; i < this->skilleffect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skilleffect(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CSkillEffectBroad::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sourceid = 1;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }
    
    // optional uint32 skillid = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
  }
  // repeated .PBS2CSkillEffect skilleffect = 3;
  total_size += 1 * this->skilleffect_size();
  for (int i = 0; i < this->skilleffect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilleffect(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CSkillEffectBroad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CSkillEffectBroad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CSkillEffectBroad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CSkillEffectBroad::MergeFrom(const PBS2CSkillEffectBroad& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilleffect_.MergeFrom(from.skilleffect_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CSkillEffectBroad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CSkillEffectBroad::CopyFrom(const PBS2CSkillEffectBroad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CSkillEffectBroad::IsInitialized() const {
  
  return true;
}

void PBS2CSkillEffectBroad::Swap(PBS2CSkillEffectBroad* other) {
  if (other != this) {
    std::swap(sourceid_, other->sourceid_);
    std::swap(skillid_, other->skillid_);
    skilleffect_.Swap(&other->skilleffect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CSkillEffectBroad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CSkillEffectBroad_descriptor_;
  metadata.reflection = PBS2CSkillEffectBroad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CSkillUseCharge::kSkillidFieldNumber;
const int PBG2CSkillUseCharge::kUnitidFieldNumber;
#endif  // !_MSC_VER

PBG2CSkillUseCharge::PBG2CSkillUseCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSkillUseCharge::InitAsDefaultInstance() {
}

PBG2CSkillUseCharge::PBG2CSkillUseCharge(const PBG2CSkillUseCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSkillUseCharge::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  unitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSkillUseCharge::~PBG2CSkillUseCharge() {
  SharedDtor();
}

void PBG2CSkillUseCharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CSkillUseCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSkillUseCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSkillUseCharge_descriptor_;
}

const PBG2CSkillUseCharge& PBG2CSkillUseCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CSkillUseCharge* PBG2CSkillUseCharge::default_instance_ = NULL;

PBG2CSkillUseCharge* PBG2CSkillUseCharge::New() const {
  return new PBG2CSkillUseCharge;
}

void PBG2CSkillUseCharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    unitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSkillUseCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitid;
        break;
      }
      
      // optional uint32 unitid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CSkillUseCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 unitid = 2;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSkillUseCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 unitid = 2;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSkillUseCharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 unitid = 2;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSkillUseCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSkillUseCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSkillUseCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSkillUseCharge::MergeFrom(const PBG2CSkillUseCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSkillUseCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSkillUseCharge::CopyFrom(const PBG2CSkillUseCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSkillUseCharge::IsInitialized() const {
  
  return true;
}

void PBG2CSkillUseCharge::Swap(PBG2CSkillUseCharge* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(unitid_, other->unitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSkillUseCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSkillUseCharge_descriptor_;
  metadata.reflection = PBG2CSkillUseCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CSkillEnemyList::kTypeFieldNumber;
const int PBS2CSkillEnemyList::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBS2CSkillEnemyList::PBS2CSkillEnemyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CSkillEnemyList::InitAsDefaultInstance() {
}

PBS2CSkillEnemyList::PBS2CSkillEnemyList(const PBS2CSkillEnemyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CSkillEnemyList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CSkillEnemyList::~PBS2CSkillEnemyList() {
  SharedDtor();
}

void PBS2CSkillEnemyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CSkillEnemyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CSkillEnemyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CSkillEnemyList_descriptor_;
}

const PBS2CSkillEnemyList& PBS2CSkillEnemyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CSkillEnemyList* PBS2CSkillEnemyList::default_instance_ = NULL;

PBS2CSkillEnemyList* PBS2CSkillEnemyList::New() const {
  return new PBS2CSkillEnemyList;
}

void PBS2CSkillEnemyList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CSkillEnemyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CSkillEnemyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CSkillEnemyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CSkillEnemyList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CSkillEnemyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CSkillEnemyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CSkillEnemyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CSkillEnemyList::MergeFrom(const PBS2CSkillEnemyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CSkillEnemyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CSkillEnemyList::CopyFrom(const PBS2CSkillEnemyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CSkillEnemyList::IsInitialized() const {
  
  return true;
}

void PBS2CSkillEnemyList::Swap(PBS2CSkillEnemyList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CSkillEnemyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CSkillEnemyList_descriptor_;
  metadata.reflection = PBS2CSkillEnemyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GDelBuff::kBuffidFieldNumber;
#endif  // !_MSC_VER

PBC2GDelBuff::PBC2GDelBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GDelBuff::InitAsDefaultInstance() {
}

PBC2GDelBuff::PBC2GDelBuff(const PBC2GDelBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GDelBuff::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GDelBuff::~PBC2GDelBuff() {
  SharedDtor();
}

void PBC2GDelBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GDelBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GDelBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GDelBuff_descriptor_;
}

const PBC2GDelBuff& PBC2GDelBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GDelBuff* PBC2GDelBuff::default_instance_ = NULL;

PBC2GDelBuff* PBC2GDelBuff::New() const {
  return new PBC2GDelBuff;
}

void PBC2GDelBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GDelBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buffid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GDelBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 buffid = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buffid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GDelBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 buffid = 1;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buffid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GDelBuff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buffid = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GDelBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GDelBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GDelBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GDelBuff::MergeFrom(const PBC2GDelBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GDelBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GDelBuff::CopyFrom(const PBC2GDelBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GDelBuff::IsInitialized() const {
  
  return true;
}

void PBC2GDelBuff::Swap(PBC2GDelBuff* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GDelBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GDelBuff_descriptor_;
  metadata.reflection = PBC2GDelBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CAddBuff::kTargetidFieldNumber;
const int PBG2CAddBuff::kPbbuffFieldNumber;
#endif  // !_MSC_VER

PBG2CAddBuff::PBG2CAddBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CAddBuff::InitAsDefaultInstance() {
}

PBG2CAddBuff::PBG2CAddBuff(const PBG2CAddBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CAddBuff::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CAddBuff::~PBG2CAddBuff() {
  SharedDtor();
}

void PBG2CAddBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CAddBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CAddBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CAddBuff_descriptor_;
}

const PBG2CAddBuff& PBG2CAddBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CAddBuff* PBG2CAddBuff::default_instance_ = NULL;

PBG2CAddBuff* PBG2CAddBuff::New() const {
  return new PBG2CAddBuff;
}

void PBG2CAddBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = 0u;
  }
  pbbuff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CAddBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 targetid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbbuff;
        break;
      }
      
      // repeated .PBBuff pbbuff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbbuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbbuff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbbuff;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CAddBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetid(), output);
  }
  
  // repeated .PBBuff pbbuff = 2;
  for (int i = 0; i < this->pbbuff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbbuff(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CAddBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetid(), target);
  }
  
  // repeated .PBBuff pbbuff = 2;
  for (int i = 0; i < this->pbbuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbbuff(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CAddBuff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 targetid = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
  }
  // repeated .PBBuff pbbuff = 2;
  total_size += 1 * this->pbbuff_size();
  for (int i = 0; i < this->pbbuff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbbuff(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CAddBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CAddBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CAddBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CAddBuff::MergeFrom(const PBG2CAddBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbbuff_.MergeFrom(from.pbbuff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CAddBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CAddBuff::CopyFrom(const PBG2CAddBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CAddBuff::IsInitialized() const {
  
  return true;
}

void PBG2CAddBuff::Swap(PBG2CAddBuff* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    pbbuff_.Swap(&other->pbbuff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CAddBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CAddBuff_descriptor_;
  metadata.reflection = PBG2CAddBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CAddMoveBuff::kPbpositionFieldNumber;
const int PBG2CAddMoveBuff::kTargetidFieldNumber;
const int PBG2CAddMoveBuff::kPbbuffFieldNumber;
#endif  // !_MSC_VER

PBG2CAddMoveBuff::PBG2CAddMoveBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CAddMoveBuff::InitAsDefaultInstance() {
  pbposition_ = const_cast< ::PBPoint*>(&::PBPoint::default_instance());
  pbbuff_ = const_cast< ::PBBuff*>(&::PBBuff::default_instance());
}

PBG2CAddMoveBuff::PBG2CAddMoveBuff(const PBG2CAddMoveBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CAddMoveBuff::SharedCtor() {
  _cached_size_ = 0;
  pbposition_ = NULL;
  targetid_ = 0u;
  pbbuff_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CAddMoveBuff::~PBG2CAddMoveBuff() {
  SharedDtor();
}

void PBG2CAddMoveBuff::SharedDtor() {
  if (this != default_instance_) {
    delete pbposition_;
    delete pbbuff_;
  }
}

void PBG2CAddMoveBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CAddMoveBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CAddMoveBuff_descriptor_;
}

const PBG2CAddMoveBuff& PBG2CAddMoveBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CAddMoveBuff* PBG2CAddMoveBuff::default_instance_ = NULL;

PBG2CAddMoveBuff* PBG2CAddMoveBuff::New() const {
  return new PBG2CAddMoveBuff;
}

void PBG2CAddMoveBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pbposition()) {
      if (pbposition_ != NULL) pbposition_->::PBPoint::Clear();
    }
    targetid_ = 0u;
    if (has_pbbuff()) {
      if (pbbuff_ != NULL) pbbuff_->::PBBuff::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CAddMoveBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPoint pbposition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbbuff;
        break;
      }
      
      // optional .PBBuff pbbuff = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbbuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbbuff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CAddMoveBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPoint pbposition = 1;
  if (has_pbposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbposition(), output);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetid(), output);
  }
  
  // optional .PBBuff pbbuff = 3;
  if (has_pbbuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pbbuff(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CAddMoveBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPoint pbposition = 1;
  if (has_pbposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbposition(), target);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetid(), target);
  }
  
  // optional .PBBuff pbbuff = 3;
  if (has_pbbuff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pbbuff(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CAddMoveBuff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPoint pbposition = 1;
    if (has_pbposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbposition());
    }
    
    // optional uint32 targetid = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
    // optional .PBBuff pbbuff = 3;
    if (has_pbbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbbuff());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CAddMoveBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CAddMoveBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CAddMoveBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CAddMoveBuff::MergeFrom(const PBG2CAddMoveBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pbposition()) {
      mutable_pbposition()->::PBPoint::MergeFrom(from.pbposition());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_pbbuff()) {
      mutable_pbbuff()->::PBBuff::MergeFrom(from.pbbuff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CAddMoveBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CAddMoveBuff::CopyFrom(const PBG2CAddMoveBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CAddMoveBuff::IsInitialized() const {
  
  return true;
}

void PBG2CAddMoveBuff::Swap(PBG2CAddMoveBuff* other) {
  if (other != this) {
    std::swap(pbposition_, other->pbposition_);
    std::swap(targetid_, other->targetid_);
    std::swap(pbbuff_, other->pbbuff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CAddMoveBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CAddMoveBuff_descriptor_;
  metadata.reflection = PBG2CAddMoveBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CDelBuff::kUnitidFieldNumber;
const int PBG2CDelBuff::kBuffidFieldNumber;
const int PBG2CDelBuff::kSouceidFieldNumber;
#endif  // !_MSC_VER

PBG2CDelBuff::PBG2CDelBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CDelBuff::InitAsDefaultInstance() {
}

PBG2CDelBuff::PBG2CDelBuff(const PBG2CDelBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CDelBuff::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = 0u;
  buffid_ = 0u;
  souceid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CDelBuff::~PBG2CDelBuff() {
  SharedDtor();
}

void PBG2CDelBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CDelBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CDelBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CDelBuff_descriptor_;
}

const PBG2CDelBuff& PBG2CDelBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CDelBuff* PBG2CDelBuff::default_instance_ = NULL;

PBG2CDelBuff* PBG2CDelBuff::New() const {
  return new PBG2CDelBuff;
}

void PBG2CDelBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unitid_ = 0u;
    buffid_ = 0u;
    souceid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CDelBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buffid;
        break;
      }
      
      // optional uint32 buffid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_souceid;
        break;
      }
      
      // optional uint32 souceid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_souceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &souceid_)));
          set_has_souceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CDelBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unitid(), output);
  }
  
  // optional uint32 buffid = 2;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buffid(), output);
  }
  
  // optional uint32 souceid = 3;
  if (has_souceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->souceid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CDelBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unitid(), target);
  }
  
  // optional uint32 buffid = 2;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buffid(), target);
  }
  
  // optional uint32 souceid = 3;
  if (has_souceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->souceid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CDelBuff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unitid = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
    // optional uint32 buffid = 2;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }
    
    // optional uint32 souceid = 3;
    if (has_souceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->souceid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CDelBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CDelBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CDelBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CDelBuff::MergeFrom(const PBG2CDelBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_souceid()) {
      set_souceid(from.souceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CDelBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CDelBuff::CopyFrom(const PBG2CDelBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CDelBuff::IsInitialized() const {
  
  return true;
}

void PBG2CDelBuff::Swap(PBG2CDelBuff* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(buffid_, other->buffid_);
    std::swap(souceid_, other->souceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CDelBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CDelBuff_descriptor_;
  metadata.reflection = PBG2CDelBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CUpdateBuffTick::kUnitidFieldNumber;
const int PBG2CUpdateBuffTick::kBuffidFieldNumber;
const int PBG2CUpdateBuffTick::kLefttickFieldNumber;
#endif  // !_MSC_VER

PBG2CUpdateBuffTick::PBG2CUpdateBuffTick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CUpdateBuffTick::InitAsDefaultInstance() {
}

PBG2CUpdateBuffTick::PBG2CUpdateBuffTick(const PBG2CUpdateBuffTick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CUpdateBuffTick::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = 0u;
  buffid_ = 0u;
  lefttick_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CUpdateBuffTick::~PBG2CUpdateBuffTick() {
  SharedDtor();
}

void PBG2CUpdateBuffTick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CUpdateBuffTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CUpdateBuffTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CUpdateBuffTick_descriptor_;
}

const PBG2CUpdateBuffTick& PBG2CUpdateBuffTick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CUpdateBuffTick* PBG2CUpdateBuffTick::default_instance_ = NULL;

PBG2CUpdateBuffTick* PBG2CUpdateBuffTick::New() const {
  return new PBG2CUpdateBuffTick;
}

void PBG2CUpdateBuffTick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unitid_ = 0u;
    buffid_ = 0u;
    lefttick_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CUpdateBuffTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buffid;
        break;
      }
      
      // optional uint32 buffid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lefttick;
        break;
      }
      
      // optional uint64 lefttick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lefttick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lefttick_)));
          set_has_lefttick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CUpdateBuffTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unitid(), output);
  }
  
  // optional uint32 buffid = 2;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buffid(), output);
  }
  
  // optional uint64 lefttick = 3;
  if (has_lefttick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lefttick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CUpdateBuffTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unitid(), target);
  }
  
  // optional uint32 buffid = 2;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buffid(), target);
  }
  
  // optional uint64 lefttick = 3;
  if (has_lefttick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lefttick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CUpdateBuffTick::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unitid = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
    // optional uint32 buffid = 2;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }
    
    // optional uint64 lefttick = 3;
    if (has_lefttick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lefttick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CUpdateBuffTick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CUpdateBuffTick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CUpdateBuffTick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CUpdateBuffTick::MergeFrom(const PBG2CUpdateBuffTick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_lefttick()) {
      set_lefttick(from.lefttick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CUpdateBuffTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CUpdateBuffTick::CopyFrom(const PBG2CUpdateBuffTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CUpdateBuffTick::IsInitialized() const {
  
  return true;
}

void PBG2CUpdateBuffTick::Swap(PBG2CUpdateBuffTick* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(buffid_, other->buffid_);
    std::swap(lefttick_, other->lefttick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CUpdateBuffTick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CUpdateBuffTick_descriptor_;
  metadata.reflection = PBG2CUpdateBuffTick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCounter::kCounterFieldNumber;
#endif  // !_MSC_VER

PBG2CCounter::PBG2CCounter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCounter::InitAsDefaultInstance() {
}

PBG2CCounter::PBG2CCounter(const PBG2CCounter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCounter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCounter::~PBG2CCounter() {
  SharedDtor();
}

void PBG2CCounter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCounter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCounter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCounter_descriptor_;
}

const PBG2CCounter& PBG2CCounter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCounter* PBG2CCounter::default_instance_ = NULL;

PBG2CCounter* PBG2CCounter::New() const {
  return new PBG2CCounter;
}

void PBG2CCounter::Clear() {
  counter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBCounter counter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_counter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_counter;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBCounter counter = 1;
  for (int i = 0; i < this->counter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->counter(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCounter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCounter counter = 1;
  for (int i = 0; i < this->counter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->counter(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCounter::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBCounter counter = 1;
  total_size += 1 * this->counter_size();
  for (int i = 0; i < this->counter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counter(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCounter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCounter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCounter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCounter::MergeFrom(const PBG2CCounter& from) {
  GOOGLE_CHECK_NE(&from, this);
  counter_.MergeFrom(from.counter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCounter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCounter::CopyFrom(const PBG2CCounter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCounter::IsInitialized() const {
  
  return true;
}

void PBG2CCounter::Swap(PBG2CCounter* other) {
  if (other != this) {
    counter_.Swap(&other->counter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCounter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCounter_descriptor_;
  metadata.reflection = PBG2CCounter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GGetClientData::kClientdataFieldNumber;
#endif  // !_MSC_VER

PBC2GGetClientData::PBC2GGetClientData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GGetClientData::InitAsDefaultInstance() {
}

PBC2GGetClientData::PBC2GGetClientData(const PBC2GGetClientData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GGetClientData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GGetClientData::~PBC2GGetClientData() {
  SharedDtor();
}

void PBC2GGetClientData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GGetClientData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GGetClientData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GGetClientData_descriptor_;
}

const PBC2GGetClientData& PBC2GGetClientData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GGetClientData* PBC2GGetClientData::default_instance_ = NULL;

PBC2GGetClientData* PBC2GGetClientData::New() const {
  return new PBC2GGetClientData;
}

void PBC2GGetClientData::Clear() {
  clientdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GGetClientData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBVerClientData clientdata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clientdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_clientdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GGetClientData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBVerClientData clientdata = 1;
  for (int i = 0; i < this->clientdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clientdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GGetClientData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBVerClientData clientdata = 1;
  for (int i = 0; i < this->clientdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->clientdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GGetClientData::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBVerClientData clientdata = 1;
  total_size += 1 * this->clientdata_size();
  for (int i = 0; i < this->clientdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clientdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GGetClientData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GGetClientData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GGetClientData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GGetClientData::MergeFrom(const PBC2GGetClientData& from) {
  GOOGLE_CHECK_NE(&from, this);
  clientdata_.MergeFrom(from.clientdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GGetClientData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GGetClientData::CopyFrom(const PBC2GGetClientData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GGetClientData::IsInitialized() const {
  
  return true;
}

void PBC2GGetClientData::Swap(PBC2GGetClientData* other) {
  if (other != this) {
    clientdata_.Swap(&other->clientdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GGetClientData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GGetClientData_descriptor_;
  metadata.reflection = PBC2GGetClientData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CGetClientData::kFilenameFieldNumber;
const int PBG2CGetClientData::kCrcFieldNumber;
const int PBG2CGetClientData::kFiledataFieldNumber;
#endif  // !_MSC_VER

PBG2CGetClientData::PBG2CGetClientData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CGetClientData::InitAsDefaultInstance() {
}

PBG2CGetClientData::PBG2CGetClientData(const PBG2CGetClientData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CGetClientData::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crc_ = 0u;
  filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CGetClientData::~PBG2CGetClientData() {
  SharedDtor();
}

void PBG2CGetClientData::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filedata_ != &::google::protobuf::internal::kEmptyString) {
    delete filedata_;
  }
  if (this != default_instance_) {
  }
}

void PBG2CGetClientData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CGetClientData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CGetClientData_descriptor_;
}

const PBG2CGetClientData& PBG2CGetClientData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CGetClientData* PBG2CGetClientData::default_instance_ = NULL;

PBG2CGetClientData* PBG2CGetClientData::New() const {
  return new PBG2CGetClientData;
}

void PBG2CGetClientData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    crc_ = 0u;
    if (has_filedata()) {
      if (filedata_ != &::google::protobuf::internal::kEmptyString) {
        filedata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CGetClientData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crc;
        break;
      }
      
      // optional uint32 crc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filedata;
        break;
      }
      
      // optional bytes filedata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CGetClientData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }
  
  // optional uint32 crc = 2;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crc(), output);
  }
  
  // optional bytes filedata = 3;
  if (has_filedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->filedata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CGetClientData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }
  
  // optional uint32 crc = 2;
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crc(), target);
  }
  
  // optional bytes filedata = 3;
  if (has_filedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->filedata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CGetClientData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
    // optional uint32 crc = 2;
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc());
    }
    
    // optional bytes filedata = 3;
    if (has_filedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filedata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CGetClientData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CGetClientData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CGetClientData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CGetClientData::MergeFrom(const PBG2CGetClientData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
    if (from.has_filedata()) {
      set_filedata(from.filedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CGetClientData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CGetClientData::CopyFrom(const PBG2CGetClientData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CGetClientData::IsInitialized() const {
  
  return true;
}

void PBG2CGetClientData::Swap(PBG2CGetClientData* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(crc_, other->crc_);
    std::swap(filedata_, other->filedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CGetClientData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CGetClientData_descriptor_;
  metadata.reflection = PBG2CGetClientData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CClientDataOver::PBG2CClientDataOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CClientDataOver::InitAsDefaultInstance() {
}

PBG2CClientDataOver::PBG2CClientDataOver(const PBG2CClientDataOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CClientDataOver::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CClientDataOver::~PBG2CClientDataOver() {
  SharedDtor();
}

void PBG2CClientDataOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CClientDataOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CClientDataOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CClientDataOver_descriptor_;
}

const PBG2CClientDataOver& PBG2CClientDataOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CClientDataOver* PBG2CClientDataOver::default_instance_ = NULL;

PBG2CClientDataOver* PBG2CClientDataOver::New() const {
  return new PBG2CClientDataOver;
}

void PBG2CClientDataOver::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CClientDataOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CClientDataOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CClientDataOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CClientDataOver::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CClientDataOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CClientDataOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CClientDataOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CClientDataOver::MergeFrom(const PBG2CClientDataOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CClientDataOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CClientDataOver::CopyFrom(const PBG2CClientDataOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CClientDataOver::IsInitialized() const {
  
  return true;
}

void PBG2CClientDataOver::Swap(PBG2CClientDataOver* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CClientDataOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CClientDataOver_descriptor_;
  metadata.reflection = PBG2CClientDataOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMailID::kMailidFieldNumber;
#endif  // !_MSC_VER

PBMailID::PBMailID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMailID::InitAsDefaultInstance() {
}

PBMailID::PBMailID(const PBMailID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMailID::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMailID::~PBMailID() {
  SharedDtor();
}

void PBMailID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMailID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMailID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMailID_descriptor_;
}

const PBMailID& PBMailID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBMailID* PBMailID::default_instance_ = NULL;

PBMailID* PBMailID::New() const {
  return new PBMailID;
}

void PBMailID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMailID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMailID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMailID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMailID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMailID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMailID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMailID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMailID::MergeFrom(const PBMailID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMailID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMailID::CopyFrom(const PBMailID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMailID::IsInitialized() const {
  
  return true;
}

void PBMailID::Swap(PBMailID* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMailID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMailID_descriptor_;
  metadata.reflection = PBMailID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRewardMail::kMailidFieldNumber;
#endif  // !_MSC_VER

PBRewardMail::PBRewardMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRewardMail::InitAsDefaultInstance() {
}

PBRewardMail::PBRewardMail(const PBRewardMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRewardMail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRewardMail::~PBRewardMail() {
  SharedDtor();
}

void PBRewardMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRewardMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRewardMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRewardMail_descriptor_;
}

const PBRewardMail& PBRewardMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBRewardMail* PBRewardMail::default_instance_ = NULL;

PBRewardMail* PBRewardMail::New() const {
  return new PBRewardMail;
}

void PBRewardMail::Clear() {
  mailid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRewardMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_mailid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mailid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_mailid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRewardMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 mailid = 1;
  for (int i = 0; i < this->mailid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->mailid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRewardMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 mailid = 1;
  for (int i = 0; i < this->mailid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->mailid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRewardMail::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 mailid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mailid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mailid(i));
    }
    total_size += 1 * this->mailid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRewardMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRewardMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRewardMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRewardMail::MergeFrom(const PBRewardMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailid_.MergeFrom(from.mailid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRewardMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRewardMail::CopyFrom(const PBRewardMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRewardMail::IsInitialized() const {
  
  return true;
}

void PBRewardMail::Swap(PBRewardMail* other) {
  if (other != this) {
    mailid_.Swap(&other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRewardMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRewardMail_descriptor_;
  metadata.reflection = PBRewardMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GDelItem::kItemsnidFieldNumber;
#endif  // !_MSC_VER

PBC2GDelItem::PBC2GDelItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GDelItem::InitAsDefaultInstance() {
}

PBC2GDelItem::PBC2GDelItem(const PBC2GDelItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GDelItem::SharedCtor() {
  _cached_size_ = 0;
  itemsnid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GDelItem::~PBC2GDelItem() {
  SharedDtor();
}

void PBC2GDelItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GDelItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GDelItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GDelItem_descriptor_;
}

const PBC2GDelItem& PBC2GDelItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GDelItem* PBC2GDelItem::default_instance_ = NULL;

PBC2GDelItem* PBC2GDelItem::New() const {
  return new PBC2GDelItem;
}

void PBC2GDelItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsnid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GDelItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsnid_)));
          set_has_itemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GDelItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsnid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GDelItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsnid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GDelItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsnid = 1;
    if (has_itemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsnid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GDelItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GDelItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GDelItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GDelItem::MergeFrom(const PBC2GDelItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsnid()) {
      set_itemsnid(from.itemsnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GDelItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GDelItem::CopyFrom(const PBC2GDelItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GDelItem::IsInitialized() const {
  
  return true;
}

void PBC2GDelItem::Swap(PBC2GDelItem* other) {
  if (other != this) {
    std::swap(itemsnid_, other->itemsnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GDelItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GDelItem_descriptor_;
  metadata.reflection = PBC2GDelItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CDelItem::kItemsnidFieldNumber;
#endif  // !_MSC_VER

PBG2CDelItem::PBG2CDelItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CDelItem::InitAsDefaultInstance() {
}

PBG2CDelItem::PBG2CDelItem(const PBG2CDelItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CDelItem::SharedCtor() {
  _cached_size_ = 0;
  itemsnid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CDelItem::~PBG2CDelItem() {
  SharedDtor();
}

void PBG2CDelItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CDelItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CDelItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CDelItem_descriptor_;
}

const PBG2CDelItem& PBG2CDelItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CDelItem* PBG2CDelItem::default_instance_ = NULL;

PBG2CDelItem* PBG2CDelItem::New() const {
  return new PBG2CDelItem;
}

void PBG2CDelItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsnid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CDelItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsnid_)));
          set_has_itemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CDelItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsnid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CDelItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsnid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CDelItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsnid = 1;
    if (has_itemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsnid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CDelItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CDelItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CDelItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CDelItem::MergeFrom(const PBG2CDelItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsnid()) {
      set_itemsnid(from.itemsnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CDelItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CDelItem::CopyFrom(const PBG2CDelItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CDelItem::IsInitialized() const {
  
  return true;
}

void PBG2CDelItem::Swap(PBG2CDelItem* other) {
  if (other != this) {
    std::swap(itemsnid_, other->itemsnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CDelItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CDelItem_descriptor_;
  metadata.reflection = PBG2CDelItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GUseItem::kItemsnidFieldNumber;
const int PBC2GUseItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

PBC2GUseItem::PBC2GUseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GUseItem::InitAsDefaultInstance() {
}

PBC2GUseItem::PBC2GUseItem(const PBC2GUseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GUseItem::SharedCtor() {
  _cached_size_ = 0;
  itemsnid_ = GOOGLE_ULONGLONG(0);
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GUseItem::~PBC2GUseItem() {
  SharedDtor();
}

void PBC2GUseItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GUseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GUseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GUseItem_descriptor_;
}

const PBC2GUseItem& PBC2GUseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GUseItem* PBC2GUseItem::default_instance_ = NULL;

PBC2GUseItem* PBC2GUseItem::New() const {
  return new PBC2GUseItem;
}

void PBC2GUseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsnid_ = GOOGLE_ULONGLONG(0);
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsnid_)));
          set_has_itemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }
      
      // optional uint32 itemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsnid(), output);
  }
  
  // optional uint32 itemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GUseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsnid(), target);
  }
  
  // optional uint32 itemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GUseItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsnid = 1;
    if (has_itemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsnid());
    }
    
    // optional uint32 itemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GUseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GUseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GUseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GUseItem::MergeFrom(const PBC2GUseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsnid()) {
      set_itemsnid(from.itemsnid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GUseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GUseItem::CopyFrom(const PBC2GUseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GUseItem::IsInitialized() const {
  
  return true;
}

void PBC2GUseItem::Swap(PBC2GUseItem* other) {
  if (other != this) {
    std::swap(itemsnid_, other->itemsnid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GUseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GUseItem_descriptor_;
  metadata.reflection = PBC2GUseItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CUseItem::kItemsnidFieldNumber;
const int PBG2CUseItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

PBG2CUseItem::PBG2CUseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CUseItem::InitAsDefaultInstance() {
}

PBG2CUseItem::PBG2CUseItem(const PBG2CUseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CUseItem::SharedCtor() {
  _cached_size_ = 0;
  itemsnid_ = GOOGLE_ULONGLONG(0);
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CUseItem::~PBG2CUseItem() {
  SharedDtor();
}

void PBG2CUseItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CUseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CUseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CUseItem_descriptor_;
}

const PBG2CUseItem& PBG2CUseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CUseItem* PBG2CUseItem::default_instance_ = NULL;

PBG2CUseItem* PBG2CUseItem::New() const {
  return new PBG2CUseItem;
}

void PBG2CUseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsnid_ = GOOGLE_ULONGLONG(0);
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsnid_)));
          set_has_itemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }
      
      // optional uint32 itemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsnid(), output);
  }
  
  // optional uint32 itemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CUseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsnid(), target);
  }
  
  // optional uint32 itemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CUseItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsnid = 1;
    if (has_itemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsnid());
    }
    
    // optional uint32 itemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CUseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CUseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CUseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CUseItem::MergeFrom(const PBG2CUseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsnid()) {
      set_itemsnid(from.itemsnid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CUseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CUseItem::CopyFrom(const PBG2CUseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CUseItem::IsInitialized() const {
  
  return true;
}

void PBG2CUseItem::Swap(PBG2CUseItem* other) {
  if (other != this) {
    std::swap(itemsnid_, other->itemsnid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CUseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CUseItem_descriptor_;
  metadata.reflection = PBG2CUseItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GEquipItem::kItemsnidFieldNumber;
const int PBC2GEquipItem::kEquiptypeFieldNumber;
#endif  // !_MSC_VER

PBC2GEquipItem::PBC2GEquipItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GEquipItem::InitAsDefaultInstance() {
}

PBC2GEquipItem::PBC2GEquipItem(const PBC2GEquipItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GEquipItem::SharedCtor() {
  _cached_size_ = 0;
  itemsnid_ = GOOGLE_ULONGLONG(0);
  equiptype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GEquipItem::~PBC2GEquipItem() {
  SharedDtor();
}

void PBC2GEquipItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GEquipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GEquipItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GEquipItem_descriptor_;
}

const PBC2GEquipItem& PBC2GEquipItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GEquipItem* PBC2GEquipItem::default_instance_ = NULL;

PBC2GEquipItem* PBC2GEquipItem::New() const {
  return new PBC2GEquipItem;
}

void PBC2GEquipItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsnid_ = GOOGLE_ULONGLONG(0);
    equiptype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GEquipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsnid_)));
          set_has_itemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equiptype;
        break;
      }
      
      // optional uint32 equiptype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiptype_)));
          set_has_equiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GEquipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsnid(), output);
  }
  
  // optional uint32 equiptype = 2;
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equiptype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GEquipItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsnid(), target);
  }
  
  // optional uint32 equiptype = 2;
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equiptype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GEquipItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsnid = 1;
    if (has_itemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsnid());
    }
    
    // optional uint32 equiptype = 2;
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiptype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GEquipItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GEquipItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GEquipItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GEquipItem::MergeFrom(const PBC2GEquipItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsnid()) {
      set_itemsnid(from.itemsnid());
    }
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GEquipItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GEquipItem::CopyFrom(const PBC2GEquipItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GEquipItem::IsInitialized() const {
  
  return true;
}

void PBC2GEquipItem::Swap(PBC2GEquipItem* other) {
  if (other != this) {
    std::swap(itemsnid_, other->itemsnid_);
    std::swap(equiptype_, other->equiptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GEquipItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GEquipItem_descriptor_;
  metadata.reflection = PBC2GEquipItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CEquipItem::kItemsnidFieldNumber;
const int PBG2CEquipItem::kEquiptypeFieldNumber;
const int PBG2CEquipItem::kFlagFieldNumber;
#endif  // !_MSC_VER

PBG2CEquipItem::PBG2CEquipItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CEquipItem::InitAsDefaultInstance() {
}

PBG2CEquipItem::PBG2CEquipItem(const PBG2CEquipItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CEquipItem::SharedCtor() {
  _cached_size_ = 0;
  itemsnid_ = GOOGLE_ULONGLONG(0);
  equiptype_ = 0u;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CEquipItem::~PBG2CEquipItem() {
  SharedDtor();
}

void PBG2CEquipItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CEquipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CEquipItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CEquipItem_descriptor_;
}

const PBG2CEquipItem& PBG2CEquipItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CEquipItem* PBG2CEquipItem::default_instance_ = NULL;

PBG2CEquipItem* PBG2CEquipItem::New() const {
  return new PBG2CEquipItem;
}

void PBG2CEquipItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsnid_ = GOOGLE_ULONGLONG(0);
    equiptype_ = 0u;
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CEquipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsnid_)));
          set_has_itemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equiptype;
        break;
      }
      
      // optional uint32 equiptype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiptype_)));
          set_has_equiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }
      
      // optional uint32 flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CEquipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsnid(), output);
  }
  
  // optional uint32 equiptype = 2;
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equiptype(), output);
  }
  
  // optional uint32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CEquipItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsnid(), target);
  }
  
  // optional uint32 equiptype = 2;
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equiptype(), target);
  }
  
  // optional uint32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CEquipItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsnid = 1;
    if (has_itemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsnid());
    }
    
    // optional uint32 equiptype = 2;
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiptype());
    }
    
    // optional uint32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CEquipItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CEquipItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CEquipItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CEquipItem::MergeFrom(const PBG2CEquipItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsnid()) {
      set_itemsnid(from.itemsnid());
    }
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CEquipItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CEquipItem::CopyFrom(const PBG2CEquipItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CEquipItem::IsInitialized() const {
  
  return true;
}

void PBG2CEquipItem::Swap(PBG2CEquipItem* other) {
  if (other != this) {
    std::swap(itemsnid_, other->itemsnid_);
    std::swap(equiptype_, other->equiptype_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CEquipItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CEquipItem_descriptor_;
  metadata.reflection = PBG2CEquipItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GSellItem::kItemsnidFieldNumber;
#endif  // !_MSC_VER

PBC2GSellItem::PBC2GSellItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GSellItem::InitAsDefaultInstance() {
}

PBC2GSellItem::PBC2GSellItem(const PBC2GSellItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GSellItem::SharedCtor() {
  _cached_size_ = 0;
  itemsnid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GSellItem::~PBC2GSellItem() {
  SharedDtor();
}

void PBC2GSellItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GSellItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GSellItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GSellItem_descriptor_;
}

const PBC2GSellItem& PBC2GSellItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GSellItem* PBC2GSellItem::default_instance_ = NULL;

PBC2GSellItem* PBC2GSellItem::New() const {
  return new PBC2GSellItem;
}

void PBC2GSellItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsnid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GSellItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsnid_)));
          set_has_itemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GSellItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsnid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GSellItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsnid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GSellItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsnid = 1;
    if (has_itemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsnid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GSellItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GSellItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GSellItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GSellItem::MergeFrom(const PBC2GSellItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsnid()) {
      set_itemsnid(from.itemsnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GSellItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GSellItem::CopyFrom(const PBC2GSellItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GSellItem::IsInitialized() const {
  
  return true;
}

void PBC2GSellItem::Swap(PBC2GSellItem* other) {
  if (other != this) {
    std::swap(itemsnid_, other->itemsnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GSellItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GSellItem_descriptor_;
  metadata.reflection = PBC2GSellItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CSellItem::kItemsnidFieldNumber;
#endif  // !_MSC_VER

PBG2CSellItem::PBG2CSellItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSellItem::InitAsDefaultInstance() {
}

PBG2CSellItem::PBG2CSellItem(const PBG2CSellItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSellItem::SharedCtor() {
  _cached_size_ = 0;
  itemsnid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSellItem::~PBG2CSellItem() {
  SharedDtor();
}

void PBG2CSellItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CSellItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSellItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSellItem_descriptor_;
}

const PBG2CSellItem& PBG2CSellItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CSellItem* PBG2CSellItem::default_instance_ = NULL;

PBG2CSellItem* PBG2CSellItem::New() const {
  return new PBG2CSellItem;
}

void PBG2CSellItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsnid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSellItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsnid_)));
          set_has_itemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CSellItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsnid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSellItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsnid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSellItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsnid = 1;
    if (has_itemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsnid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSellItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSellItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSellItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSellItem::MergeFrom(const PBG2CSellItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsnid()) {
      set_itemsnid(from.itemsnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSellItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSellItem::CopyFrom(const PBG2CSellItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSellItem::IsInitialized() const {
  
  return true;
}

void PBG2CSellItem::Swap(PBG2CSellItem* other) {
  if (other != this) {
    std::swap(itemsnid_, other->itemsnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSellItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSellItem_descriptor_;
  metadata.reflection = PBG2CSellItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GBuyBackItem::kItemsnidFieldNumber;
#endif  // !_MSC_VER

PBC2GBuyBackItem::PBC2GBuyBackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GBuyBackItem::InitAsDefaultInstance() {
}

PBC2GBuyBackItem::PBC2GBuyBackItem(const PBC2GBuyBackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GBuyBackItem::SharedCtor() {
  _cached_size_ = 0;
  itemsnid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GBuyBackItem::~PBC2GBuyBackItem() {
  SharedDtor();
}

void PBC2GBuyBackItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GBuyBackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GBuyBackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GBuyBackItem_descriptor_;
}

const PBC2GBuyBackItem& PBC2GBuyBackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GBuyBackItem* PBC2GBuyBackItem::default_instance_ = NULL;

PBC2GBuyBackItem* PBC2GBuyBackItem::New() const {
  return new PBC2GBuyBackItem;
}

void PBC2GBuyBackItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsnid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GBuyBackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsnid_)));
          set_has_itemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GBuyBackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsnid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GBuyBackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsnid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GBuyBackItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsnid = 1;
    if (has_itemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsnid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GBuyBackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GBuyBackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GBuyBackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GBuyBackItem::MergeFrom(const PBC2GBuyBackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsnid()) {
      set_itemsnid(from.itemsnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GBuyBackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GBuyBackItem::CopyFrom(const PBC2GBuyBackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GBuyBackItem::IsInitialized() const {
  
  return true;
}

void PBC2GBuyBackItem::Swap(PBC2GBuyBackItem* other) {
  if (other != this) {
    std::swap(itemsnid_, other->itemsnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GBuyBackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GBuyBackItem_descriptor_;
  metadata.reflection = PBC2GBuyBackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CBuyBackItem::kItemsnidFieldNumber;
#endif  // !_MSC_VER

PBG2CBuyBackItem::PBG2CBuyBackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CBuyBackItem::InitAsDefaultInstance() {
}

PBG2CBuyBackItem::PBG2CBuyBackItem(const PBG2CBuyBackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CBuyBackItem::SharedCtor() {
  _cached_size_ = 0;
  itemsnid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CBuyBackItem::~PBG2CBuyBackItem() {
  SharedDtor();
}

void PBG2CBuyBackItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CBuyBackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CBuyBackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CBuyBackItem_descriptor_;
}

const PBG2CBuyBackItem& PBG2CBuyBackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CBuyBackItem* PBG2CBuyBackItem::default_instance_ = NULL;

PBG2CBuyBackItem* PBG2CBuyBackItem::New() const {
  return new PBG2CBuyBackItem;
}

void PBG2CBuyBackItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsnid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CBuyBackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsnid_)));
          set_has_itemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CBuyBackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsnid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CBuyBackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsnid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CBuyBackItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsnid = 1;
    if (has_itemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsnid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CBuyBackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CBuyBackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CBuyBackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CBuyBackItem::MergeFrom(const PBG2CBuyBackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsnid()) {
      set_itemsnid(from.itemsnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CBuyBackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CBuyBackItem::CopyFrom(const PBG2CBuyBackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CBuyBackItem::IsInitialized() const {
  
  return true;
}

void PBG2CBuyBackItem::Swap(PBG2CBuyBackItem* other) {
  if (other != this) {
    std::swap(itemsnid_, other->itemsnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CBuyBackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CBuyBackItem_descriptor_;
  metadata.reflection = PBG2CBuyBackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CUpdateItem::kItemsnidFieldNumber;
const int PBG2CUpdateItem::kItemNumFieldNumber;
const int PBG2CUpdateItem::kDoingFieldNumber;
#endif  // !_MSC_VER

PBG2CUpdateItem::PBG2CUpdateItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CUpdateItem::InitAsDefaultInstance() {
}

PBG2CUpdateItem::PBG2CUpdateItem(const PBG2CUpdateItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CUpdateItem::SharedCtor() {
  _cached_size_ = 0;
  itemsnid_ = GOOGLE_ULONGLONG(0);
  itemnum_ = 0;
  doing_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CUpdateItem::~PBG2CUpdateItem() {
  SharedDtor();
}

void PBG2CUpdateItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CUpdateItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CUpdateItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CUpdateItem_descriptor_;
}

const PBG2CUpdateItem& PBG2CUpdateItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CUpdateItem* PBG2CUpdateItem::default_instance_ = NULL;

PBG2CUpdateItem* PBG2CUpdateItem::New() const {
  return new PBG2CUpdateItem;
}

void PBG2CUpdateItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsnid_ = GOOGLE_ULONGLONG(0);
    itemnum_ = 0;
    doing_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CUpdateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsnid_)));
          set_has_itemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }
      
      // optional int32 itemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_doing;
        break;
      }
      
      // optional uint32 doing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doing_)));
          set_has_doing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CUpdateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsnid(), output);
  }
  
  // optional int32 itemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemnum(), output);
  }
  
  // optional uint32 doing = 3;
  if (has_doing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->doing(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CUpdateItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsnid(), target);
  }
  
  // optional int32 itemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemnum(), target);
  }
  
  // optional uint32 doing = 3;
  if (has_doing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->doing(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CUpdateItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsnid = 1;
    if (has_itemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsnid());
    }
    
    // optional int32 itemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }
    
    // optional uint32 doing = 3;
    if (has_doing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->doing());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CUpdateItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CUpdateItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CUpdateItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CUpdateItem::MergeFrom(const PBG2CUpdateItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsnid()) {
      set_itemsnid(from.itemsnid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_doing()) {
      set_doing(from.doing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CUpdateItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CUpdateItem::CopyFrom(const PBG2CUpdateItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CUpdateItem::IsInitialized() const {
  
  return true;
}

void PBG2CUpdateItem::Swap(PBG2CUpdateItem* other) {
  if (other != this) {
    std::swap(itemsnid_, other->itemsnid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(doing_, other->doing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CUpdateItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CUpdateItem_descriptor_;
  metadata.reflection = PBG2CUpdateItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GSplitItem::kItemsnidFieldNumber;
#endif  // !_MSC_VER

PBC2GSplitItem::PBC2GSplitItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GSplitItem::InitAsDefaultInstance() {
}

PBC2GSplitItem::PBC2GSplitItem(const PBC2GSplitItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GSplitItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GSplitItem::~PBC2GSplitItem() {
  SharedDtor();
}

void PBC2GSplitItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GSplitItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GSplitItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GSplitItem_descriptor_;
}

const PBC2GSplitItem& PBC2GSplitItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GSplitItem* PBC2GSplitItem::default_instance_ = NULL;

PBC2GSplitItem* PBC2GSplitItem::New() const {
  return new PBC2GSplitItem;
}

void PBC2GSplitItem::Clear() {
  itemsnid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GSplitItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemsnid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_itemsnid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_itemsnid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_itemsnid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GSplitItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 itemsnid = 1;
  for (int i = 0; i < this->itemsnid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->itemsnid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GSplitItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 itemsnid = 1;
  for (int i = 0; i < this->itemsnid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->itemsnid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GSplitItem::ByteSize() const {
  int total_size = 0;
  
  // repeated uint64 itemsnid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemsnid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->itemsnid(i));
    }
    total_size += 1 * this->itemsnid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GSplitItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GSplitItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GSplitItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GSplitItem::MergeFrom(const PBC2GSplitItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemsnid_.MergeFrom(from.itemsnid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GSplitItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GSplitItem::CopyFrom(const PBC2GSplitItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GSplitItem::IsInitialized() const {
  
  return true;
}

void PBC2GSplitItem::Swap(PBC2GSplitItem* other) {
  if (other != this) {
    itemsnid_.Swap(&other->itemsnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GSplitItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GSplitItem_descriptor_;
  metadata.reflection = PBC2GSplitItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CSplitItem::kItemsnidFieldNumber;
#endif  // !_MSC_VER

PBG2CSplitItem::PBG2CSplitItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSplitItem::InitAsDefaultInstance() {
}

PBG2CSplitItem::PBG2CSplitItem(const PBG2CSplitItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSplitItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSplitItem::~PBG2CSplitItem() {
  SharedDtor();
}

void PBG2CSplitItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CSplitItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSplitItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSplitItem_descriptor_;
}

const PBG2CSplitItem& PBG2CSplitItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CSplitItem* PBG2CSplitItem::default_instance_ = NULL;

PBG2CSplitItem* PBG2CSplitItem::New() const {
  return new PBG2CSplitItem;
}

void PBG2CSplitItem::Clear() {
  itemsnid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSplitItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemsnid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_itemsnid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_itemsnid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_itemsnid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CSplitItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 itemsnid = 1;
  for (int i = 0; i < this->itemsnid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->itemsnid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSplitItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 itemsnid = 1;
  for (int i = 0; i < this->itemsnid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->itemsnid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSplitItem::ByteSize() const {
  int total_size = 0;
  
  // repeated uint64 itemsnid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemsnid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->itemsnid(i));
    }
    total_size += 1 * this->itemsnid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSplitItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSplitItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSplitItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSplitItem::MergeFrom(const PBG2CSplitItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemsnid_.MergeFrom(from.itemsnid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSplitItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSplitItem::CopyFrom(const PBG2CSplitItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSplitItem::IsInitialized() const {
  
  return true;
}

void PBG2CSplitItem::Swap(PBG2CSplitItem* other) {
  if (other != this) {
    itemsnid_.Swap(&other->itemsnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSplitItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSplitItem_descriptor_;
  metadata.reflection = PBG2CSplitItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GSortItem::kPbsortFieldNumber;
#endif  // !_MSC_VER

PBC2GSortItem::PBC2GSortItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GSortItem::InitAsDefaultInstance() {
}

PBC2GSortItem::PBC2GSortItem(const PBC2GSortItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GSortItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GSortItem::~PBC2GSortItem() {
  SharedDtor();
}

void PBC2GSortItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GSortItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GSortItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GSortItem_descriptor_;
}

const PBC2GSortItem& PBC2GSortItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GSortItem* PBC2GSortItem::default_instance_ = NULL;

PBC2GSortItem* PBC2GSortItem::New() const {
  return new PBC2GSortItem;
}

void PBC2GSortItem::Clear() {
  pbsort_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GSortItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBItemSortData pbsort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbsort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbsort()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pbsort;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GSortItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBItemSortData pbsort = 1;
  for (int i = 0; i < this->pbsort_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbsort(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GSortItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBItemSortData pbsort = 1;
  for (int i = 0; i < this->pbsort_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbsort(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GSortItem::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBItemSortData pbsort = 1;
  total_size += 1 * this->pbsort_size();
  for (int i = 0; i < this->pbsort_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbsort(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GSortItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GSortItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GSortItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GSortItem::MergeFrom(const PBC2GSortItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbsort_.MergeFrom(from.pbsort_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GSortItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GSortItem::CopyFrom(const PBC2GSortItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GSortItem::IsInitialized() const {
  
  return true;
}

void PBC2GSortItem::Swap(PBC2GSortItem* other) {
  if (other != this) {
    pbsort_.Swap(&other->pbsort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GSortItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GSortItem_descriptor_;
  metadata.reflection = PBC2GSortItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CSortItem::PBG2CSortItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSortItem::InitAsDefaultInstance() {
}

PBG2CSortItem::PBG2CSortItem(const PBG2CSortItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSortItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSortItem::~PBG2CSortItem() {
  SharedDtor();
}

void PBG2CSortItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CSortItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSortItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSortItem_descriptor_;
}

const PBG2CSortItem& PBG2CSortItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CSortItem* PBG2CSortItem::default_instance_ = NULL;

PBG2CSortItem* PBG2CSortItem::New() const {
  return new PBG2CSortItem;
}

void PBG2CSortItem::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSortItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CSortItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSortItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSortItem::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSortItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSortItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSortItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSortItem::MergeFrom(const PBG2CSortItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSortItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSortItem::CopyFrom(const PBG2CSortItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSortItem::IsInitialized() const {
  
  return true;
}

void PBG2CSortItem::Swap(PBG2CSortItem* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSortItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSortItem_descriptor_;
  metadata.reflection = PBG2CSortItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CNewItem::kIteminfoFieldNumber;
const int PBG2CNewItem::kDoingFieldNumber;
const int PBG2CNewItem::kIsbymailFieldNumber;
#endif  // !_MSC_VER

PBG2CNewItem::PBG2CNewItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CNewItem::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::PBItem*>(&::PBItem::default_instance());
}

PBG2CNewItem::PBG2CNewItem(const PBG2CNewItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CNewItem::SharedCtor() {
  _cached_size_ = 0;
  iteminfo_ = NULL;
  doing_ = 0u;
  isbymail_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CNewItem::~PBG2CNewItem() {
  SharedDtor();
}

void PBG2CNewItem::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void PBG2CNewItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CNewItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CNewItem_descriptor_;
}

const PBG2CNewItem& PBG2CNewItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CNewItem* PBG2CNewItem::default_instance_ = NULL;

PBG2CNewItem* PBG2CNewItem::New() const {
  return new PBG2CNewItem;
}

void PBG2CNewItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::PBItem::Clear();
    }
    doing_ = 0u;
    isbymail_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CNewItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBItem iteminfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_doing;
        break;
      }
      
      // optional uint32 doing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doing_)));
          set_has_doing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isbymail;
        break;
      }
      
      // optional bool isbymail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbymail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbymail_)));
          set_has_isbymail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CNewItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBItem iteminfo = 1;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(), output);
  }
  
  // optional uint32 doing = 2;
  if (has_doing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->doing(), output);
  }
  
  // optional bool isbymail = 3;
  if (has_isbymail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isbymail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CNewItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBItem iteminfo = 1;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(), target);
  }
  
  // optional uint32 doing = 2;
  if (has_doing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->doing(), target);
  }
  
  // optional bool isbymail = 3;
  if (has_isbymail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isbymail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CNewItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBItem iteminfo = 1;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }
    
    // optional uint32 doing = 2;
    if (has_doing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->doing());
    }
    
    // optional bool isbymail = 3;
    if (has_isbymail()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CNewItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CNewItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CNewItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CNewItem::MergeFrom(const PBG2CNewItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::PBItem::MergeFrom(from.iteminfo());
    }
    if (from.has_doing()) {
      set_doing(from.doing());
    }
    if (from.has_isbymail()) {
      set_isbymail(from.isbymail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CNewItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CNewItem::CopyFrom(const PBG2CNewItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CNewItem::IsInitialized() const {
  
  return true;
}

void PBG2CNewItem::Swap(PBG2CNewItem* other) {
  if (other != this) {
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(doing_, other->doing_);
    std::swap(isbymail_, other->isbymail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CNewItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CNewItem_descriptor_;
  metadata.reflection = PBG2CNewItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GEquipColumnEnhance::kEquiptypeFieldNumber;
const int PBC2GEquipColumnEnhance::kPbitemdataFieldNumber;
#endif  // !_MSC_VER

PBC2GEquipColumnEnhance::PBC2GEquipColumnEnhance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GEquipColumnEnhance::InitAsDefaultInstance() {
}

PBC2GEquipColumnEnhance::PBC2GEquipColumnEnhance(const PBC2GEquipColumnEnhance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GEquipColumnEnhance::SharedCtor() {
  _cached_size_ = 0;
  equiptype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GEquipColumnEnhance::~PBC2GEquipColumnEnhance() {
  SharedDtor();
}

void PBC2GEquipColumnEnhance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GEquipColumnEnhance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GEquipColumnEnhance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GEquipColumnEnhance_descriptor_;
}

const PBC2GEquipColumnEnhance& PBC2GEquipColumnEnhance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GEquipColumnEnhance* PBC2GEquipColumnEnhance::default_instance_ = NULL;

PBC2GEquipColumnEnhance* PBC2GEquipColumnEnhance::New() const {
  return new PBC2GEquipColumnEnhance;
}

void PBC2GEquipColumnEnhance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equiptype_ = 0u;
  }
  pbitemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GEquipColumnEnhance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 equiptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiptype_)));
          set_has_equiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbitemdata;
        break;
      }
      
      // repeated .PBDelItemata pbitemdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbitemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbitemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbitemdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GEquipColumnEnhance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equiptype(), output);
  }
  
  // repeated .PBDelItemata pbitemdata = 2;
  for (int i = 0; i < this->pbitemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbitemdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GEquipColumnEnhance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equiptype(), target);
  }
  
  // repeated .PBDelItemata pbitemdata = 2;
  for (int i = 0; i < this->pbitemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbitemdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GEquipColumnEnhance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 equiptype = 1;
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiptype());
    }
    
  }
  // repeated .PBDelItemata pbitemdata = 2;
  total_size += 1 * this->pbitemdata_size();
  for (int i = 0; i < this->pbitemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbitemdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GEquipColumnEnhance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GEquipColumnEnhance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GEquipColumnEnhance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GEquipColumnEnhance::MergeFrom(const PBC2GEquipColumnEnhance& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbitemdata_.MergeFrom(from.pbitemdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GEquipColumnEnhance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GEquipColumnEnhance::CopyFrom(const PBC2GEquipColumnEnhance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GEquipColumnEnhance::IsInitialized() const {
  
  return true;
}

void PBC2GEquipColumnEnhance::Swap(PBC2GEquipColumnEnhance* other) {
  if (other != this) {
    std::swap(equiptype_, other->equiptype_);
    pbitemdata_.Swap(&other->pbitemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GEquipColumnEnhance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GEquipColumnEnhance_descriptor_;
  metadata.reflection = PBC2GEquipColumnEnhance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CEquipColumnEnhance::kEquiptypeFieldNumber;
const int PBG2CEquipColumnEnhance::kLevelFieldNumber;
#endif  // !_MSC_VER

PBG2CEquipColumnEnhance::PBG2CEquipColumnEnhance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CEquipColumnEnhance::InitAsDefaultInstance() {
}

PBG2CEquipColumnEnhance::PBG2CEquipColumnEnhance(const PBG2CEquipColumnEnhance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CEquipColumnEnhance::SharedCtor() {
  _cached_size_ = 0;
  equiptype_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CEquipColumnEnhance::~PBG2CEquipColumnEnhance() {
  SharedDtor();
}

void PBG2CEquipColumnEnhance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CEquipColumnEnhance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CEquipColumnEnhance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CEquipColumnEnhance_descriptor_;
}

const PBG2CEquipColumnEnhance& PBG2CEquipColumnEnhance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CEquipColumnEnhance* PBG2CEquipColumnEnhance::default_instance_ = NULL;

PBG2CEquipColumnEnhance* PBG2CEquipColumnEnhance::New() const {
  return new PBG2CEquipColumnEnhance;
}

void PBG2CEquipColumnEnhance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equiptype_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CEquipColumnEnhance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 equiptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiptype_)));
          set_has_equiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CEquipColumnEnhance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equiptype(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CEquipColumnEnhance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equiptype(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CEquipColumnEnhance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 equiptype = 1;
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiptype());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CEquipColumnEnhance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CEquipColumnEnhance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CEquipColumnEnhance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CEquipColumnEnhance::MergeFrom(const PBG2CEquipColumnEnhance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CEquipColumnEnhance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CEquipColumnEnhance::CopyFrom(const PBG2CEquipColumnEnhance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CEquipColumnEnhance::IsInitialized() const {
  
  return true;
}

void PBG2CEquipColumnEnhance::Swap(PBG2CEquipColumnEnhance* other) {
  if (other != this) {
    std::swap(equiptype_, other->equiptype_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CEquipColumnEnhance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CEquipColumnEnhance_descriptor_;
  metadata.reflection = PBG2CEquipColumnEnhance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GEquipColumnForge::kEquiptypeFieldNumber;
const int PBC2GEquipColumnForge::kPbitemdataFieldNumber;
#endif  // !_MSC_VER

PBC2GEquipColumnForge::PBC2GEquipColumnForge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GEquipColumnForge::InitAsDefaultInstance() {
}

PBC2GEquipColumnForge::PBC2GEquipColumnForge(const PBC2GEquipColumnForge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GEquipColumnForge::SharedCtor() {
  _cached_size_ = 0;
  equiptype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GEquipColumnForge::~PBC2GEquipColumnForge() {
  SharedDtor();
}

void PBC2GEquipColumnForge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GEquipColumnForge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GEquipColumnForge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GEquipColumnForge_descriptor_;
}

const PBC2GEquipColumnForge& PBC2GEquipColumnForge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GEquipColumnForge* PBC2GEquipColumnForge::default_instance_ = NULL;

PBC2GEquipColumnForge* PBC2GEquipColumnForge::New() const {
  return new PBC2GEquipColumnForge;
}

void PBC2GEquipColumnForge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equiptype_ = 0u;
  }
  pbitemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GEquipColumnForge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 equiptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiptype_)));
          set_has_equiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbitemdata;
        break;
      }
      
      // repeated .PBDelItemata pbitemdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbitemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbitemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbitemdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GEquipColumnForge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equiptype(), output);
  }
  
  // repeated .PBDelItemata pbitemdata = 2;
  for (int i = 0; i < this->pbitemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbitemdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GEquipColumnForge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equiptype(), target);
  }
  
  // repeated .PBDelItemata pbitemdata = 2;
  for (int i = 0; i < this->pbitemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbitemdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GEquipColumnForge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 equiptype = 1;
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiptype());
    }
    
  }
  // repeated .PBDelItemata pbitemdata = 2;
  total_size += 1 * this->pbitemdata_size();
  for (int i = 0; i < this->pbitemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbitemdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GEquipColumnForge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GEquipColumnForge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GEquipColumnForge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GEquipColumnForge::MergeFrom(const PBC2GEquipColumnForge& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbitemdata_.MergeFrom(from.pbitemdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GEquipColumnForge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GEquipColumnForge::CopyFrom(const PBC2GEquipColumnForge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GEquipColumnForge::IsInitialized() const {
  
  return true;
}

void PBC2GEquipColumnForge::Swap(PBC2GEquipColumnForge* other) {
  if (other != this) {
    std::swap(equiptype_, other->equiptype_);
    pbitemdata_.Swap(&other->pbitemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GEquipColumnForge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GEquipColumnForge_descriptor_;
  metadata.reflection = PBC2GEquipColumnForge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CEquipColumnForge::kEquiptypeFieldNumber;
const int PBG2CEquipColumnForge::kLevelFieldNumber;
#endif  // !_MSC_VER

PBG2CEquipColumnForge::PBG2CEquipColumnForge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CEquipColumnForge::InitAsDefaultInstance() {
}

PBG2CEquipColumnForge::PBG2CEquipColumnForge(const PBG2CEquipColumnForge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CEquipColumnForge::SharedCtor() {
  _cached_size_ = 0;
  equiptype_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CEquipColumnForge::~PBG2CEquipColumnForge() {
  SharedDtor();
}

void PBG2CEquipColumnForge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CEquipColumnForge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CEquipColumnForge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CEquipColumnForge_descriptor_;
}

const PBG2CEquipColumnForge& PBG2CEquipColumnForge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CEquipColumnForge* PBG2CEquipColumnForge::default_instance_ = NULL;

PBG2CEquipColumnForge* PBG2CEquipColumnForge::New() const {
  return new PBG2CEquipColumnForge;
}

void PBG2CEquipColumnForge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equiptype_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CEquipColumnForge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 equiptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiptype_)));
          set_has_equiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CEquipColumnForge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equiptype(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CEquipColumnForge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equiptype(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CEquipColumnForge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 equiptype = 1;
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiptype());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CEquipColumnForge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CEquipColumnForge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CEquipColumnForge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CEquipColumnForge::MergeFrom(const PBG2CEquipColumnForge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CEquipColumnForge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CEquipColumnForge::CopyFrom(const PBG2CEquipColumnForge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CEquipColumnForge::IsInitialized() const {
  
  return true;
}

void PBG2CEquipColumnForge::Swap(PBG2CEquipColumnForge* other) {
  if (other != this) {
    std::swap(equiptype_, other->equiptype_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CEquipColumnForge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CEquipColumnForge_descriptor_;
  metadata.reflection = PBG2CEquipColumnForge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GEquipEnhance::kEquiptypeFieldNumber;
const int PBC2GEquipEnhance::kPbitemdataFieldNumber;
#endif  // !_MSC_VER

PBC2GEquipEnhance::PBC2GEquipEnhance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GEquipEnhance::InitAsDefaultInstance() {
}

PBC2GEquipEnhance::PBC2GEquipEnhance(const PBC2GEquipEnhance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GEquipEnhance::SharedCtor() {
  _cached_size_ = 0;
  equiptype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GEquipEnhance::~PBC2GEquipEnhance() {
  SharedDtor();
}

void PBC2GEquipEnhance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GEquipEnhance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GEquipEnhance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GEquipEnhance_descriptor_;
}

const PBC2GEquipEnhance& PBC2GEquipEnhance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GEquipEnhance* PBC2GEquipEnhance::default_instance_ = NULL;

PBC2GEquipEnhance* PBC2GEquipEnhance::New() const {
  return new PBC2GEquipEnhance;
}

void PBC2GEquipEnhance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equiptype_ = 0u;
  }
  pbitemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GEquipEnhance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 equiptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiptype_)));
          set_has_equiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbitemdata;
        break;
      }
      
      // repeated .PBDelItemata pbitemdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbitemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbitemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbitemdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GEquipEnhance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equiptype(), output);
  }
  
  // repeated .PBDelItemata pbitemdata = 2;
  for (int i = 0; i < this->pbitemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbitemdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GEquipEnhance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equiptype(), target);
  }
  
  // repeated .PBDelItemata pbitemdata = 2;
  for (int i = 0; i < this->pbitemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbitemdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GEquipEnhance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 equiptype = 1;
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiptype());
    }
    
  }
  // repeated .PBDelItemata pbitemdata = 2;
  total_size += 1 * this->pbitemdata_size();
  for (int i = 0; i < this->pbitemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbitemdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GEquipEnhance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GEquipEnhance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GEquipEnhance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GEquipEnhance::MergeFrom(const PBC2GEquipEnhance& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbitemdata_.MergeFrom(from.pbitemdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GEquipEnhance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GEquipEnhance::CopyFrom(const PBC2GEquipEnhance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GEquipEnhance::IsInitialized() const {
  
  return true;
}

void PBC2GEquipEnhance::Swap(PBC2GEquipEnhance* other) {
  if (other != this) {
    std::swap(equiptype_, other->equiptype_);
    pbitemdata_.Swap(&other->pbitemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GEquipEnhance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GEquipEnhance_descriptor_;
  metadata.reflection = PBC2GEquipEnhance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CEquipEnhance::kEquiptypeFieldNumber;
const int PBG2CEquipEnhance::kExpFieldNumber;
#endif  // !_MSC_VER

PBG2CEquipEnhance::PBG2CEquipEnhance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CEquipEnhance::InitAsDefaultInstance() {
}

PBG2CEquipEnhance::PBG2CEquipEnhance(const PBG2CEquipEnhance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CEquipEnhance::SharedCtor() {
  _cached_size_ = 0;
  equiptype_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CEquipEnhance::~PBG2CEquipEnhance() {
  SharedDtor();
}

void PBG2CEquipEnhance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CEquipEnhance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CEquipEnhance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CEquipEnhance_descriptor_;
}

const PBG2CEquipEnhance& PBG2CEquipEnhance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CEquipEnhance* PBG2CEquipEnhance::default_instance_ = NULL;

PBG2CEquipEnhance* PBG2CEquipEnhance::New() const {
  return new PBG2CEquipEnhance;
}

void PBG2CEquipEnhance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equiptype_ = 0u;
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CEquipEnhance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 equiptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiptype_)));
          set_has_equiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // optional uint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CEquipEnhance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equiptype(), output);
  }
  
  // optional uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CEquipEnhance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equiptype(), target);
  }
  
  // optional uint32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CEquipEnhance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 equiptype = 1;
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiptype());
    }
    
    // optional uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CEquipEnhance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CEquipEnhance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CEquipEnhance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CEquipEnhance::MergeFrom(const PBG2CEquipEnhance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CEquipEnhance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CEquipEnhance::CopyFrom(const PBG2CEquipEnhance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CEquipEnhance::IsInitialized() const {
  
  return true;
}

void PBG2CEquipEnhance::Swap(PBG2CEquipEnhance* other) {
  if (other != this) {
    std::swap(equiptype_, other->equiptype_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CEquipEnhance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CEquipEnhance_descriptor_;
  metadata.reflection = PBG2CEquipEnhance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GEquipForge::kEquiptypeFieldNumber;
const int PBC2GEquipForge::kPbitemdataFieldNumber;
#endif  // !_MSC_VER

PBC2GEquipForge::PBC2GEquipForge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GEquipForge::InitAsDefaultInstance() {
}

PBC2GEquipForge::PBC2GEquipForge(const PBC2GEquipForge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GEquipForge::SharedCtor() {
  _cached_size_ = 0;
  equiptype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GEquipForge::~PBC2GEquipForge() {
  SharedDtor();
}

void PBC2GEquipForge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GEquipForge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GEquipForge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GEquipForge_descriptor_;
}

const PBC2GEquipForge& PBC2GEquipForge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GEquipForge* PBC2GEquipForge::default_instance_ = NULL;

PBC2GEquipForge* PBC2GEquipForge::New() const {
  return new PBC2GEquipForge;
}

void PBC2GEquipForge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equiptype_ = 0u;
  }
  pbitemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GEquipForge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 equiptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiptype_)));
          set_has_equiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbitemdata;
        break;
      }
      
      // repeated .PBDelItemata pbitemdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbitemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbitemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbitemdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GEquipForge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equiptype(), output);
  }
  
  // repeated .PBDelItemata pbitemdata = 2;
  for (int i = 0; i < this->pbitemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbitemdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GEquipForge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equiptype(), target);
  }
  
  // repeated .PBDelItemata pbitemdata = 2;
  for (int i = 0; i < this->pbitemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbitemdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GEquipForge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 equiptype = 1;
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiptype());
    }
    
  }
  // repeated .PBDelItemata pbitemdata = 2;
  total_size += 1 * this->pbitemdata_size();
  for (int i = 0; i < this->pbitemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbitemdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GEquipForge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GEquipForge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GEquipForge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GEquipForge::MergeFrom(const PBC2GEquipForge& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbitemdata_.MergeFrom(from.pbitemdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GEquipForge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GEquipForge::CopyFrom(const PBC2GEquipForge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GEquipForge::IsInitialized() const {
  
  return true;
}

void PBC2GEquipForge::Swap(PBC2GEquipForge* other) {
  if (other != this) {
    std::swap(equiptype_, other->equiptype_);
    pbitemdata_.Swap(&other->pbitemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GEquipForge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GEquipForge_descriptor_;
  metadata.reflection = PBC2GEquipForge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CEquipForge::kEquiptypeFieldNumber;
const int PBG2CEquipForge::kExpFieldNumber;
#endif  // !_MSC_VER

PBG2CEquipForge::PBG2CEquipForge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CEquipForge::InitAsDefaultInstance() {
}

PBG2CEquipForge::PBG2CEquipForge(const PBG2CEquipForge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CEquipForge::SharedCtor() {
  _cached_size_ = 0;
  equiptype_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CEquipForge::~PBG2CEquipForge() {
  SharedDtor();
}

void PBG2CEquipForge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CEquipForge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CEquipForge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CEquipForge_descriptor_;
}

const PBG2CEquipForge& PBG2CEquipForge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CEquipForge* PBG2CEquipForge::default_instance_ = NULL;

PBG2CEquipForge* PBG2CEquipForge::New() const {
  return new PBG2CEquipForge;
}

void PBG2CEquipForge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equiptype_ = 0u;
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CEquipForge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 equiptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiptype_)));
          set_has_equiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // optional uint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CEquipForge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equiptype(), output);
  }
  
  // optional uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CEquipForge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 equiptype = 1;
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equiptype(), target);
  }
  
  // optional uint32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CEquipForge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 equiptype = 1;
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiptype());
    }
    
    // optional uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CEquipForge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CEquipForge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CEquipForge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CEquipForge::MergeFrom(const PBG2CEquipForge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CEquipForge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CEquipForge::CopyFrom(const PBG2CEquipForge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CEquipForge::IsInitialized() const {
  
  return true;
}

void PBG2CEquipForge::Swap(PBG2CEquipForge* other) {
  if (other != this) {
    std::swap(equiptype_, other->equiptype_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CEquipForge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CEquipForge_descriptor_;
  metadata.reflection = PBG2CEquipForge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GEquipInherit::kSourcesnFieldNumber;
const int PBC2GEquipInherit::kTargetsnFieldNumber;
#endif  // !_MSC_VER

PBC2GEquipInherit::PBC2GEquipInherit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GEquipInherit::InitAsDefaultInstance() {
}

PBC2GEquipInherit::PBC2GEquipInherit(const PBC2GEquipInherit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GEquipInherit::SharedCtor() {
  _cached_size_ = 0;
  sourcesn_ = GOOGLE_ULONGLONG(0);
  targetsn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GEquipInherit::~PBC2GEquipInherit() {
  SharedDtor();
}

void PBC2GEquipInherit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GEquipInherit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GEquipInherit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GEquipInherit_descriptor_;
}

const PBC2GEquipInherit& PBC2GEquipInherit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GEquipInherit* PBC2GEquipInherit::default_instance_ = NULL;

PBC2GEquipInherit* PBC2GEquipInherit::New() const {
  return new PBC2GEquipInherit;
}

void PBC2GEquipInherit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourcesn_ = GOOGLE_ULONGLONG(0);
    targetsn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GEquipInherit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sourcesn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sourcesn_)));
          set_has_sourcesn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetsn;
        break;
      }
      
      // optional uint64 targetsn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetsn_)));
          set_has_targetsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GEquipInherit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sourcesn = 1;
  if (has_sourcesn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sourcesn(), output);
  }
  
  // optional uint64 targetsn = 2;
  if (has_targetsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->targetsn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GEquipInherit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sourcesn = 1;
  if (has_sourcesn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sourcesn(), target);
  }
  
  // optional uint64 targetsn = 2;
  if (has_targetsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->targetsn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GEquipInherit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sourcesn = 1;
    if (has_sourcesn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sourcesn());
    }
    
    // optional uint64 targetsn = 2;
    if (has_targetsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetsn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GEquipInherit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GEquipInherit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GEquipInherit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GEquipInherit::MergeFrom(const PBC2GEquipInherit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourcesn()) {
      set_sourcesn(from.sourcesn());
    }
    if (from.has_targetsn()) {
      set_targetsn(from.targetsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GEquipInherit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GEquipInherit::CopyFrom(const PBC2GEquipInherit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GEquipInherit::IsInitialized() const {
  
  return true;
}

void PBC2GEquipInherit::Swap(PBC2GEquipInherit* other) {
  if (other != this) {
    std::swap(sourcesn_, other->sourcesn_);
    std::swap(targetsn_, other->targetsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GEquipInherit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GEquipInherit_descriptor_;
  metadata.reflection = PBC2GEquipInherit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CEquipInherit::kItemsnidFieldNumber;
const int PBG2CEquipInherit::kSpecialidFieldNumber;
#endif  // !_MSC_VER

PBG2CEquipInherit::PBG2CEquipInherit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CEquipInherit::InitAsDefaultInstance() {
}

PBG2CEquipInherit::PBG2CEquipInherit(const PBG2CEquipInherit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CEquipInherit::SharedCtor() {
  _cached_size_ = 0;
  itemsnid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CEquipInherit::~PBG2CEquipInherit() {
  SharedDtor();
}

void PBG2CEquipInherit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CEquipInherit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CEquipInherit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CEquipInherit_descriptor_;
}

const PBG2CEquipInherit& PBG2CEquipInherit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CEquipInherit* PBG2CEquipInherit::default_instance_ = NULL;

PBG2CEquipInherit* PBG2CEquipInherit::New() const {
  return new PBG2CEquipInherit;
}

void PBG2CEquipInherit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsnid_ = GOOGLE_ULONGLONG(0);
  }
  specialid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CEquipInherit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsnid_)));
          set_has_itemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_specialid;
        break;
      }
      
      // repeated uint32 specialid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_specialid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_specialid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_specialid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_specialid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CEquipInherit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsnid(), output);
  }
  
  // repeated uint32 specialid = 2;
  for (int i = 0; i < this->specialid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->specialid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CEquipInherit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsnid = 1;
  if (has_itemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsnid(), target);
  }
  
  // repeated uint32 specialid = 2;
  for (int i = 0; i < this->specialid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->specialid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CEquipInherit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsnid = 1;
    if (has_itemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsnid());
    }
    
  }
  // repeated uint32 specialid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->specialid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->specialid(i));
    }
    total_size += 1 * this->specialid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CEquipInherit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CEquipInherit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CEquipInherit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CEquipInherit::MergeFrom(const PBG2CEquipInherit& from) {
  GOOGLE_CHECK_NE(&from, this);
  specialid_.MergeFrom(from.specialid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsnid()) {
      set_itemsnid(from.itemsnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CEquipInherit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CEquipInherit::CopyFrom(const PBG2CEquipInherit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CEquipInherit::IsInitialized() const {
  
  return true;
}

void PBG2CEquipInherit::Swap(PBG2CEquipInherit* other) {
  if (other != this) {
    std::swap(itemsnid_, other->itemsnid_);
    specialid_.Swap(&other->specialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CEquipInherit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CEquipInherit_descriptor_;
  metadata.reflection = PBG2CEquipInherit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GEquipMake::kMakeidFieldNumber;
const int PBC2GEquipMake::kMarkFieldNumber;
#endif  // !_MSC_VER

PBC2GEquipMake::PBC2GEquipMake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GEquipMake::InitAsDefaultInstance() {
}

PBC2GEquipMake::PBC2GEquipMake(const PBC2GEquipMake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GEquipMake::SharedCtor() {
  _cached_size_ = 0;
  makeid_ = 0u;
  mark_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GEquipMake::~PBC2GEquipMake() {
  SharedDtor();
}

void PBC2GEquipMake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GEquipMake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GEquipMake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GEquipMake_descriptor_;
}

const PBC2GEquipMake& PBC2GEquipMake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GEquipMake* PBC2GEquipMake::default_instance_ = NULL;

PBC2GEquipMake* PBC2GEquipMake::New() const {
  return new PBC2GEquipMake;
}

void PBC2GEquipMake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    makeid_ = 0u;
    mark_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GEquipMake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 makeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &makeid_)));
          set_has_makeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mark;
        break;
      }
      
      // optional uint32 mark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GEquipMake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 makeid = 1;
  if (has_makeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->makeid(), output);
  }
  
  // optional uint32 mark = 2;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mark(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GEquipMake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 makeid = 1;
  if (has_makeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->makeid(), target);
  }
  
  // optional uint32 mark = 2;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mark(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GEquipMake::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 makeid = 1;
    if (has_makeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->makeid());
    }
    
    // optional uint32 mark = 2;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mark());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GEquipMake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GEquipMake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GEquipMake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GEquipMake::MergeFrom(const PBC2GEquipMake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_makeid()) {
      set_makeid(from.makeid());
    }
    if (from.has_mark()) {
      set_mark(from.mark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GEquipMake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GEquipMake::CopyFrom(const PBC2GEquipMake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GEquipMake::IsInitialized() const {
  
  return true;
}

void PBC2GEquipMake::Swap(PBC2GEquipMake* other) {
  if (other != this) {
    std::swap(makeid_, other->makeid_);
    std::swap(mark_, other->mark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GEquipMake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GEquipMake_descriptor_;
  metadata.reflection = PBC2GEquipMake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CEquipMake::kMakeidFieldNumber;
const int PBG2CEquipMake::kMarkFieldNumber;
#endif  // !_MSC_VER

PBG2CEquipMake::PBG2CEquipMake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CEquipMake::InitAsDefaultInstance() {
}

PBG2CEquipMake::PBG2CEquipMake(const PBG2CEquipMake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CEquipMake::SharedCtor() {
  _cached_size_ = 0;
  makeid_ = 0u;
  mark_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CEquipMake::~PBG2CEquipMake() {
  SharedDtor();
}

void PBG2CEquipMake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CEquipMake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CEquipMake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CEquipMake_descriptor_;
}

const PBG2CEquipMake& PBG2CEquipMake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CEquipMake* PBG2CEquipMake::default_instance_ = NULL;

PBG2CEquipMake* PBG2CEquipMake::New() const {
  return new PBG2CEquipMake;
}

void PBG2CEquipMake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    makeid_ = 0u;
    mark_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CEquipMake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 makeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &makeid_)));
          set_has_makeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mark;
        break;
      }
      
      // optional uint32 mark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CEquipMake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 makeid = 1;
  if (has_makeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->makeid(), output);
  }
  
  // optional uint32 mark = 2;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mark(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CEquipMake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 makeid = 1;
  if (has_makeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->makeid(), target);
  }
  
  // optional uint32 mark = 2;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mark(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CEquipMake::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 makeid = 1;
    if (has_makeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->makeid());
    }
    
    // optional uint32 mark = 2;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mark());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CEquipMake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CEquipMake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CEquipMake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CEquipMake::MergeFrom(const PBG2CEquipMake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_makeid()) {
      set_makeid(from.makeid());
    }
    if (from.has_mark()) {
      set_mark(from.mark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CEquipMake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CEquipMake::CopyFrom(const PBG2CEquipMake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CEquipMake::IsInitialized() const {
  
  return true;
}

void PBG2CEquipMake::Swap(PBG2CEquipMake* other) {
  if (other != this) {
    std::swap(makeid_, other->makeid_);
    std::swap(mark_, other->mark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CEquipMake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CEquipMake_descriptor_;
  metadata.reflection = PBG2CEquipMake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GMounting::kIsmountFieldNumber;
#endif  // !_MSC_VER

PBC2GMounting::PBC2GMounting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GMounting::InitAsDefaultInstance() {
}

PBC2GMounting::PBC2GMounting(const PBC2GMounting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GMounting::SharedCtor() {
  _cached_size_ = 0;
  ismount_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GMounting::~PBC2GMounting() {
  SharedDtor();
}

void PBC2GMounting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GMounting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GMounting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GMounting_descriptor_;
}

const PBC2GMounting& PBC2GMounting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GMounting* PBC2GMounting::default_instance_ = NULL;

PBC2GMounting* PBC2GMounting::New() const {
  return new PBC2GMounting;
}

void PBC2GMounting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ismount_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GMounting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ismount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismount_)));
          set_has_ismount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GMounting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool ismount = 1;
  if (has_ismount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ismount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GMounting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool ismount = 1;
  if (has_ismount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ismount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GMounting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool ismount = 1;
    if (has_ismount()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GMounting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GMounting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GMounting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GMounting::MergeFrom(const PBC2GMounting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ismount()) {
      set_ismount(from.ismount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GMounting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GMounting::CopyFrom(const PBC2GMounting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GMounting::IsInitialized() const {
  
  return true;
}

void PBC2GMounting::Swap(PBC2GMounting* other) {
  if (other != this) {
    std::swap(ismount_, other->ismount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GMounting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GMounting_descriptor_;
  metadata.reflection = PBC2GMounting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CMounting::kMountidFieldNumber;
#endif  // !_MSC_VER

PBG2CMounting::PBG2CMounting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CMounting::InitAsDefaultInstance() {
}

PBG2CMounting::PBG2CMounting(const PBG2CMounting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CMounting::SharedCtor() {
  _cached_size_ = 0;
  mountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CMounting::~PBG2CMounting() {
  SharedDtor();
}

void PBG2CMounting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CMounting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CMounting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CMounting_descriptor_;
}

const PBG2CMounting& PBG2CMounting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CMounting* PBG2CMounting::default_instance_ = NULL;

PBG2CMounting* PBG2CMounting::New() const {
  return new PBG2CMounting;
}

void PBG2CMounting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CMounting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mountid_)));
          set_has_mountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CMounting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mountid = 1;
  if (has_mountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mountid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CMounting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mountid = 1;
  if (has_mountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mountid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CMounting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mountid = 1;
    if (has_mountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mountid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CMounting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CMounting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CMounting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CMounting::MergeFrom(const PBG2CMounting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mountid()) {
      set_mountid(from.mountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CMounting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CMounting::CopyFrom(const PBG2CMounting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CMounting::IsInitialized() const {
  
  return true;
}

void PBG2CMounting::Swap(PBG2CMounting* other) {
  if (other != this) {
    std::swap(mountid_, other->mountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CMounting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CMounting_descriptor_;
  metadata.reflection = PBG2CMounting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GItemCompoundAsk::kRecipeidFieldNumber;
const int PBC2GItemCompoundAsk::kItemnumFieldNumber;
#endif  // !_MSC_VER

PBC2GItemCompoundAsk::PBC2GItemCompoundAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GItemCompoundAsk::InitAsDefaultInstance() {
}

PBC2GItemCompoundAsk::PBC2GItemCompoundAsk(const PBC2GItemCompoundAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GItemCompoundAsk::SharedCtor() {
  _cached_size_ = 0;
  recipeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GItemCompoundAsk::~PBC2GItemCompoundAsk() {
  SharedDtor();
}

void PBC2GItemCompoundAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GItemCompoundAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GItemCompoundAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GItemCompoundAsk_descriptor_;
}

const PBC2GItemCompoundAsk& PBC2GItemCompoundAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GItemCompoundAsk* PBC2GItemCompoundAsk::default_instance_ = NULL;

PBC2GItemCompoundAsk* PBC2GItemCompoundAsk::New() const {
  return new PBC2GItemCompoundAsk;
}

void PBC2GItemCompoundAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recipeid_ = 0u;
  }
  itemnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GItemCompoundAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recipeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipeid_)));
          set_has_recipeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemnum;
        break;
      }
      
      // repeated .PBItemSnNum itemnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemnum;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GItemCompoundAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 recipeid = 1;
  if (has_recipeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recipeid(), output);
  }
  
  // repeated .PBItemSnNum itemnum = 2;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemnum(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GItemCompoundAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 recipeid = 1;
  if (has_recipeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recipeid(), target);
  }
  
  // repeated .PBItemSnNum itemnum = 2;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemnum(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GItemCompoundAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 recipeid = 1;
    if (has_recipeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recipeid());
    }
    
  }
  // repeated .PBItemSnNum itemnum = 2;
  total_size += 1 * this->itemnum_size();
  for (int i = 0; i < this->itemnum_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemnum(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GItemCompoundAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GItemCompoundAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GItemCompoundAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GItemCompoundAsk::MergeFrom(const PBC2GItemCompoundAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemnum_.MergeFrom(from.itemnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recipeid()) {
      set_recipeid(from.recipeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GItemCompoundAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GItemCompoundAsk::CopyFrom(const PBC2GItemCompoundAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GItemCompoundAsk::IsInitialized() const {
  
  return true;
}

void PBC2GItemCompoundAsk::Swap(PBC2GItemCompoundAsk* other) {
  if (other != this) {
    std::swap(recipeid_, other->recipeid_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GItemCompoundAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GItemCompoundAsk_descriptor_;
  metadata.reflection = PBC2GItemCompoundAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2GItemOpenEquipMakeDlgAsk::PBC2GItemOpenEquipMakeDlgAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GItemOpenEquipMakeDlgAsk::InitAsDefaultInstance() {
}

PBC2GItemOpenEquipMakeDlgAsk::PBC2GItemOpenEquipMakeDlgAsk(const PBC2GItemOpenEquipMakeDlgAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GItemOpenEquipMakeDlgAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GItemOpenEquipMakeDlgAsk::~PBC2GItemOpenEquipMakeDlgAsk() {
  SharedDtor();
}

void PBC2GItemOpenEquipMakeDlgAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GItemOpenEquipMakeDlgAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GItemOpenEquipMakeDlgAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GItemOpenEquipMakeDlgAsk_descriptor_;
}

const PBC2GItemOpenEquipMakeDlgAsk& PBC2GItemOpenEquipMakeDlgAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GItemOpenEquipMakeDlgAsk* PBC2GItemOpenEquipMakeDlgAsk::default_instance_ = NULL;

PBC2GItemOpenEquipMakeDlgAsk* PBC2GItemOpenEquipMakeDlgAsk::New() const {
  return new PBC2GItemOpenEquipMakeDlgAsk;
}

void PBC2GItemOpenEquipMakeDlgAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GItemOpenEquipMakeDlgAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2GItemOpenEquipMakeDlgAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GItemOpenEquipMakeDlgAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GItemOpenEquipMakeDlgAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GItemOpenEquipMakeDlgAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GItemOpenEquipMakeDlgAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GItemOpenEquipMakeDlgAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GItemOpenEquipMakeDlgAsk::MergeFrom(const PBC2GItemOpenEquipMakeDlgAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GItemOpenEquipMakeDlgAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GItemOpenEquipMakeDlgAsk::CopyFrom(const PBC2GItemOpenEquipMakeDlgAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GItemOpenEquipMakeDlgAsk::IsInitialized() const {
  
  return true;
}

void PBC2GItemOpenEquipMakeDlgAsk::Swap(PBC2GItemOpenEquipMakeDlgAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GItemOpenEquipMakeDlgAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GItemOpenEquipMakeDlgAsk_descriptor_;
  metadata.reflection = PBC2GItemOpenEquipMakeDlgAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CItemCompoundAck::kItemidFieldNumber;
#endif  // !_MSC_VER

PBG2CItemCompoundAck::PBG2CItemCompoundAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CItemCompoundAck::InitAsDefaultInstance() {
}

PBG2CItemCompoundAck::PBG2CItemCompoundAck(const PBG2CItemCompoundAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CItemCompoundAck::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CItemCompoundAck::~PBG2CItemCompoundAck() {
  SharedDtor();
}

void PBG2CItemCompoundAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CItemCompoundAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CItemCompoundAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CItemCompoundAck_descriptor_;
}

const PBG2CItemCompoundAck& PBG2CItemCompoundAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CItemCompoundAck* PBG2CItemCompoundAck::default_instance_ = NULL;

PBG2CItemCompoundAck* PBG2CItemCompoundAck::New() const {
  return new PBG2CItemCompoundAck;
}

void PBG2CItemCompoundAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CItemCompoundAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CItemCompoundAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CItemCompoundAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CItemCompoundAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CItemCompoundAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CItemCompoundAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CItemCompoundAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CItemCompoundAck::MergeFrom(const PBG2CItemCompoundAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CItemCompoundAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CItemCompoundAck::CopyFrom(const PBG2CItemCompoundAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CItemCompoundAck::IsInitialized() const {
  
  return true;
}

void PBG2CItemCompoundAck::Swap(PBG2CItemCompoundAck* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CItemCompoundAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CItemCompoundAck_descriptor_;
  metadata.reflection = PBG2CItemCompoundAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CItemOpenEquipMakeDlgAck::kSkilledInfosFieldNumber;
const int PBG2CItemOpenEquipMakeDlgAck::kVigourFieldNumber;
#endif  // !_MSC_VER

PBG2CItemOpenEquipMakeDlgAck::PBG2CItemOpenEquipMakeDlgAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CItemOpenEquipMakeDlgAck::InitAsDefaultInstance() {
}

PBG2CItemOpenEquipMakeDlgAck::PBG2CItemOpenEquipMakeDlgAck(const PBG2CItemOpenEquipMakeDlgAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CItemOpenEquipMakeDlgAck::SharedCtor() {
  _cached_size_ = 0;
  vigour_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CItemOpenEquipMakeDlgAck::~PBG2CItemOpenEquipMakeDlgAck() {
  SharedDtor();
}

void PBG2CItemOpenEquipMakeDlgAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CItemOpenEquipMakeDlgAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CItemOpenEquipMakeDlgAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CItemOpenEquipMakeDlgAck_descriptor_;
}

const PBG2CItemOpenEquipMakeDlgAck& PBG2CItemOpenEquipMakeDlgAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CItemOpenEquipMakeDlgAck* PBG2CItemOpenEquipMakeDlgAck::default_instance_ = NULL;

PBG2CItemOpenEquipMakeDlgAck* PBG2CItemOpenEquipMakeDlgAck::New() const {
  return new PBG2CItemOpenEquipMakeDlgAck;
}

void PBG2CItemOpenEquipMakeDlgAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    vigour_ = 0u;
  }
  skilledinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CItemOpenEquipMakeDlgAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBEquipMakeSkilled skilledInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skilledInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilledinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skilledInfos;
        if (input->ExpectTag(16)) goto parse_vigour;
        break;
      }
      
      // optional uint32 vigour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vigour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vigour_)));
          set_has_vigour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CItemOpenEquipMakeDlgAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBEquipMakeSkilled skilledInfos = 1;
  for (int i = 0; i < this->skilledinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skilledinfos(i), output);
  }
  
  // optional uint32 vigour = 2;
  if (has_vigour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vigour(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CItemOpenEquipMakeDlgAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBEquipMakeSkilled skilledInfos = 1;
  for (int i = 0; i < this->skilledinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skilledinfos(i), target);
  }
  
  // optional uint32 vigour = 2;
  if (has_vigour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vigour(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CItemOpenEquipMakeDlgAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 vigour = 2;
    if (has_vigour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vigour());
    }
    
  }
  // repeated .PBEquipMakeSkilled skilledInfos = 1;
  total_size += 1 * this->skilledinfos_size();
  for (int i = 0; i < this->skilledinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilledinfos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CItemOpenEquipMakeDlgAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CItemOpenEquipMakeDlgAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CItemOpenEquipMakeDlgAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CItemOpenEquipMakeDlgAck::MergeFrom(const PBG2CItemOpenEquipMakeDlgAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilledinfos_.MergeFrom(from.skilledinfos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_vigour()) {
      set_vigour(from.vigour());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CItemOpenEquipMakeDlgAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CItemOpenEquipMakeDlgAck::CopyFrom(const PBG2CItemOpenEquipMakeDlgAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CItemOpenEquipMakeDlgAck::IsInitialized() const {
  
  return true;
}

void PBG2CItemOpenEquipMakeDlgAck::Swap(PBG2CItemOpenEquipMakeDlgAck* other) {
  if (other != this) {
    skilledinfos_.Swap(&other->skilledinfos_);
    std::swap(vigour_, other->vigour_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CItemOpenEquipMakeDlgAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CItemOpenEquipMakeDlgAck_descriptor_;
  metadata.reflection = PBG2CItemOpenEquipMakeDlgAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2GItemOpenEquipMakeOEMDlgAsk::PBC2GItemOpenEquipMakeOEMDlgAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GItemOpenEquipMakeOEMDlgAsk::InitAsDefaultInstance() {
}

PBC2GItemOpenEquipMakeOEMDlgAsk::PBC2GItemOpenEquipMakeOEMDlgAsk(const PBC2GItemOpenEquipMakeOEMDlgAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GItemOpenEquipMakeOEMDlgAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GItemOpenEquipMakeOEMDlgAsk::~PBC2GItemOpenEquipMakeOEMDlgAsk() {
  SharedDtor();
}

void PBC2GItemOpenEquipMakeOEMDlgAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GItemOpenEquipMakeOEMDlgAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GItemOpenEquipMakeOEMDlgAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GItemOpenEquipMakeOEMDlgAsk_descriptor_;
}

const PBC2GItemOpenEquipMakeOEMDlgAsk& PBC2GItemOpenEquipMakeOEMDlgAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GItemOpenEquipMakeOEMDlgAsk* PBC2GItemOpenEquipMakeOEMDlgAsk::default_instance_ = NULL;

PBC2GItemOpenEquipMakeOEMDlgAsk* PBC2GItemOpenEquipMakeOEMDlgAsk::New() const {
  return new PBC2GItemOpenEquipMakeOEMDlgAsk;
}

void PBC2GItemOpenEquipMakeOEMDlgAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GItemOpenEquipMakeOEMDlgAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2GItemOpenEquipMakeOEMDlgAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GItemOpenEquipMakeOEMDlgAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GItemOpenEquipMakeOEMDlgAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GItemOpenEquipMakeOEMDlgAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GItemOpenEquipMakeOEMDlgAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GItemOpenEquipMakeOEMDlgAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GItemOpenEquipMakeOEMDlgAsk::MergeFrom(const PBC2GItemOpenEquipMakeOEMDlgAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GItemOpenEquipMakeOEMDlgAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GItemOpenEquipMakeOEMDlgAsk::CopyFrom(const PBC2GItemOpenEquipMakeOEMDlgAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GItemOpenEquipMakeOEMDlgAsk::IsInitialized() const {
  
  return true;
}

void PBC2GItemOpenEquipMakeOEMDlgAsk::Swap(PBC2GItemOpenEquipMakeOEMDlgAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GItemOpenEquipMakeOEMDlgAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GItemOpenEquipMakeOEMDlgAsk_descriptor_;
  metadata.reflection = PBC2GItemOpenEquipMakeOEMDlgAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GItemCommitEquipMakeOEMAsk::kOemFieldNumber;
const int PBC2GItemCommitEquipMakeOEMAsk::kIsremovedFieldNumber;
const int PBC2GItemCommitEquipMakeOEMAsk::kIsclearallFieldNumber;
#endif  // !_MSC_VER

PBC2GItemCommitEquipMakeOEMAsk::PBC2GItemCommitEquipMakeOEMAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GItemCommitEquipMakeOEMAsk::InitAsDefaultInstance() {
  oem_ = const_cast< ::PBEquipMakeOEM*>(&::PBEquipMakeOEM::default_instance());
}

PBC2GItemCommitEquipMakeOEMAsk::PBC2GItemCommitEquipMakeOEMAsk(const PBC2GItemCommitEquipMakeOEMAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GItemCommitEquipMakeOEMAsk::SharedCtor() {
  _cached_size_ = 0;
  oem_ = NULL;
  isremoved_ = false;
  isclearall_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GItemCommitEquipMakeOEMAsk::~PBC2GItemCommitEquipMakeOEMAsk() {
  SharedDtor();
}

void PBC2GItemCommitEquipMakeOEMAsk::SharedDtor() {
  if (this != default_instance_) {
    delete oem_;
  }
}

void PBC2GItemCommitEquipMakeOEMAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GItemCommitEquipMakeOEMAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GItemCommitEquipMakeOEMAsk_descriptor_;
}

const PBC2GItemCommitEquipMakeOEMAsk& PBC2GItemCommitEquipMakeOEMAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GItemCommitEquipMakeOEMAsk* PBC2GItemCommitEquipMakeOEMAsk::default_instance_ = NULL;

PBC2GItemCommitEquipMakeOEMAsk* PBC2GItemCommitEquipMakeOEMAsk::New() const {
  return new PBC2GItemCommitEquipMakeOEMAsk;
}

void PBC2GItemCommitEquipMakeOEMAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_oem()) {
      if (oem_ != NULL) oem_->::PBEquipMakeOEM::Clear();
    }
    isremoved_ = false;
    isclearall_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GItemCommitEquipMakeOEMAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBEquipMakeOEM oem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isremoved;
        break;
      }
      
      // optional bool isremoved = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isremoved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isremoved_)));
          set_has_isremoved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isclearall;
        break;
      }
      
      // optional bool isclearall = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isclearall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isclearall_)));
          set_has_isclearall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GItemCommitEquipMakeOEMAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBEquipMakeOEM oem = 1;
  if (has_oem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->oem(), output);
  }
  
  // optional bool isremoved = 2;
  if (has_isremoved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isremoved(), output);
  }
  
  // optional bool isclearall = 3;
  if (has_isclearall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isclearall(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GItemCommitEquipMakeOEMAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBEquipMakeOEM oem = 1;
  if (has_oem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->oem(), target);
  }
  
  // optional bool isremoved = 2;
  if (has_isremoved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isremoved(), target);
  }
  
  // optional bool isclearall = 3;
  if (has_isclearall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isclearall(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GItemCommitEquipMakeOEMAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBEquipMakeOEM oem = 1;
    if (has_oem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oem());
    }
    
    // optional bool isremoved = 2;
    if (has_isremoved()) {
      total_size += 1 + 1;
    }
    
    // optional bool isclearall = 3;
    if (has_isclearall()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GItemCommitEquipMakeOEMAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GItemCommitEquipMakeOEMAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GItemCommitEquipMakeOEMAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GItemCommitEquipMakeOEMAsk::MergeFrom(const PBC2GItemCommitEquipMakeOEMAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oem()) {
      mutable_oem()->::PBEquipMakeOEM::MergeFrom(from.oem());
    }
    if (from.has_isremoved()) {
      set_isremoved(from.isremoved());
    }
    if (from.has_isclearall()) {
      set_isclearall(from.isclearall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GItemCommitEquipMakeOEMAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GItemCommitEquipMakeOEMAsk::CopyFrom(const PBC2GItemCommitEquipMakeOEMAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GItemCommitEquipMakeOEMAsk::IsInitialized() const {
  
  return true;
}

void PBC2GItemCommitEquipMakeOEMAsk::Swap(PBC2GItemCommitEquipMakeOEMAsk* other) {
  if (other != this) {
    std::swap(oem_, other->oem_);
    std::swap(isremoved_, other->isremoved_);
    std::swap(isclearall_, other->isclearall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GItemCommitEquipMakeOEMAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GItemCommitEquipMakeOEMAsk_descriptor_;
  metadata.reflection = PBC2GItemCommitEquipMakeOEMAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GItemVisitEquipMakeOEMAsk::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

PBC2GItemVisitEquipMakeOEMAsk::PBC2GItemVisitEquipMakeOEMAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GItemVisitEquipMakeOEMAsk::InitAsDefaultInstance() {
}

PBC2GItemVisitEquipMakeOEMAsk::PBC2GItemVisitEquipMakeOEMAsk(const PBC2GItemVisitEquipMakeOEMAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GItemVisitEquipMakeOEMAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GItemVisitEquipMakeOEMAsk::~PBC2GItemVisitEquipMakeOEMAsk() {
  SharedDtor();
}

void PBC2GItemVisitEquipMakeOEMAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GItemVisitEquipMakeOEMAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GItemVisitEquipMakeOEMAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GItemVisitEquipMakeOEMAsk_descriptor_;
}

const PBC2GItemVisitEquipMakeOEMAsk& PBC2GItemVisitEquipMakeOEMAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GItemVisitEquipMakeOEMAsk* PBC2GItemVisitEquipMakeOEMAsk::default_instance_ = NULL;

PBC2GItemVisitEquipMakeOEMAsk* PBC2GItemVisitEquipMakeOEMAsk::New() const {
  return new PBC2GItemVisitEquipMakeOEMAsk;
}

void PBC2GItemVisitEquipMakeOEMAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GItemVisitEquipMakeOEMAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GItemVisitEquipMakeOEMAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GItemVisitEquipMakeOEMAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GItemVisitEquipMakeOEMAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GItemVisitEquipMakeOEMAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GItemVisitEquipMakeOEMAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GItemVisitEquipMakeOEMAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GItemVisitEquipMakeOEMAsk::MergeFrom(const PBC2GItemVisitEquipMakeOEMAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GItemVisitEquipMakeOEMAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GItemVisitEquipMakeOEMAsk::CopyFrom(const PBC2GItemVisitEquipMakeOEMAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GItemVisitEquipMakeOEMAsk::IsInitialized() const {
  
  return true;
}

void PBC2GItemVisitEquipMakeOEMAsk::Swap(PBC2GItemVisitEquipMakeOEMAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GItemVisitEquipMakeOEMAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GItemVisitEquipMakeOEMAsk_descriptor_;
  metadata.reflection = PBC2GItemVisitEquipMakeOEMAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CItemOpenEquipMakeOEMDlgAck::kOemFieldNumber;
const int PBG2CItemOpenEquipMakeOEMDlgAck::kVigourFieldNumber;
const int PBG2CItemOpenEquipMakeOEMDlgAck::kVigourMaxFieldNumber;
#endif  // !_MSC_VER

PBG2CItemOpenEquipMakeOEMDlgAck::PBG2CItemOpenEquipMakeOEMDlgAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CItemOpenEquipMakeOEMDlgAck::InitAsDefaultInstance() {
}

PBG2CItemOpenEquipMakeOEMDlgAck::PBG2CItemOpenEquipMakeOEMDlgAck(const PBG2CItemOpenEquipMakeOEMDlgAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CItemOpenEquipMakeOEMDlgAck::SharedCtor() {
  _cached_size_ = 0;
  vigour_ = 0u;
  vigourmax_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CItemOpenEquipMakeOEMDlgAck::~PBG2CItemOpenEquipMakeOEMDlgAck() {
  SharedDtor();
}

void PBG2CItemOpenEquipMakeOEMDlgAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CItemOpenEquipMakeOEMDlgAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CItemOpenEquipMakeOEMDlgAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CItemOpenEquipMakeOEMDlgAck_descriptor_;
}

const PBG2CItemOpenEquipMakeOEMDlgAck& PBG2CItemOpenEquipMakeOEMDlgAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CItemOpenEquipMakeOEMDlgAck* PBG2CItemOpenEquipMakeOEMDlgAck::default_instance_ = NULL;

PBG2CItemOpenEquipMakeOEMDlgAck* PBG2CItemOpenEquipMakeOEMDlgAck::New() const {
  return new PBG2CItemOpenEquipMakeOEMDlgAck;
}

void PBG2CItemOpenEquipMakeOEMDlgAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    vigour_ = 0u;
    vigourmax_ = 0u;
  }
  oem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CItemOpenEquipMakeOEMDlgAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBEquipMakeOEM oem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_oem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_oem;
        if (input->ExpectTag(16)) goto parse_vigour;
        break;
      }
      
      // optional uint32 vigour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vigour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vigour_)));
          set_has_vigour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vigourMax;
        break;
      }
      
      // optional uint32 vigourMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vigourMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vigourmax_)));
          set_has_vigourmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CItemOpenEquipMakeOEMDlgAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBEquipMakeOEM oem = 1;
  for (int i = 0; i < this->oem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->oem(i), output);
  }
  
  // optional uint32 vigour = 2;
  if (has_vigour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vigour(), output);
  }
  
  // optional uint32 vigourMax = 3;
  if (has_vigourmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vigourmax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CItemOpenEquipMakeOEMDlgAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBEquipMakeOEM oem = 1;
  for (int i = 0; i < this->oem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->oem(i), target);
  }
  
  // optional uint32 vigour = 2;
  if (has_vigour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vigour(), target);
  }
  
  // optional uint32 vigourMax = 3;
  if (has_vigourmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vigourmax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CItemOpenEquipMakeOEMDlgAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 vigour = 2;
    if (has_vigour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vigour());
    }
    
    // optional uint32 vigourMax = 3;
    if (has_vigourmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vigourmax());
    }
    
  }
  // repeated .PBEquipMakeOEM oem = 1;
  total_size += 1 * this->oem_size();
  for (int i = 0; i < this->oem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->oem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CItemOpenEquipMakeOEMDlgAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CItemOpenEquipMakeOEMDlgAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CItemOpenEquipMakeOEMDlgAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CItemOpenEquipMakeOEMDlgAck::MergeFrom(const PBG2CItemOpenEquipMakeOEMDlgAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  oem_.MergeFrom(from.oem_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_vigour()) {
      set_vigour(from.vigour());
    }
    if (from.has_vigourmax()) {
      set_vigourmax(from.vigourmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CItemOpenEquipMakeOEMDlgAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CItemOpenEquipMakeOEMDlgAck::CopyFrom(const PBG2CItemOpenEquipMakeOEMDlgAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CItemOpenEquipMakeOEMDlgAck::IsInitialized() const {
  
  return true;
}

void PBG2CItemOpenEquipMakeOEMDlgAck::Swap(PBG2CItemOpenEquipMakeOEMDlgAck* other) {
  if (other != this) {
    oem_.Swap(&other->oem_);
    std::swap(vigour_, other->vigour_);
    std::swap(vigourmax_, other->vigourmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CItemOpenEquipMakeOEMDlgAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CItemOpenEquipMakeOEMDlgAck_descriptor_;
  metadata.reflection = PBG2CItemOpenEquipMakeOEMDlgAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CItemCommitEquipMakeOEMAck::PBG2CItemCommitEquipMakeOEMAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CItemCommitEquipMakeOEMAck::InitAsDefaultInstance() {
}

PBG2CItemCommitEquipMakeOEMAck::PBG2CItemCommitEquipMakeOEMAck(const PBG2CItemCommitEquipMakeOEMAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CItemCommitEquipMakeOEMAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CItemCommitEquipMakeOEMAck::~PBG2CItemCommitEquipMakeOEMAck() {
  SharedDtor();
}

void PBG2CItemCommitEquipMakeOEMAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CItemCommitEquipMakeOEMAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CItemCommitEquipMakeOEMAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CItemCommitEquipMakeOEMAck_descriptor_;
}

const PBG2CItemCommitEquipMakeOEMAck& PBG2CItemCommitEquipMakeOEMAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CItemCommitEquipMakeOEMAck* PBG2CItemCommitEquipMakeOEMAck::default_instance_ = NULL;

PBG2CItemCommitEquipMakeOEMAck* PBG2CItemCommitEquipMakeOEMAck::New() const {
  return new PBG2CItemCommitEquipMakeOEMAck;
}

void PBG2CItemCommitEquipMakeOEMAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CItemCommitEquipMakeOEMAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CItemCommitEquipMakeOEMAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CItemCommitEquipMakeOEMAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CItemCommitEquipMakeOEMAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CItemCommitEquipMakeOEMAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CItemCommitEquipMakeOEMAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CItemCommitEquipMakeOEMAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CItemCommitEquipMakeOEMAck::MergeFrom(const PBG2CItemCommitEquipMakeOEMAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CItemCommitEquipMakeOEMAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CItemCommitEquipMakeOEMAck::CopyFrom(const PBG2CItemCommitEquipMakeOEMAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CItemCommitEquipMakeOEMAck::IsInitialized() const {
  
  return true;
}

void PBG2CItemCommitEquipMakeOEMAck::Swap(PBG2CItemCommitEquipMakeOEMAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CItemCommitEquipMakeOEMAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CItemCommitEquipMakeOEMAck_descriptor_;
  metadata.reflection = PBG2CItemCommitEquipMakeOEMAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CItemVisitEquipMakeOEMAck::kOemFieldNumber;
#endif  // !_MSC_VER

PBG2CItemVisitEquipMakeOEMAck::PBG2CItemVisitEquipMakeOEMAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CItemVisitEquipMakeOEMAck::InitAsDefaultInstance() {
}

PBG2CItemVisitEquipMakeOEMAck::PBG2CItemVisitEquipMakeOEMAck(const PBG2CItemVisitEquipMakeOEMAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CItemVisitEquipMakeOEMAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CItemVisitEquipMakeOEMAck::~PBG2CItemVisitEquipMakeOEMAck() {
  SharedDtor();
}

void PBG2CItemVisitEquipMakeOEMAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CItemVisitEquipMakeOEMAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CItemVisitEquipMakeOEMAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CItemVisitEquipMakeOEMAck_descriptor_;
}

const PBG2CItemVisitEquipMakeOEMAck& PBG2CItemVisitEquipMakeOEMAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CItemVisitEquipMakeOEMAck* PBG2CItemVisitEquipMakeOEMAck::default_instance_ = NULL;

PBG2CItemVisitEquipMakeOEMAck* PBG2CItemVisitEquipMakeOEMAck::New() const {
  return new PBG2CItemVisitEquipMakeOEMAck;
}

void PBG2CItemVisitEquipMakeOEMAck::Clear() {
  oem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CItemVisitEquipMakeOEMAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBEquipMakeOEM oem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_oem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_oem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CItemVisitEquipMakeOEMAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBEquipMakeOEM oem = 1;
  for (int i = 0; i < this->oem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->oem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CItemVisitEquipMakeOEMAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBEquipMakeOEM oem = 1;
  for (int i = 0; i < this->oem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->oem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CItemVisitEquipMakeOEMAck::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBEquipMakeOEM oem = 1;
  total_size += 1 * this->oem_size();
  for (int i = 0; i < this->oem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->oem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CItemVisitEquipMakeOEMAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CItemVisitEquipMakeOEMAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CItemVisitEquipMakeOEMAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CItemVisitEquipMakeOEMAck::MergeFrom(const PBG2CItemVisitEquipMakeOEMAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  oem_.MergeFrom(from.oem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CItemVisitEquipMakeOEMAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CItemVisitEquipMakeOEMAck::CopyFrom(const PBG2CItemVisitEquipMakeOEMAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CItemVisitEquipMakeOEMAck::IsInitialized() const {
  
  return true;
}

void PBG2CItemVisitEquipMakeOEMAck::Swap(PBG2CItemVisitEquipMakeOEMAck* other) {
  if (other != this) {
    oem_.Swap(&other->oem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CItemVisitEquipMakeOEMAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CItemVisitEquipMakeOEMAck_descriptor_;
  metadata.reflection = PBG2CItemVisitEquipMakeOEMAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GItemEquipMakeOEMAsk::kMakeIDFieldNumber;
const int PBC2GItemEquipMakeOEMAsk::kMarkFieldNumber;
const int PBC2GItemEquipMakeOEMAsk::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

PBC2GItemEquipMakeOEMAsk::PBC2GItemEquipMakeOEMAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GItemEquipMakeOEMAsk::InitAsDefaultInstance() {
}

PBC2GItemEquipMakeOEMAsk::PBC2GItemEquipMakeOEMAsk(const PBC2GItemEquipMakeOEMAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GItemEquipMakeOEMAsk::SharedCtor() {
  _cached_size_ = 0;
  makeid_ = 0u;
  mark_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GItemEquipMakeOEMAsk::~PBC2GItemEquipMakeOEMAsk() {
  SharedDtor();
}

void PBC2GItemEquipMakeOEMAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GItemEquipMakeOEMAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GItemEquipMakeOEMAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GItemEquipMakeOEMAsk_descriptor_;
}

const PBC2GItemEquipMakeOEMAsk& PBC2GItemEquipMakeOEMAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GItemEquipMakeOEMAsk* PBC2GItemEquipMakeOEMAsk::default_instance_ = NULL;

PBC2GItemEquipMakeOEMAsk* PBC2GItemEquipMakeOEMAsk::New() const {
  return new PBC2GItemEquipMakeOEMAsk;
}

void PBC2GItemEquipMakeOEMAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    makeid_ = 0u;
    mark_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GItemEquipMakeOEMAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 makeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &makeid_)));
          set_has_makeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mark;
        break;
      }
      
      // optional uint32 mark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerID;
        break;
      }
      
      // optional uint32 playerID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GItemEquipMakeOEMAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 makeID = 1;
  if (has_makeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->makeid(), output);
  }
  
  // optional uint32 mark = 2;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mark(), output);
  }
  
  // optional uint32 playerID = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GItemEquipMakeOEMAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 makeID = 1;
  if (has_makeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->makeid(), target);
  }
  
  // optional uint32 mark = 2;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mark(), target);
  }
  
  // optional uint32 playerID = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GItemEquipMakeOEMAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 makeID = 1;
    if (has_makeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->makeid());
    }
    
    // optional uint32 mark = 2;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mark());
    }
    
    // optional uint32 playerID = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GItemEquipMakeOEMAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GItemEquipMakeOEMAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GItemEquipMakeOEMAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GItemEquipMakeOEMAsk::MergeFrom(const PBC2GItemEquipMakeOEMAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_makeid()) {
      set_makeid(from.makeid());
    }
    if (from.has_mark()) {
      set_mark(from.mark());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GItemEquipMakeOEMAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GItemEquipMakeOEMAsk::CopyFrom(const PBC2GItemEquipMakeOEMAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GItemEquipMakeOEMAsk::IsInitialized() const {
  
  return true;
}

void PBC2GItemEquipMakeOEMAsk::Swap(PBC2GItemEquipMakeOEMAsk* other) {
  if (other != this) {
    std::swap(makeid_, other->makeid_);
    std::swap(mark_, other->mark_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GItemEquipMakeOEMAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GItemEquipMakeOEMAsk_descriptor_;
  metadata.reflection = PBC2GItemEquipMakeOEMAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CItemEquipMakeOEMAck::PBG2CItemEquipMakeOEMAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CItemEquipMakeOEMAck::InitAsDefaultInstance() {
}

PBG2CItemEquipMakeOEMAck::PBG2CItemEquipMakeOEMAck(const PBG2CItemEquipMakeOEMAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CItemEquipMakeOEMAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CItemEquipMakeOEMAck::~PBG2CItemEquipMakeOEMAck() {
  SharedDtor();
}

void PBG2CItemEquipMakeOEMAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CItemEquipMakeOEMAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CItemEquipMakeOEMAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CItemEquipMakeOEMAck_descriptor_;
}

const PBG2CItemEquipMakeOEMAck& PBG2CItemEquipMakeOEMAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CItemEquipMakeOEMAck* PBG2CItemEquipMakeOEMAck::default_instance_ = NULL;

PBG2CItemEquipMakeOEMAck* PBG2CItemEquipMakeOEMAck::New() const {
  return new PBG2CItemEquipMakeOEMAck;
}

void PBG2CItemEquipMakeOEMAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CItemEquipMakeOEMAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CItemEquipMakeOEMAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CItemEquipMakeOEMAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CItemEquipMakeOEMAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CItemEquipMakeOEMAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CItemEquipMakeOEMAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CItemEquipMakeOEMAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CItemEquipMakeOEMAck::MergeFrom(const PBG2CItemEquipMakeOEMAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CItemEquipMakeOEMAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CItemEquipMakeOEMAck::CopyFrom(const PBG2CItemEquipMakeOEMAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CItemEquipMakeOEMAck::IsInitialized() const {
  
  return true;
}

void PBG2CItemEquipMakeOEMAck::Swap(PBG2CItemEquipMakeOEMAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CItemEquipMakeOEMAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CItemEquipMakeOEMAck_descriptor_;
  metadata.reflection = PBG2CItemEquipMakeOEMAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GItemEquipChangeOEMFeeAsk::kMakeIDFieldNumber;
const int PBC2GItemEquipChangeOEMFeeAsk::kFeeFieldNumber;
#endif  // !_MSC_VER

PBC2GItemEquipChangeOEMFeeAsk::PBC2GItemEquipChangeOEMFeeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GItemEquipChangeOEMFeeAsk::InitAsDefaultInstance() {
}

PBC2GItemEquipChangeOEMFeeAsk::PBC2GItemEquipChangeOEMFeeAsk(const PBC2GItemEquipChangeOEMFeeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GItemEquipChangeOEMFeeAsk::SharedCtor() {
  _cached_size_ = 0;
  makeid_ = 0u;
  fee_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GItemEquipChangeOEMFeeAsk::~PBC2GItemEquipChangeOEMFeeAsk() {
  SharedDtor();
}

void PBC2GItemEquipChangeOEMFeeAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GItemEquipChangeOEMFeeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GItemEquipChangeOEMFeeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GItemEquipChangeOEMFeeAsk_descriptor_;
}

const PBC2GItemEquipChangeOEMFeeAsk& PBC2GItemEquipChangeOEMFeeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GItemEquipChangeOEMFeeAsk* PBC2GItemEquipChangeOEMFeeAsk::default_instance_ = NULL;

PBC2GItemEquipChangeOEMFeeAsk* PBC2GItemEquipChangeOEMFeeAsk::New() const {
  return new PBC2GItemEquipChangeOEMFeeAsk;
}

void PBC2GItemEquipChangeOEMFeeAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    makeid_ = 0u;
    fee_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GItemEquipChangeOEMFeeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 makeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &makeid_)));
          set_has_makeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fee;
        break;
      }
      
      // optional uint32 fee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fee_)));
          set_has_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GItemEquipChangeOEMFeeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 makeID = 1;
  if (has_makeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->makeid(), output);
  }
  
  // optional uint32 fee = 2;
  if (has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fee(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GItemEquipChangeOEMFeeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 makeID = 1;
  if (has_makeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->makeid(), target);
  }
  
  // optional uint32 fee = 2;
  if (has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fee(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GItemEquipChangeOEMFeeAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 makeID = 1;
    if (has_makeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->makeid());
    }
    
    // optional uint32 fee = 2;
    if (has_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fee());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GItemEquipChangeOEMFeeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GItemEquipChangeOEMFeeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GItemEquipChangeOEMFeeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GItemEquipChangeOEMFeeAsk::MergeFrom(const PBC2GItemEquipChangeOEMFeeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_makeid()) {
      set_makeid(from.makeid());
    }
    if (from.has_fee()) {
      set_fee(from.fee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GItemEquipChangeOEMFeeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GItemEquipChangeOEMFeeAsk::CopyFrom(const PBC2GItemEquipChangeOEMFeeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GItemEquipChangeOEMFeeAsk::IsInitialized() const {
  
  return true;
}

void PBC2GItemEquipChangeOEMFeeAsk::Swap(PBC2GItemEquipChangeOEMFeeAsk* other) {
  if (other != this) {
    std::swap(makeid_, other->makeid_);
    std::swap(fee_, other->fee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GItemEquipChangeOEMFeeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GItemEquipChangeOEMFeeAsk_descriptor_;
  metadata.reflection = PBC2GItemEquipChangeOEMFeeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CItemEquipChangeOEMFeeAck::PBG2CItemEquipChangeOEMFeeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CItemEquipChangeOEMFeeAck::InitAsDefaultInstance() {
}

PBG2CItemEquipChangeOEMFeeAck::PBG2CItemEquipChangeOEMFeeAck(const PBG2CItemEquipChangeOEMFeeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CItemEquipChangeOEMFeeAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CItemEquipChangeOEMFeeAck::~PBG2CItemEquipChangeOEMFeeAck() {
  SharedDtor();
}

void PBG2CItemEquipChangeOEMFeeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CItemEquipChangeOEMFeeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CItemEquipChangeOEMFeeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CItemEquipChangeOEMFeeAck_descriptor_;
}

const PBG2CItemEquipChangeOEMFeeAck& PBG2CItemEquipChangeOEMFeeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CItemEquipChangeOEMFeeAck* PBG2CItemEquipChangeOEMFeeAck::default_instance_ = NULL;

PBG2CItemEquipChangeOEMFeeAck* PBG2CItemEquipChangeOEMFeeAck::New() const {
  return new PBG2CItemEquipChangeOEMFeeAck;
}

void PBG2CItemEquipChangeOEMFeeAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CItemEquipChangeOEMFeeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CItemEquipChangeOEMFeeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CItemEquipChangeOEMFeeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CItemEquipChangeOEMFeeAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CItemEquipChangeOEMFeeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CItemEquipChangeOEMFeeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CItemEquipChangeOEMFeeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CItemEquipChangeOEMFeeAck::MergeFrom(const PBG2CItemEquipChangeOEMFeeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CItemEquipChangeOEMFeeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CItemEquipChangeOEMFeeAck::CopyFrom(const PBG2CItemEquipChangeOEMFeeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CItemEquipChangeOEMFeeAck::IsInitialized() const {
  
  return true;
}

void PBG2CItemEquipChangeOEMFeeAck::Swap(PBG2CItemEquipChangeOEMFeeAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CItemEquipChangeOEMFeeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CItemEquipChangeOEMFeeAck_descriptor_;
  metadata.reflection = PBG2CItemEquipChangeOEMFeeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GQuestAccept::kQuestidFieldNumber;
#endif  // !_MSC_VER

PBC2GQuestAccept::PBC2GQuestAccept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GQuestAccept::InitAsDefaultInstance() {
}

PBC2GQuestAccept::PBC2GQuestAccept(const PBC2GQuestAccept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GQuestAccept::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GQuestAccept::~PBC2GQuestAccept() {
  SharedDtor();
}

void PBC2GQuestAccept::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GQuestAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GQuestAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GQuestAccept_descriptor_;
}

const PBC2GQuestAccept& PBC2GQuestAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GQuestAccept* PBC2GQuestAccept::default_instance_ = NULL;

PBC2GQuestAccept* PBC2GQuestAccept::New() const {
  return new PBC2GQuestAccept;
}

void PBC2GQuestAccept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GQuestAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GQuestAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GQuestAccept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GQuestAccept::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GQuestAccept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GQuestAccept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GQuestAccept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GQuestAccept::MergeFrom(const PBC2GQuestAccept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GQuestAccept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GQuestAccept::CopyFrom(const PBC2GQuestAccept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GQuestAccept::IsInitialized() const {
  
  return true;
}

void PBC2GQuestAccept::Swap(PBC2GQuestAccept* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GQuestAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GQuestAccept_descriptor_;
  metadata.reflection = PBC2GQuestAccept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CQuestAccept::kQuestFieldNumber;
#endif  // !_MSC_VER

PBG2CQuestAccept::PBG2CQuestAccept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CQuestAccept::InitAsDefaultInstance() {
  quest_ = const_cast< ::PBQuest*>(&::PBQuest::default_instance());
}

PBG2CQuestAccept::PBG2CQuestAccept(const PBG2CQuestAccept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CQuestAccept::SharedCtor() {
  _cached_size_ = 0;
  quest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CQuestAccept::~PBG2CQuestAccept() {
  SharedDtor();
}

void PBG2CQuestAccept::SharedDtor() {
  if (this != default_instance_) {
    delete quest_;
  }
}

void PBG2CQuestAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CQuestAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CQuestAccept_descriptor_;
}

const PBG2CQuestAccept& PBG2CQuestAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CQuestAccept* PBG2CQuestAccept::default_instance_ = NULL;

PBG2CQuestAccept* PBG2CQuestAccept::New() const {
  return new PBG2CQuestAccept;
}

void PBG2CQuestAccept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quest()) {
      if (quest_ != NULL) quest_->::PBQuest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CQuestAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBQuest quest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CQuestAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBQuest quest = 1;
  if (has_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quest(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CQuestAccept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBQuest quest = 1;
  if (has_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quest(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CQuestAccept::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBQuest quest = 1;
    if (has_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CQuestAccept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CQuestAccept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CQuestAccept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CQuestAccept::MergeFrom(const PBG2CQuestAccept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest()) {
      mutable_quest()->::PBQuest::MergeFrom(from.quest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CQuestAccept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CQuestAccept::CopyFrom(const PBG2CQuestAccept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CQuestAccept::IsInitialized() const {
  
  return true;
}

void PBG2CQuestAccept::Swap(PBG2CQuestAccept* other) {
  if (other != this) {
    std::swap(quest_, other->quest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CQuestAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CQuestAccept_descriptor_;
  metadata.reflection = PBG2CQuestAccept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GQuestComplete::kQuestidFieldNumber;
#endif  // !_MSC_VER

PBC2GQuestComplete::PBC2GQuestComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GQuestComplete::InitAsDefaultInstance() {
}

PBC2GQuestComplete::PBC2GQuestComplete(const PBC2GQuestComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GQuestComplete::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GQuestComplete::~PBC2GQuestComplete() {
  SharedDtor();
}

void PBC2GQuestComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GQuestComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GQuestComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GQuestComplete_descriptor_;
}

const PBC2GQuestComplete& PBC2GQuestComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GQuestComplete* PBC2GQuestComplete::default_instance_ = NULL;

PBC2GQuestComplete* PBC2GQuestComplete::New() const {
  return new PBC2GQuestComplete;
}

void PBC2GQuestComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GQuestComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GQuestComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GQuestComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GQuestComplete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GQuestComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GQuestComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GQuestComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GQuestComplete::MergeFrom(const PBC2GQuestComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GQuestComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GQuestComplete::CopyFrom(const PBC2GQuestComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GQuestComplete::IsInitialized() const {
  
  return true;
}

void PBC2GQuestComplete::Swap(PBC2GQuestComplete* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GQuestComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GQuestComplete_descriptor_;
  metadata.reflection = PBC2GQuestComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CQuestComplete::kQuestidFieldNumber;
#endif  // !_MSC_VER

PBG2CQuestComplete::PBG2CQuestComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CQuestComplete::InitAsDefaultInstance() {
}

PBG2CQuestComplete::PBG2CQuestComplete(const PBG2CQuestComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CQuestComplete::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CQuestComplete::~PBG2CQuestComplete() {
  SharedDtor();
}

void PBG2CQuestComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CQuestComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CQuestComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CQuestComplete_descriptor_;
}

const PBG2CQuestComplete& PBG2CQuestComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CQuestComplete* PBG2CQuestComplete::default_instance_ = NULL;

PBG2CQuestComplete* PBG2CQuestComplete::New() const {
  return new PBG2CQuestComplete;
}

void PBG2CQuestComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CQuestComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CQuestComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CQuestComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CQuestComplete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CQuestComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CQuestComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CQuestComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CQuestComplete::MergeFrom(const PBG2CQuestComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CQuestComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CQuestComplete::CopyFrom(const PBG2CQuestComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CQuestComplete::IsInitialized() const {
  
  return true;
}

void PBG2CQuestComplete::Swap(PBG2CQuestComplete* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CQuestComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CQuestComplete_descriptor_;
  metadata.reflection = PBG2CQuestComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GQuestUpdateItem::kQuestidFieldNumber;
const int PBC2GQuestUpdateItem::kTaridFieldNumber;
const int PBC2GQuestUpdateItem::kCountFieldNumber;
#endif  // !_MSC_VER

PBC2GQuestUpdateItem::PBC2GQuestUpdateItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GQuestUpdateItem::InitAsDefaultInstance() {
}

PBC2GQuestUpdateItem::PBC2GQuestUpdateItem(const PBC2GQuestUpdateItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GQuestUpdateItem::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  tarid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GQuestUpdateItem::~PBC2GQuestUpdateItem() {
  SharedDtor();
}

void PBC2GQuestUpdateItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GQuestUpdateItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GQuestUpdateItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GQuestUpdateItem_descriptor_;
}

const PBC2GQuestUpdateItem& PBC2GQuestUpdateItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GQuestUpdateItem* PBC2GQuestUpdateItem::default_instance_ = NULL;

PBC2GQuestUpdateItem* PBC2GQuestUpdateItem::New() const {
  return new PBC2GQuestUpdateItem;
}

void PBC2GQuestUpdateItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
    tarid_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GQuestUpdateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tarid;
        break;
      }
      
      // optional uint32 tarid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tarid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tarid_)));
          set_has_tarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GQuestUpdateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }
  
  // optional uint32 tarid = 2;
  if (has_tarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tarid(), output);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GQuestUpdateItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }
  
  // optional uint32 tarid = 2;
  if (has_tarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tarid(), target);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GQuestUpdateItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }
    
    // optional uint32 tarid = 2;
    if (has_tarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tarid());
    }
    
    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GQuestUpdateItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GQuestUpdateItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GQuestUpdateItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GQuestUpdateItem::MergeFrom(const PBC2GQuestUpdateItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_tarid()) {
      set_tarid(from.tarid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GQuestUpdateItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GQuestUpdateItem::CopyFrom(const PBC2GQuestUpdateItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GQuestUpdateItem::IsInitialized() const {
  
  return true;
}

void PBC2GQuestUpdateItem::Swap(PBC2GQuestUpdateItem* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(tarid_, other->tarid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GQuestUpdateItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GQuestUpdateItem_descriptor_;
  metadata.reflection = PBC2GQuestUpdateItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CQuestUpdateItem::kQuestidFieldNumber;
const int PBG2CQuestUpdateItem::kTaridFieldNumber;
const int PBG2CQuestUpdateItem::kCountFieldNumber;
#endif  // !_MSC_VER

PBG2CQuestUpdateItem::PBG2CQuestUpdateItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CQuestUpdateItem::InitAsDefaultInstance() {
}

PBG2CQuestUpdateItem::PBG2CQuestUpdateItem(const PBG2CQuestUpdateItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CQuestUpdateItem::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  tarid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CQuestUpdateItem::~PBG2CQuestUpdateItem() {
  SharedDtor();
}

void PBG2CQuestUpdateItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CQuestUpdateItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CQuestUpdateItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CQuestUpdateItem_descriptor_;
}

const PBG2CQuestUpdateItem& PBG2CQuestUpdateItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CQuestUpdateItem* PBG2CQuestUpdateItem::default_instance_ = NULL;

PBG2CQuestUpdateItem* PBG2CQuestUpdateItem::New() const {
  return new PBG2CQuestUpdateItem;
}

void PBG2CQuestUpdateItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
    tarid_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CQuestUpdateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tarid;
        break;
      }
      
      // optional uint32 tarid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tarid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tarid_)));
          set_has_tarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CQuestUpdateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }
  
  // optional uint32 tarid = 2;
  if (has_tarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tarid(), output);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CQuestUpdateItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }
  
  // optional uint32 tarid = 2;
  if (has_tarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tarid(), target);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CQuestUpdateItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }
    
    // optional uint32 tarid = 2;
    if (has_tarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tarid());
    }
    
    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CQuestUpdateItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CQuestUpdateItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CQuestUpdateItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CQuestUpdateItem::MergeFrom(const PBG2CQuestUpdateItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_tarid()) {
      set_tarid(from.tarid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CQuestUpdateItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CQuestUpdateItem::CopyFrom(const PBG2CQuestUpdateItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CQuestUpdateItem::IsInitialized() const {
  
  return true;
}

void PBG2CQuestUpdateItem::Swap(PBG2CQuestUpdateItem* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(tarid_, other->tarid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CQuestUpdateItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CQuestUpdateItem_descriptor_;
  metadata.reflection = PBG2CQuestUpdateItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GQuestGiveUp::kQuestidFieldNumber;
#endif  // !_MSC_VER

PBC2GQuestGiveUp::PBC2GQuestGiveUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GQuestGiveUp::InitAsDefaultInstance() {
}

PBC2GQuestGiveUp::PBC2GQuestGiveUp(const PBC2GQuestGiveUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GQuestGiveUp::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GQuestGiveUp::~PBC2GQuestGiveUp() {
  SharedDtor();
}

void PBC2GQuestGiveUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GQuestGiveUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GQuestGiveUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GQuestGiveUp_descriptor_;
}

const PBC2GQuestGiveUp& PBC2GQuestGiveUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GQuestGiveUp* PBC2GQuestGiveUp::default_instance_ = NULL;

PBC2GQuestGiveUp* PBC2GQuestGiveUp::New() const {
  return new PBC2GQuestGiveUp;
}

void PBC2GQuestGiveUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GQuestGiveUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GQuestGiveUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GQuestGiveUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GQuestGiveUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GQuestGiveUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GQuestGiveUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GQuestGiveUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GQuestGiveUp::MergeFrom(const PBC2GQuestGiveUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GQuestGiveUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GQuestGiveUp::CopyFrom(const PBC2GQuestGiveUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GQuestGiveUp::IsInitialized() const {
  
  return true;
}

void PBC2GQuestGiveUp::Swap(PBC2GQuestGiveUp* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GQuestGiveUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GQuestGiveUp_descriptor_;
  metadata.reflection = PBC2GQuestGiveUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CQuestGiveUp::kQuestidFieldNumber;
#endif  // !_MSC_VER

PBG2CQuestGiveUp::PBG2CQuestGiveUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CQuestGiveUp::InitAsDefaultInstance() {
}

PBG2CQuestGiveUp::PBG2CQuestGiveUp(const PBG2CQuestGiveUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CQuestGiveUp::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CQuestGiveUp::~PBG2CQuestGiveUp() {
  SharedDtor();
}

void PBG2CQuestGiveUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CQuestGiveUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CQuestGiveUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CQuestGiveUp_descriptor_;
}

const PBG2CQuestGiveUp& PBG2CQuestGiveUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CQuestGiveUp* PBG2CQuestGiveUp::default_instance_ = NULL;

PBG2CQuestGiveUp* PBG2CQuestGiveUp::New() const {
  return new PBG2CQuestGiveUp;
}

void PBG2CQuestGiveUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CQuestGiveUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CQuestGiveUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CQuestGiveUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CQuestGiveUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CQuestGiveUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CQuestGiveUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CQuestGiveUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CQuestGiveUp::MergeFrom(const PBG2CQuestGiveUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CQuestGiveUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CQuestGiveUp::CopyFrom(const PBG2CQuestGiveUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CQuestGiveUp::IsInitialized() const {
  
  return true;
}

void PBG2CQuestGiveUp::Swap(PBG2CQuestGiveUp* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CQuestGiveUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CQuestGiveUp_descriptor_;
  metadata.reflection = PBG2CQuestGiveUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GStoreBuy::kStoretypeFieldNumber;
const int PBC2GStoreBuy::kGoodsindexFieldNumber;
const int PBC2GStoreBuy::kCountFieldNumber;
const int PBC2GStoreBuy::kFriendidFieldNumber;
#endif  // !_MSC_VER

PBC2GStoreBuy::PBC2GStoreBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GStoreBuy::InitAsDefaultInstance() {
}

PBC2GStoreBuy::PBC2GStoreBuy(const PBC2GStoreBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GStoreBuy::SharedCtor() {
  _cached_size_ = 0;
  storetype_ = 0u;
  goodsindex_ = 0u;
  count_ = 0u;
  friendid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GStoreBuy::~PBC2GStoreBuy() {
  SharedDtor();
}

void PBC2GStoreBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GStoreBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GStoreBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GStoreBuy_descriptor_;
}

const PBC2GStoreBuy& PBC2GStoreBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GStoreBuy* PBC2GStoreBuy::default_instance_ = NULL;

PBC2GStoreBuy* PBC2GStoreBuy::New() const {
  return new PBC2GStoreBuy;
}

void PBC2GStoreBuy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storetype_ = 0u;
    goodsindex_ = 0u;
    count_ = 0u;
    friendid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GStoreBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 storetype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storetype_)));
          set_has_storetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goodsindex;
        break;
      }
      
      // optional uint32 goodsindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsindex_)));
          set_has_goodsindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_friendid;
        break;
      }
      
      // optional uint32 friendid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GStoreBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 storetype = 1;
  if (has_storetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->storetype(), output);
  }
  
  // optional uint32 goodsindex = 2;
  if (has_goodsindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goodsindex(), output);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  // optional uint32 friendid = 4;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->friendid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GStoreBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 storetype = 1;
  if (has_storetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->storetype(), target);
  }
  
  // optional uint32 goodsindex = 2;
  if (has_goodsindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goodsindex(), target);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  // optional uint32 friendid = 4;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->friendid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GStoreBuy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 storetype = 1;
    if (has_storetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storetype());
    }
    
    // optional uint32 goodsindex = 2;
    if (has_goodsindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsindex());
    }
    
    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 friendid = 4;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GStoreBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GStoreBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GStoreBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GStoreBuy::MergeFrom(const PBC2GStoreBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storetype()) {
      set_storetype(from.storetype());
    }
    if (from.has_goodsindex()) {
      set_goodsindex(from.goodsindex());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GStoreBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GStoreBuy::CopyFrom(const PBC2GStoreBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GStoreBuy::IsInitialized() const {
  
  return true;
}

void PBC2GStoreBuy::Swap(PBC2GStoreBuy* other) {
  if (other != this) {
    std::swap(storetype_, other->storetype_);
    std::swap(goodsindex_, other->goodsindex_);
    std::swap(count_, other->count_);
    std::swap(friendid_, other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GStoreBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GStoreBuy_descriptor_;
  metadata.reflection = PBC2GStoreBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CStoreBuy::kStoretypeFieldNumber;
const int PBG2CStoreBuy::kGoodsindexFieldNumber;
const int PBG2CStoreBuy::kCountFieldNumber;
const int PBG2CStoreBuy::kTimeFieldNumber;
const int PBG2CStoreBuy::kScoreFieldNumber;
const int PBG2CStoreBuy::kIsGiftFieldNumber;
#endif  // !_MSC_VER

PBG2CStoreBuy::PBG2CStoreBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CStoreBuy::InitAsDefaultInstance() {
}

PBG2CStoreBuy::PBG2CStoreBuy(const PBG2CStoreBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CStoreBuy::SharedCtor() {
  _cached_size_ = 0;
  storetype_ = 0u;
  goodsindex_ = 0u;
  count_ = 0u;
  time_ = 0u;
  score_ = 0u;
  isgift_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CStoreBuy::~PBG2CStoreBuy() {
  SharedDtor();
}

void PBG2CStoreBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CStoreBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CStoreBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CStoreBuy_descriptor_;
}

const PBG2CStoreBuy& PBG2CStoreBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CStoreBuy* PBG2CStoreBuy::default_instance_ = NULL;

PBG2CStoreBuy* PBG2CStoreBuy::New() const {
  return new PBG2CStoreBuy;
}

void PBG2CStoreBuy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storetype_ = 0u;
    goodsindex_ = 0u;
    count_ = 0u;
    time_ = 0u;
    score_ = 0u;
    isgift_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CStoreBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 storetype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storetype_)));
          set_has_storetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goodsindex;
        break;
      }
      
      // optional uint32 goodsindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsindex_)));
          set_has_goodsindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }
      
      // optional uint32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isGift;
        break;
      }
      
      // optional uint32 isGift = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isgift_)));
          set_has_isgift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CStoreBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 storetype = 1;
  if (has_storetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->storetype(), output);
  }
  
  // optional uint32 goodsindex = 2;
  if (has_goodsindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goodsindex(), output);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }
  
  // optional uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }
  
  // optional uint32 isGift = 6;
  if (has_isgift()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isgift(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CStoreBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 storetype = 1;
  if (has_storetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->storetype(), target);
  }
  
  // optional uint32 goodsindex = 2;
  if (has_goodsindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goodsindex(), target);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }
  
  // optional uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }
  
  // optional uint32 isGift = 6;
  if (has_isgift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isgift(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CStoreBuy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 storetype = 1;
    if (has_storetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storetype());
    }
    
    // optional uint32 goodsindex = 2;
    if (has_goodsindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsindex());
    }
    
    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
    // optional uint32 isGift = 6;
    if (has_isgift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isgift());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CStoreBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CStoreBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CStoreBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CStoreBuy::MergeFrom(const PBG2CStoreBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storetype()) {
      set_storetype(from.storetype());
    }
    if (from.has_goodsindex()) {
      set_goodsindex(from.goodsindex());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_isgift()) {
      set_isgift(from.isgift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CStoreBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CStoreBuy::CopyFrom(const PBG2CStoreBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CStoreBuy::IsInitialized() const {
  
  return true;
}

void PBG2CStoreBuy::Swap(PBG2CStoreBuy* other) {
  if (other != this) {
    std::swap(storetype_, other->storetype_);
    std::swap(goodsindex_, other->goodsindex_);
    std::swap(count_, other->count_);
    std::swap(time_, other->time_);
    std::swap(score_, other->score_);
    std::swap(isgift_, other->isgift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CStoreBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CStoreBuy_descriptor_;
  metadata.reflection = PBG2CStoreBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CExpendSyn::kExpendtypeFieldNumber;
const int PBG2CExpendSyn::kValueFieldNumber;
#endif  // !_MSC_VER

PBG2CExpendSyn::PBG2CExpendSyn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CExpendSyn::InitAsDefaultInstance() {
}

PBG2CExpendSyn::PBG2CExpendSyn(const PBG2CExpendSyn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CExpendSyn::SharedCtor() {
  _cached_size_ = 0;
  expendtype_ = 0u;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CExpendSyn::~PBG2CExpendSyn() {
  SharedDtor();
}

void PBG2CExpendSyn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CExpendSyn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CExpendSyn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CExpendSyn_descriptor_;
}

const PBG2CExpendSyn& PBG2CExpendSyn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CExpendSyn* PBG2CExpendSyn::default_instance_ = NULL;

PBG2CExpendSyn* PBG2CExpendSyn::New() const {
  return new PBG2CExpendSyn;
}

void PBG2CExpendSyn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expendtype_ = 0u;
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CExpendSyn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expendtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expendtype_)));
          set_has_expendtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CExpendSyn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expendtype = 1;
  if (has_expendtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expendtype(), output);
  }
  
  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CExpendSyn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expendtype = 1;
  if (has_expendtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expendtype(), target);
  }
  
  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CExpendSyn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expendtype = 1;
    if (has_expendtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expendtype());
    }
    
    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CExpendSyn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CExpendSyn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CExpendSyn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CExpendSyn::MergeFrom(const PBG2CExpendSyn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expendtype()) {
      set_expendtype(from.expendtype());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CExpendSyn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CExpendSyn::CopyFrom(const PBG2CExpendSyn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CExpendSyn::IsInitialized() const {
  
  return true;
}

void PBG2CExpendSyn::Swap(PBG2CExpendSyn* other) {
  if (other != this) {
    std::swap(expendtype_, other->expendtype_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CExpendSyn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CExpendSyn_descriptor_;
  metadata.reflection = PBG2CExpendSyn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CAddHp::kObjectidFieldNumber;
const int PBG2CAddHp::kAddvalueFieldNumber;
#endif  // !_MSC_VER

PBG2CAddHp::PBG2CAddHp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CAddHp::InitAsDefaultInstance() {
}

PBG2CAddHp::PBG2CAddHp(const PBG2CAddHp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CAddHp::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0u;
  addvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CAddHp::~PBG2CAddHp() {
  SharedDtor();
}

void PBG2CAddHp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CAddHp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CAddHp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CAddHp_descriptor_;
}

const PBG2CAddHp& PBG2CAddHp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CAddHp* PBG2CAddHp::default_instance_ = NULL;

PBG2CAddHp* PBG2CAddHp::New() const {
  return new PBG2CAddHp;
}

void PBG2CAddHp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0u;
    addvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CAddHp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addvalue;
        break;
      }
      
      // optional int32 addvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addvalue_)));
          set_has_addvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CAddHp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->objectid(), output);
  }
  
  // optional int32 addvalue = 2;
  if (has_addvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CAddHp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->objectid(), target);
  }
  
  // optional int32 addvalue = 2;
  if (has_addvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CAddHp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objectid());
    }
    
    // optional int32 addvalue = 2;
    if (has_addvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CAddHp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CAddHp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CAddHp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CAddHp::MergeFrom(const PBG2CAddHp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_addvalue()) {
      set_addvalue(from.addvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CAddHp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CAddHp::CopyFrom(const PBG2CAddHp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CAddHp::IsInitialized() const {
  
  return true;
}

void PBG2CAddHp::Swap(PBG2CAddHp* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(addvalue_, other->addvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CAddHp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CAddHp_descriptor_;
  metadata.reflection = PBG2CAddHp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CAddExp::kExpvalueFieldNumber;
#endif  // !_MSC_VER

PBG2CAddExp::PBG2CAddExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CAddExp::InitAsDefaultInstance() {
}

PBG2CAddExp::PBG2CAddExp(const PBG2CAddExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CAddExp::SharedCtor() {
  _cached_size_ = 0;
  expvalue_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CAddExp::~PBG2CAddExp() {
  SharedDtor();
}

void PBG2CAddExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CAddExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CAddExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CAddExp_descriptor_;
}

const PBG2CAddExp& PBG2CAddExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CAddExp* PBG2CAddExp::default_instance_ = NULL;

PBG2CAddExp* PBG2CAddExp::New() const {
  return new PBG2CAddExp;
}

void PBG2CAddExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expvalue_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CAddExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 expvalue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expvalue_)));
          set_has_expvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CAddExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 expvalue = 1;
  if (has_expvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->expvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CAddExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 expvalue = 1;
  if (has_expvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->expvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CAddExp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 expvalue = 1;
    if (has_expvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CAddExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CAddExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CAddExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CAddExp::MergeFrom(const PBG2CAddExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expvalue()) {
      set_expvalue(from.expvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CAddExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CAddExp::CopyFrom(const PBG2CAddExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CAddExp::IsInitialized() const {
  
  return true;
}

void PBG2CAddExp::Swap(PBG2CAddExp* other) {
  if (other != this) {
    std::swap(expvalue_, other->expvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CAddExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CAddExp_descriptor_;
  metadata.reflection = PBG2CAddExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CClearData::kTypeFieldNumber;
#endif  // !_MSC_VER

PBG2CClearData::PBG2CClearData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CClearData::InitAsDefaultInstance() {
}

PBG2CClearData::PBG2CClearData(const PBG2CClearData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CClearData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CClearData::~PBG2CClearData() {
  SharedDtor();
}

void PBG2CClearData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CClearData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CClearData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CClearData_descriptor_;
}

const PBG2CClearData& PBG2CClearData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CClearData* PBG2CClearData::default_instance_ = NULL;

PBG2CClearData* PBG2CClearData::New() const {
  return new PBG2CClearData;
}

void PBG2CClearData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CClearData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CClearData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CClearData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CClearData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CClearData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CClearData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CClearData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CClearData::MergeFrom(const PBG2CClearData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CClearData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CClearData::CopyFrom(const PBG2CClearData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CClearData::IsInitialized() const {
  
  return true;
}

void PBG2CClearData::Swap(PBG2CClearData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CClearData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CClearData_descriptor_;
  metadata.reflection = PBG2CClearData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CAddLevel::kObjectidFieldNumber;
const int PBG2CAddLevel::kLevelFieldNumber;
#endif  // !_MSC_VER

PBG2CAddLevel::PBG2CAddLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CAddLevel::InitAsDefaultInstance() {
}

PBG2CAddLevel::PBG2CAddLevel(const PBG2CAddLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CAddLevel::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CAddLevel::~PBG2CAddLevel() {
  SharedDtor();
}

void PBG2CAddLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CAddLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CAddLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CAddLevel_descriptor_;
}

const PBG2CAddLevel& PBG2CAddLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CAddLevel* PBG2CAddLevel::default_instance_ = NULL;

PBG2CAddLevel* PBG2CAddLevel::New() const {
  return new PBG2CAddLevel;
}

void PBG2CAddLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CAddLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CAddLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->objectid(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CAddLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->objectid(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CAddLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objectid());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CAddLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CAddLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CAddLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CAddLevel::MergeFrom(const PBG2CAddLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CAddLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CAddLevel::CopyFrom(const PBG2CAddLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CAddLevel::IsInitialized() const {
  
  return true;
}

void PBG2CAddLevel::Swap(PBG2CAddLevel* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CAddLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CAddLevel_descriptor_;
  metadata.reflection = PBG2CAddLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GPrizeAccept::kPrizesnFieldNumber;
#endif  // !_MSC_VER

PBC2GPrizeAccept::PBC2GPrizeAccept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GPrizeAccept::InitAsDefaultInstance() {
}

PBC2GPrizeAccept::PBC2GPrizeAccept(const PBC2GPrizeAccept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GPrizeAccept::SharedCtor() {
  _cached_size_ = 0;
  prizesn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GPrizeAccept::~PBC2GPrizeAccept() {
  SharedDtor();
}

void PBC2GPrizeAccept::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GPrizeAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GPrizeAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GPrizeAccept_descriptor_;
}

const PBC2GPrizeAccept& PBC2GPrizeAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GPrizeAccept* PBC2GPrizeAccept::default_instance_ = NULL;

PBC2GPrizeAccept* PBC2GPrizeAccept::New() const {
  return new PBC2GPrizeAccept;
}

void PBC2GPrizeAccept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prizesn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GPrizeAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 prizesn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prizesn_)));
          set_has_prizesn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GPrizeAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 prizesn = 1;
  if (has_prizesn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->prizesn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GPrizeAccept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 prizesn = 1;
  if (has_prizesn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->prizesn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GPrizeAccept::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 prizesn = 1;
    if (has_prizesn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prizesn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GPrizeAccept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GPrizeAccept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GPrizeAccept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GPrizeAccept::MergeFrom(const PBC2GPrizeAccept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prizesn()) {
      set_prizesn(from.prizesn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GPrizeAccept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GPrizeAccept::CopyFrom(const PBC2GPrizeAccept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GPrizeAccept::IsInitialized() const {
  
  return true;
}

void PBC2GPrizeAccept::Swap(PBC2GPrizeAccept* other) {
  if (other != this) {
    std::swap(prizesn_, other->prizesn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GPrizeAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GPrizeAccept_descriptor_;
  metadata.reflection = PBC2GPrizeAccept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GPrizeAbandon::kPrizesnFieldNumber;
#endif  // !_MSC_VER

PBC2GPrizeAbandon::PBC2GPrizeAbandon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GPrizeAbandon::InitAsDefaultInstance() {
}

PBC2GPrizeAbandon::PBC2GPrizeAbandon(const PBC2GPrizeAbandon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GPrizeAbandon::SharedCtor() {
  _cached_size_ = 0;
  prizesn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GPrizeAbandon::~PBC2GPrizeAbandon() {
  SharedDtor();
}

void PBC2GPrizeAbandon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GPrizeAbandon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GPrizeAbandon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GPrizeAbandon_descriptor_;
}

const PBC2GPrizeAbandon& PBC2GPrizeAbandon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GPrizeAbandon* PBC2GPrizeAbandon::default_instance_ = NULL;

PBC2GPrizeAbandon* PBC2GPrizeAbandon::New() const {
  return new PBC2GPrizeAbandon;
}

void PBC2GPrizeAbandon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prizesn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GPrizeAbandon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 prizesn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prizesn_)));
          set_has_prizesn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GPrizeAbandon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 prizesn = 1;
  if (has_prizesn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->prizesn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GPrizeAbandon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 prizesn = 1;
  if (has_prizesn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->prizesn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GPrizeAbandon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 prizesn = 1;
    if (has_prizesn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prizesn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GPrizeAbandon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GPrizeAbandon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GPrizeAbandon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GPrizeAbandon::MergeFrom(const PBC2GPrizeAbandon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prizesn()) {
      set_prizesn(from.prizesn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GPrizeAbandon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GPrizeAbandon::CopyFrom(const PBC2GPrizeAbandon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GPrizeAbandon::IsInitialized() const {
  
  return true;
}

void PBC2GPrizeAbandon::Swap(PBC2GPrizeAbandon* other) {
  if (other != this) {
    std::swap(prizesn_, other->prizesn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GPrizeAbandon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GPrizeAbandon_descriptor_;
  metadata.reflection = PBC2GPrizeAbandon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CPrizeNew::kPrizeFieldNumber;
#endif  // !_MSC_VER

PBG2CPrizeNew::PBG2CPrizeNew()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CPrizeNew::InitAsDefaultInstance() {
  prize_ = const_cast< ::PBPrize*>(&::PBPrize::default_instance());
}

PBG2CPrizeNew::PBG2CPrizeNew(const PBG2CPrizeNew& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CPrizeNew::SharedCtor() {
  _cached_size_ = 0;
  prize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CPrizeNew::~PBG2CPrizeNew() {
  SharedDtor();
}

void PBG2CPrizeNew::SharedDtor() {
  if (this != default_instance_) {
    delete prize_;
  }
}

void PBG2CPrizeNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CPrizeNew::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CPrizeNew_descriptor_;
}

const PBG2CPrizeNew& PBG2CPrizeNew::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CPrizeNew* PBG2CPrizeNew::default_instance_ = NULL;

PBG2CPrizeNew* PBG2CPrizeNew::New() const {
  return new PBG2CPrizeNew;
}

void PBG2CPrizeNew::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_prize()) {
      if (prize_ != NULL) prize_->::PBPrize::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CPrizeNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPrize prize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CPrizeNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPrize prize = 1;
  if (has_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CPrizeNew::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPrize prize = 1;
  if (has_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CPrizeNew::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPrize prize = 1;
    if (has_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prize());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CPrizeNew::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CPrizeNew* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CPrizeNew*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CPrizeNew::MergeFrom(const PBG2CPrizeNew& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prize()) {
      mutable_prize()->::PBPrize::MergeFrom(from.prize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CPrizeNew::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CPrizeNew::CopyFrom(const PBG2CPrizeNew& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CPrizeNew::IsInitialized() const {
  
  return true;
}

void PBG2CPrizeNew::Swap(PBG2CPrizeNew* other) {
  if (other != this) {
    std::swap(prize_, other->prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CPrizeNew::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CPrizeNew_descriptor_;
  metadata.reflection = PBG2CPrizeNew_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTrade_apply::kTargetidFieldNumber;
#endif  // !_MSC_VER

PBC2GTrade_apply::PBC2GTrade_apply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTrade_apply::InitAsDefaultInstance() {
}

PBC2GTrade_apply::PBC2GTrade_apply(const PBC2GTrade_apply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTrade_apply::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTrade_apply::~PBC2GTrade_apply() {
  SharedDtor();
}

void PBC2GTrade_apply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTrade_apply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTrade_apply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTrade_apply_descriptor_;
}

const PBC2GTrade_apply& PBC2GTrade_apply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GTrade_apply* PBC2GTrade_apply::default_instance_ = NULL;

PBC2GTrade_apply* PBC2GTrade_apply::New() const {
  return new PBC2GTrade_apply;
}

void PBC2GTrade_apply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTrade_apply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 targetid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTrade_apply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTrade_apply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTrade_apply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 targetid = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTrade_apply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTrade_apply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTrade_apply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTrade_apply::MergeFrom(const PBC2GTrade_apply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTrade_apply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTrade_apply::CopyFrom(const PBC2GTrade_apply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTrade_apply::IsInitialized() const {
  
  return true;
}

void PBC2GTrade_apply::Swap(PBC2GTrade_apply* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTrade_apply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTrade_apply_descriptor_;
  metadata.reflection = PBC2GTrade_apply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTrade_answer::kApplyidFieldNumber;
const int PBC2GTrade_answer::kOkFieldNumber;
#endif  // !_MSC_VER

PBC2GTrade_answer::PBC2GTrade_answer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTrade_answer::InitAsDefaultInstance() {
}

PBC2GTrade_answer::PBC2GTrade_answer(const PBC2GTrade_answer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTrade_answer::SharedCtor() {
  _cached_size_ = 0;
  applyid_ = 0u;
  ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTrade_answer::~PBC2GTrade_answer() {
  SharedDtor();
}

void PBC2GTrade_answer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTrade_answer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTrade_answer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTrade_answer_descriptor_;
}

const PBC2GTrade_answer& PBC2GTrade_answer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GTrade_answer* PBC2GTrade_answer::default_instance_ = NULL;

PBC2GTrade_answer* PBC2GTrade_answer::New() const {
  return new PBC2GTrade_answer;
}

void PBC2GTrade_answer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    applyid_ = 0u;
    ok_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTrade_answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 applyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applyid_)));
          set_has_applyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ok;
        break;
      }
      
      // optional bool ok = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
          set_has_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTrade_answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 applyid = 1;
  if (has_applyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->applyid(), output);
  }
  
  // optional bool ok = 2;
  if (has_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ok(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTrade_answer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 applyid = 1;
  if (has_applyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->applyid(), target);
  }
  
  // optional bool ok = 2;
  if (has_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ok(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTrade_answer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 applyid = 1;
    if (has_applyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applyid());
    }
    
    // optional bool ok = 2;
    if (has_ok()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTrade_answer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTrade_answer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTrade_answer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTrade_answer::MergeFrom(const PBC2GTrade_answer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applyid()) {
      set_applyid(from.applyid());
    }
    if (from.has_ok()) {
      set_ok(from.ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTrade_answer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTrade_answer::CopyFrom(const PBC2GTrade_answer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTrade_answer::IsInitialized() const {
  
  return true;
}

void PBC2GTrade_answer::Swap(PBC2GTrade_answer* other) {
  if (other != this) {
    std::swap(applyid_, other->applyid_);
    std::swap(ok_, other->ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTrade_answer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTrade_answer_descriptor_;
  metadata.reflection = PBC2GTrade_answer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTrade_addItem::kItemsnFieldNumber;
const int PBC2GTrade_addItem::kItemnumFieldNumber;
#endif  // !_MSC_VER

PBC2GTrade_addItem::PBC2GTrade_addItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTrade_addItem::InitAsDefaultInstance() {
}

PBC2GTrade_addItem::PBC2GTrade_addItem(const PBC2GTrade_addItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTrade_addItem::SharedCtor() {
  _cached_size_ = 0;
  itemsn_ = GOOGLE_ULONGLONG(0);
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTrade_addItem::~PBC2GTrade_addItem() {
  SharedDtor();
}

void PBC2GTrade_addItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTrade_addItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTrade_addItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTrade_addItem_descriptor_;
}

const PBC2GTrade_addItem& PBC2GTrade_addItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GTrade_addItem* PBC2GTrade_addItem::default_instance_ = NULL;

PBC2GTrade_addItem* PBC2GTrade_addItem::New() const {
  return new PBC2GTrade_addItem;
}

void PBC2GTrade_addItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsn_ = GOOGLE_ULONGLONG(0);
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTrade_addItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsn_)));
          set_has_itemsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemnum;
        break;
      }
      
      // optional uint32 itemnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTrade_addItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsn = 1;
  if (has_itemsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsn(), output);
  }
  
  // optional uint32 itemnum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTrade_addItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsn = 1;
  if (has_itemsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsn(), target);
  }
  
  // optional uint32 itemnum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTrade_addItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsn = 1;
    if (has_itemsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsn());
    }
    
    // optional uint32 itemnum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTrade_addItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTrade_addItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTrade_addItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTrade_addItem::MergeFrom(const PBC2GTrade_addItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsn()) {
      set_itemsn(from.itemsn());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTrade_addItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTrade_addItem::CopyFrom(const PBC2GTrade_addItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTrade_addItem::IsInitialized() const {
  
  return true;
}

void PBC2GTrade_addItem::Swap(PBC2GTrade_addItem* other) {
  if (other != this) {
    std::swap(itemsn_, other->itemsn_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTrade_addItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTrade_addItem_descriptor_;
  metadata.reflection = PBC2GTrade_addItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTrade_delItem::kItemsnFieldNumber;
#endif  // !_MSC_VER

PBC2GTrade_delItem::PBC2GTrade_delItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTrade_delItem::InitAsDefaultInstance() {
}

PBC2GTrade_delItem::PBC2GTrade_delItem(const PBC2GTrade_delItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTrade_delItem::SharedCtor() {
  _cached_size_ = 0;
  itemsn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTrade_delItem::~PBC2GTrade_delItem() {
  SharedDtor();
}

void PBC2GTrade_delItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTrade_delItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTrade_delItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTrade_delItem_descriptor_;
}

const PBC2GTrade_delItem& PBC2GTrade_delItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GTrade_delItem* PBC2GTrade_delItem::default_instance_ = NULL;

PBC2GTrade_delItem* PBC2GTrade_delItem::New() const {
  return new PBC2GTrade_delItem;
}

void PBC2GTrade_delItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTrade_delItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsn_)));
          set_has_itemsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTrade_delItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsn = 1;
  if (has_itemsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTrade_delItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsn = 1;
  if (has_itemsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTrade_delItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsn = 1;
    if (has_itemsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTrade_delItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTrade_delItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTrade_delItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTrade_delItem::MergeFrom(const PBC2GTrade_delItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsn()) {
      set_itemsn(from.itemsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTrade_delItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTrade_delItem::CopyFrom(const PBC2GTrade_delItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTrade_delItem::IsInitialized() const {
  
  return true;
}

void PBC2GTrade_delItem::Swap(PBC2GTrade_delItem* other) {
  if (other != this) {
    std::swap(itemsn_, other->itemsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTrade_delItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTrade_delItem_descriptor_;
  metadata.reflection = PBC2GTrade_delItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTrade_setMoney::kMoneytypeFieldNumber;
const int PBC2GTrade_setMoney::kMoneyFieldNumber;
#endif  // !_MSC_VER

PBC2GTrade_setMoney::PBC2GTrade_setMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTrade_setMoney::InitAsDefaultInstance() {
}

PBC2GTrade_setMoney::PBC2GTrade_setMoney(const PBC2GTrade_setMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTrade_setMoney::SharedCtor() {
  _cached_size_ = 0;
  moneytype_ = 0u;
  money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTrade_setMoney::~PBC2GTrade_setMoney() {
  SharedDtor();
}

void PBC2GTrade_setMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTrade_setMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTrade_setMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTrade_setMoney_descriptor_;
}

const PBC2GTrade_setMoney& PBC2GTrade_setMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GTrade_setMoney* PBC2GTrade_setMoney::default_instance_ = NULL;

PBC2GTrade_setMoney* PBC2GTrade_setMoney::New() const {
  return new PBC2GTrade_setMoney;
}

void PBC2GTrade_setMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moneytype_ = 0u;
    money_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTrade_setMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moneytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }
      
      // optional uint64 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTrade_setMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moneytype = 1;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moneytype(), output);
  }
  
  // optional uint64 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTrade_setMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moneytype = 1;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->moneytype(), target);
  }
  
  // optional uint64 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTrade_setMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moneytype = 1;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneytype());
    }
    
    // optional uint64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTrade_setMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTrade_setMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTrade_setMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTrade_setMoney::MergeFrom(const PBC2GTrade_setMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTrade_setMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTrade_setMoney::CopyFrom(const PBC2GTrade_setMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTrade_setMoney::IsInitialized() const {
  
  return true;
}

void PBC2GTrade_setMoney::Swap(PBC2GTrade_setMoney* other) {
  if (other != this) {
    std::swap(moneytype_, other->moneytype_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTrade_setMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTrade_setMoney_descriptor_;
  metadata.reflection = PBC2GTrade_setMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTrade_begin::kTargetFieldNumber;
#endif  // !_MSC_VER

PBG2CTrade_begin::PBG2CTrade_begin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTrade_begin::InitAsDefaultInstance() {
  target_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CTrade_begin::PBG2CTrade_begin(const PBG2CTrade_begin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTrade_begin::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTrade_begin::~PBG2CTrade_begin() {
  SharedDtor();
}

void PBG2CTrade_begin::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void PBG2CTrade_begin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTrade_begin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTrade_begin_descriptor_;
}

const PBG2CTrade_begin& PBG2CTrade_begin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTrade_begin* PBG2CTrade_begin::default_instance_ = NULL;

PBG2CTrade_begin* PBG2CTrade_begin::New() const {
  return new PBG2CTrade_begin;
}

void PBG2CTrade_begin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTrade_begin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTrade_begin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTrade_begin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTrade_begin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTrade_begin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTrade_begin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTrade_begin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTrade_begin::MergeFrom(const PBG2CTrade_begin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      mutable_target()->::PBPlayerDisplay::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTrade_begin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTrade_begin::CopyFrom(const PBG2CTrade_begin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTrade_begin::IsInitialized() const {
  
  return true;
}

void PBG2CTrade_begin::Swap(PBG2CTrade_begin* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTrade_begin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTrade_begin_descriptor_;
  metadata.reflection = PBG2CTrade_begin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTrade_end::kReasonFieldNumber;
const int PBG2CTrade_end::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBG2CTrade_end::PBG2CTrade_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTrade_end::InitAsDefaultInstance() {
}

PBG2CTrade_end::PBG2CTrade_end(const PBG2CTrade_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTrade_end::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTrade_end::~PBG2CTrade_end() {
  SharedDtor();
}

void PBG2CTrade_end::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CTrade_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTrade_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTrade_end_descriptor_;
}

const PBG2CTrade_end& PBG2CTrade_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTrade_end* PBG2CTrade_end::default_instance_ = NULL;

PBG2CTrade_end* PBG2CTrade_end::New() const {
  return new PBG2CTrade_end;
}

void PBG2CTrade_end::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTrade_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTrade_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reason(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTrade_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reason(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTrade_end::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTrade_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTrade_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTrade_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTrade_end::MergeFrom(const PBG2CTrade_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTrade_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTrade_end::CopyFrom(const PBG2CTrade_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTrade_end::IsInitialized() const {
  
  return true;
}

void PBG2CTrade_end::Swap(PBG2CTrade_end* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTrade_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTrade_end_descriptor_;
  metadata.reflection = PBG2CTrade_end_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTrade_addItem::kPlayeridFieldNumber;
const int PBG2CTrade_addItem::kItemFieldNumber;
#endif  // !_MSC_VER

PBG2CTrade_addItem::PBG2CTrade_addItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTrade_addItem::InitAsDefaultInstance() {
  item_ = const_cast< ::PBItem*>(&::PBItem::default_instance());
}

PBG2CTrade_addItem::PBG2CTrade_addItem(const PBG2CTrade_addItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTrade_addItem::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTrade_addItem::~PBG2CTrade_addItem() {
  SharedDtor();
}

void PBG2CTrade_addItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void PBG2CTrade_addItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTrade_addItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTrade_addItem_descriptor_;
}

const PBG2CTrade_addItem& PBG2CTrade_addItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTrade_addItem* PBG2CTrade_addItem::default_instance_ = NULL;

PBG2CTrade_addItem* PBG2CTrade_addItem::New() const {
  return new PBG2CTrade_addItem;
}

void PBG2CTrade_addItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_item()) {
      if (item_ != NULL) item_->::PBItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTrade_addItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }
      
      // optional .PBItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTrade_addItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional .PBItem item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTrade_addItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional .PBItem item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTrade_addItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional .PBItem item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTrade_addItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTrade_addItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTrade_addItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTrade_addItem::MergeFrom(const PBG2CTrade_addItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_item()) {
      mutable_item()->::PBItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTrade_addItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTrade_addItem::CopyFrom(const PBG2CTrade_addItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTrade_addItem::IsInitialized() const {
  
  return true;
}

void PBG2CTrade_addItem::Swap(PBG2CTrade_addItem* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTrade_addItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTrade_addItem_descriptor_;
  metadata.reflection = PBG2CTrade_addItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTrade_delItem::kPlayeridFieldNumber;
const int PBG2CTrade_delItem::kItemsnFieldNumber;
#endif  // !_MSC_VER

PBG2CTrade_delItem::PBG2CTrade_delItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTrade_delItem::InitAsDefaultInstance() {
}

PBG2CTrade_delItem::PBG2CTrade_delItem(const PBG2CTrade_delItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTrade_delItem::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  itemsn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTrade_delItem::~PBG2CTrade_delItem() {
  SharedDtor();
}

void PBG2CTrade_delItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CTrade_delItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTrade_delItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTrade_delItem_descriptor_;
}

const PBG2CTrade_delItem& PBG2CTrade_delItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTrade_delItem* PBG2CTrade_delItem::default_instance_ = NULL;

PBG2CTrade_delItem* PBG2CTrade_delItem::New() const {
  return new PBG2CTrade_delItem;
}

void PBG2CTrade_delItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    itemsn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTrade_delItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemsn;
        break;
      }
      
      // optional uint64 itemsn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsn_)));
          set_has_itemsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTrade_delItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint64 itemsn = 2;
  if (has_itemsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemsn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTrade_delItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint64 itemsn = 2;
  if (has_itemsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemsn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTrade_delItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint64 itemsn = 2;
    if (has_itemsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTrade_delItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTrade_delItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTrade_delItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTrade_delItem::MergeFrom(const PBG2CTrade_delItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_itemsn()) {
      set_itemsn(from.itemsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTrade_delItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTrade_delItem::CopyFrom(const PBG2CTrade_delItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTrade_delItem::IsInitialized() const {
  
  return true;
}

void PBG2CTrade_delItem::Swap(PBG2CTrade_delItem* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(itemsn_, other->itemsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTrade_delItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTrade_delItem_descriptor_;
  metadata.reflection = PBG2CTrade_delItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTrade_setMoney::kPlayeridFieldNumber;
const int PBG2CTrade_setMoney::kMoneytypeFieldNumber;
const int PBG2CTrade_setMoney::kMoneyFieldNumber;
#endif  // !_MSC_VER

PBG2CTrade_setMoney::PBG2CTrade_setMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTrade_setMoney::InitAsDefaultInstance() {
}

PBG2CTrade_setMoney::PBG2CTrade_setMoney(const PBG2CTrade_setMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTrade_setMoney::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  moneytype_ = 0u;
  money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTrade_setMoney::~PBG2CTrade_setMoney() {
  SharedDtor();
}

void PBG2CTrade_setMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CTrade_setMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTrade_setMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTrade_setMoney_descriptor_;
}

const PBG2CTrade_setMoney& PBG2CTrade_setMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTrade_setMoney* PBG2CTrade_setMoney::default_instance_ = NULL;

PBG2CTrade_setMoney* PBG2CTrade_setMoney::New() const {
  return new PBG2CTrade_setMoney;
}

void PBG2CTrade_setMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    moneytype_ = 0u;
    money_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTrade_setMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moneytype;
        break;
      }
      
      // optional uint32 moneytype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }
      
      // optional uint64 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTrade_setMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 moneytype = 2;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moneytype(), output);
  }
  
  // optional uint64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTrade_setMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 moneytype = 2;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moneytype(), target);
  }
  
  // optional uint64 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTrade_setMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 moneytype = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneytype());
    }
    
    // optional uint64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTrade_setMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTrade_setMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTrade_setMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTrade_setMoney::MergeFrom(const PBG2CTrade_setMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTrade_setMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTrade_setMoney::CopyFrom(const PBG2CTrade_setMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTrade_setMoney::IsInitialized() const {
  
  return true;
}

void PBG2CTrade_setMoney::Swap(PBG2CTrade_setMoney* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTrade_setMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTrade_setMoney_descriptor_;
  metadata.reflection = PBG2CTrade_setMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTrade_lock::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBG2CTrade_lock::PBG2CTrade_lock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTrade_lock::InitAsDefaultInstance() {
}

PBG2CTrade_lock::PBG2CTrade_lock(const PBG2CTrade_lock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTrade_lock::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTrade_lock::~PBG2CTrade_lock() {
  SharedDtor();
}

void PBG2CTrade_lock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CTrade_lock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTrade_lock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTrade_lock_descriptor_;
}

const PBG2CTrade_lock& PBG2CTrade_lock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTrade_lock* PBG2CTrade_lock::default_instance_ = NULL;

PBG2CTrade_lock* PBG2CTrade_lock::New() const {
  return new PBG2CTrade_lock;
}

void PBG2CTrade_lock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTrade_lock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTrade_lock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTrade_lock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTrade_lock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTrade_lock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTrade_lock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTrade_lock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTrade_lock::MergeFrom(const PBG2CTrade_lock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTrade_lock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTrade_lock::CopyFrom(const PBG2CTrade_lock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTrade_lock::IsInitialized() const {
  
  return true;
}

void PBG2CTrade_lock::Swap(PBG2CTrade_lock* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTrade_lock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTrade_lock_descriptor_;
  metadata.reflection = PBG2CTrade_lock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTrade_unlock::kPlayeridFieldNumber;
const int PBG2CTrade_unlock::kLockcooltimeFieldNumber;
#endif  // !_MSC_VER

PBG2CTrade_unlock::PBG2CTrade_unlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTrade_unlock::InitAsDefaultInstance() {
}

PBG2CTrade_unlock::PBG2CTrade_unlock(const PBG2CTrade_unlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTrade_unlock::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  lockcooltime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTrade_unlock::~PBG2CTrade_unlock() {
  SharedDtor();
}

void PBG2CTrade_unlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CTrade_unlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTrade_unlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTrade_unlock_descriptor_;
}

const PBG2CTrade_unlock& PBG2CTrade_unlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTrade_unlock* PBG2CTrade_unlock::default_instance_ = NULL;

PBG2CTrade_unlock* PBG2CTrade_unlock::New() const {
  return new PBG2CTrade_unlock;
}

void PBG2CTrade_unlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    lockcooltime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTrade_unlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lockcooltime;
        break;
      }
      
      // optional uint32 lockcooltime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockcooltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lockcooltime_)));
          set_has_lockcooltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTrade_unlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 lockcooltime = 2;
  if (has_lockcooltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lockcooltime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTrade_unlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 lockcooltime = 2;
  if (has_lockcooltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lockcooltime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTrade_unlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 lockcooltime = 2;
    if (has_lockcooltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lockcooltime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTrade_unlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTrade_unlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTrade_unlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTrade_unlock::MergeFrom(const PBG2CTrade_unlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_lockcooltime()) {
      set_lockcooltime(from.lockcooltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTrade_unlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTrade_unlock::CopyFrom(const PBG2CTrade_unlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTrade_unlock::IsInitialized() const {
  
  return true;
}

void PBG2CTrade_unlock::Swap(PBG2CTrade_unlock* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(lockcooltime_, other->lockcooltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTrade_unlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTrade_unlock_descriptor_;
  metadata.reflection = PBG2CTrade_unlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTrade_confirm::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBG2CTrade_confirm::PBG2CTrade_confirm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTrade_confirm::InitAsDefaultInstance() {
}

PBG2CTrade_confirm::PBG2CTrade_confirm(const PBG2CTrade_confirm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTrade_confirm::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTrade_confirm::~PBG2CTrade_confirm() {
  SharedDtor();
}

void PBG2CTrade_confirm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CTrade_confirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTrade_confirm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTrade_confirm_descriptor_;
}

const PBG2CTrade_confirm& PBG2CTrade_confirm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTrade_confirm* PBG2CTrade_confirm::default_instance_ = NULL;

PBG2CTrade_confirm* PBG2CTrade_confirm::New() const {
  return new PBG2CTrade_confirm;
}

void PBG2CTrade_confirm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTrade_confirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTrade_confirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTrade_confirm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTrade_confirm::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTrade_confirm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTrade_confirm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTrade_confirm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTrade_confirm::MergeFrom(const PBG2CTrade_confirm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTrade_confirm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTrade_confirm::CopyFrom(const PBG2CTrade_confirm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTrade_confirm::IsInitialized() const {
  
  return true;
}

void PBG2CTrade_confirm::Swap(PBG2CTrade_confirm* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTrade_confirm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTrade_confirm_descriptor_;
  metadata.reflection = PBG2CTrade_confirm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTrade_applyTrasfer::kApplyerFieldNumber;
#endif  // !_MSC_VER

PBG2CTrade_applyTrasfer::PBG2CTrade_applyTrasfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTrade_applyTrasfer::InitAsDefaultInstance() {
  applyer_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CTrade_applyTrasfer::PBG2CTrade_applyTrasfer(const PBG2CTrade_applyTrasfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTrade_applyTrasfer::SharedCtor() {
  _cached_size_ = 0;
  applyer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTrade_applyTrasfer::~PBG2CTrade_applyTrasfer() {
  SharedDtor();
}

void PBG2CTrade_applyTrasfer::SharedDtor() {
  if (this != default_instance_) {
    delete applyer_;
  }
}

void PBG2CTrade_applyTrasfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTrade_applyTrasfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTrade_applyTrasfer_descriptor_;
}

const PBG2CTrade_applyTrasfer& PBG2CTrade_applyTrasfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTrade_applyTrasfer* PBG2CTrade_applyTrasfer::default_instance_ = NULL;

PBG2CTrade_applyTrasfer* PBG2CTrade_applyTrasfer::New() const {
  return new PBG2CTrade_applyTrasfer;
}

void PBG2CTrade_applyTrasfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_applyer()) {
      if (applyer_ != NULL) applyer_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTrade_applyTrasfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay applyer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_applyer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTrade_applyTrasfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay applyer = 1;
  if (has_applyer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applyer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTrade_applyTrasfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay applyer = 1;
  if (has_applyer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applyer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTrade_applyTrasfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay applyer = 1;
    if (has_applyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->applyer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTrade_applyTrasfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTrade_applyTrasfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTrade_applyTrasfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTrade_applyTrasfer::MergeFrom(const PBG2CTrade_applyTrasfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applyer()) {
      mutable_applyer()->::PBPlayerDisplay::MergeFrom(from.applyer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTrade_applyTrasfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTrade_applyTrasfer::CopyFrom(const PBG2CTrade_applyTrasfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTrade_applyTrasfer::IsInitialized() const {
  
  return true;
}

void PBG2CTrade_applyTrasfer::Swap(PBG2CTrade_applyTrasfer* other) {
  if (other != this) {
    std::swap(applyer_, other->applyer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTrade_applyTrasfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTrade_applyTrasfer_descriptor_;
  metadata.reflection = PBG2CTrade_applyTrasfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTrade_answerTrasfer::kPlayerFieldNumber;
const int PBG2CTrade_answerTrasfer::kOkFieldNumber;
#endif  // !_MSC_VER

PBG2CTrade_answerTrasfer::PBG2CTrade_answerTrasfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTrade_answerTrasfer::InitAsDefaultInstance() {
  player_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CTrade_answerTrasfer::PBG2CTrade_answerTrasfer(const PBG2CTrade_answerTrasfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTrade_answerTrasfer::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTrade_answerTrasfer::~PBG2CTrade_answerTrasfer() {
  SharedDtor();
}

void PBG2CTrade_answerTrasfer::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void PBG2CTrade_answerTrasfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTrade_answerTrasfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTrade_answerTrasfer_descriptor_;
}

const PBG2CTrade_answerTrasfer& PBG2CTrade_answerTrasfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTrade_answerTrasfer* PBG2CTrade_answerTrasfer::default_instance_ = NULL;

PBG2CTrade_answerTrasfer* PBG2CTrade_answerTrasfer::New() const {
  return new PBG2CTrade_answerTrasfer;
}

void PBG2CTrade_answerTrasfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::PBPlayerDisplay::Clear();
    }
    ok_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTrade_answerTrasfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ok;
        break;
      }
      
      // optional bool ok = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
          set_has_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTrade_answerTrasfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }
  
  // optional bool ok = 2;
  if (has_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ok(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTrade_answerTrasfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }
  
  // optional bool ok = 2;
  if (has_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ok(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTrade_answerTrasfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }
    
    // optional bool ok = 2;
    if (has_ok()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTrade_answerTrasfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTrade_answerTrasfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTrade_answerTrasfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTrade_answerTrasfer::MergeFrom(const PBG2CTrade_answerTrasfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::PBPlayerDisplay::MergeFrom(from.player());
    }
    if (from.has_ok()) {
      set_ok(from.ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTrade_answerTrasfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTrade_answerTrasfer::CopyFrom(const PBG2CTrade_answerTrasfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTrade_answerTrasfer::IsInitialized() const {
  
  return true;
}

void PBG2CTrade_answerTrasfer::Swap(PBG2CTrade_answerTrasfer* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(ok_, other->ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTrade_answerTrasfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTrade_answerTrasfer_descriptor_;
  metadata.reflection = PBG2CTrade_answerTrasfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CSaleMoney_tradelog::kLogFieldNumber;
#endif  // !_MSC_VER

PBG2CSaleMoney_tradelog::PBG2CSaleMoney_tradelog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSaleMoney_tradelog::InitAsDefaultInstance() {
}

PBG2CSaleMoney_tradelog::PBG2CSaleMoney_tradelog(const PBG2CSaleMoney_tradelog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSaleMoney_tradelog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSaleMoney_tradelog::~PBG2CSaleMoney_tradelog() {
  SharedDtor();
}

void PBG2CSaleMoney_tradelog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CSaleMoney_tradelog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSaleMoney_tradelog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSaleMoney_tradelog_descriptor_;
}

const PBG2CSaleMoney_tradelog& PBG2CSaleMoney_tradelog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CSaleMoney_tradelog* PBG2CSaleMoney_tradelog::default_instance_ = NULL;

PBG2CSaleMoney_tradelog* PBG2CSaleMoney_tradelog::New() const {
  return new PBG2CSaleMoney_tradelog;
}

void PBG2CSaleMoney_tradelog::Clear() {
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSaleMoney_tradelog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBSaleMoneyRecentTradeLog log = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CSaleMoney_tradelog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBSaleMoneyRecentTradeLog log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSaleMoney_tradelog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSaleMoneyRecentTradeLog log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSaleMoney_tradelog::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBSaleMoneyRecentTradeLog log = 1;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSaleMoney_tradelog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSaleMoney_tradelog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSaleMoney_tradelog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSaleMoney_tradelog::MergeFrom(const PBG2CSaleMoney_tradelog& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSaleMoney_tradelog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSaleMoney_tradelog::CopyFrom(const PBG2CSaleMoney_tradelog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSaleMoney_tradelog::IsInitialized() const {
  
  return true;
}

void PBG2CSaleMoney_tradelog::Swap(PBG2CSaleMoney_tradelog* other) {
  if (other != this) {
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSaleMoney_tradelog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSaleMoney_tradelog_descriptor_;
  metadata.reflection = PBG2CSaleMoney_tradelog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GSaleMoney_sale::kTypeFieldNumber;
const int PBC2GSaleMoney_sale::kCashFieldNumber;
const int PBC2GSaleMoney_sale::kSliverFieldNumber;
#endif  // !_MSC_VER

PBC2GSaleMoney_sale::PBC2GSaleMoney_sale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GSaleMoney_sale::InitAsDefaultInstance() {
}

PBC2GSaleMoney_sale::PBC2GSaleMoney_sale(const PBC2GSaleMoney_sale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GSaleMoney_sale::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  cash_ = 0u;
  sliver_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GSaleMoney_sale::~PBC2GSaleMoney_sale() {
  SharedDtor();
}

void PBC2GSaleMoney_sale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GSaleMoney_sale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GSaleMoney_sale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GSaleMoney_sale_descriptor_;
}

const PBC2GSaleMoney_sale& PBC2GSaleMoney_sale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GSaleMoney_sale* PBC2GSaleMoney_sale::default_instance_ = NULL;

PBC2GSaleMoney_sale* PBC2GSaleMoney_sale::New() const {
  return new PBC2GSaleMoney_sale;
}

void PBC2GSaleMoney_sale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    cash_ = 0u;
    sliver_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GSaleMoney_sale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cash;
        break;
      }
      
      // optional uint32 cash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sliver;
        break;
      }
      
      // optional uint64 sliver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GSaleMoney_sale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 cash = 2;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cash(), output);
  }
  
  // optional uint64 sliver = 3;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GSaleMoney_sale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 cash = 2;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cash(), target);
  }
  
  // optional uint64 sliver = 3;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GSaleMoney_sale::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 cash = 2;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
    // optional uint64 sliver = 3;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GSaleMoney_sale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GSaleMoney_sale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GSaleMoney_sale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GSaleMoney_sale::MergeFrom(const PBC2GSaleMoney_sale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GSaleMoney_sale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GSaleMoney_sale::CopyFrom(const PBC2GSaleMoney_sale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GSaleMoney_sale::IsInitialized() const {
  
  return true;
}

void PBC2GSaleMoney_sale::Swap(PBC2GSaleMoney_sale* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cash_, other->cash_);
    std::swap(sliver_, other->sliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GSaleMoney_sale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GSaleMoney_sale_descriptor_;
  metadata.reflection = PBC2GSaleMoney_sale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GSaleMoney_salecancel::kOrderidFieldNumber;
#endif  // !_MSC_VER

PBC2GSaleMoney_salecancel::PBC2GSaleMoney_salecancel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GSaleMoney_salecancel::InitAsDefaultInstance() {
}

PBC2GSaleMoney_salecancel::PBC2GSaleMoney_salecancel(const PBC2GSaleMoney_salecancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GSaleMoney_salecancel::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GSaleMoney_salecancel::~PBC2GSaleMoney_salecancel() {
  SharedDtor();
}

void PBC2GSaleMoney_salecancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GSaleMoney_salecancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GSaleMoney_salecancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GSaleMoney_salecancel_descriptor_;
}

const PBC2GSaleMoney_salecancel& PBC2GSaleMoney_salecancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GSaleMoney_salecancel* PBC2GSaleMoney_salecancel::default_instance_ = NULL;

PBC2GSaleMoney_salecancel* PBC2GSaleMoney_salecancel::New() const {
  return new PBC2GSaleMoney_salecancel;
}

void PBC2GSaleMoney_salecancel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GSaleMoney_salecancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 orderid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GSaleMoney_salecancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 orderid = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->orderid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GSaleMoney_salecancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 orderid = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->orderid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GSaleMoney_salecancel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 orderid = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->orderid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GSaleMoney_salecancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GSaleMoney_salecancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GSaleMoney_salecancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GSaleMoney_salecancel::MergeFrom(const PBC2GSaleMoney_salecancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GSaleMoney_salecancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GSaleMoney_salecancel::CopyFrom(const PBC2GSaleMoney_salecancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GSaleMoney_salecancel::IsInitialized() const {
  
  return true;
}

void PBC2GSaleMoney_salecancel::Swap(PBC2GSaleMoney_salecancel* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GSaleMoney_salecancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GSaleMoney_salecancel_descriptor_;
  metadata.reflection = PBC2GSaleMoney_salecancel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CSaleMoney_ListInfo::kCashFieldNumber;
const int PBG2CSaleMoney_ListInfo::kSliverFieldNumber;
#endif  // !_MSC_VER

PBG2CSaleMoney_ListInfo::PBG2CSaleMoney_ListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSaleMoney_ListInfo::InitAsDefaultInstance() {
}

PBG2CSaleMoney_ListInfo::PBG2CSaleMoney_ListInfo(const PBG2CSaleMoney_ListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSaleMoney_ListInfo::SharedCtor() {
  _cached_size_ = 0;
  cash_ = GOOGLE_ULONGLONG(0);
  sliver_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSaleMoney_ListInfo::~PBG2CSaleMoney_ListInfo() {
  SharedDtor();
}

void PBG2CSaleMoney_ListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CSaleMoney_ListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSaleMoney_ListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSaleMoney_ListInfo_descriptor_;
}

const PBG2CSaleMoney_ListInfo& PBG2CSaleMoney_ListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CSaleMoney_ListInfo* PBG2CSaleMoney_ListInfo::default_instance_ = NULL;

PBG2CSaleMoney_ListInfo* PBG2CSaleMoney_ListInfo::New() const {
  return new PBG2CSaleMoney_ListInfo;
}

void PBG2CSaleMoney_ListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cash_ = GOOGLE_ULONGLONG(0);
    sliver_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSaleMoney_ListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sliver;
        break;
      }
      
      // optional uint64 sliver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sliver_)));
          set_has_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CSaleMoney_ListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cash(), output);
  }
  
  // optional uint64 sliver = 2;
  if (has_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSaleMoney_ListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cash(), target);
  }
  
  // optional uint64 sliver = 2;
  if (has_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSaleMoney_ListInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cash());
    }
    
    // optional uint64 sliver = 2;
    if (has_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSaleMoney_ListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSaleMoney_ListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSaleMoney_ListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSaleMoney_ListInfo::MergeFrom(const PBG2CSaleMoney_ListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_sliver()) {
      set_sliver(from.sliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSaleMoney_ListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSaleMoney_ListInfo::CopyFrom(const PBG2CSaleMoney_ListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSaleMoney_ListInfo::IsInitialized() const {
  
  return true;
}

void PBG2CSaleMoney_ListInfo::Swap(PBG2CSaleMoney_ListInfo* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(sliver_, other->sliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSaleMoney_ListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSaleMoney_ListInfo_descriptor_;
  metadata.reflection = PBG2CSaleMoney_ListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CSaleMoney_list::kAveSliverFieldNumber;
const int PBG2CSaleMoney_list::kSaleFieldNumber;
const int PBG2CSaleMoney_list::kBuyFieldNumber;
#endif  // !_MSC_VER

PBG2CSaleMoney_list::PBG2CSaleMoney_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSaleMoney_list::InitAsDefaultInstance() {
}

PBG2CSaleMoney_list::PBG2CSaleMoney_list(const PBG2CSaleMoney_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSaleMoney_list::SharedCtor() {
  _cached_size_ = 0;
  ave_sliver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSaleMoney_list::~PBG2CSaleMoney_list() {
  SharedDtor();
}

void PBG2CSaleMoney_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CSaleMoney_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSaleMoney_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSaleMoney_list_descriptor_;
}

const PBG2CSaleMoney_list& PBG2CSaleMoney_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CSaleMoney_list* PBG2CSaleMoney_list::default_instance_ = NULL;

PBG2CSaleMoney_list* PBG2CSaleMoney_list::New() const {
  return new PBG2CSaleMoney_list;
}

void PBG2CSaleMoney_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ave_sliver_ = 0u;
  }
  sale_.Clear();
  buy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSaleMoney_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ave_sliver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ave_sliver_)));
          set_has_ave_sliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sale;
        break;
      }
      
      // repeated .PBG2CSaleMoney_ListInfo sale = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sale;
        if (input->ExpectTag(26)) goto parse_buy;
        break;
      }
      
      // repeated .PBG2CSaleMoney_ListInfo buy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buy;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CSaleMoney_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ave_sliver = 1;
  if (has_ave_sliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ave_sliver(), output);
  }
  
  // repeated .PBG2CSaleMoney_ListInfo sale = 2;
  for (int i = 0; i < this->sale_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sale(i), output);
  }
  
  // repeated .PBG2CSaleMoney_ListInfo buy = 3;
  for (int i = 0; i < this->buy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buy(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSaleMoney_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ave_sliver = 1;
  if (has_ave_sliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ave_sliver(), target);
  }
  
  // repeated .PBG2CSaleMoney_ListInfo sale = 2;
  for (int i = 0; i < this->sale_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sale(i), target);
  }
  
  // repeated .PBG2CSaleMoney_ListInfo buy = 3;
  for (int i = 0; i < this->buy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buy(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSaleMoney_list::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ave_sliver = 1;
    if (has_ave_sliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ave_sliver());
    }
    
  }
  // repeated .PBG2CSaleMoney_ListInfo sale = 2;
  total_size += 1 * this->sale_size();
  for (int i = 0; i < this->sale_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sale(i));
  }
  
  // repeated .PBG2CSaleMoney_ListInfo buy = 3;
  total_size += 1 * this->buy_size();
  for (int i = 0; i < this->buy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSaleMoney_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSaleMoney_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSaleMoney_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSaleMoney_list::MergeFrom(const PBG2CSaleMoney_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  sale_.MergeFrom(from.sale_);
  buy_.MergeFrom(from.buy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ave_sliver()) {
      set_ave_sliver(from.ave_sliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSaleMoney_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSaleMoney_list::CopyFrom(const PBG2CSaleMoney_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSaleMoney_list::IsInitialized() const {
  
  return true;
}

void PBG2CSaleMoney_list::Swap(PBG2CSaleMoney_list* other) {
  if (other != this) {
    std::swap(ave_sliver_, other->ave_sliver_);
    sale_.Swap(&other->sale_);
    buy_.Swap(&other->buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSaleMoney_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSaleMoney_list_descriptor_;
  metadata.reflection = PBG2CSaleMoney_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFindPlayer::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBC2GFindPlayer::PBC2GFindPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFindPlayer::InitAsDefaultInstance() {
}

PBC2GFindPlayer::PBC2GFindPlayer(const PBC2GFindPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFindPlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFindPlayer::~PBC2GFindPlayer() {
  SharedDtor();
}

void PBC2GFindPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFindPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFindPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFindPlayer_descriptor_;
}

const PBC2GFindPlayer& PBC2GFindPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GFindPlayer* PBC2GFindPlayer::default_instance_ = NULL;

PBC2GFindPlayer* PBC2GFindPlayer::New() const {
  return new PBC2GFindPlayer;
}

void PBC2GFindPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFindPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFindPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFindPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFindPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFindPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFindPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFindPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFindPlayer::MergeFrom(const PBC2GFindPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFindPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFindPlayer::CopyFrom(const PBC2GFindPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFindPlayer::IsInitialized() const {
  
  return true;
}

void PBC2GFindPlayer::Swap(PBC2GFindPlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFindPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFindPlayer_descriptor_;
  metadata.reflection = PBC2GFindPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFindPlayer::kPbViewFieldNumber;
#endif  // !_MSC_VER

PBG2CFindPlayer::PBG2CFindPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFindPlayer::InitAsDefaultInstance() {
  pbview_ = const_cast< ::PBPlayerView*>(&::PBPlayerView::default_instance());
}

PBG2CFindPlayer::PBG2CFindPlayer(const PBG2CFindPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFindPlayer::SharedCtor() {
  _cached_size_ = 0;
  pbview_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFindPlayer::~PBG2CFindPlayer() {
  SharedDtor();
}

void PBG2CFindPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete pbview_;
  }
}

void PBG2CFindPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFindPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFindPlayer_descriptor_;
}

const PBG2CFindPlayer& PBG2CFindPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CFindPlayer* PBG2CFindPlayer::default_instance_ = NULL;

PBG2CFindPlayer* PBG2CFindPlayer::New() const {
  return new PBG2CFindPlayer;
}

void PBG2CFindPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pbview()) {
      if (pbview_ != NULL) pbview_->::PBPlayerView::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFindPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerView pbView = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbview()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFindPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerView pbView = 1;
  if (has_pbview()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbview(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFindPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerView pbView = 1;
  if (has_pbview()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbview(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFindPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerView pbView = 1;
    if (has_pbview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbview());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFindPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFindPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFindPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFindPlayer::MergeFrom(const PBG2CFindPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pbview()) {
      mutable_pbview()->::PBPlayerView::MergeFrom(from.pbview());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFindPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFindPlayer::CopyFrom(const PBG2CFindPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFindPlayer::IsInitialized() const {
  
  return true;
}

void PBG2CFindPlayer::Swap(PBG2CFindPlayer* other) {
  if (other != this) {
    std::swap(pbview_, other->pbview_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFindPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFindPlayer_descriptor_;
  metadata.reflection = PBG2CFindPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GAuction_sale::kItemSNFieldNumber;
const int PBC2GAuction_sale::kUnitSliverFieldNumber;
const int PBC2GAuction_sale::kSaleCountFieldNumber;
#endif  // !_MSC_VER

PBC2GAuction_sale::PBC2GAuction_sale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GAuction_sale::InitAsDefaultInstance() {
}

PBC2GAuction_sale::PBC2GAuction_sale(const PBC2GAuction_sale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GAuction_sale::SharedCtor() {
  _cached_size_ = 0;
  itemsn_ = GOOGLE_ULONGLONG(0);
  unitsliver_ = 0u;
  salecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GAuction_sale::~PBC2GAuction_sale() {
  SharedDtor();
}

void PBC2GAuction_sale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GAuction_sale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GAuction_sale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GAuction_sale_descriptor_;
}

const PBC2GAuction_sale& PBC2GAuction_sale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GAuction_sale* PBC2GAuction_sale::default_instance_ = NULL;

PBC2GAuction_sale* PBC2GAuction_sale::New() const {
  return new PBC2GAuction_sale;
}

void PBC2GAuction_sale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsn_ = GOOGLE_ULONGLONG(0);
    unitsliver_ = 0u;
    salecount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GAuction_sale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemSN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsn_)));
          set_has_itemsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitSliver;
        break;
      }
      
      // optional uint32 unitSliver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitSliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitsliver_)));
          set_has_unitsliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_saleCount;
        break;
      }
      
      // optional uint32 saleCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saleCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &salecount_)));
          set_has_salecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GAuction_sale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemSN = 1;
  if (has_itemsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsn(), output);
  }
  
  // optional uint32 unitSliver = 2;
  if (has_unitsliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unitsliver(), output);
  }
  
  // optional uint32 saleCount = 3;
  if (has_salecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->salecount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GAuction_sale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemSN = 1;
  if (has_itemsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsn(), target);
  }
  
  // optional uint32 unitSliver = 2;
  if (has_unitsliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unitsliver(), target);
  }
  
  // optional uint32 saleCount = 3;
  if (has_salecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->salecount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GAuction_sale::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemSN = 1;
    if (has_itemsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsn());
    }
    
    // optional uint32 unitSliver = 2;
    if (has_unitsliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitsliver());
    }
    
    // optional uint32 saleCount = 3;
    if (has_salecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->salecount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GAuction_sale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GAuction_sale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GAuction_sale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GAuction_sale::MergeFrom(const PBC2GAuction_sale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsn()) {
      set_itemsn(from.itemsn());
    }
    if (from.has_unitsliver()) {
      set_unitsliver(from.unitsliver());
    }
    if (from.has_salecount()) {
      set_salecount(from.salecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GAuction_sale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GAuction_sale::CopyFrom(const PBC2GAuction_sale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GAuction_sale::IsInitialized() const {
  
  return true;
}

void PBC2GAuction_sale::Swap(PBC2GAuction_sale* other) {
  if (other != this) {
    std::swap(itemsn_, other->itemsn_);
    std::swap(unitsliver_, other->unitsliver_);
    std::swap(salecount_, other->salecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GAuction_sale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GAuction_sale_descriptor_;
  metadata.reflection = PBC2GAuction_sale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GAuction_salecancel::kSaleOrderIDFieldNumber;
#endif  // !_MSC_VER

PBC2GAuction_salecancel::PBC2GAuction_salecancel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GAuction_salecancel::InitAsDefaultInstance() {
}

PBC2GAuction_salecancel::PBC2GAuction_salecancel(const PBC2GAuction_salecancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GAuction_salecancel::SharedCtor() {
  _cached_size_ = 0;
  saleorderid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GAuction_salecancel::~PBC2GAuction_salecancel() {
  SharedDtor();
}

void PBC2GAuction_salecancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GAuction_salecancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GAuction_salecancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GAuction_salecancel_descriptor_;
}

const PBC2GAuction_salecancel& PBC2GAuction_salecancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GAuction_salecancel* PBC2GAuction_salecancel::default_instance_ = NULL;

PBC2GAuction_salecancel* PBC2GAuction_salecancel::New() const {
  return new PBC2GAuction_salecancel;
}

void PBC2GAuction_salecancel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saleorderid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GAuction_salecancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 saleOrderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &saleorderid_)));
          set_has_saleorderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GAuction_salecancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 saleOrderID = 1;
  if (has_saleorderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->saleorderid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GAuction_salecancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 saleOrderID = 1;
  if (has_saleorderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->saleorderid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GAuction_salecancel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 saleOrderID = 1;
    if (has_saleorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->saleorderid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GAuction_salecancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GAuction_salecancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GAuction_salecancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GAuction_salecancel::MergeFrom(const PBC2GAuction_salecancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saleorderid()) {
      set_saleorderid(from.saleorderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GAuction_salecancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GAuction_salecancel::CopyFrom(const PBC2GAuction_salecancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GAuction_salecancel::IsInitialized() const {
  
  return true;
}

void PBC2GAuction_salecancel::Swap(PBC2GAuction_salecancel* other) {
  if (other != this) {
    std::swap(saleorderid_, other->saleorderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GAuction_salecancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GAuction_salecancel_descriptor_;
  metadata.reflection = PBC2GAuction_salecancel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GAuction_buy::kSaleOrderIDFieldNumber;
const int PBC2GAuction_buy::kUnitSliverFieldNumber;
const int PBC2GAuction_buy::kBuyCountFieldNumber;
#endif  // !_MSC_VER

PBC2GAuction_buy::PBC2GAuction_buy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GAuction_buy::InitAsDefaultInstance() {
}

PBC2GAuction_buy::PBC2GAuction_buy(const PBC2GAuction_buy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GAuction_buy::SharedCtor() {
  _cached_size_ = 0;
  saleorderid_ = GOOGLE_ULONGLONG(0);
  unitsliver_ = 0u;
  buycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GAuction_buy::~PBC2GAuction_buy() {
  SharedDtor();
}

void PBC2GAuction_buy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GAuction_buy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GAuction_buy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GAuction_buy_descriptor_;
}

const PBC2GAuction_buy& PBC2GAuction_buy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GAuction_buy* PBC2GAuction_buy::default_instance_ = NULL;

PBC2GAuction_buy* PBC2GAuction_buy::New() const {
  return new PBC2GAuction_buy;
}

void PBC2GAuction_buy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saleorderid_ = GOOGLE_ULONGLONG(0);
    unitsliver_ = 0u;
    buycount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GAuction_buy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 saleOrderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &saleorderid_)));
          set_has_saleorderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitSliver;
        break;
      }
      
      // optional uint32 unitSliver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitSliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitsliver_)));
          set_has_unitsliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyCount;
        break;
      }
      
      // optional uint32 buyCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GAuction_buy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 saleOrderID = 1;
  if (has_saleorderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->saleorderid(), output);
  }
  
  // optional uint32 unitSliver = 2;
  if (has_unitsliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unitsliver(), output);
  }
  
  // optional uint32 buyCount = 3;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buycount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GAuction_buy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 saleOrderID = 1;
  if (has_saleorderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->saleorderid(), target);
  }
  
  // optional uint32 unitSliver = 2;
  if (has_unitsliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unitsliver(), target);
  }
  
  // optional uint32 buyCount = 3;
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buycount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GAuction_buy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 saleOrderID = 1;
    if (has_saleorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->saleorderid());
    }
    
    // optional uint32 unitSliver = 2;
    if (has_unitsliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitsliver());
    }
    
    // optional uint32 buyCount = 3;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buycount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GAuction_buy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GAuction_buy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GAuction_buy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GAuction_buy::MergeFrom(const PBC2GAuction_buy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saleorderid()) {
      set_saleorderid(from.saleorderid());
    }
    if (from.has_unitsliver()) {
      set_unitsliver(from.unitsliver());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GAuction_buy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GAuction_buy::CopyFrom(const PBC2GAuction_buy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GAuction_buy::IsInitialized() const {
  
  return true;
}

void PBC2GAuction_buy::Swap(PBC2GAuction_buy* other) {
  if (other != this) {
    std::swap(saleorderid_, other->saleorderid_);
    std::swap(unitsliver_, other->unitsliver_);
    std::swap(buycount_, other->buycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GAuction_buy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GAuction_buy_descriptor_;
  metadata.reflection = PBC2GAuction_buy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAuctionFilterItemType::kItemtypeFieldNumber;
const int PBAuctionFilterItemType::kItemsubtypeFieldNumber;
#endif  // !_MSC_VER

PBAuctionFilterItemType::PBAuctionFilterItemType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAuctionFilterItemType::InitAsDefaultInstance() {
}

PBAuctionFilterItemType::PBAuctionFilterItemType(const PBAuctionFilterItemType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAuctionFilterItemType::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = 0u;
  itemsubtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAuctionFilterItemType::~PBAuctionFilterItemType() {
  SharedDtor();
}

void PBAuctionFilterItemType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAuctionFilterItemType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAuctionFilterItemType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAuctionFilterItemType_descriptor_;
}

const PBAuctionFilterItemType& PBAuctionFilterItemType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBAuctionFilterItemType* PBAuctionFilterItemType::default_instance_ = NULL;

PBAuctionFilterItemType* PBAuctionFilterItemType::New() const {
  return new PBAuctionFilterItemType;
}

void PBAuctionFilterItemType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemtype_ = 0u;
    itemsubtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAuctionFilterItemType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemsubtype;
        break;
      }
      
      // optional uint32 itemsubtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemsubtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemsubtype_)));
          set_has_itemsubtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAuctionFilterItemType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemtype = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemtype(), output);
  }
  
  // optional uint32 itemsubtype = 2;
  if (has_itemsubtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemsubtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAuctionFilterItemType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemtype = 1;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemtype(), target);
  }
  
  // optional uint32 itemsubtype = 2;
  if (has_itemsubtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemsubtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAuctionFilterItemType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemtype = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtype());
    }
    
    // optional uint32 itemsubtype = 2;
    if (has_itemsubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemsubtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAuctionFilterItemType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAuctionFilterItemType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAuctionFilterItemType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAuctionFilterItemType::MergeFrom(const PBAuctionFilterItemType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemsubtype()) {
      set_itemsubtype(from.itemsubtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAuctionFilterItemType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAuctionFilterItemType::CopyFrom(const PBAuctionFilterItemType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAuctionFilterItemType::IsInitialized() const {
  
  return true;
}

void PBAuctionFilterItemType::Swap(PBAuctionFilterItemType* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemsubtype_, other->itemsubtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAuctionFilterItemType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAuctionFilterItemType_descriptor_;
  metadata.reflection = PBAuctionFilterItemType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GAuction_list::kClientParamFieldNumber;
const int PBC2GAuction_list::kTypeFilterFieldNumber;
const int PBC2GAuction_list::kQualityFilterFieldNumber;
const int PBC2GAuction_list::kIdFilterFieldNumber;
const int PBC2GAuction_list::kAttrFilterFieldNumber;
const int PBC2GAuction_list::kSortTypeFieldNumber;
const int PBC2GAuction_list::kBeginIndexFieldNumber;
const int PBC2GAuction_list::kEndIndexFieldNumber;
const int PBC2GAuction_list::kSortascendingFieldNumber;
#endif  // !_MSC_VER

PBC2GAuction_list::PBC2GAuction_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GAuction_list::InitAsDefaultInstance() {
}

PBC2GAuction_list::PBC2GAuction_list(const PBC2GAuction_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GAuction_list::SharedCtor() {
  _cached_size_ = 0;
  client_param_ = 0u;
  sort_type_ = 0u;
  begin_index_ = 0u;
  end_index_ = 0u;
  sortascending_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GAuction_list::~PBC2GAuction_list() {
  SharedDtor();
}

void PBC2GAuction_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GAuction_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GAuction_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GAuction_list_descriptor_;
}

const PBC2GAuction_list& PBC2GAuction_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GAuction_list* PBC2GAuction_list::default_instance_ = NULL;

PBC2GAuction_list* PBC2GAuction_list::New() const {
  return new PBC2GAuction_list;
}

void PBC2GAuction_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_param_ = 0u;
    sort_type_ = 0u;
    begin_index_ = 0u;
    end_index_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sortascending_ = false;
  }
  type_filter_.Clear();
  quality_filter_.Clear();
  id_filter_.Clear();
  attr_filter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GAuction_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_param_)));
          set_has_client_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type_filter;
        break;
      }
      
      // repeated .PBAuctionFilterItemType type_filter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_type_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type_filter;
        if (input->ExpectTag(24)) goto parse_quality_filter;
        break;
      }
      
      // repeated uint32 quality_filter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_quality_filter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_quality_filter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality_filter;
        if (input->ExpectTag(32)) goto parse_id_filter;
        break;
      }
      
      // repeated uint32 id_filter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_id_filter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id_filter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id_filter;
        if (input->ExpectTag(40)) goto parse_attr_filter;
        break;
      }
      
      // repeated uint32 attr_filter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_attr_filter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attr_filter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attr_filter;
        if (input->ExpectTag(48)) goto parse_sort_type;
        break;
      }
      
      // optional uint32 sort_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_type_)));
          set_has_sort_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_begin_index;
        break;
      }
      
      // optional uint32 begin_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_index_)));
          set_has_begin_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_end_index;
        break;
      }
      
      // optional uint32 end_index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sortascending;
        break;
      }
      
      // optional bool sortascending = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sortascending:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sortascending_)));
          set_has_sortascending();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GAuction_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client_param = 1;
  if (has_client_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_param(), output);
  }
  
  // repeated .PBAuctionFilterItemType type_filter = 2;
  for (int i = 0; i < this->type_filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->type_filter(i), output);
  }
  
  // repeated uint32 quality_filter = 3;
  for (int i = 0; i < this->quality_filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->quality_filter(i), output);
  }
  
  // repeated uint32 id_filter = 4;
  for (int i = 0; i < this->id_filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->id_filter(i), output);
  }
  
  // repeated uint32 attr_filter = 5;
  for (int i = 0; i < this->attr_filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->attr_filter(i), output);
  }
  
  // optional uint32 sort_type = 6;
  if (has_sort_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sort_type(), output);
  }
  
  // optional uint32 begin_index = 7;
  if (has_begin_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->begin_index(), output);
  }
  
  // optional uint32 end_index = 8;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->end_index(), output);
  }
  
  // optional bool sortascending = 9;
  if (has_sortascending()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->sortascending(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GAuction_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 client_param = 1;
  if (has_client_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_param(), target);
  }
  
  // repeated .PBAuctionFilterItemType type_filter = 2;
  for (int i = 0; i < this->type_filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->type_filter(i), target);
  }
  
  // repeated uint32 quality_filter = 3;
  for (int i = 0; i < this->quality_filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->quality_filter(i), target);
  }
  
  // repeated uint32 id_filter = 4;
  for (int i = 0; i < this->id_filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->id_filter(i), target);
  }
  
  // repeated uint32 attr_filter = 5;
  for (int i = 0; i < this->attr_filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->attr_filter(i), target);
  }
  
  // optional uint32 sort_type = 6;
  if (has_sort_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sort_type(), target);
  }
  
  // optional uint32 begin_index = 7;
  if (has_begin_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->begin_index(), target);
  }
  
  // optional uint32 end_index = 8;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->end_index(), target);
  }
  
  // optional bool sortascending = 9;
  if (has_sortascending()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->sortascending(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GAuction_list::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_param = 1;
    if (has_client_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_param());
    }
    
    // optional uint32 sort_type = 6;
    if (has_sort_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sort_type());
    }
    
    // optional uint32 begin_index = 7;
    if (has_begin_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_index());
    }
    
    // optional uint32 end_index = 8;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_index());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool sortascending = 9;
    if (has_sortascending()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .PBAuctionFilterItemType type_filter = 2;
  total_size += 1 * this->type_filter_size();
  for (int i = 0; i < this->type_filter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->type_filter(i));
  }
  
  // repeated uint32 quality_filter = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->quality_filter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->quality_filter(i));
    }
    total_size += 1 * this->quality_filter_size() + data_size;
  }
  
  // repeated uint32 id_filter = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_filter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id_filter(i));
    }
    total_size += 1 * this->id_filter_size() + data_size;
  }
  
  // repeated uint32 attr_filter = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_filter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attr_filter(i));
    }
    total_size += 1 * this->attr_filter_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GAuction_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GAuction_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GAuction_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GAuction_list::MergeFrom(const PBC2GAuction_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_filter_.MergeFrom(from.type_filter_);
  quality_filter_.MergeFrom(from.quality_filter_);
  id_filter_.MergeFrom(from.id_filter_);
  attr_filter_.MergeFrom(from.attr_filter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_param()) {
      set_client_param(from.client_param());
    }
    if (from.has_sort_type()) {
      set_sort_type(from.sort_type());
    }
    if (from.has_begin_index()) {
      set_begin_index(from.begin_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sortascending()) {
      set_sortascending(from.sortascending());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GAuction_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GAuction_list::CopyFrom(const PBC2GAuction_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GAuction_list::IsInitialized() const {
  
  return true;
}

void PBC2GAuction_list::Swap(PBC2GAuction_list* other) {
  if (other != this) {
    std::swap(client_param_, other->client_param_);
    type_filter_.Swap(&other->type_filter_);
    quality_filter_.Swap(&other->quality_filter_);
    id_filter_.Swap(&other->id_filter_);
    attr_filter_.Swap(&other->attr_filter_);
    std::swap(sort_type_, other->sort_type_);
    std::swap(begin_index_, other->begin_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(sortascending_, other->sortascending_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GAuction_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GAuction_list_descriptor_;
  metadata.reflection = PBC2GAuction_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GAuction_ave::kItemidFieldNumber;
#endif  // !_MSC_VER

PBC2GAuction_ave::PBC2GAuction_ave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GAuction_ave::InitAsDefaultInstance() {
}

PBC2GAuction_ave::PBC2GAuction_ave(const PBC2GAuction_ave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GAuction_ave::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GAuction_ave::~PBC2GAuction_ave() {
  SharedDtor();
}

void PBC2GAuction_ave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GAuction_ave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GAuction_ave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GAuction_ave_descriptor_;
}

const PBC2GAuction_ave& PBC2GAuction_ave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GAuction_ave* PBC2GAuction_ave::default_instance_ = NULL;

PBC2GAuction_ave* PBC2GAuction_ave::New() const {
  return new PBC2GAuction_ave;
}

void PBC2GAuction_ave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GAuction_ave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GAuction_ave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GAuction_ave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GAuction_ave::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GAuction_ave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GAuction_ave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GAuction_ave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GAuction_ave::MergeFrom(const PBC2GAuction_ave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GAuction_ave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GAuction_ave::CopyFrom(const PBC2GAuction_ave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GAuction_ave::IsInitialized() const {
  
  return true;
}

void PBC2GAuction_ave::Swap(PBC2GAuction_ave* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GAuction_ave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GAuction_ave_descriptor_;
  metadata.reflection = PBC2GAuction_ave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CAuction_list::kClientParamFieldNumber;
const int PBG2CAuction_list::kAllCountFieldNumber;
const int PBG2CAuction_list::kListFieldNumber;
#endif  // !_MSC_VER

PBG2CAuction_list::PBG2CAuction_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CAuction_list::InitAsDefaultInstance() {
}

PBG2CAuction_list::PBG2CAuction_list(const PBG2CAuction_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CAuction_list::SharedCtor() {
  _cached_size_ = 0;
  client_param_ = 0u;
  all_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CAuction_list::~PBG2CAuction_list() {
  SharedDtor();
}

void PBG2CAuction_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CAuction_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CAuction_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CAuction_list_descriptor_;
}

const PBG2CAuction_list& PBG2CAuction_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CAuction_list* PBG2CAuction_list::default_instance_ = NULL;

PBG2CAuction_list* PBG2CAuction_list::New() const {
  return new PBG2CAuction_list;
}

void PBG2CAuction_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_param_ = 0u;
    all_count_ = 0u;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CAuction_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_param_)));
          set_has_client_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_count;
        break;
      }
      
      // optional uint32 all_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_count_)));
          set_has_all_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }
      
      // repeated .PBAuctionItemInfo list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CAuction_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client_param = 1;
  if (has_client_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_param(), output);
  }
  
  // optional uint32 all_count = 2;
  if (has_all_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->all_count(), output);
  }
  
  // repeated .PBAuctionItemInfo list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CAuction_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 client_param = 1;
  if (has_client_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_param(), target);
  }
  
  // optional uint32 all_count = 2;
  if (has_all_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->all_count(), target);
  }
  
  // repeated .PBAuctionItemInfo list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CAuction_list::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_param = 1;
    if (has_client_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_param());
    }
    
    // optional uint32 all_count = 2;
    if (has_all_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_count());
    }
    
  }
  // repeated .PBAuctionItemInfo list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CAuction_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CAuction_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CAuction_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CAuction_list::MergeFrom(const PBG2CAuction_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_param()) {
      set_client_param(from.client_param());
    }
    if (from.has_all_count()) {
      set_all_count(from.all_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CAuction_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CAuction_list::CopyFrom(const PBG2CAuction_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CAuction_list::IsInitialized() const {
  
  return true;
}

void PBG2CAuction_list::Swap(PBG2CAuction_list* other) {
  if (other != this) {
    std::swap(client_param_, other->client_param_);
    std::swap(all_count_, other->all_count_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CAuction_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CAuction_list_descriptor_;
  metadata.reflection = PBG2CAuction_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CAuction_ave::kItemidFieldNumber;
const int PBG2CAuction_ave::kUnitsliverFieldNumber;
#endif  // !_MSC_VER

PBG2CAuction_ave::PBG2CAuction_ave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CAuction_ave::InitAsDefaultInstance() {
}

PBG2CAuction_ave::PBG2CAuction_ave(const PBG2CAuction_ave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CAuction_ave::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  unitsliver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CAuction_ave::~PBG2CAuction_ave() {
  SharedDtor();
}

void PBG2CAuction_ave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CAuction_ave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CAuction_ave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CAuction_ave_descriptor_;
}

const PBG2CAuction_ave& PBG2CAuction_ave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CAuction_ave* PBG2CAuction_ave::default_instance_ = NULL;

PBG2CAuction_ave* PBG2CAuction_ave::New() const {
  return new PBG2CAuction_ave;
}

void PBG2CAuction_ave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    unitsliver_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CAuction_ave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitsliver;
        break;
      }
      
      // optional uint32 unitsliver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitsliver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitsliver_)));
          set_has_unitsliver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CAuction_ave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 unitsliver = 2;
  if (has_unitsliver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unitsliver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CAuction_ave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 unitsliver = 2;
  if (has_unitsliver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unitsliver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CAuction_ave::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 unitsliver = 2;
    if (has_unitsliver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitsliver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CAuction_ave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CAuction_ave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CAuction_ave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CAuction_ave::MergeFrom(const PBG2CAuction_ave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_unitsliver()) {
      set_unitsliver(from.unitsliver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CAuction_ave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CAuction_ave::CopyFrom(const PBG2CAuction_ave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CAuction_ave::IsInitialized() const {
  
  return true;
}

void PBG2CAuction_ave::Swap(PBG2CAuction_ave* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(unitsliver_, other->unitsliver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CAuction_ave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CAuction_ave_descriptor_;
  metadata.reflection = PBG2CAuction_ave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTopListList::kSorttypeFieldNumber;
const int PBC2GTopListList::kBeginorderFieldNumber;
const int PBC2GTopListList::kCountFieldNumber;
#endif  // !_MSC_VER

PBC2GTopListList::PBC2GTopListList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTopListList::InitAsDefaultInstance() {
  sorttype_ = const_cast< ::PBTopListSortType*>(&::PBTopListSortType::default_instance());
}

PBC2GTopListList::PBC2GTopListList(const PBC2GTopListList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTopListList::SharedCtor() {
  _cached_size_ = 0;
  sorttype_ = NULL;
  beginorder_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTopListList::~PBC2GTopListList() {
  SharedDtor();
}

void PBC2GTopListList::SharedDtor() {
  if (this != default_instance_) {
    delete sorttype_;
  }
}

void PBC2GTopListList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTopListList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTopListList_descriptor_;
}

const PBC2GTopListList& PBC2GTopListList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GTopListList* PBC2GTopListList::default_instance_ = NULL;

PBC2GTopListList* PBC2GTopListList::New() const {
  return new PBC2GTopListList;
}

void PBC2GTopListList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sorttype()) {
      if (sorttype_ != NULL) sorttype_->::PBTopListSortType::Clear();
    }
    beginorder_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTopListList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBTopListSortType sorttype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sorttype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginorder;
        break;
      }
      
      // optional uint32 beginorder = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginorder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginorder_)));
          set_has_beginorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTopListList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBTopListSortType sorttype = 1;
  if (has_sorttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sorttype(), output);
  }
  
  // optional uint32 beginorder = 2;
  if (has_beginorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->beginorder(), output);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTopListList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBTopListSortType sorttype = 1;
  if (has_sorttype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sorttype(), target);
  }
  
  // optional uint32 beginorder = 2;
  if (has_beginorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->beginorder(), target);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTopListList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBTopListSortType sorttype = 1;
    if (has_sorttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sorttype());
    }
    
    // optional uint32 beginorder = 2;
    if (has_beginorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginorder());
    }
    
    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTopListList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTopListList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTopListList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTopListList::MergeFrom(const PBC2GTopListList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sorttype()) {
      mutable_sorttype()->::PBTopListSortType::MergeFrom(from.sorttype());
    }
    if (from.has_beginorder()) {
      set_beginorder(from.beginorder());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTopListList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTopListList::CopyFrom(const PBC2GTopListList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTopListList::IsInitialized() const {
  
  return true;
}

void PBC2GTopListList::Swap(PBC2GTopListList* other) {
  if (other != this) {
    std::swap(sorttype_, other->sorttype_);
    std::swap(beginorder_, other->beginorder_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTopListList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTopListList_descriptor_;
  metadata.reflection = PBC2GTopListList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTopListOne::kTypeFieldNumber;
const int PBC2GTopListOne::kTargetidFieldNumber;
#endif  // !_MSC_VER

PBC2GTopListOne::PBC2GTopListOne()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTopListOne::InitAsDefaultInstance() {
}

PBC2GTopListOne::PBC2GTopListOne(const PBC2GTopListOne& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTopListOne::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTopListOne::~PBC2GTopListOne() {
  SharedDtor();
}

void PBC2GTopListOne::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTopListOne::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTopListOne::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTopListOne_descriptor_;
}

const PBC2GTopListOne& PBC2GTopListOne::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GTopListOne* PBC2GTopListOne::default_instance_ = NULL;

PBC2GTopListOne* PBC2GTopListOne::New() const {
  return new PBC2GTopListOne;
}

void PBC2GTopListOne::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    targetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTopListOne::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTopListOne::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTopListOne::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTopListOne::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 targetid = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTopListOne::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTopListOne* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTopListOne*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTopListOne::MergeFrom(const PBC2GTopListOne& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTopListOne::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTopListOne::CopyFrom(const PBC2GTopListOne& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTopListOne::IsInitialized() const {
  
  return true;
}

void PBC2GTopListOne::Swap(PBC2GTopListOne* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTopListOne::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTopListOne_descriptor_;
  metadata.reflection = PBC2GTopListOne_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTopListSetClearTime::kTimeFieldNumber;
#endif  // !_MSC_VER

PBC2GTopListSetClearTime::PBC2GTopListSetClearTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTopListSetClearTime::InitAsDefaultInstance() {
}

PBC2GTopListSetClearTime::PBC2GTopListSetClearTime(const PBC2GTopListSetClearTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTopListSetClearTime::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTopListSetClearTime::~PBC2GTopListSetClearTime() {
  SharedDtor();
}

void PBC2GTopListSetClearTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTopListSetClearTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTopListSetClearTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTopListSetClearTime_descriptor_;
}

const PBC2GTopListSetClearTime& PBC2GTopListSetClearTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GTopListSetClearTime* PBC2GTopListSetClearTime::default_instance_ = NULL;

PBC2GTopListSetClearTime* PBC2GTopListSetClearTime::New() const {
  return new PBC2GTopListSetClearTime;
}

void PBC2GTopListSetClearTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTopListSetClearTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTopListSetClearTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTopListSetClearTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTopListSetClearTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTopListSetClearTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTopListSetClearTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTopListSetClearTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTopListSetClearTime::MergeFrom(const PBC2GTopListSetClearTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTopListSetClearTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTopListSetClearTime::CopyFrom(const PBC2GTopListSetClearTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTopListSetClearTime::IsInitialized() const {
  
  return true;
}

void PBC2GTopListSetClearTime::Swap(PBC2GTopListSetClearTime* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTopListSetClearTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTopListSetClearTime_descriptor_;
  metadata.reflection = PBC2GTopListSetClearTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTopListDetail::kViewFieldNumber;
const int PBTopListDetail::kFactionDisplayFieldNumber;
const int PBTopListDetail::kInfoFieldNumber;
const int PBTopListDetail::kOrderFieldNumber;
#endif  // !_MSC_VER

PBTopListDetail::PBTopListDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTopListDetail::InitAsDefaultInstance() {
  view_ = const_cast< ::PBPlayerView*>(&::PBPlayerView::default_instance());
  factiondisplay_ = const_cast< ::PBFactionDisplay*>(&::PBFactionDisplay::default_instance());
  info_ = const_cast< ::PBTopListInfo*>(&::PBTopListInfo::default_instance());
}

PBTopListDetail::PBTopListDetail(const PBTopListDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTopListDetail::SharedCtor() {
  _cached_size_ = 0;
  view_ = NULL;
  factiondisplay_ = NULL;
  info_ = NULL;
  order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTopListDetail::~PBTopListDetail() {
  SharedDtor();
}

void PBTopListDetail::SharedDtor() {
  if (this != default_instance_) {
    delete view_;
    delete factiondisplay_;
    delete info_;
  }
}

void PBTopListDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTopListDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTopListDetail_descriptor_;
}

const PBTopListDetail& PBTopListDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBTopListDetail* PBTopListDetail::default_instance_ = NULL;

PBTopListDetail* PBTopListDetail::New() const {
  return new PBTopListDetail;
}

void PBTopListDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_view()) {
      if (view_ != NULL) view_->::PBPlayerView::Clear();
    }
    if (has_factiondisplay()) {
      if (factiondisplay_ != NULL) factiondisplay_->::PBFactionDisplay::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::PBTopListInfo::Clear();
    }
    order_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTopListDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerView view = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FactionDisplay;
        break;
      }
      
      // optional .PBFactionDisplay FactionDisplay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FactionDisplay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_factiondisplay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional .PBTopListInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_order;
        break;
      }
      
      // optional uint32 order = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTopListDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerView view = 1;
  if (has_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->view(), output);
  }
  
  // optional .PBFactionDisplay FactionDisplay = 2;
  if (has_factiondisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->factiondisplay(), output);
  }
  
  // optional .PBTopListInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }
  
  // optional uint32 order = 4;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->order(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTopListDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerView view = 1;
  if (has_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->view(), target);
  }
  
  // optional .PBFactionDisplay FactionDisplay = 2;
  if (has_factiondisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->factiondisplay(), target);
  }
  
  // optional .PBTopListInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }
  
  // optional uint32 order = 4;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->order(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTopListDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerView view = 1;
    if (has_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->view());
    }
    
    // optional .PBFactionDisplay FactionDisplay = 2;
    if (has_factiondisplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->factiondisplay());
    }
    
    // optional .PBTopListInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional uint32 order = 4;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTopListDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTopListDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTopListDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTopListDetail::MergeFrom(const PBTopListDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_view()) {
      mutable_view()->::PBPlayerView::MergeFrom(from.view());
    }
    if (from.has_factiondisplay()) {
      mutable_factiondisplay()->::PBFactionDisplay::MergeFrom(from.factiondisplay());
    }
    if (from.has_info()) {
      mutable_info()->::PBTopListInfo::MergeFrom(from.info());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTopListDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTopListDetail::CopyFrom(const PBTopListDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTopListDetail::IsInitialized() const {
  
  return true;
}

void PBTopListDetail::Swap(PBTopListDetail* other) {
  if (other != this) {
    std::swap(view_, other->view_);
    std::swap(factiondisplay_, other->factiondisplay_);
    std::swap(info_, other->info_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTopListDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTopListDetail_descriptor_;
  metadata.reflection = PBTopListDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CTopListList::kAskFieldNumber;
const int PBS2CTopListList::kAllcountFieldNumber;
const int PBS2CTopListList::kListFieldNumber;
#endif  // !_MSC_VER

PBS2CTopListList::PBS2CTopListList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CTopListList::InitAsDefaultInstance() {
  ask_ = const_cast< ::PBC2GTopListList*>(&::PBC2GTopListList::default_instance());
}

PBS2CTopListList::PBS2CTopListList(const PBS2CTopListList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CTopListList::SharedCtor() {
  _cached_size_ = 0;
  ask_ = NULL;
  allcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CTopListList::~PBS2CTopListList() {
  SharedDtor();
}

void PBS2CTopListList::SharedDtor() {
  if (this != default_instance_) {
    delete ask_;
  }
}

void PBS2CTopListList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CTopListList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CTopListList_descriptor_;
}

const PBS2CTopListList& PBS2CTopListList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CTopListList* PBS2CTopListList::default_instance_ = NULL;

PBS2CTopListList* PBS2CTopListList::New() const {
  return new PBS2CTopListList;
}

void PBS2CTopListList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ask()) {
      if (ask_ != NULL) ask_->::PBC2GTopListList::Clear();
    }
    allcount_ = 0u;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CTopListList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBC2GTopListList ask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allcount;
        break;
      }
      
      // optional uint32 allcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allcount_)));
          set_has_allcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }
      
      // repeated .PBTopListDetail list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CTopListList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBC2GTopListList ask = 1;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask(), output);
  }
  
  // optional uint32 allcount = 2;
  if (has_allcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allcount(), output);
  }
  
  // repeated .PBTopListDetail list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CTopListList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBC2GTopListList ask = 1;
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask(), target);
  }
  
  // optional uint32 allcount = 2;
  if (has_allcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->allcount(), target);
  }
  
  // repeated .PBTopListDetail list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CTopListList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBC2GTopListList ask = 1;
    if (has_ask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask());
    }
    
    // optional uint32 allcount = 2;
    if (has_allcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allcount());
    }
    
  }
  // repeated .PBTopListDetail list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CTopListList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CTopListList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CTopListList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CTopListList::MergeFrom(const PBS2CTopListList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask()) {
      mutable_ask()->::PBC2GTopListList::MergeFrom(from.ask());
    }
    if (from.has_allcount()) {
      set_allcount(from.allcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CTopListList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CTopListList::CopyFrom(const PBS2CTopListList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CTopListList::IsInitialized() const {
  
  return true;
}

void PBS2CTopListList::Swap(PBS2CTopListList* other) {
  if (other != this) {
    std::swap(ask_, other->ask_);
    std::swap(allcount_, other->allcount_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CTopListList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CTopListList_descriptor_;
  metadata.reflection = PBS2CTopListList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CTopListOne::kAskFieldNumber;
const int PBS2CTopListOne::kDataFieldNumber;
#endif  // !_MSC_VER

PBS2CTopListOne::PBS2CTopListOne()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CTopListOne::InitAsDefaultInstance() {
  ask_ = const_cast< ::PBC2GTopListOne*>(&::PBC2GTopListOne::default_instance());
  data_ = const_cast< ::PBTopListData*>(&::PBTopListData::default_instance());
}

PBS2CTopListOne::PBS2CTopListOne(const PBS2CTopListOne& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CTopListOne::SharedCtor() {
  _cached_size_ = 0;
  ask_ = NULL;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CTopListOne::~PBS2CTopListOne() {
  SharedDtor();
}

void PBS2CTopListOne::SharedDtor() {
  if (this != default_instance_) {
    delete ask_;
    delete data_;
  }
}

void PBS2CTopListOne::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CTopListOne::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CTopListOne_descriptor_;
}

const PBS2CTopListOne& PBS2CTopListOne::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CTopListOne* PBS2CTopListOne::default_instance_ = NULL;

PBS2CTopListOne* PBS2CTopListOne::New() const {
  return new PBS2CTopListOne;
}

void PBS2CTopListOne::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ask()) {
      if (ask_ != NULL) ask_->::PBC2GTopListOne::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::PBTopListData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CTopListOne::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBC2GTopListOne ask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // optional .PBTopListData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CTopListOne::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBC2GTopListOne ask = 1;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask(), output);
  }
  
  // optional .PBTopListData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CTopListOne::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBC2GTopListOne ask = 1;
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask(), target);
  }
  
  // optional .PBTopListData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CTopListOne::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBC2GTopListOne ask = 1;
    if (has_ask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask());
    }
    
    // optional .PBTopListData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CTopListOne::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CTopListOne* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CTopListOne*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CTopListOne::MergeFrom(const PBS2CTopListOne& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask()) {
      mutable_ask()->::PBC2GTopListOne::MergeFrom(from.ask());
    }
    if (from.has_data()) {
      mutable_data()->::PBTopListData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CTopListOne::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CTopListOne::CopyFrom(const PBS2CTopListOne& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CTopListOne::IsInitialized() const {
  
  return true;
}

void PBS2CTopListOne::Swap(PBS2CTopListOne* other) {
  if (other != this) {
    std::swap(ask_, other->ask_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CTopListOne::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CTopListOne_descriptor_;
  metadata.reflection = PBS2CTopListOne_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFriend_AddAsk::kTypeFieldNumber;
const int PBC2GFriend_AddAsk::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBC2GFriend_AddAsk::PBC2GFriend_AddAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFriend_AddAsk::InitAsDefaultInstance() {
}

PBC2GFriend_AddAsk::PBC2GFriend_AddAsk(const PBC2GFriend_AddAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFriend_AddAsk::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFriend_AddAsk::~PBC2GFriend_AddAsk() {
  SharedDtor();
}

void PBC2GFriend_AddAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFriend_AddAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFriend_AddAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFriend_AddAsk_descriptor_;
}

const PBC2GFriend_AddAsk& PBC2GFriend_AddAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GFriend_AddAsk* PBC2GFriend_AddAsk::default_instance_ = NULL;

PBC2GFriend_AddAsk* PBC2GFriend_AddAsk::New() const {
  return new PBC2GFriend_AddAsk;
}

void PBC2GFriend_AddAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFriend_AddAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFriend_AddAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFriend_AddAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFriend_AddAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFriend_AddAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFriend_AddAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFriend_AddAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFriend_AddAsk::MergeFrom(const PBC2GFriend_AddAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFriend_AddAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFriend_AddAsk::CopyFrom(const PBC2GFriend_AddAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFriend_AddAsk::IsInitialized() const {
  
  return true;
}

void PBC2GFriend_AddAsk::Swap(PBC2GFriend_AddAsk* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFriend_AddAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFriend_AddAsk_descriptor_;
  metadata.reflection = PBC2GFriend_AddAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFriend_DelAsk::kTypeFieldNumber;
const int PBC2GFriend_DelAsk::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBC2GFriend_DelAsk::PBC2GFriend_DelAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFriend_DelAsk::InitAsDefaultInstance() {
}

PBC2GFriend_DelAsk::PBC2GFriend_DelAsk(const PBC2GFriend_DelAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFriend_DelAsk::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFriend_DelAsk::~PBC2GFriend_DelAsk() {
  SharedDtor();
}

void PBC2GFriend_DelAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFriend_DelAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFriend_DelAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFriend_DelAsk_descriptor_;
}

const PBC2GFriend_DelAsk& PBC2GFriend_DelAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GFriend_DelAsk* PBC2GFriend_DelAsk::default_instance_ = NULL;

PBC2GFriend_DelAsk* PBC2GFriend_DelAsk::New() const {
  return new PBC2GFriend_DelAsk;
}

void PBC2GFriend_DelAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFriend_DelAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFriend_DelAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFriend_DelAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFriend_DelAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFriend_DelAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFriend_DelAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFriend_DelAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFriend_DelAsk::MergeFrom(const PBC2GFriend_DelAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFriend_DelAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFriend_DelAsk::CopyFrom(const PBC2GFriend_DelAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFriend_DelAsk::IsInitialized() const {
  
  return true;
}

void PBC2GFriend_DelAsk::Swap(PBC2GFriend_DelAsk* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFriend_DelAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFriend_DelAsk_descriptor_;
  metadata.reflection = PBC2GFriend_DelAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFriend_Answer::kTypeFieldNumber;
const int PBC2GFriend_Answer::kTargetidFieldNumber;
#endif  // !_MSC_VER

PBC2GFriend_Answer::PBC2GFriend_Answer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFriend_Answer::InitAsDefaultInstance() {
}

PBC2GFriend_Answer::PBC2GFriend_Answer(const PBC2GFriend_Answer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFriend_Answer::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFriend_Answer::~PBC2GFriend_Answer() {
  SharedDtor();
}

void PBC2GFriend_Answer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFriend_Answer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFriend_Answer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFriend_Answer_descriptor_;
}

const PBC2GFriend_Answer& PBC2GFriend_Answer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GFriend_Answer* PBC2GFriend_Answer::default_instance_ = NULL;

PBC2GFriend_Answer* PBC2GFriend_Answer::New() const {
  return new PBC2GFriend_Answer;
}

void PBC2GFriend_Answer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    targetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFriend_Answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFriend_Answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFriend_Answer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 targetid = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFriend_Answer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 targetid = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFriend_Answer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFriend_Answer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFriend_Answer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFriend_Answer::MergeFrom(const PBC2GFriend_Answer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFriend_Answer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFriend_Answer::CopyFrom(const PBC2GFriend_Answer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFriend_Answer::IsInitialized() const {
  
  return true;
}

void PBC2GFriend_Answer::Swap(PBC2GFriend_Answer* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFriend_Answer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFriend_Answer_descriptor_;
  metadata.reflection = PBC2GFriend_Answer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFriend_Find::kNameFieldNumber;
#endif  // !_MSC_VER

PBC2GFriend_Find::PBC2GFriend_Find()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFriend_Find::InitAsDefaultInstance() {
}

PBC2GFriend_Find::PBC2GFriend_Find(const PBC2GFriend_Find& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFriend_Find::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFriend_Find::~PBC2GFriend_Find() {
  SharedDtor();
}

void PBC2GFriend_Find::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBC2GFriend_Find::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFriend_Find::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFriend_Find_descriptor_;
}

const PBC2GFriend_Find& PBC2GFriend_Find::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GFriend_Find* PBC2GFriend_Find::default_instance_ = NULL;

PBC2GFriend_Find* PBC2GFriend_Find::New() const {
  return new PBC2GFriend_Find;
}

void PBC2GFriend_Find::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFriend_Find::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFriend_Find::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFriend_Find::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFriend_Find::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFriend_Find::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFriend_Find* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFriend_Find*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFriend_Find::MergeFrom(const PBC2GFriend_Find& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFriend_Find::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFriend_Find::CopyFrom(const PBC2GFriend_Find& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFriend_Find::IsInitialized() const {
  
  return true;
}

void PBC2GFriend_Find::Swap(PBC2GFriend_Find* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFriend_Find::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFriend_Find_descriptor_;
  metadata.reflection = PBC2GFriend_Find_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFriendFindInfo::kDisplayFieldNumber;
const int PBFriendFindInfo::kFightpowerFieldNumber;
#endif  // !_MSC_VER

PBFriendFindInfo::PBFriendFindInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFriendFindInfo::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBFriendFindInfo::PBFriendFindInfo(const PBFriendFindInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFriendFindInfo::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  fightpower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFriendFindInfo::~PBFriendFindInfo() {
  SharedDtor();
}

void PBFriendFindInfo::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBFriendFindInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFriendFindInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFriendFindInfo_descriptor_;
}

const PBFriendFindInfo& PBFriendFindInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBFriendFindInfo* PBFriendFindInfo::default_instance_ = NULL;

PBFriendFindInfo* PBFriendFindInfo::New() const {
  return new PBFriendFindInfo;
}

void PBFriendFindInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    fightpower_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFriendFindInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFriendFindInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fightpower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFriendFindInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fightpower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFriendFindInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 fightpower = 2;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFriendFindInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFriendFindInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFriendFindInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFriendFindInfo::MergeFrom(const PBFriendFindInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFriendFindInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriendFindInfo::CopyFrom(const PBFriendFindInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFriendFindInfo::IsInitialized() const {
  
  return true;
}

void PBFriendFindInfo::Swap(PBFriendFindInfo* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFriendFindInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFriendFindInfo_descriptor_;
  metadata.reflection = PBFriendFindInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFriend_Find::kInfoFieldNumber;
#endif  // !_MSC_VER

PBG2CFriend_Find::PBG2CFriend_Find()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFriend_Find::InitAsDefaultInstance() {
}

PBG2CFriend_Find::PBG2CFriend_Find(const PBG2CFriend_Find& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFriend_Find::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFriend_Find::~PBG2CFriend_Find() {
  SharedDtor();
}

void PBG2CFriend_Find::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFriend_Find::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFriend_Find::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFriend_Find_descriptor_;
}

const PBG2CFriend_Find& PBG2CFriend_Find::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CFriend_Find* PBG2CFriend_Find::default_instance_ = NULL;

PBG2CFriend_Find* PBG2CFriend_Find::New() const {
  return new PBG2CFriend_Find;
}

void PBG2CFriend_Find::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFriend_Find::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFriendFindInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFriend_Find::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFriendFindInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFriend_Find::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFriendFindInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFriend_Find::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFriendFindInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFriend_Find::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFriend_Find* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFriend_Find*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFriend_Find::MergeFrom(const PBG2CFriend_Find& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFriend_Find::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFriend_Find::CopyFrom(const PBG2CFriend_Find& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFriend_Find::IsInitialized() const {
  
  return true;
}

void PBG2CFriend_Find::Swap(PBG2CFriend_Find* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFriend_Find::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFriend_Find_descriptor_;
  metadata.reflection = PBG2CFriend_Find_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFriend_AddAskTrasfer::kTypeFieldNumber;
const int PBG2CFriend_AddAskTrasfer::kDisplayFieldNumber;
const int PBG2CFriend_AddAskTrasfer::kFightpowerFieldNumber;
#endif  // !_MSC_VER

PBG2CFriend_AddAskTrasfer::PBG2CFriend_AddAskTrasfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFriend_AddAskTrasfer::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CFriend_AddAskTrasfer::PBG2CFriend_AddAskTrasfer(const PBG2CFriend_AddAskTrasfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFriend_AddAskTrasfer::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  display_ = NULL;
  fightpower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFriend_AddAskTrasfer::~PBG2CFriend_AddAskTrasfer() {
  SharedDtor();
}

void PBG2CFriend_AddAskTrasfer::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBG2CFriend_AddAskTrasfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFriend_AddAskTrasfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFriend_AddAskTrasfer_descriptor_;
}

const PBG2CFriend_AddAskTrasfer& PBG2CFriend_AddAskTrasfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CFriend_AddAskTrasfer* PBG2CFriend_AddAskTrasfer::default_instance_ = NULL;

PBG2CFriend_AddAskTrasfer* PBG2CFriend_AddAskTrasfer::New() const {
  return new PBG2CFriend_AddAskTrasfer;
}

void PBG2CFriend_AddAskTrasfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    fightpower_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFriend_AddAskTrasfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_display;
        break;
      }
      
      // optional .PBPlayerDisplay display = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFriend_AddAskTrasfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->display(), output);
  }
  
  // optional uint32 fightpower = 3;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fightpower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFriend_AddAskTrasfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional .PBPlayerDisplay display = 2;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->display(), target);
  }
  
  // optional uint32 fightpower = 3;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fightpower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFriend_AddAskTrasfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional .PBPlayerDisplay display = 2;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 fightpower = 3;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFriend_AddAskTrasfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFriend_AddAskTrasfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFriend_AddAskTrasfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFriend_AddAskTrasfer::MergeFrom(const PBG2CFriend_AddAskTrasfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFriend_AddAskTrasfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFriend_AddAskTrasfer::CopyFrom(const PBG2CFriend_AddAskTrasfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFriend_AddAskTrasfer::IsInitialized() const {
  
  return true;
}

void PBG2CFriend_AddAskTrasfer::Swap(PBG2CFriend_AddAskTrasfer* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(display_, other->display_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFriend_AddAskTrasfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFriend_AddAskTrasfer_descriptor_;
  metadata.reflection = PBG2CFriend_AddAskTrasfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFriend_Info::kTypeFieldNumber;
const int PBG2CFriend_Info::kInfoFieldNumber;
#endif  // !_MSC_VER

PBG2CFriend_Info::PBG2CFriend_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFriend_Info::InitAsDefaultInstance() {
  info_ = const_cast< ::PBFriendInfo*>(&::PBFriendInfo::default_instance());
}

PBG2CFriend_Info::PBG2CFriend_Info(const PBG2CFriend_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFriend_Info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFriend_Info::~PBG2CFriend_Info() {
  SharedDtor();
}

void PBG2CFriend_Info::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PBG2CFriend_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFriend_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFriend_Info_descriptor_;
}

const PBG2CFriend_Info& PBG2CFriend_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CFriend_Info* PBG2CFriend_Info::default_instance_ = NULL;

PBG2CFriend_Info* PBG2CFriend_Info::New() const {
  return new PBG2CFriend_Info;
}

void PBG2CFriend_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::PBFriendInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFriend_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional .PBFriendInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFriend_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional .PBFriendInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFriend_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional .PBFriendInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFriend_Info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional .PBFriendInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFriend_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFriend_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFriend_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFriend_Info::MergeFrom(const PBG2CFriend_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::PBFriendInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFriend_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFriend_Info::CopyFrom(const PBG2CFriend_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFriend_Info::IsInitialized() const {
  
  return true;
}

void PBG2CFriend_Info::Swap(PBG2CFriend_Info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFriend_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFriend_Info_descriptor_;
  metadata.reflection = PBG2CFriend_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCommon_PKType::kPktypeFieldNumber;
#endif  // !_MSC_VER

PBC2GCommon_PKType::PBC2GCommon_PKType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommon_PKType::InitAsDefaultInstance() {
}

PBC2GCommon_PKType::PBC2GCommon_PKType(const PBC2GCommon_PKType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommon_PKType::SharedCtor() {
  _cached_size_ = 0;
  pktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommon_PKType::~PBC2GCommon_PKType() {
  SharedDtor();
}

void PBC2GCommon_PKType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommon_PKType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommon_PKType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommon_PKType_descriptor_;
}

const PBC2GCommon_PKType& PBC2GCommon_PKType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommon_PKType* PBC2GCommon_PKType::default_instance_ = NULL;

PBC2GCommon_PKType* PBC2GCommon_PKType::New() const {
  return new PBC2GCommon_PKType;
}

void PBC2GCommon_PKType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pktype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommon_PKType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pktype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pktype_)));
          set_has_pktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCommon_PKType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pktype = 1;
  if (has_pktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pktype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommon_PKType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pktype = 1;
  if (has_pktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pktype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommon_PKType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pktype = 1;
    if (has_pktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pktype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommon_PKType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommon_PKType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommon_PKType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommon_PKType::MergeFrom(const PBC2GCommon_PKType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pktype()) {
      set_pktype(from.pktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommon_PKType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommon_PKType::CopyFrom(const PBC2GCommon_PKType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommon_PKType::IsInitialized() const {
  
  return true;
}

void PBC2GCommon_PKType::Swap(PBC2GCommon_PKType* other) {
  if (other != this) {
    std::swap(pktype_, other->pktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommon_PKType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommon_PKType_descriptor_;
  metadata.reflection = PBC2GCommon_PKType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommon_PKType::kPktypeFieldNumber;
#endif  // !_MSC_VER

PBG2CCommon_PKType::PBG2CCommon_PKType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_PKType::InitAsDefaultInstance() {
}

PBG2CCommon_PKType::PBG2CCommon_PKType(const PBG2CCommon_PKType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_PKType::SharedCtor() {
  _cached_size_ = 0;
  pktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_PKType::~PBG2CCommon_PKType() {
  SharedDtor();
}

void PBG2CCommon_PKType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_PKType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_PKType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_PKType_descriptor_;
}

const PBG2CCommon_PKType& PBG2CCommon_PKType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_PKType* PBG2CCommon_PKType::default_instance_ = NULL;

PBG2CCommon_PKType* PBG2CCommon_PKType::New() const {
  return new PBG2CCommon_PKType;
}

void PBG2CCommon_PKType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pktype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_PKType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pktype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pktype_)));
          set_has_pktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommon_PKType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pktype = 1;
  if (has_pktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pktype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_PKType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pktype = 1;
  if (has_pktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pktype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_PKType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pktype = 1;
    if (has_pktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pktype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_PKType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_PKType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_PKType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_PKType::MergeFrom(const PBG2CCommon_PKType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pktype()) {
      set_pktype(from.pktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_PKType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_PKType::CopyFrom(const PBG2CCommon_PKType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_PKType::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_PKType::Swap(PBG2CCommon_PKType* other) {
  if (other != this) {
    std::swap(pktype_, other->pktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_PKType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_PKType_descriptor_;
  metadata.reflection = PBG2CCommon_PKType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCommonForbitSpeakAsk::kChannelFieldNumber;
const int PBC2GCommonForbitSpeakAsk::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBC2GCommonForbitSpeakAsk::PBC2GCommonForbitSpeakAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommonForbitSpeakAsk::InitAsDefaultInstance() {
}

PBC2GCommonForbitSpeakAsk::PBC2GCommonForbitSpeakAsk(const PBC2GCommonForbitSpeakAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommonForbitSpeakAsk::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommonForbitSpeakAsk::~PBC2GCommonForbitSpeakAsk() {
  SharedDtor();
}

void PBC2GCommonForbitSpeakAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommonForbitSpeakAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommonForbitSpeakAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommonForbitSpeakAsk_descriptor_;
}

const PBC2GCommonForbitSpeakAsk& PBC2GCommonForbitSpeakAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommonForbitSpeakAsk* PBC2GCommonForbitSpeakAsk::default_instance_ = NULL;

PBC2GCommonForbitSpeakAsk* PBC2GCommonForbitSpeakAsk::New() const {
  return new PBC2GCommonForbitSpeakAsk;
}

void PBC2GCommonForbitSpeakAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommonForbitSpeakAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }
      
      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCommonForbitSpeakAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommonForbitSpeakAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }
  
  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommonForbitSpeakAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }
    
    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommonForbitSpeakAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommonForbitSpeakAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommonForbitSpeakAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommonForbitSpeakAsk::MergeFrom(const PBC2GCommonForbitSpeakAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommonForbitSpeakAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommonForbitSpeakAsk::CopyFrom(const PBC2GCommonForbitSpeakAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommonForbitSpeakAsk::IsInitialized() const {
  
  return true;
}

void PBC2GCommonForbitSpeakAsk::Swap(PBC2GCommonForbitSpeakAsk* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommonForbitSpeakAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommonForbitSpeakAsk_descriptor_;
  metadata.reflection = PBC2GCommonForbitSpeakAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCommonStrongerReWard::kUIDFieldNumber;
#endif  // !_MSC_VER

PBC2GCommonStrongerReWard::PBC2GCommonStrongerReWard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommonStrongerReWard::InitAsDefaultInstance() {
}

PBC2GCommonStrongerReWard::PBC2GCommonStrongerReWard(const PBC2GCommonStrongerReWard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommonStrongerReWard::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommonStrongerReWard::~PBC2GCommonStrongerReWard() {
  SharedDtor();
}

void PBC2GCommonStrongerReWard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommonStrongerReWard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommonStrongerReWard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommonStrongerReWard_descriptor_;
}

const PBC2GCommonStrongerReWard& PBC2GCommonStrongerReWard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommonStrongerReWard* PBC2GCommonStrongerReWard::default_instance_ = NULL;

PBC2GCommonStrongerReWard* PBC2GCommonStrongerReWard::New() const {
  return new PBC2GCommonStrongerReWard;
}

void PBC2GCommonStrongerReWard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommonStrongerReWard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCommonStrongerReWard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uID = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommonStrongerReWard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uID = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommonStrongerReWard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uID = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommonStrongerReWard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommonStrongerReWard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommonStrongerReWard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommonStrongerReWard::MergeFrom(const PBC2GCommonStrongerReWard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommonStrongerReWard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommonStrongerReWard::CopyFrom(const PBC2GCommonStrongerReWard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommonStrongerReWard::IsInitialized() const {
  
  return true;
}

void PBC2GCommonStrongerReWard::Swap(PBC2GCommonStrongerReWard* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommonStrongerReWard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommonStrongerReWard_descriptor_;
  metadata.reflection = PBC2GCommonStrongerReWard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2GCommonSubFightPower::PBC2GCommonSubFightPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommonSubFightPower::InitAsDefaultInstance() {
}

PBC2GCommonSubFightPower::PBC2GCommonSubFightPower(const PBC2GCommonSubFightPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommonSubFightPower::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommonSubFightPower::~PBC2GCommonSubFightPower() {
  SharedDtor();
}

void PBC2GCommonSubFightPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommonSubFightPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommonSubFightPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommonSubFightPower_descriptor_;
}

const PBC2GCommonSubFightPower& PBC2GCommonSubFightPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommonSubFightPower* PBC2GCommonSubFightPower::default_instance_ = NULL;

PBC2GCommonSubFightPower* PBC2GCommonSubFightPower::New() const {
  return new PBC2GCommonSubFightPower;
}

void PBC2GCommonSubFightPower::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommonSubFightPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2GCommonSubFightPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommonSubFightPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommonSubFightPower::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommonSubFightPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommonSubFightPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommonSubFightPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommonSubFightPower::MergeFrom(const PBC2GCommonSubFightPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommonSubFightPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommonSubFightPower::CopyFrom(const PBC2GCommonSubFightPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommonSubFightPower::IsInitialized() const {
  
  return true;
}

void PBC2GCommonSubFightPower::Swap(PBC2GCommonSubFightPower* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommonSubFightPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommonSubFightPower_descriptor_;
  metadata.reflection = PBC2GCommonSubFightPower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCopymapUnactive::kUnitidFieldNumber;
#endif  // !_MSC_VER

PBC2GCopymapUnactive::PBC2GCopymapUnactive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCopymapUnactive::InitAsDefaultInstance() {
}

PBC2GCopymapUnactive::PBC2GCopymapUnactive(const PBC2GCopymapUnactive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCopymapUnactive::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCopymapUnactive::~PBC2GCopymapUnactive() {
  SharedDtor();
}

void PBC2GCopymapUnactive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCopymapUnactive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCopymapUnactive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCopymapUnactive_descriptor_;
}

const PBC2GCopymapUnactive& PBC2GCopymapUnactive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCopymapUnactive* PBC2GCopymapUnactive::default_instance_ = NULL;

PBC2GCopymapUnactive* PBC2GCopymapUnactive::New() const {
  return new PBC2GCopymapUnactive;
}

void PBC2GCopymapUnactive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCopymapUnactive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCopymapUnactive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCopymapUnactive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCopymapUnactive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unitid = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCopymapUnactive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCopymapUnactive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCopymapUnactive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCopymapUnactive::MergeFrom(const PBC2GCopymapUnactive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCopymapUnactive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCopymapUnactive::CopyFrom(const PBC2GCopymapUnactive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCopymapUnactive::IsInitialized() const {
  
  return true;
}

void PBC2GCopymapUnactive::Swap(PBC2GCopymapUnactive* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCopymapUnactive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCopymapUnactive_descriptor_;
  metadata.reflection = PBC2GCopymapUnactive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2Relive_SceneBorn::kFreecountFieldNumber;
const int PBG2Relive_SceneBorn::kRelivecountFieldNumber;
#endif  // !_MSC_VER

PBG2Relive_SceneBorn::PBG2Relive_SceneBorn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2Relive_SceneBorn::InitAsDefaultInstance() {
}

PBG2Relive_SceneBorn::PBG2Relive_SceneBorn(const PBG2Relive_SceneBorn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2Relive_SceneBorn::SharedCtor() {
  _cached_size_ = 0;
  freecount_ = 0u;
  relivecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2Relive_SceneBorn::~PBG2Relive_SceneBorn() {
  SharedDtor();
}

void PBG2Relive_SceneBorn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2Relive_SceneBorn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2Relive_SceneBorn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2Relive_SceneBorn_descriptor_;
}

const PBG2Relive_SceneBorn& PBG2Relive_SceneBorn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2Relive_SceneBorn* PBG2Relive_SceneBorn::default_instance_ = NULL;

PBG2Relive_SceneBorn* PBG2Relive_SceneBorn::New() const {
  return new PBG2Relive_SceneBorn;
}

void PBG2Relive_SceneBorn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    freecount_ = 0u;
    relivecount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2Relive_SceneBorn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 freecount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freecount_)));
          set_has_freecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_relivecount;
        break;
      }
      
      // optional uint32 relivecount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relivecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relivecount_)));
          set_has_relivecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2Relive_SceneBorn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 freecount = 1;
  if (has_freecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->freecount(), output);
  }
  
  // optional uint32 relivecount = 2;
  if (has_relivecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->relivecount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2Relive_SceneBorn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 freecount = 1;
  if (has_freecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->freecount(), target);
  }
  
  // optional uint32 relivecount = 2;
  if (has_relivecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->relivecount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2Relive_SceneBorn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 freecount = 1;
    if (has_freecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freecount());
    }
    
    // optional uint32 relivecount = 2;
    if (has_relivecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relivecount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2Relive_SceneBorn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2Relive_SceneBorn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2Relive_SceneBorn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2Relive_SceneBorn::MergeFrom(const PBG2Relive_SceneBorn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freecount()) {
      set_freecount(from.freecount());
    }
    if (from.has_relivecount()) {
      set_relivecount(from.relivecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2Relive_SceneBorn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2Relive_SceneBorn::CopyFrom(const PBG2Relive_SceneBorn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2Relive_SceneBorn::IsInitialized() const {
  
  return true;
}

void PBG2Relive_SceneBorn::Swap(PBG2Relive_SceneBorn* other) {
  if (other != this) {
    std::swap(freecount_, other->freecount_);
    std::swap(relivecount_, other->relivecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2Relive_SceneBorn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2Relive_SceneBorn_descriptor_;
  metadata.reflection = PBG2Relive_SceneBorn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommon_TimeEvent::kNewdayFieldNumber;
const int PBG2CCommon_TimeEvent::kNewweekFieldNumber;
const int PBG2CCommon_TimeEvent::kNewmonthFieldNumber;
#endif  // !_MSC_VER

PBG2CCommon_TimeEvent::PBG2CCommon_TimeEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_TimeEvent::InitAsDefaultInstance() {
}

PBG2CCommon_TimeEvent::PBG2CCommon_TimeEvent(const PBG2CCommon_TimeEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_TimeEvent::SharedCtor() {
  _cached_size_ = 0;
  newday_ = false;
  newweek_ = false;
  newmonth_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_TimeEvent::~PBG2CCommon_TimeEvent() {
  SharedDtor();
}

void PBG2CCommon_TimeEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_TimeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_TimeEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_TimeEvent_descriptor_;
}

const PBG2CCommon_TimeEvent& PBG2CCommon_TimeEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_TimeEvent* PBG2CCommon_TimeEvent::default_instance_ = NULL;

PBG2CCommon_TimeEvent* PBG2CCommon_TimeEvent::New() const {
  return new PBG2CCommon_TimeEvent;
}

void PBG2CCommon_TimeEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newday_ = false;
    newweek_ = false;
    newmonth_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_TimeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool newday = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newday_)));
          set_has_newday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newweek;
        break;
      }
      
      // optional bool newweek = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newweek:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newweek_)));
          set_has_newweek();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newmonth;
        break;
      }
      
      // optional bool newmonth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newmonth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newmonth_)));
          set_has_newmonth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommon_TimeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool newday = 1;
  if (has_newday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->newday(), output);
  }
  
  // optional bool newweek = 2;
  if (has_newweek()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->newweek(), output);
  }
  
  // optional bool newmonth = 3;
  if (has_newmonth()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->newmonth(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_TimeEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool newday = 1;
  if (has_newday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->newday(), target);
  }
  
  // optional bool newweek = 2;
  if (has_newweek()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->newweek(), target);
  }
  
  // optional bool newmonth = 3;
  if (has_newmonth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->newmonth(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_TimeEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool newday = 1;
    if (has_newday()) {
      total_size += 1 + 1;
    }
    
    // optional bool newweek = 2;
    if (has_newweek()) {
      total_size += 1 + 1;
    }
    
    // optional bool newmonth = 3;
    if (has_newmonth()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_TimeEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_TimeEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_TimeEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_TimeEvent::MergeFrom(const PBG2CCommon_TimeEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newday()) {
      set_newday(from.newday());
    }
    if (from.has_newweek()) {
      set_newweek(from.newweek());
    }
    if (from.has_newmonth()) {
      set_newmonth(from.newmonth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_TimeEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_TimeEvent::CopyFrom(const PBG2CCommon_TimeEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_TimeEvent::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_TimeEvent::Swap(PBG2CCommon_TimeEvent* other) {
  if (other != this) {
    std::swap(newday_, other->newday_);
    std::swap(newweek_, other->newweek_);
    std::swap(newmonth_, other->newmonth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_TimeEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_TimeEvent_descriptor_;
  metadata.reflection = PBG2CCommon_TimeEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWenTao_SetBingFa::kIndexFieldNumber;
const int PBC2SWenTao_SetBingFa::kBingfaidFieldNumber;
#endif  // !_MSC_VER

PBC2SWenTao_SetBingFa::PBC2SWenTao_SetBingFa()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWenTao_SetBingFa::InitAsDefaultInstance() {
}

PBC2SWenTao_SetBingFa::PBC2SWenTao_SetBingFa(const PBC2SWenTao_SetBingFa& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWenTao_SetBingFa::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  bingfaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWenTao_SetBingFa::~PBC2SWenTao_SetBingFa() {
  SharedDtor();
}

void PBC2SWenTao_SetBingFa::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWenTao_SetBingFa::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWenTao_SetBingFa::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWenTao_SetBingFa_descriptor_;
}

const PBC2SWenTao_SetBingFa& PBC2SWenTao_SetBingFa::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWenTao_SetBingFa* PBC2SWenTao_SetBingFa::default_instance_ = NULL;

PBC2SWenTao_SetBingFa* PBC2SWenTao_SetBingFa::New() const {
  return new PBC2SWenTao_SetBingFa;
}

void PBC2SWenTao_SetBingFa::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    bingfaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWenTao_SetBingFa::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bingfaid;
        break;
      }
      
      // optional uint32 bingfaid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bingfaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfaid_)));
          set_has_bingfaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWenTao_SetBingFa::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // optional uint32 bingfaid = 2;
  if (has_bingfaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bingfaid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWenTao_SetBingFa::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // optional uint32 bingfaid = 2;
  if (has_bingfaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bingfaid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWenTao_SetBingFa::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // optional uint32 bingfaid = 2;
    if (has_bingfaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfaid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWenTao_SetBingFa::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWenTao_SetBingFa* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWenTao_SetBingFa*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWenTao_SetBingFa::MergeFrom(const PBC2SWenTao_SetBingFa& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_bingfaid()) {
      set_bingfaid(from.bingfaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWenTao_SetBingFa::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWenTao_SetBingFa::CopyFrom(const PBC2SWenTao_SetBingFa& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWenTao_SetBingFa::IsInitialized() const {
  
  return true;
}

void PBC2SWenTao_SetBingFa::Swap(PBC2SWenTao_SetBingFa* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(bingfaid_, other->bingfaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWenTao_SetBingFa::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWenTao_SetBingFa_descriptor_;
  metadata.reflection = PBC2SWenTao_SetBingFa_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWenTao_SetScheme::kSchemeidFieldNumber;
const int PBC2SWenTao_SetScheme::kInfoFieldNumber;
#endif  // !_MSC_VER

PBC2SWenTao_SetScheme::PBC2SWenTao_SetScheme()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWenTao_SetScheme::InitAsDefaultInstance() {
}

PBC2SWenTao_SetScheme::PBC2SWenTao_SetScheme(const PBC2SWenTao_SetScheme& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWenTao_SetScheme::SharedCtor() {
  _cached_size_ = 0;
  schemeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWenTao_SetScheme::~PBC2SWenTao_SetScheme() {
  SharedDtor();
}

void PBC2SWenTao_SetScheme::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWenTao_SetScheme::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWenTao_SetScheme::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWenTao_SetScheme_descriptor_;
}

const PBC2SWenTao_SetScheme& PBC2SWenTao_SetScheme::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWenTao_SetScheme* PBC2SWenTao_SetScheme::default_instance_ = NULL;

PBC2SWenTao_SetScheme* PBC2SWenTao_SetScheme::New() const {
  return new PBC2SWenTao_SetScheme;
}

void PBC2SWenTao_SetScheme::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemeid_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWenTao_SetScheme::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemeid_)));
          set_has_schemeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // repeated .PBC2SWenTao_SetBingFa info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWenTao_SetScheme::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemeid = 1;
  if (has_schemeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemeid(), output);
  }
  
  // repeated .PBC2SWenTao_SetBingFa info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWenTao_SetScheme::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemeid = 1;
  if (has_schemeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemeid(), target);
  }
  
  // repeated .PBC2SWenTao_SetBingFa info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWenTao_SetScheme::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemeid = 1;
    if (has_schemeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemeid());
    }
    
  }
  // repeated .PBC2SWenTao_SetBingFa info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWenTao_SetScheme::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWenTao_SetScheme* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWenTao_SetScheme*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWenTao_SetScheme::MergeFrom(const PBC2SWenTao_SetScheme& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemeid()) {
      set_schemeid(from.schemeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWenTao_SetScheme::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWenTao_SetScheme::CopyFrom(const PBC2SWenTao_SetScheme& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWenTao_SetScheme::IsInitialized() const {
  
  return true;
}

void PBC2SWenTao_SetScheme::Swap(PBC2SWenTao_SetScheme* other) {
  if (other != this) {
    std::swap(schemeid_, other->schemeid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWenTao_SetScheme::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWenTao_SetScheme_descriptor_;
  metadata.reflection = PBC2SWenTao_SetScheme_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWenTao_QianXiu::kBingfaidFieldNumber;
#endif  // !_MSC_VER

PBC2SWenTao_QianXiu::PBC2SWenTao_QianXiu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWenTao_QianXiu::InitAsDefaultInstance() {
}

PBC2SWenTao_QianXiu::PBC2SWenTao_QianXiu(const PBC2SWenTao_QianXiu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWenTao_QianXiu::SharedCtor() {
  _cached_size_ = 0;
  bingfaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWenTao_QianXiu::~PBC2SWenTao_QianXiu() {
  SharedDtor();
}

void PBC2SWenTao_QianXiu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWenTao_QianXiu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWenTao_QianXiu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWenTao_QianXiu_descriptor_;
}

const PBC2SWenTao_QianXiu& PBC2SWenTao_QianXiu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWenTao_QianXiu* PBC2SWenTao_QianXiu::default_instance_ = NULL;

PBC2SWenTao_QianXiu* PBC2SWenTao_QianXiu::New() const {
  return new PBC2SWenTao_QianXiu;
}

void PBC2SWenTao_QianXiu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bingfaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWenTao_QianXiu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bingfaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfaid_)));
          set_has_bingfaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWenTao_QianXiu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bingfaid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWenTao_QianXiu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bingfaid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWenTao_QianXiu::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bingfaid = 1;
    if (has_bingfaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfaid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWenTao_QianXiu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWenTao_QianXiu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWenTao_QianXiu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWenTao_QianXiu::MergeFrom(const PBC2SWenTao_QianXiu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bingfaid()) {
      set_bingfaid(from.bingfaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWenTao_QianXiu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWenTao_QianXiu::CopyFrom(const PBC2SWenTao_QianXiu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWenTao_QianXiu::IsInitialized() const {
  
  return true;
}

void PBC2SWenTao_QianXiu::Swap(PBC2SWenTao_QianXiu* other) {
  if (other != this) {
    std::swap(bingfaid_, other->bingfaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWenTao_QianXiu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWenTao_QianXiu_descriptor_;
  metadata.reflection = PBC2SWenTao_QianXiu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWenTao_TuPo::kBingfaidFieldNumber;
#endif  // !_MSC_VER

PBC2SWenTao_TuPo::PBC2SWenTao_TuPo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWenTao_TuPo::InitAsDefaultInstance() {
}

PBC2SWenTao_TuPo::PBC2SWenTao_TuPo(const PBC2SWenTao_TuPo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWenTao_TuPo::SharedCtor() {
  _cached_size_ = 0;
  bingfaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWenTao_TuPo::~PBC2SWenTao_TuPo() {
  SharedDtor();
}

void PBC2SWenTao_TuPo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWenTao_TuPo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWenTao_TuPo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWenTao_TuPo_descriptor_;
}

const PBC2SWenTao_TuPo& PBC2SWenTao_TuPo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWenTao_TuPo* PBC2SWenTao_TuPo::default_instance_ = NULL;

PBC2SWenTao_TuPo* PBC2SWenTao_TuPo::New() const {
  return new PBC2SWenTao_TuPo;
}

void PBC2SWenTao_TuPo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bingfaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWenTao_TuPo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bingfaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfaid_)));
          set_has_bingfaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWenTao_TuPo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bingfaid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWenTao_TuPo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bingfaid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWenTao_TuPo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bingfaid = 1;
    if (has_bingfaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfaid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWenTao_TuPo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWenTao_TuPo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWenTao_TuPo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWenTao_TuPo::MergeFrom(const PBC2SWenTao_TuPo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bingfaid()) {
      set_bingfaid(from.bingfaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWenTao_TuPo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWenTao_TuPo::CopyFrom(const PBC2SWenTao_TuPo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWenTao_TuPo::IsInitialized() const {
  
  return true;
}

void PBC2SWenTao_TuPo::Swap(PBC2SWenTao_TuPo* other) {
  if (other != this) {
    std::swap(bingfaid_, other->bingfaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWenTao_TuPo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWenTao_TuPo_descriptor_;
  metadata.reflection = PBC2SWenTao_TuPo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWenTao_Upgrate::kBingfaidFieldNumber;
const int PBC2SWenTao_Upgrate::kYaodianidFieldNumber;
#endif  // !_MSC_VER

PBC2SWenTao_Upgrate::PBC2SWenTao_Upgrate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWenTao_Upgrate::InitAsDefaultInstance() {
}

PBC2SWenTao_Upgrate::PBC2SWenTao_Upgrate(const PBC2SWenTao_Upgrate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWenTao_Upgrate::SharedCtor() {
  _cached_size_ = 0;
  bingfaid_ = 0u;
  yaodianid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWenTao_Upgrate::~PBC2SWenTao_Upgrate() {
  SharedDtor();
}

void PBC2SWenTao_Upgrate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWenTao_Upgrate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWenTao_Upgrate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWenTao_Upgrate_descriptor_;
}

const PBC2SWenTao_Upgrate& PBC2SWenTao_Upgrate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWenTao_Upgrate* PBC2SWenTao_Upgrate::default_instance_ = NULL;

PBC2SWenTao_Upgrate* PBC2SWenTao_Upgrate::New() const {
  return new PBC2SWenTao_Upgrate;
}

void PBC2SWenTao_Upgrate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bingfaid_ = 0u;
    yaodianid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWenTao_Upgrate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bingfaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfaid_)));
          set_has_bingfaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_yaodianid;
        break;
      }
      
      // optional uint32 yaodianid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaodianid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaodianid_)));
          set_has_yaodianid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWenTao_Upgrate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bingfaid(), output);
  }
  
  // optional uint32 yaodianid = 2;
  if (has_yaodianid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->yaodianid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWenTao_Upgrate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bingfaid(), target);
  }
  
  // optional uint32 yaodianid = 2;
  if (has_yaodianid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->yaodianid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWenTao_Upgrate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bingfaid = 1;
    if (has_bingfaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfaid());
    }
    
    // optional uint32 yaodianid = 2;
    if (has_yaodianid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yaodianid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWenTao_Upgrate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWenTao_Upgrate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWenTao_Upgrate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWenTao_Upgrate::MergeFrom(const PBC2SWenTao_Upgrate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bingfaid()) {
      set_bingfaid(from.bingfaid());
    }
    if (from.has_yaodianid()) {
      set_yaodianid(from.yaodianid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWenTao_Upgrate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWenTao_Upgrate::CopyFrom(const PBC2SWenTao_Upgrate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWenTao_Upgrate::IsInitialized() const {
  
  return true;
}

void PBC2SWenTao_Upgrate::Swap(PBC2SWenTao_Upgrate* other) {
  if (other != this) {
    std::swap(bingfaid_, other->bingfaid_);
    std::swap(yaodianid_, other->yaodianid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWenTao_Upgrate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWenTao_Upgrate_descriptor_;
  metadata.reflection = PBC2SWenTao_Upgrate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWenTao_SetBingfu::kBingfaidFieldNumber;
const int PBC2SWenTao_SetBingfu::kYaodianidFieldNumber;
const int PBC2SWenTao_SetBingfu::kBingfusnFieldNumber;
#endif  // !_MSC_VER

PBC2SWenTao_SetBingfu::PBC2SWenTao_SetBingfu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWenTao_SetBingfu::InitAsDefaultInstance() {
}

PBC2SWenTao_SetBingfu::PBC2SWenTao_SetBingfu(const PBC2SWenTao_SetBingfu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWenTao_SetBingfu::SharedCtor() {
  _cached_size_ = 0;
  bingfaid_ = 0u;
  yaodianid_ = 0u;
  bingfusn_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWenTao_SetBingfu::~PBC2SWenTao_SetBingfu() {
  SharedDtor();
}

void PBC2SWenTao_SetBingfu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWenTao_SetBingfu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWenTao_SetBingfu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWenTao_SetBingfu_descriptor_;
}

const PBC2SWenTao_SetBingfu& PBC2SWenTao_SetBingfu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWenTao_SetBingfu* PBC2SWenTao_SetBingfu::default_instance_ = NULL;

PBC2SWenTao_SetBingfu* PBC2SWenTao_SetBingfu::New() const {
  return new PBC2SWenTao_SetBingfu;
}

void PBC2SWenTao_SetBingfu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bingfaid_ = 0u;
    yaodianid_ = 0u;
    bingfusn_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWenTao_SetBingfu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bingfaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfaid_)));
          set_has_bingfaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_yaodianid;
        break;
      }
      
      // optional uint32 yaodianid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaodianid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaodianid_)));
          set_has_yaodianid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bingfusn;
        break;
      }
      
      // optional uint32 bingfusn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bingfusn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfusn_)));
          set_has_bingfusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWenTao_SetBingfu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bingfaid(), output);
  }
  
  // optional uint32 yaodianid = 2;
  if (has_yaodianid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->yaodianid(), output);
  }
  
  // optional uint32 bingfusn = 3;
  if (has_bingfusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bingfusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWenTao_SetBingfu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bingfaid(), target);
  }
  
  // optional uint32 yaodianid = 2;
  if (has_yaodianid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->yaodianid(), target);
  }
  
  // optional uint32 bingfusn = 3;
  if (has_bingfusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bingfusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWenTao_SetBingfu::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bingfaid = 1;
    if (has_bingfaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfaid());
    }
    
    // optional uint32 yaodianid = 2;
    if (has_yaodianid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yaodianid());
    }
    
    // optional uint32 bingfusn = 3;
    if (has_bingfusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfusn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWenTao_SetBingfu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWenTao_SetBingfu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWenTao_SetBingfu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWenTao_SetBingfu::MergeFrom(const PBC2SWenTao_SetBingfu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bingfaid()) {
      set_bingfaid(from.bingfaid());
    }
    if (from.has_yaodianid()) {
      set_yaodianid(from.yaodianid());
    }
    if (from.has_bingfusn()) {
      set_bingfusn(from.bingfusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWenTao_SetBingfu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWenTao_SetBingfu::CopyFrom(const PBC2SWenTao_SetBingfu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWenTao_SetBingfu::IsInitialized() const {
  
  return true;
}

void PBC2SWenTao_SetBingfu::Swap(PBC2SWenTao_SetBingfu* other) {
  if (other != this) {
    std::swap(bingfaid_, other->bingfaid_);
    std::swap(yaodianid_, other->yaodianid_);
    std::swap(bingfusn_, other->bingfusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWenTao_SetBingfu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWenTao_SetBingfu_descriptor_;
  metadata.reflection = PBC2SWenTao_SetBingfu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWenTao_Reset::kBingfaidFieldNumber;
#endif  // !_MSC_VER

PBC2SWenTao_Reset::PBC2SWenTao_Reset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWenTao_Reset::InitAsDefaultInstance() {
}

PBC2SWenTao_Reset::PBC2SWenTao_Reset(const PBC2SWenTao_Reset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWenTao_Reset::SharedCtor() {
  _cached_size_ = 0;
  bingfaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWenTao_Reset::~PBC2SWenTao_Reset() {
  SharedDtor();
}

void PBC2SWenTao_Reset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWenTao_Reset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWenTao_Reset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWenTao_Reset_descriptor_;
}

const PBC2SWenTao_Reset& PBC2SWenTao_Reset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWenTao_Reset* PBC2SWenTao_Reset::default_instance_ = NULL;

PBC2SWenTao_Reset* PBC2SWenTao_Reset::New() const {
  return new PBC2SWenTao_Reset;
}

void PBC2SWenTao_Reset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bingfaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWenTao_Reset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bingfaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfaid_)));
          set_has_bingfaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWenTao_Reset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bingfaid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWenTao_Reset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bingfaid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWenTao_Reset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bingfaid = 1;
    if (has_bingfaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfaid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWenTao_Reset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWenTao_Reset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWenTao_Reset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWenTao_Reset::MergeFrom(const PBC2SWenTao_Reset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bingfaid()) {
      set_bingfaid(from.bingfaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWenTao_Reset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWenTao_Reset::CopyFrom(const PBC2SWenTao_Reset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWenTao_Reset::IsInitialized() const {
  
  return true;
}

void PBC2SWenTao_Reset::Swap(PBC2SWenTao_Reset* other) {
  if (other != this) {
    std::swap(bingfaid_, other->bingfaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWenTao_Reset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWenTao_Reset_descriptor_;
  metadata.reflection = PBC2SWenTao_Reset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWenTao_ActiveScheme::kSchemeidFieldNumber;
#endif  // !_MSC_VER

PBC2SWenTao_ActiveScheme::PBC2SWenTao_ActiveScheme()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWenTao_ActiveScheme::InitAsDefaultInstance() {
}

PBC2SWenTao_ActiveScheme::PBC2SWenTao_ActiveScheme(const PBC2SWenTao_ActiveScheme& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWenTao_ActiveScheme::SharedCtor() {
  _cached_size_ = 0;
  schemeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWenTao_ActiveScheme::~PBC2SWenTao_ActiveScheme() {
  SharedDtor();
}

void PBC2SWenTao_ActiveScheme::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWenTao_ActiveScheme::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWenTao_ActiveScheme::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWenTao_ActiveScheme_descriptor_;
}

const PBC2SWenTao_ActiveScheme& PBC2SWenTao_ActiveScheme::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWenTao_ActiveScheme* PBC2SWenTao_ActiveScheme::default_instance_ = NULL;

PBC2SWenTao_ActiveScheme* PBC2SWenTao_ActiveScheme::New() const {
  return new PBC2SWenTao_ActiveScheme;
}

void PBC2SWenTao_ActiveScheme::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWenTao_ActiveScheme::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemeid_)));
          set_has_schemeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWenTao_ActiveScheme::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemeid = 1;
  if (has_schemeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWenTao_ActiveScheme::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemeid = 1;
  if (has_schemeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWenTao_ActiveScheme::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemeid = 1;
    if (has_schemeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWenTao_ActiveScheme::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWenTao_ActiveScheme* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWenTao_ActiveScheme*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWenTao_ActiveScheme::MergeFrom(const PBC2SWenTao_ActiveScheme& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemeid()) {
      set_schemeid(from.schemeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWenTao_ActiveScheme::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWenTao_ActiveScheme::CopyFrom(const PBC2SWenTao_ActiveScheme& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWenTao_ActiveScheme::IsInitialized() const {
  
  return true;
}

void PBC2SWenTao_ActiveScheme::Swap(PBC2SWenTao_ActiveScheme* other) {
  if (other != this) {
    std::swap(schemeid_, other->schemeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWenTao_ActiveScheme::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWenTao_ActiveScheme_descriptor_;
  metadata.reflection = PBC2SWenTao_ActiveScheme_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWenTao_ActiveBingFa::kBingfaidFieldNumber;
#endif  // !_MSC_VER

PBC2SWenTao_ActiveBingFa::PBC2SWenTao_ActiveBingFa()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWenTao_ActiveBingFa::InitAsDefaultInstance() {
}

PBC2SWenTao_ActiveBingFa::PBC2SWenTao_ActiveBingFa(const PBC2SWenTao_ActiveBingFa& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWenTao_ActiveBingFa::SharedCtor() {
  _cached_size_ = 0;
  bingfaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWenTao_ActiveBingFa::~PBC2SWenTao_ActiveBingFa() {
  SharedDtor();
}

void PBC2SWenTao_ActiveBingFa::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWenTao_ActiveBingFa::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWenTao_ActiveBingFa::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWenTao_ActiveBingFa_descriptor_;
}

const PBC2SWenTao_ActiveBingFa& PBC2SWenTao_ActiveBingFa::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWenTao_ActiveBingFa* PBC2SWenTao_ActiveBingFa::default_instance_ = NULL;

PBC2SWenTao_ActiveBingFa* PBC2SWenTao_ActiveBingFa::New() const {
  return new PBC2SWenTao_ActiveBingFa;
}

void PBC2SWenTao_ActiveBingFa::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bingfaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWenTao_ActiveBingFa::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bingfaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfaid_)));
          set_has_bingfaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWenTao_ActiveBingFa::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bingfaid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWenTao_ActiveBingFa::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bingfaid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWenTao_ActiveBingFa::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bingfaid = 1;
    if (has_bingfaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfaid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWenTao_ActiveBingFa::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWenTao_ActiveBingFa* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWenTao_ActiveBingFa*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWenTao_ActiveBingFa::MergeFrom(const PBC2SWenTao_ActiveBingFa& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bingfaid()) {
      set_bingfaid(from.bingfaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWenTao_ActiveBingFa::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWenTao_ActiveBingFa::CopyFrom(const PBC2SWenTao_ActiveBingFa& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWenTao_ActiveBingFa::IsInitialized() const {
  
  return true;
}

void PBC2SWenTao_ActiveBingFa::Swap(PBC2SWenTao_ActiveBingFa* other) {
  if (other != this) {
    std::swap(bingfaid_, other->bingfaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWenTao_ActiveBingFa::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWenTao_ActiveBingFa_descriptor_;
  metadata.reflection = PBC2SWenTao_ActiveBingFa_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWenTao_QianXiuUpdate::kBingfaidFieldNumber;
const int PBC2SWenTao_QianXiuUpdate::kQianxiulevelFieldNumber;
#endif  // !_MSC_VER

PBC2SWenTao_QianXiuUpdate::PBC2SWenTao_QianXiuUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWenTao_QianXiuUpdate::InitAsDefaultInstance() {
}

PBC2SWenTao_QianXiuUpdate::PBC2SWenTao_QianXiuUpdate(const PBC2SWenTao_QianXiuUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWenTao_QianXiuUpdate::SharedCtor() {
  _cached_size_ = 0;
  bingfaid_ = 0u;
  qianxiulevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWenTao_QianXiuUpdate::~PBC2SWenTao_QianXiuUpdate() {
  SharedDtor();
}

void PBC2SWenTao_QianXiuUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWenTao_QianXiuUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWenTao_QianXiuUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWenTao_QianXiuUpdate_descriptor_;
}

const PBC2SWenTao_QianXiuUpdate& PBC2SWenTao_QianXiuUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWenTao_QianXiuUpdate* PBC2SWenTao_QianXiuUpdate::default_instance_ = NULL;

PBC2SWenTao_QianXiuUpdate* PBC2SWenTao_QianXiuUpdate::New() const {
  return new PBC2SWenTao_QianXiuUpdate;
}

void PBC2SWenTao_QianXiuUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bingfaid_ = 0u;
    qianxiulevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWenTao_QianXiuUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bingfaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfaid_)));
          set_has_bingfaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_qianxiulevel;
        break;
      }
      
      // optional uint32 qianxiulevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qianxiulevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qianxiulevel_)));
          set_has_qianxiulevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWenTao_QianXiuUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bingfaid(), output);
  }
  
  // optional uint32 qianxiulevel = 2;
  if (has_qianxiulevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qianxiulevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWenTao_QianXiuUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bingfaid(), target);
  }
  
  // optional uint32 qianxiulevel = 2;
  if (has_qianxiulevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qianxiulevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWenTao_QianXiuUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bingfaid = 1;
    if (has_bingfaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfaid());
    }
    
    // optional uint32 qianxiulevel = 2;
    if (has_qianxiulevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qianxiulevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWenTao_QianXiuUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWenTao_QianXiuUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWenTao_QianXiuUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWenTao_QianXiuUpdate::MergeFrom(const PBC2SWenTao_QianXiuUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bingfaid()) {
      set_bingfaid(from.bingfaid());
    }
    if (from.has_qianxiulevel()) {
      set_qianxiulevel(from.qianxiulevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWenTao_QianXiuUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWenTao_QianXiuUpdate::CopyFrom(const PBC2SWenTao_QianXiuUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWenTao_QianXiuUpdate::IsInitialized() const {
  
  return true;
}

void PBC2SWenTao_QianXiuUpdate::Swap(PBC2SWenTao_QianXiuUpdate* other) {
  if (other != this) {
    std::swap(bingfaid_, other->bingfaid_);
    std::swap(qianxiulevel_, other->qianxiulevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWenTao_QianXiuUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWenTao_QianXiuUpdate_descriptor_;
  metadata.reflection = PBC2SWenTao_QianXiuUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWenTao_TuPoUpdate::kBingfaidFieldNumber;
const int PBC2SWenTao_TuPoUpdate::kTupolevelFieldNumber;
#endif  // !_MSC_VER

PBC2SWenTao_TuPoUpdate::PBC2SWenTao_TuPoUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWenTao_TuPoUpdate::InitAsDefaultInstance() {
}

PBC2SWenTao_TuPoUpdate::PBC2SWenTao_TuPoUpdate(const PBC2SWenTao_TuPoUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWenTao_TuPoUpdate::SharedCtor() {
  _cached_size_ = 0;
  bingfaid_ = 0u;
  tupolevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWenTao_TuPoUpdate::~PBC2SWenTao_TuPoUpdate() {
  SharedDtor();
}

void PBC2SWenTao_TuPoUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWenTao_TuPoUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWenTao_TuPoUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWenTao_TuPoUpdate_descriptor_;
}

const PBC2SWenTao_TuPoUpdate& PBC2SWenTao_TuPoUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWenTao_TuPoUpdate* PBC2SWenTao_TuPoUpdate::default_instance_ = NULL;

PBC2SWenTao_TuPoUpdate* PBC2SWenTao_TuPoUpdate::New() const {
  return new PBC2SWenTao_TuPoUpdate;
}

void PBC2SWenTao_TuPoUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bingfaid_ = 0u;
    tupolevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWenTao_TuPoUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bingfaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfaid_)));
          set_has_bingfaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tupolevel;
        break;
      }
      
      // optional uint32 tupolevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tupolevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tupolevel_)));
          set_has_tupolevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWenTao_TuPoUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bingfaid(), output);
  }
  
  // optional uint32 tupolevel = 2;
  if (has_tupolevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tupolevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWenTao_TuPoUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bingfaid(), target);
  }
  
  // optional uint32 tupolevel = 2;
  if (has_tupolevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tupolevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWenTao_TuPoUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bingfaid = 1;
    if (has_bingfaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfaid());
    }
    
    // optional uint32 tupolevel = 2;
    if (has_tupolevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tupolevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWenTao_TuPoUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWenTao_TuPoUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWenTao_TuPoUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWenTao_TuPoUpdate::MergeFrom(const PBC2SWenTao_TuPoUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bingfaid()) {
      set_bingfaid(from.bingfaid());
    }
    if (from.has_tupolevel()) {
      set_tupolevel(from.tupolevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWenTao_TuPoUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWenTao_TuPoUpdate::CopyFrom(const PBC2SWenTao_TuPoUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWenTao_TuPoUpdate::IsInitialized() const {
  
  return true;
}

void PBC2SWenTao_TuPoUpdate::Swap(PBC2SWenTao_TuPoUpdate* other) {
  if (other != this) {
    std::swap(bingfaid_, other->bingfaid_);
    std::swap(tupolevel_, other->tupolevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWenTao_TuPoUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWenTao_TuPoUpdate_descriptor_;
  metadata.reflection = PBC2SWenTao_TuPoUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWenTao_YaoDianUpdate::kBingfaidFieldNumber;
const int PBC2SWenTao_YaoDianUpdate::kTupolevelFieldNumber;
const int PBC2SWenTao_YaoDianUpdate::kYaodianidFieldNumber;
const int PBC2SWenTao_YaoDianUpdate::kYaodianlevelFieldNumber;
#endif  // !_MSC_VER

PBC2SWenTao_YaoDianUpdate::PBC2SWenTao_YaoDianUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWenTao_YaoDianUpdate::InitAsDefaultInstance() {
}

PBC2SWenTao_YaoDianUpdate::PBC2SWenTao_YaoDianUpdate(const PBC2SWenTao_YaoDianUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWenTao_YaoDianUpdate::SharedCtor() {
  _cached_size_ = 0;
  bingfaid_ = 0u;
  tupolevel_ = 0u;
  yaodianid_ = 0u;
  yaodianlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWenTao_YaoDianUpdate::~PBC2SWenTao_YaoDianUpdate() {
  SharedDtor();
}

void PBC2SWenTao_YaoDianUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWenTao_YaoDianUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWenTao_YaoDianUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWenTao_YaoDianUpdate_descriptor_;
}

const PBC2SWenTao_YaoDianUpdate& PBC2SWenTao_YaoDianUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWenTao_YaoDianUpdate* PBC2SWenTao_YaoDianUpdate::default_instance_ = NULL;

PBC2SWenTao_YaoDianUpdate* PBC2SWenTao_YaoDianUpdate::New() const {
  return new PBC2SWenTao_YaoDianUpdate;
}

void PBC2SWenTao_YaoDianUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bingfaid_ = 0u;
    tupolevel_ = 0u;
    yaodianid_ = 0u;
    yaodianlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWenTao_YaoDianUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bingfaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfaid_)));
          set_has_bingfaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tupolevel;
        break;
      }
      
      // optional uint32 tupolevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tupolevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tupolevel_)));
          set_has_tupolevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_yaodianid;
        break;
      }
      
      // optional uint32 yaodianid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaodianid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaodianid_)));
          set_has_yaodianid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_yaodianlevel;
        break;
      }
      
      // optional uint32 yaodianlevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaodianlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaodianlevel_)));
          set_has_yaodianlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWenTao_YaoDianUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bingfaid(), output);
  }
  
  // optional uint32 tupolevel = 2;
  if (has_tupolevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tupolevel(), output);
  }
  
  // optional uint32 yaodianid = 3;
  if (has_yaodianid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->yaodianid(), output);
  }
  
  // optional uint32 yaodianlevel = 4;
  if (has_yaodianlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->yaodianlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWenTao_YaoDianUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bingfaid = 1;
  if (has_bingfaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bingfaid(), target);
  }
  
  // optional uint32 tupolevel = 2;
  if (has_tupolevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tupolevel(), target);
  }
  
  // optional uint32 yaodianid = 3;
  if (has_yaodianid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->yaodianid(), target);
  }
  
  // optional uint32 yaodianlevel = 4;
  if (has_yaodianlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->yaodianlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWenTao_YaoDianUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bingfaid = 1;
    if (has_bingfaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfaid());
    }
    
    // optional uint32 tupolevel = 2;
    if (has_tupolevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tupolevel());
    }
    
    // optional uint32 yaodianid = 3;
    if (has_yaodianid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yaodianid());
    }
    
    // optional uint32 yaodianlevel = 4;
    if (has_yaodianlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yaodianlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWenTao_YaoDianUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWenTao_YaoDianUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWenTao_YaoDianUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWenTao_YaoDianUpdate::MergeFrom(const PBC2SWenTao_YaoDianUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bingfaid()) {
      set_bingfaid(from.bingfaid());
    }
    if (from.has_tupolevel()) {
      set_tupolevel(from.tupolevel());
    }
    if (from.has_yaodianid()) {
      set_yaodianid(from.yaodianid());
    }
    if (from.has_yaodianlevel()) {
      set_yaodianlevel(from.yaodianlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWenTao_YaoDianUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWenTao_YaoDianUpdate::CopyFrom(const PBC2SWenTao_YaoDianUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWenTao_YaoDianUpdate::IsInitialized() const {
  
  return true;
}

void PBC2SWenTao_YaoDianUpdate::Swap(PBC2SWenTao_YaoDianUpdate* other) {
  if (other != this) {
    std::swap(bingfaid_, other->bingfaid_);
    std::swap(tupolevel_, other->tupolevel_);
    std::swap(yaodianid_, other->yaodianid_);
    std::swap(yaodianlevel_, other->yaodianlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWenTao_YaoDianUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWenTao_YaoDianUpdate_descriptor_;
  metadata.reflection = PBC2SWenTao_YaoDianUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWenTao_WisdomUpdate::kWisdomFieldNumber;
#endif  // !_MSC_VER

PBC2SWenTao_WisdomUpdate::PBC2SWenTao_WisdomUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWenTao_WisdomUpdate::InitAsDefaultInstance() {
}

PBC2SWenTao_WisdomUpdate::PBC2SWenTao_WisdomUpdate(const PBC2SWenTao_WisdomUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWenTao_WisdomUpdate::SharedCtor() {
  _cached_size_ = 0;
  wisdom_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWenTao_WisdomUpdate::~PBC2SWenTao_WisdomUpdate() {
  SharedDtor();
}

void PBC2SWenTao_WisdomUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWenTao_WisdomUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWenTao_WisdomUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWenTao_WisdomUpdate_descriptor_;
}

const PBC2SWenTao_WisdomUpdate& PBC2SWenTao_WisdomUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWenTao_WisdomUpdate* PBC2SWenTao_WisdomUpdate::default_instance_ = NULL;

PBC2SWenTao_WisdomUpdate* PBC2SWenTao_WisdomUpdate::New() const {
  return new PBC2SWenTao_WisdomUpdate;
}

void PBC2SWenTao_WisdomUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wisdom_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWenTao_WisdomUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 wisdom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wisdom_)));
          set_has_wisdom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWenTao_WisdomUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 wisdom = 1;
  if (has_wisdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->wisdom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWenTao_WisdomUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 wisdom = 1;
  if (has_wisdom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->wisdom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWenTao_WisdomUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 wisdom = 1;
    if (has_wisdom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wisdom());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWenTao_WisdomUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWenTao_WisdomUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWenTao_WisdomUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWenTao_WisdomUpdate::MergeFrom(const PBC2SWenTao_WisdomUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wisdom()) {
      set_wisdom(from.wisdom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWenTao_WisdomUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWenTao_WisdomUpdate::CopyFrom(const PBC2SWenTao_WisdomUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWenTao_WisdomUpdate::IsInitialized() const {
  
  return true;
}

void PBC2SWenTao_WisdomUpdate::Swap(PBC2SWenTao_WisdomUpdate* other) {
  if (other != this) {
    std::swap(wisdom_, other->wisdom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWenTao_WisdomUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWenTao_WisdomUpdate_descriptor_;
  metadata.reflection = PBC2SWenTao_WisdomUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GWulueSetSchemeAsk::kSchemeidFieldNumber;
#endif  // !_MSC_VER

PBC2GWulueSetSchemeAsk::PBC2GWulueSetSchemeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GWulueSetSchemeAsk::InitAsDefaultInstance() {
}

PBC2GWulueSetSchemeAsk::PBC2GWulueSetSchemeAsk(const PBC2GWulueSetSchemeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GWulueSetSchemeAsk::SharedCtor() {
  _cached_size_ = 0;
  schemeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GWulueSetSchemeAsk::~PBC2GWulueSetSchemeAsk() {
  SharedDtor();
}

void PBC2GWulueSetSchemeAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GWulueSetSchemeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GWulueSetSchemeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GWulueSetSchemeAsk_descriptor_;
}

const PBC2GWulueSetSchemeAsk& PBC2GWulueSetSchemeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GWulueSetSchemeAsk* PBC2GWulueSetSchemeAsk::default_instance_ = NULL;

PBC2GWulueSetSchemeAsk* PBC2GWulueSetSchemeAsk::New() const {
  return new PBC2GWulueSetSchemeAsk;
}

void PBC2GWulueSetSchemeAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GWulueSetSchemeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemeid_)));
          set_has_schemeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GWulueSetSchemeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemeid = 1;
  if (has_schemeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GWulueSetSchemeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemeid = 1;
  if (has_schemeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GWulueSetSchemeAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemeid = 1;
    if (has_schemeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GWulueSetSchemeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GWulueSetSchemeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GWulueSetSchemeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GWulueSetSchemeAsk::MergeFrom(const PBC2GWulueSetSchemeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemeid()) {
      set_schemeid(from.schemeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GWulueSetSchemeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GWulueSetSchemeAsk::CopyFrom(const PBC2GWulueSetSchemeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GWulueSetSchemeAsk::IsInitialized() const {
  
  return true;
}

void PBC2GWulueSetSchemeAsk::Swap(PBC2GWulueSetSchemeAsk* other) {
  if (other != this) {
    std::swap(schemeid_, other->schemeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GWulueSetSchemeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GWulueSetSchemeAsk_descriptor_;
  metadata.reflection = PBC2GWulueSetSchemeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GWulueUpZhanlueAsk::kWuluetypeFieldNumber;
const int PBC2GWulueUpZhanlueAsk::kYaodianidFieldNumber;
#endif  // !_MSC_VER

PBC2GWulueUpZhanlueAsk::PBC2GWulueUpZhanlueAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GWulueUpZhanlueAsk::InitAsDefaultInstance() {
}

PBC2GWulueUpZhanlueAsk::PBC2GWulueUpZhanlueAsk(const PBC2GWulueUpZhanlueAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GWulueUpZhanlueAsk::SharedCtor() {
  _cached_size_ = 0;
  wuluetype_ = 0u;
  yaodianid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GWulueUpZhanlueAsk::~PBC2GWulueUpZhanlueAsk() {
  SharedDtor();
}

void PBC2GWulueUpZhanlueAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GWulueUpZhanlueAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GWulueUpZhanlueAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GWulueUpZhanlueAsk_descriptor_;
}

const PBC2GWulueUpZhanlueAsk& PBC2GWulueUpZhanlueAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GWulueUpZhanlueAsk* PBC2GWulueUpZhanlueAsk::default_instance_ = NULL;

PBC2GWulueUpZhanlueAsk* PBC2GWulueUpZhanlueAsk::New() const {
  return new PBC2GWulueUpZhanlueAsk;
}

void PBC2GWulueUpZhanlueAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wuluetype_ = 0u;
    yaodianid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GWulueUpZhanlueAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wuluetype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wuluetype_)));
          set_has_wuluetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_yaodianid;
        break;
      }
      
      // optional uint32 yaodianid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaodianid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaodianid_)));
          set_has_yaodianid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GWulueUpZhanlueAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 wuluetype = 1;
  if (has_wuluetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wuluetype(), output);
  }
  
  // optional uint32 yaodianid = 2;
  if (has_yaodianid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->yaodianid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GWulueUpZhanlueAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 wuluetype = 1;
  if (has_wuluetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wuluetype(), target);
  }
  
  // optional uint32 yaodianid = 2;
  if (has_yaodianid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->yaodianid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GWulueUpZhanlueAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 wuluetype = 1;
    if (has_wuluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wuluetype());
    }
    
    // optional uint32 yaodianid = 2;
    if (has_yaodianid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yaodianid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GWulueUpZhanlueAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GWulueUpZhanlueAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GWulueUpZhanlueAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GWulueUpZhanlueAsk::MergeFrom(const PBC2GWulueUpZhanlueAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wuluetype()) {
      set_wuluetype(from.wuluetype());
    }
    if (from.has_yaodianid()) {
      set_yaodianid(from.yaodianid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GWulueUpZhanlueAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GWulueUpZhanlueAsk::CopyFrom(const PBC2GWulueUpZhanlueAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GWulueUpZhanlueAsk::IsInitialized() const {
  
  return true;
}

void PBC2GWulueUpZhanlueAsk::Swap(PBC2GWulueUpZhanlueAsk* other) {
  if (other != this) {
    std::swap(wuluetype_, other->wuluetype_);
    std::swap(yaodianid_, other->yaodianid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GWulueUpZhanlueAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GWulueUpZhanlueAsk_descriptor_;
  metadata.reflection = PBC2GWulueUpZhanlueAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GWulueSetBingfuAsk::kWuluetypeFieldNumber;
const int PBC2GWulueSetBingfuAsk::kYaodianidFieldNumber;
const int PBC2GWulueSetBingfuAsk::kBingfusnFieldNumber;
#endif  // !_MSC_VER

PBC2GWulueSetBingfuAsk::PBC2GWulueSetBingfuAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GWulueSetBingfuAsk::InitAsDefaultInstance() {
}

PBC2GWulueSetBingfuAsk::PBC2GWulueSetBingfuAsk(const PBC2GWulueSetBingfuAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GWulueSetBingfuAsk::SharedCtor() {
  _cached_size_ = 0;
  wuluetype_ = 0u;
  yaodianid_ = 0u;
  bingfusn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GWulueSetBingfuAsk::~PBC2GWulueSetBingfuAsk() {
  SharedDtor();
}

void PBC2GWulueSetBingfuAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GWulueSetBingfuAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GWulueSetBingfuAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GWulueSetBingfuAsk_descriptor_;
}

const PBC2GWulueSetBingfuAsk& PBC2GWulueSetBingfuAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GWulueSetBingfuAsk* PBC2GWulueSetBingfuAsk::default_instance_ = NULL;

PBC2GWulueSetBingfuAsk* PBC2GWulueSetBingfuAsk::New() const {
  return new PBC2GWulueSetBingfuAsk;
}

void PBC2GWulueSetBingfuAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wuluetype_ = 0u;
    yaodianid_ = 0u;
    bingfusn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GWulueSetBingfuAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wuluetype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wuluetype_)));
          set_has_wuluetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_yaodianid;
        break;
      }
      
      // optional uint32 yaodianid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaodianid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaodianid_)));
          set_has_yaodianid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bingfusn;
        break;
      }
      
      // optional uint64 bingfusn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bingfusn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bingfusn_)));
          set_has_bingfusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GWulueSetBingfuAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 wuluetype = 1;
  if (has_wuluetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wuluetype(), output);
  }
  
  // optional uint32 yaodianid = 2;
  if (has_yaodianid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->yaodianid(), output);
  }
  
  // optional uint64 bingfusn = 3;
  if (has_bingfusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bingfusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GWulueSetBingfuAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 wuluetype = 1;
  if (has_wuluetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wuluetype(), target);
  }
  
  // optional uint32 yaodianid = 2;
  if (has_yaodianid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->yaodianid(), target);
  }
  
  // optional uint64 bingfusn = 3;
  if (has_bingfusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bingfusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GWulueSetBingfuAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 wuluetype = 1;
    if (has_wuluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wuluetype());
    }
    
    // optional uint32 yaodianid = 2;
    if (has_yaodianid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yaodianid());
    }
    
    // optional uint64 bingfusn = 3;
    if (has_bingfusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bingfusn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GWulueSetBingfuAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GWulueSetBingfuAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GWulueSetBingfuAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GWulueSetBingfuAsk::MergeFrom(const PBC2GWulueSetBingfuAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wuluetype()) {
      set_wuluetype(from.wuluetype());
    }
    if (from.has_yaodianid()) {
      set_yaodianid(from.yaodianid());
    }
    if (from.has_bingfusn()) {
      set_bingfusn(from.bingfusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GWulueSetBingfuAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GWulueSetBingfuAsk::CopyFrom(const PBC2GWulueSetBingfuAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GWulueSetBingfuAsk::IsInitialized() const {
  
  return true;
}

void PBC2GWulueSetBingfuAsk::Swap(PBC2GWulueSetBingfuAsk* other) {
  if (other != this) {
    std::swap(wuluetype_, other->wuluetype_);
    std::swap(yaodianid_, other->yaodianid_);
    std::swap(bingfusn_, other->bingfusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GWulueSetBingfuAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GWulueSetBingfuAsk_descriptor_;
  metadata.reflection = PBC2GWulueSetBingfuAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CWulueSetSchemeAck::kSchemeidFieldNumber;
#endif  // !_MSC_VER

PBG2CWulueSetSchemeAck::PBG2CWulueSetSchemeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CWulueSetSchemeAck::InitAsDefaultInstance() {
}

PBG2CWulueSetSchemeAck::PBG2CWulueSetSchemeAck(const PBG2CWulueSetSchemeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CWulueSetSchemeAck::SharedCtor() {
  _cached_size_ = 0;
  schemeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CWulueSetSchemeAck::~PBG2CWulueSetSchemeAck() {
  SharedDtor();
}

void PBG2CWulueSetSchemeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CWulueSetSchemeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CWulueSetSchemeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CWulueSetSchemeAck_descriptor_;
}

const PBG2CWulueSetSchemeAck& PBG2CWulueSetSchemeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CWulueSetSchemeAck* PBG2CWulueSetSchemeAck::default_instance_ = NULL;

PBG2CWulueSetSchemeAck* PBG2CWulueSetSchemeAck::New() const {
  return new PBG2CWulueSetSchemeAck;
}

void PBG2CWulueSetSchemeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CWulueSetSchemeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemeid_)));
          set_has_schemeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CWulueSetSchemeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemeid = 1;
  if (has_schemeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CWulueSetSchemeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemeid = 1;
  if (has_schemeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CWulueSetSchemeAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemeid = 1;
    if (has_schemeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CWulueSetSchemeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CWulueSetSchemeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CWulueSetSchemeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CWulueSetSchemeAck::MergeFrom(const PBG2CWulueSetSchemeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemeid()) {
      set_schemeid(from.schemeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CWulueSetSchemeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CWulueSetSchemeAck::CopyFrom(const PBG2CWulueSetSchemeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CWulueSetSchemeAck::IsInitialized() const {
  
  return true;
}

void PBG2CWulueSetSchemeAck::Swap(PBG2CWulueSetSchemeAck* other) {
  if (other != this) {
    std::swap(schemeid_, other->schemeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CWulueSetSchemeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CWulueSetSchemeAck_descriptor_;
  metadata.reflection = PBG2CWulueSetSchemeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CWulueUpZhanlueAck::kWuluetypeFieldNumber;
const int PBG2CWulueUpZhanlueAck::kYaodianidFieldNumber;
const int PBG2CWulueUpZhanlueAck::kCurlevelFieldNumber;
#endif  // !_MSC_VER

PBG2CWulueUpZhanlueAck::PBG2CWulueUpZhanlueAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CWulueUpZhanlueAck::InitAsDefaultInstance() {
}

PBG2CWulueUpZhanlueAck::PBG2CWulueUpZhanlueAck(const PBG2CWulueUpZhanlueAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CWulueUpZhanlueAck::SharedCtor() {
  _cached_size_ = 0;
  wuluetype_ = 0u;
  yaodianid_ = 0u;
  curlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CWulueUpZhanlueAck::~PBG2CWulueUpZhanlueAck() {
  SharedDtor();
}

void PBG2CWulueUpZhanlueAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CWulueUpZhanlueAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CWulueUpZhanlueAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CWulueUpZhanlueAck_descriptor_;
}

const PBG2CWulueUpZhanlueAck& PBG2CWulueUpZhanlueAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CWulueUpZhanlueAck* PBG2CWulueUpZhanlueAck::default_instance_ = NULL;

PBG2CWulueUpZhanlueAck* PBG2CWulueUpZhanlueAck::New() const {
  return new PBG2CWulueUpZhanlueAck;
}

void PBG2CWulueUpZhanlueAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wuluetype_ = 0u;
    yaodianid_ = 0u;
    curlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CWulueUpZhanlueAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wuluetype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wuluetype_)));
          set_has_wuluetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_yaodianid;
        break;
      }
      
      // optional uint32 yaodianid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaodianid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaodianid_)));
          set_has_yaodianid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curlevel;
        break;
      }
      
      // optional uint32 curlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curlevel_)));
          set_has_curlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CWulueUpZhanlueAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 wuluetype = 1;
  if (has_wuluetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wuluetype(), output);
  }
  
  // optional uint32 yaodianid = 2;
  if (has_yaodianid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->yaodianid(), output);
  }
  
  // optional uint32 curlevel = 3;
  if (has_curlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CWulueUpZhanlueAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 wuluetype = 1;
  if (has_wuluetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wuluetype(), target);
  }
  
  // optional uint32 yaodianid = 2;
  if (has_yaodianid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->yaodianid(), target);
  }
  
  // optional uint32 curlevel = 3;
  if (has_curlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CWulueUpZhanlueAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 wuluetype = 1;
    if (has_wuluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wuluetype());
    }
    
    // optional uint32 yaodianid = 2;
    if (has_yaodianid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yaodianid());
    }
    
    // optional uint32 curlevel = 3;
    if (has_curlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CWulueUpZhanlueAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CWulueUpZhanlueAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CWulueUpZhanlueAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CWulueUpZhanlueAck::MergeFrom(const PBG2CWulueUpZhanlueAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wuluetype()) {
      set_wuluetype(from.wuluetype());
    }
    if (from.has_yaodianid()) {
      set_yaodianid(from.yaodianid());
    }
    if (from.has_curlevel()) {
      set_curlevel(from.curlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CWulueUpZhanlueAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CWulueUpZhanlueAck::CopyFrom(const PBG2CWulueUpZhanlueAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CWulueUpZhanlueAck::IsInitialized() const {
  
  return true;
}

void PBG2CWulueUpZhanlueAck::Swap(PBG2CWulueUpZhanlueAck* other) {
  if (other != this) {
    std::swap(wuluetype_, other->wuluetype_);
    std::swap(yaodianid_, other->yaodianid_);
    std::swap(curlevel_, other->curlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CWulueUpZhanlueAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CWulueUpZhanlueAck_descriptor_;
  metadata.reflection = PBG2CWulueUpZhanlueAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CWulueSetBingfuAck::kWuluetypeFieldNumber;
const int PBG2CWulueSetBingfuAck::kYaodianidFieldNumber;
const int PBG2CWulueSetBingfuAck::kBingfusnFieldNumber;
#endif  // !_MSC_VER

PBG2CWulueSetBingfuAck::PBG2CWulueSetBingfuAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CWulueSetBingfuAck::InitAsDefaultInstance() {
}

PBG2CWulueSetBingfuAck::PBG2CWulueSetBingfuAck(const PBG2CWulueSetBingfuAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CWulueSetBingfuAck::SharedCtor() {
  _cached_size_ = 0;
  wuluetype_ = 0u;
  yaodianid_ = 0u;
  bingfusn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CWulueSetBingfuAck::~PBG2CWulueSetBingfuAck() {
  SharedDtor();
}

void PBG2CWulueSetBingfuAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CWulueSetBingfuAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CWulueSetBingfuAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CWulueSetBingfuAck_descriptor_;
}

const PBG2CWulueSetBingfuAck& PBG2CWulueSetBingfuAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CWulueSetBingfuAck* PBG2CWulueSetBingfuAck::default_instance_ = NULL;

PBG2CWulueSetBingfuAck* PBG2CWulueSetBingfuAck::New() const {
  return new PBG2CWulueSetBingfuAck;
}

void PBG2CWulueSetBingfuAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wuluetype_ = 0u;
    yaodianid_ = 0u;
    bingfusn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CWulueSetBingfuAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wuluetype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wuluetype_)));
          set_has_wuluetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_yaodianid;
        break;
      }
      
      // optional uint32 yaodianid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaodianid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaodianid_)));
          set_has_yaodianid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bingfusn;
        break;
      }
      
      // optional uint64 bingfusn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bingfusn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bingfusn_)));
          set_has_bingfusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CWulueSetBingfuAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 wuluetype = 1;
  if (has_wuluetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wuluetype(), output);
  }
  
  // optional uint32 yaodianid = 2;
  if (has_yaodianid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->yaodianid(), output);
  }
  
  // optional uint64 bingfusn = 3;
  if (has_bingfusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bingfusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CWulueSetBingfuAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 wuluetype = 1;
  if (has_wuluetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wuluetype(), target);
  }
  
  // optional uint32 yaodianid = 2;
  if (has_yaodianid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->yaodianid(), target);
  }
  
  // optional uint64 bingfusn = 3;
  if (has_bingfusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bingfusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CWulueSetBingfuAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 wuluetype = 1;
    if (has_wuluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wuluetype());
    }
    
    // optional uint32 yaodianid = 2;
    if (has_yaodianid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yaodianid());
    }
    
    // optional uint64 bingfusn = 3;
    if (has_bingfusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bingfusn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CWulueSetBingfuAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CWulueSetBingfuAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CWulueSetBingfuAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CWulueSetBingfuAck::MergeFrom(const PBG2CWulueSetBingfuAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wuluetype()) {
      set_wuluetype(from.wuluetype());
    }
    if (from.has_yaodianid()) {
      set_yaodianid(from.yaodianid());
    }
    if (from.has_bingfusn()) {
      set_bingfusn(from.bingfusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CWulueSetBingfuAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CWulueSetBingfuAck::CopyFrom(const PBG2CWulueSetBingfuAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CWulueSetBingfuAck::IsInitialized() const {
  
  return true;
}

void PBG2CWulueSetBingfuAck::Swap(PBG2CWulueSetBingfuAck* other) {
  if (other != this) {
    std::swap(wuluetype_, other->wuluetype_);
    std::swap(yaodianid_, other->yaodianid_);
    std::swap(bingfusn_, other->bingfusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CWulueSetBingfuAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CWulueSetBingfuAck_descriptor_;
  metadata.reflection = PBG2CWulueSetBingfuAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GBingfuUpgradeAsk::kSnFieldNumber;
const int PBC2GBingfuUpgradeAsk::kExpendFieldNumber;
#endif  // !_MSC_VER

PBC2GBingfuUpgradeAsk::PBC2GBingfuUpgradeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GBingfuUpgradeAsk::InitAsDefaultInstance() {
}

PBC2GBingfuUpgradeAsk::PBC2GBingfuUpgradeAsk(const PBC2GBingfuUpgradeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GBingfuUpgradeAsk::SharedCtor() {
  _cached_size_ = 0;
  sn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GBingfuUpgradeAsk::~PBC2GBingfuUpgradeAsk() {
  SharedDtor();
}

void PBC2GBingfuUpgradeAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GBingfuUpgradeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GBingfuUpgradeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GBingfuUpgradeAsk_descriptor_;
}

const PBC2GBingfuUpgradeAsk& PBC2GBingfuUpgradeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GBingfuUpgradeAsk* PBC2GBingfuUpgradeAsk::default_instance_ = NULL;

PBC2GBingfuUpgradeAsk* PBC2GBingfuUpgradeAsk::New() const {
  return new PBC2GBingfuUpgradeAsk;
}

void PBC2GBingfuUpgradeAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sn_ = GOOGLE_ULONGLONG(0);
  }
  expend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GBingfuUpgradeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sn_)));
          set_has_sn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_expend;
        break;
      }
      
      // repeated .PBBingfuNumData expend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_expend;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GBingfuUpgradeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sn = 1;
  if (has_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sn(), output);
  }
  
  // repeated .PBBingfuNumData expend = 2;
  for (int i = 0; i < this->expend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->expend(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GBingfuUpgradeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sn = 1;
  if (has_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sn(), target);
  }
  
  // repeated .PBBingfuNumData expend = 2;
  for (int i = 0; i < this->expend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->expend(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GBingfuUpgradeAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sn = 1;
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sn());
    }
    
  }
  // repeated .PBBingfuNumData expend = 2;
  total_size += 1 * this->expend_size();
  for (int i = 0; i < this->expend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expend(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GBingfuUpgradeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GBingfuUpgradeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GBingfuUpgradeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GBingfuUpgradeAsk::MergeFrom(const PBC2GBingfuUpgradeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  expend_.MergeFrom(from.expend_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sn()) {
      set_sn(from.sn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GBingfuUpgradeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GBingfuUpgradeAsk::CopyFrom(const PBC2GBingfuUpgradeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GBingfuUpgradeAsk::IsInitialized() const {
  
  return true;
}

void PBC2GBingfuUpgradeAsk::Swap(PBC2GBingfuUpgradeAsk* other) {
  if (other != this) {
    std::swap(sn_, other->sn_);
    expend_.Swap(&other->expend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GBingfuUpgradeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GBingfuUpgradeAsk_descriptor_;
  metadata.reflection = PBC2GBingfuUpgradeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GBingfuUpOneLevelAsk::kSnFieldNumber;
#endif  // !_MSC_VER

PBC2GBingfuUpOneLevelAsk::PBC2GBingfuUpOneLevelAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GBingfuUpOneLevelAsk::InitAsDefaultInstance() {
}

PBC2GBingfuUpOneLevelAsk::PBC2GBingfuUpOneLevelAsk(const PBC2GBingfuUpOneLevelAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GBingfuUpOneLevelAsk::SharedCtor() {
  _cached_size_ = 0;
  sn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GBingfuUpOneLevelAsk::~PBC2GBingfuUpOneLevelAsk() {
  SharedDtor();
}

void PBC2GBingfuUpOneLevelAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GBingfuUpOneLevelAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GBingfuUpOneLevelAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GBingfuUpOneLevelAsk_descriptor_;
}

const PBC2GBingfuUpOneLevelAsk& PBC2GBingfuUpOneLevelAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GBingfuUpOneLevelAsk* PBC2GBingfuUpOneLevelAsk::default_instance_ = NULL;

PBC2GBingfuUpOneLevelAsk* PBC2GBingfuUpOneLevelAsk::New() const {
  return new PBC2GBingfuUpOneLevelAsk;
}

void PBC2GBingfuUpOneLevelAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GBingfuUpOneLevelAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sn_)));
          set_has_sn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GBingfuUpOneLevelAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sn = 1;
  if (has_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GBingfuUpOneLevelAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sn = 1;
  if (has_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GBingfuUpOneLevelAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sn = 1;
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GBingfuUpOneLevelAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GBingfuUpOneLevelAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GBingfuUpOneLevelAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GBingfuUpOneLevelAsk::MergeFrom(const PBC2GBingfuUpOneLevelAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sn()) {
      set_sn(from.sn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GBingfuUpOneLevelAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GBingfuUpOneLevelAsk::CopyFrom(const PBC2GBingfuUpOneLevelAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GBingfuUpOneLevelAsk::IsInitialized() const {
  
  return true;
}

void PBC2GBingfuUpOneLevelAsk::Swap(PBC2GBingfuUpOneLevelAsk* other) {
  if (other != this) {
    std::swap(sn_, other->sn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GBingfuUpOneLevelAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GBingfuUpOneLevelAsk_descriptor_;
  metadata.reflection = PBC2GBingfuUpOneLevelAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GBingfuSplitAsk::kExpendFieldNumber;
#endif  // !_MSC_VER

PBC2GBingfuSplitAsk::PBC2GBingfuSplitAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GBingfuSplitAsk::InitAsDefaultInstance() {
}

PBC2GBingfuSplitAsk::PBC2GBingfuSplitAsk(const PBC2GBingfuSplitAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GBingfuSplitAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GBingfuSplitAsk::~PBC2GBingfuSplitAsk() {
  SharedDtor();
}

void PBC2GBingfuSplitAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GBingfuSplitAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GBingfuSplitAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GBingfuSplitAsk_descriptor_;
}

const PBC2GBingfuSplitAsk& PBC2GBingfuSplitAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GBingfuSplitAsk* PBC2GBingfuSplitAsk::default_instance_ = NULL;

PBC2GBingfuSplitAsk* PBC2GBingfuSplitAsk::New() const {
  return new PBC2GBingfuSplitAsk;
}

void PBC2GBingfuSplitAsk::Clear() {
  expend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GBingfuSplitAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBBingfuNumData expend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_expend;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GBingfuSplitAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBBingfuNumData expend = 2;
  for (int i = 0; i < this->expend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->expend(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GBingfuSplitAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBBingfuNumData expend = 2;
  for (int i = 0; i < this->expend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->expend(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GBingfuSplitAsk::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBBingfuNumData expend = 2;
  total_size += 1 * this->expend_size();
  for (int i = 0; i < this->expend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expend(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GBingfuSplitAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GBingfuSplitAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GBingfuSplitAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GBingfuSplitAsk::MergeFrom(const PBC2GBingfuSplitAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  expend_.MergeFrom(from.expend_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GBingfuSplitAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GBingfuSplitAsk::CopyFrom(const PBC2GBingfuSplitAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GBingfuSplitAsk::IsInitialized() const {
  
  return true;
}

void PBC2GBingfuSplitAsk::Swap(PBC2GBingfuSplitAsk* other) {
  if (other != this) {
    expend_.Swap(&other->expend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GBingfuSplitAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GBingfuSplitAsk_descriptor_;
  metadata.reflection = PBC2GBingfuSplitAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CBingfuUpgradeAck::kBingfusnFieldNumber;
#endif  // !_MSC_VER

PBG2CBingfuUpgradeAck::PBG2CBingfuUpgradeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CBingfuUpgradeAck::InitAsDefaultInstance() {
}

PBG2CBingfuUpgradeAck::PBG2CBingfuUpgradeAck(const PBG2CBingfuUpgradeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CBingfuUpgradeAck::SharedCtor() {
  _cached_size_ = 0;
  bingfusn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CBingfuUpgradeAck::~PBG2CBingfuUpgradeAck() {
  SharedDtor();
}

void PBG2CBingfuUpgradeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CBingfuUpgradeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CBingfuUpgradeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CBingfuUpgradeAck_descriptor_;
}

const PBG2CBingfuUpgradeAck& PBG2CBingfuUpgradeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CBingfuUpgradeAck* PBG2CBingfuUpgradeAck::default_instance_ = NULL;

PBG2CBingfuUpgradeAck* PBG2CBingfuUpgradeAck::New() const {
  return new PBG2CBingfuUpgradeAck;
}

void PBG2CBingfuUpgradeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bingfusn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CBingfuUpgradeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 bingfusn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bingfusn_)));
          set_has_bingfusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CBingfuUpgradeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 bingfusn = 1;
  if (has_bingfusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bingfusn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CBingfuUpgradeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 bingfusn = 1;
  if (has_bingfusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->bingfusn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CBingfuUpgradeAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 bingfusn = 1;
    if (has_bingfusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bingfusn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CBingfuUpgradeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CBingfuUpgradeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CBingfuUpgradeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CBingfuUpgradeAck::MergeFrom(const PBG2CBingfuUpgradeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bingfusn()) {
      set_bingfusn(from.bingfusn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CBingfuUpgradeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CBingfuUpgradeAck::CopyFrom(const PBG2CBingfuUpgradeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CBingfuUpgradeAck::IsInitialized() const {
  
  return true;
}

void PBG2CBingfuUpgradeAck::Swap(PBG2CBingfuUpgradeAck* other) {
  if (other != this) {
    std::swap(bingfusn_, other->bingfusn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CBingfuUpgradeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CBingfuUpgradeAck_descriptor_;
  metadata.reflection = PBG2CBingfuUpgradeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2DropItem_InfoAsk::kDropunitidFieldNumber;
#endif  // !_MSC_VER

PBC2DropItem_InfoAsk::PBC2DropItem_InfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2DropItem_InfoAsk::InitAsDefaultInstance() {
}

PBC2DropItem_InfoAsk::PBC2DropItem_InfoAsk(const PBC2DropItem_InfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2DropItem_InfoAsk::SharedCtor() {
  _cached_size_ = 0;
  dropunitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2DropItem_InfoAsk::~PBC2DropItem_InfoAsk() {
  SharedDtor();
}

void PBC2DropItem_InfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2DropItem_InfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2DropItem_InfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2DropItem_InfoAsk_descriptor_;
}

const PBC2DropItem_InfoAsk& PBC2DropItem_InfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2DropItem_InfoAsk* PBC2DropItem_InfoAsk::default_instance_ = NULL;

PBC2DropItem_InfoAsk* PBC2DropItem_InfoAsk::New() const {
  return new PBC2DropItem_InfoAsk;
}

void PBC2DropItem_InfoAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropunitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2DropItem_InfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dropunitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropunitid_)));
          set_has_dropunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2DropItem_InfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropunitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2DropItem_InfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropunitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2DropItem_InfoAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dropunitid = 1;
    if (has_dropunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropunitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2DropItem_InfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2DropItem_InfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2DropItem_InfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2DropItem_InfoAsk::MergeFrom(const PBC2DropItem_InfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropunitid()) {
      set_dropunitid(from.dropunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2DropItem_InfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2DropItem_InfoAsk::CopyFrom(const PBC2DropItem_InfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2DropItem_InfoAsk::IsInitialized() const {
  
  return true;
}

void PBC2DropItem_InfoAsk::Swap(PBC2DropItem_InfoAsk* other) {
  if (other != this) {
    std::swap(dropunitid_, other->dropunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2DropItem_InfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2DropItem_InfoAsk_descriptor_;
  metadata.reflection = PBC2DropItem_InfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2DropItem_DiceAsk::kDropunitidFieldNumber;
const int PBC2DropItem_DiceAsk::kItemindexFieldNumber;
const int PBC2DropItem_DiceAsk::kAbandonFieldNumber;
#endif  // !_MSC_VER

PBC2DropItem_DiceAsk::PBC2DropItem_DiceAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2DropItem_DiceAsk::InitAsDefaultInstance() {
}

PBC2DropItem_DiceAsk::PBC2DropItem_DiceAsk(const PBC2DropItem_DiceAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2DropItem_DiceAsk::SharedCtor() {
  _cached_size_ = 0;
  dropunitid_ = 0u;
  itemindex_ = 0u;
  abandon_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2DropItem_DiceAsk::~PBC2DropItem_DiceAsk() {
  SharedDtor();
}

void PBC2DropItem_DiceAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2DropItem_DiceAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2DropItem_DiceAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2DropItem_DiceAsk_descriptor_;
}

const PBC2DropItem_DiceAsk& PBC2DropItem_DiceAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2DropItem_DiceAsk* PBC2DropItem_DiceAsk::default_instance_ = NULL;

PBC2DropItem_DiceAsk* PBC2DropItem_DiceAsk::New() const {
  return new PBC2DropItem_DiceAsk;
}

void PBC2DropItem_DiceAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropunitid_ = 0u;
    itemindex_ = 0u;
    abandon_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2DropItem_DiceAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dropunitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropunitid_)));
          set_has_dropunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemindex;
        break;
      }
      
      // optional uint32 itemindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemindex_)));
          set_has_itemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_abandon;
        break;
      }
      
      // optional bool abandon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abandon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &abandon_)));
          set_has_abandon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2DropItem_DiceAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropunitid(), output);
  }
  
  // optional uint32 itemindex = 2;
  if (has_itemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemindex(), output);
  }
  
  // optional bool abandon = 3;
  if (has_abandon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->abandon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2DropItem_DiceAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropunitid(), target);
  }
  
  // optional uint32 itemindex = 2;
  if (has_itemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemindex(), target);
  }
  
  // optional bool abandon = 3;
  if (has_abandon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->abandon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2DropItem_DiceAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dropunitid = 1;
    if (has_dropunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropunitid());
    }
    
    // optional uint32 itemindex = 2;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemindex());
    }
    
    // optional bool abandon = 3;
    if (has_abandon()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2DropItem_DiceAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2DropItem_DiceAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2DropItem_DiceAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2DropItem_DiceAsk::MergeFrom(const PBC2DropItem_DiceAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropunitid()) {
      set_dropunitid(from.dropunitid());
    }
    if (from.has_itemindex()) {
      set_itemindex(from.itemindex());
    }
    if (from.has_abandon()) {
      set_abandon(from.abandon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2DropItem_DiceAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2DropItem_DiceAsk::CopyFrom(const PBC2DropItem_DiceAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2DropItem_DiceAsk::IsInitialized() const {
  
  return true;
}

void PBC2DropItem_DiceAsk::Swap(PBC2DropItem_DiceAsk* other) {
  if (other != this) {
    std::swap(dropunitid_, other->dropunitid_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(abandon_, other->abandon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2DropItem_DiceAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2DropItem_DiceAsk_descriptor_;
  metadata.reflection = PBC2DropItem_DiceAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2DropItem_PickAllAsk::kDropunitidFieldNumber;
#endif  // !_MSC_VER

PBC2DropItem_PickAllAsk::PBC2DropItem_PickAllAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2DropItem_PickAllAsk::InitAsDefaultInstance() {
}

PBC2DropItem_PickAllAsk::PBC2DropItem_PickAllAsk(const PBC2DropItem_PickAllAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2DropItem_PickAllAsk::SharedCtor() {
  _cached_size_ = 0;
  dropunitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2DropItem_PickAllAsk::~PBC2DropItem_PickAllAsk() {
  SharedDtor();
}

void PBC2DropItem_PickAllAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2DropItem_PickAllAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2DropItem_PickAllAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2DropItem_PickAllAsk_descriptor_;
}

const PBC2DropItem_PickAllAsk& PBC2DropItem_PickAllAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2DropItem_PickAllAsk* PBC2DropItem_PickAllAsk::default_instance_ = NULL;

PBC2DropItem_PickAllAsk* PBC2DropItem_PickAllAsk::New() const {
  return new PBC2DropItem_PickAllAsk;
}

void PBC2DropItem_PickAllAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropunitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2DropItem_PickAllAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dropunitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropunitid_)));
          set_has_dropunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2DropItem_PickAllAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropunitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2DropItem_PickAllAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropunitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2DropItem_PickAllAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dropunitid = 1;
    if (has_dropunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropunitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2DropItem_PickAllAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2DropItem_PickAllAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2DropItem_PickAllAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2DropItem_PickAllAsk::MergeFrom(const PBC2DropItem_PickAllAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropunitid()) {
      set_dropunitid(from.dropunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2DropItem_PickAllAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2DropItem_PickAllAsk::CopyFrom(const PBC2DropItem_PickAllAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2DropItem_PickAllAsk::IsInitialized() const {
  
  return true;
}

void PBC2DropItem_PickAllAsk::Swap(PBC2DropItem_PickAllAsk* other) {
  if (other != this) {
    std::swap(dropunitid_, other->dropunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2DropItem_PickAllAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2DropItem_PickAllAsk_descriptor_;
  metadata.reflection = PBC2DropItem_PickAllAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2DropItem_PickupAsk::kDropunitidFieldNumber;
const int PBC2DropItem_PickupAsk::kItemindexFieldNumber;
#endif  // !_MSC_VER

PBC2DropItem_PickupAsk::PBC2DropItem_PickupAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2DropItem_PickupAsk::InitAsDefaultInstance() {
}

PBC2DropItem_PickupAsk::PBC2DropItem_PickupAsk(const PBC2DropItem_PickupAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2DropItem_PickupAsk::SharedCtor() {
  _cached_size_ = 0;
  dropunitid_ = 0u;
  itemindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2DropItem_PickupAsk::~PBC2DropItem_PickupAsk() {
  SharedDtor();
}

void PBC2DropItem_PickupAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2DropItem_PickupAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2DropItem_PickupAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2DropItem_PickupAsk_descriptor_;
}

const PBC2DropItem_PickupAsk& PBC2DropItem_PickupAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2DropItem_PickupAsk* PBC2DropItem_PickupAsk::default_instance_ = NULL;

PBC2DropItem_PickupAsk* PBC2DropItem_PickupAsk::New() const {
  return new PBC2DropItem_PickupAsk;
}

void PBC2DropItem_PickupAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropunitid_ = 0u;
    itemindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2DropItem_PickupAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dropunitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropunitid_)));
          set_has_dropunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemindex;
        break;
      }
      
      // optional uint32 itemindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemindex_)));
          set_has_itemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2DropItem_PickupAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropunitid(), output);
  }
  
  // optional uint32 itemindex = 2;
  if (has_itemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2DropItem_PickupAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropunitid(), target);
  }
  
  // optional uint32 itemindex = 2;
  if (has_itemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2DropItem_PickupAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dropunitid = 1;
    if (has_dropunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropunitid());
    }
    
    // optional uint32 itemindex = 2;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2DropItem_PickupAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2DropItem_PickupAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2DropItem_PickupAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2DropItem_PickupAsk::MergeFrom(const PBC2DropItem_PickupAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropunitid()) {
      set_dropunitid(from.dropunitid());
    }
    if (from.has_itemindex()) {
      set_itemindex(from.itemindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2DropItem_PickupAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2DropItem_PickupAsk::CopyFrom(const PBC2DropItem_PickupAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2DropItem_PickupAsk::IsInitialized() const {
  
  return true;
}

void PBC2DropItem_PickupAsk::Swap(PBC2DropItem_PickupAsk* other) {
  if (other != this) {
    std::swap(dropunitid_, other->dropunitid_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2DropItem_PickupAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2DropItem_PickupAsk_descriptor_;
  metadata.reflection = PBC2DropItem_PickupAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2DropItem_AbadonAsk::kDropunitidFieldNumber;
const int PBC2DropItem_AbadonAsk::kItemindexFieldNumber;
#endif  // !_MSC_VER

PBC2DropItem_AbadonAsk::PBC2DropItem_AbadonAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2DropItem_AbadonAsk::InitAsDefaultInstance() {
}

PBC2DropItem_AbadonAsk::PBC2DropItem_AbadonAsk(const PBC2DropItem_AbadonAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2DropItem_AbadonAsk::SharedCtor() {
  _cached_size_ = 0;
  dropunitid_ = 0u;
  itemindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2DropItem_AbadonAsk::~PBC2DropItem_AbadonAsk() {
  SharedDtor();
}

void PBC2DropItem_AbadonAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2DropItem_AbadonAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2DropItem_AbadonAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2DropItem_AbadonAsk_descriptor_;
}

const PBC2DropItem_AbadonAsk& PBC2DropItem_AbadonAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2DropItem_AbadonAsk* PBC2DropItem_AbadonAsk::default_instance_ = NULL;

PBC2DropItem_AbadonAsk* PBC2DropItem_AbadonAsk::New() const {
  return new PBC2DropItem_AbadonAsk;
}

void PBC2DropItem_AbadonAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropunitid_ = 0u;
    itemindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2DropItem_AbadonAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dropunitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropunitid_)));
          set_has_dropunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemindex;
        break;
      }
      
      // optional uint32 itemindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemindex_)));
          set_has_itemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2DropItem_AbadonAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropunitid(), output);
  }
  
  // optional uint32 itemindex = 2;
  if (has_itemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2DropItem_AbadonAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropunitid(), target);
  }
  
  // optional uint32 itemindex = 2;
  if (has_itemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2DropItem_AbadonAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dropunitid = 1;
    if (has_dropunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropunitid());
    }
    
    // optional uint32 itemindex = 2;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2DropItem_AbadonAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2DropItem_AbadonAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2DropItem_AbadonAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2DropItem_AbadonAsk::MergeFrom(const PBC2DropItem_AbadonAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropunitid()) {
      set_dropunitid(from.dropunitid());
    }
    if (from.has_itemindex()) {
      set_itemindex(from.itemindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2DropItem_AbadonAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2DropItem_AbadonAsk::CopyFrom(const PBC2DropItem_AbadonAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2DropItem_AbadonAsk::IsInitialized() const {
  
  return true;
}

void PBC2DropItem_AbadonAsk::Swap(PBC2DropItem_AbadonAsk* other) {
  if (other != this) {
    std::swap(dropunitid_, other->dropunitid_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2DropItem_AbadonAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2DropItem_AbadonAsk_descriptor_;
  metadata.reflection = PBC2DropItem_AbadonAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2DropItem_AssignAsk::kDropunitidFieldNumber;
const int PBC2DropItem_AssignAsk::kItemindexFieldNumber;
const int PBC2DropItem_AssignAsk::kTargetidFieldNumber;
#endif  // !_MSC_VER

PBC2DropItem_AssignAsk::PBC2DropItem_AssignAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2DropItem_AssignAsk::InitAsDefaultInstance() {
}

PBC2DropItem_AssignAsk::PBC2DropItem_AssignAsk(const PBC2DropItem_AssignAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2DropItem_AssignAsk::SharedCtor() {
  _cached_size_ = 0;
  dropunitid_ = 0u;
  itemindex_ = 0u;
  targetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2DropItem_AssignAsk::~PBC2DropItem_AssignAsk() {
  SharedDtor();
}

void PBC2DropItem_AssignAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2DropItem_AssignAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2DropItem_AssignAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2DropItem_AssignAsk_descriptor_;
}

const PBC2DropItem_AssignAsk& PBC2DropItem_AssignAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2DropItem_AssignAsk* PBC2DropItem_AssignAsk::default_instance_ = NULL;

PBC2DropItem_AssignAsk* PBC2DropItem_AssignAsk::New() const {
  return new PBC2DropItem_AssignAsk;
}

void PBC2DropItem_AssignAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropunitid_ = 0u;
    itemindex_ = 0u;
    targetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2DropItem_AssignAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dropunitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropunitid_)));
          set_has_dropunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemindex;
        break;
      }
      
      // optional uint32 itemindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemindex_)));
          set_has_itemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetid;
        break;
      }
      
      // optional uint32 targetid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2DropItem_AssignAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropunitid(), output);
  }
  
  // optional uint32 itemindex = 2;
  if (has_itemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemindex(), output);
  }
  
  // optional uint32 targetid = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->targetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2DropItem_AssignAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropunitid(), target);
  }
  
  // optional uint32 itemindex = 2;
  if (has_itemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemindex(), target);
  }
  
  // optional uint32 targetid = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->targetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2DropItem_AssignAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dropunitid = 1;
    if (has_dropunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropunitid());
    }
    
    // optional uint32 itemindex = 2;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemindex());
    }
    
    // optional uint32 targetid = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2DropItem_AssignAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2DropItem_AssignAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2DropItem_AssignAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2DropItem_AssignAsk::MergeFrom(const PBC2DropItem_AssignAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropunitid()) {
      set_dropunitid(from.dropunitid());
    }
    if (from.has_itemindex()) {
      set_itemindex(from.itemindex());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2DropItem_AssignAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2DropItem_AssignAsk::CopyFrom(const PBC2DropItem_AssignAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2DropItem_AssignAsk::IsInitialized() const {
  
  return true;
}

void PBC2DropItem_AssignAsk::Swap(PBC2DropItem_AssignAsk* other) {
  if (other != this) {
    std::swap(dropunitid_, other->dropunitid_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2DropItem_AssignAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2DropItem_AssignAsk_descriptor_;
  metadata.reflection = PBC2DropItem_AssignAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDropItem_DiceInfo::kMemberidFieldNumber;
const int PBDropItem_DiceInfo::kNumberFieldNumber;
#endif  // !_MSC_VER

PBDropItem_DiceInfo::PBDropItem_DiceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDropItem_DiceInfo::InitAsDefaultInstance() {
}

PBDropItem_DiceInfo::PBDropItem_DiceInfo(const PBDropItem_DiceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDropItem_DiceInfo::SharedCtor() {
  _cached_size_ = 0;
  memberid_ = 0u;
  number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDropItem_DiceInfo::~PBDropItem_DiceInfo() {
  SharedDtor();
}

void PBDropItem_DiceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDropItem_DiceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDropItem_DiceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDropItem_DiceInfo_descriptor_;
}

const PBDropItem_DiceInfo& PBDropItem_DiceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBDropItem_DiceInfo* PBDropItem_DiceInfo::default_instance_ = NULL;

PBDropItem_DiceInfo* PBDropItem_DiceInfo::New() const {
  return new PBDropItem_DiceInfo;
}

void PBDropItem_DiceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    memberid_ = 0u;
    number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDropItem_DiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 memberid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }
      
      // optional uint32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDropItem_DiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 memberid = 1;
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->memberid(), output);
  }
  
  // optional uint32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDropItem_DiceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 memberid = 1;
  if (has_memberid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->memberid(), target);
  }
  
  // optional uint32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDropItem_DiceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 memberid = 1;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberid());
    }
    
    // optional uint32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDropItem_DiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDropItem_DiceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDropItem_DiceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDropItem_DiceInfo::MergeFrom(const PBDropItem_DiceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDropItem_DiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDropItem_DiceInfo::CopyFrom(const PBDropItem_DiceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDropItem_DiceInfo::IsInitialized() const {
  
  return true;
}

void PBDropItem_DiceInfo::Swap(PBDropItem_DiceInfo* other) {
  if (other != this) {
    std::swap(memberid_, other->memberid_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDropItem_DiceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDropItem_DiceInfo_descriptor_;
  metadata.reflection = PBDropItem_DiceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDropItem_DropCell::kItemidxFieldNumber;
const int PBDropItem_DropCell::kItemidFieldNumber;
const int PBDropItem_DropCell::kItemnumFieldNumber;
const int PBDropItem_DropCell::kBindFieldNumber;
const int PBDropItem_DropCell::kDiceFieldNumber;
const int PBDropItem_DropCell::kOwneridFieldNumber;
#endif  // !_MSC_VER

PBDropItem_DropCell::PBDropItem_DropCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDropItem_DropCell::InitAsDefaultInstance() {
}

PBDropItem_DropCell::PBDropItem_DropCell(const PBDropItem_DropCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDropItem_DropCell::SharedCtor() {
  _cached_size_ = 0;
  itemidx_ = 0u;
  itemid_ = 0u;
  itemnum_ = 0u;
  bind_ = false;
  ownerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDropItem_DropCell::~PBDropItem_DropCell() {
  SharedDtor();
}

void PBDropItem_DropCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDropItem_DropCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDropItem_DropCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDropItem_DropCell_descriptor_;
}

const PBDropItem_DropCell& PBDropItem_DropCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBDropItem_DropCell* PBDropItem_DropCell::default_instance_ = NULL;

PBDropItem_DropCell* PBDropItem_DropCell::New() const {
  return new PBDropItem_DropCell;
}

void PBDropItem_DropCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemidx_ = 0u;
    itemid_ = 0u;
    itemnum_ = 0u;
    bind_ = false;
    ownerid_ = 0u;
  }
  dice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDropItem_DropCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemidx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemidx_)));
          set_has_itemidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }
      
      // optional uint32 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemnum;
        break;
      }
      
      // optional uint32 itemnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bind;
        break;
      }
      
      // optional bool bind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dice;
        break;
      }
      
      // repeated .PBDropItem_DiceInfo dice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dice;
        if (input->ExpectTag(48)) goto parse_ownerid;
        break;
      }
      
      // optional uint32 ownerid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDropItem_DropCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemidx = 1;
  if (has_itemidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemidx(), output);
  }
  
  // optional uint32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }
  
  // optional uint32 itemnum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemnum(), output);
  }
  
  // optional bool bind = 4;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bind(), output);
  }
  
  // repeated .PBDropItem_DiceInfo dice = 5;
  for (int i = 0; i < this->dice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dice(i), output);
  }
  
  // optional uint32 ownerid = 6;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ownerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDropItem_DropCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemidx = 1;
  if (has_itemidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemidx(), target);
  }
  
  // optional uint32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }
  
  // optional uint32 itemnum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemnum(), target);
  }
  
  // optional bool bind = 4;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bind(), target);
  }
  
  // repeated .PBDropItem_DiceInfo dice = 5;
  for (int i = 0; i < this->dice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dice(i), target);
  }
  
  // optional uint32 ownerid = 6;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ownerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDropItem_DropCell::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemidx = 1;
    if (has_itemidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemidx());
    }
    
    // optional uint32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 itemnum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }
    
    // optional bool bind = 4;
    if (has_bind()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 ownerid = 6;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ownerid());
    }
    
  }
  // repeated .PBDropItem_DiceInfo dice = 5;
  total_size += 1 * this->dice_size();
  for (int i = 0; i < this->dice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dice(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDropItem_DropCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDropItem_DropCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDropItem_DropCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDropItem_DropCell::MergeFrom(const PBDropItem_DropCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  dice_.MergeFrom(from.dice_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemidx()) {
      set_itemidx(from.itemidx());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDropItem_DropCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDropItem_DropCell::CopyFrom(const PBDropItem_DropCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDropItem_DropCell::IsInitialized() const {
  
  return true;
}

void PBDropItem_DropCell::Swap(PBDropItem_DropCell* other) {
  if (other != this) {
    std::swap(itemidx_, other->itemidx_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(bind_, other->bind_);
    dice_.Swap(&other->dice_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDropItem_DropCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDropItem_DropCell_descriptor_;
  metadata.reflection = PBDropItem_DropCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2DropItem_Info::kDropunitidFieldNumber;
const int PBC2DropItem_Info::kCellFieldNumber;
const int PBC2DropItem_Info::kTeamFieldNumber;
const int PBC2DropItem_Info::kAllottypeFieldNumber;
const int PBC2DropItem_Info::kEndtimeFieldNumber;
#endif  // !_MSC_VER

PBC2DropItem_Info::PBC2DropItem_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2DropItem_Info::InitAsDefaultInstance() {
  team_ = const_cast< ::PBTeamInfo*>(&::PBTeamInfo::default_instance());
}

PBC2DropItem_Info::PBC2DropItem_Info(const PBC2DropItem_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2DropItem_Info::SharedCtor() {
  _cached_size_ = 0;
  dropunitid_ = 0u;
  team_ = NULL;
  allottype_ = 0u;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2DropItem_Info::~PBC2DropItem_Info() {
  SharedDtor();
}

void PBC2DropItem_Info::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void PBC2DropItem_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2DropItem_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2DropItem_Info_descriptor_;
}

const PBC2DropItem_Info& PBC2DropItem_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2DropItem_Info* PBC2DropItem_Info::default_instance_ = NULL;

PBC2DropItem_Info* PBC2DropItem_Info::New() const {
  return new PBC2DropItem_Info;
}

void PBC2DropItem_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropunitid_ = 0u;
    if (has_team()) {
      if (team_ != NULL) team_->::PBTeamInfo::Clear();
    }
    allottype_ = 0u;
    endtime_ = 0u;
  }
  cell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2DropItem_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dropunitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropunitid_)));
          set_has_dropunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell;
        break;
      }
      
      // repeated .PBDropItem_DropCell cell = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell;
        if (input->ExpectTag(26)) goto parse_team;
        break;
      }
      
      // optional .PBTeamInfo team = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_allottype;
        break;
      }
      
      // optional uint32 allottype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allottype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allottype_)));
          set_has_allottype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }
      
      // optional uint32 endtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2DropItem_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropunitid(), output);
  }
  
  // repeated .PBDropItem_DropCell cell = 2;
  for (int i = 0; i < this->cell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cell(i), output);
  }
  
  // optional .PBTeamInfo team = 3;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->team(), output);
  }
  
  // optional uint32 allottype = 4;
  if (has_allottype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->allottype(), output);
  }
  
  // optional uint32 endtime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2DropItem_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropunitid(), target);
  }
  
  // repeated .PBDropItem_DropCell cell = 2;
  for (int i = 0; i < this->cell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cell(i), target);
  }
  
  // optional .PBTeamInfo team = 3;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->team(), target);
  }
  
  // optional uint32 allottype = 4;
  if (has_allottype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->allottype(), target);
  }
  
  // optional uint32 endtime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2DropItem_Info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dropunitid = 1;
    if (has_dropunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropunitid());
    }
    
    // optional .PBTeamInfo team = 3;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }
    
    // optional uint32 allottype = 4;
    if (has_allottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allottype());
    }
    
    // optional uint32 endtime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }
    
  }
  // repeated .PBDropItem_DropCell cell = 2;
  total_size += 1 * this->cell_size();
  for (int i = 0; i < this->cell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2DropItem_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2DropItem_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2DropItem_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2DropItem_Info::MergeFrom(const PBC2DropItem_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_.MergeFrom(from.cell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropunitid()) {
      set_dropunitid(from.dropunitid());
    }
    if (from.has_team()) {
      mutable_team()->::PBTeamInfo::MergeFrom(from.team());
    }
    if (from.has_allottype()) {
      set_allottype(from.allottype());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2DropItem_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2DropItem_Info::CopyFrom(const PBC2DropItem_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2DropItem_Info::IsInitialized() const {
  
  return true;
}

void PBC2DropItem_Info::Swap(PBC2DropItem_Info* other) {
  if (other != this) {
    std::swap(dropunitid_, other->dropunitid_);
    cell_.Swap(&other->cell_);
    std::swap(team_, other->team_);
    std::swap(allottype_, other->allottype_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2DropItem_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2DropItem_Info_descriptor_;
  metadata.reflection = PBC2DropItem_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2DropItem_Dice::kDropunitidFieldNumber;
const int PBC2DropItem_Dice::kItemindexFieldNumber;
const int PBC2DropItem_Dice::kInfoFieldNumber;
#endif  // !_MSC_VER

PBC2DropItem_Dice::PBC2DropItem_Dice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2DropItem_Dice::InitAsDefaultInstance() {
  info_ = const_cast< ::PBDropItem_DiceInfo*>(&::PBDropItem_DiceInfo::default_instance());
}

PBC2DropItem_Dice::PBC2DropItem_Dice(const PBC2DropItem_Dice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2DropItem_Dice::SharedCtor() {
  _cached_size_ = 0;
  dropunitid_ = 0u;
  itemindex_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2DropItem_Dice::~PBC2DropItem_Dice() {
  SharedDtor();
}

void PBC2DropItem_Dice::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PBC2DropItem_Dice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2DropItem_Dice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2DropItem_Dice_descriptor_;
}

const PBC2DropItem_Dice& PBC2DropItem_Dice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2DropItem_Dice* PBC2DropItem_Dice::default_instance_ = NULL;

PBC2DropItem_Dice* PBC2DropItem_Dice::New() const {
  return new PBC2DropItem_Dice;
}

void PBC2DropItem_Dice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropunitid_ = 0u;
    itemindex_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::PBDropItem_DiceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2DropItem_Dice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dropunitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropunitid_)));
          set_has_dropunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemindex;
        break;
      }
      
      // optional uint32 itemindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemindex_)));
          set_has_itemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional .PBDropItem_DiceInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2DropItem_Dice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropunitid(), output);
  }
  
  // optional uint32 itemindex = 2;
  if (has_itemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemindex(), output);
  }
  
  // optional .PBDropItem_DiceInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2DropItem_Dice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropunitid(), target);
  }
  
  // optional uint32 itemindex = 2;
  if (has_itemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemindex(), target);
  }
  
  // optional .PBDropItem_DiceInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2DropItem_Dice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dropunitid = 1;
    if (has_dropunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropunitid());
    }
    
    // optional uint32 itemindex = 2;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemindex());
    }
    
    // optional .PBDropItem_DiceInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2DropItem_Dice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2DropItem_Dice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2DropItem_Dice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2DropItem_Dice::MergeFrom(const PBC2DropItem_Dice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropunitid()) {
      set_dropunitid(from.dropunitid());
    }
    if (from.has_itemindex()) {
      set_itemindex(from.itemindex());
    }
    if (from.has_info()) {
      mutable_info()->::PBDropItem_DiceInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2DropItem_Dice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2DropItem_Dice::CopyFrom(const PBC2DropItem_Dice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2DropItem_Dice::IsInitialized() const {
  
  return true;
}

void PBC2DropItem_Dice::Swap(PBC2DropItem_Dice* other) {
  if (other != this) {
    std::swap(dropunitid_, other->dropunitid_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2DropItem_Dice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2DropItem_Dice_descriptor_;
  metadata.reflection = PBC2DropItem_Dice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2DropItem_Assign::kDropunitidFieldNumber;
const int PBC2DropItem_Assign::kCellFieldNumber;
const int PBC2DropItem_Assign::kDisplayFieldNumber;
#endif  // !_MSC_VER

PBC2DropItem_Assign::PBC2DropItem_Assign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2DropItem_Assign::InitAsDefaultInstance() {
  cell_ = const_cast< ::PBDropItem_DropCell*>(&::PBDropItem_DropCell::default_instance());
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBC2DropItem_Assign::PBC2DropItem_Assign(const PBC2DropItem_Assign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2DropItem_Assign::SharedCtor() {
  _cached_size_ = 0;
  dropunitid_ = 0u;
  cell_ = NULL;
  display_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2DropItem_Assign::~PBC2DropItem_Assign() {
  SharedDtor();
}

void PBC2DropItem_Assign::SharedDtor() {
  if (this != default_instance_) {
    delete cell_;
    delete display_;
  }
}

void PBC2DropItem_Assign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2DropItem_Assign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2DropItem_Assign_descriptor_;
}

const PBC2DropItem_Assign& PBC2DropItem_Assign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2DropItem_Assign* PBC2DropItem_Assign::default_instance_ = NULL;

PBC2DropItem_Assign* PBC2DropItem_Assign::New() const {
  return new PBC2DropItem_Assign;
}

void PBC2DropItem_Assign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropunitid_ = 0u;
    if (has_cell()) {
      if (cell_ != NULL) cell_->::PBDropItem_DropCell::Clear();
    }
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2DropItem_Assign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dropunitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropunitid_)));
          set_has_dropunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell;
        break;
      }
      
      // optional .PBDropItem_DropCell cell = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_display;
        break;
      }
      
      // optional .PBPlayerDisplay display = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2DropItem_Assign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropunitid(), output);
  }
  
  // optional .PBDropItem_DropCell cell = 2;
  if (has_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cell(), output);
  }
  
  // optional .PBPlayerDisplay display = 3;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->display(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2DropItem_Assign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropunitid(), target);
  }
  
  // optional .PBDropItem_DropCell cell = 2;
  if (has_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cell(), target);
  }
  
  // optional .PBPlayerDisplay display = 3;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->display(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2DropItem_Assign::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dropunitid = 1;
    if (has_dropunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropunitid());
    }
    
    // optional .PBDropItem_DropCell cell = 2;
    if (has_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell());
    }
    
    // optional .PBPlayerDisplay display = 3;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2DropItem_Assign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2DropItem_Assign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2DropItem_Assign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2DropItem_Assign::MergeFrom(const PBC2DropItem_Assign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropunitid()) {
      set_dropunitid(from.dropunitid());
    }
    if (from.has_cell()) {
      mutable_cell()->::PBDropItem_DropCell::MergeFrom(from.cell());
    }
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2DropItem_Assign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2DropItem_Assign::CopyFrom(const PBC2DropItem_Assign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2DropItem_Assign::IsInitialized() const {
  
  return true;
}

void PBC2DropItem_Assign::Swap(PBC2DropItem_Assign* other) {
  if (other != this) {
    std::swap(dropunitid_, other->dropunitid_);
    std::swap(cell_, other->cell_);
    std::swap(display_, other->display_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2DropItem_Assign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2DropItem_Assign_descriptor_;
  metadata.reflection = PBC2DropItem_Assign_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2DropItem_ChangeAllot::kDropunitidFieldNumber;
const int PBC2DropItem_ChangeAllot::kAllottypeFieldNumber;
const int PBC2DropItem_ChangeAllot::kEndtimeFieldNumber;
#endif  // !_MSC_VER

PBC2DropItem_ChangeAllot::PBC2DropItem_ChangeAllot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2DropItem_ChangeAllot::InitAsDefaultInstance() {
}

PBC2DropItem_ChangeAllot::PBC2DropItem_ChangeAllot(const PBC2DropItem_ChangeAllot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2DropItem_ChangeAllot::SharedCtor() {
  _cached_size_ = 0;
  dropunitid_ = 0u;
  allottype_ = 0u;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2DropItem_ChangeAllot::~PBC2DropItem_ChangeAllot() {
  SharedDtor();
}

void PBC2DropItem_ChangeAllot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2DropItem_ChangeAllot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2DropItem_ChangeAllot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2DropItem_ChangeAllot_descriptor_;
}

const PBC2DropItem_ChangeAllot& PBC2DropItem_ChangeAllot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2DropItem_ChangeAllot* PBC2DropItem_ChangeAllot::default_instance_ = NULL;

PBC2DropItem_ChangeAllot* PBC2DropItem_ChangeAllot::New() const {
  return new PBC2DropItem_ChangeAllot;
}

void PBC2DropItem_ChangeAllot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropunitid_ = 0u;
    allottype_ = 0u;
    endtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2DropItem_ChangeAllot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dropunitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropunitid_)));
          set_has_dropunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allottype;
        break;
      }
      
      // optional uint32 allottype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allottype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allottype_)));
          set_has_allottype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }
      
      // optional uint32 endtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2DropItem_ChangeAllot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropunitid(), output);
  }
  
  // optional uint32 allottype = 2;
  if (has_allottype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allottype(), output);
  }
  
  // optional uint32 endtime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2DropItem_ChangeAllot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dropunitid = 1;
  if (has_dropunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropunitid(), target);
  }
  
  // optional uint32 allottype = 2;
  if (has_allottype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->allottype(), target);
  }
  
  // optional uint32 endtime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2DropItem_ChangeAllot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dropunitid = 1;
    if (has_dropunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropunitid());
    }
    
    // optional uint32 allottype = 2;
    if (has_allottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allottype());
    }
    
    // optional uint32 endtime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2DropItem_ChangeAllot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2DropItem_ChangeAllot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2DropItem_ChangeAllot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2DropItem_ChangeAllot::MergeFrom(const PBC2DropItem_ChangeAllot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropunitid()) {
      set_dropunitid(from.dropunitid());
    }
    if (from.has_allottype()) {
      set_allottype(from.allottype());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2DropItem_ChangeAllot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2DropItem_ChangeAllot::CopyFrom(const PBC2DropItem_ChangeAllot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2DropItem_ChangeAllot::IsInitialized() const {
  
  return true;
}

void PBC2DropItem_ChangeAllot::Swap(PBC2DropItem_ChangeAllot* other) {
  if (other != this) {
    std::swap(dropunitid_, other->dropunitid_);
    std::swap(allottype_, other->allottype_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2DropItem_ChangeAllot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2DropItem_ChangeAllot_descriptor_;
  metadata.reflection = PBC2DropItem_ChangeAllot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCommon_PlaneEnter::kParamFieldNumber;
#endif  // !_MSC_VER

PBC2GCommon_PlaneEnter::PBC2GCommon_PlaneEnter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommon_PlaneEnter::InitAsDefaultInstance() {
}

PBC2GCommon_PlaneEnter::PBC2GCommon_PlaneEnter(const PBC2GCommon_PlaneEnter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommon_PlaneEnter::SharedCtor() {
  _cached_size_ = 0;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommon_PlaneEnter::~PBC2GCommon_PlaneEnter() {
  SharedDtor();
}

void PBC2GCommon_PlaneEnter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommon_PlaneEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommon_PlaneEnter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommon_PlaneEnter_descriptor_;
}

const PBC2GCommon_PlaneEnter& PBC2GCommon_PlaneEnter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommon_PlaneEnter* PBC2GCommon_PlaneEnter::default_instance_ = NULL;

PBC2GCommon_PlaneEnter* PBC2GCommon_PlaneEnter::New() const {
  return new PBC2GCommon_PlaneEnter;
}

void PBC2GCommon_PlaneEnter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommon_PlaneEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCommon_PlaneEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommon_PlaneEnter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommon_PlaneEnter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommon_PlaneEnter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommon_PlaneEnter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommon_PlaneEnter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommon_PlaneEnter::MergeFrom(const PBC2GCommon_PlaneEnter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommon_PlaneEnter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommon_PlaneEnter::CopyFrom(const PBC2GCommon_PlaneEnter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommon_PlaneEnter::IsInitialized() const {
  
  return true;
}

void PBC2GCommon_PlaneEnter::Swap(PBC2GCommon_PlaneEnter* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommon_PlaneEnter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommon_PlaneEnter_descriptor_;
  metadata.reflection = PBC2GCommon_PlaneEnter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCommon_PlaneLeave::kPosxFieldNumber;
const int PBC2GCommon_PlaneLeave::kPosyFieldNumber;
const int PBC2GCommon_PlaneLeave::kDirFieldNumber;
const int PBC2GCommon_PlaneLeave::kCurhpFieldNumber;
const int PBC2GCommon_PlaneLeave::kCurenergyFieldNumber;
#endif  // !_MSC_VER

PBC2GCommon_PlaneLeave::PBC2GCommon_PlaneLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommon_PlaneLeave::InitAsDefaultInstance() {
}

PBC2GCommon_PlaneLeave::PBC2GCommon_PlaneLeave(const PBC2GCommon_PlaneLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommon_PlaneLeave::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 0;
  posy_ = 0;
  dir_ = 0;
  curhp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommon_PlaneLeave::~PBC2GCommon_PlaneLeave() {
  SharedDtor();
}

void PBC2GCommon_PlaneLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommon_PlaneLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommon_PlaneLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommon_PlaneLeave_descriptor_;
}

const PBC2GCommon_PlaneLeave& PBC2GCommon_PlaneLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommon_PlaneLeave* PBC2GCommon_PlaneLeave::default_instance_ = NULL;

PBC2GCommon_PlaneLeave* PBC2GCommon_PlaneLeave::New() const {
  return new PBC2GCommon_PlaneLeave;
}

void PBC2GCommon_PlaneLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posx_ = 0;
    posy_ = 0;
    dir_ = 0;
    curhp_ = 0u;
  }
  curenergy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommon_PlaneLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float posx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_posy;
        break;
      }
      
      // optional float posy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dir;
        break;
      }
      
      // optional float dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curhp;
        break;
      }
      
      // optional uint32 curhp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_curenergy;
        break;
      }
      
      // repeated .PBEnergy curenergy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curenergy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curenergy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_curenergy;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCommon_PlaneLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float posx = 1;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->posx(), output);
  }
  
  // optional float posy = 2;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->posy(), output);
  }
  
  // optional float dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }
  
  // optional uint32 curhp = 4;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curhp(), output);
  }
  
  // repeated .PBEnergy curenergy = 5;
  for (int i = 0; i < this->curenergy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->curenergy(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommon_PlaneLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float posx = 1;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->posx(), target);
  }
  
  // optional float posy = 2;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->posy(), target);
  }
  
  // optional float dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }
  
  // optional uint32 curhp = 4;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curhp(), target);
  }
  
  // repeated .PBEnergy curenergy = 5;
  for (int i = 0; i < this->curenergy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->curenergy(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommon_PlaneLeave::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float posx = 1;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
    // optional float posy = 2;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
    // optional float dir = 3;
    if (has_dir()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 curhp = 4;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhp());
    }
    
  }
  // repeated .PBEnergy curenergy = 5;
  total_size += 1 * this->curenergy_size();
  for (int i = 0; i < this->curenergy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curenergy(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommon_PlaneLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommon_PlaneLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommon_PlaneLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommon_PlaneLeave::MergeFrom(const PBC2GCommon_PlaneLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  curenergy_.MergeFrom(from.curenergy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommon_PlaneLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommon_PlaneLeave::CopyFrom(const PBC2GCommon_PlaneLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommon_PlaneLeave::IsInitialized() const {
  
  return true;
}

void PBC2GCommon_PlaneLeave::Swap(PBC2GCommon_PlaneLeave* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(dir_, other->dir_);
    std::swap(curhp_, other->curhp_);
    curenergy_.Swap(&other->curenergy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommon_PlaneLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommon_PlaneLeave_descriptor_;
  metadata.reflection = PBC2GCommon_PlaneLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCommon_RegionTriggerPlane::kPlaneIdFieldNumber;
#endif  // !_MSC_VER

PBC2GCommon_RegionTriggerPlane::PBC2GCommon_RegionTriggerPlane()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommon_RegionTriggerPlane::InitAsDefaultInstance() {
}

PBC2GCommon_RegionTriggerPlane::PBC2GCommon_RegionTriggerPlane(const PBC2GCommon_RegionTriggerPlane& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommon_RegionTriggerPlane::SharedCtor() {
  _cached_size_ = 0;
  plane_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommon_RegionTriggerPlane::~PBC2GCommon_RegionTriggerPlane() {
  SharedDtor();
}

void PBC2GCommon_RegionTriggerPlane::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommon_RegionTriggerPlane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommon_RegionTriggerPlane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommon_RegionTriggerPlane_descriptor_;
}

const PBC2GCommon_RegionTriggerPlane& PBC2GCommon_RegionTriggerPlane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommon_RegionTriggerPlane* PBC2GCommon_RegionTriggerPlane::default_instance_ = NULL;

PBC2GCommon_RegionTriggerPlane* PBC2GCommon_RegionTriggerPlane::New() const {
  return new PBC2GCommon_RegionTriggerPlane;
}

void PBC2GCommon_RegionTriggerPlane::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plane_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommon_RegionTriggerPlane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 plane_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plane_id_)));
          set_has_plane_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCommon_RegionTriggerPlane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 plane_id = 1;
  if (has_plane_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plane_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommon_RegionTriggerPlane::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 plane_id = 1;
  if (has_plane_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plane_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommon_RegionTriggerPlane::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 plane_id = 1;
    if (has_plane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plane_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommon_RegionTriggerPlane::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommon_RegionTriggerPlane* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommon_RegionTriggerPlane*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommon_RegionTriggerPlane::MergeFrom(const PBC2GCommon_RegionTriggerPlane& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plane_id()) {
      set_plane_id(from.plane_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommon_RegionTriggerPlane::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommon_RegionTriggerPlane::CopyFrom(const PBC2GCommon_RegionTriggerPlane& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommon_RegionTriggerPlane::IsInitialized() const {
  
  return true;
}

void PBC2GCommon_RegionTriggerPlane::Swap(PBC2GCommon_RegionTriggerPlane* other) {
  if (other != this) {
    std::swap(plane_id_, other->plane_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommon_RegionTriggerPlane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommon_RegionTriggerPlane_descriptor_;
  metadata.reflection = PBC2GCommon_RegionTriggerPlane_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2GCommon_TakeASeatAck::kIsSitDownFieldNumber;
#endif  // !_MSC_VER

PBS2GCommon_TakeASeatAck::PBS2GCommon_TakeASeatAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2GCommon_TakeASeatAck::InitAsDefaultInstance() {
}

PBS2GCommon_TakeASeatAck::PBS2GCommon_TakeASeatAck(const PBS2GCommon_TakeASeatAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2GCommon_TakeASeatAck::SharedCtor() {
  _cached_size_ = 0;
  issitdown_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2GCommon_TakeASeatAck::~PBS2GCommon_TakeASeatAck() {
  SharedDtor();
}

void PBS2GCommon_TakeASeatAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2GCommon_TakeASeatAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2GCommon_TakeASeatAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2GCommon_TakeASeatAck_descriptor_;
}

const PBS2GCommon_TakeASeatAck& PBS2GCommon_TakeASeatAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2GCommon_TakeASeatAck* PBS2GCommon_TakeASeatAck::default_instance_ = NULL;

PBS2GCommon_TakeASeatAck* PBS2GCommon_TakeASeatAck::New() const {
  return new PBS2GCommon_TakeASeatAck;
}

void PBS2GCommon_TakeASeatAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issitdown_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2GCommon_TakeASeatAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isSitDown = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issitdown_)));
          set_has_issitdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2GCommon_TakeASeatAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isSitDown = 1;
  if (has_issitdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issitdown(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2GCommon_TakeASeatAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isSitDown = 1;
  if (has_issitdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issitdown(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2GCommon_TakeASeatAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isSitDown = 1;
    if (has_issitdown()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2GCommon_TakeASeatAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2GCommon_TakeASeatAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2GCommon_TakeASeatAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2GCommon_TakeASeatAck::MergeFrom(const PBS2GCommon_TakeASeatAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issitdown()) {
      set_issitdown(from.issitdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2GCommon_TakeASeatAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2GCommon_TakeASeatAck::CopyFrom(const PBS2GCommon_TakeASeatAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2GCommon_TakeASeatAck::IsInitialized() const {
  
  return true;
}

void PBS2GCommon_TakeASeatAck::Swap(PBS2GCommon_TakeASeatAck* other) {
  if (other != this) {
    std::swap(issitdown_, other->issitdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2GCommon_TakeASeatAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2GCommon_TakeASeatAck_descriptor_;
  metadata.reflection = PBS2GCommon_TakeASeatAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommon_PlaneUpdate::kAttrFieldNumber;
#endif  // !_MSC_VER

PBG2CCommon_PlaneUpdate::PBG2CCommon_PlaneUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_PlaneUpdate::InitAsDefaultInstance() {
  attr_ = const_cast< ::PBGhostGameAttr*>(&::PBGhostGameAttr::default_instance());
}

PBG2CCommon_PlaneUpdate::PBG2CCommon_PlaneUpdate(const PBG2CCommon_PlaneUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_PlaneUpdate::SharedCtor() {
  _cached_size_ = 0;
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_PlaneUpdate::~PBG2CCommon_PlaneUpdate() {
  SharedDtor();
}

void PBG2CCommon_PlaneUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
  }
}

void PBG2CCommon_PlaneUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_PlaneUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_PlaneUpdate_descriptor_;
}

const PBG2CCommon_PlaneUpdate& PBG2CCommon_PlaneUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_PlaneUpdate* PBG2CCommon_PlaneUpdate::default_instance_ = NULL;

PBG2CCommon_PlaneUpdate* PBG2CCommon_PlaneUpdate::New() const {
  return new PBG2CCommon_PlaneUpdate;
}

void PBG2CCommon_PlaneUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attr()) {
      if (attr_ != NULL) attr_->::PBGhostGameAttr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_PlaneUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBGhostGameAttr attr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommon_PlaneUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBGhostGameAttr attr = 1;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_PlaneUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBGhostGameAttr attr = 1;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_PlaneUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBGhostGameAttr attr = 1;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_PlaneUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_PlaneUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_PlaneUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_PlaneUpdate::MergeFrom(const PBG2CCommon_PlaneUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr()) {
      mutable_attr()->::PBGhostGameAttr::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_PlaneUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_PlaneUpdate::CopyFrom(const PBG2CCommon_PlaneUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_PlaneUpdate::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_PlaneUpdate::Swap(PBG2CCommon_PlaneUpdate* other) {
  if (other != this) {
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_PlaneUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_PlaneUpdate_descriptor_;
  metadata.reflection = PBG2CCommon_PlaneUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCopymapCreate::kCopymapidFieldNumber;
const int PBC2GCopymapCreate::kParamFieldNumber;
#endif  // !_MSC_VER

PBC2GCopymapCreate::PBC2GCopymapCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCopymapCreate::InitAsDefaultInstance() {
}

PBC2GCopymapCreate::PBC2GCopymapCreate(const PBC2GCopymapCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCopymapCreate::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCopymapCreate::~PBC2GCopymapCreate() {
  SharedDtor();
}

void PBC2GCopymapCreate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCopymapCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCopymapCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCopymapCreate_descriptor_;
}

const PBC2GCopymapCreate& PBC2GCopymapCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCopymapCreate* PBC2GCopymapCreate::default_instance_ = NULL;

PBC2GCopymapCreate* PBC2GCopymapCreate::New() const {
  return new PBC2GCopymapCreate;
}

void PBC2GCopymapCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCopymapCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }
      
      // optional uint32 param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCopymapCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional uint32 param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCopymapCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional uint32 param = 2;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCopymapCreate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCopymapCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCopymapCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCopymapCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCopymapCreate::MergeFrom(const PBC2GCopymapCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCopymapCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCopymapCreate::CopyFrom(const PBC2GCopymapCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCopymapCreate::IsInitialized() const {
  
  return true;
}

void PBC2GCopymapCreate::Swap(PBC2GCopymapCreate* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCopymapCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCopymapCreate_descriptor_;
  metadata.reflection = PBC2GCopymapCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCopymapEnterNpc::kCopymapidFieldNumber;
const int PBC2GCopymapEnterNpc::kNpcunitidFieldNumber;
#endif  // !_MSC_VER

PBC2GCopymapEnterNpc::PBC2GCopymapEnterNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCopymapEnterNpc::InitAsDefaultInstance() {
}

PBC2GCopymapEnterNpc::PBC2GCopymapEnterNpc(const PBC2GCopymapEnterNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCopymapEnterNpc::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  npcunitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCopymapEnterNpc::~PBC2GCopymapEnterNpc() {
  SharedDtor();
}

void PBC2GCopymapEnterNpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCopymapEnterNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCopymapEnterNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCopymapEnterNpc_descriptor_;
}

const PBC2GCopymapEnterNpc& PBC2GCopymapEnterNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCopymapEnterNpc* PBC2GCopymapEnterNpc::default_instance_ = NULL;

PBC2GCopymapEnterNpc* PBC2GCopymapEnterNpc::New() const {
  return new PBC2GCopymapEnterNpc;
}

void PBC2GCopymapEnterNpc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    npcunitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCopymapEnterNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npcunitid;
        break;
      }
      
      // optional uint32 npcunitid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcunitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcunitid_)));
          set_has_npcunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCopymapEnterNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional uint32 npcunitid = 2;
  if (has_npcunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcunitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCopymapEnterNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional uint32 npcunitid = 2;
  if (has_npcunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcunitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCopymapEnterNpc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 npcunitid = 2;
    if (has_npcunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcunitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCopymapEnterNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCopymapEnterNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCopymapEnterNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCopymapEnterNpc::MergeFrom(const PBC2GCopymapEnterNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_npcunitid()) {
      set_npcunitid(from.npcunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCopymapEnterNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCopymapEnterNpc::CopyFrom(const PBC2GCopymapEnterNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCopymapEnterNpc::IsInitialized() const {
  
  return true;
}

void PBC2GCopymapEnterNpc::Swap(PBC2GCopymapEnterNpc* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(npcunitid_, other->npcunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCopymapEnterNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCopymapEnterNpc_descriptor_;
  metadata.reflection = PBC2GCopymapEnterNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCopymapExit::kCopymapidFieldNumber;
#endif  // !_MSC_VER

PBC2GCopymapExit::PBC2GCopymapExit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCopymapExit::InitAsDefaultInstance() {
}

PBC2GCopymapExit::PBC2GCopymapExit(const PBC2GCopymapExit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCopymapExit::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCopymapExit::~PBC2GCopymapExit() {
  SharedDtor();
}

void PBC2GCopymapExit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCopymapExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCopymapExit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCopymapExit_descriptor_;
}

const PBC2GCopymapExit& PBC2GCopymapExit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCopymapExit* PBC2GCopymapExit::default_instance_ = NULL;

PBC2GCopymapExit* PBC2GCopymapExit::New() const {
  return new PBC2GCopymapExit;
}

void PBC2GCopymapExit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCopymapExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCopymapExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCopymapExit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCopymapExit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCopymapExit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCopymapExit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCopymapExit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCopymapExit::MergeFrom(const PBC2GCopymapExit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCopymapExit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCopymapExit::CopyFrom(const PBC2GCopymapExit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCopymapExit::IsInitialized() const {
  
  return true;
}

void PBC2GCopymapExit::Swap(PBC2GCopymapExit* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCopymapExit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCopymapExit_descriptor_;
  metadata.reflection = PBC2GCopymapExit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCopymapInvite::kTargetidFieldNumber;
const int PBC2GCopymapInvite::kCopymapidFieldNumber;
#endif  // !_MSC_VER

PBC2GCopymapInvite::PBC2GCopymapInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCopymapInvite::InitAsDefaultInstance() {
}

PBC2GCopymapInvite::PBC2GCopymapInvite(const PBC2GCopymapInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCopymapInvite::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0u;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCopymapInvite::~PBC2GCopymapInvite() {
  SharedDtor();
}

void PBC2GCopymapInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCopymapInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCopymapInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCopymapInvite_descriptor_;
}

const PBC2GCopymapInvite& PBC2GCopymapInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCopymapInvite* PBC2GCopymapInvite::default_instance_ = NULL;

PBC2GCopymapInvite* PBC2GCopymapInvite::New() const {
  return new PBC2GCopymapInvite;
}

void PBC2GCopymapInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = 0u;
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCopymapInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 targetid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copymapid;
        break;
      }
      
      // optional uint32 copymapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCopymapInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetid(), output);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCopymapInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetid(), target);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCopymapInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 targetid = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
    // optional uint32 copymapid = 2;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCopymapInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCopymapInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCopymapInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCopymapInvite::MergeFrom(const PBC2GCopymapInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCopymapInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCopymapInvite::CopyFrom(const PBC2GCopymapInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCopymapInvite::IsInitialized() const {
  
  return true;
}

void PBC2GCopymapInvite::Swap(PBC2GCopymapInvite* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCopymapInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCopymapInvite_descriptor_;
  metadata.reflection = PBC2GCopymapInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapInviteTransfer::kDisplayFieldNumber;
const int PBG2CCopymapInviteTransfer::kCopymapidFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapInviteTransfer::PBG2CCopymapInviteTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapInviteTransfer::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CCopymapInviteTransfer::PBG2CCopymapInviteTransfer(const PBG2CCopymapInviteTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapInviteTransfer::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapInviteTransfer::~PBG2CCopymapInviteTransfer() {
  SharedDtor();
}

void PBG2CCopymapInviteTransfer::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBG2CCopymapInviteTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapInviteTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapInviteTransfer_descriptor_;
}

const PBG2CCopymapInviteTransfer& PBG2CCopymapInviteTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapInviteTransfer* PBG2CCopymapInviteTransfer::default_instance_ = NULL;

PBG2CCopymapInviteTransfer* PBG2CCopymapInviteTransfer::New() const {
  return new PBG2CCopymapInviteTransfer;
}

void PBG2CCopymapInviteTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapInviteTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copymapid;
        break;
      }
      
      // optional uint32 copymapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapInviteTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapInviteTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapInviteTransfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 copymapid = 2;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapInviteTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapInviteTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapInviteTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapInviteTransfer::MergeFrom(const PBG2CCopymapInviteTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapInviteTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapInviteTransfer::CopyFrom(const PBG2CCopymapInviteTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapInviteTransfer::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapInviteTransfer::Swap(PBG2CCopymapInviteTransfer* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapInviteTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapInviteTransfer_descriptor_;
  metadata.reflection = PBG2CCopymapInviteTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCopymapAcceptInvite::kTargetidFieldNumber;
const int PBC2GCopymapAcceptInvite::kCopymapidFieldNumber;
const int PBC2GCopymapAcceptInvite::kAcceptFieldNumber;
#endif  // !_MSC_VER

PBC2GCopymapAcceptInvite::PBC2GCopymapAcceptInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCopymapAcceptInvite::InitAsDefaultInstance() {
}

PBC2GCopymapAcceptInvite::PBC2GCopymapAcceptInvite(const PBC2GCopymapAcceptInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCopymapAcceptInvite::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0u;
  copymapid_ = 0u;
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCopymapAcceptInvite::~PBC2GCopymapAcceptInvite() {
  SharedDtor();
}

void PBC2GCopymapAcceptInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCopymapAcceptInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCopymapAcceptInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCopymapAcceptInvite_descriptor_;
}

const PBC2GCopymapAcceptInvite& PBC2GCopymapAcceptInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCopymapAcceptInvite* PBC2GCopymapAcceptInvite::default_instance_ = NULL;

PBC2GCopymapAcceptInvite* PBC2GCopymapAcceptInvite::New() const {
  return new PBC2GCopymapAcceptInvite;
}

void PBC2GCopymapAcceptInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = 0u;
    copymapid_ = 0u;
    accept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCopymapAcceptInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 targetid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copymapid;
        break;
      }
      
      // optional uint32 copymapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accept;
        break;
      }
      
      // optional bool accept = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCopymapAcceptInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetid(), output);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymapid(), output);
  }
  
  // optional bool accept = 3;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->accept(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCopymapAcceptInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 targetid = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetid(), target);
  }
  
  // optional uint32 copymapid = 2;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymapid(), target);
  }
  
  // optional bool accept = 3;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->accept(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCopymapAcceptInvite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 targetid = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }
    
    // optional uint32 copymapid = 2;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional bool accept = 3;
    if (has_accept()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCopymapAcceptInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCopymapAcceptInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCopymapAcceptInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCopymapAcceptInvite::MergeFrom(const PBC2GCopymapAcceptInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCopymapAcceptInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCopymapAcceptInvite::CopyFrom(const PBC2GCopymapAcceptInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCopymapAcceptInvite::IsInitialized() const {
  
  return true;
}

void PBC2GCopymapAcceptInvite::Swap(PBC2GCopymapAcceptInvite* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(accept_, other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCopymapAcceptInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCopymapAcceptInvite_descriptor_;
  metadata.reflection = PBC2GCopymapAcceptInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapState::kStateFieldNumber;
const int PBG2CCopymapState::kEndtimeFieldNumber;
const int PBG2CCopymapState::kCompletetimeFieldNumber;
const int PBG2CCopymapState::kCompletetypeFieldNumber;
const int PBG2CCopymapState::kPrizeidFieldNumber;
const int PBG2CCopymapState::kItemnumFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapState::PBG2CCopymapState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapState::InitAsDefaultInstance() {
}

PBG2CCopymapState::PBG2CCopymapState(const PBG2CCopymapState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  endtime_ = 0u;
  completetime_ = 0u;
  completetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapState::~PBG2CCopymapState() {
  SharedDtor();
}

void PBG2CCopymapState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapState_descriptor_;
}

const PBG2CCopymapState& PBG2CCopymapState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapState* PBG2CCopymapState::default_instance_ = NULL;

PBG2CCopymapState* PBG2CCopymapState::New() const {
  return new PBG2CCopymapState;
}

void PBG2CCopymapState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0u;
    endtime_ = 0u;
    completetime_ = 0u;
    completetype_ = 0u;
  }
  prizeid_.Clear();
  itemnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endtime;
        break;
      }
      
      // optional uint32 endtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_completetime;
        break;
      }
      
      // optional uint32 completetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completetime_)));
          set_has_completetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_completetype;
        break;
      }
      
      // optional uint32 completetype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completetype_)));
          set_has_completetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prizeid;
        break;
      }
      
      // repeated uint32 prizeid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_prizeid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_prizeid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prizeid;
        if (input->ExpectTag(50)) goto parse_itemnum;
        break;
      }
      
      // repeated .PBItemNum itemnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_itemnum;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }
  
  // optional uint32 endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endtime(), output);
  }
  
  // optional uint32 completetime = 3;
  if (has_completetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->completetime(), output);
  }
  
  // optional uint32 completetype = 4;
  if (has_completetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->completetype(), output);
  }
  
  // repeated uint32 prizeid = 5;
  for (int i = 0; i < this->prizeid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->prizeid(i), output);
  }
  
  // repeated .PBItemNum itemnum = 6;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->itemnum(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }
  
  // optional uint32 endtime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endtime(), target);
  }
  
  // optional uint32 completetime = 3;
  if (has_completetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->completetime(), target);
  }
  
  // optional uint32 completetype = 4;
  if (has_completetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->completetype(), target);
  }
  
  // repeated uint32 prizeid = 5;
  for (int i = 0; i < this->prizeid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->prizeid(i), target);
  }
  
  // repeated .PBItemNum itemnum = 6;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->itemnum(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }
    
    // optional uint32 endtime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }
    
    // optional uint32 completetime = 3;
    if (has_completetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completetime());
    }
    
    // optional uint32 completetype = 4;
    if (has_completetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completetype());
    }
    
  }
  // repeated uint32 prizeid = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->prizeid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->prizeid(i));
    }
    total_size += 1 * this->prizeid_size() + data_size;
  }
  
  // repeated .PBItemNum itemnum = 6;
  total_size += 1 * this->itemnum_size();
  for (int i = 0; i < this->itemnum_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemnum(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapState::MergeFrom(const PBG2CCopymapState& from) {
  GOOGLE_CHECK_NE(&from, this);
  prizeid_.MergeFrom(from.prizeid_);
  itemnum_.MergeFrom(from.itemnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_completetime()) {
      set_completetime(from.completetime());
    }
    if (from.has_completetype()) {
      set_completetype(from.completetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapState::CopyFrom(const PBG2CCopymapState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapState::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapState::Swap(PBG2CCopymapState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(endtime_, other->endtime_);
    std::swap(completetime_, other->completetime_);
    std::swap(completetype_, other->completetype_);
    prizeid_.Swap(&other->prizeid_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapState_descriptor_;
  metadata.reflection = PBG2CCopymapState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CReadyStart::kLeftscondFieldNumber;
#endif  // !_MSC_VER

PBG2CReadyStart::PBG2CReadyStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CReadyStart::InitAsDefaultInstance() {
}

PBG2CReadyStart::PBG2CReadyStart(const PBG2CReadyStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CReadyStart::SharedCtor() {
  _cached_size_ = 0;
  leftscond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CReadyStart::~PBG2CReadyStart() {
  SharedDtor();
}

void PBG2CReadyStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CReadyStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CReadyStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CReadyStart_descriptor_;
}

const PBG2CReadyStart& PBG2CReadyStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CReadyStart* PBG2CReadyStart::default_instance_ = NULL;

PBG2CReadyStart* PBG2CReadyStart::New() const {
  return new PBG2CReadyStart;
}

void PBG2CReadyStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leftscond_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CReadyStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 leftscond = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftscond_)));
          set_has_leftscond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CReadyStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 leftscond = 1;
  if (has_leftscond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->leftscond(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CReadyStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 leftscond = 1;
  if (has_leftscond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->leftscond(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CReadyStart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 leftscond = 1;
    if (has_leftscond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftscond());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CReadyStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CReadyStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CReadyStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CReadyStart::MergeFrom(const PBG2CReadyStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftscond()) {
      set_leftscond(from.leftscond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CReadyStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CReadyStart::CopyFrom(const PBG2CReadyStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CReadyStart::IsInitialized() const {
  
  return true;
}

void PBG2CReadyStart::Swap(PBG2CReadyStart* other) {
  if (other != this) {
    std::swap(leftscond_, other->leftscond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CReadyStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CReadyStart_descriptor_;
  metadata.reflection = PBG2CReadyStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapCloseTip::kChatidFieldNumber;
const int PBG2CCopymapCloseTip::kTimeFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapCloseTip::PBG2CCopymapCloseTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapCloseTip::InitAsDefaultInstance() {
}

PBG2CCopymapCloseTip::PBG2CCopymapCloseTip(const PBG2CCopymapCloseTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapCloseTip::SharedCtor() {
  _cached_size_ = 0;
  chatid_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapCloseTip::~PBG2CCopymapCloseTip() {
  SharedDtor();
}

void PBG2CCopymapCloseTip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapCloseTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapCloseTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapCloseTip_descriptor_;
}

const PBG2CCopymapCloseTip& PBG2CCopymapCloseTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapCloseTip* PBG2CCopymapCloseTip::default_instance_ = NULL;

PBG2CCopymapCloseTip* PBG2CCopymapCloseTip::New() const {
  return new PBG2CCopymapCloseTip;
}

void PBG2CCopymapCloseTip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chatid_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapCloseTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatid_)));
          set_has_chatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapCloseTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chatid = 1;
  if (has_chatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chatid(), output);
  }
  
  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapCloseTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chatid = 1;
  if (has_chatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chatid(), target);
  }
  
  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapCloseTip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chatid = 1;
    if (has_chatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatid());
    }
    
    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapCloseTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapCloseTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapCloseTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapCloseTip::MergeFrom(const PBG2CCopymapCloseTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatid()) {
      set_chatid(from.chatid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapCloseTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapCloseTip::CopyFrom(const PBG2CCopymapCloseTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapCloseTip::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapCloseTip::Swap(PBG2CCopymapCloseTip* other) {
  if (other != this) {
    std::swap(chatid_, other->chatid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapCloseTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapCloseTip_descriptor_;
  metadata.reflection = PBG2CCopymapCloseTip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapFindAttackMonster::kPointFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapFindAttackMonster::PBG2CCopymapFindAttackMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapFindAttackMonster::InitAsDefaultInstance() {
  point_ = const_cast< ::PBPoint*>(&::PBPoint::default_instance());
}

PBG2CCopymapFindAttackMonster::PBG2CCopymapFindAttackMonster(const PBG2CCopymapFindAttackMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapFindAttackMonster::SharedCtor() {
  _cached_size_ = 0;
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapFindAttackMonster::~PBG2CCopymapFindAttackMonster() {
  SharedDtor();
}

void PBG2CCopymapFindAttackMonster::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void PBG2CCopymapFindAttackMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapFindAttackMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapFindAttackMonster_descriptor_;
}

const PBG2CCopymapFindAttackMonster& PBG2CCopymapFindAttackMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapFindAttackMonster* PBG2CCopymapFindAttackMonster::default_instance_ = NULL;

PBG2CCopymapFindAttackMonster* PBG2CCopymapFindAttackMonster::New() const {
  return new PBG2CCopymapFindAttackMonster;
}

void PBG2CCopymapFindAttackMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_point()) {
      if (point_ != NULL) point_->::PBPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapFindAttackMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPoint point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapFindAttackMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPoint point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapFindAttackMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPoint point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapFindAttackMonster::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPoint point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapFindAttackMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapFindAttackMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapFindAttackMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapFindAttackMonster::MergeFrom(const PBG2CCopymapFindAttackMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      mutable_point()->::PBPoint::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapFindAttackMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapFindAttackMonster::CopyFrom(const PBG2CCopymapFindAttackMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapFindAttackMonster::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapFindAttackMonster::Swap(PBG2CCopymapFindAttackMonster* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapFindAttackMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapFindAttackMonster_descriptor_;
  metadata.reflection = PBG2CCopymapFindAttackMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapQuestTarget::kTaridFieldNumber;
const int PBG2CCopymapQuestTarget::kCountFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapQuestTarget::PBG2CCopymapQuestTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapQuestTarget::InitAsDefaultInstance() {
}

PBG2CCopymapQuestTarget::PBG2CCopymapQuestTarget(const PBG2CCopymapQuestTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapQuestTarget::SharedCtor() {
  _cached_size_ = 0;
  tarid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapQuestTarget::~PBG2CCopymapQuestTarget() {
  SharedDtor();
}

void PBG2CCopymapQuestTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapQuestTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapQuestTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapQuestTarget_descriptor_;
}

const PBG2CCopymapQuestTarget& PBG2CCopymapQuestTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapQuestTarget* PBG2CCopymapQuestTarget::default_instance_ = NULL;

PBG2CCopymapQuestTarget* PBG2CCopymapQuestTarget::New() const {
  return new PBG2CCopymapQuestTarget;
}

void PBG2CCopymapQuestTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tarid_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapQuestTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tarid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tarid_)));
          set_has_tarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapQuestTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tarid = 1;
  if (has_tarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tarid(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapQuestTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tarid = 1;
  if (has_tarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tarid(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapQuestTarget::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tarid = 1;
    if (has_tarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tarid());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapQuestTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapQuestTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapQuestTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapQuestTarget::MergeFrom(const PBG2CCopymapQuestTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tarid()) {
      set_tarid(from.tarid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapQuestTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapQuestTarget::CopyFrom(const PBG2CCopymapQuestTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapQuestTarget::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapQuestTarget::Swap(PBG2CCopymapQuestTarget* other) {
  if (other != this) {
    std::swap(tarid_, other->tarid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapQuestTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapQuestTarget_descriptor_;
  metadata.reflection = PBG2CCopymapQuestTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapQuest::kTarFieldNumber;
const int PBG2CCopymapQuest::kQuestidFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapQuest::PBG2CCopymapQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapQuest::InitAsDefaultInstance() {
}

PBG2CCopymapQuest::PBG2CCopymapQuest(const PBG2CCopymapQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapQuest::~PBG2CCopymapQuest() {
  SharedDtor();
}

void PBG2CCopymapQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapQuest_descriptor_;
}

const PBG2CCopymapQuest& PBG2CCopymapQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapQuest* PBG2CCopymapQuest::default_instance_ = NULL;

PBG2CCopymapQuest* PBG2CCopymapQuest::New() const {
  return new PBG2CCopymapQuest;
}

void PBG2CCopymapQuest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    questid_ = 0u;
  }
  tar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBG2CCopymapQuestTarget tar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tar;
        if (input->ExpectTag(16)) goto parse_questid;
        break;
      }
      
      // optional uint32 questid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBG2CCopymapQuestTarget tar = 1;
  for (int i = 0; i < this->tar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tar(i), output);
  }
  
  // optional uint32 questid = 2;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->questid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBG2CCopymapQuestTarget tar = 1;
  for (int i = 0; i < this->tar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tar(i), target);
  }
  
  // optional uint32 questid = 2;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->questid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapQuest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 questid = 2;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }
    
  }
  // repeated .PBG2CCopymapQuestTarget tar = 1;
  total_size += 1 * this->tar_size();
  for (int i = 0; i < this->tar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tar(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapQuest::MergeFrom(const PBG2CCopymapQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  tar_.MergeFrom(from.tar_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapQuest::CopyFrom(const PBG2CCopymapQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapQuest::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapQuest::Swap(PBG2CCopymapQuest* other) {
  if (other != this) {
    tar_.Swap(&other->tar_);
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapQuest_descriptor_;
  metadata.reflection = PBG2CCopymapQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapChangeQuest::kQuestidFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapChangeQuest::PBG2CCopymapChangeQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapChangeQuest::InitAsDefaultInstance() {
}

PBG2CCopymapChangeQuest::PBG2CCopymapChangeQuest(const PBG2CCopymapChangeQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapChangeQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapChangeQuest::~PBG2CCopymapChangeQuest() {
  SharedDtor();
}

void PBG2CCopymapChangeQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapChangeQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapChangeQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapChangeQuest_descriptor_;
}

const PBG2CCopymapChangeQuest& PBG2CCopymapChangeQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapChangeQuest* PBG2CCopymapChangeQuest::default_instance_ = NULL;

PBG2CCopymapChangeQuest* PBG2CCopymapChangeQuest::New() const {
  return new PBG2CCopymapChangeQuest;
}

void PBG2CCopymapChangeQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapChangeQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapChangeQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapChangeQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapChangeQuest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapChangeQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapChangeQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapChangeQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapChangeQuest::MergeFrom(const PBG2CCopymapChangeQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapChangeQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapChangeQuest::CopyFrom(const PBG2CCopymapChangeQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapChangeQuest::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapChangeQuest::Swap(PBG2CCopymapChangeQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapChangeQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapChangeQuest_descriptor_;
  metadata.reflection = PBG2CCopymapChangeQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapHurtInfo::kDisplayFieldNumber;
const int PBG2CCopymapHurtInfo::kHurtvalueFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapHurtInfo::PBG2CCopymapHurtInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapHurtInfo::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CCopymapHurtInfo::PBG2CCopymapHurtInfo(const PBG2CCopymapHurtInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapHurtInfo::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  hurtvalue_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapHurtInfo::~PBG2CCopymapHurtInfo() {
  SharedDtor();
}

void PBG2CCopymapHurtInfo::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBG2CCopymapHurtInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapHurtInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapHurtInfo_descriptor_;
}

const PBG2CCopymapHurtInfo& PBG2CCopymapHurtInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapHurtInfo* PBG2CCopymapHurtInfo::default_instance_ = NULL;

PBG2CCopymapHurtInfo* PBG2CCopymapHurtInfo::New() const {
  return new PBG2CCopymapHurtInfo;
}

void PBG2CCopymapHurtInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    hurtvalue_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapHurtInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hurtvalue;
        break;
      }
      
      // optional uint64 hurtvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurtvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hurtvalue_)));
          set_has_hurtvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapHurtInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional uint64 hurtvalue = 2;
  if (has_hurtvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hurtvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapHurtInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional uint64 hurtvalue = 2;
  if (has_hurtvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hurtvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapHurtInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint64 hurtvalue = 2;
    if (has_hurtvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hurtvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapHurtInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapHurtInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapHurtInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapHurtInfo::MergeFrom(const PBG2CCopymapHurtInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_hurtvalue()) {
      set_hurtvalue(from.hurtvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapHurtInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapHurtInfo::CopyFrom(const PBG2CCopymapHurtInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapHurtInfo::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapHurtInfo::Swap(PBG2CCopymapHurtInfo* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(hurtvalue_, other->hurtvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapHurtInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapHurtInfo_descriptor_;
  metadata.reflection = PBG2CCopymapHurtInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCopymapGuardInfo::kUnitidFieldNumber;
const int PBCopymapGuardInfo::kMonsteridFieldNumber;
const int PBCopymapGuardInfo::kMaxhpFieldNumber;
const int PBCopymapGuardInfo::kCurhpFieldNumber;
#endif  // !_MSC_VER

PBCopymapGuardInfo::PBCopymapGuardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCopymapGuardInfo::InitAsDefaultInstance() {
}

PBCopymapGuardInfo::PBCopymapGuardInfo(const PBCopymapGuardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCopymapGuardInfo::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = 0u;
  monsterid_ = 0u;
  maxhp_ = 0u;
  curhp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCopymapGuardInfo::~PBCopymapGuardInfo() {
  SharedDtor();
}

void PBCopymapGuardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCopymapGuardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCopymapGuardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCopymapGuardInfo_descriptor_;
}

const PBCopymapGuardInfo& PBCopymapGuardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBCopymapGuardInfo* PBCopymapGuardInfo::default_instance_ = NULL;

PBCopymapGuardInfo* PBCopymapGuardInfo::New() const {
  return new PBCopymapGuardInfo;
}

void PBCopymapGuardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unitid_ = 0u;
    monsterid_ = 0u;
    maxhp_ = 0u;
    curhp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCopymapGuardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monsterid;
        break;
      }
      
      // optional uint32 monsterid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxhp;
        break;
      }
      
      // optional uint32 maxhp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curhp;
        break;
      }
      
      // optional uint32 curhp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCopymapGuardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unitid(), output);
  }
  
  // optional uint32 monsterid = 2;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monsterid(), output);
  }
  
  // optional uint32 maxhp = 3;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxhp(), output);
  }
  
  // optional uint32 curhp = 4;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curhp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCopymapGuardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unitid(), target);
  }
  
  // optional uint32 monsterid = 2;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->monsterid(), target);
  }
  
  // optional uint32 maxhp = 3;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxhp(), target);
  }
  
  // optional uint32 curhp = 4;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curhp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCopymapGuardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unitid = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
    // optional uint32 monsterid = 2;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }
    
    // optional uint32 maxhp = 3;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }
    
    // optional uint32 curhp = 4;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCopymapGuardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCopymapGuardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCopymapGuardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCopymapGuardInfo::MergeFrom(const PBCopymapGuardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCopymapGuardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCopymapGuardInfo::CopyFrom(const PBCopymapGuardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCopymapGuardInfo::IsInitialized() const {
  
  return true;
}

void PBCopymapGuardInfo::Swap(PBCopymapGuardInfo* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(curhp_, other->curhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCopymapGuardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCopymapGuardInfo_descriptor_;
  metadata.reflection = PBCopymapGuardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapSysGuardHp::kPbGurdInfoFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapSysGuardHp::PBG2CCopymapSysGuardHp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapSysGuardHp::InitAsDefaultInstance() {
}

PBG2CCopymapSysGuardHp::PBG2CCopymapSysGuardHp(const PBG2CCopymapSysGuardHp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapSysGuardHp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapSysGuardHp::~PBG2CCopymapSysGuardHp() {
  SharedDtor();
}

void PBG2CCopymapSysGuardHp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapSysGuardHp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapSysGuardHp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapSysGuardHp_descriptor_;
}

const PBG2CCopymapSysGuardHp& PBG2CCopymapSysGuardHp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapSysGuardHp* PBG2CCopymapSysGuardHp::default_instance_ = NULL;

PBG2CCopymapSysGuardHp* PBG2CCopymapSysGuardHp::New() const {
  return new PBG2CCopymapSysGuardHp;
}

void PBG2CCopymapSysGuardHp::Clear() {
  pbgurdinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapSysGuardHp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBCopymapGuardInfo pbGurdInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbGurdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbgurdinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pbGurdInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapSysGuardHp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBCopymapGuardInfo pbGurdInfo = 1;
  for (int i = 0; i < this->pbgurdinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbgurdinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapSysGuardHp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCopymapGuardInfo pbGurdInfo = 1;
  for (int i = 0; i < this->pbgurdinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbgurdinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapSysGuardHp::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBCopymapGuardInfo pbGurdInfo = 1;
  total_size += 1 * this->pbgurdinfo_size();
  for (int i = 0; i < this->pbgurdinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbgurdinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapSysGuardHp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapSysGuardHp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapSysGuardHp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapSysGuardHp::MergeFrom(const PBG2CCopymapSysGuardHp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbgurdinfo_.MergeFrom(from.pbgurdinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapSysGuardHp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapSysGuardHp::CopyFrom(const PBG2CCopymapSysGuardHp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapSysGuardHp::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapSysGuardHp::Swap(PBG2CCopymapSysGuardHp* other) {
  if (other != this) {
    pbgurdinfo_.Swap(&other->pbgurdinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapSysGuardHp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapSysGuardHp_descriptor_;
  metadata.reflection = PBG2CCopymapSysGuardHp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CPoemActivePos::kPoemidFieldNumber;
const int PBG2CPoemActivePos::kPosFieldNumber;
#endif  // !_MSC_VER

PBG2CPoemActivePos::PBG2CPoemActivePos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CPoemActivePos::InitAsDefaultInstance() {
}

PBG2CPoemActivePos::PBG2CPoemActivePos(const PBG2CPoemActivePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CPoemActivePos::SharedCtor() {
  _cached_size_ = 0;
  poemid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CPoemActivePos::~PBG2CPoemActivePos() {
  SharedDtor();
}

void PBG2CPoemActivePos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CPoemActivePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CPoemActivePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CPoemActivePos_descriptor_;
}

const PBG2CPoemActivePos& PBG2CPoemActivePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CPoemActivePos* PBG2CPoemActivePos::default_instance_ = NULL;

PBG2CPoemActivePos* PBG2CPoemActivePos::New() const {
  return new PBG2CPoemActivePos;
}

void PBG2CPoemActivePos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    poemid_ = 0u;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CPoemActivePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 poemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poemid_)));
          set_has_poemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }
      
      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CPoemActivePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 poemid = 1;
  if (has_poemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->poemid(), output);
  }
  
  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CPoemActivePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 poemid = 1;
  if (has_poemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->poemid(), target);
  }
  
  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CPoemActivePos::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 poemid = 1;
    if (has_poemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poemid());
    }
    
    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CPoemActivePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CPoemActivePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CPoemActivePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CPoemActivePos::MergeFrom(const PBG2CPoemActivePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poemid()) {
      set_poemid(from.poemid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CPoemActivePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CPoemActivePos::CopyFrom(const PBG2CPoemActivePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CPoemActivePos::IsInitialized() const {
  
  return true;
}

void PBG2CPoemActivePos::Swap(PBG2CPoemActivePos* other) {
  if (other != this) {
    std::swap(poemid_, other->poemid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CPoemActivePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CPoemActivePos_descriptor_;
  metadata.reflection = PBG2CPoemActivePos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CLiangyiNum::kTotalnumFieldNumber;
const int PBG2CLiangyiNum::kNumFieldNumber;
#endif  // !_MSC_VER

PBG2CLiangyiNum::PBG2CLiangyiNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CLiangyiNum::InitAsDefaultInstance() {
}

PBG2CLiangyiNum::PBG2CLiangyiNum(const PBG2CLiangyiNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CLiangyiNum::SharedCtor() {
  _cached_size_ = 0;
  totalnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CLiangyiNum::~PBG2CLiangyiNum() {
  SharedDtor();
}

void PBG2CLiangyiNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CLiangyiNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CLiangyiNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CLiangyiNum_descriptor_;
}

const PBG2CLiangyiNum& PBG2CLiangyiNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CLiangyiNum* PBG2CLiangyiNum::default_instance_ = NULL;

PBG2CLiangyiNum* PBG2CLiangyiNum::New() const {
  return new PBG2CLiangyiNum;
}

void PBG2CLiangyiNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalnum_ = 0u;
  }
  num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CLiangyiNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 totalnum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // repeated uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CLiangyiNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 totalnum = 1;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->totalnum(), output);
  }
  
  // repeated uint32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->num(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CLiangyiNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 totalnum = 1;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->totalnum(), target);
  }
  
  // repeated uint32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->num(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CLiangyiNum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 totalnum = 1;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalnum());
    }
    
  }
  // repeated uint32 num = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CLiangyiNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CLiangyiNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CLiangyiNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CLiangyiNum::MergeFrom(const PBG2CLiangyiNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  num_.MergeFrom(from.num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CLiangyiNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CLiangyiNum::CopyFrom(const PBG2CLiangyiNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CLiangyiNum::IsInitialized() const {
  
  return true;
}

void PBG2CLiangyiNum::Swap(PBG2CLiangyiNum* other) {
  if (other != this) {
    std::swap(totalnum_, other->totalnum_);
    num_.Swap(&other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CLiangyiNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CLiangyiNum_descriptor_;
  metadata.reflection = PBG2CLiangyiNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapWave::kCopymappidFieldNumber;
const int PBG2CCopymapWave::kTotalwaveFieldNumber;
const int PBG2CCopymapWave::kCurwaveFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapWave::PBG2CCopymapWave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapWave::InitAsDefaultInstance() {
}

PBG2CCopymapWave::PBG2CCopymapWave(const PBG2CCopymapWave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapWave::SharedCtor() {
  _cached_size_ = 0;
  copymappid_ = 0u;
  totalwave_ = 0u;
  curwave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapWave::~PBG2CCopymapWave() {
  SharedDtor();
}

void PBG2CCopymapWave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapWave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapWave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapWave_descriptor_;
}

const PBG2CCopymapWave& PBG2CCopymapWave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapWave* PBG2CCopymapWave::default_instance_ = NULL;

PBG2CCopymapWave* PBG2CCopymapWave::New() const {
  return new PBG2CCopymapWave;
}

void PBG2CCopymapWave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymappid_ = 0u;
    totalwave_ = 0u;
    curwave_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapWave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymappid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymappid_)));
          set_has_copymappid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalwave;
        break;
      }
      
      // optional uint32 totalwave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalwave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalwave_)));
          set_has_totalwave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curwave;
        break;
      }
      
      // optional uint32 curwave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curwave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curwave_)));
          set_has_curwave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapWave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymappid = 1;
  if (has_copymappid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymappid(), output);
  }
  
  // optional uint32 totalwave = 2;
  if (has_totalwave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalwave(), output);
  }
  
  // optional uint32 curwave = 3;
  if (has_curwave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curwave(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapWave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymappid = 1;
  if (has_copymappid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymappid(), target);
  }
  
  // optional uint32 totalwave = 2;
  if (has_totalwave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totalwave(), target);
  }
  
  // optional uint32 curwave = 3;
  if (has_curwave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curwave(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapWave::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymappid = 1;
    if (has_copymappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymappid());
    }
    
    // optional uint32 totalwave = 2;
    if (has_totalwave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalwave());
    }
    
    // optional uint32 curwave = 3;
    if (has_curwave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curwave());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapWave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapWave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapWave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapWave::MergeFrom(const PBG2CCopymapWave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymappid()) {
      set_copymappid(from.copymappid());
    }
    if (from.has_totalwave()) {
      set_totalwave(from.totalwave());
    }
    if (from.has_curwave()) {
      set_curwave(from.curwave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapWave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapWave::CopyFrom(const PBG2CCopymapWave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapWave::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapWave::Swap(PBG2CCopymapWave* other) {
  if (other != this) {
    std::swap(copymappid_, other->copymappid_);
    std::swap(totalwave_, other->totalwave_);
    std::swap(curwave_, other->curwave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapWave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapWave_descriptor_;
  metadata.reflection = PBG2CCopymapWave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CSixiangMonster::kPbsubmonsterFieldNumber;
const int PBG2CSixiangMonster::kPbmainmonsterFieldNumber;
#endif  // !_MSC_VER

PBG2CSixiangMonster::PBG2CSixiangMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CSixiangMonster::InitAsDefaultInstance() {
  pbmainmonster_ = const_cast< ::PBSixiangMonsterInfo*>(&::PBSixiangMonsterInfo::default_instance());
}

PBG2CSixiangMonster::PBG2CSixiangMonster(const PBG2CSixiangMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CSixiangMonster::SharedCtor() {
  _cached_size_ = 0;
  pbmainmonster_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CSixiangMonster::~PBG2CSixiangMonster() {
  SharedDtor();
}

void PBG2CSixiangMonster::SharedDtor() {
  if (this != default_instance_) {
    delete pbmainmonster_;
  }
}

void PBG2CSixiangMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CSixiangMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CSixiangMonster_descriptor_;
}

const PBG2CSixiangMonster& PBG2CSixiangMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CSixiangMonster* PBG2CSixiangMonster::default_instance_ = NULL;

PBG2CSixiangMonster* PBG2CSixiangMonster::New() const {
  return new PBG2CSixiangMonster;
}

void PBG2CSixiangMonster::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_pbmainmonster()) {
      if (pbmainmonster_ != NULL) pbmainmonster_->::PBSixiangMonsterInfo::Clear();
    }
  }
  pbsubmonster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CSixiangMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBSixiangMonsterInfo pbsubmonster = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbsubmonster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbsubmonster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pbsubmonster;
        if (input->ExpectTag(18)) goto parse_pbmainmonster;
        break;
      }
      
      // optional .PBSixiangMonsterInfo pbmainmonster = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbmainmonster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbmainmonster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CSixiangMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBSixiangMonsterInfo pbsubmonster = 1;
  for (int i = 0; i < this->pbsubmonster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbsubmonster(i), output);
  }
  
  // optional .PBSixiangMonsterInfo pbmainmonster = 2;
  if (has_pbmainmonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbmainmonster(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CSixiangMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBSixiangMonsterInfo pbsubmonster = 1;
  for (int i = 0; i < this->pbsubmonster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbsubmonster(i), target);
  }
  
  // optional .PBSixiangMonsterInfo pbmainmonster = 2;
  if (has_pbmainmonster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbmainmonster(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CSixiangMonster::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .PBSixiangMonsterInfo pbmainmonster = 2;
    if (has_pbmainmonster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbmainmonster());
    }
    
  }
  // repeated .PBSixiangMonsterInfo pbsubmonster = 1;
  total_size += 1 * this->pbsubmonster_size();
  for (int i = 0; i < this->pbsubmonster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbsubmonster(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CSixiangMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CSixiangMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CSixiangMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CSixiangMonster::MergeFrom(const PBG2CSixiangMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbsubmonster_.MergeFrom(from.pbsubmonster_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pbmainmonster()) {
      mutable_pbmainmonster()->::PBSixiangMonsterInfo::MergeFrom(from.pbmainmonster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CSixiangMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CSixiangMonster::CopyFrom(const PBG2CSixiangMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CSixiangMonster::IsInitialized() const {
  
  return true;
}

void PBG2CSixiangMonster::Swap(PBG2CSixiangMonster* other) {
  if (other != this) {
    pbsubmonster_.Swap(&other->pbsubmonster_);
    std::swap(pbmainmonster_, other->pbmainmonster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CSixiangMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CSixiangMonster_descriptor_;
  metadata.reflection = PBG2CSixiangMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapAssistCount::kAssistcountFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapAssistCount::PBG2CCopymapAssistCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapAssistCount::InitAsDefaultInstance() {
}

PBG2CCopymapAssistCount::PBG2CCopymapAssistCount(const PBG2CCopymapAssistCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapAssistCount::SharedCtor() {
  _cached_size_ = 0;
  assistcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapAssistCount::~PBG2CCopymapAssistCount() {
  SharedDtor();
}

void PBG2CCopymapAssistCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapAssistCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapAssistCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapAssistCount_descriptor_;
}

const PBG2CCopymapAssistCount& PBG2CCopymapAssistCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapAssistCount* PBG2CCopymapAssistCount::default_instance_ = NULL;

PBG2CCopymapAssistCount* PBG2CCopymapAssistCount::New() const {
  return new PBG2CCopymapAssistCount;
}

void PBG2CCopymapAssistCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    assistcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapAssistCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 assistcount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assistcount_)));
          set_has_assistcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapAssistCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 assistcount = 1;
  if (has_assistcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->assistcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapAssistCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 assistcount = 1;
  if (has_assistcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->assistcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapAssistCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 assistcount = 1;
    if (has_assistcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assistcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapAssistCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapAssistCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapAssistCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapAssistCount::MergeFrom(const PBG2CCopymapAssistCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assistcount()) {
      set_assistcount(from.assistcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapAssistCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapAssistCount::CopyFrom(const PBG2CCopymapAssistCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapAssistCount::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapAssistCount::Swap(PBG2CCopymapAssistCount* other) {
  if (other != this) {
    std::swap(assistcount_, other->assistcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapAssistCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapAssistCount_descriptor_;
  metadata.reflection = PBG2CCopymapAssistCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapEnterInfo::kAssistFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapEnterInfo::PBG2CCopymapEnterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapEnterInfo::InitAsDefaultInstance() {
}

PBG2CCopymapEnterInfo::PBG2CCopymapEnterInfo(const PBG2CCopymapEnterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapEnterInfo::SharedCtor() {
  _cached_size_ = 0;
  assist_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapEnterInfo::~PBG2CCopymapEnterInfo() {
  SharedDtor();
}

void PBG2CCopymapEnterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapEnterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapEnterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapEnterInfo_descriptor_;
}

const PBG2CCopymapEnterInfo& PBG2CCopymapEnterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapEnterInfo* PBG2CCopymapEnterInfo::default_instance_ = NULL;

PBG2CCopymapEnterInfo* PBG2CCopymapEnterInfo::New() const {
  return new PBG2CCopymapEnterInfo;
}

void PBG2CCopymapEnterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    assist_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapEnterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool assist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &assist_)));
          set_has_assist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapEnterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool assist = 1;
  if (has_assist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->assist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapEnterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool assist = 1;
  if (has_assist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->assist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapEnterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool assist = 1;
    if (has_assist()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapEnterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapEnterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapEnterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapEnterInfo::MergeFrom(const PBG2CCopymapEnterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assist()) {
      set_assist(from.assist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapEnterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapEnterInfo::CopyFrom(const PBG2CCopymapEnterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapEnterInfo::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapEnterInfo::Swap(PBG2CCopymapEnterInfo* other) {
  if (other != this) {
    std::swap(assist_, other->assist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapEnterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapEnterInfo_descriptor_;
  metadata.reflection = PBG2CCopymapEnterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCopymapTeamMemberInfo::kCopymapidFieldNumber;
#endif  // !_MSC_VER

PBC2GCopymapTeamMemberInfo::PBC2GCopymapTeamMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCopymapTeamMemberInfo::InitAsDefaultInstance() {
}

PBC2GCopymapTeamMemberInfo::PBC2GCopymapTeamMemberInfo(const PBC2GCopymapTeamMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCopymapTeamMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCopymapTeamMemberInfo::~PBC2GCopymapTeamMemberInfo() {
  SharedDtor();
}

void PBC2GCopymapTeamMemberInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCopymapTeamMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCopymapTeamMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCopymapTeamMemberInfo_descriptor_;
}

const PBC2GCopymapTeamMemberInfo& PBC2GCopymapTeamMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCopymapTeamMemberInfo* PBC2GCopymapTeamMemberInfo::default_instance_ = NULL;

PBC2GCopymapTeamMemberInfo* PBC2GCopymapTeamMemberInfo::New() const {
  return new PBC2GCopymapTeamMemberInfo;
}

void PBC2GCopymapTeamMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCopymapTeamMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCopymapTeamMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCopymapTeamMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCopymapTeamMemberInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCopymapTeamMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCopymapTeamMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCopymapTeamMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCopymapTeamMemberInfo::MergeFrom(const PBC2GCopymapTeamMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCopymapTeamMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCopymapTeamMemberInfo::CopyFrom(const PBC2GCopymapTeamMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCopymapTeamMemberInfo::IsInitialized() const {
  
  return true;
}

void PBC2GCopymapTeamMemberInfo::Swap(PBC2GCopymapTeamMemberInfo* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCopymapTeamMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCopymapTeamMemberInfo_descriptor_;
  metadata.reflection = PBC2GCopymapTeamMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapTeamMember::kPlayeridFieldNumber;
const int PBG2CCopymapTeamMember::kEntercountFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapTeamMember::PBG2CCopymapTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapTeamMember::InitAsDefaultInstance() {
}

PBG2CCopymapTeamMember::PBG2CCopymapTeamMember(const PBG2CCopymapTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapTeamMember::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  entercount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapTeamMember::~PBG2CCopymapTeamMember() {
  SharedDtor();
}

void PBG2CCopymapTeamMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapTeamMember_descriptor_;
}

const PBG2CCopymapTeamMember& PBG2CCopymapTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapTeamMember* PBG2CCopymapTeamMember::default_instance_ = NULL;

PBG2CCopymapTeamMember* PBG2CCopymapTeamMember::New() const {
  return new PBG2CCopymapTeamMember;
}

void PBG2CCopymapTeamMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    entercount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entercount;
        break;
      }
      
      // optional uint32 entercount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entercount_)));
          set_has_entercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 entercount = 2;
  if (has_entercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entercount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 entercount = 2;
  if (has_entercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entercount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapTeamMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 entercount = 2;
    if (has_entercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entercount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapTeamMember::MergeFrom(const PBG2CCopymapTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_entercount()) {
      set_entercount(from.entercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapTeamMember::CopyFrom(const PBG2CCopymapTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapTeamMember::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapTeamMember::Swap(PBG2CCopymapTeamMember* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(entercount_, other->entercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapTeamMember_descriptor_;
  metadata.reflection = PBG2CCopymapTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapTeamMemberInfo::kCopymapidFieldNumber;
const int PBG2CCopymapTeamMemberInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapTeamMemberInfo::PBG2CCopymapTeamMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapTeamMemberInfo::InitAsDefaultInstance() {
}

PBG2CCopymapTeamMemberInfo::PBG2CCopymapTeamMemberInfo(const PBG2CCopymapTeamMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapTeamMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapTeamMemberInfo::~PBG2CCopymapTeamMemberInfo() {
  SharedDtor();
}

void PBG2CCopymapTeamMemberInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapTeamMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapTeamMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapTeamMemberInfo_descriptor_;
}

const PBG2CCopymapTeamMemberInfo& PBG2CCopymapTeamMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapTeamMemberInfo* PBG2CCopymapTeamMemberInfo::default_instance_ = NULL;

PBG2CCopymapTeamMemberInfo* PBG2CCopymapTeamMemberInfo::New() const {
  return new PBG2CCopymapTeamMemberInfo;
}

void PBG2CCopymapTeamMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapTeamMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // repeated .PBG2CCopymapTeamMember info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapTeamMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // repeated .PBG2CCopymapTeamMember info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapTeamMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // repeated .PBG2CCopymapTeamMember info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapTeamMemberInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
  }
  // repeated .PBG2CCopymapTeamMember info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapTeamMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapTeamMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapTeamMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapTeamMemberInfo::MergeFrom(const PBG2CCopymapTeamMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapTeamMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapTeamMemberInfo::CopyFrom(const PBG2CCopymapTeamMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapTeamMemberInfo::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapTeamMemberInfo::Swap(PBG2CCopymapTeamMemberInfo* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapTeamMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapTeamMemberInfo_descriptor_;
  metadata.reflection = PBG2CCopymapTeamMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBManorLineUpInfo::kRegionidFieldNumber;
const int PBManorLineUpInfo::kInsidecountFieldNumber;
const int PBManorLineUpInfo::kLineupcountFieldNumber;
const int PBManorLineUpInfo::kInsidelimitFieldNumber;
#endif  // !_MSC_VER

PBManorLineUpInfo::PBManorLineUpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBManorLineUpInfo::InitAsDefaultInstance() {
}

PBManorLineUpInfo::PBManorLineUpInfo(const PBManorLineUpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBManorLineUpInfo::SharedCtor() {
  _cached_size_ = 0;
  regionid_ = 0u;
  insidecount_ = 0u;
  lineupcount_ = 0u;
  insidelimit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBManorLineUpInfo::~PBManorLineUpInfo() {
  SharedDtor();
}

void PBManorLineUpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBManorLineUpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBManorLineUpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBManorLineUpInfo_descriptor_;
}

const PBManorLineUpInfo& PBManorLineUpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBManorLineUpInfo* PBManorLineUpInfo::default_instance_ = NULL;

PBManorLineUpInfo* PBManorLineUpInfo::New() const {
  return new PBManorLineUpInfo;
}

void PBManorLineUpInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    regionid_ = 0u;
    insidecount_ = 0u;
    lineupcount_ = 0u;
    insidelimit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBManorLineUpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 regionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regionid_)));
          set_has_regionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_insidecount;
        break;
      }
      
      // optional uint32 insidecount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_insidecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &insidecount_)));
          set_has_insidecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineupcount;
        break;
      }
      
      // optional uint32 lineupcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineupcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lineupcount_)));
          set_has_lineupcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_insidelimit;
        break;
      }
      
      // optional uint32 insidelimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_insidelimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &insidelimit_)));
          set_has_insidelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBManorLineUpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 regionid = 1;
  if (has_regionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->regionid(), output);
  }
  
  // optional uint32 insidecount = 2;
  if (has_insidecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->insidecount(), output);
  }
  
  // optional uint32 lineupcount = 3;
  if (has_lineupcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lineupcount(), output);
  }
  
  // optional uint32 insidelimit = 4;
  if (has_insidelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->insidelimit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBManorLineUpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 regionid = 1;
  if (has_regionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->regionid(), target);
  }
  
  // optional uint32 insidecount = 2;
  if (has_insidecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->insidecount(), target);
  }
  
  // optional uint32 lineupcount = 3;
  if (has_lineupcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lineupcount(), target);
  }
  
  // optional uint32 insidelimit = 4;
  if (has_insidelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->insidelimit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBManorLineUpInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 regionid = 1;
    if (has_regionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regionid());
    }
    
    // optional uint32 insidecount = 2;
    if (has_insidecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->insidecount());
    }
    
    // optional uint32 lineupcount = 3;
    if (has_lineupcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lineupcount());
    }
    
    // optional uint32 insidelimit = 4;
    if (has_insidelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->insidelimit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBManorLineUpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBManorLineUpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBManorLineUpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBManorLineUpInfo::MergeFrom(const PBManorLineUpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regionid()) {
      set_regionid(from.regionid());
    }
    if (from.has_insidecount()) {
      set_insidecount(from.insidecount());
    }
    if (from.has_lineupcount()) {
      set_lineupcount(from.lineupcount());
    }
    if (from.has_insidelimit()) {
      set_insidelimit(from.insidelimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBManorLineUpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBManorLineUpInfo::CopyFrom(const PBManorLineUpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBManorLineUpInfo::IsInitialized() const {
  
  return true;
}

void PBManorLineUpInfo::Swap(PBManorLineUpInfo* other) {
  if (other != this) {
    std::swap(regionid_, other->regionid_);
    std::swap(insidecount_, other->insidecount_);
    std::swap(lineupcount_, other->lineupcount_);
    std::swap(insidelimit_, other->insidelimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBManorLineUpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBManorLineUpInfo_descriptor_;
  metadata.reflection = PBManorLineUpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapManorLobbyLineupNtf::kManoridFieldNumber;
const int PBG2CCopymapManorLobbyLineupNtf::kLinesFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapManorLobbyLineupNtf::PBG2CCopymapManorLobbyLineupNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapManorLobbyLineupNtf::InitAsDefaultInstance() {
}

PBG2CCopymapManorLobbyLineupNtf::PBG2CCopymapManorLobbyLineupNtf(const PBG2CCopymapManorLobbyLineupNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapManorLobbyLineupNtf::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapManorLobbyLineupNtf::~PBG2CCopymapManorLobbyLineupNtf() {
  SharedDtor();
}

void PBG2CCopymapManorLobbyLineupNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapManorLobbyLineupNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapManorLobbyLineupNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapManorLobbyLineupNtf_descriptor_;
}

const PBG2CCopymapManorLobbyLineupNtf& PBG2CCopymapManorLobbyLineupNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapManorLobbyLineupNtf* PBG2CCopymapManorLobbyLineupNtf::default_instance_ = NULL;

PBG2CCopymapManorLobbyLineupNtf* PBG2CCopymapManorLobbyLineupNtf::New() const {
  return new PBG2CCopymapManorLobbyLineupNtf;
}

void PBG2CCopymapManorLobbyLineupNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
  }
  lines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapManorLobbyLineupNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lines;
        break;
      }
      
      // repeated .PBManorLineUpInfo lines = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lines;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapManorLobbyLineupNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }
  
  // repeated .PBManorLineUpInfo lines = 2;
  for (int i = 0; i < this->lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lines(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapManorLobbyLineupNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }
  
  // repeated .PBManorLineUpInfo lines = 2;
  for (int i = 0; i < this->lines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lines(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapManorLobbyLineupNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorid = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }
    
  }
  // repeated .PBManorLineUpInfo lines = 2;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapManorLobbyLineupNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapManorLobbyLineupNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapManorLobbyLineupNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapManorLobbyLineupNtf::MergeFrom(const PBG2CCopymapManorLobbyLineupNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  lines_.MergeFrom(from.lines_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapManorLobbyLineupNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapManorLobbyLineupNtf::CopyFrom(const PBG2CCopymapManorLobbyLineupNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapManorLobbyLineupNtf::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapManorLobbyLineupNtf::Swap(PBG2CCopymapManorLobbyLineupNtf* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    lines_.Swap(&other->lines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapManorLobbyLineupNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapManorLobbyLineupNtf_descriptor_;
  metadata.reflection = PBG2CCopymapManorLobbyLineupNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapManorBattleFieldShenfuNtf::kIschallengerFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapManorBattleFieldShenfuNtf::PBG2CCopymapManorBattleFieldShenfuNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapManorBattleFieldShenfuNtf::InitAsDefaultInstance() {
}

PBG2CCopymapManorBattleFieldShenfuNtf::PBG2CCopymapManorBattleFieldShenfuNtf(const PBG2CCopymapManorBattleFieldShenfuNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapManorBattleFieldShenfuNtf::SharedCtor() {
  _cached_size_ = 0;
  ischallenger_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapManorBattleFieldShenfuNtf::~PBG2CCopymapManorBattleFieldShenfuNtf() {
  SharedDtor();
}

void PBG2CCopymapManorBattleFieldShenfuNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapManorBattleFieldShenfuNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapManorBattleFieldShenfuNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapManorBattleFieldShenfuNtf_descriptor_;
}

const PBG2CCopymapManorBattleFieldShenfuNtf& PBG2CCopymapManorBattleFieldShenfuNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapManorBattleFieldShenfuNtf* PBG2CCopymapManorBattleFieldShenfuNtf::default_instance_ = NULL;

PBG2CCopymapManorBattleFieldShenfuNtf* PBG2CCopymapManorBattleFieldShenfuNtf::New() const {
  return new PBG2CCopymapManorBattleFieldShenfuNtf;
}

void PBG2CCopymapManorBattleFieldShenfuNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ischallenger_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapManorBattleFieldShenfuNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ischallenger = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischallenger_)));
          set_has_ischallenger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapManorBattleFieldShenfuNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool ischallenger = 1;
  if (has_ischallenger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ischallenger(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapManorBattleFieldShenfuNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool ischallenger = 1;
  if (has_ischallenger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ischallenger(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapManorBattleFieldShenfuNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool ischallenger = 1;
    if (has_ischallenger()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapManorBattleFieldShenfuNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapManorBattleFieldShenfuNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapManorBattleFieldShenfuNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapManorBattleFieldShenfuNtf::MergeFrom(const PBG2CCopymapManorBattleFieldShenfuNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ischallenger()) {
      set_ischallenger(from.ischallenger());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapManorBattleFieldShenfuNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapManorBattleFieldShenfuNtf::CopyFrom(const PBG2CCopymapManorBattleFieldShenfuNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapManorBattleFieldShenfuNtf::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapManorBattleFieldShenfuNtf::Swap(PBG2CCopymapManorBattleFieldShenfuNtf* other) {
  if (other != this) {
    std::swap(ischallenger_, other->ischallenger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapManorBattleFieldShenfuNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapManorBattleFieldShenfuNtf_descriptor_;
  metadata.reflection = PBG2CCopymapManorBattleFieldShenfuNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBManorBattleFieldComrades::kDisplayFieldNumber;
const int PBManorBattleFieldComrades::kCurhpFieldNumber;
const int PBManorBattleFieldComrades::kMaxhpFieldNumber;
#endif  // !_MSC_VER

PBManorBattleFieldComrades::PBManorBattleFieldComrades()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBManorBattleFieldComrades::InitAsDefaultInstance() {
  display_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBManorBattleFieldComrades::PBManorBattleFieldComrades(const PBManorBattleFieldComrades& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBManorBattleFieldComrades::SharedCtor() {
  _cached_size_ = 0;
  display_ = NULL;
  curhp_ = 0;
  maxhp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBManorBattleFieldComrades::~PBManorBattleFieldComrades() {
  SharedDtor();
}

void PBManorBattleFieldComrades::SharedDtor() {
  if (this != default_instance_) {
    delete display_;
  }
}

void PBManorBattleFieldComrades::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBManorBattleFieldComrades::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBManorBattleFieldComrades_descriptor_;
}

const PBManorBattleFieldComrades& PBManorBattleFieldComrades::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBManorBattleFieldComrades* PBManorBattleFieldComrades::default_instance_ = NULL;

PBManorBattleFieldComrades* PBManorBattleFieldComrades::New() const {
  return new PBManorBattleFieldComrades;
}

void PBManorBattleFieldComrades::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_display()) {
      if (display_ != NULL) display_->::PBPlayerDisplay::Clear();
    }
    curhp_ = 0;
    maxhp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBManorBattleFieldComrades::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay display = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curhp;
        break;
      }
      
      // optional int32 curhp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxhp;
        break;
      }
      
      // optional int32 maxhp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBManorBattleFieldComrades::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->display(), output);
  }
  
  // optional int32 curhp = 2;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curhp(), output);
  }
  
  // optional int32 maxhp = 3;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxhp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBManorBattleFieldComrades::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->display(), target);
  }
  
  // optional int32 curhp = 2;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curhp(), target);
  }
  
  // optional int32 maxhp = 3;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxhp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBManorBattleFieldComrades::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional int32 curhp = 2;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }
    
    // optional int32 maxhp = 3;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBManorBattleFieldComrades::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBManorBattleFieldComrades* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBManorBattleFieldComrades*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBManorBattleFieldComrades::MergeFrom(const PBManorBattleFieldComrades& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      mutable_display()->::PBPlayerDisplay::MergeFrom(from.display());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBManorBattleFieldComrades::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBManorBattleFieldComrades::CopyFrom(const PBManorBattleFieldComrades& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBManorBattleFieldComrades::IsInitialized() const {
  
  return true;
}

void PBManorBattleFieldComrades::Swap(PBManorBattleFieldComrades* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBManorBattleFieldComrades::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBManorBattleFieldComrades_descriptor_;
  metadata.reflection = PBManorBattleFieldComrades_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapManorBattleFieldComradesNtf::kComradesFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapManorBattleFieldComradesNtf::PBG2CCopymapManorBattleFieldComradesNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapManorBattleFieldComradesNtf::InitAsDefaultInstance() {
}

PBG2CCopymapManorBattleFieldComradesNtf::PBG2CCopymapManorBattleFieldComradesNtf(const PBG2CCopymapManorBattleFieldComradesNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapManorBattleFieldComradesNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapManorBattleFieldComradesNtf::~PBG2CCopymapManorBattleFieldComradesNtf() {
  SharedDtor();
}

void PBG2CCopymapManorBattleFieldComradesNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapManorBattleFieldComradesNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapManorBattleFieldComradesNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapManorBattleFieldComradesNtf_descriptor_;
}

const PBG2CCopymapManorBattleFieldComradesNtf& PBG2CCopymapManorBattleFieldComradesNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapManorBattleFieldComradesNtf* PBG2CCopymapManorBattleFieldComradesNtf::default_instance_ = NULL;

PBG2CCopymapManorBattleFieldComradesNtf* PBG2CCopymapManorBattleFieldComradesNtf::New() const {
  return new PBG2CCopymapManorBattleFieldComradesNtf;
}

void PBG2CCopymapManorBattleFieldComradesNtf::Clear() {
  comrades_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapManorBattleFieldComradesNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBManorBattleFieldComrades comrades = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comrades:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comrades()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_comrades;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapManorBattleFieldComradesNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBManorBattleFieldComrades comrades = 1;
  for (int i = 0; i < this->comrades_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->comrades(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapManorBattleFieldComradesNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBManorBattleFieldComrades comrades = 1;
  for (int i = 0; i < this->comrades_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->comrades(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapManorBattleFieldComradesNtf::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBManorBattleFieldComrades comrades = 1;
  total_size += 1 * this->comrades_size();
  for (int i = 0; i < this->comrades_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comrades(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapManorBattleFieldComradesNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapManorBattleFieldComradesNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapManorBattleFieldComradesNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapManorBattleFieldComradesNtf::MergeFrom(const PBG2CCopymapManorBattleFieldComradesNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  comrades_.MergeFrom(from.comrades_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapManorBattleFieldComradesNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapManorBattleFieldComradesNtf::CopyFrom(const PBG2CCopymapManorBattleFieldComradesNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapManorBattleFieldComradesNtf::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapManorBattleFieldComradesNtf::Swap(PBG2CCopymapManorBattleFieldComradesNtf* other) {
  if (other != this) {
    comrades_.Swap(&other->comrades_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapManorBattleFieldComradesNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapManorBattleFieldComradesNtf_descriptor_;
  metadata.reflection = PBG2CCopymapManorBattleFieldComradesNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFactionScore::kFactionnameFieldNumber;
const int PBFactionScore::kTotalscoreFieldNumber;
#endif  // !_MSC_VER

PBFactionScore::PBFactionScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFactionScore::InitAsDefaultInstance() {
}

PBFactionScore::PBFactionScore(const PBFactionScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFactionScore::SharedCtor() {
  _cached_size_ = 0;
  factionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totalscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFactionScore::~PBFactionScore() {
  SharedDtor();
}

void PBFactionScore::SharedDtor() {
  if (factionname_ != &::google::protobuf::internal::kEmptyString) {
    delete factionname_;
  }
  if (this != default_instance_) {
  }
}

void PBFactionScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFactionScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFactionScore_descriptor_;
}

const PBFactionScore& PBFactionScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBFactionScore* PBFactionScore::default_instance_ = NULL;

PBFactionScore* PBFactionScore::New() const {
  return new PBFactionScore;
}

void PBFactionScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_factionname()) {
      if (factionname_ != &::google::protobuf::internal::kEmptyString) {
        factionname_->clear();
      }
    }
    totalscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFactionScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string factionname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_factionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->factionname().data(), this->factionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalscore;
        break;
      }
      
      // optional uint32 totalscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFactionScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string factionname = 1;
  if (has_factionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionname().data(), this->factionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->factionname(), output);
  }
  
  // optional uint32 totalscore = 2;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalscore(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFactionScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string factionname = 1;
  if (has_factionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionname().data(), this->factionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->factionname(), target);
  }
  
  // optional uint32 totalscore = 2;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totalscore(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFactionScore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string factionname = 1;
    if (has_factionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->factionname());
    }
    
    // optional uint32 totalscore = 2;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalscore());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFactionScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFactionScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFactionScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFactionScore::MergeFrom(const PBFactionScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionname()) {
      set_factionname(from.factionname());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFactionScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFactionScore::CopyFrom(const PBFactionScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFactionScore::IsInitialized() const {
  
  return true;
}

void PBFactionScore::Swap(PBFactionScore* other) {
  if (other != this) {
    std::swap(factionname_, other->factionname_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFactionScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFactionScore_descriptor_;
  metadata.reflection = PBFactionScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapManorBattleFieldTotalScoreNtf::kDefenderFieldNumber;
const int PBG2CCopymapManorBattleFieldTotalScoreNtf::kChallengerFieldNumber;
const int PBG2CCopymapManorBattleFieldTotalScoreNtf::kLeftsecondFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapManorBattleFieldTotalScoreNtf::PBG2CCopymapManorBattleFieldTotalScoreNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapManorBattleFieldTotalScoreNtf::InitAsDefaultInstance() {
  defender_ = const_cast< ::PBFactionScore*>(&::PBFactionScore::default_instance());
  challenger_ = const_cast< ::PBFactionScore*>(&::PBFactionScore::default_instance());
}

PBG2CCopymapManorBattleFieldTotalScoreNtf::PBG2CCopymapManorBattleFieldTotalScoreNtf(const PBG2CCopymapManorBattleFieldTotalScoreNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapManorBattleFieldTotalScoreNtf::SharedCtor() {
  _cached_size_ = 0;
  defender_ = NULL;
  challenger_ = NULL;
  leftsecond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapManorBattleFieldTotalScoreNtf::~PBG2CCopymapManorBattleFieldTotalScoreNtf() {
  SharedDtor();
}

void PBG2CCopymapManorBattleFieldTotalScoreNtf::SharedDtor() {
  if (this != default_instance_) {
    delete defender_;
    delete challenger_;
  }
}

void PBG2CCopymapManorBattleFieldTotalScoreNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapManorBattleFieldTotalScoreNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapManorBattleFieldTotalScoreNtf_descriptor_;
}

const PBG2CCopymapManorBattleFieldTotalScoreNtf& PBG2CCopymapManorBattleFieldTotalScoreNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapManorBattleFieldTotalScoreNtf* PBG2CCopymapManorBattleFieldTotalScoreNtf::default_instance_ = NULL;

PBG2CCopymapManorBattleFieldTotalScoreNtf* PBG2CCopymapManorBattleFieldTotalScoreNtf::New() const {
  return new PBG2CCopymapManorBattleFieldTotalScoreNtf;
}

void PBG2CCopymapManorBattleFieldTotalScoreNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_defender()) {
      if (defender_ != NULL) defender_->::PBFactionScore::Clear();
    }
    if (has_challenger()) {
      if (challenger_ != NULL) challenger_->::PBFactionScore::Clear();
    }
    leftsecond_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapManorBattleFieldTotalScoreNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionScore defender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_challenger;
        break;
      }
      
      // optional .PBFactionScore challenger = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challenger()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leftsecond;
        break;
      }
      
      // optional uint32 leftsecond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftsecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftsecond_)));
          set_has_leftsecond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapManorBattleFieldTotalScoreNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionScore defender = 1;
  if (has_defender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->defender(), output);
  }
  
  // optional .PBFactionScore challenger = 2;
  if (has_challenger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->challenger(), output);
  }
  
  // optional uint32 leftsecond = 3;
  if (has_leftsecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leftsecond(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapManorBattleFieldTotalScoreNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionScore defender = 1;
  if (has_defender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->defender(), target);
  }
  
  // optional .PBFactionScore challenger = 2;
  if (has_challenger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->challenger(), target);
  }
  
  // optional uint32 leftsecond = 3;
  if (has_leftsecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->leftsecond(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapManorBattleFieldTotalScoreNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionScore defender = 1;
    if (has_defender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender());
    }
    
    // optional .PBFactionScore challenger = 2;
    if (has_challenger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challenger());
    }
    
    // optional uint32 leftsecond = 3;
    if (has_leftsecond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftsecond());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapManorBattleFieldTotalScoreNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapManorBattleFieldTotalScoreNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapManorBattleFieldTotalScoreNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapManorBattleFieldTotalScoreNtf::MergeFrom(const PBG2CCopymapManorBattleFieldTotalScoreNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defender()) {
      mutable_defender()->::PBFactionScore::MergeFrom(from.defender());
    }
    if (from.has_challenger()) {
      mutable_challenger()->::PBFactionScore::MergeFrom(from.challenger());
    }
    if (from.has_leftsecond()) {
      set_leftsecond(from.leftsecond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapManorBattleFieldTotalScoreNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapManorBattleFieldTotalScoreNtf::CopyFrom(const PBG2CCopymapManorBattleFieldTotalScoreNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapManorBattleFieldTotalScoreNtf::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapManorBattleFieldTotalScoreNtf::Swap(PBG2CCopymapManorBattleFieldTotalScoreNtf* other) {
  if (other != this) {
    std::swap(defender_, other->defender_);
    std::swap(challenger_, other->challenger_);
    std::swap(leftsecond_, other->leftsecond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapManorBattleFieldTotalScoreNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapManorBattleFieldTotalScoreNtf_descriptor_;
  metadata.reflection = PBG2CCopymapManorBattleFieldTotalScoreNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCopymapManorBroadCastPromptNtf::kTypeFieldNumber;
const int PBG2CCopymapManorBroadCastPromptNtf::kArgnumFieldNumber;
const int PBG2CCopymapManorBroadCastPromptNtf::kArgstringFieldNumber;
#endif  // !_MSC_VER

PBG2CCopymapManorBroadCastPromptNtf::PBG2CCopymapManorBroadCastPromptNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCopymapManorBroadCastPromptNtf::InitAsDefaultInstance() {
}

PBG2CCopymapManorBroadCastPromptNtf::PBG2CCopymapManorBroadCastPromptNtf(const PBG2CCopymapManorBroadCastPromptNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCopymapManorBroadCastPromptNtf::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCopymapManorBroadCastPromptNtf::~PBG2CCopymapManorBroadCastPromptNtf() {
  SharedDtor();
}

void PBG2CCopymapManorBroadCastPromptNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCopymapManorBroadCastPromptNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCopymapManorBroadCastPromptNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCopymapManorBroadCastPromptNtf_descriptor_;
}

const PBG2CCopymapManorBroadCastPromptNtf& PBG2CCopymapManorBroadCastPromptNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCopymapManorBroadCastPromptNtf* PBG2CCopymapManorBroadCastPromptNtf::default_instance_ = NULL;

PBG2CCopymapManorBroadCastPromptNtf* PBG2CCopymapManorBroadCastPromptNtf::New() const {
  return new PBG2CCopymapManorBroadCastPromptNtf;
}

void PBG2CCopymapManorBroadCastPromptNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  argnum_.Clear();
  argstring_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCopymapManorBroadCastPromptNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_argnum;
        break;
      }
      
      // repeated uint32 argnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_argnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_argnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_argnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_argnum;
        if (input->ExpectTag(26)) goto parse_argstring;
        break;
      }
      
      // repeated string argstring = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_argstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->argstring(0).data(), this->argstring(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_argstring;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCopymapManorBroadCastPromptNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // repeated uint32 argnum = 2;
  for (int i = 0; i < this->argnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->argnum(i), output);
  }
  
  // repeated string argstring = 3;
  for (int i = 0; i < this->argstring_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->argstring(i).data(), this->argstring(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->argstring(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCopymapManorBroadCastPromptNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // repeated uint32 argnum = 2;
  for (int i = 0; i < this->argnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->argnum(i), target);
  }
  
  // repeated string argstring = 3;
  for (int i = 0; i < this->argstring_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argstring(i).data(), this->argstring(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->argstring(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCopymapManorBroadCastPromptNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  // repeated uint32 argnum = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->argnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->argnum(i));
    }
    total_size += 1 * this->argnum_size() + data_size;
  }
  
  // repeated string argstring = 3;
  total_size += 1 * this->argstring_size();
  for (int i = 0; i < this->argstring_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->argstring(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCopymapManorBroadCastPromptNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCopymapManorBroadCastPromptNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCopymapManorBroadCastPromptNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCopymapManorBroadCastPromptNtf::MergeFrom(const PBG2CCopymapManorBroadCastPromptNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  argnum_.MergeFrom(from.argnum_);
  argstring_.MergeFrom(from.argstring_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCopymapManorBroadCastPromptNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCopymapManorBroadCastPromptNtf::CopyFrom(const PBG2CCopymapManorBroadCastPromptNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCopymapManorBroadCastPromptNtf::IsInitialized() const {
  
  return true;
}

void PBG2CCopymapManorBroadCastPromptNtf::Swap(PBG2CCopymapManorBroadCastPromptNtf* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    argnum_.Swap(&other->argnum_);
    argstring_.Swap(&other->argstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCopymapManorBroadCastPromptNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCopymapManorBroadCastPromptNtf_descriptor_;
  metadata.reflection = PBG2CCopymapManorBroadCastPromptNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommon_BossInfo::kSceneidFieldNumber;
const int PBG2CCommon_BossInfo::kCellidFieldNumber;
const int PBG2CCommon_BossInfo::kMonsteridFieldNumber;
const int PBG2CCommon_BossInfo::kAliveFieldNumber;
#endif  // !_MSC_VER

PBG2CCommon_BossInfo::PBG2CCommon_BossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_BossInfo::InitAsDefaultInstance() {
}

PBG2CCommon_BossInfo::PBG2CCommon_BossInfo(const PBG2CCommon_BossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_BossInfo::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  cellid_ = 0u;
  monsterid_ = 0u;
  alive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_BossInfo::~PBG2CCommon_BossInfo() {
  SharedDtor();
}

void PBG2CCommon_BossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_BossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_BossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_BossInfo_descriptor_;
}

const PBG2CCommon_BossInfo& PBG2CCommon_BossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_BossInfo* PBG2CCommon_BossInfo::default_instance_ = NULL;

PBG2CCommon_BossInfo* PBG2CCommon_BossInfo::New() const {
  return new PBG2CCommon_BossInfo;
}

void PBG2CCommon_BossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    cellid_ = 0u;
    monsterid_ = 0u;
    alive_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_BossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cellid;
        break;
      }
      
      // optional uint32 cellid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monsterid;
        break;
      }
      
      // optional uint32 monsterid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_alive;
        break;
      }
      
      // optional bool alive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alive_)));
          set_has_alive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommon_BossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint32 cellid = 2;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cellid(), output);
  }
  
  // optional uint32 monsterid = 3;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monsterid(), output);
  }
  
  // optional bool alive = 4;
  if (has_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->alive(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_BossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint32 cellid = 2;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cellid(), target);
  }
  
  // optional uint32 monsterid = 3;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->monsterid(), target);
  }
  
  // optional bool alive = 4;
  if (has_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->alive(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_BossInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 cellid = 2;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }
    
    // optional uint32 monsterid = 3;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }
    
    // optional bool alive = 4;
    if (has_alive()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_BossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_BossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_BossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_BossInfo::MergeFrom(const PBG2CCommon_BossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_alive()) {
      set_alive(from.alive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_BossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_BossInfo::CopyFrom(const PBG2CCommon_BossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_BossInfo::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_BossInfo::Swap(PBG2CCommon_BossInfo* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(cellid_, other->cellid_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(alive_, other->alive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_BossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_BossInfo_descriptor_;
  metadata.reflection = PBG2CCommon_BossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommon_BossList::kInfoFieldNumber;
#endif  // !_MSC_VER

PBG2CCommon_BossList::PBG2CCommon_BossList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_BossList::InitAsDefaultInstance() {
}

PBG2CCommon_BossList::PBG2CCommon_BossList(const PBG2CCommon_BossList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_BossList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_BossList::~PBG2CCommon_BossList() {
  SharedDtor();
}

void PBG2CCommon_BossList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_BossList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_BossList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_BossList_descriptor_;
}

const PBG2CCommon_BossList& PBG2CCommon_BossList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_BossList* PBG2CCommon_BossList::default_instance_ = NULL;

PBG2CCommon_BossList* PBG2CCommon_BossList::New() const {
  return new PBG2CCommon_BossList;
}

void PBG2CCommon_BossList::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_BossList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBG2CCommon_BossInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommon_BossList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBG2CCommon_BossInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_BossList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBG2CCommon_BossInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_BossList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBG2CCommon_BossInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_BossList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_BossList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_BossList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_BossList::MergeFrom(const PBG2CCommon_BossList& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_BossList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_BossList::CopyFrom(const PBG2CCommon_BossList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_BossList::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_BossList::Swap(PBG2CCommon_BossList* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_BossList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_BossList_descriptor_;
  metadata.reflection = PBG2CCommon_BossList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCommon_FlyAsk::kFlyTypeFieldNumber;
const int PBC2GCommon_FlyAsk::kIDFieldNumber;
#endif  // !_MSC_VER

PBC2GCommon_FlyAsk::PBC2GCommon_FlyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommon_FlyAsk::InitAsDefaultInstance() {
}

PBC2GCommon_FlyAsk::PBC2GCommon_FlyAsk(const PBC2GCommon_FlyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommon_FlyAsk::SharedCtor() {
  _cached_size_ = 0;
  flytype_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommon_FlyAsk::~PBC2GCommon_FlyAsk() {
  SharedDtor();
}

void PBC2GCommon_FlyAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommon_FlyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommon_FlyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommon_FlyAsk_descriptor_;
}

const PBC2GCommon_FlyAsk& PBC2GCommon_FlyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommon_FlyAsk* PBC2GCommon_FlyAsk::default_instance_ = NULL;

PBC2GCommon_FlyAsk* PBC2GCommon_FlyAsk::New() const {
  return new PBC2GCommon_FlyAsk;
}

void PBC2GCommon_FlyAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flytype_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommon_FlyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flyType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flytype_)));
          set_has_flytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }
      
      // optional uint32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCommon_FlyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 flyType = 1;
  if (has_flytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flytype(), output);
  }
  
  // optional uint32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommon_FlyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 flyType = 1;
  if (has_flytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flytype(), target);
  }
  
  // optional uint32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommon_FlyAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 flyType = 1;
    if (has_flytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flytype());
    }
    
    // optional uint32 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommon_FlyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommon_FlyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommon_FlyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommon_FlyAsk::MergeFrom(const PBC2GCommon_FlyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flytype()) {
      set_flytype(from.flytype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommon_FlyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommon_FlyAsk::CopyFrom(const PBC2GCommon_FlyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommon_FlyAsk::IsInitialized() const {
  
  return true;
}

void PBC2GCommon_FlyAsk::Swap(PBC2GCommon_FlyAsk* other) {
  if (other != this) {
    std::swap(flytype_, other->flytype_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommon_FlyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommon_FlyAsk_descriptor_;
  metadata.reflection = PBC2GCommon_FlyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CCommon_FlyAck::PBG2CCommon_FlyAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_FlyAck::InitAsDefaultInstance() {
}

PBG2CCommon_FlyAck::PBG2CCommon_FlyAck(const PBG2CCommon_FlyAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_FlyAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_FlyAck::~PBG2CCommon_FlyAck() {
  SharedDtor();
}

void PBG2CCommon_FlyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_FlyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_FlyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_FlyAck_descriptor_;
}

const PBG2CCommon_FlyAck& PBG2CCommon_FlyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_FlyAck* PBG2CCommon_FlyAck::default_instance_ = NULL;

PBG2CCommon_FlyAck* PBG2CCommon_FlyAck::New() const {
  return new PBG2CCommon_FlyAck;
}

void PBG2CCommon_FlyAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_FlyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CCommon_FlyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_FlyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_FlyAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_FlyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_FlyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_FlyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_FlyAck::MergeFrom(const PBG2CCommon_FlyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_FlyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_FlyAck::CopyFrom(const PBG2CCommon_FlyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_FlyAck::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_FlyAck::Swap(PBG2CCommon_FlyAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_FlyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_FlyAck_descriptor_;
  metadata.reflection = PBG2CCommon_FlyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCommon_TaskFlyAsk::kSceneidFieldNumber;
const int PBC2GCommon_TaskFlyAsk::kRegionidFieldNumber;
#endif  // !_MSC_VER

PBC2GCommon_TaskFlyAsk::PBC2GCommon_TaskFlyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommon_TaskFlyAsk::InitAsDefaultInstance() {
}

PBC2GCommon_TaskFlyAsk::PBC2GCommon_TaskFlyAsk(const PBC2GCommon_TaskFlyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommon_TaskFlyAsk::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  regionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommon_TaskFlyAsk::~PBC2GCommon_TaskFlyAsk() {
  SharedDtor();
}

void PBC2GCommon_TaskFlyAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommon_TaskFlyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommon_TaskFlyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommon_TaskFlyAsk_descriptor_;
}

const PBC2GCommon_TaskFlyAsk& PBC2GCommon_TaskFlyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommon_TaskFlyAsk* PBC2GCommon_TaskFlyAsk::default_instance_ = NULL;

PBC2GCommon_TaskFlyAsk* PBC2GCommon_TaskFlyAsk::New() const {
  return new PBC2GCommon_TaskFlyAsk;
}

void PBC2GCommon_TaskFlyAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    regionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommon_TaskFlyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_regionid;
        break;
      }
      
      // optional uint32 regionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regionid_)));
          set_has_regionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCommon_TaskFlyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint32 regionid = 2;
  if (has_regionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->regionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommon_TaskFlyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint32 regionid = 2;
  if (has_regionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->regionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommon_TaskFlyAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 regionid = 2;
    if (has_regionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommon_TaskFlyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommon_TaskFlyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommon_TaskFlyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommon_TaskFlyAsk::MergeFrom(const PBC2GCommon_TaskFlyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_regionid()) {
      set_regionid(from.regionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommon_TaskFlyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommon_TaskFlyAsk::CopyFrom(const PBC2GCommon_TaskFlyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommon_TaskFlyAsk::IsInitialized() const {
  
  return true;
}

void PBC2GCommon_TaskFlyAsk::Swap(PBC2GCommon_TaskFlyAsk* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(regionid_, other->regionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommon_TaskFlyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommon_TaskFlyAsk_descriptor_;
  metadata.reflection = PBC2GCommon_TaskFlyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CCommon_TaskFlyAck::PBG2CCommon_TaskFlyAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_TaskFlyAck::InitAsDefaultInstance() {
}

PBG2CCommon_TaskFlyAck::PBG2CCommon_TaskFlyAck(const PBG2CCommon_TaskFlyAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_TaskFlyAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_TaskFlyAck::~PBG2CCommon_TaskFlyAck() {
  SharedDtor();
}

void PBG2CCommon_TaskFlyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_TaskFlyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_TaskFlyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_TaskFlyAck_descriptor_;
}

const PBG2CCommon_TaskFlyAck& PBG2CCommon_TaskFlyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_TaskFlyAck* PBG2CCommon_TaskFlyAck::default_instance_ = NULL;

PBG2CCommon_TaskFlyAck* PBG2CCommon_TaskFlyAck::New() const {
  return new PBG2CCommon_TaskFlyAck;
}

void PBG2CCommon_TaskFlyAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_TaskFlyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CCommon_TaskFlyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_TaskFlyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_TaskFlyAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_TaskFlyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_TaskFlyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_TaskFlyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_TaskFlyAck::MergeFrom(const PBG2CCommon_TaskFlyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_TaskFlyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_TaskFlyAck::CopyFrom(const PBG2CCommon_TaskFlyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_TaskFlyAck::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_TaskFlyAck::Swap(PBG2CCommon_TaskFlyAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_TaskFlyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_TaskFlyAck_descriptor_;
  metadata.reflection = PBG2CCommon_TaskFlyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommon_DazuoguajiTotalNtf::kDailyDazuoguajiExpLeftFieldNumber;
const int PBG2CCommon_DazuoguajiTotalNtf::kDailyDazuoguajiWisdomLeftFieldNumber;
const int PBG2CCommon_DazuoguajiTotalNtf::kShowPromptFieldNumber;
const int PBG2CCommon_DazuoguajiTotalNtf::kExpAddedFieldNumber;
const int PBG2CCommon_DazuoguajiTotalNtf::kWisdomAddedFieldNumber;
const int PBG2CCommon_DazuoguajiTotalNtf::kClosePanelFieldNumber;
#endif  // !_MSC_VER

PBG2CCommon_DazuoguajiTotalNtf::PBG2CCommon_DazuoguajiTotalNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_DazuoguajiTotalNtf::InitAsDefaultInstance() {
}

PBG2CCommon_DazuoguajiTotalNtf::PBG2CCommon_DazuoguajiTotalNtf(const PBG2CCommon_DazuoguajiTotalNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_DazuoguajiTotalNtf::SharedCtor() {
  _cached_size_ = 0;
  dailydazuoguajiexpleft_ = 0u;
  dailydazuoguajiwisdomleft_ = 0u;
  showprompt_ = false;
  expadded_ = 0u;
  wisdomadded_ = 0u;
  closepanel_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_DazuoguajiTotalNtf::~PBG2CCommon_DazuoguajiTotalNtf() {
  SharedDtor();
}

void PBG2CCommon_DazuoguajiTotalNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_DazuoguajiTotalNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_DazuoguajiTotalNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_DazuoguajiTotalNtf_descriptor_;
}

const PBG2CCommon_DazuoguajiTotalNtf& PBG2CCommon_DazuoguajiTotalNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_DazuoguajiTotalNtf* PBG2CCommon_DazuoguajiTotalNtf::default_instance_ = NULL;

PBG2CCommon_DazuoguajiTotalNtf* PBG2CCommon_DazuoguajiTotalNtf::New() const {
  return new PBG2CCommon_DazuoguajiTotalNtf;
}

void PBG2CCommon_DazuoguajiTotalNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dailydazuoguajiexpleft_ = 0u;
    dailydazuoguajiwisdomleft_ = 0u;
    showprompt_ = false;
    expadded_ = 0u;
    wisdomadded_ = 0u;
    closepanel_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_DazuoguajiTotalNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dailyDazuoguajiExpLeft = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailydazuoguajiexpleft_)));
          set_has_dailydazuoguajiexpleft();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dailyDazuoguajiWisdomLeft;
        break;
      }
      
      // optional uint32 dailyDazuoguajiWisdomLeft = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyDazuoguajiWisdomLeft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailydazuoguajiwisdomleft_)));
          set_has_dailydazuoguajiwisdomleft();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_showPrompt;
        break;
      }
      
      // optional bool showPrompt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showPrompt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showprompt_)));
          set_has_showprompt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expAdded;
        break;
      }
      
      // optional uint32 expAdded = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expAdded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expadded_)));
          set_has_expadded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wisdomAdded;
        break;
      }
      
      // optional uint32 wisdomAdded = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wisdomAdded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wisdomadded_)));
          set_has_wisdomadded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_closePanel;
        break;
      }
      
      // optional bool closePanel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closePanel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closepanel_)));
          set_has_closepanel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommon_DazuoguajiTotalNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dailyDazuoguajiExpLeft = 1;
  if (has_dailydazuoguajiexpleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dailydazuoguajiexpleft(), output);
  }
  
  // optional uint32 dailyDazuoguajiWisdomLeft = 2;
  if (has_dailydazuoguajiwisdomleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dailydazuoguajiwisdomleft(), output);
  }
  
  // optional bool showPrompt = 3;
  if (has_showprompt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->showprompt(), output);
  }
  
  // optional uint32 expAdded = 4;
  if (has_expadded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expadded(), output);
  }
  
  // optional uint32 wisdomAdded = 5;
  if (has_wisdomadded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wisdomadded(), output);
  }
  
  // optional bool closePanel = 6;
  if (has_closepanel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->closepanel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_DazuoguajiTotalNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dailyDazuoguajiExpLeft = 1;
  if (has_dailydazuoguajiexpleft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dailydazuoguajiexpleft(), target);
  }
  
  // optional uint32 dailyDazuoguajiWisdomLeft = 2;
  if (has_dailydazuoguajiwisdomleft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dailydazuoguajiwisdomleft(), target);
  }
  
  // optional bool showPrompt = 3;
  if (has_showprompt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->showprompt(), target);
  }
  
  // optional uint32 expAdded = 4;
  if (has_expadded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expadded(), target);
  }
  
  // optional uint32 wisdomAdded = 5;
  if (has_wisdomadded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->wisdomadded(), target);
  }
  
  // optional bool closePanel = 6;
  if (has_closepanel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->closepanel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_DazuoguajiTotalNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dailyDazuoguajiExpLeft = 1;
    if (has_dailydazuoguajiexpleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailydazuoguajiexpleft());
    }
    
    // optional uint32 dailyDazuoguajiWisdomLeft = 2;
    if (has_dailydazuoguajiwisdomleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailydazuoguajiwisdomleft());
    }
    
    // optional bool showPrompt = 3;
    if (has_showprompt()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 expAdded = 4;
    if (has_expadded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expadded());
    }
    
    // optional uint32 wisdomAdded = 5;
    if (has_wisdomadded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wisdomadded());
    }
    
    // optional bool closePanel = 6;
    if (has_closepanel()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_DazuoguajiTotalNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_DazuoguajiTotalNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_DazuoguajiTotalNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_DazuoguajiTotalNtf::MergeFrom(const PBG2CCommon_DazuoguajiTotalNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dailydazuoguajiexpleft()) {
      set_dailydazuoguajiexpleft(from.dailydazuoguajiexpleft());
    }
    if (from.has_dailydazuoguajiwisdomleft()) {
      set_dailydazuoguajiwisdomleft(from.dailydazuoguajiwisdomleft());
    }
    if (from.has_showprompt()) {
      set_showprompt(from.showprompt());
    }
    if (from.has_expadded()) {
      set_expadded(from.expadded());
    }
    if (from.has_wisdomadded()) {
      set_wisdomadded(from.wisdomadded());
    }
    if (from.has_closepanel()) {
      set_closepanel(from.closepanel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_DazuoguajiTotalNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_DazuoguajiTotalNtf::CopyFrom(const PBG2CCommon_DazuoguajiTotalNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_DazuoguajiTotalNtf::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_DazuoguajiTotalNtf::Swap(PBG2CCommon_DazuoguajiTotalNtf* other) {
  if (other != this) {
    std::swap(dailydazuoguajiexpleft_, other->dailydazuoguajiexpleft_);
    std::swap(dailydazuoguajiwisdomleft_, other->dailydazuoguajiwisdomleft_);
    std::swap(showprompt_, other->showprompt_);
    std::swap(expadded_, other->expadded_);
    std::swap(wisdomadded_, other->wisdomadded_);
    std::swap(closepanel_, other->closepanel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_DazuoguajiTotalNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_DazuoguajiTotalNtf_descriptor_;
  metadata.reflection = PBG2CCommon_DazuoguajiTotalNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CUpBingfuExp::kBingfuexpFieldNumber;
#endif  // !_MSC_VER

PBG2CUpBingfuExp::PBG2CUpBingfuExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CUpBingfuExp::InitAsDefaultInstance() {
}

PBG2CUpBingfuExp::PBG2CUpBingfuExp(const PBG2CUpBingfuExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CUpBingfuExp::SharedCtor() {
  _cached_size_ = 0;
  bingfuexp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CUpBingfuExp::~PBG2CUpBingfuExp() {
  SharedDtor();
}

void PBG2CUpBingfuExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CUpBingfuExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CUpBingfuExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CUpBingfuExp_descriptor_;
}

const PBG2CUpBingfuExp& PBG2CUpBingfuExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CUpBingfuExp* PBG2CUpBingfuExp::default_instance_ = NULL;

PBG2CUpBingfuExp* PBG2CUpBingfuExp::New() const {
  return new PBG2CUpBingfuExp;
}

void PBG2CUpBingfuExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bingfuexp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CUpBingfuExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 bingfuexp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bingfuexp_)));
          set_has_bingfuexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CUpBingfuExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 bingfuexp = 1;
  if (has_bingfuexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bingfuexp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CUpBingfuExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 bingfuexp = 1;
  if (has_bingfuexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->bingfuexp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CUpBingfuExp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 bingfuexp = 1;
    if (has_bingfuexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bingfuexp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CUpBingfuExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CUpBingfuExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CUpBingfuExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CUpBingfuExp::MergeFrom(const PBG2CUpBingfuExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bingfuexp()) {
      set_bingfuexp(from.bingfuexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CUpBingfuExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CUpBingfuExp::CopyFrom(const PBG2CUpBingfuExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CUpBingfuExp::IsInitialized() const {
  
  return true;
}

void PBG2CUpBingfuExp::Swap(PBG2CUpBingfuExp* other) {
  if (other != this) {
    std::swap(bingfuexp_, other->bingfuexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CUpBingfuExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CUpBingfuExp_descriptor_;
  metadata.reflection = PBG2CUpBingfuExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommonTreasurePrize::kPrizeidFieldNumber;
const int PBG2CCommonTreasurePrize::kTreasureidFieldNumber;
#endif  // !_MSC_VER

PBG2CCommonTreasurePrize::PBG2CCommonTreasurePrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommonTreasurePrize::InitAsDefaultInstance() {
}

PBG2CCommonTreasurePrize::PBG2CCommonTreasurePrize(const PBG2CCommonTreasurePrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommonTreasurePrize::SharedCtor() {
  _cached_size_ = 0;
  prizeid_ = 0u;
  treasureid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommonTreasurePrize::~PBG2CCommonTreasurePrize() {
  SharedDtor();
}

void PBG2CCommonTreasurePrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommonTreasurePrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommonTreasurePrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommonTreasurePrize_descriptor_;
}

const PBG2CCommonTreasurePrize& PBG2CCommonTreasurePrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommonTreasurePrize* PBG2CCommonTreasurePrize::default_instance_ = NULL;

PBG2CCommonTreasurePrize* PBG2CCommonTreasurePrize::New() const {
  return new PBG2CCommonTreasurePrize;
}

void PBG2CCommonTreasurePrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prizeid_ = 0u;
    treasureid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommonTreasurePrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prizeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizeid_)));
          set_has_prizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_treasureid;
        break;
      }
      
      // optional uint32 treasureid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasureid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treasureid_)));
          set_has_treasureid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommonTreasurePrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 prizeid = 1;
  if (has_prizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prizeid(), output);
  }
  
  // optional uint32 treasureid = 2;
  if (has_treasureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->treasureid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommonTreasurePrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 prizeid = 1;
  if (has_prizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prizeid(), target);
  }
  
  // optional uint32 treasureid = 2;
  if (has_treasureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->treasureid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommonTreasurePrize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 prizeid = 1;
    if (has_prizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizeid());
    }
    
    // optional uint32 treasureid = 2;
    if (has_treasureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treasureid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommonTreasurePrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommonTreasurePrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommonTreasurePrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommonTreasurePrize::MergeFrom(const PBG2CCommonTreasurePrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prizeid()) {
      set_prizeid(from.prizeid());
    }
    if (from.has_treasureid()) {
      set_treasureid(from.treasureid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommonTreasurePrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommonTreasurePrize::CopyFrom(const PBG2CCommonTreasurePrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommonTreasurePrize::IsInitialized() const {
  
  return true;
}

void PBG2CCommonTreasurePrize::Swap(PBG2CCommonTreasurePrize* other) {
  if (other != this) {
    std::swap(prizeid_, other->prizeid_);
    std::swap(treasureid_, other->treasureid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommonTreasurePrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommonTreasurePrize_descriptor_;
  metadata.reflection = PBG2CCommonTreasurePrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommonSetCorpsJob::kCorpsjobFieldNumber;
#endif  // !_MSC_VER

PBG2CCommonSetCorpsJob::PBG2CCommonSetCorpsJob()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommonSetCorpsJob::InitAsDefaultInstance() {
}

PBG2CCommonSetCorpsJob::PBG2CCommonSetCorpsJob(const PBG2CCommonSetCorpsJob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommonSetCorpsJob::SharedCtor() {
  _cached_size_ = 0;
  corpsjob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommonSetCorpsJob::~PBG2CCommonSetCorpsJob() {
  SharedDtor();
}

void PBG2CCommonSetCorpsJob::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommonSetCorpsJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommonSetCorpsJob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommonSetCorpsJob_descriptor_;
}

const PBG2CCommonSetCorpsJob& PBG2CCommonSetCorpsJob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommonSetCorpsJob* PBG2CCommonSetCorpsJob::default_instance_ = NULL;

PBG2CCommonSetCorpsJob* PBG2CCommonSetCorpsJob::New() const {
  return new PBG2CCommonSetCorpsJob;
}

void PBG2CCommonSetCorpsJob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    corpsjob_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommonSetCorpsJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 corpsjob = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corpsjob_)));
          set_has_corpsjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommonSetCorpsJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 corpsjob = 1;
  if (has_corpsjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->corpsjob(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommonSetCorpsJob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 corpsjob = 1;
  if (has_corpsjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->corpsjob(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommonSetCorpsJob::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 corpsjob = 1;
    if (has_corpsjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corpsjob());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommonSetCorpsJob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommonSetCorpsJob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommonSetCorpsJob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommonSetCorpsJob::MergeFrom(const PBG2CCommonSetCorpsJob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_corpsjob()) {
      set_corpsjob(from.corpsjob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommonSetCorpsJob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommonSetCorpsJob::CopyFrom(const PBG2CCommonSetCorpsJob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommonSetCorpsJob::IsInitialized() const {
  
  return true;
}

void PBG2CCommonSetCorpsJob::Swap(PBG2CCommonSetCorpsJob* other) {
  if (other != this) {
    std::swap(corpsjob_, other->corpsjob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommonSetCorpsJob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommonSetCorpsJob_descriptor_;
  metadata.reflection = PBG2CCommonSetCorpsJob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommonStrongerReWard::kUIDFieldNumber;
#endif  // !_MSC_VER

PBG2CCommonStrongerReWard::PBG2CCommonStrongerReWard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommonStrongerReWard::InitAsDefaultInstance() {
}

PBG2CCommonStrongerReWard::PBG2CCommonStrongerReWard(const PBG2CCommonStrongerReWard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommonStrongerReWard::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommonStrongerReWard::~PBG2CCommonStrongerReWard() {
  SharedDtor();
}

void PBG2CCommonStrongerReWard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommonStrongerReWard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommonStrongerReWard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommonStrongerReWard_descriptor_;
}

const PBG2CCommonStrongerReWard& PBG2CCommonStrongerReWard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommonStrongerReWard* PBG2CCommonStrongerReWard::default_instance_ = NULL;

PBG2CCommonStrongerReWard* PBG2CCommonStrongerReWard::New() const {
  return new PBG2CCommonStrongerReWard;
}

void PBG2CCommonStrongerReWard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommonStrongerReWard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommonStrongerReWard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uID = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommonStrongerReWard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uID = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommonStrongerReWard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uID = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommonStrongerReWard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommonStrongerReWard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommonStrongerReWard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommonStrongerReWard::MergeFrom(const PBG2CCommonStrongerReWard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommonStrongerReWard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommonStrongerReWard::CopyFrom(const PBG2CCommonStrongerReWard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommonStrongerReWard::IsInitialized() const {
  
  return true;
}

void PBG2CCommonStrongerReWard::Swap(PBG2CCommonStrongerReWard* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommonStrongerReWard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommonStrongerReWard_descriptor_;
  metadata.reflection = PBG2CCommonStrongerReWard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFightPower::kIdFieldNumber;
const int PBG2CFightPower::kFightpowerFieldNumber;
#endif  // !_MSC_VER

PBG2CFightPower::PBG2CFightPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFightPower::InitAsDefaultInstance() {
}

PBG2CFightPower::PBG2CFightPower(const PBG2CFightPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFightPower::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  fightpower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFightPower::~PBG2CFightPower() {
  SharedDtor();
}

void PBG2CFightPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFightPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFightPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFightPower_descriptor_;
}

const PBG2CFightPower& PBG2CFightPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CFightPower* PBG2CFightPower::default_instance_ = NULL;

PBG2CFightPower* PBG2CFightPower::New() const {
  return new PBG2CFightPower;
}

void PBG2CFightPower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    fightpower_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFightPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fightpower;
        break;
      }
      
      // optional uint32 fightpower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFightPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fightpower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFightPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 fightpower = 2;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fightpower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFightPower::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 fightpower = 2;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFightPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFightPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFightPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFightPower::MergeFrom(const PBG2CFightPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFightPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFightPower::CopyFrom(const PBG2CFightPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFightPower::IsInitialized() const {
  
  return true;
}

void PBG2CFightPower::Swap(PBG2CFightPower* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFightPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFightPower_descriptor_;
  metadata.reflection = PBG2CFightPower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommonSubFightPower::kInfoFieldNumber;
#endif  // !_MSC_VER

PBG2CCommonSubFightPower::PBG2CCommonSubFightPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommonSubFightPower::InitAsDefaultInstance() {
}

PBG2CCommonSubFightPower::PBG2CCommonSubFightPower(const PBG2CCommonSubFightPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommonSubFightPower::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommonSubFightPower::~PBG2CCommonSubFightPower() {
  SharedDtor();
}

void PBG2CCommonSubFightPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommonSubFightPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommonSubFightPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommonSubFightPower_descriptor_;
}

const PBG2CCommonSubFightPower& PBG2CCommonSubFightPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommonSubFightPower* PBG2CCommonSubFightPower::default_instance_ = NULL;

PBG2CCommonSubFightPower* PBG2CCommonSubFightPower::New() const {
  return new PBG2CCommonSubFightPower;
}

void PBG2CCommonSubFightPower::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommonSubFightPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBG2CFightPower info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommonSubFightPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBG2CFightPower info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommonSubFightPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBG2CFightPower info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommonSubFightPower::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBG2CFightPower info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommonSubFightPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommonSubFightPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommonSubFightPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommonSubFightPower::MergeFrom(const PBG2CCommonSubFightPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommonSubFightPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommonSubFightPower::CopyFrom(const PBG2CCommonSubFightPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommonSubFightPower::IsInitialized() const {
  
  return true;
}

void PBG2CCommonSubFightPower::Swap(PBG2CCommonSubFightPower* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommonSubFightPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommonSubFightPower_descriptor_;
  metadata.reflection = PBG2CCommonSubFightPower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommon_SystemSwitchAck::kIDFieldNumber;
#endif  // !_MSC_VER

PBG2CCommon_SystemSwitchAck::PBG2CCommon_SystemSwitchAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_SystemSwitchAck::InitAsDefaultInstance() {
}

PBG2CCommon_SystemSwitchAck::PBG2CCommon_SystemSwitchAck(const PBG2CCommon_SystemSwitchAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_SystemSwitchAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_SystemSwitchAck::~PBG2CCommon_SystemSwitchAck() {
  SharedDtor();
}

void PBG2CCommon_SystemSwitchAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_SystemSwitchAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_SystemSwitchAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_SystemSwitchAck_descriptor_;
}

const PBG2CCommon_SystemSwitchAck& PBG2CCommon_SystemSwitchAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_SystemSwitchAck* PBG2CCommon_SystemSwitchAck::default_instance_ = NULL;

PBG2CCommon_SystemSwitchAck* PBG2CCommon_SystemSwitchAck::New() const {
  return new PBG2CCommon_SystemSwitchAck;
}

void PBG2CCommon_SystemSwitchAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_SystemSwitchAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommon_SystemSwitchAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_SystemSwitchAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_SystemSwitchAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_SystemSwitchAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_SystemSwitchAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_SystemSwitchAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_SystemSwitchAck::MergeFrom(const PBG2CCommon_SystemSwitchAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_SystemSwitchAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_SystemSwitchAck::CopyFrom(const PBG2CCommon_SystemSwitchAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_SystemSwitchAck::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_SystemSwitchAck::Swap(PBG2CCommon_SystemSwitchAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_SystemSwitchAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_SystemSwitchAck_descriptor_;
  metadata.reflection = PBG2CCommon_SystemSwitchAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2GCommonPromotion::PBC2GCommonPromotion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommonPromotion::InitAsDefaultInstance() {
}

PBC2GCommonPromotion::PBC2GCommonPromotion(const PBC2GCommonPromotion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommonPromotion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommonPromotion::~PBC2GCommonPromotion() {
  SharedDtor();
}

void PBC2GCommonPromotion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommonPromotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommonPromotion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommonPromotion_descriptor_;
}

const PBC2GCommonPromotion& PBC2GCommonPromotion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommonPromotion* PBC2GCommonPromotion::default_instance_ = NULL;

PBC2GCommonPromotion* PBC2GCommonPromotion::New() const {
  return new PBC2GCommonPromotion;
}

void PBC2GCommonPromotion::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommonPromotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2GCommonPromotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommonPromotion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommonPromotion::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommonPromotion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommonPromotion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommonPromotion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommonPromotion::MergeFrom(const PBC2GCommonPromotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommonPromotion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommonPromotion::CopyFrom(const PBC2GCommonPromotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommonPromotion::IsInitialized() const {
  
  return true;
}

void PBC2GCommonPromotion::Swap(PBC2GCommonPromotion* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommonPromotion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommonPromotion_descriptor_;
  metadata.reflection = PBC2GCommonPromotion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommon_Promotion::kStepFieldNumber;
#endif  // !_MSC_VER

PBG2CCommon_Promotion::PBG2CCommon_Promotion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_Promotion::InitAsDefaultInstance() {
}

PBG2CCommon_Promotion::PBG2CCommon_Promotion(const PBG2CCommon_Promotion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_Promotion::SharedCtor() {
  _cached_size_ = 0;
  step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_Promotion::~PBG2CCommon_Promotion() {
  SharedDtor();
}

void PBG2CCommon_Promotion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_Promotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_Promotion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_Promotion_descriptor_;
}

const PBG2CCommon_Promotion& PBG2CCommon_Promotion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_Promotion* PBG2CCommon_Promotion::default_instance_ = NULL;

PBG2CCommon_Promotion* PBG2CCommon_Promotion::New() const {
  return new PBG2CCommon_Promotion;
}

void PBG2CCommon_Promotion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    step_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_Promotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Step = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommon_Promotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->step(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_Promotion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->step(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_Promotion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_Promotion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_Promotion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_Promotion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_Promotion::MergeFrom(const PBG2CCommon_Promotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_Promotion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_Promotion::CopyFrom(const PBG2CCommon_Promotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_Promotion::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_Promotion::Swap(PBG2CCommon_Promotion* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_Promotion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_Promotion_descriptor_;
  metadata.reflection = PBG2CCommon_Promotion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GIdentityOpenAsk::kSetidFieldNumber;
#endif  // !_MSC_VER

PBC2GIdentityOpenAsk::PBC2GIdentityOpenAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GIdentityOpenAsk::InitAsDefaultInstance() {
}

PBC2GIdentityOpenAsk::PBC2GIdentityOpenAsk(const PBC2GIdentityOpenAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GIdentityOpenAsk::SharedCtor() {
  _cached_size_ = 0;
  setid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GIdentityOpenAsk::~PBC2GIdentityOpenAsk() {
  SharedDtor();
}

void PBC2GIdentityOpenAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GIdentityOpenAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GIdentityOpenAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GIdentityOpenAsk_descriptor_;
}

const PBC2GIdentityOpenAsk& PBC2GIdentityOpenAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GIdentityOpenAsk* PBC2GIdentityOpenAsk::default_instance_ = NULL;

PBC2GIdentityOpenAsk* PBC2GIdentityOpenAsk::New() const {
  return new PBC2GIdentityOpenAsk;
}

void PBC2GIdentityOpenAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    setid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GIdentityOpenAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 setid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setid_)));
          set_has_setid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GIdentityOpenAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->setid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GIdentityOpenAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->setid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GIdentityOpenAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 setid = 1;
    if (has_setid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GIdentityOpenAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GIdentityOpenAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GIdentityOpenAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GIdentityOpenAsk::MergeFrom(const PBC2GIdentityOpenAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setid()) {
      set_setid(from.setid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GIdentityOpenAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GIdentityOpenAsk::CopyFrom(const PBC2GIdentityOpenAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GIdentityOpenAsk::IsInitialized() const {
  
  return true;
}

void PBC2GIdentityOpenAsk::Swap(PBC2GIdentityOpenAsk* other) {
  if (other != this) {
    std::swap(setid_, other->setid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GIdentityOpenAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GIdentityOpenAsk_descriptor_;
  metadata.reflection = PBC2GIdentityOpenAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CIdentityOpenAck::kSetidFieldNumber;
#endif  // !_MSC_VER

PBG2CIdentityOpenAck::PBG2CIdentityOpenAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CIdentityOpenAck::InitAsDefaultInstance() {
}

PBG2CIdentityOpenAck::PBG2CIdentityOpenAck(const PBG2CIdentityOpenAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CIdentityOpenAck::SharedCtor() {
  _cached_size_ = 0;
  setid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CIdentityOpenAck::~PBG2CIdentityOpenAck() {
  SharedDtor();
}

void PBG2CIdentityOpenAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CIdentityOpenAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CIdentityOpenAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CIdentityOpenAck_descriptor_;
}

const PBG2CIdentityOpenAck& PBG2CIdentityOpenAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CIdentityOpenAck* PBG2CIdentityOpenAck::default_instance_ = NULL;

PBG2CIdentityOpenAck* PBG2CIdentityOpenAck::New() const {
  return new PBG2CIdentityOpenAck;
}

void PBG2CIdentityOpenAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    setid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CIdentityOpenAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 setid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setid_)));
          set_has_setid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CIdentityOpenAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->setid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CIdentityOpenAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->setid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CIdentityOpenAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 setid = 1;
    if (has_setid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CIdentityOpenAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CIdentityOpenAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CIdentityOpenAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CIdentityOpenAck::MergeFrom(const PBG2CIdentityOpenAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setid()) {
      set_setid(from.setid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CIdentityOpenAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CIdentityOpenAck::CopyFrom(const PBG2CIdentityOpenAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CIdentityOpenAck::IsInitialized() const {
  
  return true;
}

void PBG2CIdentityOpenAck::Swap(PBG2CIdentityOpenAck* other) {
  if (other != this) {
    std::swap(setid_, other->setid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CIdentityOpenAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CIdentityOpenAck_descriptor_;
  metadata.reflection = PBG2CIdentityOpenAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GIdentityLearnAsk::kSetidFieldNumber;
const int PBC2GIdentityLearnAsk::kIdentityidFieldNumber;
#endif  // !_MSC_VER

PBC2GIdentityLearnAsk::PBC2GIdentityLearnAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GIdentityLearnAsk::InitAsDefaultInstance() {
}

PBC2GIdentityLearnAsk::PBC2GIdentityLearnAsk(const PBC2GIdentityLearnAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GIdentityLearnAsk::SharedCtor() {
  _cached_size_ = 0;
  setid_ = 0u;
  identityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GIdentityLearnAsk::~PBC2GIdentityLearnAsk() {
  SharedDtor();
}

void PBC2GIdentityLearnAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GIdentityLearnAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GIdentityLearnAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GIdentityLearnAsk_descriptor_;
}

const PBC2GIdentityLearnAsk& PBC2GIdentityLearnAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GIdentityLearnAsk* PBC2GIdentityLearnAsk::default_instance_ = NULL;

PBC2GIdentityLearnAsk* PBC2GIdentityLearnAsk::New() const {
  return new PBC2GIdentityLearnAsk;
}

void PBC2GIdentityLearnAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    setid_ = 0u;
    identityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GIdentityLearnAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 setid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setid_)));
          set_has_setid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_identityid;
        break;
      }
      
      // optional uint32 identityid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identityid_)));
          set_has_identityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GIdentityLearnAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->setid(), output);
  }
  
  // optional uint32 identityid = 2;
  if (has_identityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->identityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GIdentityLearnAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->setid(), target);
  }
  
  // optional uint32 identityid = 2;
  if (has_identityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->identityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GIdentityLearnAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 setid = 1;
    if (has_setid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setid());
    }
    
    // optional uint32 identityid = 2;
    if (has_identityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GIdentityLearnAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GIdentityLearnAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GIdentityLearnAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GIdentityLearnAsk::MergeFrom(const PBC2GIdentityLearnAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setid()) {
      set_setid(from.setid());
    }
    if (from.has_identityid()) {
      set_identityid(from.identityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GIdentityLearnAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GIdentityLearnAsk::CopyFrom(const PBC2GIdentityLearnAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GIdentityLearnAsk::IsInitialized() const {
  
  return true;
}

void PBC2GIdentityLearnAsk::Swap(PBC2GIdentityLearnAsk* other) {
  if (other != this) {
    std::swap(setid_, other->setid_);
    std::swap(identityid_, other->identityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GIdentityLearnAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GIdentityLearnAsk_descriptor_;
  metadata.reflection = PBC2GIdentityLearnAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CIdentityLearnAck::kSetidFieldNumber;
const int PBG2CIdentityLearnAck::kIdentityidFieldNumber;
#endif  // !_MSC_VER

PBG2CIdentityLearnAck::PBG2CIdentityLearnAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CIdentityLearnAck::InitAsDefaultInstance() {
}

PBG2CIdentityLearnAck::PBG2CIdentityLearnAck(const PBG2CIdentityLearnAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CIdentityLearnAck::SharedCtor() {
  _cached_size_ = 0;
  setid_ = 0u;
  identityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CIdentityLearnAck::~PBG2CIdentityLearnAck() {
  SharedDtor();
}

void PBG2CIdentityLearnAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CIdentityLearnAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CIdentityLearnAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CIdentityLearnAck_descriptor_;
}

const PBG2CIdentityLearnAck& PBG2CIdentityLearnAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CIdentityLearnAck* PBG2CIdentityLearnAck::default_instance_ = NULL;

PBG2CIdentityLearnAck* PBG2CIdentityLearnAck::New() const {
  return new PBG2CIdentityLearnAck;
}

void PBG2CIdentityLearnAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    setid_ = 0u;
    identityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CIdentityLearnAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 setid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setid_)));
          set_has_setid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_identityid;
        break;
      }
      
      // optional uint32 identityid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identityid_)));
          set_has_identityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CIdentityLearnAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->setid(), output);
  }
  
  // optional uint32 identityid = 2;
  if (has_identityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->identityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CIdentityLearnAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->setid(), target);
  }
  
  // optional uint32 identityid = 2;
  if (has_identityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->identityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CIdentityLearnAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 setid = 1;
    if (has_setid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setid());
    }
    
    // optional uint32 identityid = 2;
    if (has_identityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CIdentityLearnAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CIdentityLearnAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CIdentityLearnAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CIdentityLearnAck::MergeFrom(const PBG2CIdentityLearnAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setid()) {
      set_setid(from.setid());
    }
    if (from.has_identityid()) {
      set_identityid(from.identityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CIdentityLearnAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CIdentityLearnAck::CopyFrom(const PBG2CIdentityLearnAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CIdentityLearnAck::IsInitialized() const {
  
  return true;
}

void PBG2CIdentityLearnAck::Swap(PBG2CIdentityLearnAck* other) {
  if (other != this) {
    std::swap(setid_, other->setid_);
    std::swap(identityid_, other->identityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CIdentityLearnAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CIdentityLearnAck_descriptor_;
  metadata.reflection = PBG2CIdentityLearnAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GIdentityResetAsk::kSetidFieldNumber;
#endif  // !_MSC_VER

PBC2GIdentityResetAsk::PBC2GIdentityResetAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GIdentityResetAsk::InitAsDefaultInstance() {
}

PBC2GIdentityResetAsk::PBC2GIdentityResetAsk(const PBC2GIdentityResetAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GIdentityResetAsk::SharedCtor() {
  _cached_size_ = 0;
  setid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GIdentityResetAsk::~PBC2GIdentityResetAsk() {
  SharedDtor();
}

void PBC2GIdentityResetAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GIdentityResetAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GIdentityResetAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GIdentityResetAsk_descriptor_;
}

const PBC2GIdentityResetAsk& PBC2GIdentityResetAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GIdentityResetAsk* PBC2GIdentityResetAsk::default_instance_ = NULL;

PBC2GIdentityResetAsk* PBC2GIdentityResetAsk::New() const {
  return new PBC2GIdentityResetAsk;
}

void PBC2GIdentityResetAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    setid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GIdentityResetAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 setid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setid_)));
          set_has_setid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GIdentityResetAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->setid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GIdentityResetAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->setid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GIdentityResetAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 setid = 1;
    if (has_setid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GIdentityResetAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GIdentityResetAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GIdentityResetAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GIdentityResetAsk::MergeFrom(const PBC2GIdentityResetAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setid()) {
      set_setid(from.setid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GIdentityResetAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GIdentityResetAsk::CopyFrom(const PBC2GIdentityResetAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GIdentityResetAsk::IsInitialized() const {
  
  return true;
}

void PBC2GIdentityResetAsk::Swap(PBC2GIdentityResetAsk* other) {
  if (other != this) {
    std::swap(setid_, other->setid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GIdentityResetAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GIdentityResetAsk_descriptor_;
  metadata.reflection = PBC2GIdentityResetAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CIdentityResetAck::kSetidFieldNumber;
const int PBG2CIdentityResetAck::kResettimeFieldNumber;
#endif  // !_MSC_VER

PBG2CIdentityResetAck::PBG2CIdentityResetAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CIdentityResetAck::InitAsDefaultInstance() {
}

PBG2CIdentityResetAck::PBG2CIdentityResetAck(const PBG2CIdentityResetAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CIdentityResetAck::SharedCtor() {
  _cached_size_ = 0;
  setid_ = 0u;
  resettime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CIdentityResetAck::~PBG2CIdentityResetAck() {
  SharedDtor();
}

void PBG2CIdentityResetAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CIdentityResetAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CIdentityResetAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CIdentityResetAck_descriptor_;
}

const PBG2CIdentityResetAck& PBG2CIdentityResetAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CIdentityResetAck* PBG2CIdentityResetAck::default_instance_ = NULL;

PBG2CIdentityResetAck* PBG2CIdentityResetAck::New() const {
  return new PBG2CIdentityResetAck;
}

void PBG2CIdentityResetAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    setid_ = 0u;
    resettime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CIdentityResetAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 setid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setid_)));
          set_has_setid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resettime;
        break;
      }
      
      // optional uint32 resettime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CIdentityResetAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->setid(), output);
  }
  
  // optional uint32 resettime = 2;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resettime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CIdentityResetAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->setid(), target);
  }
  
  // optional uint32 resettime = 2;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resettime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CIdentityResetAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 setid = 1;
    if (has_setid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setid());
    }
    
    // optional uint32 resettime = 2;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CIdentityResetAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CIdentityResetAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CIdentityResetAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CIdentityResetAck::MergeFrom(const PBG2CIdentityResetAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setid()) {
      set_setid(from.setid());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CIdentityResetAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CIdentityResetAck::CopyFrom(const PBG2CIdentityResetAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CIdentityResetAck::IsInitialized() const {
  
  return true;
}

void PBG2CIdentityResetAck::Swap(PBG2CIdentityResetAck* other) {
  if (other != this) {
    std::swap(setid_, other->setid_);
    std::swap(resettime_, other->resettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CIdentityResetAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CIdentityResetAck_descriptor_;
  metadata.reflection = PBG2CIdentityResetAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GIdentityUpSkillAsk::kSetidFieldNumber;
const int PBC2GIdentityUpSkillAsk::kSkillidFieldNumber;
#endif  // !_MSC_VER

PBC2GIdentityUpSkillAsk::PBC2GIdentityUpSkillAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GIdentityUpSkillAsk::InitAsDefaultInstance() {
}

PBC2GIdentityUpSkillAsk::PBC2GIdentityUpSkillAsk(const PBC2GIdentityUpSkillAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GIdentityUpSkillAsk::SharedCtor() {
  _cached_size_ = 0;
  setid_ = 0u;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GIdentityUpSkillAsk::~PBC2GIdentityUpSkillAsk() {
  SharedDtor();
}

void PBC2GIdentityUpSkillAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GIdentityUpSkillAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GIdentityUpSkillAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GIdentityUpSkillAsk_descriptor_;
}

const PBC2GIdentityUpSkillAsk& PBC2GIdentityUpSkillAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GIdentityUpSkillAsk* PBC2GIdentityUpSkillAsk::default_instance_ = NULL;

PBC2GIdentityUpSkillAsk* PBC2GIdentityUpSkillAsk::New() const {
  return new PBC2GIdentityUpSkillAsk;
}

void PBC2GIdentityUpSkillAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    setid_ = 0u;
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GIdentityUpSkillAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 setid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setid_)));
          set_has_setid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillid;
        break;
      }
      
      // optional uint32 skillid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GIdentityUpSkillAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->setid(), output);
  }
  
  // optional uint32 skillid = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GIdentityUpSkillAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->setid(), target);
  }
  
  // optional uint32 skillid = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GIdentityUpSkillAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 setid = 1;
    if (has_setid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setid());
    }
    
    // optional uint32 skillid = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GIdentityUpSkillAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GIdentityUpSkillAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GIdentityUpSkillAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GIdentityUpSkillAsk::MergeFrom(const PBC2GIdentityUpSkillAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setid()) {
      set_setid(from.setid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GIdentityUpSkillAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GIdentityUpSkillAsk::CopyFrom(const PBC2GIdentityUpSkillAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GIdentityUpSkillAsk::IsInitialized() const {
  
  return true;
}

void PBC2GIdentityUpSkillAsk::Swap(PBC2GIdentityUpSkillAsk* other) {
  if (other != this) {
    std::swap(setid_, other->setid_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GIdentityUpSkillAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GIdentityUpSkillAsk_descriptor_;
  metadata.reflection = PBC2GIdentityUpSkillAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CIdentityUpSkillAck::kSetidFieldNumber;
const int PBG2CIdentityUpSkillAck::kSkillidFieldNumber;
const int PBG2CIdentityUpSkillAck::kSkilllevelFieldNumber;
#endif  // !_MSC_VER

PBG2CIdentityUpSkillAck::PBG2CIdentityUpSkillAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CIdentityUpSkillAck::InitAsDefaultInstance() {
}

PBG2CIdentityUpSkillAck::PBG2CIdentityUpSkillAck(const PBG2CIdentityUpSkillAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CIdentityUpSkillAck::SharedCtor() {
  _cached_size_ = 0;
  setid_ = 0u;
  skillid_ = 0u;
  skilllevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CIdentityUpSkillAck::~PBG2CIdentityUpSkillAck() {
  SharedDtor();
}

void PBG2CIdentityUpSkillAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CIdentityUpSkillAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CIdentityUpSkillAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CIdentityUpSkillAck_descriptor_;
}

const PBG2CIdentityUpSkillAck& PBG2CIdentityUpSkillAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CIdentityUpSkillAck* PBG2CIdentityUpSkillAck::default_instance_ = NULL;

PBG2CIdentityUpSkillAck* PBG2CIdentityUpSkillAck::New() const {
  return new PBG2CIdentityUpSkillAck;
}

void PBG2CIdentityUpSkillAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    setid_ = 0u;
    skillid_ = 0u;
    skilllevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CIdentityUpSkillAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 setid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setid_)));
          set_has_setid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillid;
        break;
      }
      
      // optional uint32 skillid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skilllevel;
        break;
      }
      
      // optional uint32 skilllevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilllevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CIdentityUpSkillAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->setid(), output);
  }
  
  // optional uint32 skillid = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }
  
  // optional uint32 skilllevel = 3;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skilllevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CIdentityUpSkillAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 setid = 1;
  if (has_setid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->setid(), target);
  }
  
  // optional uint32 skillid = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }
  
  // optional uint32 skilllevel = 3;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skilllevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CIdentityUpSkillAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 setid = 1;
    if (has_setid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setid());
    }
    
    // optional uint32 skillid = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 skilllevel = 3;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CIdentityUpSkillAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CIdentityUpSkillAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CIdentityUpSkillAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CIdentityUpSkillAck::MergeFrom(const PBG2CIdentityUpSkillAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setid()) {
      set_setid(from.setid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CIdentityUpSkillAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CIdentityUpSkillAck::CopyFrom(const PBG2CIdentityUpSkillAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CIdentityUpSkillAck::IsInitialized() const {
  
  return true;
}

void PBG2CIdentityUpSkillAck::Swap(PBG2CIdentityUpSkillAck* other) {
  if (other != this) {
    std::swap(setid_, other->setid_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CIdentityUpSkillAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CIdentityUpSkillAck_descriptor_;
  metadata.reflection = PBG2CIdentityUpSkillAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2GWuxueNewAsk::PBC2GWuxueNewAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GWuxueNewAsk::InitAsDefaultInstance() {
}

PBC2GWuxueNewAsk::PBC2GWuxueNewAsk(const PBC2GWuxueNewAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GWuxueNewAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GWuxueNewAsk::~PBC2GWuxueNewAsk() {
  SharedDtor();
}

void PBC2GWuxueNewAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GWuxueNewAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GWuxueNewAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GWuxueNewAsk_descriptor_;
}

const PBC2GWuxueNewAsk& PBC2GWuxueNewAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GWuxueNewAsk* PBC2GWuxueNewAsk::default_instance_ = NULL;

PBC2GWuxueNewAsk* PBC2GWuxueNewAsk::New() const {
  return new PBC2GWuxueNewAsk;
}

void PBC2GWuxueNewAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GWuxueNewAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2GWuxueNewAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GWuxueNewAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GWuxueNewAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GWuxueNewAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GWuxueNewAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GWuxueNewAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GWuxueNewAsk::MergeFrom(const PBC2GWuxueNewAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GWuxueNewAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GWuxueNewAsk::CopyFrom(const PBC2GWuxueNewAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GWuxueNewAsk::IsInitialized() const {
  
  return true;
}

void PBC2GWuxueNewAsk::Swap(PBC2GWuxueNewAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GWuxueNewAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GWuxueNewAsk_descriptor_;
  metadata.reflection = PBC2GWuxueNewAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CWuxueNewAck::kNameidFieldNumber;
#endif  // !_MSC_VER

PBG2CWuxueNewAck::PBG2CWuxueNewAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CWuxueNewAck::InitAsDefaultInstance() {
}

PBG2CWuxueNewAck::PBG2CWuxueNewAck(const PBG2CWuxueNewAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CWuxueNewAck::SharedCtor() {
  _cached_size_ = 0;
  nameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CWuxueNewAck::~PBG2CWuxueNewAck() {
  SharedDtor();
}

void PBG2CWuxueNewAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CWuxueNewAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CWuxueNewAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CWuxueNewAck_descriptor_;
}

const PBG2CWuxueNewAck& PBG2CWuxueNewAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CWuxueNewAck* PBG2CWuxueNewAck::default_instance_ = NULL;

PBG2CWuxueNewAck* PBG2CWuxueNewAck::New() const {
  return new PBG2CWuxueNewAck;
}

void PBG2CWuxueNewAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nameid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CWuxueNewAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nameid_)));
          set_has_nameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CWuxueNewAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nameid = 1;
  if (has_nameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CWuxueNewAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nameid = 1;
  if (has_nameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CWuxueNewAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nameid = 1;
    if (has_nameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CWuxueNewAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CWuxueNewAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CWuxueNewAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CWuxueNewAck::MergeFrom(const PBG2CWuxueNewAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nameid()) {
      set_nameid(from.nameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CWuxueNewAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CWuxueNewAck::CopyFrom(const PBG2CWuxueNewAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CWuxueNewAck::IsInitialized() const {
  
  return true;
}

void PBG2CWuxueNewAck::Swap(PBG2CWuxueNewAck* other) {
  if (other != this) {
    std::swap(nameid_, other->nameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CWuxueNewAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CWuxueNewAck_descriptor_;
  metadata.reflection = PBG2CWuxueNewAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GWuxueDelAsk::kSchemenumFieldNumber;
#endif  // !_MSC_VER

PBC2GWuxueDelAsk::PBC2GWuxueDelAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GWuxueDelAsk::InitAsDefaultInstance() {
}

PBC2GWuxueDelAsk::PBC2GWuxueDelAsk(const PBC2GWuxueDelAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GWuxueDelAsk::SharedCtor() {
  _cached_size_ = 0;
  schemenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GWuxueDelAsk::~PBC2GWuxueDelAsk() {
  SharedDtor();
}

void PBC2GWuxueDelAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GWuxueDelAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GWuxueDelAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GWuxueDelAsk_descriptor_;
}

const PBC2GWuxueDelAsk& PBC2GWuxueDelAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GWuxueDelAsk* PBC2GWuxueDelAsk::default_instance_ = NULL;

PBC2GWuxueDelAsk* PBC2GWuxueDelAsk::New() const {
  return new PBC2GWuxueDelAsk;
}

void PBC2GWuxueDelAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GWuxueDelAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemenum_)));
          set_has_schemenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GWuxueDelAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemenum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GWuxueDelAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemenum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GWuxueDelAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemenum = 1;
    if (has_schemenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemenum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GWuxueDelAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GWuxueDelAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GWuxueDelAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GWuxueDelAsk::MergeFrom(const PBC2GWuxueDelAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemenum()) {
      set_schemenum(from.schemenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GWuxueDelAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GWuxueDelAsk::CopyFrom(const PBC2GWuxueDelAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GWuxueDelAsk::IsInitialized() const {
  
  return true;
}

void PBC2GWuxueDelAsk::Swap(PBC2GWuxueDelAsk* other) {
  if (other != this) {
    std::swap(schemenum_, other->schemenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GWuxueDelAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GWuxueDelAsk_descriptor_;
  metadata.reflection = PBC2GWuxueDelAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CWuxueDelAck::kSchemenumFieldNumber;
#endif  // !_MSC_VER

PBG2CWuxueDelAck::PBG2CWuxueDelAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CWuxueDelAck::InitAsDefaultInstance() {
}

PBG2CWuxueDelAck::PBG2CWuxueDelAck(const PBG2CWuxueDelAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CWuxueDelAck::SharedCtor() {
  _cached_size_ = 0;
  schemenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CWuxueDelAck::~PBG2CWuxueDelAck() {
  SharedDtor();
}

void PBG2CWuxueDelAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CWuxueDelAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CWuxueDelAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CWuxueDelAck_descriptor_;
}

const PBG2CWuxueDelAck& PBG2CWuxueDelAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CWuxueDelAck* PBG2CWuxueDelAck::default_instance_ = NULL;

PBG2CWuxueDelAck* PBG2CWuxueDelAck::New() const {
  return new PBG2CWuxueDelAck;
}

void PBG2CWuxueDelAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CWuxueDelAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemenum_)));
          set_has_schemenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CWuxueDelAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemenum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CWuxueDelAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemenum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CWuxueDelAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemenum = 1;
    if (has_schemenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemenum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CWuxueDelAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CWuxueDelAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CWuxueDelAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CWuxueDelAck::MergeFrom(const PBG2CWuxueDelAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemenum()) {
      set_schemenum(from.schemenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CWuxueDelAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CWuxueDelAck::CopyFrom(const PBG2CWuxueDelAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CWuxueDelAck::IsInitialized() const {
  
  return true;
}

void PBG2CWuxueDelAck::Swap(PBG2CWuxueDelAck* other) {
  if (other != this) {
    std::swap(schemenum_, other->schemenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CWuxueDelAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CWuxueDelAck_descriptor_;
  metadata.reflection = PBG2CWuxueDelAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2GWuxueChangeAsk::PBC2GWuxueChangeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GWuxueChangeAsk::InitAsDefaultInstance() {
}

PBC2GWuxueChangeAsk::PBC2GWuxueChangeAsk(const PBC2GWuxueChangeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GWuxueChangeAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GWuxueChangeAsk::~PBC2GWuxueChangeAsk() {
  SharedDtor();
}

void PBC2GWuxueChangeAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GWuxueChangeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GWuxueChangeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GWuxueChangeAsk_descriptor_;
}

const PBC2GWuxueChangeAsk& PBC2GWuxueChangeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GWuxueChangeAsk* PBC2GWuxueChangeAsk::default_instance_ = NULL;

PBC2GWuxueChangeAsk* PBC2GWuxueChangeAsk::New() const {
  return new PBC2GWuxueChangeAsk;
}

void PBC2GWuxueChangeAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GWuxueChangeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2GWuxueChangeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GWuxueChangeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GWuxueChangeAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GWuxueChangeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GWuxueChangeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GWuxueChangeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GWuxueChangeAsk::MergeFrom(const PBC2GWuxueChangeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GWuxueChangeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GWuxueChangeAsk::CopyFrom(const PBC2GWuxueChangeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GWuxueChangeAsk::IsInitialized() const {
  
  return true;
}

void PBC2GWuxueChangeAsk::Swap(PBC2GWuxueChangeAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GWuxueChangeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GWuxueChangeAsk_descriptor_;
  metadata.reflection = PBC2GWuxueChangeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CWuxueChangeAck::kSchemenumFieldNumber;
#endif  // !_MSC_VER

PBG2CWuxueChangeAck::PBG2CWuxueChangeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CWuxueChangeAck::InitAsDefaultInstance() {
}

PBG2CWuxueChangeAck::PBG2CWuxueChangeAck(const PBG2CWuxueChangeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CWuxueChangeAck::SharedCtor() {
  _cached_size_ = 0;
  schemenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CWuxueChangeAck::~PBG2CWuxueChangeAck() {
  SharedDtor();
}

void PBG2CWuxueChangeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CWuxueChangeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CWuxueChangeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CWuxueChangeAck_descriptor_;
}

const PBG2CWuxueChangeAck& PBG2CWuxueChangeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CWuxueChangeAck* PBG2CWuxueChangeAck::default_instance_ = NULL;

PBG2CWuxueChangeAck* PBG2CWuxueChangeAck::New() const {
  return new PBG2CWuxueChangeAck;
}

void PBG2CWuxueChangeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CWuxueChangeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemenum_)));
          set_has_schemenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CWuxueChangeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemenum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CWuxueChangeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemenum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CWuxueChangeAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemenum = 1;
    if (has_schemenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemenum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CWuxueChangeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CWuxueChangeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CWuxueChangeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CWuxueChangeAck::MergeFrom(const PBG2CWuxueChangeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemenum()) {
      set_schemenum(from.schemenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CWuxueChangeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CWuxueChangeAck::CopyFrom(const PBG2CWuxueChangeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CWuxueChangeAck::IsInitialized() const {
  
  return true;
}

void PBG2CWuxueChangeAck::Swap(PBG2CWuxueChangeAck* other) {
  if (other != this) {
    std::swap(schemenum_, other->schemenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CWuxueChangeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CWuxueChangeAck_descriptor_;
  metadata.reflection = PBG2CWuxueChangeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GWuxueSetSkillAsk::kSchemenumFieldNumber;
const int PBC2GWuxueSetSkillAsk::kSkillindexFieldNumber;
const int PBC2GWuxueSetSkillAsk::kSkillidFieldNumber;
#endif  // !_MSC_VER

PBC2GWuxueSetSkillAsk::PBC2GWuxueSetSkillAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GWuxueSetSkillAsk::InitAsDefaultInstance() {
}

PBC2GWuxueSetSkillAsk::PBC2GWuxueSetSkillAsk(const PBC2GWuxueSetSkillAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GWuxueSetSkillAsk::SharedCtor() {
  _cached_size_ = 0;
  schemenum_ = 0u;
  skillindex_ = 0u;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GWuxueSetSkillAsk::~PBC2GWuxueSetSkillAsk() {
  SharedDtor();
}

void PBC2GWuxueSetSkillAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GWuxueSetSkillAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GWuxueSetSkillAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GWuxueSetSkillAsk_descriptor_;
}

const PBC2GWuxueSetSkillAsk& PBC2GWuxueSetSkillAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GWuxueSetSkillAsk* PBC2GWuxueSetSkillAsk::default_instance_ = NULL;

PBC2GWuxueSetSkillAsk* PBC2GWuxueSetSkillAsk::New() const {
  return new PBC2GWuxueSetSkillAsk;
}

void PBC2GWuxueSetSkillAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemenum_ = 0u;
    skillindex_ = 0u;
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GWuxueSetSkillAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemenum_)));
          set_has_schemenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillindex;
        break;
      }
      
      // optional uint32 skillindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillindex_)));
          set_has_skillindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }
      
      // optional uint32 skillid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GWuxueSetSkillAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemenum(), output);
  }
  
  // optional uint32 skillindex = 2;
  if (has_skillindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillindex(), output);
  }
  
  // optional uint32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GWuxueSetSkillAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemenum(), target);
  }
  
  // optional uint32 skillindex = 2;
  if (has_skillindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillindex(), target);
  }
  
  // optional uint32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GWuxueSetSkillAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemenum = 1;
    if (has_schemenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemenum());
    }
    
    // optional uint32 skillindex = 2;
    if (has_skillindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillindex());
    }
    
    // optional uint32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GWuxueSetSkillAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GWuxueSetSkillAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GWuxueSetSkillAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GWuxueSetSkillAsk::MergeFrom(const PBC2GWuxueSetSkillAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemenum()) {
      set_schemenum(from.schemenum());
    }
    if (from.has_skillindex()) {
      set_skillindex(from.skillindex());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GWuxueSetSkillAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GWuxueSetSkillAsk::CopyFrom(const PBC2GWuxueSetSkillAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GWuxueSetSkillAsk::IsInitialized() const {
  
  return true;
}

void PBC2GWuxueSetSkillAsk::Swap(PBC2GWuxueSetSkillAsk* other) {
  if (other != this) {
    std::swap(schemenum_, other->schemenum_);
    std::swap(skillindex_, other->skillindex_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GWuxueSetSkillAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GWuxueSetSkillAsk_descriptor_;
  metadata.reflection = PBC2GWuxueSetSkillAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CWuxueSetSkillAck::kSchemenumFieldNumber;
const int PBG2CWuxueSetSkillAck::kSkillindexFieldNumber;
const int PBG2CWuxueSetSkillAck::kSkillidFieldNumber;
#endif  // !_MSC_VER

PBG2CWuxueSetSkillAck::PBG2CWuxueSetSkillAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CWuxueSetSkillAck::InitAsDefaultInstance() {
}

PBG2CWuxueSetSkillAck::PBG2CWuxueSetSkillAck(const PBG2CWuxueSetSkillAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CWuxueSetSkillAck::SharedCtor() {
  _cached_size_ = 0;
  schemenum_ = 0u;
  skillindex_ = 0u;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CWuxueSetSkillAck::~PBG2CWuxueSetSkillAck() {
  SharedDtor();
}

void PBG2CWuxueSetSkillAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CWuxueSetSkillAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CWuxueSetSkillAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CWuxueSetSkillAck_descriptor_;
}

const PBG2CWuxueSetSkillAck& PBG2CWuxueSetSkillAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CWuxueSetSkillAck* PBG2CWuxueSetSkillAck::default_instance_ = NULL;

PBG2CWuxueSetSkillAck* PBG2CWuxueSetSkillAck::New() const {
  return new PBG2CWuxueSetSkillAck;
}

void PBG2CWuxueSetSkillAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemenum_ = 0u;
    skillindex_ = 0u;
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CWuxueSetSkillAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemenum_)));
          set_has_schemenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillindex;
        break;
      }
      
      // optional uint32 skillindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillindex_)));
          set_has_skillindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }
      
      // optional uint32 skillid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CWuxueSetSkillAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemenum(), output);
  }
  
  // optional uint32 skillindex = 2;
  if (has_skillindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillindex(), output);
  }
  
  // optional uint32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CWuxueSetSkillAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemenum(), target);
  }
  
  // optional uint32 skillindex = 2;
  if (has_skillindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillindex(), target);
  }
  
  // optional uint32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CWuxueSetSkillAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemenum = 1;
    if (has_schemenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemenum());
    }
    
    // optional uint32 skillindex = 2;
    if (has_skillindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillindex());
    }
    
    // optional uint32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CWuxueSetSkillAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CWuxueSetSkillAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CWuxueSetSkillAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CWuxueSetSkillAck::MergeFrom(const PBG2CWuxueSetSkillAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemenum()) {
      set_schemenum(from.schemenum());
    }
    if (from.has_skillindex()) {
      set_skillindex(from.skillindex());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CWuxueSetSkillAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CWuxueSetSkillAck::CopyFrom(const PBG2CWuxueSetSkillAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CWuxueSetSkillAck::IsInitialized() const {
  
  return true;
}

void PBG2CWuxueSetSkillAck::Swap(PBG2CWuxueSetSkillAck* other) {
  if (other != this) {
    std::swap(schemenum_, other->schemenum_);
    std::swap(skillindex_, other->skillindex_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CWuxueSetSkillAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CWuxueSetSkillAck_descriptor_;
  metadata.reflection = PBG2CWuxueSetSkillAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GWuxueSetAllSkillAsk::kSchemenumFieldNumber;
const int PBC2GWuxueSetAllSkillAsk::kSkilldataFieldNumber;
#endif  // !_MSC_VER

PBC2GWuxueSetAllSkillAsk::PBC2GWuxueSetAllSkillAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GWuxueSetAllSkillAsk::InitAsDefaultInstance() {
}

PBC2GWuxueSetAllSkillAsk::PBC2GWuxueSetAllSkillAsk(const PBC2GWuxueSetAllSkillAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GWuxueSetAllSkillAsk::SharedCtor() {
  _cached_size_ = 0;
  schemenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GWuxueSetAllSkillAsk::~PBC2GWuxueSetAllSkillAsk() {
  SharedDtor();
}

void PBC2GWuxueSetAllSkillAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GWuxueSetAllSkillAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GWuxueSetAllSkillAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GWuxueSetAllSkillAsk_descriptor_;
}

const PBC2GWuxueSetAllSkillAsk& PBC2GWuxueSetAllSkillAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GWuxueSetAllSkillAsk* PBC2GWuxueSetAllSkillAsk::default_instance_ = NULL;

PBC2GWuxueSetAllSkillAsk* PBC2GWuxueSetAllSkillAsk::New() const {
  return new PBC2GWuxueSetAllSkillAsk;
}

void PBC2GWuxueSetAllSkillAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemenum_ = 0u;
  }
  skilldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GWuxueSetAllSkillAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemenum_)));
          set_has_schemenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skilldata;
        break;
      }
      
      // repeated .PBWuxueSetSkillData skilldata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skilldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skilldata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GWuxueSetAllSkillAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemenum(), output);
  }
  
  // repeated .PBWuxueSetSkillData skilldata = 2;
  for (int i = 0; i < this->skilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skilldata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GWuxueSetAllSkillAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemenum(), target);
  }
  
  // repeated .PBWuxueSetSkillData skilldata = 2;
  for (int i = 0; i < this->skilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skilldata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GWuxueSetAllSkillAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemenum = 1;
    if (has_schemenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemenum());
    }
    
  }
  // repeated .PBWuxueSetSkillData skilldata = 2;
  total_size += 1 * this->skilldata_size();
  for (int i = 0; i < this->skilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GWuxueSetAllSkillAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GWuxueSetAllSkillAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GWuxueSetAllSkillAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GWuxueSetAllSkillAsk::MergeFrom(const PBC2GWuxueSetAllSkillAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldata_.MergeFrom(from.skilldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemenum()) {
      set_schemenum(from.schemenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GWuxueSetAllSkillAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GWuxueSetAllSkillAsk::CopyFrom(const PBC2GWuxueSetAllSkillAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GWuxueSetAllSkillAsk::IsInitialized() const {
  
  return true;
}

void PBC2GWuxueSetAllSkillAsk::Swap(PBC2GWuxueSetAllSkillAsk* other) {
  if (other != this) {
    std::swap(schemenum_, other->schemenum_);
    skilldata_.Swap(&other->skilldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GWuxueSetAllSkillAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GWuxueSetAllSkillAsk_descriptor_;
  metadata.reflection = PBC2GWuxueSetAllSkillAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CWuxueSetAllSkillAck::kSchemenumFieldNumber;
const int PBG2CWuxueSetAllSkillAck::kSkilldataFieldNumber;
#endif  // !_MSC_VER

PBG2CWuxueSetAllSkillAck::PBG2CWuxueSetAllSkillAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CWuxueSetAllSkillAck::InitAsDefaultInstance() {
}

PBG2CWuxueSetAllSkillAck::PBG2CWuxueSetAllSkillAck(const PBG2CWuxueSetAllSkillAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CWuxueSetAllSkillAck::SharedCtor() {
  _cached_size_ = 0;
  schemenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CWuxueSetAllSkillAck::~PBG2CWuxueSetAllSkillAck() {
  SharedDtor();
}

void PBG2CWuxueSetAllSkillAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CWuxueSetAllSkillAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CWuxueSetAllSkillAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CWuxueSetAllSkillAck_descriptor_;
}

const PBG2CWuxueSetAllSkillAck& PBG2CWuxueSetAllSkillAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CWuxueSetAllSkillAck* PBG2CWuxueSetAllSkillAck::default_instance_ = NULL;

PBG2CWuxueSetAllSkillAck* PBG2CWuxueSetAllSkillAck::New() const {
  return new PBG2CWuxueSetAllSkillAck;
}

void PBG2CWuxueSetAllSkillAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemenum_ = 0u;
  }
  skilldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CWuxueSetAllSkillAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemenum_)));
          set_has_schemenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skilldata;
        break;
      }
      
      // repeated .PBWuxueSetSkillData skilldata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skilldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skilldata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CWuxueSetAllSkillAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemenum(), output);
  }
  
  // repeated .PBWuxueSetSkillData skilldata = 2;
  for (int i = 0; i < this->skilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skilldata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CWuxueSetAllSkillAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemenum(), target);
  }
  
  // repeated .PBWuxueSetSkillData skilldata = 2;
  for (int i = 0; i < this->skilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skilldata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CWuxueSetAllSkillAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemenum = 1;
    if (has_schemenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemenum());
    }
    
  }
  // repeated .PBWuxueSetSkillData skilldata = 2;
  total_size += 1 * this->skilldata_size();
  for (int i = 0; i < this->skilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CWuxueSetAllSkillAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CWuxueSetAllSkillAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CWuxueSetAllSkillAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CWuxueSetAllSkillAck::MergeFrom(const PBG2CWuxueSetAllSkillAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldata_.MergeFrom(from.skilldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemenum()) {
      set_schemenum(from.schemenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CWuxueSetAllSkillAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CWuxueSetAllSkillAck::CopyFrom(const PBG2CWuxueSetAllSkillAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CWuxueSetAllSkillAck::IsInitialized() const {
  
  return true;
}

void PBG2CWuxueSetAllSkillAck::Swap(PBG2CWuxueSetAllSkillAck* other) {
  if (other != this) {
    std::swap(schemenum_, other->schemenum_);
    skilldata_.Swap(&other->skilldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CWuxueSetAllSkillAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CWuxueSetAllSkillAck_descriptor_;
  metadata.reflection = PBG2CWuxueSetAllSkillAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GWuxueLearnSkillAsk::kSchemenumFieldNumber;
const int PBC2GWuxueLearnSkillAsk::kPageFieldNumber;
const int PBC2GWuxueLearnSkillAsk::kIndexFieldNumber;
const int PBC2GWuxueLearnSkillAsk::kNewskillidFieldNumber;
#endif  // !_MSC_VER

PBC2GWuxueLearnSkillAsk::PBC2GWuxueLearnSkillAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GWuxueLearnSkillAsk::InitAsDefaultInstance() {
}

PBC2GWuxueLearnSkillAsk::PBC2GWuxueLearnSkillAsk(const PBC2GWuxueLearnSkillAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GWuxueLearnSkillAsk::SharedCtor() {
  _cached_size_ = 0;
  schemenum_ = 0u;
  page_ = 0u;
  index_ = 0u;
  newskillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GWuxueLearnSkillAsk::~PBC2GWuxueLearnSkillAsk() {
  SharedDtor();
}

void PBC2GWuxueLearnSkillAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GWuxueLearnSkillAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GWuxueLearnSkillAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GWuxueLearnSkillAsk_descriptor_;
}

const PBC2GWuxueLearnSkillAsk& PBC2GWuxueLearnSkillAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GWuxueLearnSkillAsk* PBC2GWuxueLearnSkillAsk::default_instance_ = NULL;

PBC2GWuxueLearnSkillAsk* PBC2GWuxueLearnSkillAsk::New() const {
  return new PBC2GWuxueLearnSkillAsk;
}

void PBC2GWuxueLearnSkillAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemenum_ = 0u;
    page_ = 0u;
    index_ = 0u;
    newskillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GWuxueLearnSkillAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemenum_)));
          set_has_schemenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page;
        break;
      }
      
      // optional uint32 page = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newskillid;
        break;
      }
      
      // optional uint32 newskillid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newskillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newskillid_)));
          set_has_newskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GWuxueLearnSkillAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemenum(), output);
  }
  
  // optional uint32 page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page(), output);
  }
  
  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }
  
  // optional uint32 newskillid = 4;
  if (has_newskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newskillid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GWuxueLearnSkillAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemenum(), target);
  }
  
  // optional uint32 page = 2;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->page(), target);
  }
  
  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }
  
  // optional uint32 newskillid = 4;
  if (has_newskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->newskillid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GWuxueLearnSkillAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemenum = 1;
    if (has_schemenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemenum());
    }
    
    // optional uint32 page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }
    
    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // optional uint32 newskillid = 4;
    if (has_newskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newskillid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GWuxueLearnSkillAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GWuxueLearnSkillAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GWuxueLearnSkillAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GWuxueLearnSkillAsk::MergeFrom(const PBC2GWuxueLearnSkillAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemenum()) {
      set_schemenum(from.schemenum());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_newskillid()) {
      set_newskillid(from.newskillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GWuxueLearnSkillAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GWuxueLearnSkillAsk::CopyFrom(const PBC2GWuxueLearnSkillAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GWuxueLearnSkillAsk::IsInitialized() const {
  
  return true;
}

void PBC2GWuxueLearnSkillAsk::Swap(PBC2GWuxueLearnSkillAsk* other) {
  if (other != this) {
    std::swap(schemenum_, other->schemenum_);
    std::swap(page_, other->page_);
    std::swap(index_, other->index_);
    std::swap(newskillid_, other->newskillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GWuxueLearnSkillAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GWuxueLearnSkillAsk_descriptor_;
  metadata.reflection = PBC2GWuxueLearnSkillAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CWuxueLearnSkillAck::kSchemenumFieldNumber;
const int PBG2CWuxueLearnSkillAck::kPageFieldNumber;
const int PBG2CWuxueLearnSkillAck::kIndexFieldNumber;
const int PBG2CWuxueLearnSkillAck::kNewskillidFieldNumber;
#endif  // !_MSC_VER

PBG2CWuxueLearnSkillAck::PBG2CWuxueLearnSkillAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CWuxueLearnSkillAck::InitAsDefaultInstance() {
}

PBG2CWuxueLearnSkillAck::PBG2CWuxueLearnSkillAck(const PBG2CWuxueLearnSkillAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CWuxueLearnSkillAck::SharedCtor() {
  _cached_size_ = 0;
  schemenum_ = 0u;
  page_ = 0u;
  index_ = 0u;
  newskillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CWuxueLearnSkillAck::~PBG2CWuxueLearnSkillAck() {
  SharedDtor();
}

void PBG2CWuxueLearnSkillAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CWuxueLearnSkillAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CWuxueLearnSkillAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CWuxueLearnSkillAck_descriptor_;
}

const PBG2CWuxueLearnSkillAck& PBG2CWuxueLearnSkillAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CWuxueLearnSkillAck* PBG2CWuxueLearnSkillAck::default_instance_ = NULL;

PBG2CWuxueLearnSkillAck* PBG2CWuxueLearnSkillAck::New() const {
  return new PBG2CWuxueLearnSkillAck;
}

void PBG2CWuxueLearnSkillAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    schemenum_ = 0u;
    page_ = 0u;
    index_ = 0u;
    newskillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CWuxueLearnSkillAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schemenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemenum_)));
          set_has_schemenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page;
        break;
      }
      
      // optional uint32 page = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newskillid;
        break;
      }
      
      // optional uint32 newskillid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newskillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newskillid_)));
          set_has_newskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CWuxueLearnSkillAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemenum(), output);
  }
  
  // optional uint32 page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page(), output);
  }
  
  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }
  
  // optional uint32 newskillid = 4;
  if (has_newskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newskillid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CWuxueLearnSkillAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 schemenum = 1;
  if (has_schemenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemenum(), target);
  }
  
  // optional uint32 page = 2;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->page(), target);
  }
  
  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }
  
  // optional uint32 newskillid = 4;
  if (has_newskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->newskillid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CWuxueLearnSkillAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 schemenum = 1;
    if (has_schemenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemenum());
    }
    
    // optional uint32 page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }
    
    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // optional uint32 newskillid = 4;
    if (has_newskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newskillid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CWuxueLearnSkillAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CWuxueLearnSkillAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CWuxueLearnSkillAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CWuxueLearnSkillAck::MergeFrom(const PBG2CWuxueLearnSkillAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemenum()) {
      set_schemenum(from.schemenum());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_newskillid()) {
      set_newskillid(from.newskillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CWuxueLearnSkillAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CWuxueLearnSkillAck::CopyFrom(const PBG2CWuxueLearnSkillAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CWuxueLearnSkillAck::IsInitialized() const {
  
  return true;
}

void PBG2CWuxueLearnSkillAck::Swap(PBG2CWuxueLearnSkillAck* other) {
  if (other != this) {
    std::swap(schemenum_, other->schemenum_);
    std::swap(page_, other->page_);
    std::swap(index_, other->index_);
    std::swap(newskillid_, other->newskillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CWuxueLearnSkillAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CWuxueLearnSkillAck_descriptor_;
  metadata.reflection = PBG2CWuxueLearnSkillAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCommon_SearchPlayer::kClientparam1FieldNumber;
const int PBC2GCommon_SearchPlayer::kNameFieldNumber;
#endif  // !_MSC_VER

PBC2GCommon_SearchPlayer::PBC2GCommon_SearchPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommon_SearchPlayer::InitAsDefaultInstance() {
}

PBC2GCommon_SearchPlayer::PBC2GCommon_SearchPlayer(const PBC2GCommon_SearchPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommon_SearchPlayer::SharedCtor() {
  _cached_size_ = 0;
  clientparam1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommon_SearchPlayer::~PBC2GCommon_SearchPlayer() {
  SharedDtor();
}

void PBC2GCommon_SearchPlayer::SharedDtor() {
  if (clientparam1_ != &::google::protobuf::internal::kEmptyString) {
    delete clientparam1_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBC2GCommon_SearchPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommon_SearchPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommon_SearchPlayer_descriptor_;
}

const PBC2GCommon_SearchPlayer& PBC2GCommon_SearchPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommon_SearchPlayer* PBC2GCommon_SearchPlayer::default_instance_ = NULL;

PBC2GCommon_SearchPlayer* PBC2GCommon_SearchPlayer::New() const {
  return new PBC2GCommon_SearchPlayer;
}

void PBC2GCommon_SearchPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientparam1()) {
      if (clientparam1_ != &::google::protobuf::internal::kEmptyString) {
        clientparam1_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommon_SearchPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clientparam1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientparam1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientparam1().data(), this->clientparam1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCommon_SearchPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string clientparam1 = 1;
  if (has_clientparam1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientparam1().data(), this->clientparam1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clientparam1(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommon_SearchPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string clientparam1 = 1;
  if (has_clientparam1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientparam1().data(), this->clientparam1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientparam1(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommon_SearchPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string clientparam1 = 1;
    if (has_clientparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientparam1());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommon_SearchPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommon_SearchPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommon_SearchPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommon_SearchPlayer::MergeFrom(const PBC2GCommon_SearchPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientparam1()) {
      set_clientparam1(from.clientparam1());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommon_SearchPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommon_SearchPlayer::CopyFrom(const PBC2GCommon_SearchPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommon_SearchPlayer::IsInitialized() const {
  
  return true;
}

void PBC2GCommon_SearchPlayer::Swap(PBC2GCommon_SearchPlayer* other) {
  if (other != this) {
    std::swap(clientparam1_, other->clientparam1_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommon_SearchPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommon_SearchPlayer_descriptor_;
  metadata.reflection = PBC2GCommon_SearchPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommon_SearchPlayer::kMsgFieldNumber;
const int PBG2CCommon_SearchPlayer::kPlayerdisplayFieldNumber;
#endif  // !_MSC_VER

PBG2CCommon_SearchPlayer::PBG2CCommon_SearchPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_SearchPlayer::InitAsDefaultInstance() {
  msg_ = const_cast< ::PBC2GCommon_SearchPlayer*>(&::PBC2GCommon_SearchPlayer::default_instance());
  playerdisplay_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBG2CCommon_SearchPlayer::PBG2CCommon_SearchPlayer(const PBG2CCommon_SearchPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_SearchPlayer::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  playerdisplay_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_SearchPlayer::~PBG2CCommon_SearchPlayer() {
  SharedDtor();
}

void PBG2CCommon_SearchPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
    delete playerdisplay_;
  }
}

void PBG2CCommon_SearchPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_SearchPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_SearchPlayer_descriptor_;
}

const PBG2CCommon_SearchPlayer& PBG2CCommon_SearchPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_SearchPlayer* PBG2CCommon_SearchPlayer::default_instance_ = NULL;

PBG2CCommon_SearchPlayer* PBG2CCommon_SearchPlayer::New() const {
  return new PBG2CCommon_SearchPlayer;
}

void PBG2CCommon_SearchPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::PBC2GCommon_SearchPlayer::Clear();
    }
    if (has_playerdisplay()) {
      if (playerdisplay_ != NULL) playerdisplay_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_SearchPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBC2GCommon_SearchPlayer msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerdisplay;
        break;
      }
      
      // optional .PBPlayerDisplay playerdisplay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerdisplay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdisplay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommon_SearchPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBC2GCommon_SearchPlayer msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }
  
  // optional .PBPlayerDisplay playerdisplay = 2;
  if (has_playerdisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerdisplay(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_SearchPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBC2GCommon_SearchPlayer msg = 1;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }
  
  // optional .PBPlayerDisplay playerdisplay = 2;
  if (has_playerdisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerdisplay(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_SearchPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBC2GCommon_SearchPlayer msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
    // optional .PBPlayerDisplay playerdisplay = 2;
    if (has_playerdisplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdisplay());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_SearchPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_SearchPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_SearchPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_SearchPlayer::MergeFrom(const PBG2CCommon_SearchPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::PBC2GCommon_SearchPlayer::MergeFrom(from.msg());
    }
    if (from.has_playerdisplay()) {
      mutable_playerdisplay()->::PBPlayerDisplay::MergeFrom(from.playerdisplay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_SearchPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_SearchPlayer::CopyFrom(const PBG2CCommon_SearchPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_SearchPlayer::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_SearchPlayer::Swap(PBG2CCommon_SearchPlayer* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(playerdisplay_, other->playerdisplay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_SearchPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_SearchPlayer_descriptor_;
  metadata.reflection = PBG2CCommon_SearchPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommon_MonsterTalk::kUnitidFieldNumber;
const int PBG2CCommon_MonsterTalk::kMonsteridFieldNumber;
const int PBG2CCommon_MonsterTalk::kPosxFieldNumber;
const int PBG2CCommon_MonsterTalk::kPosyFieldNumber;
const int PBG2CCommon_MonsterTalk::kTalkidFieldNumber;
#endif  // !_MSC_VER

PBG2CCommon_MonsterTalk::PBG2CCommon_MonsterTalk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_MonsterTalk::InitAsDefaultInstance() {
}

PBG2CCommon_MonsterTalk::PBG2CCommon_MonsterTalk(const PBG2CCommon_MonsterTalk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_MonsterTalk::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = 0u;
  monsterid_ = 0u;
  posx_ = 0;
  posy_ = 0;
  talkid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_MonsterTalk::~PBG2CCommon_MonsterTalk() {
  SharedDtor();
}

void PBG2CCommon_MonsterTalk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_MonsterTalk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_MonsterTalk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_MonsterTalk_descriptor_;
}

const PBG2CCommon_MonsterTalk& PBG2CCommon_MonsterTalk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_MonsterTalk* PBG2CCommon_MonsterTalk::default_instance_ = NULL;

PBG2CCommon_MonsterTalk* PBG2CCommon_MonsterTalk::New() const {
  return new PBG2CCommon_MonsterTalk;
}

void PBG2CCommon_MonsterTalk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unitid_ = 0u;
    monsterid_ = 0u;
    posx_ = 0;
    posy_ = 0;
    talkid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_MonsterTalk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monsterid;
        break;
      }
      
      // optional uint32 monsterid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_posx;
        break;
      }
      
      // optional float posx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posy;
        break;
      }
      
      // optional float posy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_talkid;
        break;
      }
      
      // optional uint32 talkid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talkid_)));
          set_has_talkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommon_MonsterTalk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unitid(), output);
  }
  
  // optional uint32 monsterid = 2;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monsterid(), output);
  }
  
  // optional float posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posx(), output);
  }
  
  // optional float posy = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posy(), output);
  }
  
  // optional uint32 talkid = 5;
  if (has_talkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->talkid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_MonsterTalk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unitid(), target);
  }
  
  // optional uint32 monsterid = 2;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->monsterid(), target);
  }
  
  // optional float posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posx(), target);
  }
  
  // optional float posy = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posy(), target);
  }
  
  // optional uint32 talkid = 5;
  if (has_talkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->talkid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_MonsterTalk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unitid = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
    // optional uint32 monsterid = 2;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }
    
    // optional float posx = 3;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
    // optional float posy = 4;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 talkid = 5;
    if (has_talkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talkid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_MonsterTalk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_MonsterTalk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_MonsterTalk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_MonsterTalk::MergeFrom(const PBG2CCommon_MonsterTalk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_talkid()) {
      set_talkid(from.talkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_MonsterTalk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_MonsterTalk::CopyFrom(const PBG2CCommon_MonsterTalk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_MonsterTalk::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_MonsterTalk::Swap(PBG2CCommon_MonsterTalk* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(talkid_, other->talkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_MonsterTalk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_MonsterTalk_descriptor_;
  metadata.reflection = PBG2CCommon_MonsterTalk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CCommon_BeFindNotice::PBG2CCommon_BeFindNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_BeFindNotice::InitAsDefaultInstance() {
}

PBG2CCommon_BeFindNotice::PBG2CCommon_BeFindNotice(const PBG2CCommon_BeFindNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_BeFindNotice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_BeFindNotice::~PBG2CCommon_BeFindNotice() {
  SharedDtor();
}

void PBG2CCommon_BeFindNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_BeFindNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_BeFindNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_BeFindNotice_descriptor_;
}

const PBG2CCommon_BeFindNotice& PBG2CCommon_BeFindNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_BeFindNotice* PBG2CCommon_BeFindNotice::default_instance_ = NULL;

PBG2CCommon_BeFindNotice* PBG2CCommon_BeFindNotice::New() const {
  return new PBG2CCommon_BeFindNotice;
}

void PBG2CCommon_BeFindNotice::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_BeFindNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CCommon_BeFindNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_BeFindNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_BeFindNotice::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_BeFindNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_BeFindNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_BeFindNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_BeFindNotice::MergeFrom(const PBG2CCommon_BeFindNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_BeFindNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_BeFindNotice::CopyFrom(const PBG2CCommon_BeFindNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_BeFindNotice::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_BeFindNotice::Swap(PBG2CCommon_BeFindNotice* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_BeFindNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_BeFindNotice_descriptor_;
  metadata.reflection = PBG2CCommon_BeFindNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCommon_NpcDialogComplete::kUnitIDFieldNumber;
#endif  // !_MSC_VER

PBC2GCommon_NpcDialogComplete::PBC2GCommon_NpcDialogComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommon_NpcDialogComplete::InitAsDefaultInstance() {
}

PBC2GCommon_NpcDialogComplete::PBC2GCommon_NpcDialogComplete(const PBC2GCommon_NpcDialogComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommon_NpcDialogComplete::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommon_NpcDialogComplete::~PBC2GCommon_NpcDialogComplete() {
  SharedDtor();
}

void PBC2GCommon_NpcDialogComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommon_NpcDialogComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommon_NpcDialogComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommon_NpcDialogComplete_descriptor_;
}

const PBC2GCommon_NpcDialogComplete& PBC2GCommon_NpcDialogComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommon_NpcDialogComplete* PBC2GCommon_NpcDialogComplete::default_instance_ = NULL;

PBC2GCommon_NpcDialogComplete* PBC2GCommon_NpcDialogComplete::New() const {
  return new PBC2GCommon_NpcDialogComplete;
}

void PBC2GCommon_NpcDialogComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommon_NpcDialogComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCommon_NpcDialogComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unitID = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommon_NpcDialogComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unitID = 1;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommon_NpcDialogComplete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unitID = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommon_NpcDialogComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommon_NpcDialogComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommon_NpcDialogComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommon_NpcDialogComplete::MergeFrom(const PBC2GCommon_NpcDialogComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommon_NpcDialogComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommon_NpcDialogComplete::CopyFrom(const PBC2GCommon_NpcDialogComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommon_NpcDialogComplete::IsInitialized() const {
  
  return true;
}

void PBC2GCommon_NpcDialogComplete::Swap(PBC2GCommon_NpcDialogComplete* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommon_NpcDialogComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommon_NpcDialogComplete_descriptor_;
  metadata.reflection = PBC2GCommon_NpcDialogComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCommon_UnActiveMonster::kUnitIDFieldNumber;
#endif  // !_MSC_VER

PBC2GCommon_UnActiveMonster::PBC2GCommon_UnActiveMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommon_UnActiveMonster::InitAsDefaultInstance() {
}

PBC2GCommon_UnActiveMonster::PBC2GCommon_UnActiveMonster(const PBC2GCommon_UnActiveMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommon_UnActiveMonster::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommon_UnActiveMonster::~PBC2GCommon_UnActiveMonster() {
  SharedDtor();
}

void PBC2GCommon_UnActiveMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommon_UnActiveMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommon_UnActiveMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommon_UnActiveMonster_descriptor_;
}

const PBC2GCommon_UnActiveMonster& PBC2GCommon_UnActiveMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommon_UnActiveMonster* PBC2GCommon_UnActiveMonster::default_instance_ = NULL;

PBC2GCommon_UnActiveMonster* PBC2GCommon_UnActiveMonster::New() const {
  return new PBC2GCommon_UnActiveMonster;
}

void PBC2GCommon_UnActiveMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommon_UnActiveMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCommon_UnActiveMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unitID = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommon_UnActiveMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unitID = 1;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommon_UnActiveMonster::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unitID = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommon_UnActiveMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommon_UnActiveMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommon_UnActiveMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommon_UnActiveMonster::MergeFrom(const PBC2GCommon_UnActiveMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommon_UnActiveMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommon_UnActiveMonster::CopyFrom(const PBC2GCommon_UnActiveMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommon_UnActiveMonster::IsInitialized() const {
  
  return true;
}

void PBC2GCommon_UnActiveMonster::Swap(PBC2GCommon_UnActiveMonster* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommon_UnActiveMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommon_UnActiveMonster_descriptor_;
  metadata.reflection = PBC2GCommon_UnActiveMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommon_SetPosition::kUnitIDFieldNumber;
const int PBG2CCommon_SetPosition::kPosxFieldNumber;
const int PBG2CCommon_SetPosition::kPosyFieldNumber;
const int PBG2CCommon_SetPosition::kDirFieldNumber;
#endif  // !_MSC_VER

PBG2CCommon_SetPosition::PBG2CCommon_SetPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_SetPosition::InitAsDefaultInstance() {
}

PBG2CCommon_SetPosition::PBG2CCommon_SetPosition(const PBG2CCommon_SetPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_SetPosition::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = 0u;
  posx_ = 0;
  posy_ = 0;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_SetPosition::~PBG2CCommon_SetPosition() {
  SharedDtor();
}

void PBG2CCommon_SetPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_SetPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_SetPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_SetPosition_descriptor_;
}

const PBG2CCommon_SetPosition& PBG2CCommon_SetPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_SetPosition* PBG2CCommon_SetPosition::default_instance_ = NULL;

PBG2CCommon_SetPosition* PBG2CCommon_SetPosition::New() const {
  return new PBG2CCommon_SetPosition;
}

void PBG2CCommon_SetPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unitid_ = 0u;
    posx_ = 0;
    posy_ = 0;
    dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_SetPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_posx;
        break;
      }
      
      // required float posx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_posy;
        break;
      }
      
      // required float posy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dir;
        break;
      }
      
      // required float dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommon_SetPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unitID = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unitid(), output);
  }
  
  // required float posx = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->posx(), output);
  }
  
  // required float posy = 3;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posy(), output);
  }
  
  // required float dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_SetPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unitID = 1;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unitid(), target);
  }
  
  // required float posx = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->posx(), target);
  }
  
  // required float posy = 3;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posy(), target);
  }
  
  // required float dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_SetPosition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unitID = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
    // required float posx = 2;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
    // required float posy = 3;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
    // required float dir = 4;
    if (has_dir()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_SetPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_SetPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_SetPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_SetPosition::MergeFrom(const PBG2CCommon_SetPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_SetPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_SetPosition::CopyFrom(const PBG2CCommon_SetPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_SetPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void PBG2CCommon_SetPosition::Swap(PBG2CCommon_SetPosition* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_SetPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_SetPosition_descriptor_;
  metadata.reflection = PBG2CCommon_SetPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCommon_DayCopymapCount::kTypeFieldNumber;
const int PBG2CCommon_DayCopymapCount::kCountFieldNumber;
#endif  // !_MSC_VER

PBG2CCommon_DayCopymapCount::PBG2CCommon_DayCopymapCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_DayCopymapCount::InitAsDefaultInstance() {
}

PBG2CCommon_DayCopymapCount::PBG2CCommon_DayCopymapCount(const PBG2CCommon_DayCopymapCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_DayCopymapCount::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_DayCopymapCount::~PBG2CCommon_DayCopymapCount() {
  SharedDtor();
}

void PBG2CCommon_DayCopymapCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_DayCopymapCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_DayCopymapCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_DayCopymapCount_descriptor_;
}

const PBG2CCommon_DayCopymapCount& PBG2CCommon_DayCopymapCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_DayCopymapCount* PBG2CCommon_DayCopymapCount::default_instance_ = NULL;

PBG2CCommon_DayCopymapCount* PBG2CCommon_DayCopymapCount::New() const {
  return new PBG2CCommon_DayCopymapCount;
}

void PBG2CCommon_DayCopymapCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_DayCopymapCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCommon_DayCopymapCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_DayCopymapCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_DayCopymapCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_DayCopymapCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_DayCopymapCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_DayCopymapCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_DayCopymapCount::MergeFrom(const PBG2CCommon_DayCopymapCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_DayCopymapCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_DayCopymapCount::CopyFrom(const PBG2CCommon_DayCopymapCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_DayCopymapCount::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_DayCopymapCount::Swap(PBG2CCommon_DayCopymapCount* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_DayCopymapCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_DayCopymapCount_descriptor_;
  metadata.reflection = PBG2CCommon_DayCopymapCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCommonGetBattleAttrDetailAsk::kTypeFieldNumber;
#endif  // !_MSC_VER

PBC2GCommonGetBattleAttrDetailAsk::PBC2GCommonGetBattleAttrDetailAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCommonGetBattleAttrDetailAsk::InitAsDefaultInstance() {
}

PBC2GCommonGetBattleAttrDetailAsk::PBC2GCommonGetBattleAttrDetailAsk(const PBC2GCommonGetBattleAttrDetailAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCommonGetBattleAttrDetailAsk::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCommonGetBattleAttrDetailAsk::~PBC2GCommonGetBattleAttrDetailAsk() {
  SharedDtor();
}

void PBC2GCommonGetBattleAttrDetailAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCommonGetBattleAttrDetailAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCommonGetBattleAttrDetailAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCommonGetBattleAttrDetailAsk_descriptor_;
}

const PBC2GCommonGetBattleAttrDetailAsk& PBC2GCommonGetBattleAttrDetailAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCommonGetBattleAttrDetailAsk* PBC2GCommonGetBattleAttrDetailAsk::default_instance_ = NULL;

PBC2GCommonGetBattleAttrDetailAsk* PBC2GCommonGetBattleAttrDetailAsk::New() const {
  return new PBC2GCommonGetBattleAttrDetailAsk;
}

void PBC2GCommonGetBattleAttrDetailAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCommonGetBattleAttrDetailAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCommonGetBattleAttrDetailAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCommonGetBattleAttrDetailAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCommonGetBattleAttrDetailAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCommonGetBattleAttrDetailAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCommonGetBattleAttrDetailAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCommonGetBattleAttrDetailAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCommonGetBattleAttrDetailAsk::MergeFrom(const PBC2GCommonGetBattleAttrDetailAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCommonGetBattleAttrDetailAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCommonGetBattleAttrDetailAsk::CopyFrom(const PBC2GCommonGetBattleAttrDetailAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCommonGetBattleAttrDetailAsk::IsInitialized() const {
  
  return true;
}

void PBC2GCommonGetBattleAttrDetailAsk::Swap(PBC2GCommonGetBattleAttrDetailAsk* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCommonGetBattleAttrDetailAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCommonGetBattleAttrDetailAsk_descriptor_;
  metadata.reflection = PBC2GCommonGetBattleAttrDetailAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CCommon_TakeASeatAsk::PBG2CCommon_TakeASeatAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCommon_TakeASeatAsk::InitAsDefaultInstance() {
}

PBG2CCommon_TakeASeatAsk::PBG2CCommon_TakeASeatAsk(const PBG2CCommon_TakeASeatAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCommon_TakeASeatAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCommon_TakeASeatAsk::~PBG2CCommon_TakeASeatAsk() {
  SharedDtor();
}

void PBG2CCommon_TakeASeatAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CCommon_TakeASeatAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCommon_TakeASeatAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCommon_TakeASeatAsk_descriptor_;
}

const PBG2CCommon_TakeASeatAsk& PBG2CCommon_TakeASeatAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCommon_TakeASeatAsk* PBG2CCommon_TakeASeatAsk::default_instance_ = NULL;

PBG2CCommon_TakeASeatAsk* PBG2CCommon_TakeASeatAsk::New() const {
  return new PBG2CCommon_TakeASeatAsk;
}

void PBG2CCommon_TakeASeatAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCommon_TakeASeatAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CCommon_TakeASeatAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCommon_TakeASeatAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCommon_TakeASeatAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCommon_TakeASeatAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCommon_TakeASeatAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCommon_TakeASeatAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCommon_TakeASeatAsk::MergeFrom(const PBG2CCommon_TakeASeatAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCommon_TakeASeatAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCommon_TakeASeatAsk::CopyFrom(const PBG2CCommon_TakeASeatAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCommon_TakeASeatAsk::IsInitialized() const {
  
  return true;
}

void PBG2CCommon_TakeASeatAsk::Swap(PBG2CCommon_TakeASeatAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCommon_TakeASeatAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCommon_TakeASeatAsk_descriptor_;
  metadata.reflection = PBG2CCommon_TakeASeatAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SDartCheckAsk::kDartIDFieldNumber;
const int PBC2SDartCheckAsk::kNpcUnitIDFieldNumber;
#endif  // !_MSC_VER

PBC2SDartCheckAsk::PBC2SDartCheckAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SDartCheckAsk::InitAsDefaultInstance() {
}

PBC2SDartCheckAsk::PBC2SDartCheckAsk(const PBC2SDartCheckAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SDartCheckAsk::SharedCtor() {
  _cached_size_ = 0;
  dartid_ = 0u;
  npcunitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SDartCheckAsk::~PBC2SDartCheckAsk() {
  SharedDtor();
}

void PBC2SDartCheckAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SDartCheckAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SDartCheckAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SDartCheckAsk_descriptor_;
}

const PBC2SDartCheckAsk& PBC2SDartCheckAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SDartCheckAsk* PBC2SDartCheckAsk::default_instance_ = NULL;

PBC2SDartCheckAsk* PBC2SDartCheckAsk::New() const {
  return new PBC2SDartCheckAsk;
}

void PBC2SDartCheckAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dartid_ = 0u;
    npcunitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SDartCheckAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartid_)));
          set_has_dartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npcUnitID;
        break;
      }
      
      // optional uint32 npcUnitID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcUnitID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcunitid_)));
          set_has_npcunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SDartCheckAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dartID = 1;
  if (has_dartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dartid(), output);
  }
  
  // optional uint32 npcUnitID = 2;
  if (has_npcunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcunitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SDartCheckAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dartID = 1;
  if (has_dartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dartid(), target);
  }
  
  // optional uint32 npcUnitID = 2;
  if (has_npcunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcunitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SDartCheckAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dartID = 1;
    if (has_dartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartid());
    }
    
    // optional uint32 npcUnitID = 2;
    if (has_npcunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcunitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SDartCheckAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SDartCheckAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SDartCheckAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SDartCheckAsk::MergeFrom(const PBC2SDartCheckAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dartid()) {
      set_dartid(from.dartid());
    }
    if (from.has_npcunitid()) {
      set_npcunitid(from.npcunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SDartCheckAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SDartCheckAsk::CopyFrom(const PBC2SDartCheckAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SDartCheckAsk::IsInitialized() const {
  
  return true;
}

void PBC2SDartCheckAsk::Swap(PBC2SDartCheckAsk* other) {
  if (other != this) {
    std::swap(dartid_, other->dartid_);
    std::swap(npcunitid_, other->npcunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SDartCheckAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SDartCheckAsk_descriptor_;
  metadata.reflection = PBC2SDartCheckAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDartMemberResourceInfo::kPlayerIDFieldNumber;
const int PBDartMemberResourceInfo::kItemCountFieldNumber;
const int PBDartMemberResourceInfo::kDartCountFieldNumber;
const int PBDartMemberResourceInfo::kNotAroundFieldNumber;
#endif  // !_MSC_VER

PBDartMemberResourceInfo::PBDartMemberResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDartMemberResourceInfo::InitAsDefaultInstance() {
}

PBDartMemberResourceInfo::PBDartMemberResourceInfo(const PBDartMemberResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDartMemberResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  itemcount_ = 0u;
  dartcount_ = 0u;
  notaround_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDartMemberResourceInfo::~PBDartMemberResourceInfo() {
  SharedDtor();
}

void PBDartMemberResourceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDartMemberResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDartMemberResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDartMemberResourceInfo_descriptor_;
}

const PBDartMemberResourceInfo& PBDartMemberResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBDartMemberResourceInfo* PBDartMemberResourceInfo::default_instance_ = NULL;

PBDartMemberResourceInfo* PBDartMemberResourceInfo::New() const {
  return new PBDartMemberResourceInfo;
}

void PBDartMemberResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    itemcount_ = 0u;
    dartcount_ = 0u;
    notaround_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDartMemberResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemCount;
        break;
      }
      
      // optional uint32 itemCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dartCount;
        break;
      }
      
      // optional uint32 dartCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dartCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartcount_)));
          set_has_dartcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_notAround;
        break;
      }
      
      // optional bool notAround = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notAround:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notaround_)));
          set_has_notaround();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDartMemberResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 itemCount = 2;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemcount(), output);
  }
  
  // optional uint32 dartCount = 3;
  if (has_dartcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dartcount(), output);
  }
  
  // optional bool notAround = 4;
  if (has_notaround()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->notaround(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDartMemberResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 itemCount = 2;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemcount(), target);
  }
  
  // optional uint32 dartCount = 3;
  if (has_dartcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dartcount(), target);
  }
  
  // optional bool notAround = 4;
  if (has_notaround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->notaround(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDartMemberResourceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 itemCount = 2;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcount());
    }
    
    // optional uint32 dartCount = 3;
    if (has_dartcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartcount());
    }
    
    // optional bool notAround = 4;
    if (has_notaround()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDartMemberResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDartMemberResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDartMemberResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDartMemberResourceInfo::MergeFrom(const PBDartMemberResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_dartcount()) {
      set_dartcount(from.dartcount());
    }
    if (from.has_notaround()) {
      set_notaround(from.notaround());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDartMemberResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDartMemberResourceInfo::CopyFrom(const PBDartMemberResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDartMemberResourceInfo::IsInitialized() const {
  
  return true;
}

void PBDartMemberResourceInfo::Swap(PBDartMemberResourceInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(dartcount_, other->dartcount_);
    std::swap(notaround_, other->notaround_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDartMemberResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDartMemberResourceInfo_descriptor_;
  metadata.reflection = PBDartMemberResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CDartCheckAck::kDartIDFieldNumber;
const int PBS2CDartCheckAck::kInfoFieldNumber;
#endif  // !_MSC_VER

PBS2CDartCheckAck::PBS2CDartCheckAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartCheckAck::InitAsDefaultInstance() {
}

PBS2CDartCheckAck::PBS2CDartCheckAck(const PBS2CDartCheckAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartCheckAck::SharedCtor() {
  _cached_size_ = 0;
  dartid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartCheckAck::~PBS2CDartCheckAck() {
  SharedDtor();
}

void PBS2CDartCheckAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartCheckAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartCheckAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartCheckAck_descriptor_;
}

const PBS2CDartCheckAck& PBS2CDartCheckAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartCheckAck* PBS2CDartCheckAck::default_instance_ = NULL;

PBS2CDartCheckAck* PBS2CDartCheckAck::New() const {
  return new PBS2CDartCheckAck;
}

void PBS2CDartCheckAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dartid_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartCheckAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartid_)));
          set_has_dartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // repeated .PBDartMemberResourceInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CDartCheckAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dartID = 1;
  if (has_dartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dartid(), output);
  }
  
  // repeated .PBDartMemberResourceInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartCheckAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dartID = 1;
  if (has_dartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dartid(), target);
  }
  
  // repeated .PBDartMemberResourceInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartCheckAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dartID = 1;
    if (has_dartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartid());
    }
    
  }
  // repeated .PBDartMemberResourceInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartCheckAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartCheckAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartCheckAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartCheckAck::MergeFrom(const PBS2CDartCheckAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dartid()) {
      set_dartid(from.dartid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartCheckAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartCheckAck::CopyFrom(const PBS2CDartCheckAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartCheckAck::IsInitialized() const {
  
  return true;
}

void PBS2CDartCheckAck::Swap(PBS2CDartCheckAck* other) {
  if (other != this) {
    std::swap(dartid_, other->dartid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartCheckAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartCheckAck_descriptor_;
  metadata.reflection = PBS2CDartCheckAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SDartStartAsk::kDartIDFieldNumber;
const int PBC2SDartStartAsk::kNpcUnitIDFieldNumber;
#endif  // !_MSC_VER

PBC2SDartStartAsk::PBC2SDartStartAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SDartStartAsk::InitAsDefaultInstance() {
}

PBC2SDartStartAsk::PBC2SDartStartAsk(const PBC2SDartStartAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SDartStartAsk::SharedCtor() {
  _cached_size_ = 0;
  dartid_ = 0u;
  npcunitid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SDartStartAsk::~PBC2SDartStartAsk() {
  SharedDtor();
}

void PBC2SDartStartAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SDartStartAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SDartStartAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SDartStartAsk_descriptor_;
}

const PBC2SDartStartAsk& PBC2SDartStartAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SDartStartAsk* PBC2SDartStartAsk::default_instance_ = NULL;

PBC2SDartStartAsk* PBC2SDartStartAsk::New() const {
  return new PBC2SDartStartAsk;
}

void PBC2SDartStartAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dartid_ = 0u;
    npcunitid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SDartStartAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartid_)));
          set_has_dartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npcUnitID;
        break;
      }
      
      // optional uint32 npcUnitID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcUnitID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcunitid_)));
          set_has_npcunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SDartStartAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dartID = 1;
  if (has_dartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dartid(), output);
  }
  
  // optional uint32 npcUnitID = 2;
  if (has_npcunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcunitid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SDartStartAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dartID = 1;
  if (has_dartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dartid(), target);
  }
  
  // optional uint32 npcUnitID = 2;
  if (has_npcunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcunitid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SDartStartAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dartID = 1;
    if (has_dartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartid());
    }
    
    // optional uint32 npcUnitID = 2;
    if (has_npcunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcunitid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SDartStartAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SDartStartAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SDartStartAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SDartStartAsk::MergeFrom(const PBC2SDartStartAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dartid()) {
      set_dartid(from.dartid());
    }
    if (from.has_npcunitid()) {
      set_npcunitid(from.npcunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SDartStartAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SDartStartAsk::CopyFrom(const PBC2SDartStartAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SDartStartAsk::IsInitialized() const {
  
  return true;
}

void PBC2SDartStartAsk::Swap(PBC2SDartStartAsk* other) {
  if (other != this) {
    std::swap(dartid_, other->dartid_);
    std::swap(npcunitid_, other->npcunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SDartStartAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SDartStartAsk_descriptor_;
  metadata.reflection = PBC2SDartStartAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2SDartQuitAsk::PBC2SDartQuitAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SDartQuitAsk::InitAsDefaultInstance() {
}

PBC2SDartQuitAsk::PBC2SDartQuitAsk(const PBC2SDartQuitAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SDartQuitAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SDartQuitAsk::~PBC2SDartQuitAsk() {
  SharedDtor();
}

void PBC2SDartQuitAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SDartQuitAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SDartQuitAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SDartQuitAsk_descriptor_;
}

const PBC2SDartQuitAsk& PBC2SDartQuitAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SDartQuitAsk* PBC2SDartQuitAsk::default_instance_ = NULL;

PBC2SDartQuitAsk* PBC2SDartQuitAsk::New() const {
  return new PBC2SDartQuitAsk;
}

void PBC2SDartQuitAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SDartQuitAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2SDartQuitAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SDartQuitAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SDartQuitAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SDartQuitAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SDartQuitAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SDartQuitAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SDartQuitAsk::MergeFrom(const PBC2SDartQuitAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SDartQuitAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SDartQuitAsk::CopyFrom(const PBC2SDartQuitAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SDartQuitAsk::IsInitialized() const {
  
  return true;
}

void PBC2SDartQuitAsk::Swap(PBC2SDartQuitAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SDartQuitAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SDartQuitAsk_descriptor_;
  metadata.reflection = PBC2SDartQuitAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDartInfo::kPrizeTimeFieldNumber;
#endif  // !_MSC_VER

PBDartInfo::PBDartInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDartInfo::InitAsDefaultInstance() {
}

PBDartInfo::PBDartInfo(const PBDartInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDartInfo::SharedCtor() {
  _cached_size_ = 0;
  prizetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDartInfo::~PBDartInfo() {
  SharedDtor();
}

void PBDartInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDartInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDartInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDartInfo_descriptor_;
}

const PBDartInfo& PBDartInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBDartInfo* PBDartInfo::default_instance_ = NULL;

PBDartInfo* PBDartInfo::New() const {
  return new PBDartInfo;
}

void PBDartInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prizetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDartInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prizeTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizetime_)));
          set_has_prizetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDartInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 prizeTime = 1;
  if (has_prizetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prizetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDartInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 prizeTime = 1;
  if (has_prizetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prizetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDartInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 prizeTime = 1;
    if (has_prizetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDartInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDartInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDartInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDartInfo::MergeFrom(const PBDartInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prizetime()) {
      set_prizetime(from.prizetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDartInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDartInfo::CopyFrom(const PBDartInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDartInfo::IsInitialized() const {
  
  return true;
}

void PBDartInfo::Swap(PBDartInfo* other) {
  if (other != this) {
    std::swap(prizetime_, other->prizetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDartInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDartInfo_descriptor_;
  metadata.reflection = PBDartInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CDartStartAck::kDartIDFieldNumber;
const int PBS2CDartStartAck::kDartInfoFieldNumber;
#endif  // !_MSC_VER

PBS2CDartStartAck::PBS2CDartStartAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartStartAck::InitAsDefaultInstance() {
  dartinfo_ = const_cast< ::PBDartInfo*>(&::PBDartInfo::default_instance());
}

PBS2CDartStartAck::PBS2CDartStartAck(const PBS2CDartStartAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartStartAck::SharedCtor() {
  _cached_size_ = 0;
  dartid_ = 0u;
  dartinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartStartAck::~PBS2CDartStartAck() {
  SharedDtor();
}

void PBS2CDartStartAck::SharedDtor() {
  if (this != default_instance_) {
    delete dartinfo_;
  }
}

void PBS2CDartStartAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartStartAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartStartAck_descriptor_;
}

const PBS2CDartStartAck& PBS2CDartStartAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartStartAck* PBS2CDartStartAck::default_instance_ = NULL;

PBS2CDartStartAck* PBS2CDartStartAck::New() const {
  return new PBS2CDartStartAck;
}

void PBS2CDartStartAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dartid_ = 0u;
    if (has_dartinfo()) {
      if (dartinfo_ != NULL) dartinfo_->::PBDartInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartStartAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartid_)));
          set_has_dartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dartInfo;
        break;
      }
      
      // optional .PBDartInfo dartInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dartInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dartinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CDartStartAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dartID = 1;
  if (has_dartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dartid(), output);
  }
  
  // optional .PBDartInfo dartInfo = 2;
  if (has_dartinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dartinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartStartAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dartID = 1;
  if (has_dartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dartid(), target);
  }
  
  // optional .PBDartInfo dartInfo = 2;
  if (has_dartinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dartinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartStartAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dartID = 1;
    if (has_dartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartid());
    }
    
    // optional .PBDartInfo dartInfo = 2;
    if (has_dartinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dartinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartStartAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartStartAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartStartAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartStartAck::MergeFrom(const PBS2CDartStartAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dartid()) {
      set_dartid(from.dartid());
    }
    if (from.has_dartinfo()) {
      mutable_dartinfo()->::PBDartInfo::MergeFrom(from.dartinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartStartAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartStartAck::CopyFrom(const PBS2CDartStartAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartStartAck::IsInitialized() const {
  
  return true;
}

void PBS2CDartStartAck::Swap(PBS2CDartStartAck* other) {
  if (other != this) {
    std::swap(dartid_, other->dartid_);
    std::swap(dartinfo_, other->dartinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartStartAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartStartAck_descriptor_;
  metadata.reflection = PBS2CDartStartAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CDartInfoNtf::kDartLeftCountNormalFieldNumber;
const int PBS2CDartInfoNtf::kDartLeftCountTianxiaFieldNumber;
#endif  // !_MSC_VER

PBS2CDartInfoNtf::PBS2CDartInfoNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartInfoNtf::InitAsDefaultInstance() {
}

PBS2CDartInfoNtf::PBS2CDartInfoNtf(const PBS2CDartInfoNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartInfoNtf::SharedCtor() {
  _cached_size_ = 0;
  dartleftcountnormal_ = 0u;
  dartleftcounttianxia_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartInfoNtf::~PBS2CDartInfoNtf() {
  SharedDtor();
}

void PBS2CDartInfoNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartInfoNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartInfoNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartInfoNtf_descriptor_;
}

const PBS2CDartInfoNtf& PBS2CDartInfoNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartInfoNtf* PBS2CDartInfoNtf::default_instance_ = NULL;

PBS2CDartInfoNtf* PBS2CDartInfoNtf::New() const {
  return new PBS2CDartInfoNtf;
}

void PBS2CDartInfoNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dartleftcountnormal_ = 0u;
    dartleftcounttianxia_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartInfoNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dartLeftCountNormal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartleftcountnormal_)));
          set_has_dartleftcountnormal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dartLeftCountTianxia;
        break;
      }
      
      // optional uint32 dartLeftCountTianxia = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dartLeftCountTianxia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartleftcounttianxia_)));
          set_has_dartleftcounttianxia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CDartInfoNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dartLeftCountNormal = 1;
  if (has_dartleftcountnormal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dartleftcountnormal(), output);
  }
  
  // optional uint32 dartLeftCountTianxia = 2;
  if (has_dartleftcounttianxia()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dartleftcounttianxia(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartInfoNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dartLeftCountNormal = 1;
  if (has_dartleftcountnormal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dartleftcountnormal(), target);
  }
  
  // optional uint32 dartLeftCountTianxia = 2;
  if (has_dartleftcounttianxia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dartleftcounttianxia(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartInfoNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dartLeftCountNormal = 1;
    if (has_dartleftcountnormal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartleftcountnormal());
    }
    
    // optional uint32 dartLeftCountTianxia = 2;
    if (has_dartleftcounttianxia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartleftcounttianxia());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartInfoNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartInfoNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartInfoNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartInfoNtf::MergeFrom(const PBS2CDartInfoNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dartleftcountnormal()) {
      set_dartleftcountnormal(from.dartleftcountnormal());
    }
    if (from.has_dartleftcounttianxia()) {
      set_dartleftcounttianxia(from.dartleftcounttianxia());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartInfoNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartInfoNtf::CopyFrom(const PBS2CDartInfoNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartInfoNtf::IsInitialized() const {
  
  return true;
}

void PBS2CDartInfoNtf::Swap(PBS2CDartInfoNtf* other) {
  if (other != this) {
    std::swap(dartleftcountnormal_, other->dartleftcountnormal_);
    std::swap(dartleftcounttianxia_, other->dartleftcounttianxia_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartInfoNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartInfoNtf_descriptor_;
  metadata.reflection = PBS2CDartInfoNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CDartCheckPauseNtf::kNeedConfirmFieldNumber;
#endif  // !_MSC_VER

PBS2CDartCheckPauseNtf::PBS2CDartCheckPauseNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartCheckPauseNtf::InitAsDefaultInstance() {
}

PBS2CDartCheckPauseNtf::PBS2CDartCheckPauseNtf(const PBS2CDartCheckPauseNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartCheckPauseNtf::SharedCtor() {
  _cached_size_ = 0;
  needconfirm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartCheckPauseNtf::~PBS2CDartCheckPauseNtf() {
  SharedDtor();
}

void PBS2CDartCheckPauseNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartCheckPauseNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartCheckPauseNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartCheckPauseNtf_descriptor_;
}

const PBS2CDartCheckPauseNtf& PBS2CDartCheckPauseNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartCheckPauseNtf* PBS2CDartCheckPauseNtf::default_instance_ = NULL;

PBS2CDartCheckPauseNtf* PBS2CDartCheckPauseNtf::New() const {
  return new PBS2CDartCheckPauseNtf;
}

void PBS2CDartCheckPauseNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    needconfirm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartCheckPauseNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 needConfirm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needconfirm_)));
          set_has_needconfirm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CDartCheckPauseNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 needConfirm = 1;
  if (has_needconfirm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->needconfirm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartCheckPauseNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 needConfirm = 1;
  if (has_needconfirm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->needconfirm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartCheckPauseNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 needConfirm = 1;
    if (has_needconfirm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needconfirm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartCheckPauseNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartCheckPauseNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartCheckPauseNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartCheckPauseNtf::MergeFrom(const PBS2CDartCheckPauseNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needconfirm()) {
      set_needconfirm(from.needconfirm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartCheckPauseNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartCheckPauseNtf::CopyFrom(const PBS2CDartCheckPauseNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartCheckPauseNtf::IsInitialized() const {
  
  return true;
}

void PBS2CDartCheckPauseNtf::Swap(PBS2CDartCheckPauseNtf* other) {
  if (other != this) {
    std::swap(needconfirm_, other->needconfirm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartCheckPauseNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartCheckPauseNtf_descriptor_;
  metadata.reflection = PBS2CDartCheckPauseNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2SDartCheckConfirmAsk::PBC2SDartCheckConfirmAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SDartCheckConfirmAsk::InitAsDefaultInstance() {
}

PBC2SDartCheckConfirmAsk::PBC2SDartCheckConfirmAsk(const PBC2SDartCheckConfirmAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SDartCheckConfirmAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SDartCheckConfirmAsk::~PBC2SDartCheckConfirmAsk() {
  SharedDtor();
}

void PBC2SDartCheckConfirmAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SDartCheckConfirmAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SDartCheckConfirmAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SDartCheckConfirmAsk_descriptor_;
}

const PBC2SDartCheckConfirmAsk& PBC2SDartCheckConfirmAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SDartCheckConfirmAsk* PBC2SDartCheckConfirmAsk::default_instance_ = NULL;

PBC2SDartCheckConfirmAsk* PBC2SDartCheckConfirmAsk::New() const {
  return new PBC2SDartCheckConfirmAsk;
}

void PBC2SDartCheckConfirmAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SDartCheckConfirmAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2SDartCheckConfirmAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SDartCheckConfirmAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SDartCheckConfirmAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SDartCheckConfirmAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SDartCheckConfirmAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SDartCheckConfirmAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SDartCheckConfirmAsk::MergeFrom(const PBC2SDartCheckConfirmAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SDartCheckConfirmAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SDartCheckConfirmAsk::CopyFrom(const PBC2SDartCheckConfirmAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SDartCheckConfirmAsk::IsInitialized() const {
  
  return true;
}

void PBC2SDartCheckConfirmAsk::Swap(PBC2SDartCheckConfirmAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SDartCheckConfirmAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SDartCheckConfirmAsk_descriptor_;
  metadata.reflection = PBC2SDartCheckConfirmAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2SDartCheckGetBuffAsk::PBC2SDartCheckGetBuffAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SDartCheckGetBuffAsk::InitAsDefaultInstance() {
}

PBC2SDartCheckGetBuffAsk::PBC2SDartCheckGetBuffAsk(const PBC2SDartCheckGetBuffAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SDartCheckGetBuffAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SDartCheckGetBuffAsk::~PBC2SDartCheckGetBuffAsk() {
  SharedDtor();
}

void PBC2SDartCheckGetBuffAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SDartCheckGetBuffAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SDartCheckGetBuffAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SDartCheckGetBuffAsk_descriptor_;
}

const PBC2SDartCheckGetBuffAsk& PBC2SDartCheckGetBuffAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SDartCheckGetBuffAsk* PBC2SDartCheckGetBuffAsk::default_instance_ = NULL;

PBC2SDartCheckGetBuffAsk* PBC2SDartCheckGetBuffAsk::New() const {
  return new PBC2SDartCheckGetBuffAsk;
}

void PBC2SDartCheckGetBuffAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SDartCheckGetBuffAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2SDartCheckGetBuffAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SDartCheckGetBuffAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SDartCheckGetBuffAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SDartCheckGetBuffAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SDartCheckGetBuffAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SDartCheckGetBuffAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SDartCheckGetBuffAsk::MergeFrom(const PBC2SDartCheckGetBuffAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SDartCheckGetBuffAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SDartCheckGetBuffAsk::CopyFrom(const PBC2SDartCheckGetBuffAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SDartCheckGetBuffAsk::IsInitialized() const {
  
  return true;
}

void PBC2SDartCheckGetBuffAsk::Swap(PBC2SDartCheckGetBuffAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SDartCheckGetBuffAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SDartCheckGetBuffAsk_descriptor_;
  metadata.reflection = PBC2SDartCheckGetBuffAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CDartStartMoveNtf::kLeftCDFieldNumber;
#endif  // !_MSC_VER

PBS2CDartStartMoveNtf::PBS2CDartStartMoveNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartStartMoveNtf::InitAsDefaultInstance() {
}

PBS2CDartStartMoveNtf::PBS2CDartStartMoveNtf(const PBS2CDartStartMoveNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartStartMoveNtf::SharedCtor() {
  _cached_size_ = 0;
  leftcd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartStartMoveNtf::~PBS2CDartStartMoveNtf() {
  SharedDtor();
}

void PBS2CDartStartMoveNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartStartMoveNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartStartMoveNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartStartMoveNtf_descriptor_;
}

const PBS2CDartStartMoveNtf& PBS2CDartStartMoveNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartStartMoveNtf* PBS2CDartStartMoveNtf::default_instance_ = NULL;

PBS2CDartStartMoveNtf* PBS2CDartStartMoveNtf::New() const {
  return new PBS2CDartStartMoveNtf;
}

void PBS2CDartStartMoveNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leftcd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartStartMoveNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 leftCD = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftcd_)));
          set_has_leftcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CDartStartMoveNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 leftCD = 1;
  if (has_leftcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->leftcd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartStartMoveNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 leftCD = 1;
  if (has_leftcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->leftcd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartStartMoveNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 leftCD = 1;
    if (has_leftcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftcd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartStartMoveNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartStartMoveNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartStartMoveNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartStartMoveNtf::MergeFrom(const PBS2CDartStartMoveNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftcd()) {
      set_leftcd(from.leftcd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartStartMoveNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartStartMoveNtf::CopyFrom(const PBS2CDartStartMoveNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartStartMoveNtf::IsInitialized() const {
  
  return true;
}

void PBS2CDartStartMoveNtf::Swap(PBS2CDartStartMoveNtf* other) {
  if (other != this) {
    std::swap(leftcd_, other->leftcd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartStartMoveNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartStartMoveNtf_descriptor_;
  metadata.reflection = PBS2CDartStartMoveNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CDartStartRobNtf::kStartRobCDFieldNumber;
#endif  // !_MSC_VER

PBS2CDartStartRobNtf::PBS2CDartStartRobNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartStartRobNtf::InitAsDefaultInstance() {
}

PBS2CDartStartRobNtf::PBS2CDartStartRobNtf(const PBS2CDartStartRobNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartStartRobNtf::SharedCtor() {
  _cached_size_ = 0;
  startrobcd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartStartRobNtf::~PBS2CDartStartRobNtf() {
  SharedDtor();
}

void PBS2CDartStartRobNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartStartRobNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartStartRobNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartStartRobNtf_descriptor_;
}

const PBS2CDartStartRobNtf& PBS2CDartStartRobNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartStartRobNtf* PBS2CDartStartRobNtf::default_instance_ = NULL;

PBS2CDartStartRobNtf* PBS2CDartStartRobNtf::New() const {
  return new PBS2CDartStartRobNtf;
}

void PBS2CDartStartRobNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startrobcd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartStartRobNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 startRobCD = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startrobcd_)));
          set_has_startrobcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CDartStartRobNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 startRobCD = 1;
  if (has_startrobcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startrobcd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartStartRobNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 startRobCD = 1;
  if (has_startrobcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startrobcd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartStartRobNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 startRobCD = 1;
    if (has_startrobcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startrobcd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartStartRobNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartStartRobNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartStartRobNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartStartRobNtf::MergeFrom(const PBS2CDartStartRobNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startrobcd()) {
      set_startrobcd(from.startrobcd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartStartRobNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartStartRobNtf::CopyFrom(const PBS2CDartStartRobNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartStartRobNtf::IsInitialized() const {
  
  return true;
}

void PBS2CDartStartRobNtf::Swap(PBS2CDartStartRobNtf* other) {
  if (other != this) {
    std::swap(startrobcd_, other->startrobcd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartStartRobNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartStartRobNtf_descriptor_;
  metadata.reflection = PBS2CDartStartRobNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CDartFinishAndPrizeNtf::kDartIDFieldNumber;
const int PBS2CDartFinishAndPrizeNtf::kReasonFieldNumber;
const int PBS2CDartFinishAndPrizeNtf::kMemberPlayerIDFieldNumber;
const int PBS2CDartFinishAndPrizeNtf::kMoneytypeFieldNumber;
const int PBS2CDartFinishAndPrizeNtf::kMoneycountFieldNumber;
#endif  // !_MSC_VER

PBS2CDartFinishAndPrizeNtf::PBS2CDartFinishAndPrizeNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartFinishAndPrizeNtf::InitAsDefaultInstance() {
}

PBS2CDartFinishAndPrizeNtf::PBS2CDartFinishAndPrizeNtf(const PBS2CDartFinishAndPrizeNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartFinishAndPrizeNtf::SharedCtor() {
  _cached_size_ = 0;
  dartid_ = 0u;
  reason_ = 0u;
  moneytype_ = 0u;
  moneycount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartFinishAndPrizeNtf::~PBS2CDartFinishAndPrizeNtf() {
  SharedDtor();
}

void PBS2CDartFinishAndPrizeNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartFinishAndPrizeNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartFinishAndPrizeNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartFinishAndPrizeNtf_descriptor_;
}

const PBS2CDartFinishAndPrizeNtf& PBS2CDartFinishAndPrizeNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartFinishAndPrizeNtf* PBS2CDartFinishAndPrizeNtf::default_instance_ = NULL;

PBS2CDartFinishAndPrizeNtf* PBS2CDartFinishAndPrizeNtf::New() const {
  return new PBS2CDartFinishAndPrizeNtf;
}

void PBS2CDartFinishAndPrizeNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dartid_ = 0u;
    reason_ = 0u;
    moneytype_ = 0u;
    moneycount_ = GOOGLE_ULONGLONG(0);
  }
  memberplayerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartFinishAndPrizeNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartid_)));
          set_has_dartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memberPlayerID;
        break;
      }
      
      // repeated uint32 memberPlayerID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberPlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_memberplayerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_memberplayerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memberPlayerID;
        if (input->ExpectTag(32)) goto parse_moneytype;
        break;
      }
      
      // optional uint32 moneytype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_moneycount;
        break;
      }
      
      // optional uint64 moneycount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &moneycount_)));
          set_has_moneycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CDartFinishAndPrizeNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dartID = 1;
  if (has_dartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dartid(), output);
  }
  
  // optional uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }
  
  // repeated uint32 memberPlayerID = 3;
  for (int i = 0; i < this->memberplayerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->memberplayerid(i), output);
  }
  
  // optional uint32 moneytype = 4;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->moneytype(), output);
  }
  
  // optional uint64 moneycount = 5;
  if (has_moneycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->moneycount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartFinishAndPrizeNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dartID = 1;
  if (has_dartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dartid(), target);
  }
  
  // optional uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }
  
  // repeated uint32 memberPlayerID = 3;
  for (int i = 0; i < this->memberplayerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->memberplayerid(i), target);
  }
  
  // optional uint32 moneytype = 4;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->moneytype(), target);
  }
  
  // optional uint64 moneycount = 5;
  if (has_moneycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->moneycount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartFinishAndPrizeNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dartID = 1;
    if (has_dartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartid());
    }
    
    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
    // optional uint32 moneytype = 4;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneytype());
    }
    
    // optional uint64 moneycount = 5;
    if (has_moneycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->moneycount());
    }
    
  }
  // repeated uint32 memberPlayerID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberplayerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->memberplayerid(i));
    }
    total_size += 1 * this->memberplayerid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartFinishAndPrizeNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartFinishAndPrizeNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartFinishAndPrizeNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartFinishAndPrizeNtf::MergeFrom(const PBS2CDartFinishAndPrizeNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberplayerid_.MergeFrom(from.memberplayerid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dartid()) {
      set_dartid(from.dartid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_moneycount()) {
      set_moneycount(from.moneycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartFinishAndPrizeNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartFinishAndPrizeNtf::CopyFrom(const PBS2CDartFinishAndPrizeNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartFinishAndPrizeNtf::IsInitialized() const {
  
  return true;
}

void PBS2CDartFinishAndPrizeNtf::Swap(PBS2CDartFinishAndPrizeNtf* other) {
  if (other != this) {
    std::swap(dartid_, other->dartid_);
    std::swap(reason_, other->reason_);
    memberplayerid_.Swap(&other->memberplayerid_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(moneycount_, other->moneycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartFinishAndPrizeNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartFinishAndPrizeNtf_descriptor_;
  metadata.reflection = PBS2CDartFinishAndPrizeNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CDartCheckGetBuffAck::kBuffIDFieldNumber;
#endif  // !_MSC_VER

PBS2CDartCheckGetBuffAck::PBS2CDartCheckGetBuffAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartCheckGetBuffAck::InitAsDefaultInstance() {
}

PBS2CDartCheckGetBuffAck::PBS2CDartCheckGetBuffAck(const PBS2CDartCheckGetBuffAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartCheckGetBuffAck::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartCheckGetBuffAck::~PBS2CDartCheckGetBuffAck() {
  SharedDtor();
}

void PBS2CDartCheckGetBuffAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartCheckGetBuffAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartCheckGetBuffAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartCheckGetBuffAck_descriptor_;
}

const PBS2CDartCheckGetBuffAck& PBS2CDartCheckGetBuffAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartCheckGetBuffAck* PBS2CDartCheckGetBuffAck::default_instance_ = NULL;

PBS2CDartCheckGetBuffAck* PBS2CDartCheckGetBuffAck::New() const {
  return new PBS2CDartCheckGetBuffAck;
}

void PBS2CDartCheckGetBuffAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartCheckGetBuffAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buffID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CDartCheckGetBuffAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 buffID = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buffid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartCheckGetBuffAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 buffID = 1;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buffid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartCheckGetBuffAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buffID = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartCheckGetBuffAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartCheckGetBuffAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartCheckGetBuffAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartCheckGetBuffAck::MergeFrom(const PBS2CDartCheckGetBuffAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartCheckGetBuffAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartCheckGetBuffAck::CopyFrom(const PBS2CDartCheckGetBuffAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartCheckGetBuffAck::IsInitialized() const {
  
  return true;
}

void PBS2CDartCheckGetBuffAck::Swap(PBS2CDartCheckGetBuffAck* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartCheckGetBuffAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartCheckGetBuffAck_descriptor_;
  metadata.reflection = PBS2CDartCheckGetBuffAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2SDartAddSupplyAsk::PBC2SDartAddSupplyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SDartAddSupplyAsk::InitAsDefaultInstance() {
}

PBC2SDartAddSupplyAsk::PBC2SDartAddSupplyAsk(const PBC2SDartAddSupplyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SDartAddSupplyAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SDartAddSupplyAsk::~PBC2SDartAddSupplyAsk() {
  SharedDtor();
}

void PBC2SDartAddSupplyAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SDartAddSupplyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SDartAddSupplyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SDartAddSupplyAsk_descriptor_;
}

const PBC2SDartAddSupplyAsk& PBC2SDartAddSupplyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SDartAddSupplyAsk* PBC2SDartAddSupplyAsk::default_instance_ = NULL;

PBC2SDartAddSupplyAsk* PBC2SDartAddSupplyAsk::New() const {
  return new PBC2SDartAddSupplyAsk;
}

void PBC2SDartAddSupplyAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SDartAddSupplyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2SDartAddSupplyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SDartAddSupplyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SDartAddSupplyAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SDartAddSupplyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SDartAddSupplyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SDartAddSupplyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SDartAddSupplyAsk::MergeFrom(const PBC2SDartAddSupplyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SDartAddSupplyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SDartAddSupplyAsk::CopyFrom(const PBC2SDartAddSupplyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SDartAddSupplyAsk::IsInitialized() const {
  
  return true;
}

void PBC2SDartAddSupplyAsk::Swap(PBC2SDartAddSupplyAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SDartAddSupplyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SDartAddSupplyAsk_descriptor_;
  metadata.reflection = PBC2SDartAddSupplyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2SDartAddSupplyConfirmAsk::PBC2SDartAddSupplyConfirmAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SDartAddSupplyConfirmAsk::InitAsDefaultInstance() {
}

PBC2SDartAddSupplyConfirmAsk::PBC2SDartAddSupplyConfirmAsk(const PBC2SDartAddSupplyConfirmAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SDartAddSupplyConfirmAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SDartAddSupplyConfirmAsk::~PBC2SDartAddSupplyConfirmAsk() {
  SharedDtor();
}

void PBC2SDartAddSupplyConfirmAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SDartAddSupplyConfirmAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SDartAddSupplyConfirmAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SDartAddSupplyConfirmAsk_descriptor_;
}

const PBC2SDartAddSupplyConfirmAsk& PBC2SDartAddSupplyConfirmAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SDartAddSupplyConfirmAsk* PBC2SDartAddSupplyConfirmAsk::default_instance_ = NULL;

PBC2SDartAddSupplyConfirmAsk* PBC2SDartAddSupplyConfirmAsk::New() const {
  return new PBC2SDartAddSupplyConfirmAsk;
}

void PBC2SDartAddSupplyConfirmAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SDartAddSupplyConfirmAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2SDartAddSupplyConfirmAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SDartAddSupplyConfirmAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SDartAddSupplyConfirmAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SDartAddSupplyConfirmAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SDartAddSupplyConfirmAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SDartAddSupplyConfirmAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SDartAddSupplyConfirmAsk::MergeFrom(const PBC2SDartAddSupplyConfirmAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SDartAddSupplyConfirmAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SDartAddSupplyConfirmAsk::CopyFrom(const PBC2SDartAddSupplyConfirmAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SDartAddSupplyConfirmAsk::IsInitialized() const {
  
  return true;
}

void PBC2SDartAddSupplyConfirmAsk::Swap(PBC2SDartAddSupplyConfirmAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SDartAddSupplyConfirmAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SDartAddSupplyConfirmAsk_descriptor_;
  metadata.reflection = PBC2SDartAddSupplyConfirmAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CDartFinishRobNtf::kReasonFieldNumber;
const int PBS2CDartFinishRobNtf::kLeaveCDFieldNumber;
#endif  // !_MSC_VER

PBS2CDartFinishRobNtf::PBS2CDartFinishRobNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartFinishRobNtf::InitAsDefaultInstance() {
}

PBS2CDartFinishRobNtf::PBS2CDartFinishRobNtf(const PBS2CDartFinishRobNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartFinishRobNtf::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0u;
  leavecd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartFinishRobNtf::~PBS2CDartFinishRobNtf() {
  SharedDtor();
}

void PBS2CDartFinishRobNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartFinishRobNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartFinishRobNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartFinishRobNtf_descriptor_;
}

const PBS2CDartFinishRobNtf& PBS2CDartFinishRobNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartFinishRobNtf* PBS2CDartFinishRobNtf::default_instance_ = NULL;

PBS2CDartFinishRobNtf* PBS2CDartFinishRobNtf::New() const {
  return new PBS2CDartFinishRobNtf;
}

void PBS2CDartFinishRobNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0u;
    leavecd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartFinishRobNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leaveCD;
        break;
      }
      
      // optional uint32 leaveCD = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaveCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leavecd_)));
          set_has_leavecd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CDartFinishRobNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reason(), output);
  }
  
  // optional uint32 leaveCD = 2;
  if (has_leavecd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leavecd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartFinishRobNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reason(), target);
  }
  
  // optional uint32 leaveCD = 2;
  if (has_leavecd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leavecd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartFinishRobNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
    // optional uint32 leaveCD = 2;
    if (has_leavecd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leavecd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartFinishRobNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartFinishRobNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartFinishRobNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartFinishRobNtf::MergeFrom(const PBS2CDartFinishRobNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_leavecd()) {
      set_leavecd(from.leavecd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartFinishRobNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartFinishRobNtf::CopyFrom(const PBS2CDartFinishRobNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartFinishRobNtf::IsInitialized() const {
  
  return true;
}

void PBS2CDartFinishRobNtf::Swap(PBS2CDartFinishRobNtf* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(leavecd_, other->leavecd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartFinishRobNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartFinishRobNtf_descriptor_;
  metadata.reflection = PBS2CDartFinishRobNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDartAddSupplyInfo::kNameFieldNumber;
const int PBDartAddSupplyInfo::kCountFieldNumber;
const int PBDartAddSupplyInfo::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

PBDartAddSupplyInfo::PBDartAddSupplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDartAddSupplyInfo::InitAsDefaultInstance() {
}

PBDartAddSupplyInfo::PBDartAddSupplyInfo(const PBDartAddSupplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDartAddSupplyInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDartAddSupplyInfo::~PBDartAddSupplyInfo() {
  SharedDtor();
}

void PBDartAddSupplyInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBDartAddSupplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDartAddSupplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDartAddSupplyInfo_descriptor_;
}

const PBDartAddSupplyInfo& PBDartAddSupplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBDartAddSupplyInfo* PBDartAddSupplyInfo::default_instance_ = NULL;

PBDartAddSupplyInfo* PBDartAddSupplyInfo::New() const {
  return new PBDartAddSupplyInfo;
}

void PBDartAddSupplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    count_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDartAddSupplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerID;
        break;
      }
      
      // optional uint32 playerID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDartAddSupplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // optional uint32 playerID = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDartAddSupplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // optional uint32 playerID = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDartAddSupplyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 playerID = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDartAddSupplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDartAddSupplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDartAddSupplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDartAddSupplyInfo::MergeFrom(const PBDartAddSupplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDartAddSupplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDartAddSupplyInfo::CopyFrom(const PBDartAddSupplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDartAddSupplyInfo::IsInitialized() const {
  
  return true;
}

void PBDartAddSupplyInfo::Swap(PBDartAddSupplyInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(count_, other->count_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDartAddSupplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDartAddSupplyInfo_descriptor_;
  metadata.reflection = PBDartAddSupplyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CDartAddSupplyNtf::kAddInfoFieldNumber;
const int PBS2CDartAddSupplyNtf::kIsLeaderFieldNumber;
const int PBS2CDartAddSupplyNtf::kIsCloseFieldNumber;
const int PBS2CDartAddSupplyNtf::kLeaderPlayerIDFieldNumber;
#endif  // !_MSC_VER

PBS2CDartAddSupplyNtf::PBS2CDartAddSupplyNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartAddSupplyNtf::InitAsDefaultInstance() {
}

PBS2CDartAddSupplyNtf::PBS2CDartAddSupplyNtf(const PBS2CDartAddSupplyNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartAddSupplyNtf::SharedCtor() {
  _cached_size_ = 0;
  isleader_ = false;
  isclose_ = false;
  leaderplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartAddSupplyNtf::~PBS2CDartAddSupplyNtf() {
  SharedDtor();
}

void PBS2CDartAddSupplyNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartAddSupplyNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartAddSupplyNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartAddSupplyNtf_descriptor_;
}

const PBS2CDartAddSupplyNtf& PBS2CDartAddSupplyNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartAddSupplyNtf* PBS2CDartAddSupplyNtf::default_instance_ = NULL;

PBS2CDartAddSupplyNtf* PBS2CDartAddSupplyNtf::New() const {
  return new PBS2CDartAddSupplyNtf;
}

void PBS2CDartAddSupplyNtf::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    isleader_ = false;
    isclose_ = false;
    leaderplayerid_ = 0u;
  }
  addinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartAddSupplyNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBDartAddSupplyInfo addInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_addInfo;
        if (input->ExpectTag(16)) goto parse_isLeader;
        break;
      }
      
      // optional bool isLeader = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isLeader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isleader_)));
          set_has_isleader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isClose;
        break;
      }
      
      // optional bool isClose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isclose_)));
          set_has_isclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leaderPlayerID;
        break;
      }
      
      // optional uint32 leaderPlayerID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderPlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaderplayerid_)));
          set_has_leaderplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CDartAddSupplyNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBDartAddSupplyInfo addInfo = 1;
  for (int i = 0; i < this->addinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->addinfo(i), output);
  }
  
  // optional bool isLeader = 2;
  if (has_isleader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isleader(), output);
  }
  
  // optional bool isClose = 3;
  if (has_isclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isclose(), output);
  }
  
  // optional uint32 leaderPlayerID = 4;
  if (has_leaderplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leaderplayerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartAddSupplyNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBDartAddSupplyInfo addInfo = 1;
  for (int i = 0; i < this->addinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->addinfo(i), target);
  }
  
  // optional bool isLeader = 2;
  if (has_isleader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isleader(), target);
  }
  
  // optional bool isClose = 3;
  if (has_isclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isclose(), target);
  }
  
  // optional uint32 leaderPlayerID = 4;
  if (has_leaderplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leaderplayerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartAddSupplyNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool isLeader = 2;
    if (has_isleader()) {
      total_size += 1 + 1;
    }
    
    // optional bool isClose = 3;
    if (has_isclose()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 leaderPlayerID = 4;
    if (has_leaderplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaderplayerid());
    }
    
  }
  // repeated .PBDartAddSupplyInfo addInfo = 1;
  total_size += 1 * this->addinfo_size();
  for (int i = 0; i < this->addinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartAddSupplyNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartAddSupplyNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartAddSupplyNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartAddSupplyNtf::MergeFrom(const PBS2CDartAddSupplyNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  addinfo_.MergeFrom(from.addinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_isleader()) {
      set_isleader(from.isleader());
    }
    if (from.has_isclose()) {
      set_isclose(from.isclose());
    }
    if (from.has_leaderplayerid()) {
      set_leaderplayerid(from.leaderplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartAddSupplyNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartAddSupplyNtf::CopyFrom(const PBS2CDartAddSupplyNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartAddSupplyNtf::IsInitialized() const {
  
  return true;
}

void PBS2CDartAddSupplyNtf::Swap(PBS2CDartAddSupplyNtf* other) {
  if (other != this) {
    addinfo_.Swap(&other->addinfo_);
    std::swap(isleader_, other->isleader_);
    std::swap(isclose_, other->isclose_);
    std::swap(leaderplayerid_, other->leaderplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartAddSupplyNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartAddSupplyNtf_descriptor_;
  metadata.reflection = PBS2CDartAddSupplyNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CDartAddSupplyAck::kResultFieldNumber;
#endif  // !_MSC_VER

PBS2CDartAddSupplyAck::PBS2CDartAddSupplyAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartAddSupplyAck::InitAsDefaultInstance() {
}

PBS2CDartAddSupplyAck::PBS2CDartAddSupplyAck(const PBS2CDartAddSupplyAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartAddSupplyAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartAddSupplyAck::~PBS2CDartAddSupplyAck() {
  SharedDtor();
}

void PBS2CDartAddSupplyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartAddSupplyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartAddSupplyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartAddSupplyAck_descriptor_;
}

const PBS2CDartAddSupplyAck& PBS2CDartAddSupplyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartAddSupplyAck* PBS2CDartAddSupplyAck::default_instance_ = NULL;

PBS2CDartAddSupplyAck* PBS2CDartAddSupplyAck::New() const {
  return new PBS2CDartAddSupplyAck;
}

void PBS2CDartAddSupplyAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartAddSupplyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CDartAddSupplyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartAddSupplyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartAddSupplyAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartAddSupplyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartAddSupplyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartAddSupplyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartAddSupplyAck::MergeFrom(const PBS2CDartAddSupplyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartAddSupplyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartAddSupplyAck::CopyFrom(const PBS2CDartAddSupplyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartAddSupplyAck::IsInitialized() const {
  
  return true;
}

void PBS2CDartAddSupplyAck::Swap(PBS2CDartAddSupplyAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartAddSupplyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartAddSupplyAck_descriptor_;
  metadata.reflection = PBS2CDartAddSupplyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBS2CDartQuitAck::PBS2CDartQuitAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartQuitAck::InitAsDefaultInstance() {
}

PBS2CDartQuitAck::PBS2CDartQuitAck(const PBS2CDartQuitAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartQuitAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartQuitAck::~PBS2CDartQuitAck() {
  SharedDtor();
}

void PBS2CDartQuitAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartQuitAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartQuitAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartQuitAck_descriptor_;
}

const PBS2CDartQuitAck& PBS2CDartQuitAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartQuitAck* PBS2CDartQuitAck::default_instance_ = NULL;

PBS2CDartQuitAck* PBS2CDartQuitAck::New() const {
  return new PBS2CDartQuitAck;
}

void PBS2CDartQuitAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartQuitAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBS2CDartQuitAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartQuitAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartQuitAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartQuitAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartQuitAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartQuitAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartQuitAck::MergeFrom(const PBS2CDartQuitAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartQuitAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartQuitAck::CopyFrom(const PBS2CDartQuitAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartQuitAck::IsInitialized() const {
  
  return true;
}

void PBS2CDartQuitAck::Swap(PBS2CDartQuitAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartQuitAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartQuitAck_descriptor_;
  metadata.reflection = PBS2CDartQuitAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBS2CDartCheckConfirmAck::PBS2CDartCheckConfirmAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartCheckConfirmAck::InitAsDefaultInstance() {
}

PBS2CDartCheckConfirmAck::PBS2CDartCheckConfirmAck(const PBS2CDartCheckConfirmAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartCheckConfirmAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartCheckConfirmAck::~PBS2CDartCheckConfirmAck() {
  SharedDtor();
}

void PBS2CDartCheckConfirmAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartCheckConfirmAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartCheckConfirmAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartCheckConfirmAck_descriptor_;
}

const PBS2CDartCheckConfirmAck& PBS2CDartCheckConfirmAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartCheckConfirmAck* PBS2CDartCheckConfirmAck::default_instance_ = NULL;

PBS2CDartCheckConfirmAck* PBS2CDartCheckConfirmAck::New() const {
  return new PBS2CDartCheckConfirmAck;
}

void PBS2CDartCheckConfirmAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartCheckConfirmAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBS2CDartCheckConfirmAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartCheckConfirmAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartCheckConfirmAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartCheckConfirmAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartCheckConfirmAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartCheckConfirmAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartCheckConfirmAck::MergeFrom(const PBS2CDartCheckConfirmAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartCheckConfirmAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartCheckConfirmAck::CopyFrom(const PBS2CDartCheckConfirmAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartCheckConfirmAck::IsInitialized() const {
  
  return true;
}

void PBS2CDartCheckConfirmAck::Swap(PBS2CDartCheckConfirmAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartCheckConfirmAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartCheckConfirmAck_descriptor_;
  metadata.reflection = PBS2CDartCheckConfirmAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBS2CDartAddSupplyConfirmAck::PBS2CDartAddSupplyConfirmAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartAddSupplyConfirmAck::InitAsDefaultInstance() {
}

PBS2CDartAddSupplyConfirmAck::PBS2CDartAddSupplyConfirmAck(const PBS2CDartAddSupplyConfirmAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartAddSupplyConfirmAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartAddSupplyConfirmAck::~PBS2CDartAddSupplyConfirmAck() {
  SharedDtor();
}

void PBS2CDartAddSupplyConfirmAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartAddSupplyConfirmAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartAddSupplyConfirmAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartAddSupplyConfirmAck_descriptor_;
}

const PBS2CDartAddSupplyConfirmAck& PBS2CDartAddSupplyConfirmAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartAddSupplyConfirmAck* PBS2CDartAddSupplyConfirmAck::default_instance_ = NULL;

PBS2CDartAddSupplyConfirmAck* PBS2CDartAddSupplyConfirmAck::New() const {
  return new PBS2CDartAddSupplyConfirmAck;
}

void PBS2CDartAddSupplyConfirmAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartAddSupplyConfirmAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBS2CDartAddSupplyConfirmAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartAddSupplyConfirmAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartAddSupplyConfirmAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartAddSupplyConfirmAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartAddSupplyConfirmAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartAddSupplyConfirmAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartAddSupplyConfirmAck::MergeFrom(const PBS2CDartAddSupplyConfirmAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartAddSupplyConfirmAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartAddSupplyConfirmAck::CopyFrom(const PBS2CDartAddSupplyConfirmAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartAddSupplyConfirmAck::IsInitialized() const {
  
  return true;
}

void PBS2CDartAddSupplyConfirmAck::Swap(PBS2CDartAddSupplyConfirmAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartAddSupplyConfirmAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartAddSupplyConfirmAck_descriptor_;
  metadata.reflection = PBS2CDartAddSupplyConfirmAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SDartBack2NpcAsk::kDartIDFieldNumber;
#endif  // !_MSC_VER

PBC2SDartBack2NpcAsk::PBC2SDartBack2NpcAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SDartBack2NpcAsk::InitAsDefaultInstance() {
}

PBC2SDartBack2NpcAsk::PBC2SDartBack2NpcAsk(const PBC2SDartBack2NpcAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SDartBack2NpcAsk::SharedCtor() {
  _cached_size_ = 0;
  dartid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SDartBack2NpcAsk::~PBC2SDartBack2NpcAsk() {
  SharedDtor();
}

void PBC2SDartBack2NpcAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SDartBack2NpcAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SDartBack2NpcAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SDartBack2NpcAsk_descriptor_;
}

const PBC2SDartBack2NpcAsk& PBC2SDartBack2NpcAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SDartBack2NpcAsk* PBC2SDartBack2NpcAsk::default_instance_ = NULL;

PBC2SDartBack2NpcAsk* PBC2SDartBack2NpcAsk::New() const {
  return new PBC2SDartBack2NpcAsk;
}

void PBC2SDartBack2NpcAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dartid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SDartBack2NpcAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dartID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dartid_)));
          set_has_dartid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SDartBack2NpcAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dartID = 1;
  if (has_dartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dartid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SDartBack2NpcAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dartID = 1;
  if (has_dartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dartid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SDartBack2NpcAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dartID = 1;
    if (has_dartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dartid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SDartBack2NpcAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SDartBack2NpcAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SDartBack2NpcAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SDartBack2NpcAsk::MergeFrom(const PBC2SDartBack2NpcAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dartid()) {
      set_dartid(from.dartid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SDartBack2NpcAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SDartBack2NpcAsk::CopyFrom(const PBC2SDartBack2NpcAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SDartBack2NpcAsk::IsInitialized() const {
  
  return true;
}

void PBC2SDartBack2NpcAsk::Swap(PBC2SDartBack2NpcAsk* other) {
  if (other != this) {
    std::swap(dartid_, other->dartid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SDartBack2NpcAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SDartBack2NpcAsk_descriptor_;
  metadata.reflection = PBC2SDartBack2NpcAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBS2CDartBack2NpcAck::PBS2CDartBack2NpcAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CDartBack2NpcAck::InitAsDefaultInstance() {
}

PBS2CDartBack2NpcAck::PBS2CDartBack2NpcAck(const PBS2CDartBack2NpcAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CDartBack2NpcAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CDartBack2NpcAck::~PBS2CDartBack2NpcAck() {
  SharedDtor();
}

void PBS2CDartBack2NpcAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CDartBack2NpcAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CDartBack2NpcAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CDartBack2NpcAck_descriptor_;
}

const PBS2CDartBack2NpcAck& PBS2CDartBack2NpcAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CDartBack2NpcAck* PBS2CDartBack2NpcAck::default_instance_ = NULL;

PBS2CDartBack2NpcAck* PBS2CDartBack2NpcAck::New() const {
  return new PBS2CDartBack2NpcAck;
}

void PBS2CDartBack2NpcAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CDartBack2NpcAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBS2CDartBack2NpcAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CDartBack2NpcAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CDartBack2NpcAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CDartBack2NpcAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CDartBack2NpcAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CDartBack2NpcAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CDartBack2NpcAck::MergeFrom(const PBS2CDartBack2NpcAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CDartBack2NpcAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CDartBack2NpcAck::CopyFrom(const PBS2CDartBack2NpcAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CDartBack2NpcAck::IsInitialized() const {
  
  return true;
}

void PBS2CDartBack2NpcAck::Swap(PBS2CDartBack2NpcAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CDartBack2NpcAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CDartBack2NpcAck_descriptor_;
  metadata.reflection = PBS2CDartBack2NpcAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionBossTopAsk::kBeginorderFieldNumber;
const int PBC2GFactionBossTopAsk::kCountFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionBossTopAsk::PBC2GFactionBossTopAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionBossTopAsk::InitAsDefaultInstance() {
}

PBC2GFactionBossTopAsk::PBC2GFactionBossTopAsk(const PBC2GFactionBossTopAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionBossTopAsk::SharedCtor() {
  _cached_size_ = 0;
  beginorder_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionBossTopAsk::~PBC2GFactionBossTopAsk() {
  SharedDtor();
}

void PBC2GFactionBossTopAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFactionBossTopAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionBossTopAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionBossTopAsk_descriptor_;
}

const PBC2GFactionBossTopAsk& PBC2GFactionBossTopAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GFactionBossTopAsk* PBC2GFactionBossTopAsk::default_instance_ = NULL;

PBC2GFactionBossTopAsk* PBC2GFactionBossTopAsk::New() const {
  return new PBC2GFactionBossTopAsk;
}

void PBC2GFactionBossTopAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginorder_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionBossTopAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginorder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginorder_)));
          set_has_beginorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionBossTopAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginorder = 1;
  if (has_beginorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginorder(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionBossTopAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginorder = 1;
  if (has_beginorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginorder(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionBossTopAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginorder = 1;
    if (has_beginorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginorder());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionBossTopAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionBossTopAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionBossTopAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionBossTopAsk::MergeFrom(const PBC2GFactionBossTopAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginorder()) {
      set_beginorder(from.beginorder());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionBossTopAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionBossTopAsk::CopyFrom(const PBC2GFactionBossTopAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionBossTopAsk::IsInitialized() const {
  
  return true;
}

void PBC2GFactionBossTopAsk::Swap(PBC2GFactionBossTopAsk* other) {
  if (other != this) {
    std::swap(beginorder_, other->beginorder_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionBossTopAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionBossTopAsk_descriptor_;
  metadata.reflection = PBC2GFactionBossTopAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionBossPersonalTopAck::kAskFieldNumber;
const int PBC2GFactionBossPersonalTopAck::kAllcountFieldNumber;
const int PBC2GFactionBossPersonalTopAck::kWholescoreFieldNumber;
const int PBC2GFactionBossPersonalTopAck::kSelfFieldNumber;
const int PBC2GFactionBossPersonalTopAck::kListFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionBossPersonalTopAck::PBC2GFactionBossPersonalTopAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionBossPersonalTopAck::InitAsDefaultInstance() {
  ask_ = const_cast< ::PBC2GFactionBossTopAsk*>(&::PBC2GFactionBossTopAsk::default_instance());
  self_ = const_cast< ::PBFactionBossPersonalTop*>(&::PBFactionBossPersonalTop::default_instance());
}

PBC2GFactionBossPersonalTopAck::PBC2GFactionBossPersonalTopAck(const PBC2GFactionBossPersonalTopAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionBossPersonalTopAck::SharedCtor() {
  _cached_size_ = 0;
  ask_ = NULL;
  allcount_ = 0u;
  wholescore_ = GOOGLE_ULONGLONG(0);
  self_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionBossPersonalTopAck::~PBC2GFactionBossPersonalTopAck() {
  SharedDtor();
}

void PBC2GFactionBossPersonalTopAck::SharedDtor() {
  if (this != default_instance_) {
    delete ask_;
    delete self_;
  }
}

void PBC2GFactionBossPersonalTopAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionBossPersonalTopAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionBossPersonalTopAck_descriptor_;
}

const PBC2GFactionBossPersonalTopAck& PBC2GFactionBossPersonalTopAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GFactionBossPersonalTopAck* PBC2GFactionBossPersonalTopAck::default_instance_ = NULL;

PBC2GFactionBossPersonalTopAck* PBC2GFactionBossPersonalTopAck::New() const {
  return new PBC2GFactionBossPersonalTopAck;
}

void PBC2GFactionBossPersonalTopAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ask()) {
      if (ask_ != NULL) ask_->::PBC2GFactionBossTopAsk::Clear();
    }
    allcount_ = 0u;
    wholescore_ = GOOGLE_ULONGLONG(0);
    if (has_self()) {
      if (self_ != NULL) self_->::PBFactionBossPersonalTop::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionBossPersonalTopAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBC2GFactionBossTopAsk ask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allcount;
        break;
      }
      
      // optional uint32 allcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allcount_)));
          set_has_allcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wholescore;
        break;
      }
      
      // optional uint64 wholescore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wholescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wholescore_)));
          set_has_wholescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_self;
        break;
      }
      
      // optional .PBFactionBossPersonalTop self = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list;
        break;
      }
      
      // repeated .PBFactionBossPersonalTop list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionBossPersonalTopAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBC2GFactionBossTopAsk ask = 1;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask(), output);
  }
  
  // optional uint32 allcount = 2;
  if (has_allcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allcount(), output);
  }
  
  // optional uint64 wholescore = 3;
  if (has_wholescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->wholescore(), output);
  }
  
  // optional .PBFactionBossPersonalTop self = 4;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->self(), output);
  }
  
  // repeated .PBFactionBossPersonalTop list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionBossPersonalTopAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBC2GFactionBossTopAsk ask = 1;
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask(), target);
  }
  
  // optional uint32 allcount = 2;
  if (has_allcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->allcount(), target);
  }
  
  // optional uint64 wholescore = 3;
  if (has_wholescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->wholescore(), target);
  }
  
  // optional .PBFactionBossPersonalTop self = 4;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->self(), target);
  }
  
  // repeated .PBFactionBossPersonalTop list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionBossPersonalTopAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBC2GFactionBossTopAsk ask = 1;
    if (has_ask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask());
    }
    
    // optional uint32 allcount = 2;
    if (has_allcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allcount());
    }
    
    // optional uint64 wholescore = 3;
    if (has_wholescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wholescore());
    }
    
    // optional .PBFactionBossPersonalTop self = 4;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self());
    }
    
  }
  // repeated .PBFactionBossPersonalTop list = 5;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionBossPersonalTopAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionBossPersonalTopAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionBossPersonalTopAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionBossPersonalTopAck::MergeFrom(const PBC2GFactionBossPersonalTopAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask()) {
      mutable_ask()->::PBC2GFactionBossTopAsk::MergeFrom(from.ask());
    }
    if (from.has_allcount()) {
      set_allcount(from.allcount());
    }
    if (from.has_wholescore()) {
      set_wholescore(from.wholescore());
    }
    if (from.has_self()) {
      mutable_self()->::PBFactionBossPersonalTop::MergeFrom(from.self());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionBossPersonalTopAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionBossPersonalTopAck::CopyFrom(const PBC2GFactionBossPersonalTopAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionBossPersonalTopAck::IsInitialized() const {
  
  return true;
}

void PBC2GFactionBossPersonalTopAck::Swap(PBC2GFactionBossPersonalTopAck* other) {
  if (other != this) {
    std::swap(ask_, other->ask_);
    std::swap(allcount_, other->allcount_);
    std::swap(wholescore_, other->wholescore_);
    std::swap(self_, other->self_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionBossPersonalTopAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionBossPersonalTopAck_descriptor_;
  metadata.reflection = PBC2GFactionBossPersonalTopAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionBossFactionTopAck::kAskFieldNumber;
const int PBC2GFactionBossFactionTopAck::kAllcountFieldNumber;
const int PBC2GFactionBossFactionTopAck::kWholescoreFieldNumber;
const int PBC2GFactionBossFactionTopAck::kSelfFieldNumber;
const int PBC2GFactionBossFactionTopAck::kListFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionBossFactionTopAck::PBC2GFactionBossFactionTopAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionBossFactionTopAck::InitAsDefaultInstance() {
  ask_ = const_cast< ::PBC2GFactionBossTopAsk*>(&::PBC2GFactionBossTopAsk::default_instance());
  self_ = const_cast< ::PBFactionBossFactionTop*>(&::PBFactionBossFactionTop::default_instance());
}

PBC2GFactionBossFactionTopAck::PBC2GFactionBossFactionTopAck(const PBC2GFactionBossFactionTopAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionBossFactionTopAck::SharedCtor() {
  _cached_size_ = 0;
  ask_ = NULL;
  allcount_ = 0u;
  wholescore_ = GOOGLE_ULONGLONG(0);
  self_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionBossFactionTopAck::~PBC2GFactionBossFactionTopAck() {
  SharedDtor();
}

void PBC2GFactionBossFactionTopAck::SharedDtor() {
  if (this != default_instance_) {
    delete ask_;
    delete self_;
  }
}

void PBC2GFactionBossFactionTopAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionBossFactionTopAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionBossFactionTopAck_descriptor_;
}

const PBC2GFactionBossFactionTopAck& PBC2GFactionBossFactionTopAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GFactionBossFactionTopAck* PBC2GFactionBossFactionTopAck::default_instance_ = NULL;

PBC2GFactionBossFactionTopAck* PBC2GFactionBossFactionTopAck::New() const {
  return new PBC2GFactionBossFactionTopAck;
}

void PBC2GFactionBossFactionTopAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ask()) {
      if (ask_ != NULL) ask_->::PBC2GFactionBossTopAsk::Clear();
    }
    allcount_ = 0u;
    wholescore_ = GOOGLE_ULONGLONG(0);
    if (has_self()) {
      if (self_ != NULL) self_->::PBFactionBossFactionTop::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionBossFactionTopAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBC2GFactionBossTopAsk ask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allcount;
        break;
      }
      
      // optional uint32 allcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allcount_)));
          set_has_allcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wholescore;
        break;
      }
      
      // optional uint64 wholescore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wholescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wholescore_)));
          set_has_wholescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_self;
        break;
      }
      
      // optional .PBFactionBossFactionTop self = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list;
        break;
      }
      
      // repeated .PBFactionBossFactionTop list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionBossFactionTopAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBC2GFactionBossTopAsk ask = 1;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask(), output);
  }
  
  // optional uint32 allcount = 2;
  if (has_allcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allcount(), output);
  }
  
  // optional uint64 wholescore = 3;
  if (has_wholescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->wholescore(), output);
  }
  
  // optional .PBFactionBossFactionTop self = 4;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->self(), output);
  }
  
  // repeated .PBFactionBossFactionTop list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionBossFactionTopAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBC2GFactionBossTopAsk ask = 1;
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask(), target);
  }
  
  // optional uint32 allcount = 2;
  if (has_allcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->allcount(), target);
  }
  
  // optional uint64 wholescore = 3;
  if (has_wholescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->wholescore(), target);
  }
  
  // optional .PBFactionBossFactionTop self = 4;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->self(), target);
  }
  
  // repeated .PBFactionBossFactionTop list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionBossFactionTopAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBC2GFactionBossTopAsk ask = 1;
    if (has_ask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask());
    }
    
    // optional uint32 allcount = 2;
    if (has_allcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allcount());
    }
    
    // optional uint64 wholescore = 3;
    if (has_wholescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wholescore());
    }
    
    // optional .PBFactionBossFactionTop self = 4;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self());
    }
    
  }
  // repeated .PBFactionBossFactionTop list = 5;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionBossFactionTopAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionBossFactionTopAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionBossFactionTopAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionBossFactionTopAck::MergeFrom(const PBC2GFactionBossFactionTopAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask()) {
      mutable_ask()->::PBC2GFactionBossTopAsk::MergeFrom(from.ask());
    }
    if (from.has_allcount()) {
      set_allcount(from.allcount());
    }
    if (from.has_wholescore()) {
      set_wholescore(from.wholescore());
    }
    if (from.has_self()) {
      mutable_self()->::PBFactionBossFactionTop::MergeFrom(from.self());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionBossFactionTopAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionBossFactionTopAck::CopyFrom(const PBC2GFactionBossFactionTopAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionBossFactionTopAck::IsInitialized() const {
  
  return true;
}

void PBC2GFactionBossFactionTopAck::Swap(PBC2GFactionBossFactionTopAck* other) {
  if (other != this) {
    std::swap(ask_, other->ask_);
    std::swap(allcount_, other->allcount_);
    std::swap(wholescore_, other->wholescore_);
    std::swap(self_, other->self_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionBossFactionTopAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionBossFactionTopAck_descriptor_;
  metadata.reflection = PBC2GFactionBossFactionTopAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFactionBossUnionTopAck::kAskFieldNumber;
const int PBC2GFactionBossUnionTopAck::kAllcountFieldNumber;
const int PBC2GFactionBossUnionTopAck::kWholescoreFieldNumber;
const int PBC2GFactionBossUnionTopAck::kSelfFieldNumber;
const int PBC2GFactionBossUnionTopAck::kListFieldNumber;
#endif  // !_MSC_VER

PBC2GFactionBossUnionTopAck::PBC2GFactionBossUnionTopAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFactionBossUnionTopAck::InitAsDefaultInstance() {
  ask_ = const_cast< ::PBC2GFactionBossTopAsk*>(&::PBC2GFactionBossTopAsk::default_instance());
  self_ = const_cast< ::PBFactionBossUnionTop*>(&::PBFactionBossUnionTop::default_instance());
}

PBC2GFactionBossUnionTopAck::PBC2GFactionBossUnionTopAck(const PBC2GFactionBossUnionTopAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFactionBossUnionTopAck::SharedCtor() {
  _cached_size_ = 0;
  ask_ = NULL;
  allcount_ = 0u;
  wholescore_ = GOOGLE_ULONGLONG(0);
  self_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFactionBossUnionTopAck::~PBC2GFactionBossUnionTopAck() {
  SharedDtor();
}

void PBC2GFactionBossUnionTopAck::SharedDtor() {
  if (this != default_instance_) {
    delete ask_;
    delete self_;
  }
}

void PBC2GFactionBossUnionTopAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFactionBossUnionTopAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFactionBossUnionTopAck_descriptor_;
}

const PBC2GFactionBossUnionTopAck& PBC2GFactionBossUnionTopAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GFactionBossUnionTopAck* PBC2GFactionBossUnionTopAck::default_instance_ = NULL;

PBC2GFactionBossUnionTopAck* PBC2GFactionBossUnionTopAck::New() const {
  return new PBC2GFactionBossUnionTopAck;
}

void PBC2GFactionBossUnionTopAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ask()) {
      if (ask_ != NULL) ask_->::PBC2GFactionBossTopAsk::Clear();
    }
    allcount_ = 0u;
    wholescore_ = GOOGLE_ULONGLONG(0);
    if (has_self()) {
      if (self_ != NULL) self_->::PBFactionBossUnionTop::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFactionBossUnionTopAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBC2GFactionBossTopAsk ask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allcount;
        break;
      }
      
      // optional uint32 allcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allcount_)));
          set_has_allcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wholescore;
        break;
      }
      
      // optional uint64 wholescore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wholescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wholescore_)));
          set_has_wholescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_self;
        break;
      }
      
      // optional .PBFactionBossUnionTop self = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list;
        break;
      }
      
      // repeated .PBFactionBossUnionTop list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFactionBossUnionTopAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBC2GFactionBossTopAsk ask = 1;
  if (has_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask(), output);
  }
  
  // optional uint32 allcount = 2;
  if (has_allcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allcount(), output);
  }
  
  // optional uint64 wholescore = 3;
  if (has_wholescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->wholescore(), output);
  }
  
  // optional .PBFactionBossUnionTop self = 4;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->self(), output);
  }
  
  // repeated .PBFactionBossUnionTop list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFactionBossUnionTopAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBC2GFactionBossTopAsk ask = 1;
  if (has_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask(), target);
  }
  
  // optional uint32 allcount = 2;
  if (has_allcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->allcount(), target);
  }
  
  // optional uint64 wholescore = 3;
  if (has_wholescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->wholescore(), target);
  }
  
  // optional .PBFactionBossUnionTop self = 4;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->self(), target);
  }
  
  // repeated .PBFactionBossUnionTop list = 5;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFactionBossUnionTopAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBC2GFactionBossTopAsk ask = 1;
    if (has_ask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask());
    }
    
    // optional uint32 allcount = 2;
    if (has_allcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allcount());
    }
    
    // optional uint64 wholescore = 3;
    if (has_wholescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wholescore());
    }
    
    // optional .PBFactionBossUnionTop self = 4;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self());
    }
    
  }
  // repeated .PBFactionBossUnionTop list = 5;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFactionBossUnionTopAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFactionBossUnionTopAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFactionBossUnionTopAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFactionBossUnionTopAck::MergeFrom(const PBC2GFactionBossUnionTopAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask()) {
      mutable_ask()->::PBC2GFactionBossTopAsk::MergeFrom(from.ask());
    }
    if (from.has_allcount()) {
      set_allcount(from.allcount());
    }
    if (from.has_wholescore()) {
      set_wholescore(from.wholescore());
    }
    if (from.has_self()) {
      mutable_self()->::PBFactionBossUnionTop::MergeFrom(from.self());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFactionBossUnionTopAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFactionBossUnionTopAck::CopyFrom(const PBC2GFactionBossUnionTopAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFactionBossUnionTopAck::IsInitialized() const {
  
  return true;
}

void PBC2GFactionBossUnionTopAck::Swap(PBC2GFactionBossUnionTopAck* other) {
  if (other != this) {
    std::swap(ask_, other->ask_);
    std::swap(allcount_, other->allcount_);
    std::swap(wholescore_, other->wholescore_);
    std::swap(self_, other->self_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFactionBossUnionTopAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFactionBossUnionTopAck_descriptor_;
  metadata.reflection = PBC2GFactionBossUnionTopAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CSceneAreaList::kAreaidFieldNumber;
#endif  // !_MSC_VER

PBS2CSceneAreaList::PBS2CSceneAreaList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CSceneAreaList::InitAsDefaultInstance() {
}

PBS2CSceneAreaList::PBS2CSceneAreaList(const PBS2CSceneAreaList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CSceneAreaList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CSceneAreaList::~PBS2CSceneAreaList() {
  SharedDtor();
}

void PBS2CSceneAreaList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CSceneAreaList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CSceneAreaList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CSceneAreaList_descriptor_;
}

const PBS2CSceneAreaList& PBS2CSceneAreaList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CSceneAreaList* PBS2CSceneAreaList::default_instance_ = NULL;

PBS2CSceneAreaList* PBS2CSceneAreaList::New() const {
  return new PBS2CSceneAreaList;
}

void PBS2CSceneAreaList::Clear() {
  areaid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CSceneAreaList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 areaid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_areaid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_areaid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_areaid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CSceneAreaList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 areaid = 1;
  for (int i = 0; i < this->areaid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->areaid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CSceneAreaList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 areaid = 1;
  for (int i = 0; i < this->areaid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->areaid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CSceneAreaList::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 areaid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->areaid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->areaid(i));
    }
    total_size += 1 * this->areaid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CSceneAreaList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CSceneAreaList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CSceneAreaList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CSceneAreaList::MergeFrom(const PBS2CSceneAreaList& from) {
  GOOGLE_CHECK_NE(&from, this);
  areaid_.MergeFrom(from.areaid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CSceneAreaList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CSceneAreaList::CopyFrom(const PBS2CSceneAreaList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CSceneAreaList::IsInitialized() const {
  
  return true;
}

void PBS2CSceneAreaList::Swap(PBS2CSceneAreaList* other) {
  if (other != this) {
    areaid_.Swap(&other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CSceneAreaList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CSceneAreaList_descriptor_;
  metadata.reflection = PBS2CSceneAreaList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CQinggongStartNtf::kUnitidFieldNumber;
const int PBS2CQinggongStartNtf::kQinggongidFieldNumber;
#endif  // !_MSC_VER

PBS2CQinggongStartNtf::PBS2CQinggongStartNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CQinggongStartNtf::InitAsDefaultInstance() {
}

PBS2CQinggongStartNtf::PBS2CQinggongStartNtf(const PBS2CQinggongStartNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CQinggongStartNtf::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = 0u;
  qinggongid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CQinggongStartNtf::~PBS2CQinggongStartNtf() {
  SharedDtor();
}

void PBS2CQinggongStartNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CQinggongStartNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CQinggongStartNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CQinggongStartNtf_descriptor_;
}

const PBS2CQinggongStartNtf& PBS2CQinggongStartNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CQinggongStartNtf* PBS2CQinggongStartNtf::default_instance_ = NULL;

PBS2CQinggongStartNtf* PBS2CQinggongStartNtf::New() const {
  return new PBS2CQinggongStartNtf;
}

void PBS2CQinggongStartNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unitid_ = 0u;
    qinggongid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CQinggongStartNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_qinggongid;
        break;
      }
      
      // optional uint32 qinggongid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qinggongid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qinggongid_)));
          set_has_qinggongid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CQinggongStartNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unitid(), output);
  }
  
  // optional uint32 qinggongid = 2;
  if (has_qinggongid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qinggongid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CQinggongStartNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unitid(), target);
  }
  
  // optional uint32 qinggongid = 2;
  if (has_qinggongid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qinggongid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CQinggongStartNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unitid = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
    // optional uint32 qinggongid = 2;
    if (has_qinggongid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qinggongid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CQinggongStartNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CQinggongStartNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CQinggongStartNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CQinggongStartNtf::MergeFrom(const PBS2CQinggongStartNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_qinggongid()) {
      set_qinggongid(from.qinggongid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CQinggongStartNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CQinggongStartNtf::CopyFrom(const PBS2CQinggongStartNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CQinggongStartNtf::IsInitialized() const {
  
  return true;
}

void PBS2CQinggongStartNtf::Swap(PBS2CQinggongStartNtf* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(qinggongid_, other->qinggongid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CQinggongStartNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CQinggongStartNtf_descriptor_;
  metadata.reflection = PBS2CQinggongStartNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleAttrDetail::kSourcetypeFieldNumber;
const int PBBattleAttrDetail::kValueFieldNumber;
#endif  // !_MSC_VER

PBBattleAttrDetail::PBBattleAttrDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleAttrDetail::InitAsDefaultInstance() {
}

PBBattleAttrDetail::PBBattleAttrDetail(const PBBattleAttrDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleAttrDetail::SharedCtor() {
  _cached_size_ = 0;
  sourcetype_ = 0u;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleAttrDetail::~PBBattleAttrDetail() {
  SharedDtor();
}

void PBBattleAttrDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBattleAttrDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleAttrDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleAttrDetail_descriptor_;
}

const PBBattleAttrDetail& PBBattleAttrDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBBattleAttrDetail* PBBattleAttrDetail::default_instance_ = NULL;

PBBattleAttrDetail* PBBattleAttrDetail::New() const {
  return new PBBattleAttrDetail;
}

void PBBattleAttrDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourcetype_ = 0u;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleAttrDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sourcetype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcetype_)));
          set_has_sourcetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleAttrDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sourcetype = 1;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sourcetype(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleAttrDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sourcetype = 1;
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sourcetype(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleAttrDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sourcetype = 1;
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourcetype());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleAttrDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleAttrDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleAttrDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleAttrDetail::MergeFrom(const PBBattleAttrDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleAttrDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleAttrDetail::CopyFrom(const PBBattleAttrDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleAttrDetail::IsInitialized() const {
  
  return true;
}

void PBBattleAttrDetail::Swap(PBBattleAttrDetail* other) {
  if (other != this) {
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleAttrDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleAttrDetail_descriptor_;
  metadata.reflection = PBBattleAttrDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBS2CGetBattleAttrDetailAck::kTypeFieldNumber;
const int PBS2CGetBattleAttrDetailAck::kDetailFieldNumber;
const int PBS2CGetBattleAttrDetailAck::kTotalFieldNumber;
#endif  // !_MSC_VER

PBS2CGetBattleAttrDetailAck::PBS2CGetBattleAttrDetailAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CGetBattleAttrDetailAck::InitAsDefaultInstance() {
}

PBS2CGetBattleAttrDetailAck::PBS2CGetBattleAttrDetailAck(const PBS2CGetBattleAttrDetailAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CGetBattleAttrDetailAck::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CGetBattleAttrDetailAck::~PBS2CGetBattleAttrDetailAck() {
  SharedDtor();
}

void PBS2CGetBattleAttrDetailAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CGetBattleAttrDetailAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CGetBattleAttrDetailAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CGetBattleAttrDetailAck_descriptor_;
}

const PBS2CGetBattleAttrDetailAck& PBS2CGetBattleAttrDetailAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CGetBattleAttrDetailAck* PBS2CGetBattleAttrDetailAck::default_instance_ = NULL;

PBS2CGetBattleAttrDetailAck* PBS2CGetBattleAttrDetailAck::New() const {
  return new PBS2CGetBattleAttrDetailAck;
}

void PBS2CGetBattleAttrDetailAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    total_ = 0;
  }
  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CGetBattleAttrDetailAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }
      
      // repeated .PBBattleAttrDetail detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        if (input->ExpectTag(24)) goto parse_total;
        break;
      }
      
      // optional int32 total = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBS2CGetBattleAttrDetailAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // repeated .PBBattleAttrDetail detail = 2;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(i), output);
  }
  
  // optional int32 total = 3;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CGetBattleAttrDetailAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // repeated .PBBattleAttrDetail detail = 2;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(i), target);
  }
  
  // optional int32 total = 3;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CGetBattleAttrDetailAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional int32 total = 3;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }
    
  }
  // repeated .PBBattleAttrDetail detail = 2;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CGetBattleAttrDetailAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CGetBattleAttrDetailAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CGetBattleAttrDetailAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CGetBattleAttrDetailAck::MergeFrom(const PBS2CGetBattleAttrDetailAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CGetBattleAttrDetailAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CGetBattleAttrDetailAck::CopyFrom(const PBS2CGetBattleAttrDetailAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CGetBattleAttrDetailAck::IsInitialized() const {
  
  return true;
}

void PBS2CGetBattleAttrDetailAck::Swap(PBS2CGetBattleAttrDetailAck* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    detail_.Swap(&other->detail_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CGetBattleAttrDetailAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CGetBattleAttrDetailAck_descriptor_;
  metadata.reflection = PBS2CGetBattleAttrDetailAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTitleEquipAsk::kIdFieldNumber;
#endif  // !_MSC_VER

PBC2GTitleEquipAsk::PBC2GTitleEquipAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTitleEquipAsk::InitAsDefaultInstance() {
}

PBC2GTitleEquipAsk::PBC2GTitleEquipAsk(const PBC2GTitleEquipAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTitleEquipAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTitleEquipAsk::~PBC2GTitleEquipAsk() {
  SharedDtor();
}

void PBC2GTitleEquipAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTitleEquipAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTitleEquipAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTitleEquipAsk_descriptor_;
}

const PBC2GTitleEquipAsk& PBC2GTitleEquipAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GTitleEquipAsk* PBC2GTitleEquipAsk::default_instance_ = NULL;

PBC2GTitleEquipAsk* PBC2GTitleEquipAsk::New() const {
  return new PBC2GTitleEquipAsk;
}

void PBC2GTitleEquipAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTitleEquipAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTitleEquipAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTitleEquipAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTitleEquipAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTitleEquipAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTitleEquipAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTitleEquipAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTitleEquipAsk::MergeFrom(const PBC2GTitleEquipAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTitleEquipAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTitleEquipAsk::CopyFrom(const PBC2GTitleEquipAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTitleEquipAsk::IsInitialized() const {
  
  return true;
}

void PBC2GTitleEquipAsk::Swap(PBC2GTitleEquipAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTitleEquipAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTitleEquipAsk_descriptor_;
  metadata.reflection = PBC2GTitleEquipAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTitleEquipAck::kIdFieldNumber;
#endif  // !_MSC_VER

PBG2CTitleEquipAck::PBG2CTitleEquipAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTitleEquipAck::InitAsDefaultInstance() {
}

PBG2CTitleEquipAck::PBG2CTitleEquipAck(const PBG2CTitleEquipAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTitleEquipAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTitleEquipAck::~PBG2CTitleEquipAck() {
  SharedDtor();
}

void PBG2CTitleEquipAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CTitleEquipAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTitleEquipAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTitleEquipAck_descriptor_;
}

const PBG2CTitleEquipAck& PBG2CTitleEquipAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTitleEquipAck* PBG2CTitleEquipAck::default_instance_ = NULL;

PBG2CTitleEquipAck* PBG2CTitleEquipAck::New() const {
  return new PBG2CTitleEquipAck;
}

void PBG2CTitleEquipAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTitleEquipAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTitleEquipAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTitleEquipAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTitleEquipAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTitleEquipAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTitleEquipAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTitleEquipAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTitleEquipAck::MergeFrom(const PBG2CTitleEquipAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTitleEquipAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTitleEquipAck::CopyFrom(const PBG2CTitleEquipAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTitleEquipAck::IsInitialized() const {
  
  return true;
}

void PBG2CTitleEquipAck::Swap(PBG2CTitleEquipAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTitleEquipAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTitleEquipAck_descriptor_;
  metadata.reflection = PBG2CTitleEquipAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GTitleUnEquipAsk::kIdFieldNumber;
#endif  // !_MSC_VER

PBC2GTitleUnEquipAsk::PBC2GTitleUnEquipAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GTitleUnEquipAsk::InitAsDefaultInstance() {
}

PBC2GTitleUnEquipAsk::PBC2GTitleUnEquipAsk(const PBC2GTitleUnEquipAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GTitleUnEquipAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GTitleUnEquipAsk::~PBC2GTitleUnEquipAsk() {
  SharedDtor();
}

void PBC2GTitleUnEquipAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GTitleUnEquipAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GTitleUnEquipAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GTitleUnEquipAsk_descriptor_;
}

const PBC2GTitleUnEquipAsk& PBC2GTitleUnEquipAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GTitleUnEquipAsk* PBC2GTitleUnEquipAsk::default_instance_ = NULL;

PBC2GTitleUnEquipAsk* PBC2GTitleUnEquipAsk::New() const {
  return new PBC2GTitleUnEquipAsk;
}

void PBC2GTitleUnEquipAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GTitleUnEquipAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GTitleUnEquipAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GTitleUnEquipAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GTitleUnEquipAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GTitleUnEquipAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GTitleUnEquipAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GTitleUnEquipAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GTitleUnEquipAsk::MergeFrom(const PBC2GTitleUnEquipAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GTitleUnEquipAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GTitleUnEquipAsk::CopyFrom(const PBC2GTitleUnEquipAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GTitleUnEquipAsk::IsInitialized() const {
  
  return true;
}

void PBC2GTitleUnEquipAsk::Swap(PBC2GTitleUnEquipAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GTitleUnEquipAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GTitleUnEquipAsk_descriptor_;
  metadata.reflection = PBC2GTitleUnEquipAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTitleUnEquipAck::kIdFieldNumber;
#endif  // !_MSC_VER

PBG2CTitleUnEquipAck::PBG2CTitleUnEquipAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTitleUnEquipAck::InitAsDefaultInstance() {
}

PBG2CTitleUnEquipAck::PBG2CTitleUnEquipAck(const PBG2CTitleUnEquipAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTitleUnEquipAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTitleUnEquipAck::~PBG2CTitleUnEquipAck() {
  SharedDtor();
}

void PBG2CTitleUnEquipAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CTitleUnEquipAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTitleUnEquipAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTitleUnEquipAck_descriptor_;
}

const PBG2CTitleUnEquipAck& PBG2CTitleUnEquipAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTitleUnEquipAck* PBG2CTitleUnEquipAck::default_instance_ = NULL;

PBG2CTitleUnEquipAck* PBG2CTitleUnEquipAck::New() const {
  return new PBG2CTitleUnEquipAck;
}

void PBG2CTitleUnEquipAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTitleUnEquipAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTitleUnEquipAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTitleUnEquipAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTitleUnEquipAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTitleUnEquipAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTitleUnEquipAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTitleUnEquipAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTitleUnEquipAck::MergeFrom(const PBG2CTitleUnEquipAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTitleUnEquipAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTitleUnEquipAck::CopyFrom(const PBG2CTitleUnEquipAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTitleUnEquipAck::IsInitialized() const {
  
  return true;
}

void PBG2CTitleUnEquipAck::Swap(PBG2CTitleUnEquipAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTitleUnEquipAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTitleUnEquipAck_descriptor_;
  metadata.reflection = PBG2CTitleUnEquipAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTitleAddAck::kTypeFieldNumber;
const int PBG2CTitleAddAck::kInfoFieldNumber;
#endif  // !_MSC_VER

PBG2CTitleAddAck::PBG2CTitleAddAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTitleAddAck::InitAsDefaultInstance() {
  info_ = const_cast< ::PBPlayerTitleInfo*>(&::PBPlayerTitleInfo::default_instance());
}

PBG2CTitleAddAck::PBG2CTitleAddAck(const PBG2CTitleAddAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTitleAddAck::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTitleAddAck::~PBG2CTitleAddAck() {
  SharedDtor();
}

void PBG2CTitleAddAck::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PBG2CTitleAddAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTitleAddAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTitleAddAck_descriptor_;
}

const PBG2CTitleAddAck& PBG2CTitleAddAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTitleAddAck* PBG2CTitleAddAck::default_instance_ = NULL;

PBG2CTitleAddAck* PBG2CTitleAddAck::New() const {
  return new PBG2CTitleAddAck;
}

void PBG2CTitleAddAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::PBPlayerTitleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTitleAddAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional .PBPlayerTitleInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTitleAddAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional .PBPlayerTitleInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTitleAddAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional .PBPlayerTitleInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTitleAddAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional .PBPlayerTitleInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTitleAddAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTitleAddAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTitleAddAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTitleAddAck::MergeFrom(const PBG2CTitleAddAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::PBPlayerTitleInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTitleAddAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTitleAddAck::CopyFrom(const PBG2CTitleAddAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTitleAddAck::IsInitialized() const {
  
  return true;
}

void PBG2CTitleAddAck::Swap(PBG2CTitleAddAck* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTitleAddAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTitleAddAck_descriptor_;
  metadata.reflection = PBG2CTitleAddAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CTitleDelAck::kTypeFieldNumber;
const int PBG2CTitleDelAck::kIdFieldNumber;
#endif  // !_MSC_VER

PBG2CTitleDelAck::PBG2CTitleDelAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CTitleDelAck::InitAsDefaultInstance() {
}

PBG2CTitleDelAck::PBG2CTitleDelAck(const PBG2CTitleDelAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CTitleDelAck::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CTitleDelAck::~PBG2CTitleDelAck() {
  SharedDtor();
}

void PBG2CTitleDelAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CTitleDelAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CTitleDelAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CTitleDelAck_descriptor_;
}

const PBG2CTitleDelAck& PBG2CTitleDelAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CTitleDelAck* PBG2CTitleDelAck::default_instance_ = NULL;

PBG2CTitleDelAck* PBG2CTitleDelAck::New() const {
  return new PBG2CTitleDelAck;
}

void PBG2CTitleDelAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CTitleDelAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CTitleDelAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CTitleDelAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CTitleDelAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CTitleDelAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CTitleDelAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CTitleDelAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CTitleDelAck::MergeFrom(const PBG2CTitleDelAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CTitleDelAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CTitleDelAck::CopyFrom(const PBG2CTitleDelAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CTitleDelAck::IsInitialized() const {
  
  return true;
}

void PBG2CTitleDelAck::Swap(PBG2CTitleDelAck* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CTitleDelAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CTitleDelAck_descriptor_;
  metadata.reflection = PBG2CTitleDelAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFashionEquipAsk::kIdFieldNumber;
#endif  // !_MSC_VER

PBC2GFashionEquipAsk::PBC2GFashionEquipAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFashionEquipAsk::InitAsDefaultInstance() {
}

PBC2GFashionEquipAsk::PBC2GFashionEquipAsk(const PBC2GFashionEquipAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFashionEquipAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFashionEquipAsk::~PBC2GFashionEquipAsk() {
  SharedDtor();
}

void PBC2GFashionEquipAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFashionEquipAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFashionEquipAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFashionEquipAsk_descriptor_;
}

const PBC2GFashionEquipAsk& PBC2GFashionEquipAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GFashionEquipAsk* PBC2GFashionEquipAsk::default_instance_ = NULL;

PBC2GFashionEquipAsk* PBC2GFashionEquipAsk::New() const {
  return new PBC2GFashionEquipAsk;
}

void PBC2GFashionEquipAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFashionEquipAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFashionEquipAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFashionEquipAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFashionEquipAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFashionEquipAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFashionEquipAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFashionEquipAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFashionEquipAsk::MergeFrom(const PBC2GFashionEquipAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFashionEquipAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFashionEquipAsk::CopyFrom(const PBC2GFashionEquipAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFashionEquipAsk::IsInitialized() const {
  
  return true;
}

void PBC2GFashionEquipAsk::Swap(PBC2GFashionEquipAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFashionEquipAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFashionEquipAsk_descriptor_;
  metadata.reflection = PBC2GFashionEquipAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFashionEquipAck::kIdFieldNumber;
#endif  // !_MSC_VER

PBG2CFashionEquipAck::PBG2CFashionEquipAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFashionEquipAck::InitAsDefaultInstance() {
}

PBG2CFashionEquipAck::PBG2CFashionEquipAck(const PBG2CFashionEquipAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFashionEquipAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFashionEquipAck::~PBG2CFashionEquipAck() {
  SharedDtor();
}

void PBG2CFashionEquipAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFashionEquipAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFashionEquipAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFashionEquipAck_descriptor_;
}

const PBG2CFashionEquipAck& PBG2CFashionEquipAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CFashionEquipAck* PBG2CFashionEquipAck::default_instance_ = NULL;

PBG2CFashionEquipAck* PBG2CFashionEquipAck::New() const {
  return new PBG2CFashionEquipAck;
}

void PBG2CFashionEquipAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFashionEquipAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFashionEquipAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFashionEquipAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFashionEquipAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFashionEquipAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFashionEquipAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFashionEquipAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFashionEquipAck::MergeFrom(const PBG2CFashionEquipAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFashionEquipAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFashionEquipAck::CopyFrom(const PBG2CFashionEquipAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFashionEquipAck::IsInitialized() const {
  
  return true;
}

void PBG2CFashionEquipAck::Swap(PBG2CFashionEquipAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFashionEquipAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFashionEquipAck_descriptor_;
  metadata.reflection = PBG2CFashionEquipAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GFashionUnEquipAsk::kIdFieldNumber;
#endif  // !_MSC_VER

PBC2GFashionUnEquipAsk::PBC2GFashionUnEquipAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GFashionUnEquipAsk::InitAsDefaultInstance() {
}

PBC2GFashionUnEquipAsk::PBC2GFashionUnEquipAsk(const PBC2GFashionUnEquipAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GFashionUnEquipAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GFashionUnEquipAsk::~PBC2GFashionUnEquipAsk() {
  SharedDtor();
}

void PBC2GFashionUnEquipAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GFashionUnEquipAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GFashionUnEquipAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GFashionUnEquipAsk_descriptor_;
}

const PBC2GFashionUnEquipAsk& PBC2GFashionUnEquipAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GFashionUnEquipAsk* PBC2GFashionUnEquipAsk::default_instance_ = NULL;

PBC2GFashionUnEquipAsk* PBC2GFashionUnEquipAsk::New() const {
  return new PBC2GFashionUnEquipAsk;
}

void PBC2GFashionUnEquipAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GFashionUnEquipAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GFashionUnEquipAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GFashionUnEquipAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GFashionUnEquipAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GFashionUnEquipAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GFashionUnEquipAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GFashionUnEquipAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GFashionUnEquipAsk::MergeFrom(const PBC2GFashionUnEquipAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GFashionUnEquipAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GFashionUnEquipAsk::CopyFrom(const PBC2GFashionUnEquipAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GFashionUnEquipAsk::IsInitialized() const {
  
  return true;
}

void PBC2GFashionUnEquipAsk::Swap(PBC2GFashionUnEquipAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GFashionUnEquipAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GFashionUnEquipAsk_descriptor_;
  metadata.reflection = PBC2GFashionUnEquipAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CFashionUnEquipAck::kIdFieldNumber;
#endif  // !_MSC_VER

PBG2CFashionUnEquipAck::PBG2CFashionUnEquipAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CFashionUnEquipAck::InitAsDefaultInstance() {
}

PBG2CFashionUnEquipAck::PBG2CFashionUnEquipAck(const PBG2CFashionUnEquipAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CFashionUnEquipAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CFashionUnEquipAck::~PBG2CFashionUnEquipAck() {
  SharedDtor();
}

void PBG2CFashionUnEquipAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CFashionUnEquipAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CFashionUnEquipAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CFashionUnEquipAck_descriptor_;
}

const PBG2CFashionUnEquipAck& PBG2CFashionUnEquipAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CFashionUnEquipAck* PBG2CFashionUnEquipAck::default_instance_ = NULL;

PBG2CFashionUnEquipAck* PBG2CFashionUnEquipAck::New() const {
  return new PBG2CFashionUnEquipAck;
}

void PBG2CFashionUnEquipAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CFashionUnEquipAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CFashionUnEquipAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CFashionUnEquipAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CFashionUnEquipAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CFashionUnEquipAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CFashionUnEquipAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CFashionUnEquipAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CFashionUnEquipAck::MergeFrom(const PBG2CFashionUnEquipAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CFashionUnEquipAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CFashionUnEquipAck::CopyFrom(const PBG2CFashionUnEquipAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CFashionUnEquipAck::IsInitialized() const {
  
  return true;
}

void PBG2CFashionUnEquipAck::Swap(PBG2CFashionUnEquipAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CFashionUnEquipAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CFashionUnEquipAck_descriptor_;
  metadata.reflection = PBG2CFashionUnEquipAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBClimbTowerGetInfoAsk::PBClimbTowerGetInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClimbTowerGetInfoAsk::InitAsDefaultInstance() {
}

PBClimbTowerGetInfoAsk::PBClimbTowerGetInfoAsk(const PBClimbTowerGetInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClimbTowerGetInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClimbTowerGetInfoAsk::~PBClimbTowerGetInfoAsk() {
  SharedDtor();
}

void PBClimbTowerGetInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBClimbTowerGetInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClimbTowerGetInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClimbTowerGetInfoAsk_descriptor_;
}

const PBClimbTowerGetInfoAsk& PBClimbTowerGetInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBClimbTowerGetInfoAsk* PBClimbTowerGetInfoAsk::default_instance_ = NULL;

PBClimbTowerGetInfoAsk* PBClimbTowerGetInfoAsk::New() const {
  return new PBClimbTowerGetInfoAsk;
}

void PBClimbTowerGetInfoAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClimbTowerGetInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBClimbTowerGetInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClimbTowerGetInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClimbTowerGetInfoAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClimbTowerGetInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClimbTowerGetInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClimbTowerGetInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClimbTowerGetInfoAsk::MergeFrom(const PBClimbTowerGetInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClimbTowerGetInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClimbTowerGetInfoAsk::CopyFrom(const PBClimbTowerGetInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClimbTowerGetInfoAsk::IsInitialized() const {
  
  return true;
}

void PBClimbTowerGetInfoAsk::Swap(PBClimbTowerGetInfoAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClimbTowerGetInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClimbTowerGetInfoAsk_descriptor_;
  metadata.reflection = PBClimbTowerGetInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBClimbTowerGetInfoAck::kInfoFieldNumber;
const int PBClimbTowerGetInfoAck::kCanChallengeFieldNumber;
#endif  // !_MSC_VER

PBClimbTowerGetInfoAck::PBClimbTowerGetInfoAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClimbTowerGetInfoAck::InitAsDefaultInstance() {
  info_ = const_cast< ::PBPlayerClimbTower*>(&::PBPlayerClimbTower::default_instance());
}

PBClimbTowerGetInfoAck::PBClimbTowerGetInfoAck(const PBClimbTowerGetInfoAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClimbTowerGetInfoAck::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  canchallenge_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClimbTowerGetInfoAck::~PBClimbTowerGetInfoAck() {
  SharedDtor();
}

void PBClimbTowerGetInfoAck::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PBClimbTowerGetInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClimbTowerGetInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClimbTowerGetInfoAck_descriptor_;
}

const PBClimbTowerGetInfoAck& PBClimbTowerGetInfoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBClimbTowerGetInfoAck* PBClimbTowerGetInfoAck::default_instance_ = NULL;

PBClimbTowerGetInfoAck* PBClimbTowerGetInfoAck::New() const {
  return new PBClimbTowerGetInfoAck;
}

void PBClimbTowerGetInfoAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::PBPlayerClimbTower::Clear();
    }
    canchallenge_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClimbTowerGetInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerClimbTower info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_canChallenge;
        break;
      }
      
      // optional bool canChallenge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canChallenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canchallenge_)));
          set_has_canchallenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBClimbTowerGetInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerClimbTower info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional bool canChallenge = 2;
  if (has_canchallenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->canchallenge(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClimbTowerGetInfoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerClimbTower info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional bool canChallenge = 2;
  if (has_canchallenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->canchallenge(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClimbTowerGetInfoAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerClimbTower info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional bool canChallenge = 2;
    if (has_canchallenge()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClimbTowerGetInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClimbTowerGetInfoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClimbTowerGetInfoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClimbTowerGetInfoAck::MergeFrom(const PBClimbTowerGetInfoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::PBPlayerClimbTower::MergeFrom(from.info());
    }
    if (from.has_canchallenge()) {
      set_canchallenge(from.canchallenge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClimbTowerGetInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClimbTowerGetInfoAck::CopyFrom(const PBClimbTowerGetInfoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClimbTowerGetInfoAck::IsInitialized() const {
  
  return true;
}

void PBClimbTowerGetInfoAck::Swap(PBClimbTowerGetInfoAck* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(canchallenge_, other->canchallenge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClimbTowerGetInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClimbTowerGetInfoAck_descriptor_;
  metadata.reflection = PBClimbTowerGetInfoAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBClimbTowerGetInfoNtf::kInfoFieldNumber;
#endif  // !_MSC_VER

PBClimbTowerGetInfoNtf::PBClimbTowerGetInfoNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClimbTowerGetInfoNtf::InitAsDefaultInstance() {
  info_ = const_cast< ::PBPlayerClimbTower*>(&::PBPlayerClimbTower::default_instance());
}

PBClimbTowerGetInfoNtf::PBClimbTowerGetInfoNtf(const PBClimbTowerGetInfoNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClimbTowerGetInfoNtf::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClimbTowerGetInfoNtf::~PBClimbTowerGetInfoNtf() {
  SharedDtor();
}

void PBClimbTowerGetInfoNtf::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PBClimbTowerGetInfoNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClimbTowerGetInfoNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClimbTowerGetInfoNtf_descriptor_;
}

const PBClimbTowerGetInfoNtf& PBClimbTowerGetInfoNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBClimbTowerGetInfoNtf* PBClimbTowerGetInfoNtf::default_instance_ = NULL;

PBClimbTowerGetInfoNtf* PBClimbTowerGetInfoNtf::New() const {
  return new PBClimbTowerGetInfoNtf;
}

void PBClimbTowerGetInfoNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::PBPlayerClimbTower::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClimbTowerGetInfoNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerClimbTower info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBClimbTowerGetInfoNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerClimbTower info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClimbTowerGetInfoNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerClimbTower info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClimbTowerGetInfoNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerClimbTower info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClimbTowerGetInfoNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClimbTowerGetInfoNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClimbTowerGetInfoNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClimbTowerGetInfoNtf::MergeFrom(const PBClimbTowerGetInfoNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::PBPlayerClimbTower::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClimbTowerGetInfoNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClimbTowerGetInfoNtf::CopyFrom(const PBClimbTowerGetInfoNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClimbTowerGetInfoNtf::IsInitialized() const {
  
  return true;
}

void PBClimbTowerGetInfoNtf::Swap(PBClimbTowerGetInfoNtf* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClimbTowerGetInfoNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClimbTowerGetInfoNtf_descriptor_;
  metadata.reflection = PBClimbTowerGetInfoNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBClimbTowerPrize::kTypeFieldNumber;
const int PBClimbTowerPrize::kKeyFieldNumber;
const int PBClimbTowerPrize::kCountFieldNumber;
#endif  // !_MSC_VER

PBClimbTowerPrize::PBClimbTowerPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClimbTowerPrize::InitAsDefaultInstance() {
}

PBClimbTowerPrize::PBClimbTowerPrize(const PBClimbTowerPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClimbTowerPrize::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  key_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClimbTowerPrize::~PBClimbTowerPrize() {
  SharedDtor();
}

void PBClimbTowerPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBClimbTowerPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClimbTowerPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClimbTowerPrize_descriptor_;
}

const PBClimbTowerPrize& PBClimbTowerPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBClimbTowerPrize* PBClimbTowerPrize::default_instance_ = NULL;

PBClimbTowerPrize* PBClimbTowerPrize::New() const {
  return new PBClimbTowerPrize;
}

void PBClimbTowerPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    key_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClimbTowerPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }
      
      // optional uint32 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBClimbTowerPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->key(), output);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClimbTowerPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->key(), target);
  }
  
  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClimbTowerPrize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }
    
    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClimbTowerPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClimbTowerPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClimbTowerPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClimbTowerPrize::MergeFrom(const PBClimbTowerPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClimbTowerPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClimbTowerPrize::CopyFrom(const PBClimbTowerPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClimbTowerPrize::IsInitialized() const {
  
  return true;
}

void PBClimbTowerPrize::Swap(PBClimbTowerPrize* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(key_, other->key_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClimbTowerPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClimbTowerPrize_descriptor_;
  metadata.reflection = PBClimbTowerPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBClimbTowerShowPrizeNtf::kShwoPrizeFieldNumber;
#endif  // !_MSC_VER

PBClimbTowerShowPrizeNtf::PBClimbTowerShowPrizeNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClimbTowerShowPrizeNtf::InitAsDefaultInstance() {
}

PBClimbTowerShowPrizeNtf::PBClimbTowerShowPrizeNtf(const PBClimbTowerShowPrizeNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClimbTowerShowPrizeNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClimbTowerShowPrizeNtf::~PBClimbTowerShowPrizeNtf() {
  SharedDtor();
}

void PBClimbTowerShowPrizeNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBClimbTowerShowPrizeNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClimbTowerShowPrizeNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClimbTowerShowPrizeNtf_descriptor_;
}

const PBClimbTowerShowPrizeNtf& PBClimbTowerShowPrizeNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBClimbTowerShowPrizeNtf* PBClimbTowerShowPrizeNtf::default_instance_ = NULL;

PBClimbTowerShowPrizeNtf* PBClimbTowerShowPrizeNtf::New() const {
  return new PBClimbTowerShowPrizeNtf;
}

void PBClimbTowerShowPrizeNtf::Clear() {
  shwoprize_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClimbTowerShowPrizeNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBClimbTowerPrize shwoPrize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shwoPrize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shwoprize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shwoPrize;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBClimbTowerShowPrizeNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBClimbTowerPrize shwoPrize = 1;
  for (int i = 0; i < this->shwoprize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shwoprize(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClimbTowerShowPrizeNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBClimbTowerPrize shwoPrize = 1;
  for (int i = 0; i < this->shwoprize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shwoprize(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClimbTowerShowPrizeNtf::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBClimbTowerPrize shwoPrize = 1;
  total_size += 1 * this->shwoprize_size();
  for (int i = 0; i < this->shwoprize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shwoprize(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClimbTowerShowPrizeNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClimbTowerShowPrizeNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClimbTowerShowPrizeNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClimbTowerShowPrizeNtf::MergeFrom(const PBClimbTowerShowPrizeNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  shwoprize_.MergeFrom(from.shwoprize_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClimbTowerShowPrizeNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClimbTowerShowPrizeNtf::CopyFrom(const PBClimbTowerShowPrizeNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClimbTowerShowPrizeNtf::IsInitialized() const {
  
  return true;
}

void PBClimbTowerShowPrizeNtf::Swap(PBClimbTowerShowPrizeNtf* other) {
  if (other != this) {
    shwoprize_.Swap(&other->shwoprize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClimbTowerShowPrizeNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClimbTowerShowPrizeNtf_descriptor_;
  metadata.reflection = PBClimbTowerShowPrizeNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBClimbTowerChoosePrizeAsk::kPrizeIndexFieldNumber;
#endif  // !_MSC_VER

PBClimbTowerChoosePrizeAsk::PBClimbTowerChoosePrizeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClimbTowerChoosePrizeAsk::InitAsDefaultInstance() {
}

PBClimbTowerChoosePrizeAsk::PBClimbTowerChoosePrizeAsk(const PBClimbTowerChoosePrizeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClimbTowerChoosePrizeAsk::SharedCtor() {
  _cached_size_ = 0;
  prizeindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClimbTowerChoosePrizeAsk::~PBClimbTowerChoosePrizeAsk() {
  SharedDtor();
}

void PBClimbTowerChoosePrizeAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBClimbTowerChoosePrizeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClimbTowerChoosePrizeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClimbTowerChoosePrizeAsk_descriptor_;
}

const PBClimbTowerChoosePrizeAsk& PBClimbTowerChoosePrizeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBClimbTowerChoosePrizeAsk* PBClimbTowerChoosePrizeAsk::default_instance_ = NULL;

PBClimbTowerChoosePrizeAsk* PBClimbTowerChoosePrizeAsk::New() const {
  return new PBClimbTowerChoosePrizeAsk;
}

void PBClimbTowerChoosePrizeAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prizeindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClimbTowerChoosePrizeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prizeIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizeindex_)));
          set_has_prizeindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBClimbTowerChoosePrizeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 prizeIndex = 1;
  if (has_prizeindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prizeindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClimbTowerChoosePrizeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 prizeIndex = 1;
  if (has_prizeindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prizeindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClimbTowerChoosePrizeAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 prizeIndex = 1;
    if (has_prizeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizeindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClimbTowerChoosePrizeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClimbTowerChoosePrizeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClimbTowerChoosePrizeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClimbTowerChoosePrizeAsk::MergeFrom(const PBClimbTowerChoosePrizeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prizeindex()) {
      set_prizeindex(from.prizeindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClimbTowerChoosePrizeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClimbTowerChoosePrizeAsk::CopyFrom(const PBClimbTowerChoosePrizeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClimbTowerChoosePrizeAsk::IsInitialized() const {
  
  return true;
}

void PBClimbTowerChoosePrizeAsk::Swap(PBClimbTowerChoosePrizeAsk* other) {
  if (other != this) {
    std::swap(prizeindex_, other->prizeindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClimbTowerChoosePrizeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClimbTowerChoosePrizeAsk_descriptor_;
  metadata.reflection = PBClimbTowerChoosePrizeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBClimbTowerChoosePrizeAck::PBClimbTowerChoosePrizeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClimbTowerChoosePrizeAck::InitAsDefaultInstance() {
}

PBClimbTowerChoosePrizeAck::PBClimbTowerChoosePrizeAck(const PBClimbTowerChoosePrizeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClimbTowerChoosePrizeAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClimbTowerChoosePrizeAck::~PBClimbTowerChoosePrizeAck() {
  SharedDtor();
}

void PBClimbTowerChoosePrizeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBClimbTowerChoosePrizeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClimbTowerChoosePrizeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClimbTowerChoosePrizeAck_descriptor_;
}

const PBClimbTowerChoosePrizeAck& PBClimbTowerChoosePrizeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBClimbTowerChoosePrizeAck* PBClimbTowerChoosePrizeAck::default_instance_ = NULL;

PBClimbTowerChoosePrizeAck* PBClimbTowerChoosePrizeAck::New() const {
  return new PBClimbTowerChoosePrizeAck;
}

void PBClimbTowerChoosePrizeAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClimbTowerChoosePrizeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBClimbTowerChoosePrizeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClimbTowerChoosePrizeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClimbTowerChoosePrizeAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClimbTowerChoosePrizeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClimbTowerChoosePrizeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClimbTowerChoosePrizeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClimbTowerChoosePrizeAck::MergeFrom(const PBClimbTowerChoosePrizeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClimbTowerChoosePrizeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClimbTowerChoosePrizeAck::CopyFrom(const PBClimbTowerChoosePrizeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClimbTowerChoosePrizeAck::IsInitialized() const {
  
  return true;
}

void PBClimbTowerChoosePrizeAck::Swap(PBClimbTowerChoosePrizeAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClimbTowerChoosePrizeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClimbTowerChoosePrizeAck_descriptor_;
  metadata.reflection = PBClimbTowerChoosePrizeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBClimbTowerClearAsk::kRechallengeFieldNumber;
#endif  // !_MSC_VER

PBClimbTowerClearAsk::PBClimbTowerClearAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClimbTowerClearAsk::InitAsDefaultInstance() {
}

PBClimbTowerClearAsk::PBClimbTowerClearAsk(const PBClimbTowerClearAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClimbTowerClearAsk::SharedCtor() {
  _cached_size_ = 0;
  rechallenge_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClimbTowerClearAsk::~PBClimbTowerClearAsk() {
  SharedDtor();
}

void PBClimbTowerClearAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBClimbTowerClearAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClimbTowerClearAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClimbTowerClearAsk_descriptor_;
}

const PBClimbTowerClearAsk& PBClimbTowerClearAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBClimbTowerClearAsk* PBClimbTowerClearAsk::default_instance_ = NULL;

PBClimbTowerClearAsk* PBClimbTowerClearAsk::New() const {
  return new PBClimbTowerClearAsk;
}

void PBClimbTowerClearAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rechallenge_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClimbTowerClearAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool rechallenge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rechallenge_)));
          set_has_rechallenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBClimbTowerClearAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool rechallenge = 1;
  if (has_rechallenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->rechallenge(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClimbTowerClearAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool rechallenge = 1;
  if (has_rechallenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->rechallenge(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClimbTowerClearAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool rechallenge = 1;
    if (has_rechallenge()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClimbTowerClearAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClimbTowerClearAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClimbTowerClearAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClimbTowerClearAsk::MergeFrom(const PBClimbTowerClearAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rechallenge()) {
      set_rechallenge(from.rechallenge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClimbTowerClearAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClimbTowerClearAsk::CopyFrom(const PBClimbTowerClearAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClimbTowerClearAsk::IsInitialized() const {
  
  return true;
}

void PBClimbTowerClearAsk::Swap(PBClimbTowerClearAsk* other) {
  if (other != this) {
    std::swap(rechallenge_, other->rechallenge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClimbTowerClearAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClimbTowerClearAsk_descriptor_;
  metadata.reflection = PBClimbTowerClearAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBClimbTowerClearAck::PBClimbTowerClearAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClimbTowerClearAck::InitAsDefaultInstance() {
}

PBClimbTowerClearAck::PBClimbTowerClearAck(const PBClimbTowerClearAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClimbTowerClearAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClimbTowerClearAck::~PBClimbTowerClearAck() {
  SharedDtor();
}

void PBClimbTowerClearAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBClimbTowerClearAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClimbTowerClearAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClimbTowerClearAck_descriptor_;
}

const PBClimbTowerClearAck& PBClimbTowerClearAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBClimbTowerClearAck* PBClimbTowerClearAck::default_instance_ = NULL;

PBClimbTowerClearAck* PBClimbTowerClearAck::New() const {
  return new PBClimbTowerClearAck;
}

void PBClimbTowerClearAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClimbTowerClearAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBClimbTowerClearAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClimbTowerClearAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClimbTowerClearAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClimbTowerClearAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClimbTowerClearAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClimbTowerClearAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClimbTowerClearAck::MergeFrom(const PBClimbTowerClearAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClimbTowerClearAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClimbTowerClearAck::CopyFrom(const PBClimbTowerClearAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClimbTowerClearAck::IsInitialized() const {
  
  return true;
}

void PBClimbTowerClearAck::Swap(PBClimbTowerClearAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClimbTowerClearAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClimbTowerClearAck_descriptor_;
  metadata.reflection = PBClimbTowerClearAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBClimbTowerShowClearNtf::PBClimbTowerShowClearNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBClimbTowerShowClearNtf::InitAsDefaultInstance() {
}

PBClimbTowerShowClearNtf::PBClimbTowerShowClearNtf(const PBClimbTowerShowClearNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBClimbTowerShowClearNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBClimbTowerShowClearNtf::~PBClimbTowerShowClearNtf() {
  SharedDtor();
}

void PBClimbTowerShowClearNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBClimbTowerShowClearNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBClimbTowerShowClearNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBClimbTowerShowClearNtf_descriptor_;
}

const PBClimbTowerShowClearNtf& PBClimbTowerShowClearNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBClimbTowerShowClearNtf* PBClimbTowerShowClearNtf::default_instance_ = NULL;

PBClimbTowerShowClearNtf* PBClimbTowerShowClearNtf::New() const {
  return new PBClimbTowerShowClearNtf;
}

void PBClimbTowerShowClearNtf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBClimbTowerShowClearNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBClimbTowerShowClearNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBClimbTowerShowClearNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBClimbTowerShowClearNtf::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBClimbTowerShowClearNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBClimbTowerShowClearNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBClimbTowerShowClearNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBClimbTowerShowClearNtf::MergeFrom(const PBClimbTowerShowClearNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBClimbTowerShowClearNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBClimbTowerShowClearNtf::CopyFrom(const PBClimbTowerShowClearNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBClimbTowerShowClearNtf::IsInitialized() const {
  
  return true;
}

void PBClimbTowerShowClearNtf::Swap(PBClimbTowerShowClearNtf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBClimbTowerShowClearNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBClimbTowerShowClearNtf_descriptor_;
  metadata.reflection = PBClimbTowerShowClearNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GAnswerQuestion_Answer::kRightFieldNumber;
#endif  // !_MSC_VER

PBC2GAnswerQuestion_Answer::PBC2GAnswerQuestion_Answer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GAnswerQuestion_Answer::InitAsDefaultInstance() {
}

PBC2GAnswerQuestion_Answer::PBC2GAnswerQuestion_Answer(const PBC2GAnswerQuestion_Answer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GAnswerQuestion_Answer::SharedCtor() {
  _cached_size_ = 0;
  right_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GAnswerQuestion_Answer::~PBC2GAnswerQuestion_Answer() {
  SharedDtor();
}

void PBC2GAnswerQuestion_Answer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GAnswerQuestion_Answer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GAnswerQuestion_Answer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GAnswerQuestion_Answer_descriptor_;
}

const PBC2GAnswerQuestion_Answer& PBC2GAnswerQuestion_Answer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GAnswerQuestion_Answer* PBC2GAnswerQuestion_Answer::default_instance_ = NULL;

PBC2GAnswerQuestion_Answer* PBC2GAnswerQuestion_Answer::New() const {
  return new PBC2GAnswerQuestion_Answer;
}

void PBC2GAnswerQuestion_Answer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    right_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GAnswerQuestion_Answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool right = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GAnswerQuestion_Answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool right = 1;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->right(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GAnswerQuestion_Answer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool right = 1;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->right(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GAnswerQuestion_Answer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool right = 1;
    if (has_right()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GAnswerQuestion_Answer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GAnswerQuestion_Answer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GAnswerQuestion_Answer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GAnswerQuestion_Answer::MergeFrom(const PBC2GAnswerQuestion_Answer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_right()) {
      set_right(from.right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GAnswerQuestion_Answer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GAnswerQuestion_Answer::CopyFrom(const PBC2GAnswerQuestion_Answer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GAnswerQuestion_Answer::IsInitialized() const {
  
  return true;
}

void PBC2GAnswerQuestion_Answer::Swap(PBC2GAnswerQuestion_Answer* other) {
  if (other != this) {
    std::swap(right_, other->right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GAnswerQuestion_Answer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GAnswerQuestion_Answer_descriptor_;
  metadata.reflection = PBC2GAnswerQuestion_Answer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CAnswerQuestion_QuestionInfo::kOrderFieldNumber;
const int PBG2CAnswerQuestion_QuestionInfo::kIdFieldNumber;
const int PBG2CAnswerQuestion_QuestionInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

PBG2CAnswerQuestion_QuestionInfo::PBG2CAnswerQuestion_QuestionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CAnswerQuestion_QuestionInfo::InitAsDefaultInstance() {
}

PBG2CAnswerQuestion_QuestionInfo::PBG2CAnswerQuestion_QuestionInfo(const PBG2CAnswerQuestion_QuestionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CAnswerQuestion_QuestionInfo::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0u;
  id_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CAnswerQuestion_QuestionInfo::~PBG2CAnswerQuestion_QuestionInfo() {
  SharedDtor();
}

void PBG2CAnswerQuestion_QuestionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CAnswerQuestion_QuestionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CAnswerQuestion_QuestionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CAnswerQuestion_QuestionInfo_descriptor_;
}

const PBG2CAnswerQuestion_QuestionInfo& PBG2CAnswerQuestion_QuestionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CAnswerQuestion_QuestionInfo* PBG2CAnswerQuestion_QuestionInfo::default_instance_ = NULL;

PBG2CAnswerQuestion_QuestionInfo* PBG2CAnswerQuestion_QuestionInfo::New() const {
  return new PBG2CAnswerQuestion_QuestionInfo;
}

void PBG2CAnswerQuestion_QuestionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_ = 0u;
    id_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CAnswerQuestion_QuestionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CAnswerQuestion_QuestionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->order(), output);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CAnswerQuestion_QuestionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->order(), target);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CAnswerQuestion_QuestionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }
    
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CAnswerQuestion_QuestionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CAnswerQuestion_QuestionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CAnswerQuestion_QuestionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CAnswerQuestion_QuestionInfo::MergeFrom(const PBG2CAnswerQuestion_QuestionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CAnswerQuestion_QuestionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CAnswerQuestion_QuestionInfo::CopyFrom(const PBG2CAnswerQuestion_QuestionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CAnswerQuestion_QuestionInfo::IsInitialized() const {
  
  return true;
}

void PBG2CAnswerQuestion_QuestionInfo::Swap(PBG2CAnswerQuestion_QuestionInfo* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CAnswerQuestion_QuestionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CAnswerQuestion_QuestionInfo_descriptor_;
  metadata.reflection = PBG2CAnswerQuestion_QuestionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CAnswerQuestion_QuestionResult::kOrderFieldNumber;
const int PBG2CAnswerQuestion_QuestionResult::kIdFieldNumber;
const int PBG2CAnswerQuestion_QuestionResult::kRightFieldNumber;
#endif  // !_MSC_VER

PBG2CAnswerQuestion_QuestionResult::PBG2CAnswerQuestion_QuestionResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CAnswerQuestion_QuestionResult::InitAsDefaultInstance() {
}

PBG2CAnswerQuestion_QuestionResult::PBG2CAnswerQuestion_QuestionResult(const PBG2CAnswerQuestion_QuestionResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CAnswerQuestion_QuestionResult::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0u;
  id_ = 0u;
  right_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CAnswerQuestion_QuestionResult::~PBG2CAnswerQuestion_QuestionResult() {
  SharedDtor();
}

void PBG2CAnswerQuestion_QuestionResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CAnswerQuestion_QuestionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CAnswerQuestion_QuestionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CAnswerQuestion_QuestionResult_descriptor_;
}

const PBG2CAnswerQuestion_QuestionResult& PBG2CAnswerQuestion_QuestionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CAnswerQuestion_QuestionResult* PBG2CAnswerQuestion_QuestionResult::default_instance_ = NULL;

PBG2CAnswerQuestion_QuestionResult* PBG2CAnswerQuestion_QuestionResult::New() const {
  return new PBG2CAnswerQuestion_QuestionResult;
}

void PBG2CAnswerQuestion_QuestionResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_ = 0u;
    id_ = 0u;
    right_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CAnswerQuestion_QuestionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_right;
        break;
      }
      
      // optional bool right = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CAnswerQuestion_QuestionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->order(), output);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  // optional bool right = 3;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->right(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CAnswerQuestion_QuestionResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->order(), target);
  }
  
  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  // optional bool right = 3;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->right(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CAnswerQuestion_QuestionResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }
    
    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional bool right = 3;
    if (has_right()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CAnswerQuestion_QuestionResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CAnswerQuestion_QuestionResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CAnswerQuestion_QuestionResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CAnswerQuestion_QuestionResult::MergeFrom(const PBG2CAnswerQuestion_QuestionResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CAnswerQuestion_QuestionResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CAnswerQuestion_QuestionResult::CopyFrom(const PBG2CAnswerQuestion_QuestionResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CAnswerQuestion_QuestionResult::IsInitialized() const {
  
  return true;
}

void PBG2CAnswerQuestion_QuestionResult::Swap(PBG2CAnswerQuestion_QuestionResult* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(id_, other->id_);
    std::swap(right_, other->right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CAnswerQuestion_QuestionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CAnswerQuestion_QuestionResult_descriptor_;
  metadata.reflection = PBG2CAnswerQuestion_QuestionResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGreatWallTrainInfoAck::kCopymapidFieldNumber;
const int PBGreatWallTrainInfoAck::kLayerFieldNumber;
const int PBGreatWallTrainInfoAck::kTimeFieldNumber;
#endif  // !_MSC_VER

PBGreatWallTrainInfoAck::PBGreatWallTrainInfoAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGreatWallTrainInfoAck::InitAsDefaultInstance() {
}

PBGreatWallTrainInfoAck::PBGreatWallTrainInfoAck(const PBGreatWallTrainInfoAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGreatWallTrainInfoAck::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  layer_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGreatWallTrainInfoAck::~PBGreatWallTrainInfoAck() {
  SharedDtor();
}

void PBGreatWallTrainInfoAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGreatWallTrainInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGreatWallTrainInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGreatWallTrainInfoAck_descriptor_;
}

const PBGreatWallTrainInfoAck& PBGreatWallTrainInfoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBGreatWallTrainInfoAck* PBGreatWallTrainInfoAck::default_instance_ = NULL;

PBGreatWallTrainInfoAck* PBGreatWallTrainInfoAck::New() const {
  return new PBGreatWallTrainInfoAck;
}

void PBGreatWallTrainInfoAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    layer_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGreatWallTrainInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_layer;
        break;
      }
      
      // optional uint32 layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGreatWallTrainInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }
  
  // optional uint32 layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layer(), output);
  }
  
  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGreatWallTrainInfoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapid = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }
  
  // optional uint32 layer = 2;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layer(), target);
  }
  
  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGreatWallTrainInfoAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapid = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }
    
    // optional uint32 layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }
    
    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGreatWallTrainInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGreatWallTrainInfoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGreatWallTrainInfoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGreatWallTrainInfoAck::MergeFrom(const PBGreatWallTrainInfoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGreatWallTrainInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGreatWallTrainInfoAck::CopyFrom(const PBGreatWallTrainInfoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGreatWallTrainInfoAck::IsInitialized() const {
  
  return true;
}

void PBGreatWallTrainInfoAck::Swap(PBGreatWallTrainInfoAck* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(layer_, other->layer_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGreatWallTrainInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGreatWallTrainInfoAck_descriptor_;
  metadata.reflection = PBGreatWallTrainInfoAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2SWorldBossGetInfoAsk::PBC2SWorldBossGetInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWorldBossGetInfoAsk::InitAsDefaultInstance() {
}

PBC2SWorldBossGetInfoAsk::PBC2SWorldBossGetInfoAsk(const PBC2SWorldBossGetInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWorldBossGetInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWorldBossGetInfoAsk::~PBC2SWorldBossGetInfoAsk() {
  SharedDtor();
}

void PBC2SWorldBossGetInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWorldBossGetInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWorldBossGetInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWorldBossGetInfoAsk_descriptor_;
}

const PBC2SWorldBossGetInfoAsk& PBC2SWorldBossGetInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWorldBossGetInfoAsk* PBC2SWorldBossGetInfoAsk::default_instance_ = NULL;

PBC2SWorldBossGetInfoAsk* PBC2SWorldBossGetInfoAsk::New() const {
  return new PBC2SWorldBossGetInfoAsk;
}

void PBC2SWorldBossGetInfoAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWorldBossGetInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2SWorldBossGetInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWorldBossGetInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWorldBossGetInfoAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWorldBossGetInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWorldBossGetInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWorldBossGetInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWorldBossGetInfoAsk::MergeFrom(const PBC2SWorldBossGetInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWorldBossGetInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWorldBossGetInfoAsk::CopyFrom(const PBC2SWorldBossGetInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWorldBossGetInfoAsk::IsInitialized() const {
  
  return true;
}

void PBC2SWorldBossGetInfoAsk::Swap(PBC2SWorldBossGetInfoAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWorldBossGetInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWorldBossGetInfoAsk_descriptor_;
  metadata.reflection = PBC2SWorldBossGetInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWorldBossInfo::kBossActivityIdFieldNumber;
const int PBWorldBossInfo::kBossStatusFieldNumber;
const int PBWorldBossInfo::kLastWinnerFieldNumber;
const int PBWorldBossInfo::kNextStartCDFieldNumber;
#endif  // !_MSC_VER

PBWorldBossInfo::PBWorldBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldBossInfo::InitAsDefaultInstance() {
}

PBWorldBossInfo::PBWorldBossInfo(const PBWorldBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldBossInfo::SharedCtor() {
  _cached_size_ = 0;
  bossactivityid_ = 0u;
  bossstatus_ = 0u;
  lastwinner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nextstartcd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldBossInfo::~PBWorldBossInfo() {
  SharedDtor();
}

void PBWorldBossInfo::SharedDtor() {
  if (lastwinner_ != &::google::protobuf::internal::kEmptyString) {
    delete lastwinner_;
  }
  if (this != default_instance_) {
  }
}

void PBWorldBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWorldBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldBossInfo_descriptor_;
}

const PBWorldBossInfo& PBWorldBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBWorldBossInfo* PBWorldBossInfo::default_instance_ = NULL;

PBWorldBossInfo* PBWorldBossInfo::New() const {
  return new PBWorldBossInfo;
}

void PBWorldBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossactivityid_ = 0u;
    bossstatus_ = 0u;
    if (has_lastwinner()) {
      if (lastwinner_ != &::google::protobuf::internal::kEmptyString) {
        lastwinner_->clear();
      }
    }
    nextstartcd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bossActivityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossactivityid_)));
          set_has_bossactivityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossStatus;
        break;
      }
      
      // optional uint32 bossStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossstatus_)));
          set_has_bossstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lastWinner;
        break;
      }
      
      // optional string lastWinner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastWinner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastwinner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastwinner().data(), this->lastwinner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nextStartCD;
        break;
      }
      
      // optional uint32 nextStartCD = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextStartCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextstartcd_)));
          set_has_nextstartcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWorldBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bossActivityId = 1;
  if (has_bossactivityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossactivityid(), output);
  }
  
  // optional uint32 bossStatus = 2;
  if (has_bossstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossstatus(), output);
  }
  
  // optional string lastWinner = 3;
  if (has_lastwinner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastwinner().data(), this->lastwinner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lastwinner(), output);
  }
  
  // optional uint32 nextStartCD = 4;
  if (has_nextstartcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nextstartcd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bossActivityId = 1;
  if (has_bossactivityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossactivityid(), target);
  }
  
  // optional uint32 bossStatus = 2;
  if (has_bossstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bossstatus(), target);
  }
  
  // optional string lastWinner = 3;
  if (has_lastwinner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastwinner().data(), this->lastwinner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lastwinner(), target);
  }
  
  // optional uint32 nextStartCD = 4;
  if (has_nextstartcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nextstartcd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldBossInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bossActivityId = 1;
    if (has_bossactivityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossactivityid());
    }
    
    // optional uint32 bossStatus = 2;
    if (has_bossstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossstatus());
    }
    
    // optional string lastWinner = 3;
    if (has_lastwinner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastwinner());
    }
    
    // optional uint32 nextStartCD = 4;
    if (has_nextstartcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextstartcd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWorldBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldBossInfo::MergeFrom(const PBWorldBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossactivityid()) {
      set_bossactivityid(from.bossactivityid());
    }
    if (from.has_bossstatus()) {
      set_bossstatus(from.bossstatus());
    }
    if (from.has_lastwinner()) {
      set_lastwinner(from.lastwinner());
    }
    if (from.has_nextstartcd()) {
      set_nextstartcd(from.nextstartcd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldBossInfo::CopyFrom(const PBWorldBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorldBossInfo::IsInitialized() const {
  
  return true;
}

void PBWorldBossInfo::Swap(PBWorldBossInfo* other) {
  if (other != this) {
    std::swap(bossactivityid_, other->bossactivityid_);
    std::swap(bossstatus_, other->bossstatus_);
    std::swap(lastwinner_, other->lastwinner_);
    std::swap(nextstartcd_, other->nextstartcd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWorldBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWorldBossInfo_descriptor_;
  metadata.reflection = PBWorldBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWorldBossGetInfoAck::kWorldBossFieldNumber;
#endif  // !_MSC_VER

PBWorldBossGetInfoAck::PBWorldBossGetInfoAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldBossGetInfoAck::InitAsDefaultInstance() {
}

PBWorldBossGetInfoAck::PBWorldBossGetInfoAck(const PBWorldBossGetInfoAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldBossGetInfoAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldBossGetInfoAck::~PBWorldBossGetInfoAck() {
  SharedDtor();
}

void PBWorldBossGetInfoAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWorldBossGetInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWorldBossGetInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldBossGetInfoAck_descriptor_;
}

const PBWorldBossGetInfoAck& PBWorldBossGetInfoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBWorldBossGetInfoAck* PBWorldBossGetInfoAck::default_instance_ = NULL;

PBWorldBossGetInfoAck* PBWorldBossGetInfoAck::New() const {
  return new PBWorldBossGetInfoAck;
}

void PBWorldBossGetInfoAck::Clear() {
  worldboss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldBossGetInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBWorldBossInfo worldBoss = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worldBoss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_worldboss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_worldBoss;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWorldBossGetInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBWorldBossInfo worldBoss = 1;
  for (int i = 0; i < this->worldboss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->worldboss(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldBossGetInfoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBWorldBossInfo worldBoss = 1;
  for (int i = 0; i < this->worldboss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->worldboss(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldBossGetInfoAck::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBWorldBossInfo worldBoss = 1;
  total_size += 1 * this->worldboss_size();
  for (int i = 0; i < this->worldboss_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worldboss(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWorldBossGetInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldBossGetInfoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldBossGetInfoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldBossGetInfoAck::MergeFrom(const PBWorldBossGetInfoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldboss_.MergeFrom(from.worldboss_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldBossGetInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldBossGetInfoAck::CopyFrom(const PBWorldBossGetInfoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorldBossGetInfoAck::IsInitialized() const {
  
  return true;
}

void PBWorldBossGetInfoAck::Swap(PBWorldBossGetInfoAck* other) {
  if (other != this) {
    worldboss_.Swap(&other->worldboss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWorldBossGetInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWorldBossGetInfoAck_descriptor_;
  metadata.reflection = PBWorldBossGetInfoAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWorldBossUpdateBossHurtRankAsk::kBossActivityIdFieldNumber;
#endif  // !_MSC_VER

PBC2SWorldBossUpdateBossHurtRankAsk::PBC2SWorldBossUpdateBossHurtRankAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWorldBossUpdateBossHurtRankAsk::InitAsDefaultInstance() {
}

PBC2SWorldBossUpdateBossHurtRankAsk::PBC2SWorldBossUpdateBossHurtRankAsk(const PBC2SWorldBossUpdateBossHurtRankAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWorldBossUpdateBossHurtRankAsk::SharedCtor() {
  _cached_size_ = 0;
  bossactivityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWorldBossUpdateBossHurtRankAsk::~PBC2SWorldBossUpdateBossHurtRankAsk() {
  SharedDtor();
}

void PBC2SWorldBossUpdateBossHurtRankAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWorldBossUpdateBossHurtRankAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWorldBossUpdateBossHurtRankAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWorldBossUpdateBossHurtRankAsk_descriptor_;
}

const PBC2SWorldBossUpdateBossHurtRankAsk& PBC2SWorldBossUpdateBossHurtRankAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWorldBossUpdateBossHurtRankAsk* PBC2SWorldBossUpdateBossHurtRankAsk::default_instance_ = NULL;

PBC2SWorldBossUpdateBossHurtRankAsk* PBC2SWorldBossUpdateBossHurtRankAsk::New() const {
  return new PBC2SWorldBossUpdateBossHurtRankAsk;
}

void PBC2SWorldBossUpdateBossHurtRankAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossactivityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWorldBossUpdateBossHurtRankAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bossActivityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossactivityid_)));
          set_has_bossactivityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWorldBossUpdateBossHurtRankAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bossActivityId = 1;
  if (has_bossactivityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossactivityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWorldBossUpdateBossHurtRankAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bossActivityId = 1;
  if (has_bossactivityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossactivityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWorldBossUpdateBossHurtRankAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bossActivityId = 1;
    if (has_bossactivityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossactivityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWorldBossUpdateBossHurtRankAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWorldBossUpdateBossHurtRankAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWorldBossUpdateBossHurtRankAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWorldBossUpdateBossHurtRankAsk::MergeFrom(const PBC2SWorldBossUpdateBossHurtRankAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossactivityid()) {
      set_bossactivityid(from.bossactivityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWorldBossUpdateBossHurtRankAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWorldBossUpdateBossHurtRankAsk::CopyFrom(const PBC2SWorldBossUpdateBossHurtRankAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWorldBossUpdateBossHurtRankAsk::IsInitialized() const {
  
  return true;
}

void PBC2SWorldBossUpdateBossHurtRankAsk::Swap(PBC2SWorldBossUpdateBossHurtRankAsk* other) {
  if (other != this) {
    std::swap(bossactivityid_, other->bossactivityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWorldBossUpdateBossHurtRankAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWorldBossUpdateBossHurtRankAsk_descriptor_;
  metadata.reflection = PBC2SWorldBossUpdateBossHurtRankAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBWorldBossUpdateBossHurtRankAck::PBWorldBossUpdateBossHurtRankAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldBossUpdateBossHurtRankAck::InitAsDefaultInstance() {
}

PBWorldBossUpdateBossHurtRankAck::PBWorldBossUpdateBossHurtRankAck(const PBWorldBossUpdateBossHurtRankAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldBossUpdateBossHurtRankAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldBossUpdateBossHurtRankAck::~PBWorldBossUpdateBossHurtRankAck() {
  SharedDtor();
}

void PBWorldBossUpdateBossHurtRankAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWorldBossUpdateBossHurtRankAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWorldBossUpdateBossHurtRankAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldBossUpdateBossHurtRankAck_descriptor_;
}

const PBWorldBossUpdateBossHurtRankAck& PBWorldBossUpdateBossHurtRankAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBWorldBossUpdateBossHurtRankAck* PBWorldBossUpdateBossHurtRankAck::default_instance_ = NULL;

PBWorldBossUpdateBossHurtRankAck* PBWorldBossUpdateBossHurtRankAck::New() const {
  return new PBWorldBossUpdateBossHurtRankAck;
}

void PBWorldBossUpdateBossHurtRankAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldBossUpdateBossHurtRankAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBWorldBossUpdateBossHurtRankAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldBossUpdateBossHurtRankAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldBossUpdateBossHurtRankAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWorldBossUpdateBossHurtRankAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldBossUpdateBossHurtRankAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldBossUpdateBossHurtRankAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldBossUpdateBossHurtRankAck::MergeFrom(const PBWorldBossUpdateBossHurtRankAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldBossUpdateBossHurtRankAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldBossUpdateBossHurtRankAck::CopyFrom(const PBWorldBossUpdateBossHurtRankAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorldBossUpdateBossHurtRankAck::IsInitialized() const {
  
  return true;
}

void PBWorldBossUpdateBossHurtRankAck::Swap(PBWorldBossUpdateBossHurtRankAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWorldBossUpdateBossHurtRankAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWorldBossUpdateBossHurtRankAck_descriptor_;
  metadata.reflection = PBWorldBossUpdateBossHurtRankAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBossHurtRank::kRankFieldNumber;
const int PBBossHurtRank::kNameFieldNumber;
const int PBBossHurtRank::kLevelFieldNumber;
const int PBBossHurtRank::kHurtFieldNumber;
#endif  // !_MSC_VER

PBBossHurtRank::PBBossHurtRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBossHurtRank::InitAsDefaultInstance() {
}

PBBossHurtRank::PBBossHurtRank(const PBBossHurtRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBossHurtRank::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  hurt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBossHurtRank::~PBBossHurtRank() {
  SharedDtor();
}

void PBBossHurtRank::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBBossHurtRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBossHurtRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBossHurtRank_descriptor_;
}

const PBBossHurtRank& PBBossHurtRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBBossHurtRank* PBBossHurtRank::default_instance_ = NULL;

PBBossHurtRank* PBBossHurtRank::New() const {
  return new PBBossHurtRank;
}

void PBBossHurtRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    hurt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBossHurtRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hurt;
        break;
      }
      
      // optional uint32 hurt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBossHurtRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  // optional uint32 hurt = 4;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hurt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBossHurtRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional uint32 hurt = 4;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hurt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBossHurtRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 hurt = 4;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBossHurtRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBossHurtRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBossHurtRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBossHurtRank::MergeFrom(const PBBossHurtRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBossHurtRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBossHurtRank::CopyFrom(const PBBossHurtRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBossHurtRank::IsInitialized() const {
  
  return true;
}

void PBBossHurtRank::Swap(PBBossHurtRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(hurt_, other->hurt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBossHurtRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBossHurtRank_descriptor_;
  metadata.reflection = PBBossHurtRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWorldBossUpdateBossHurtRankNtf::kRanksFieldNumber;
const int PBWorldBossUpdateBossHurtRankNtf::kSelfRanksFieldNumber;
const int PBWorldBossUpdateBossHurtRankNtf::kIsClosedFieldNumber;
const int PBWorldBossUpdateBossHurtRankNtf::kBossActivityIdFieldNumber;
#endif  // !_MSC_VER

PBWorldBossUpdateBossHurtRankNtf::PBWorldBossUpdateBossHurtRankNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldBossUpdateBossHurtRankNtf::InitAsDefaultInstance() {
}

PBWorldBossUpdateBossHurtRankNtf::PBWorldBossUpdateBossHurtRankNtf(const PBWorldBossUpdateBossHurtRankNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldBossUpdateBossHurtRankNtf::SharedCtor() {
  _cached_size_ = 0;
  isclosed_ = false;
  bossactivityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldBossUpdateBossHurtRankNtf::~PBWorldBossUpdateBossHurtRankNtf() {
  SharedDtor();
}

void PBWorldBossUpdateBossHurtRankNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWorldBossUpdateBossHurtRankNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWorldBossUpdateBossHurtRankNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldBossUpdateBossHurtRankNtf_descriptor_;
}

const PBWorldBossUpdateBossHurtRankNtf& PBWorldBossUpdateBossHurtRankNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBWorldBossUpdateBossHurtRankNtf* PBWorldBossUpdateBossHurtRankNtf::default_instance_ = NULL;

PBWorldBossUpdateBossHurtRankNtf* PBWorldBossUpdateBossHurtRankNtf::New() const {
  return new PBWorldBossUpdateBossHurtRankNtf;
}

void PBWorldBossUpdateBossHurtRankNtf::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    isclosed_ = false;
    bossactivityid_ = 0u;
  }
  ranks_.Clear();
  selfranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldBossUpdateBossHurtRankNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBBossHurtRank ranks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ranks;
        if (input->ExpectTag(18)) goto parse_selfRanks;
        break;
      }
      
      // repeated .PBBossHurtRank selfRanks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfRanks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selfranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selfRanks;
        if (input->ExpectTag(24)) goto parse_isClosed;
        break;
      }
      
      // optional bool isClosed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isClosed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isclosed_)));
          set_has_isclosed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bossActivityId;
        break;
      }
      
      // optional uint32 bossActivityId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossActivityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossactivityid_)));
          set_has_bossactivityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWorldBossUpdateBossHurtRankNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBBossHurtRank ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranks(i), output);
  }
  
  // repeated .PBBossHurtRank selfRanks = 2;
  for (int i = 0; i < this->selfranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfranks(i), output);
  }
  
  // optional bool isClosed = 3;
  if (has_isclosed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isclosed(), output);
  }
  
  // optional uint32 bossActivityId = 4;
  if (has_bossactivityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bossactivityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldBossUpdateBossHurtRankNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBBossHurtRank ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranks(i), target);
  }
  
  // repeated .PBBossHurtRank selfRanks = 2;
  for (int i = 0; i < this->selfranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfranks(i), target);
  }
  
  // optional bool isClosed = 3;
  if (has_isclosed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isclosed(), target);
  }
  
  // optional uint32 bossActivityId = 4;
  if (has_bossactivityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bossactivityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldBossUpdateBossHurtRankNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool isClosed = 3;
    if (has_isclosed()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 bossActivityId = 4;
    if (has_bossactivityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossactivityid());
    }
    
  }
  // repeated .PBBossHurtRank ranks = 1;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }
  
  // repeated .PBBossHurtRank selfRanks = 2;
  total_size += 1 * this->selfranks_size();
  for (int i = 0; i < this->selfranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selfranks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWorldBossUpdateBossHurtRankNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldBossUpdateBossHurtRankNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldBossUpdateBossHurtRankNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldBossUpdateBossHurtRankNtf::MergeFrom(const PBWorldBossUpdateBossHurtRankNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  selfranks_.MergeFrom(from.selfranks_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_isclosed()) {
      set_isclosed(from.isclosed());
    }
    if (from.has_bossactivityid()) {
      set_bossactivityid(from.bossactivityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldBossUpdateBossHurtRankNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldBossUpdateBossHurtRankNtf::CopyFrom(const PBWorldBossUpdateBossHurtRankNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorldBossUpdateBossHurtRankNtf::IsInitialized() const {
  
  return true;
}

void PBWorldBossUpdateBossHurtRankNtf::Swap(PBWorldBossUpdateBossHurtRankNtf* other) {
  if (other != this) {
    ranks_.Swap(&other->ranks_);
    selfranks_.Swap(&other->selfranks_);
    std::swap(isclosed_, other->isclosed_);
    std::swap(bossactivityid_, other->bossactivityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWorldBossUpdateBossHurtRankNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWorldBossUpdateBossHurtRankNtf_descriptor_;
  metadata.reflection = PBWorldBossUpdateBossHurtRankNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SWorldBossGotoBossAsk::kBossActivityIdFieldNumber;
#endif  // !_MSC_VER

PBC2SWorldBossGotoBossAsk::PBC2SWorldBossGotoBossAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SWorldBossGotoBossAsk::InitAsDefaultInstance() {
}

PBC2SWorldBossGotoBossAsk::PBC2SWorldBossGotoBossAsk(const PBC2SWorldBossGotoBossAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SWorldBossGotoBossAsk::SharedCtor() {
  _cached_size_ = 0;
  bossactivityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SWorldBossGotoBossAsk::~PBC2SWorldBossGotoBossAsk() {
  SharedDtor();
}

void PBC2SWorldBossGotoBossAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SWorldBossGotoBossAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SWorldBossGotoBossAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SWorldBossGotoBossAsk_descriptor_;
}

const PBC2SWorldBossGotoBossAsk& PBC2SWorldBossGotoBossAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SWorldBossGotoBossAsk* PBC2SWorldBossGotoBossAsk::default_instance_ = NULL;

PBC2SWorldBossGotoBossAsk* PBC2SWorldBossGotoBossAsk::New() const {
  return new PBC2SWorldBossGotoBossAsk;
}

void PBC2SWorldBossGotoBossAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossactivityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SWorldBossGotoBossAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bossActivityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossactivityid_)));
          set_has_bossactivityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SWorldBossGotoBossAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bossActivityId = 1;
  if (has_bossactivityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossactivityid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SWorldBossGotoBossAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bossActivityId = 1;
  if (has_bossactivityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossactivityid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SWorldBossGotoBossAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bossActivityId = 1;
    if (has_bossactivityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossactivityid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SWorldBossGotoBossAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SWorldBossGotoBossAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SWorldBossGotoBossAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SWorldBossGotoBossAsk::MergeFrom(const PBC2SWorldBossGotoBossAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossactivityid()) {
      set_bossactivityid(from.bossactivityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SWorldBossGotoBossAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SWorldBossGotoBossAsk::CopyFrom(const PBC2SWorldBossGotoBossAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SWorldBossGotoBossAsk::IsInitialized() const {
  
  return true;
}

void PBC2SWorldBossGotoBossAsk::Swap(PBC2SWorldBossGotoBossAsk* other) {
  if (other != this) {
    std::swap(bossactivityid_, other->bossactivityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SWorldBossGotoBossAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SWorldBossGotoBossAsk_descriptor_;
  metadata.reflection = PBC2SWorldBossGotoBossAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBS2CWorldBossGotoBossAck::PBS2CWorldBossGotoBossAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBS2CWorldBossGotoBossAck::InitAsDefaultInstance() {
}

PBS2CWorldBossGotoBossAck::PBS2CWorldBossGotoBossAck(const PBS2CWorldBossGotoBossAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBS2CWorldBossGotoBossAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBS2CWorldBossGotoBossAck::~PBS2CWorldBossGotoBossAck() {
  SharedDtor();
}

void PBS2CWorldBossGotoBossAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBS2CWorldBossGotoBossAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBS2CWorldBossGotoBossAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBS2CWorldBossGotoBossAck_descriptor_;
}

const PBS2CWorldBossGotoBossAck& PBS2CWorldBossGotoBossAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBS2CWorldBossGotoBossAck* PBS2CWorldBossGotoBossAck::default_instance_ = NULL;

PBS2CWorldBossGotoBossAck* PBS2CWorldBossGotoBossAck::New() const {
  return new PBS2CWorldBossGotoBossAck;
}

void PBS2CWorldBossGotoBossAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBS2CWorldBossGotoBossAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBS2CWorldBossGotoBossAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBS2CWorldBossGotoBossAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBS2CWorldBossGotoBossAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBS2CWorldBossGotoBossAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBS2CWorldBossGotoBossAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBS2CWorldBossGotoBossAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBS2CWorldBossGotoBossAck::MergeFrom(const PBS2CWorldBossGotoBossAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBS2CWorldBossGotoBossAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBS2CWorldBossGotoBossAck::CopyFrom(const PBS2CWorldBossGotoBossAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBS2CWorldBossGotoBossAck::IsInitialized() const {
  
  return true;
}

void PBS2CWorldBossGotoBossAck::Swap(PBS2CWorldBossGotoBossAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBS2CWorldBossGotoBossAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBS2CWorldBossGotoBossAck_descriptor_;
  metadata.reflection = PBS2CWorldBossGotoBossAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SActivityGetRewardAsk::kIdFieldNumber;
#endif  // !_MSC_VER

PBC2SActivityGetRewardAsk::PBC2SActivityGetRewardAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SActivityGetRewardAsk::InitAsDefaultInstance() {
}

PBC2SActivityGetRewardAsk::PBC2SActivityGetRewardAsk(const PBC2SActivityGetRewardAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SActivityGetRewardAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SActivityGetRewardAsk::~PBC2SActivityGetRewardAsk() {
  SharedDtor();
}

void PBC2SActivityGetRewardAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SActivityGetRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SActivityGetRewardAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SActivityGetRewardAsk_descriptor_;
}

const PBC2SActivityGetRewardAsk& PBC2SActivityGetRewardAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SActivityGetRewardAsk* PBC2SActivityGetRewardAsk::default_instance_ = NULL;

PBC2SActivityGetRewardAsk* PBC2SActivityGetRewardAsk::New() const {
  return new PBC2SActivityGetRewardAsk;
}

void PBC2SActivityGetRewardAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SActivityGetRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SActivityGetRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SActivityGetRewardAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SActivityGetRewardAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SActivityGetRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SActivityGetRewardAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SActivityGetRewardAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SActivityGetRewardAsk::MergeFrom(const PBC2SActivityGetRewardAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SActivityGetRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SActivityGetRewardAsk::CopyFrom(const PBC2SActivityGetRewardAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SActivityGetRewardAsk::IsInitialized() const {
  
  return true;
}

void PBC2SActivityGetRewardAsk::Swap(PBC2SActivityGetRewardAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SActivityGetRewardAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SActivityGetRewardAsk_descriptor_;
  metadata.reflection = PBC2SActivityGetRewardAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SActivityGetRewardAck::kIdFieldNumber;
#endif  // !_MSC_VER

PBC2SActivityGetRewardAck::PBC2SActivityGetRewardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SActivityGetRewardAck::InitAsDefaultInstance() {
}

PBC2SActivityGetRewardAck::PBC2SActivityGetRewardAck(const PBC2SActivityGetRewardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SActivityGetRewardAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SActivityGetRewardAck::~PBC2SActivityGetRewardAck() {
  SharedDtor();
}

void PBC2SActivityGetRewardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SActivityGetRewardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SActivityGetRewardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SActivityGetRewardAck_descriptor_;
}

const PBC2SActivityGetRewardAck& PBC2SActivityGetRewardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SActivityGetRewardAck* PBC2SActivityGetRewardAck::default_instance_ = NULL;

PBC2SActivityGetRewardAck* PBC2SActivityGetRewardAck::New() const {
  return new PBC2SActivityGetRewardAck;
}

void PBC2SActivityGetRewardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SActivityGetRewardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SActivityGetRewardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SActivityGetRewardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SActivityGetRewardAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SActivityGetRewardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SActivityGetRewardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SActivityGetRewardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SActivityGetRewardAck::MergeFrom(const PBC2SActivityGetRewardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SActivityGetRewardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SActivityGetRewardAck::CopyFrom(const PBC2SActivityGetRewardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SActivityGetRewardAck::IsInitialized() const {
  
  return true;
}

void PBC2SActivityGetRewardAck::Swap(PBC2SActivityGetRewardAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SActivityGetRewardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SActivityGetRewardAck_descriptor_;
  metadata.reflection = PBC2SActivityGetRewardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2SActivityAddLivenessAck::kIdFieldNumber;
const int PBC2SActivityAddLivenessAck::kCountFieldNumber;
const int PBC2SActivityAddLivenessAck::kLivenessFieldNumber;
#endif  // !_MSC_VER

PBC2SActivityAddLivenessAck::PBC2SActivityAddLivenessAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2SActivityAddLivenessAck::InitAsDefaultInstance() {
}

PBC2SActivityAddLivenessAck::PBC2SActivityAddLivenessAck(const PBC2SActivityAddLivenessAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2SActivityAddLivenessAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  liveness_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2SActivityAddLivenessAck::~PBC2SActivityAddLivenessAck() {
  SharedDtor();
}

void PBC2SActivityAddLivenessAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2SActivityAddLivenessAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2SActivityAddLivenessAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2SActivityAddLivenessAck_descriptor_;
}

const PBC2SActivityAddLivenessAck& PBC2SActivityAddLivenessAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2SActivityAddLivenessAck* PBC2SActivityAddLivenessAck::default_instance_ = NULL;

PBC2SActivityAddLivenessAck* PBC2SActivityAddLivenessAck::New() const {
  return new PBC2SActivityAddLivenessAck;
}

void PBC2SActivityAddLivenessAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = 0u;
    liveness_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2SActivityAddLivenessAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_liveness;
        break;
      }
      
      // optional uint32 liveness = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liveness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &liveness_)));
          set_has_liveness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2SActivityAddLivenessAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // optional uint32 liveness = 3;
  if (has_liveness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->liveness(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2SActivityAddLivenessAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // optional uint32 liveness = 3;
  if (has_liveness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->liveness(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2SActivityAddLivenessAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 liveness = 3;
    if (has_liveness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->liveness());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2SActivityAddLivenessAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2SActivityAddLivenessAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2SActivityAddLivenessAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2SActivityAddLivenessAck::MergeFrom(const PBC2SActivityAddLivenessAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_liveness()) {
      set_liveness(from.liveness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2SActivityAddLivenessAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2SActivityAddLivenessAck::CopyFrom(const PBC2SActivityAddLivenessAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2SActivityAddLivenessAck::IsInitialized() const {
  
  return true;
}

void PBC2SActivityAddLivenessAck::Swap(PBC2SActivityAddLivenessAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(liveness_, other->liveness_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2SActivityAddLivenessAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2SActivityAddLivenessAck_descriptor_;
  metadata.reflection = PBC2SActivityAddLivenessAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GRelive_Born::kTypeFieldNumber;
#endif  // !_MSC_VER

PBC2GRelive_Born::PBC2GRelive_Born()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GRelive_Born::InitAsDefaultInstance() {
}

PBC2GRelive_Born::PBC2GRelive_Born(const PBC2GRelive_Born& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GRelive_Born::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GRelive_Born::~PBC2GRelive_Born() {
  SharedDtor();
}

void PBC2GRelive_Born::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GRelive_Born::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GRelive_Born::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GRelive_Born_descriptor_;
}

const PBC2GRelive_Born& PBC2GRelive_Born::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GRelive_Born* PBC2GRelive_Born::default_instance_ = NULL;

PBC2GRelive_Born* PBC2GRelive_Born::New() const {
  return new PBC2GRelive_Born;
}

void PBC2GRelive_Born::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GRelive_Born::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GRelive_Born::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GRelive_Born::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GRelive_Born::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GRelive_Born::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GRelive_Born* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GRelive_Born*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GRelive_Born::MergeFrom(const PBC2GRelive_Born& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GRelive_Born::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GRelive_Born::CopyFrom(const PBC2GRelive_Born& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GRelive_Born::IsInitialized() const {
  
  return true;
}

void PBC2GRelive_Born::Swap(PBC2GRelive_Born* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GRelive_Born::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GRelive_Born_descriptor_;
  metadata.reflection = PBC2GRelive_Born_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCorpsInfoAck::kBaseFieldNumber;
const int PBG2CCorpsInfoAck::kBoomrateFieldNumber;
const int PBG2CCorpsInfoAck::kManorfactionnameFieldNumber;
const int PBG2CCorpsInfoAck::kFaciontcountFieldNumber;
const int PBG2CCorpsInfoAck::kMembercountFieldNumber;
#endif  // !_MSC_VER

PBG2CCorpsInfoAck::PBG2CCorpsInfoAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCorpsInfoAck::InitAsDefaultInstance() {
  base_ = const_cast< ::PBCorpsInfo*>(&::PBCorpsInfo::default_instance());
}

PBG2CCorpsInfoAck::PBG2CCorpsInfoAck(const PBG2CCorpsInfoAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCorpsInfoAck::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  boomrate_ = 0u;
  manorfactionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  faciontcount_ = 0u;
  membercount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCorpsInfoAck::~PBG2CCorpsInfoAck() {
  SharedDtor();
}

void PBG2CCorpsInfoAck::SharedDtor() {
  if (manorfactionname_ != &::google::protobuf::internal::kEmptyString) {
    delete manorfactionname_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

void PBG2CCorpsInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCorpsInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCorpsInfoAck_descriptor_;
}

const PBG2CCorpsInfoAck& PBG2CCorpsInfoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCorpsInfoAck* PBG2CCorpsInfoAck::default_instance_ = NULL;

PBG2CCorpsInfoAck* PBG2CCorpsInfoAck::New() const {
  return new PBG2CCorpsInfoAck;
}

void PBG2CCorpsInfoAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::PBCorpsInfo::Clear();
    }
    boomrate_ = 0u;
    if (has_manorfactionname()) {
      if (manorfactionname_ != &::google::protobuf::internal::kEmptyString) {
        manorfactionname_->clear();
      }
    }
    faciontcount_ = 0u;
    membercount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCorpsInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCorpsInfo base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boomrate;
        break;
      }
      
      // optional uint32 boomrate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boomrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boomrate_)));
          set_has_boomrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_manorfactionname;
        break;
      }
      
      // optional string manorfactionname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorfactionname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manorfactionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manorfactionname().data(), this->manorfactionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_faciontcount;
        break;
      }
      
      // optional uint32 faciontcount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faciontcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faciontcount_)));
          set_has_faciontcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_membercount;
        break;
      }
      
      // optional uint32 membercount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_membercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
          set_has_membercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCorpsInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCorpsInfo base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional uint32 boomrate = 2;
  if (has_boomrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boomrate(), output);
  }
  
  // optional string manorfactionname = 3;
  if (has_manorfactionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manorfactionname().data(), this->manorfactionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->manorfactionname(), output);
  }
  
  // optional uint32 faciontcount = 4;
  if (has_faciontcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->faciontcount(), output);
  }
  
  // optional uint32 membercount = 5;
  if (has_membercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->membercount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCorpsInfoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCorpsInfo base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional uint32 boomrate = 2;
  if (has_boomrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boomrate(), target);
  }
  
  // optional string manorfactionname = 3;
  if (has_manorfactionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manorfactionname().data(), this->manorfactionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->manorfactionname(), target);
  }
  
  // optional uint32 faciontcount = 4;
  if (has_faciontcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->faciontcount(), target);
  }
  
  // optional uint32 membercount = 5;
  if (has_membercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->membercount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCorpsInfoAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCorpsInfo base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional uint32 boomrate = 2;
    if (has_boomrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boomrate());
    }
    
    // optional string manorfactionname = 3;
    if (has_manorfactionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manorfactionname());
    }
    
    // optional uint32 faciontcount = 4;
    if (has_faciontcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faciontcount());
    }
    
    // optional uint32 membercount = 5;
    if (has_membercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->membercount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCorpsInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCorpsInfoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCorpsInfoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCorpsInfoAck::MergeFrom(const PBG2CCorpsInfoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::PBCorpsInfo::MergeFrom(from.base());
    }
    if (from.has_boomrate()) {
      set_boomrate(from.boomrate());
    }
    if (from.has_manorfactionname()) {
      set_manorfactionname(from.manorfactionname());
    }
    if (from.has_faciontcount()) {
      set_faciontcount(from.faciontcount());
    }
    if (from.has_membercount()) {
      set_membercount(from.membercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCorpsInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCorpsInfoAck::CopyFrom(const PBG2CCorpsInfoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCorpsInfoAck::IsInitialized() const {
  
  return true;
}

void PBG2CCorpsInfoAck::Swap(PBG2CCorpsInfoAck* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(boomrate_, other->boomrate_);
    std::swap(manorfactionname_, other->manorfactionname_);
    std::swap(faciontcount_, other->faciontcount_);
    std::swap(membercount_, other->membercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCorpsInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCorpsInfoAck_descriptor_;
  metadata.reflection = PBG2CCorpsInfoAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCorpsSetDecAsk::kDeclarationFieldNumber;
#endif  // !_MSC_VER

PBC2GCorpsSetDecAsk::PBC2GCorpsSetDecAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCorpsSetDecAsk::InitAsDefaultInstance() {
}

PBC2GCorpsSetDecAsk::PBC2GCorpsSetDecAsk(const PBC2GCorpsSetDecAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCorpsSetDecAsk::SharedCtor() {
  _cached_size_ = 0;
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCorpsSetDecAsk::~PBC2GCorpsSetDecAsk() {
  SharedDtor();
}

void PBC2GCorpsSetDecAsk::SharedDtor() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (this != default_instance_) {
  }
}

void PBC2GCorpsSetDecAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCorpsSetDecAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCorpsSetDecAsk_descriptor_;
}

const PBC2GCorpsSetDecAsk& PBC2GCorpsSetDecAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCorpsSetDecAsk* PBC2GCorpsSetDecAsk::default_instance_ = NULL;

PBC2GCorpsSetDecAsk* PBC2GCorpsSetDecAsk::New() const {
  return new PBC2GCorpsSetDecAsk;
}

void PBC2GCorpsSetDecAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCorpsSetDecAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string declaration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCorpsSetDecAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string declaration = 1;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->declaration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCorpsSetDecAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string declaration = 1;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->declaration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCorpsSetDecAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string declaration = 1;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCorpsSetDecAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCorpsSetDecAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCorpsSetDecAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCorpsSetDecAsk::MergeFrom(const PBC2GCorpsSetDecAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCorpsSetDecAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCorpsSetDecAsk::CopyFrom(const PBC2GCorpsSetDecAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCorpsSetDecAsk::IsInitialized() const {
  
  return true;
}

void PBC2GCorpsSetDecAsk::Swap(PBC2GCorpsSetDecAsk* other) {
  if (other != this) {
    std::swap(declaration_, other->declaration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCorpsSetDecAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCorpsSetDecAsk_descriptor_;
  metadata.reflection = PBC2GCorpsSetDecAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCorpsSetDecAck::kDeclarationFieldNumber;
#endif  // !_MSC_VER

PBG2CCorpsSetDecAck::PBG2CCorpsSetDecAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCorpsSetDecAck::InitAsDefaultInstance() {
}

PBG2CCorpsSetDecAck::PBG2CCorpsSetDecAck(const PBG2CCorpsSetDecAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCorpsSetDecAck::SharedCtor() {
  _cached_size_ = 0;
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCorpsSetDecAck::~PBG2CCorpsSetDecAck() {
  SharedDtor();
}

void PBG2CCorpsSetDecAck::SharedDtor() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (this != default_instance_) {
  }
}

void PBG2CCorpsSetDecAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCorpsSetDecAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCorpsSetDecAck_descriptor_;
}

const PBG2CCorpsSetDecAck& PBG2CCorpsSetDecAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCorpsSetDecAck* PBG2CCorpsSetDecAck::default_instance_ = NULL;

PBG2CCorpsSetDecAck* PBG2CCorpsSetDecAck::New() const {
  return new PBG2CCorpsSetDecAck;
}

void PBG2CCorpsSetDecAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCorpsSetDecAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string declaration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCorpsSetDecAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string declaration = 1;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->declaration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCorpsSetDecAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string declaration = 1;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->declaration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCorpsSetDecAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string declaration = 1;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCorpsSetDecAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCorpsSetDecAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCorpsSetDecAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCorpsSetDecAck::MergeFrom(const PBG2CCorpsSetDecAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCorpsSetDecAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCorpsSetDecAck::CopyFrom(const PBG2CCorpsSetDecAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCorpsSetDecAck::IsInitialized() const {
  
  return true;
}

void PBG2CCorpsSetDecAck::Swap(PBG2CCorpsSetDecAck* other) {
  if (other != this) {
    std::swap(declaration_, other->declaration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCorpsSetDecAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCorpsSetDecAck_descriptor_;
  metadata.reflection = PBG2CCorpsSetDecAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCorpsSetJobAsk::kPlayeridFieldNumber;
const int PBC2GCorpsSetJobAsk::kCorpsjobFieldNumber;
#endif  // !_MSC_VER

PBC2GCorpsSetJobAsk::PBC2GCorpsSetJobAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCorpsSetJobAsk::InitAsDefaultInstance() {
}

PBC2GCorpsSetJobAsk::PBC2GCorpsSetJobAsk(const PBC2GCorpsSetJobAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCorpsSetJobAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  corpsjob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCorpsSetJobAsk::~PBC2GCorpsSetJobAsk() {
  SharedDtor();
}

void PBC2GCorpsSetJobAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCorpsSetJobAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCorpsSetJobAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCorpsSetJobAsk_descriptor_;
}

const PBC2GCorpsSetJobAsk& PBC2GCorpsSetJobAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCorpsSetJobAsk* PBC2GCorpsSetJobAsk::default_instance_ = NULL;

PBC2GCorpsSetJobAsk* PBC2GCorpsSetJobAsk::New() const {
  return new PBC2GCorpsSetJobAsk;
}

void PBC2GCorpsSetJobAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    corpsjob_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCorpsSetJobAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_corpsjob;
        break;
      }
      
      // optional uint32 corpsjob = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corpsjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corpsjob_)));
          set_has_corpsjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCorpsSetJobAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 corpsjob = 2;
  if (has_corpsjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->corpsjob(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCorpsSetJobAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 corpsjob = 2;
  if (has_corpsjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->corpsjob(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCorpsSetJobAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 corpsjob = 2;
    if (has_corpsjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->corpsjob());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCorpsSetJobAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCorpsSetJobAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCorpsSetJobAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCorpsSetJobAsk::MergeFrom(const PBC2GCorpsSetJobAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_corpsjob()) {
      set_corpsjob(from.corpsjob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCorpsSetJobAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCorpsSetJobAsk::CopyFrom(const PBC2GCorpsSetJobAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCorpsSetJobAsk::IsInitialized() const {
  
  return true;
}

void PBC2GCorpsSetJobAsk::Swap(PBC2GCorpsSetJobAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(corpsjob_, other->corpsjob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCorpsSetJobAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCorpsSetJobAsk_descriptor_;
  metadata.reflection = PBC2GCorpsSetJobAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CCorpsSetJobAck::kMemberinfoFieldNumber;
#endif  // !_MSC_VER

PBG2CCorpsSetJobAck::PBG2CCorpsSetJobAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CCorpsSetJobAck::InitAsDefaultInstance() {
  memberinfo_ = const_cast< ::PBCorpsMemberInfo*>(&::PBCorpsMemberInfo::default_instance());
}

PBG2CCorpsSetJobAck::PBG2CCorpsSetJobAck(const PBG2CCorpsSetJobAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CCorpsSetJobAck::SharedCtor() {
  _cached_size_ = 0;
  memberinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CCorpsSetJobAck::~PBG2CCorpsSetJobAck() {
  SharedDtor();
}

void PBG2CCorpsSetJobAck::SharedDtor() {
  if (this != default_instance_) {
    delete memberinfo_;
  }
}

void PBG2CCorpsSetJobAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CCorpsSetJobAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CCorpsSetJobAck_descriptor_;
}

const PBG2CCorpsSetJobAck& PBG2CCorpsSetJobAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CCorpsSetJobAck* PBG2CCorpsSetJobAck::default_instance_ = NULL;

PBG2CCorpsSetJobAck* PBG2CCorpsSetJobAck::New() const {
  return new PBG2CCorpsSetJobAck;
}

void PBG2CCorpsSetJobAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_memberinfo()) {
      if (memberinfo_ != NULL) memberinfo_->::PBCorpsMemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CCorpsSetJobAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBCorpsMemberInfo memberinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CCorpsSetJobAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBCorpsMemberInfo memberinfo = 1;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->memberinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CCorpsSetJobAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBCorpsMemberInfo memberinfo = 1;
  if (has_memberinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->memberinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CCorpsSetJobAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBCorpsMemberInfo memberinfo = 1;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CCorpsSetJobAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CCorpsSetJobAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CCorpsSetJobAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CCorpsSetJobAck::MergeFrom(const PBG2CCorpsSetJobAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberinfo()) {
      mutable_memberinfo()->::PBCorpsMemberInfo::MergeFrom(from.memberinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CCorpsSetJobAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CCorpsSetJobAck::CopyFrom(const PBG2CCorpsSetJobAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CCorpsSetJobAck::IsInitialized() const {
  
  return true;
}

void PBG2CCorpsSetJobAck::Swap(PBG2CCorpsSetJobAck* other) {
  if (other != this) {
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CCorpsSetJobAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CCorpsSetJobAck_descriptor_;
  metadata.reflection = PBG2CCorpsSetJobAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GCorpsForbitSpeakAsk::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBC2GCorpsForbitSpeakAsk::PBC2GCorpsForbitSpeakAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GCorpsForbitSpeakAsk::InitAsDefaultInstance() {
}

PBC2GCorpsForbitSpeakAsk::PBC2GCorpsForbitSpeakAsk(const PBC2GCorpsForbitSpeakAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GCorpsForbitSpeakAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GCorpsForbitSpeakAsk::~PBC2GCorpsForbitSpeakAsk() {
  SharedDtor();
}

void PBC2GCorpsForbitSpeakAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GCorpsForbitSpeakAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GCorpsForbitSpeakAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GCorpsForbitSpeakAsk_descriptor_;
}

const PBC2GCorpsForbitSpeakAsk& PBC2GCorpsForbitSpeakAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GCorpsForbitSpeakAsk* PBC2GCorpsForbitSpeakAsk::default_instance_ = NULL;

PBC2GCorpsForbitSpeakAsk* PBC2GCorpsForbitSpeakAsk::New() const {
  return new PBC2GCorpsForbitSpeakAsk;
}

void PBC2GCorpsForbitSpeakAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GCorpsForbitSpeakAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GCorpsForbitSpeakAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GCorpsForbitSpeakAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GCorpsForbitSpeakAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GCorpsForbitSpeakAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GCorpsForbitSpeakAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GCorpsForbitSpeakAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GCorpsForbitSpeakAsk::MergeFrom(const PBC2GCorpsForbitSpeakAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GCorpsForbitSpeakAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GCorpsForbitSpeakAsk::CopyFrom(const PBC2GCorpsForbitSpeakAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GCorpsForbitSpeakAsk::IsInitialized() const {
  
  return true;
}

void PBC2GCorpsForbitSpeakAsk::Swap(PBC2GCorpsForbitSpeakAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GCorpsForbitSpeakAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GCorpsForbitSpeakAsk_descriptor_;
  metadata.reflection = PBC2GCorpsForbitSpeakAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GWealLoginPrizeAsk::kIdFieldNumber;
const int PBC2GWealLoginPrizeAsk::kDayFieldNumber;
#endif  // !_MSC_VER

PBC2GWealLoginPrizeAsk::PBC2GWealLoginPrizeAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GWealLoginPrizeAsk::InitAsDefaultInstance() {
}

PBC2GWealLoginPrizeAsk::PBC2GWealLoginPrizeAsk(const PBC2GWealLoginPrizeAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GWealLoginPrizeAsk::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GWealLoginPrizeAsk::~PBC2GWealLoginPrizeAsk() {
  SharedDtor();
}

void PBC2GWealLoginPrizeAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GWealLoginPrizeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GWealLoginPrizeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GWealLoginPrizeAsk_descriptor_;
}

const PBC2GWealLoginPrizeAsk& PBC2GWealLoginPrizeAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GWealLoginPrizeAsk* PBC2GWealLoginPrizeAsk::default_instance_ = NULL;

PBC2GWealLoginPrizeAsk* PBC2GWealLoginPrizeAsk::New() const {
  return new PBC2GWealLoginPrizeAsk;
}

void PBC2GWealLoginPrizeAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GWealLoginPrizeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }
      
      // optional uint32 day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GWealLoginPrizeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->day(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GWealLoginPrizeAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->day(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GWealLoginPrizeAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GWealLoginPrizeAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GWealLoginPrizeAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GWealLoginPrizeAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GWealLoginPrizeAsk::MergeFrom(const PBC2GWealLoginPrizeAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GWealLoginPrizeAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GWealLoginPrizeAsk::CopyFrom(const PBC2GWealLoginPrizeAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GWealLoginPrizeAsk::IsInitialized() const {
  
  return true;
}

void PBC2GWealLoginPrizeAsk::Swap(PBC2GWealLoginPrizeAsk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GWealLoginPrizeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GWealLoginPrizeAsk_descriptor_;
  metadata.reflection = PBC2GWealLoginPrizeAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2GManorGetAllInfoAsk::PBC2GManorGetAllInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GManorGetAllInfoAsk::InitAsDefaultInstance() {
}

PBC2GManorGetAllInfoAsk::PBC2GManorGetAllInfoAsk(const PBC2GManorGetAllInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GManorGetAllInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GManorGetAllInfoAsk::~PBC2GManorGetAllInfoAsk() {
  SharedDtor();
}

void PBC2GManorGetAllInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GManorGetAllInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GManorGetAllInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GManorGetAllInfoAsk_descriptor_;
}

const PBC2GManorGetAllInfoAsk& PBC2GManorGetAllInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GManorGetAllInfoAsk* PBC2GManorGetAllInfoAsk::default_instance_ = NULL;

PBC2GManorGetAllInfoAsk* PBC2GManorGetAllInfoAsk::New() const {
  return new PBC2GManorGetAllInfoAsk;
}

void PBC2GManorGetAllInfoAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GManorGetAllInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2GManorGetAllInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GManorGetAllInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GManorGetAllInfoAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GManorGetAllInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GManorGetAllInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GManorGetAllInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GManorGetAllInfoAsk::MergeFrom(const PBC2GManorGetAllInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GManorGetAllInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GManorGetAllInfoAsk::CopyFrom(const PBC2GManorGetAllInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GManorGetAllInfoAsk::IsInitialized() const {
  
  return true;
}

void PBC2GManorGetAllInfoAsk::Swap(PBC2GManorGetAllInfoAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GManorGetAllInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GManorGetAllInfoAsk_descriptor_;
  metadata.reflection = PBC2GManorGetAllInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CManorGetAllInfoAck::kManorsFieldNumber;
#endif  // !_MSC_VER

PBG2CManorGetAllInfoAck::PBG2CManorGetAllInfoAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CManorGetAllInfoAck::InitAsDefaultInstance() {
}

PBG2CManorGetAllInfoAck::PBG2CManorGetAllInfoAck(const PBG2CManorGetAllInfoAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CManorGetAllInfoAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CManorGetAllInfoAck::~PBG2CManorGetAllInfoAck() {
  SharedDtor();
}

void PBG2CManorGetAllInfoAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CManorGetAllInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CManorGetAllInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CManorGetAllInfoAck_descriptor_;
}

const PBG2CManorGetAllInfoAck& PBG2CManorGetAllInfoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CManorGetAllInfoAck* PBG2CManorGetAllInfoAck::default_instance_ = NULL;

PBG2CManorGetAllInfoAck* PBG2CManorGetAllInfoAck::New() const {
  return new PBG2CManorGetAllInfoAck;
}

void PBG2CManorGetAllInfoAck::Clear() {
  manors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CManorGetAllInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBManorInfo manors = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manors;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CManorGetAllInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBManorInfo manors = 1;
  for (int i = 0; i < this->manors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manors(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CManorGetAllInfoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBManorInfo manors = 1;
  for (int i = 0; i < this->manors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manors(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CManorGetAllInfoAck::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBManorInfo manors = 1;
  total_size += 1 * this->manors_size();
  for (int i = 0; i < this->manors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manors(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CManorGetAllInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CManorGetAllInfoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CManorGetAllInfoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CManorGetAllInfoAck::MergeFrom(const PBG2CManorGetAllInfoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  manors_.MergeFrom(from.manors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CManorGetAllInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CManorGetAllInfoAck::CopyFrom(const PBG2CManorGetAllInfoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CManorGetAllInfoAck::IsInitialized() const {
  
  return true;
}

void PBG2CManorGetAllInfoAck::Swap(PBG2CManorGetAllInfoAck* other) {
  if (other != this) {
    manors_.Swap(&other->manors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CManorGetAllInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CManorGetAllInfoAck_descriptor_;
  metadata.reflection = PBG2CManorGetAllInfoAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2GManorGetFightInfoAsk::PBC2GManorGetFightInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GManorGetFightInfoAsk::InitAsDefaultInstance() {
}

PBC2GManorGetFightInfoAsk::PBC2GManorGetFightInfoAsk(const PBC2GManorGetFightInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GManorGetFightInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GManorGetFightInfoAsk::~PBC2GManorGetFightInfoAsk() {
  SharedDtor();
}

void PBC2GManorGetFightInfoAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GManorGetFightInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GManorGetFightInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GManorGetFightInfoAsk_descriptor_;
}

const PBC2GManorGetFightInfoAsk& PBC2GManorGetFightInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GManorGetFightInfoAsk* PBC2GManorGetFightInfoAsk::default_instance_ = NULL;

PBC2GManorGetFightInfoAsk* PBC2GManorGetFightInfoAsk::New() const {
  return new PBC2GManorGetFightInfoAsk;
}

void PBC2GManorGetFightInfoAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GManorGetFightInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2GManorGetFightInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GManorGetFightInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GManorGetFightInfoAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GManorGetFightInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GManorGetFightInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GManorGetFightInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GManorGetFightInfoAsk::MergeFrom(const PBC2GManorGetFightInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GManorGetFightInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GManorGetFightInfoAsk::CopyFrom(const PBC2GManorGetFightInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GManorGetFightInfoAsk::IsInitialized() const {
  
  return true;
}

void PBC2GManorGetFightInfoAsk::Swap(PBC2GManorGetFightInfoAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GManorGetFightInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GManorGetFightInfoAsk_descriptor_;
  metadata.reflection = PBC2GManorGetFightInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CManorGetFightInfoAck::kManorFieldNumber;
#endif  // !_MSC_VER

PBG2CManorGetFightInfoAck::PBG2CManorGetFightInfoAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CManorGetFightInfoAck::InitAsDefaultInstance() {
  manor_ = const_cast< ::PBManorInfo*>(&::PBManorInfo::default_instance());
}

PBG2CManorGetFightInfoAck::PBG2CManorGetFightInfoAck(const PBG2CManorGetFightInfoAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CManorGetFightInfoAck::SharedCtor() {
  _cached_size_ = 0;
  manor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CManorGetFightInfoAck::~PBG2CManorGetFightInfoAck() {
  SharedDtor();
}

void PBG2CManorGetFightInfoAck::SharedDtor() {
  if (this != default_instance_) {
    delete manor_;
  }
}

void PBG2CManorGetFightInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CManorGetFightInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CManorGetFightInfoAck_descriptor_;
}

const PBG2CManorGetFightInfoAck& PBG2CManorGetFightInfoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CManorGetFightInfoAck* PBG2CManorGetFightInfoAck::default_instance_ = NULL;

PBG2CManorGetFightInfoAck* PBG2CManorGetFightInfoAck::New() const {
  return new PBG2CManorGetFightInfoAck;
}

void PBG2CManorGetFightInfoAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_manor()) {
      if (manor_ != NULL) manor_->::PBManorInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CManorGetFightInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBManorInfo manor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CManorGetFightInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBManorInfo manor = 1;
  if (has_manor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CManorGetFightInfoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBManorInfo manor = 1;
  if (has_manor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CManorGetFightInfoAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBManorInfo manor = 1;
    if (has_manor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CManorGetFightInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CManorGetFightInfoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CManorGetFightInfoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CManorGetFightInfoAck::MergeFrom(const PBG2CManorGetFightInfoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manor()) {
      mutable_manor()->::PBManorInfo::MergeFrom(from.manor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CManorGetFightInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CManorGetFightInfoAck::CopyFrom(const PBG2CManorGetFightInfoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CManorGetFightInfoAck::IsInitialized() const {
  
  return true;
}

void PBG2CManorGetFightInfoAck::Swap(PBG2CManorGetFightInfoAck* other) {
  if (other != this) {
    std::swap(manor_, other->manor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CManorGetFightInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CManorGetFightInfoAck_descriptor_;
  metadata.reflection = PBG2CManorGetFightInfoAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GManorApplyFightAsk::kManoridFieldNumber;
const int PBC2GManorApplyFightAsk::kIscancelFieldNumber;
#endif  // !_MSC_VER

PBC2GManorApplyFightAsk::PBC2GManorApplyFightAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GManorApplyFightAsk::InitAsDefaultInstance() {
}

PBC2GManorApplyFightAsk::PBC2GManorApplyFightAsk(const PBC2GManorApplyFightAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GManorApplyFightAsk::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  iscancel_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GManorApplyFightAsk::~PBC2GManorApplyFightAsk() {
  SharedDtor();
}

void PBC2GManorApplyFightAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GManorApplyFightAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GManorApplyFightAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GManorApplyFightAsk_descriptor_;
}

const PBC2GManorApplyFightAsk& PBC2GManorApplyFightAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GManorApplyFightAsk* PBC2GManorApplyFightAsk::default_instance_ = NULL;

PBC2GManorApplyFightAsk* PBC2GManorApplyFightAsk::New() const {
  return new PBC2GManorApplyFightAsk;
}

void PBC2GManorApplyFightAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    iscancel_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GManorApplyFightAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iscancel;
        break;
      }
      
      // optional bool iscancel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iscancel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscancel_)));
          set_has_iscancel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GManorApplyFightAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }
  
  // optional bool iscancel = 2;
  if (has_iscancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->iscancel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GManorApplyFightAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }
  
  // optional bool iscancel = 2;
  if (has_iscancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->iscancel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GManorApplyFightAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorid = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }
    
    // optional bool iscancel = 2;
    if (has_iscancel()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GManorApplyFightAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GManorApplyFightAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GManorApplyFightAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GManorApplyFightAsk::MergeFrom(const PBC2GManorApplyFightAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_iscancel()) {
      set_iscancel(from.iscancel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GManorApplyFightAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GManorApplyFightAsk::CopyFrom(const PBC2GManorApplyFightAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GManorApplyFightAsk::IsInitialized() const {
  
  return true;
}

void PBC2GManorApplyFightAsk::Swap(PBC2GManorApplyFightAsk* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(iscancel_, other->iscancel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GManorApplyFightAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GManorApplyFightAsk_descriptor_;
  metadata.reflection = PBC2GManorApplyFightAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CManorApplyFightAck::PBG2CManorApplyFightAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CManorApplyFightAck::InitAsDefaultInstance() {
}

PBG2CManorApplyFightAck::PBG2CManorApplyFightAck(const PBG2CManorApplyFightAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CManorApplyFightAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CManorApplyFightAck::~PBG2CManorApplyFightAck() {
  SharedDtor();
}

void PBG2CManorApplyFightAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CManorApplyFightAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CManorApplyFightAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CManorApplyFightAck_descriptor_;
}

const PBG2CManorApplyFightAck& PBG2CManorApplyFightAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CManorApplyFightAck* PBG2CManorApplyFightAck::default_instance_ = NULL;

PBG2CManorApplyFightAck* PBG2CManorApplyFightAck::New() const {
  return new PBG2CManorApplyFightAck;
}

void PBG2CManorApplyFightAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CManorApplyFightAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CManorApplyFightAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CManorApplyFightAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CManorApplyFightAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CManorApplyFightAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CManorApplyFightAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CManorApplyFightAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CManorApplyFightAck::MergeFrom(const PBG2CManorApplyFightAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CManorApplyFightAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CManorApplyFightAck::CopyFrom(const PBG2CManorApplyFightAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CManorApplyFightAck::IsInitialized() const {
  
  return true;
}

void PBG2CManorApplyFightAck::Swap(PBG2CManorApplyFightAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CManorApplyFightAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CManorApplyFightAck_descriptor_;
  metadata.reflection = PBG2CManorApplyFightAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GManorEnterLobbyAsk::kManoridFieldNumber;
#endif  // !_MSC_VER

PBC2GManorEnterLobbyAsk::PBC2GManorEnterLobbyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GManorEnterLobbyAsk::InitAsDefaultInstance() {
}

PBC2GManorEnterLobbyAsk::PBC2GManorEnterLobbyAsk(const PBC2GManorEnterLobbyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GManorEnterLobbyAsk::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GManorEnterLobbyAsk::~PBC2GManorEnterLobbyAsk() {
  SharedDtor();
}

void PBC2GManorEnterLobbyAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GManorEnterLobbyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GManorEnterLobbyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GManorEnterLobbyAsk_descriptor_;
}

const PBC2GManorEnterLobbyAsk& PBC2GManorEnterLobbyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GManorEnterLobbyAsk* PBC2GManorEnterLobbyAsk::default_instance_ = NULL;

PBC2GManorEnterLobbyAsk* PBC2GManorEnterLobbyAsk::New() const {
  return new PBC2GManorEnterLobbyAsk;
}

void PBC2GManorEnterLobbyAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GManorEnterLobbyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GManorEnterLobbyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GManorEnterLobbyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorid = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GManorEnterLobbyAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorid = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GManorEnterLobbyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GManorEnterLobbyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GManorEnterLobbyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GManorEnterLobbyAsk::MergeFrom(const PBC2GManorEnterLobbyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GManorEnterLobbyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GManorEnterLobbyAsk::CopyFrom(const PBC2GManorEnterLobbyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GManorEnterLobbyAsk::IsInitialized() const {
  
  return true;
}

void PBC2GManorEnterLobbyAsk::Swap(PBC2GManorEnterLobbyAsk* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GManorEnterLobbyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GManorEnterLobbyAsk_descriptor_;
  metadata.reflection = PBC2GManorEnterLobbyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CManorEnterLobbyAck::PBG2CManorEnterLobbyAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CManorEnterLobbyAck::InitAsDefaultInstance() {
}

PBG2CManorEnterLobbyAck::PBG2CManorEnterLobbyAck(const PBG2CManorEnterLobbyAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CManorEnterLobbyAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CManorEnterLobbyAck::~PBG2CManorEnterLobbyAck() {
  SharedDtor();
}

void PBG2CManorEnterLobbyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CManorEnterLobbyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CManorEnterLobbyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CManorEnterLobbyAck_descriptor_;
}

const PBG2CManorEnterLobbyAck& PBG2CManorEnterLobbyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CManorEnterLobbyAck* PBG2CManorEnterLobbyAck::default_instance_ = NULL;

PBG2CManorEnterLobbyAck* PBG2CManorEnterLobbyAck::New() const {
  return new PBG2CManorEnterLobbyAck;
}

void PBG2CManorEnterLobbyAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CManorEnterLobbyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CManorEnterLobbyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CManorEnterLobbyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CManorEnterLobbyAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CManorEnterLobbyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CManorEnterLobbyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CManorEnterLobbyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CManorEnterLobbyAck::MergeFrom(const PBG2CManorEnterLobbyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CManorEnterLobbyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CManorEnterLobbyAck::CopyFrom(const PBG2CManorEnterLobbyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CManorEnterLobbyAck::IsInitialized() const {
  
  return true;
}

void PBG2CManorEnterLobbyAck::Swap(PBG2CManorEnterLobbyAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CManorEnterLobbyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CManorEnterLobbyAck_descriptor_;
  metadata.reflection = PBG2CManorEnterLobbyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CManorStartFightNtf::PBG2CManorStartFightNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CManorStartFightNtf::InitAsDefaultInstance() {
}

PBG2CManorStartFightNtf::PBG2CManorStartFightNtf(const PBG2CManorStartFightNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CManorStartFightNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CManorStartFightNtf::~PBG2CManorStartFightNtf() {
  SharedDtor();
}

void PBG2CManorStartFightNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CManorStartFightNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CManorStartFightNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CManorStartFightNtf_descriptor_;
}

const PBG2CManorStartFightNtf& PBG2CManorStartFightNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CManorStartFightNtf* PBG2CManorStartFightNtf::default_instance_ = NULL;

PBG2CManorStartFightNtf* PBG2CManorStartFightNtf::New() const {
  return new PBG2CManorStartFightNtf;
}

void PBG2CManorStartFightNtf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CManorStartFightNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CManorStartFightNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CManorStartFightNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CManorStartFightNtf::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CManorStartFightNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CManorStartFightNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CManorStartFightNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CManorStartFightNtf::MergeFrom(const PBG2CManorStartFightNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CManorStartFightNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CManorStartFightNtf::CopyFrom(const PBG2CManorStartFightNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CManorStartFightNtf::IsInitialized() const {
  
  return true;
}

void PBG2CManorStartFightNtf::Swap(PBG2CManorStartFightNtf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CManorStartFightNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CManorStartFightNtf_descriptor_;
  metadata.reflection = PBG2CManorStartFightNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBC2GManorMVPVoteAsk::kPlayeridFieldNumber;
const int PBC2GManorMVPVoteAsk::kManoridFieldNumber;
#endif  // !_MSC_VER

PBC2GManorMVPVoteAsk::PBC2GManorMVPVoteAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GManorMVPVoteAsk::InitAsDefaultInstance() {
}

PBC2GManorMVPVoteAsk::PBC2GManorMVPVoteAsk(const PBC2GManorMVPVoteAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GManorMVPVoteAsk::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  manorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GManorMVPVoteAsk::~PBC2GManorMVPVoteAsk() {
  SharedDtor();
}

void PBC2GManorMVPVoteAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GManorMVPVoteAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GManorMVPVoteAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GManorMVPVoteAsk_descriptor_;
}

const PBC2GManorMVPVoteAsk& PBC2GManorMVPVoteAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GManorMVPVoteAsk* PBC2GManorMVPVoteAsk::default_instance_ = NULL;

PBC2GManorMVPVoteAsk* PBC2GManorMVPVoteAsk::New() const {
  return new PBC2GManorMVPVoteAsk;
}

void PBC2GManorMVPVoteAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    manorid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GManorMVPVoteAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_manorid;
        break;
      }
      
      // optional uint32 manorid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBC2GManorMVPVoteAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 manorid = 2;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->manorid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GManorMVPVoteAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 manorid = 2;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->manorid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GManorMVPVoteAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 manorid = 2;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GManorMVPVoteAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GManorMVPVoteAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GManorMVPVoteAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GManorMVPVoteAsk::MergeFrom(const PBC2GManorMVPVoteAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GManorMVPVoteAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GManorMVPVoteAsk::CopyFrom(const PBC2GManorMVPVoteAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GManorMVPVoteAsk::IsInitialized() const {
  
  return true;
}

void PBC2GManorMVPVoteAsk::Swap(PBC2GManorMVPVoteAsk* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(manorid_, other->manorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GManorMVPVoteAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GManorMVPVoteAsk_descriptor_;
  metadata.reflection = PBC2GManorMVPVoteAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CManorMvpVoteAck::PBG2CManorMvpVoteAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CManorMvpVoteAck::InitAsDefaultInstance() {
}

PBG2CManorMvpVoteAck::PBG2CManorMvpVoteAck(const PBG2CManorMvpVoteAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CManorMvpVoteAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CManorMvpVoteAck::~PBG2CManorMvpVoteAck() {
  SharedDtor();
}

void PBG2CManorMvpVoteAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CManorMvpVoteAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CManorMvpVoteAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CManorMvpVoteAck_descriptor_;
}

const PBG2CManorMvpVoteAck& PBG2CManorMvpVoteAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CManorMvpVoteAck* PBG2CManorMvpVoteAck::default_instance_ = NULL;

PBG2CManorMvpVoteAck* PBG2CManorMvpVoteAck::New() const {
  return new PBG2CManorMvpVoteAck;
}

void PBG2CManorMvpVoteAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CManorMvpVoteAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CManorMvpVoteAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CManorMvpVoteAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CManorMvpVoteAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CManorMvpVoteAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CManorMvpVoteAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CManorMvpVoteAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CManorMvpVoteAck::MergeFrom(const PBG2CManorMvpVoteAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CManorMvpVoteAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CManorMvpVoteAck::CopyFrom(const PBG2CManorMvpVoteAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CManorMvpVoteAck::IsInitialized() const {
  
  return true;
}

void PBG2CManorMvpVoteAck::Swap(PBG2CManorMvpVoteAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CManorMvpVoteAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CManorMvpVoteAck_descriptor_;
  metadata.reflection = PBG2CManorMvpVoteAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CManorMVPVoteNtf::kPlayeridFieldNumber;
const int PBG2CManorMVPVoteNtf::kVotecountFieldNumber;
#endif  // !_MSC_VER

PBG2CManorMVPVoteNtf::PBG2CManorMVPVoteNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CManorMVPVoteNtf::InitAsDefaultInstance() {
}

PBG2CManorMVPVoteNtf::PBG2CManorMVPVoteNtf(const PBG2CManorMVPVoteNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CManorMVPVoteNtf::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  votecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CManorMVPVoteNtf::~PBG2CManorMVPVoteNtf() {
  SharedDtor();
}

void PBG2CManorMVPVoteNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CManorMVPVoteNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CManorMVPVoteNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CManorMVPVoteNtf_descriptor_;
}

const PBG2CManorMVPVoteNtf& PBG2CManorMVPVoteNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CManorMVPVoteNtf* PBG2CManorMVPVoteNtf::default_instance_ = NULL;

PBG2CManorMVPVoteNtf* PBG2CManorMVPVoteNtf::New() const {
  return new PBG2CManorMVPVoteNtf;
}

void PBG2CManorMVPVoteNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    votecount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CManorMVPVoteNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_votecount;
        break;
      }
      
      // optional uint32 votecount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_votecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &votecount_)));
          set_has_votecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CManorMVPVoteNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional uint32 votecount = 2;
  if (has_votecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->votecount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CManorMVPVoteNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional uint32 votecount = 2;
  if (has_votecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->votecount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CManorMVPVoteNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional uint32 votecount = 2;
    if (has_votecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->votecount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CManorMVPVoteNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CManorMVPVoteNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CManorMVPVoteNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CManorMVPVoteNtf::MergeFrom(const PBG2CManorMVPVoteNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_votecount()) {
      set_votecount(from.votecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CManorMVPVoteNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CManorMVPVoteNtf::CopyFrom(const PBG2CManorMVPVoteNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CManorMVPVoteNtf::IsInitialized() const {
  
  return true;
}

void PBG2CManorMVPVoteNtf::Swap(PBG2CManorMVPVoteNtf* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(votecount_, other->votecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CManorMVPVoteNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CManorMVPVoteNtf_descriptor_;
  metadata.reflection = PBG2CManorMVPVoteNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2GManorGetScoresAsk::PBC2GManorGetScoresAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GManorGetScoresAsk::InitAsDefaultInstance() {
}

PBC2GManorGetScoresAsk::PBC2GManorGetScoresAsk(const PBC2GManorGetScoresAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GManorGetScoresAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GManorGetScoresAsk::~PBC2GManorGetScoresAsk() {
  SharedDtor();
}

void PBC2GManorGetScoresAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GManorGetScoresAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GManorGetScoresAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GManorGetScoresAsk_descriptor_;
}

const PBC2GManorGetScoresAsk& PBC2GManorGetScoresAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GManorGetScoresAsk* PBC2GManorGetScoresAsk::default_instance_ = NULL;

PBC2GManorGetScoresAsk* PBC2GManorGetScoresAsk::New() const {
  return new PBC2GManorGetScoresAsk;
}

void PBC2GManorGetScoresAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GManorGetScoresAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2GManorGetScoresAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GManorGetScoresAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GManorGetScoresAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GManorGetScoresAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GManorGetScoresAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GManorGetScoresAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GManorGetScoresAsk::MergeFrom(const PBC2GManorGetScoresAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GManorGetScoresAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GManorGetScoresAsk::CopyFrom(const PBC2GManorGetScoresAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GManorGetScoresAsk::IsInitialized() const {
  
  return true;
}

void PBC2GManorGetScoresAsk::Swap(PBC2GManorGetScoresAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GManorGetScoresAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GManorGetScoresAsk_descriptor_;
  metadata.reflection = PBC2GManorGetScoresAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBC2GManorGetPlayerScoresAsk::PBC2GManorGetPlayerScoresAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBC2GManorGetPlayerScoresAsk::InitAsDefaultInstance() {
}

PBC2GManorGetPlayerScoresAsk::PBC2GManorGetPlayerScoresAsk(const PBC2GManorGetPlayerScoresAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBC2GManorGetPlayerScoresAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBC2GManorGetPlayerScoresAsk::~PBC2GManorGetPlayerScoresAsk() {
  SharedDtor();
}

void PBC2GManorGetPlayerScoresAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBC2GManorGetPlayerScoresAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBC2GManorGetPlayerScoresAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBC2GManorGetPlayerScoresAsk_descriptor_;
}

const PBC2GManorGetPlayerScoresAsk& PBC2GManorGetPlayerScoresAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBC2GManorGetPlayerScoresAsk* PBC2GManorGetPlayerScoresAsk::default_instance_ = NULL;

PBC2GManorGetPlayerScoresAsk* PBC2GManorGetPlayerScoresAsk::New() const {
  return new PBC2GManorGetPlayerScoresAsk;
}

void PBC2GManorGetPlayerScoresAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBC2GManorGetPlayerScoresAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBC2GManorGetPlayerScoresAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBC2GManorGetPlayerScoresAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBC2GManorGetPlayerScoresAsk::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBC2GManorGetPlayerScoresAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBC2GManorGetPlayerScoresAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBC2GManorGetPlayerScoresAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBC2GManorGetPlayerScoresAsk::MergeFrom(const PBC2GManorGetPlayerScoresAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBC2GManorGetPlayerScoresAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBC2GManorGetPlayerScoresAsk::CopyFrom(const PBC2GManorGetPlayerScoresAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBC2GManorGetPlayerScoresAsk::IsInitialized() const {
  
  return true;
}

void PBC2GManorGetPlayerScoresAsk::Swap(PBC2GManorGetPlayerScoresAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBC2GManorGetPlayerScoresAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBC2GManorGetPlayerScoresAsk_descriptor_;
  metadata.reflection = PBC2GManorGetPlayerScoresAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBManorBattleFieldScore::kSceneidFieldNumber;
const int PBManorBattleFieldScore::kDefenderscoreFieldNumber;
const int PBManorBattleFieldScore::kChallengerscoreFieldNumber;
#endif  // !_MSC_VER

PBManorBattleFieldScore::PBManorBattleFieldScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBManorBattleFieldScore::InitAsDefaultInstance() {
}

PBManorBattleFieldScore::PBManorBattleFieldScore(const PBManorBattleFieldScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBManorBattleFieldScore::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  defenderscore_ = 0u;
  challengerscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBManorBattleFieldScore::~PBManorBattleFieldScore() {
  SharedDtor();
}

void PBManorBattleFieldScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBManorBattleFieldScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBManorBattleFieldScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBManorBattleFieldScore_descriptor_;
}

const PBManorBattleFieldScore& PBManorBattleFieldScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBManorBattleFieldScore* PBManorBattleFieldScore::default_instance_ = NULL;

PBManorBattleFieldScore* PBManorBattleFieldScore::New() const {
  return new PBManorBattleFieldScore;
}

void PBManorBattleFieldScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    defenderscore_ = 0u;
    challengerscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBManorBattleFieldScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defenderscore;
        break;
      }
      
      // optional uint32 defenderscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defenderscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defenderscore_)));
          set_has_defenderscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_challengerscore;
        break;
      }
      
      // optional uint32 challengerscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengerscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengerscore_)));
          set_has_challengerscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBManorBattleFieldScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }
  
  // optional uint32 defenderscore = 2;
  if (has_defenderscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defenderscore(), output);
  }
  
  // optional uint32 challengerscore = 3;
  if (has_challengerscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->challengerscore(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBManorBattleFieldScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }
  
  // optional uint32 defenderscore = 2;
  if (has_defenderscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defenderscore(), target);
  }
  
  // optional uint32 challengerscore = 3;
  if (has_challengerscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->challengerscore(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBManorBattleFieldScore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }
    
    // optional uint32 defenderscore = 2;
    if (has_defenderscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defenderscore());
    }
    
    // optional uint32 challengerscore = 3;
    if (has_challengerscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengerscore());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBManorBattleFieldScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBManorBattleFieldScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBManorBattleFieldScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBManorBattleFieldScore::MergeFrom(const PBManorBattleFieldScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_defenderscore()) {
      set_defenderscore(from.defenderscore());
    }
    if (from.has_challengerscore()) {
      set_challengerscore(from.challengerscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBManorBattleFieldScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBManorBattleFieldScore::CopyFrom(const PBManorBattleFieldScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBManorBattleFieldScore::IsInitialized() const {
  
  return true;
}

void PBManorBattleFieldScore::Swap(PBManorBattleFieldScore* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(defenderscore_, other->defenderscore_);
    std::swap(challengerscore_, other->challengerscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBManorBattleFieldScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBManorBattleFieldScore_descriptor_;
  metadata.reflection = PBManorBattleFieldScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CManorGetScoresAck::kWinnerFieldNumber;
const int PBG2CManorGetScoresAck::kLoserFieldNumber;
const int PBG2CManorGetScoresAck::kWinnerscoreFieldNumber;
const int PBG2CManorGetScoresAck::kLoserscoreFieldNumber;
#endif  // !_MSC_VER

PBG2CManorGetScoresAck::PBG2CManorGetScoresAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CManorGetScoresAck::InitAsDefaultInstance() {
  winner_ = const_cast< ::PBFactionChallenger*>(&::PBFactionChallenger::default_instance());
  loser_ = const_cast< ::PBFactionChallenger*>(&::PBFactionChallenger::default_instance());
}

PBG2CManorGetScoresAck::PBG2CManorGetScoresAck(const PBG2CManorGetScoresAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CManorGetScoresAck::SharedCtor() {
  _cached_size_ = 0;
  winner_ = NULL;
  loser_ = NULL;
  winnerscore_ = 0u;
  loserscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CManorGetScoresAck::~PBG2CManorGetScoresAck() {
  SharedDtor();
}

void PBG2CManorGetScoresAck::SharedDtor() {
  if (this != default_instance_) {
    delete winner_;
    delete loser_;
  }
}

void PBG2CManorGetScoresAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CManorGetScoresAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CManorGetScoresAck_descriptor_;
}

const PBG2CManorGetScoresAck& PBG2CManorGetScoresAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CManorGetScoresAck* PBG2CManorGetScoresAck::default_instance_ = NULL;

PBG2CManorGetScoresAck* PBG2CManorGetScoresAck::New() const {
  return new PBG2CManorGetScoresAck;
}

void PBG2CManorGetScoresAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_winner()) {
      if (winner_ != NULL) winner_->::PBFactionChallenger::Clear();
    }
    if (has_loser()) {
      if (loser_ != NULL) loser_->::PBFactionChallenger::Clear();
    }
    winnerscore_ = 0u;
    loserscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CManorGetScoresAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionChallenger winner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_winner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loser;
        break;
      }
      
      // optional .PBFactionChallenger loser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winnerscore;
        break;
      }
      
      // optional uint32 winnerscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnerscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnerscore_)));
          set_has_winnerscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loserscore;
        break;
      }
      
      // optional uint32 loserscore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loserscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loserscore_)));
          set_has_loserscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CManorGetScoresAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionChallenger winner = 1;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->winner(), output);
  }
  
  // optional .PBFactionChallenger loser = 2;
  if (has_loser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loser(), output);
  }
  
  // optional uint32 winnerscore = 3;
  if (has_winnerscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->winnerscore(), output);
  }
  
  // optional uint32 loserscore = 4;
  if (has_loserscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->loserscore(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CManorGetScoresAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionChallenger winner = 1;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->winner(), target);
  }
  
  // optional .PBFactionChallenger loser = 2;
  if (has_loser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loser(), target);
  }
  
  // optional uint32 winnerscore = 3;
  if (has_winnerscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->winnerscore(), target);
  }
  
  // optional uint32 loserscore = 4;
  if (has_loserscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->loserscore(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CManorGetScoresAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionChallenger winner = 1;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->winner());
    }
    
    // optional .PBFactionChallenger loser = 2;
    if (has_loser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loser());
    }
    
    // optional uint32 winnerscore = 3;
    if (has_winnerscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnerscore());
    }
    
    // optional uint32 loserscore = 4;
    if (has_loserscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loserscore());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CManorGetScoresAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CManorGetScoresAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CManorGetScoresAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CManorGetScoresAck::MergeFrom(const PBG2CManorGetScoresAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winner()) {
      mutable_winner()->::PBFactionChallenger::MergeFrom(from.winner());
    }
    if (from.has_loser()) {
      mutable_loser()->::PBFactionChallenger::MergeFrom(from.loser());
    }
    if (from.has_winnerscore()) {
      set_winnerscore(from.winnerscore());
    }
    if (from.has_loserscore()) {
      set_loserscore(from.loserscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CManorGetScoresAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CManorGetScoresAck::CopyFrom(const PBG2CManorGetScoresAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CManorGetScoresAck::IsInitialized() const {
  
  return true;
}

void PBG2CManorGetScoresAck::Swap(PBG2CManorGetScoresAck* other) {
  if (other != this) {
    std::swap(winner_, other->winner_);
    std::swap(loser_, other->loser_);
    std::swap(winnerscore_, other->winnerscore_);
    std::swap(loserscore_, other->loserscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CManorGetScoresAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CManorGetScoresAck_descriptor_;
  metadata.reflection = PBG2CManorGetScoresAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PBG2CManorGetPlayerScoresAck::PBG2CManorGetPlayerScoresAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CManorGetPlayerScoresAck::InitAsDefaultInstance() {
}

PBG2CManorGetPlayerScoresAck::PBG2CManorGetPlayerScoresAck(const PBG2CManorGetPlayerScoresAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CManorGetPlayerScoresAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CManorGetPlayerScoresAck::~PBG2CManorGetPlayerScoresAck() {
  SharedDtor();
}

void PBG2CManorGetPlayerScoresAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBG2CManorGetPlayerScoresAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CManorGetPlayerScoresAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CManorGetPlayerScoresAck_descriptor_;
}

const PBG2CManorGetPlayerScoresAck& PBG2CManorGetPlayerScoresAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CManorGetPlayerScoresAck* PBG2CManorGetPlayerScoresAck::default_instance_ = NULL;

PBG2CManorGetPlayerScoresAck* PBG2CManorGetPlayerScoresAck::New() const {
  return new PBG2CManorGetPlayerScoresAck;
}

void PBG2CManorGetPlayerScoresAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CManorGetPlayerScoresAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PBG2CManorGetPlayerScoresAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CManorGetPlayerScoresAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CManorGetPlayerScoresAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CManorGetPlayerScoresAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CManorGetPlayerScoresAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CManorGetPlayerScoresAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CManorGetPlayerScoresAck::MergeFrom(const PBG2CManorGetPlayerScoresAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CManorGetPlayerScoresAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CManorGetPlayerScoresAck::CopyFrom(const PBG2CManorGetPlayerScoresAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CManorGetPlayerScoresAck::IsInitialized() const {
  
  return true;
}

void PBG2CManorGetPlayerScoresAck::Swap(PBG2CManorGetPlayerScoresAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CManorGetPlayerScoresAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CManorGetPlayerScoresAck_descriptor_;
  metadata.reflection = PBG2CManorGetPlayerScoresAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBManorMVP::kAvatarFieldNumber;
const int PBManorMVP::kGetvoteFieldNumber;
#endif  // !_MSC_VER

PBManorMVP::PBManorMVP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBManorMVP::InitAsDefaultInstance() {
  avatar_ = const_cast< ::PBPlayerAvatar*>(&::PBPlayerAvatar::default_instance());
}

PBManorMVP::PBManorMVP(const PBManorMVP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBManorMVP::SharedCtor() {
  _cached_size_ = 0;
  avatar_ = NULL;
  getvote_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBManorMVP::~PBManorMVP() {
  SharedDtor();
}

void PBManorMVP::SharedDtor() {
  if (this != default_instance_) {
    delete avatar_;
  }
}

void PBManorMVP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBManorMVP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBManorMVP_descriptor_;
}

const PBManorMVP& PBManorMVP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBManorMVP* PBManorMVP::default_instance_ = NULL;

PBManorMVP* PBManorMVP::New() const {
  return new PBManorMVP;
}

void PBManorMVP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::PBPlayerAvatar::Clear();
    }
    getvote_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBManorMVP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerAvatar avatar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getvote;
        break;
      }
      
      // optional uint32 getvote = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getvote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getvote_)));
          set_has_getvote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBManorMVP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerAvatar avatar = 1;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->avatar(), output);
  }
  
  // optional uint32 getvote = 2;
  if (has_getvote()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->getvote(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBManorMVP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerAvatar avatar = 1;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->avatar(), target);
  }
  
  // optional uint32 getvote = 2;
  if (has_getvote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->getvote(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBManorMVP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerAvatar avatar = 1;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }
    
    // optional uint32 getvote = 2;
    if (has_getvote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getvote());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBManorMVP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBManorMVP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBManorMVP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBManorMVP::MergeFrom(const PBManorMVP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar()) {
      mutable_avatar()->::PBPlayerAvatar::MergeFrom(from.avatar());
    }
    if (from.has_getvote()) {
      set_getvote(from.getvote());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBManorMVP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBManorMVP::CopyFrom(const PBManorMVP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBManorMVP::IsInitialized() const {
  
  return true;
}

void PBManorMVP::Swap(PBManorMVP* other) {
  if (other != this) {
    std::swap(avatar_, other->avatar_);
    std::swap(getvote_, other->getvote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBManorMVP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBManorMVP_descriptor_;
  metadata.reflection = PBManorMVP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBG2CManorResultNtf::kDefenderFieldNumber;
const int PBG2CManorResultNtf::kChallengerFieldNumber;
const int PBG2CManorResultNtf::kBestFieldNumber;
const int PBG2CManorResultNtf::kKdaFieldNumber;
const int PBG2CManorResultNtf::kKillerFieldNumber;
const int PBG2CManorResultNtf::kShielderFieldNumber;
const int PBG2CManorResultNtf::kScoresFieldNumber;
const int PBG2CManorResultNtf::kPlayerscoresFieldNumber;
const int PBG2CManorResultNtf::kWinnerfactionidFieldNumber;
const int PBG2CManorResultNtf::kManoridFieldNumber;
#endif  // !_MSC_VER

PBG2CManorResultNtf::PBG2CManorResultNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBG2CManorResultNtf::InitAsDefaultInstance() {
  defender_ = const_cast< ::PBFactionChallenger*>(&::PBFactionChallenger::default_instance());
  challenger_ = const_cast< ::PBFactionChallenger*>(&::PBFactionChallenger::default_instance());
  best_ = const_cast< ::PBManorMVP*>(&::PBManorMVP::default_instance());
  kda_ = const_cast< ::PBManorMVP*>(&::PBManorMVP::default_instance());
  killer_ = const_cast< ::PBManorMVP*>(&::PBManorMVP::default_instance());
  shielder_ = const_cast< ::PBManorMVP*>(&::PBManorMVP::default_instance());
}

PBG2CManorResultNtf::PBG2CManorResultNtf(const PBG2CManorResultNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBG2CManorResultNtf::SharedCtor() {
  _cached_size_ = 0;
  defender_ = NULL;
  challenger_ = NULL;
  best_ = NULL;
  kda_ = NULL;
  killer_ = NULL;
  shielder_ = NULL;
  winnerfactionid_ = 0u;
  manorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBG2CManorResultNtf::~PBG2CManorResultNtf() {
  SharedDtor();
}

void PBG2CManorResultNtf::SharedDtor() {
  if (this != default_instance_) {
    delete defender_;
    delete challenger_;
    delete best_;
    delete kda_;
    delete killer_;
    delete shielder_;
  }
}

void PBG2CManorResultNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBG2CManorResultNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBG2CManorResultNtf_descriptor_;
}

const PBG2CManorResultNtf& PBG2CManorResultNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CASMsg_2eproto();  return *default_instance_;
}

PBG2CManorResultNtf* PBG2CManorResultNtf::default_instance_ = NULL;

PBG2CManorResultNtf* PBG2CManorResultNtf::New() const {
  return new PBG2CManorResultNtf;
}

void PBG2CManorResultNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_defender()) {
      if (defender_ != NULL) defender_->::PBFactionChallenger::Clear();
    }
    if (has_challenger()) {
      if (challenger_ != NULL) challenger_->::PBFactionChallenger::Clear();
    }
    if (has_best()) {
      if (best_ != NULL) best_->::PBManorMVP::Clear();
    }
    if (has_kda()) {
      if (kda_ != NULL) kda_->::PBManorMVP::Clear();
    }
    if (has_killer()) {
      if (killer_ != NULL) killer_->::PBManorMVP::Clear();
    }
    if (has_shielder()) {
      if (shielder_ != NULL) shielder_->::PBManorMVP::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    winnerfactionid_ = 0u;
    manorid_ = 0u;
  }
  scores_.Clear();
  playerscores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBG2CManorResultNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFactionChallenger defender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_challenger;
        break;
      }
      
      // optional .PBFactionChallenger challenger = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challenger()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_best;
        break;
      }
      
      // optional .PBManorMVP best = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_best:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_best()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kda;
        break;
      }
      
      // optional .PBManorMVP kda = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kda:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kda()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_killer;
        break;
      }
      
      // optional .PBManorMVP killer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_killer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_shielder;
        break;
      }
      
      // optional .PBManorMVP shielder = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shielder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shielder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_scores;
        break;
      }
      
      // repeated .PBManorBattleFieldScore scores = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_scores;
        if (input->ExpectTag(66)) goto parse_playerscores;
        break;
      }
      
      // repeated .PBManorBattlefieldPlayerScore playerscores = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerscores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerscores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_playerscores;
        if (input->ExpectTag(72)) goto parse_winnerfactionid;
        break;
      }
      
      // optional uint32 winnerfactionid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnerfactionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnerfactionid_)));
          set_has_winnerfactionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_manorid;
        break;
      }
      
      // optional uint32 manorid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBG2CManorResultNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFactionChallenger defender = 1;
  if (has_defender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->defender(), output);
  }
  
  // optional .PBFactionChallenger challenger = 2;
  if (has_challenger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->challenger(), output);
  }
  
  // optional .PBManorMVP best = 3;
  if (has_best()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->best(), output);
  }
  
  // optional .PBManorMVP kda = 4;
  if (has_kda()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->kda(), output);
  }
  
  // optional .PBManorMVP killer = 5;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->killer(), output);
  }
  
  // optional .PBManorMVP shielder = 6;
  if (has_shielder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->shielder(), output);
  }
  
  // repeated .PBManorBattleFieldScore scores = 7;
  for (int i = 0; i < this->scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->scores(i), output);
  }
  
  // repeated .PBManorBattlefieldPlayerScore playerscores = 8;
  for (int i = 0; i < this->playerscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->playerscores(i), output);
  }
  
  // optional uint32 winnerfactionid = 9;
  if (has_winnerfactionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->winnerfactionid(), output);
  }
  
  // optional uint32 manorid = 10;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->manorid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBG2CManorResultNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFactionChallenger defender = 1;
  if (has_defender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->defender(), target);
  }
  
  // optional .PBFactionChallenger challenger = 2;
  if (has_challenger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->challenger(), target);
  }
  
  // optional .PBManorMVP best = 3;
  if (has_best()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->best(), target);
  }
  
  // optional .PBManorMVP kda = 4;
  if (has_kda()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->kda(), target);
  }
  
  // optional .PBManorMVP killer = 5;
  if (has_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->killer(), target);
  }
  
  // optional .PBManorMVP shielder = 6;
  if (has_shielder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->shielder(), target);
  }
  
  // repeated .PBManorBattleFieldScore scores = 7;
  for (int i = 0; i < this->scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->scores(i), target);
  }
  
  // repeated .PBManorBattlefieldPlayerScore playerscores = 8;
  for (int i = 0; i < this->playerscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->playerscores(i), target);
  }
  
  // optional uint32 winnerfactionid = 9;
  if (has_winnerfactionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->winnerfactionid(), target);
  }
  
  // optional uint32 manorid = 10;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->manorid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBG2CManorResultNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFactionChallenger defender = 1;
    if (has_defender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender());
    }
    
    // optional .PBFactionChallenger challenger = 2;
    if (has_challenger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challenger());
    }
    
    // optional .PBManorMVP best = 3;
    if (has_best()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->best());
    }
    
    // optional .PBManorMVP kda = 4;
    if (has_kda()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kda());
    }
    
    // optional .PBManorMVP killer = 5;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->killer());
    }
    
    // optional .PBManorMVP shielder = 6;
    if (has_shielder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shielder());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 winnerfactionid = 9;
    if (has_winnerfactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnerfactionid());
    }
    
    // optional uint32 manorid = 10;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }
    
  }
  // repeated .PBManorBattleFieldScore scores = 7;
  total_size += 1 * this->scores_size();
  for (int i = 0; i < this->scores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scores(i));
  }
  
  // repeated .PBManorBattlefieldPlayerScore playerscores = 8;
  total_size += 1 * this->playerscores_size();
  for (int i = 0; i < this->playerscores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerscores(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBG2CManorResultNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBG2CManorResultNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBG2CManorResultNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBG2CManorResultNtf::MergeFrom(const PBG2CManorResultNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  scores_.MergeFrom(from.scores_);
  playerscores_.MergeFrom(from.playerscores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defender()) {
      mutable_defender()->::PBFactionChallenger::MergeFrom(from.defender());
    }
    if (from.has_challenger()) {
      mutable_challenger()->::PBFactionChallenger::MergeFrom(from.challenger());
    }
    if (from.has_best()) {
      mutable_best()->::PBManorMVP::MergeFrom(from.best());
    }
    if (from.has_kda()) {
      mutable_kda()->::PBManorMVP::MergeFrom(from.kda());
    }
    if (from.has_killer()) {
      mutable_killer()->::PBManorMVP::MergeFrom(from.killer());
    }
    if (from.has_shielder()) {
      mutable_shielder()->::PBManorMVP::MergeFrom(from.shielder());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_winnerfactionid()) {
      set_winnerfactionid(from.winnerfactionid());
    }
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBG2CManorResultNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBG2CManorResultNtf::CopyFrom(const PBG2CManorResultNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBG2CManorResultNtf::IsInitialized() const {
  
  return true;
}

void PBG2CManorResultNtf::Swap(PBG2CManorResultNtf* other) {
  if (other != this) {
    std::swap(defender_, other->defender_);
    std::swap(challenger_, other->challenger_);
    std::swap(best_, other->best_);
    std::swap(kda_, other->kda_);
    std::swap(killer_, other->killer_);
    std::swap(shielder_, other->shielder_);
    scores_.Swap(&other->scores_);
    playerscores_.Swap(&other->playerscores_);
    std::swap(winnerfactionid_, other->winnerfactionid_);
    std::swap(manorid_, other->manorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBG2CManorResultNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBG2CManorResultNtf_descriptor_;
  metadata.reflection = PBG2CManorResultNtf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
