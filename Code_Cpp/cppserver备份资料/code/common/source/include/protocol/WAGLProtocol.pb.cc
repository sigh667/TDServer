// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WAGLProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* _emPGL2W_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emGL2W_Protocol_Common_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emGL2W_Protocol_Faction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emPW2GL_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2GL_Protocol_Start_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2GL_Protocol_Player_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2GL_Protocol_Common_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2GL_Protocol_Faction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_WAGLProtocol_2eproto() {
  protobuf_AddDesc_WAGLProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WAGLProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  _emPGL2W_Protocol_descriptor_ = file->enum_type(0);
  _emGL2W_Protocol_Common_descriptor_ = file->enum_type(1);
  _emGL2W_Protocol_Faction_descriptor_ = file->enum_type(2);
  _emPW2GL_Protocol_descriptor_ = file->enum_type(3);
  _emW2GL_Protocol_Start_descriptor_ = file->enum_type(4);
  _emW2GL_Protocol_Player_descriptor_ = file->enum_type(5);
  _emW2GL_Protocol_Common_descriptor_ = file->enum_type(6);
  _emW2GL_Protocol_Faction_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WAGLProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_WAGLProtocol_2eproto() {
}

void protobuf_AddDesc_WAGLProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022WAGLProtocol.proto*j\n\021_emPGL2W_Protoco"
    "l\022\034\n\030P_GL2W_Protocol_Register\020\000\022\032\n\026P_GL2"
    "W_Protocol_Common\020\001\022\033\n\027P_GL2W_Protocol_F"
    "action\020\002*6\n\027_emGL2W_Protocol_Common\022\033\n\027G"
    "L2W_Common_OfflineData\020\000*0\n\030_emGL2W_Prot"
    "ocol_Faction\022\024\n\020GL2W_Faction_Syn\020\000*\203\001\n\021_"
    "emPW2GL_Protocol\022\031\n\025P_W2GL_Protocol_Star"
    "t\020\000\022\032\n\026P_W2GL_Protocol_Player\020\001\022\032\n\026P_W2G"
    "L_Protocol_Common\020\002\022\033\n\027P_W2GL_Protocol_F"
    "action\020\003*1\n\026_emW2GL_Protocol_Start\022\027\n\023W2"
    "GL_Start_Register\020\000*b\n\027_emW2GL_Protocol_"
    "Player\022\025\n\021W2GL_Player_Login\020\000\022\026\n\022W2GL_Pl"
    "ayer_Logout\020\001\022\030\n\024W2GL_Player_Transfer\020\002*"
    "Y\n\027_emW2GL_Protocol_Common\022\034\n\030W2GL_Commo"
    "n_GMReloadData\020\000\022 \n\034W2GL_Common_GMWorldS"
    "tartTime\020\001*0\n\030_emW2GL_Protocol_Faction\022\024"
    "\n\020W2GL_Faction_Syn\020\000", 660);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WAGLProtocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WAGLProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WAGLProtocol_2eproto {
  StaticDescriptorInitializer_WAGLProtocol_2eproto() {
    protobuf_AddDesc_WAGLProtocol_2eproto();
  }
} static_descriptor_initializer_WAGLProtocol_2eproto_;

const ::google::protobuf::EnumDescriptor* _emPGL2W_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPGL2W_Protocol_descriptor_;
}
bool _emPGL2W_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emGL2W_Protocol_Common_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emGL2W_Protocol_Common_descriptor_;
}
bool _emGL2W_Protocol_Common_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emGL2W_Protocol_Faction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emGL2W_Protocol_Faction_descriptor_;
}
bool _emGL2W_Protocol_Faction_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emPW2GL_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPW2GL_Protocol_descriptor_;
}
bool _emPW2GL_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2GL_Protocol_Start_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2GL_Protocol_Start_descriptor_;
}
bool _emW2GL_Protocol_Start_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2GL_Protocol_Player_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2GL_Protocol_Player_descriptor_;
}
bool _emW2GL_Protocol_Player_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2GL_Protocol_Common_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2GL_Protocol_Common_descriptor_;
}
bool _emW2GL_Protocol_Common_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2GL_Protocol_Faction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2GL_Protocol_Faction_descriptor_;
}
bool _emW2GL_Protocol_Faction_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
