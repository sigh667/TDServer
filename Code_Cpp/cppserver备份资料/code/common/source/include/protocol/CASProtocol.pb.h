// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CASProtocol.proto

#ifndef PROTOBUF_CASProtocol_2eproto__INCLUDED
#define PROTOBUF_CASProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CASProtocol_2eproto();
void protobuf_AssignDesc_CASProtocol_2eproto();
void protobuf_ShutdownFile_CASProtocol_2eproto();


enum _emPC2S_Protocol {
  P_C2S_Protocol_Player = 0,
  P_C2S_Protocol_Common = 1,
  P_C2S_Protocol_Skill = 2,
  P_C2S_Protocol_Buff = 3,
  P_C2S_Protocol_Counter = 4,
  P_C2S_Protocol_Team = 5,
  P_C2S_Protocol_Prize = 6,
  P_C2S_Protocol_Item = 7,
  P_C2S_Protocol_Quest = 8,
  P_C2S_Protocol_Mail = 9,
  P_C2S_Protocol_Copymap = 10,
  P_C2S_Protocol_Trade = 11,
  P_C2S_Protocol_SaleMoney = 12,
  P_C2S_Protocol_Auction = 13,
  P_C2S_Protocol_Store = 14,
  P_C2S_Protocol_Faction = 15,
  P_C2S_Protocol_TopList = 16,
  P_C2S_Protocol_PvpWar = 17,
  P_C2S_Protocol_Friend = 18,
  P_C2S_Protocol_Wulue = 19,
  P_C2S_Protocol_Wentao = 20,
  P_C2S_Protocol_DropItem = 21,
  P_C2S_Protocol_Identity = 22,
  P_C2S_Protocol_Wuxue = 23,
  P_C2S_Protocol_Dart = 24,
  P_C2S_Protocol_FactionBoss = 25,
  P_C2S_Protocol_Title = 26,
  P_C2S_Protocol_Fashion = 27,
  P_C2S_Protocol_EquipColumn = 28,
  P_C2S_Protocol_ClimbTower = 29,
  P_C2S_Protocol_AnswerQuestion = 30,
  P_C2S_Protocol_GreatWallTrain = 31,
  P_C2S_Protocol_WorldBoss = 32,
  P_C2S_Protocol_Activity = 33,
  P_C2S_Protocol_Relive = 34,
  P_C2S_Protocol_Corps = 35,
  P_C2S_Protocol_Weal = 36,
  P_C2S_Protocol_Manor = 37,
  P_C2S_Protocol_SinglePvp = 38
};
bool _emPC2S_Protocol_IsValid(int value);
const _emPC2S_Protocol _emPC2S_Protocol_MIN = P_C2S_Protocol_Player;
const _emPC2S_Protocol _emPC2S_Protocol_MAX = P_C2S_Protocol_SinglePvp;
const int _emPC2S_Protocol_ARRAYSIZE = _emPC2S_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPC2S_Protocol_descriptor();
inline const ::std::string& _emPC2S_Protocol_Name(_emPC2S_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPC2S_Protocol_descriptor(), value);
}
inline bool _emPC2S_Protocol_Parse(
    const ::std::string& name, _emPC2S_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPC2S_Protocol>(
    _emPC2S_Protocol_descriptor(), name, value);
}
enum _emC2S_SinglePvp_Protocol {
  C2S_SinglePvp_EnterMatch = 0,
  C2S_SinglePvp_ExitMatch = 1,
  C2S_SinglePvp_DayPrize = 2
};
bool _emC2S_SinglePvp_Protocol_IsValid(int value);
const _emC2S_SinglePvp_Protocol _emC2S_SinglePvp_Protocol_MIN = C2S_SinglePvp_EnterMatch;
const _emC2S_SinglePvp_Protocol _emC2S_SinglePvp_Protocol_MAX = C2S_SinglePvp_DayPrize;
const int _emC2S_SinglePvp_Protocol_ARRAYSIZE = _emC2S_SinglePvp_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_SinglePvp_Protocol_descriptor();
inline const ::std::string& _emC2S_SinglePvp_Protocol_Name(_emC2S_SinglePvp_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_SinglePvp_Protocol_descriptor(), value);
}
inline bool _emC2S_SinglePvp_Protocol_Parse(
    const ::std::string& name, _emC2S_SinglePvp_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_SinglePvp_Protocol>(
    _emC2S_SinglePvp_Protocol_descriptor(), name, value);
}
enum _emS2C_SinglePvp_Protocol {
  S2C_SinglePvp_EnterMatch = 0,
  S2C_SinglePvp_ExitMatch = 1,
  S2C_SinglePvp_DayPrize = 2,
  S2C_SinglePvp_SynScore = 3
};
bool _emS2C_SinglePvp_Protocol_IsValid(int value);
const _emS2C_SinglePvp_Protocol _emS2C_SinglePvp_Protocol_MIN = S2C_SinglePvp_EnterMatch;
const _emS2C_SinglePvp_Protocol _emS2C_SinglePvp_Protocol_MAX = S2C_SinglePvp_SynScore;
const int _emS2C_SinglePvp_Protocol_ARRAYSIZE = _emS2C_SinglePvp_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_SinglePvp_Protocol_descriptor();
inline const ::std::string& _emS2C_SinglePvp_Protocol_Name(_emS2C_SinglePvp_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_SinglePvp_Protocol_descriptor(), value);
}
inline bool _emS2C_SinglePvp_Protocol_Parse(
    const ::std::string& name, _emS2C_SinglePvp_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_SinglePvp_Protocol>(
    _emS2C_SinglePvp_Protocol_descriptor(), name, value);
}
enum _emC2S_Weal_Protocol {
  C2S_Weal_LoginPrize = 0
};
bool _emC2S_Weal_Protocol_IsValid(int value);
const _emC2S_Weal_Protocol _emC2S_Weal_Protocol_MIN = C2S_Weal_LoginPrize;
const _emC2S_Weal_Protocol _emC2S_Weal_Protocol_MAX = C2S_Weal_LoginPrize;
const int _emC2S_Weal_Protocol_ARRAYSIZE = _emC2S_Weal_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Weal_Protocol_descriptor();
inline const ::std::string& _emC2S_Weal_Protocol_Name(_emC2S_Weal_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Weal_Protocol_descriptor(), value);
}
inline bool _emC2S_Weal_Protocol_Parse(
    const ::std::string& name, _emC2S_Weal_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Weal_Protocol>(
    _emC2S_Weal_Protocol_descriptor(), name, value);
}
enum _emS2C_Weal_Protocol {
  S2C_Weal_LoginPrize = 0
};
bool _emS2C_Weal_Protocol_IsValid(int value);
const _emS2C_Weal_Protocol _emS2C_Weal_Protocol_MIN = S2C_Weal_LoginPrize;
const _emS2C_Weal_Protocol _emS2C_Weal_Protocol_MAX = S2C_Weal_LoginPrize;
const int _emS2C_Weal_Protocol_ARRAYSIZE = _emS2C_Weal_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Weal_Protocol_descriptor();
inline const ::std::string& _emS2C_Weal_Protocol_Name(_emS2C_Weal_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Weal_Protocol_descriptor(), value);
}
inline bool _emS2C_Weal_Protocol_Parse(
    const ::std::string& name, _emS2C_Weal_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Weal_Protocol>(
    _emS2C_Weal_Protocol_descriptor(), name, value);
}
enum _emC2S_Corps_Protocol {
  C2S_Corps_GetInfo = 0,
  C2S_Corps_SetDeclaration = 1,
  C2S_Corps_SetJob = 2,
  C2S_Corps_SynAvatar = 3
};
bool _emC2S_Corps_Protocol_IsValid(int value);
const _emC2S_Corps_Protocol _emC2S_Corps_Protocol_MIN = C2S_Corps_GetInfo;
const _emC2S_Corps_Protocol _emC2S_Corps_Protocol_MAX = C2S_Corps_SynAvatar;
const int _emC2S_Corps_Protocol_ARRAYSIZE = _emC2S_Corps_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Corps_Protocol_descriptor();
inline const ::std::string& _emC2S_Corps_Protocol_Name(_emC2S_Corps_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Corps_Protocol_descriptor(), value);
}
inline bool _emC2S_Corps_Protocol_Parse(
    const ::std::string& name, _emC2S_Corps_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Corps_Protocol>(
    _emC2S_Corps_Protocol_descriptor(), name, value);
}
enum _emS2C_Corps_Protocol {
  S2C_Corps_Info = 0,
  S2C_Corps_SetDeclaration = 1,
  S2C_Corps_SetJob = 2,
  S2C_Corps_ForbitSpeak = 3
};
bool _emS2C_Corps_Protocol_IsValid(int value);
const _emS2C_Corps_Protocol _emS2C_Corps_Protocol_MIN = S2C_Corps_Info;
const _emS2C_Corps_Protocol _emS2C_Corps_Protocol_MAX = S2C_Corps_ForbitSpeak;
const int _emS2C_Corps_Protocol_ARRAYSIZE = _emS2C_Corps_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Corps_Protocol_descriptor();
inline const ::std::string& _emS2C_Corps_Protocol_Name(_emS2C_Corps_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Corps_Protocol_descriptor(), value);
}
inline bool _emS2C_Corps_Protocol_Parse(
    const ::std::string& name, _emS2C_Corps_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Corps_Protocol>(
    _emS2C_Corps_Protocol_descriptor(), name, value);
}
enum _emC2S_PvpWar_Protocol {
  C2S_PvpWar_EnterMatchAsk = 0,
  C2S_PvpWar_ExitMatchAsk = 1,
  C2S_PvpWar_ReadyAsk = 2,
  C2S_PvpWar_ExitReadyAsk = 3
};
bool _emC2S_PvpWar_Protocol_IsValid(int value);
const _emC2S_PvpWar_Protocol _emC2S_PvpWar_Protocol_MIN = C2S_PvpWar_EnterMatchAsk;
const _emC2S_PvpWar_Protocol _emC2S_PvpWar_Protocol_MAX = C2S_PvpWar_ExitReadyAsk;
const int _emC2S_PvpWar_Protocol_ARRAYSIZE = _emC2S_PvpWar_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_PvpWar_Protocol_descriptor();
inline const ::std::string& _emC2S_PvpWar_Protocol_Name(_emC2S_PvpWar_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_PvpWar_Protocol_descriptor(), value);
}
inline bool _emC2S_PvpWar_Protocol_Parse(
    const ::std::string& name, _emC2S_PvpWar_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_PvpWar_Protocol>(
    _emC2S_PvpWar_Protocol_descriptor(), name, value);
}
enum _emS2C_PvpWar_Protocol {
  S2C_PvpWar_EnterMatchAck = 0,
  S2C_PvpWar_ExitMatchAck = 1,
  S2C_PvpWar_ReadyAck = 2,
  S2C_PvpWar_ExitReadyAck = 3,
  S2C_PvpWar_CompleteAck = 4
};
bool _emS2C_PvpWar_Protocol_IsValid(int value);
const _emS2C_PvpWar_Protocol _emS2C_PvpWar_Protocol_MIN = S2C_PvpWar_EnterMatchAck;
const _emS2C_PvpWar_Protocol _emS2C_PvpWar_Protocol_MAX = S2C_PvpWar_CompleteAck;
const int _emS2C_PvpWar_Protocol_ARRAYSIZE = _emS2C_PvpWar_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_PvpWar_Protocol_descriptor();
inline const ::std::string& _emS2C_PvpWar_Protocol_Name(_emS2C_PvpWar_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_PvpWar_Protocol_descriptor(), value);
}
inline bool _emS2C_PvpWar_Protocol_Parse(
    const ::std::string& name, _emS2C_PvpWar_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_PvpWar_Protocol>(
    _emS2C_PvpWar_Protocol_descriptor(), name, value);
}
enum _emC2S_EquipColumn_Protocol {
  C2S_EquipColumn_Enhance = 0,
  C2S_EquipColumn_Forge = 1
};
bool _emC2S_EquipColumn_Protocol_IsValid(int value);
const _emC2S_EquipColumn_Protocol _emC2S_EquipColumn_Protocol_MIN = C2S_EquipColumn_Enhance;
const _emC2S_EquipColumn_Protocol _emC2S_EquipColumn_Protocol_MAX = C2S_EquipColumn_Forge;
const int _emC2S_EquipColumn_Protocol_ARRAYSIZE = _emC2S_EquipColumn_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_EquipColumn_Protocol_descriptor();
inline const ::std::string& _emC2S_EquipColumn_Protocol_Name(_emC2S_EquipColumn_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_EquipColumn_Protocol_descriptor(), value);
}
inline bool _emC2S_EquipColumn_Protocol_Parse(
    const ::std::string& name, _emC2S_EquipColumn_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_EquipColumn_Protocol>(
    _emC2S_EquipColumn_Protocol_descriptor(), name, value);
}
enum _emC2S_Fashion_Protocol {
  C2S_Fashion_Equip = 0,
  C2S_Fashion_UnEquip = 1
};
bool _emC2S_Fashion_Protocol_IsValid(int value);
const _emC2S_Fashion_Protocol _emC2S_Fashion_Protocol_MIN = C2S_Fashion_Equip;
const _emC2S_Fashion_Protocol _emC2S_Fashion_Protocol_MAX = C2S_Fashion_UnEquip;
const int _emC2S_Fashion_Protocol_ARRAYSIZE = _emC2S_Fashion_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Fashion_Protocol_descriptor();
inline const ::std::string& _emC2S_Fashion_Protocol_Name(_emC2S_Fashion_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Fashion_Protocol_descriptor(), value);
}
inline bool _emC2S_Fashion_Protocol_Parse(
    const ::std::string& name, _emC2S_Fashion_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Fashion_Protocol>(
    _emC2S_Fashion_Protocol_descriptor(), name, value);
}
enum _emC2S_Title_Protocol {
  C2S_Title_Equip = 0,
  C2S_Title_UnEquip = 1
};
bool _emC2S_Title_Protocol_IsValid(int value);
const _emC2S_Title_Protocol _emC2S_Title_Protocol_MIN = C2S_Title_Equip;
const _emC2S_Title_Protocol _emC2S_Title_Protocol_MAX = C2S_Title_UnEquip;
const int _emC2S_Title_Protocol_ARRAYSIZE = _emC2S_Title_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Title_Protocol_descriptor();
inline const ::std::string& _emC2S_Title_Protocol_Name(_emC2S_Title_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Title_Protocol_descriptor(), value);
}
inline bool _emC2S_Title_Protocol_Parse(
    const ::std::string& name, _emC2S_Title_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Title_Protocol>(
    _emC2S_Title_Protocol_descriptor(), name, value);
}
enum _emC2S_Trade_Protocol {
  C2S_Trade_apply = 0,
  C2S_Trade_answer = 1,
  C2S_Trade_addItem = 2,
  C2S_Trade_delItem = 3,
  C2S_Trade_setMoney = 4,
  C2S_Trade_lock = 5,
  C2S_Trade_unlock = 6,
  C2S_Trade_confirm = 7,
  C2S_Trade_cancel = 8
};
bool _emC2S_Trade_Protocol_IsValid(int value);
const _emC2S_Trade_Protocol _emC2S_Trade_Protocol_MIN = C2S_Trade_apply;
const _emC2S_Trade_Protocol _emC2S_Trade_Protocol_MAX = C2S_Trade_cancel;
const int _emC2S_Trade_Protocol_ARRAYSIZE = _emC2S_Trade_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Trade_Protocol_descriptor();
inline const ::std::string& _emC2S_Trade_Protocol_Name(_emC2S_Trade_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Trade_Protocol_descriptor(), value);
}
inline bool _emC2S_Trade_Protocol_Parse(
    const ::std::string& name, _emC2S_Trade_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Trade_Protocol>(
    _emC2S_Trade_Protocol_descriptor(), name, value);
}
enum _emC2S_SaleMoney_Protocol {
  C2S_SaleMoney_sale = 0,
  C2S_SaleMoney_salecancel = 1,
  C2S_SaleMoney_list = 2,
  C2S_SaleMoney_tradelog = 3
};
bool _emC2S_SaleMoney_Protocol_IsValid(int value);
const _emC2S_SaleMoney_Protocol _emC2S_SaleMoney_Protocol_MIN = C2S_SaleMoney_sale;
const _emC2S_SaleMoney_Protocol _emC2S_SaleMoney_Protocol_MAX = C2S_SaleMoney_tradelog;
const int _emC2S_SaleMoney_Protocol_ARRAYSIZE = _emC2S_SaleMoney_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_SaleMoney_Protocol_descriptor();
inline const ::std::string& _emC2S_SaleMoney_Protocol_Name(_emC2S_SaleMoney_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_SaleMoney_Protocol_descriptor(), value);
}
inline bool _emC2S_SaleMoney_Protocol_Parse(
    const ::std::string& name, _emC2S_SaleMoney_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_SaleMoney_Protocol>(
    _emC2S_SaleMoney_Protocol_descriptor(), name, value);
}
enum _emC2S_Auction_Protocol {
  C2S_Auction_sale = 0,
  C2S_Auction_salecancel = 1,
  C2S_Auction_buy = 2,
  C2S_Auction_list = 3,
  C2S_Auction_ave = 4
};
bool _emC2S_Auction_Protocol_IsValid(int value);
const _emC2S_Auction_Protocol _emC2S_Auction_Protocol_MIN = C2S_Auction_sale;
const _emC2S_Auction_Protocol _emC2S_Auction_Protocol_MAX = C2S_Auction_ave;
const int _emC2S_Auction_Protocol_ARRAYSIZE = _emC2S_Auction_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Auction_Protocol_descriptor();
inline const ::std::string& _emC2S_Auction_Protocol_Name(_emC2S_Auction_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Auction_Protocol_descriptor(), value);
}
inline bool _emC2S_Auction_Protocol_Parse(
    const ::std::string& name, _emC2S_Auction_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Auction_Protocol>(
    _emC2S_Auction_Protocol_descriptor(), name, value);
}
enum _emC2S_Copymap_Protocol {
  C2S_Copymap_Create = 0,
  C2S_Copymap_Exit = 1,
  C2S_Copymap_Invite = 2,
  C2S_Copymap_AcceptInvite = 3,
  C2S_Copymap_TeamMemberInfo = 4,
  C2S_Copymap_EnterNpc = 5,
  C2S_Copymap_FindAttackMonster = 6,
  C2S_Copymap_UnAcitve = 7
};
bool _emC2S_Copymap_Protocol_IsValid(int value);
const _emC2S_Copymap_Protocol _emC2S_Copymap_Protocol_MIN = C2S_Copymap_Create;
const _emC2S_Copymap_Protocol _emC2S_Copymap_Protocol_MAX = C2S_Copymap_UnAcitve;
const int _emC2S_Copymap_Protocol_ARRAYSIZE = _emC2S_Copymap_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Copymap_Protocol_descriptor();
inline const ::std::string& _emC2S_Copymap_Protocol_Name(_emC2S_Copymap_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Copymap_Protocol_descriptor(), value);
}
inline bool _emC2S_Copymap_Protocol_Parse(
    const ::std::string& name, _emC2S_Copymap_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Copymap_Protocol>(
    _emC2S_Copymap_Protocol_descriptor(), name, value);
}
enum _emC2S_Faction_Protocol {
  C2S_Faction_Create = 0,
  C2S_Faction_Apply = 1,
  C2S_Faction_List = 2,
  C2S_Faction_Quit = 3,
  C2S_Faction_MemberList = 4,
  C2S_Faction_Syn = 5,
  C2S_Faction_Applying = 6,
  C2S_Faction_AgreeInviteJoin = 8,
  C2S_Faction_RefuseInviteJoin = 9,
  C2S_Faction_UpgradeSelfSkill = 11,
  C2S_Faction_WatchSelfSkill = 12,
  C2S_Faction_WatchStudyFaction = 13,
  C2S_Faction_WatchOhterSkill = 14,
  C2S_Faction_FlyFactionHome = 15,
  C2S_Faction_AgreeImpeach = 16,
  C2S_Faction_Transfer = 17,
  C2S_Faction_Impeach = 18,
  G2W_Faction_Begin = 30,
  G2W_Faction_SetMemberContribution = 31,
  G2W_Faction_TopListList = 32,
  G2W_Faction_TopListFaction = 33,
  G2W_Faction_End = 49,
  C2S_Faction_Privilege_Opt_Begin = 50,
  C2S_Faction_ApplyList = 51,
  C2S_Faction_AgreeApply = 52,
  C2S_Faction_RefuseApply = 53,
  C2S_Faction_ClearApply = 54,
  C2S_Faction_AutoApply = 55,
  C2S_Faction_Promote = 56,
  C2S_Faction_Dismiss = 57,
  C2S_Faction_SetBeauty = 58,
  C2S_Faction_Remove = 59,
  C2S_Faction_InviteJoin = 60,
  C2S_Faction_BannerSpeak = 61,
  C2S_Faction_SetElite = 62,
  C2S_Faction_Edit = 63,
  C2S_Faction_SetBannerName = 64,
  C2S_Faction_DevelopSkill = 65,
  C2S_Faction_SuspendDevelopSkill = 66,
  C2S_Faction_OpenStudy = 67,
  C2S_Faction_CloseStudy = 68,
  C2S_Faction_AddStudyRelation = 69,
  C2S_Faction_DelStudyRelation = 70,
  C2S_Faction_ChangeCorps = 71,
  C2S_Faction_SetName = 72,
  C2S_Faction_AllotMoney = 73,
  C2S_Faction_AllotItem = 74,
  C2S_Faction_DeclareWar = 75,
  C2S_Faction_SetPrivilege = 76,
  C2S_Faction_BuyEnergy = 77,
  C2S_Faction_UpLevel = 78,
  C2S_Faction_SuspendUpLevel = 79,
  C2S_Faction_UpBuildingLevel = 80,
  C2S_Faction_SuspendUpBuildingLevel = 81,
  C2S_Faction_StartActivity = 82,
  C2S_Faction_AllotWarehouse = 83,
  C2S_Faction_DeleteWarehouse = 84,
  C2S_Faction_DonateItems = 85,
  C2S_Faction_SetDonateItems = 86,
  C2S_Faction_DonateMoney = 87,
  C2S_Faction_JoinUnion = 88,
  C2S_Faction_QuitUnion = 89,
  C2S_Faction_AddFriendFaction = 90,
  C2S_Faction_DelFriendFaction = 91,
  C2S_Faction_InviteWar = 92,
  C2S_Faction_Require = 93,
  C2S_Faction_CompleteTask = 94,
  C2S_Faction_DrinkWine = 95
};
bool _emC2S_Faction_Protocol_IsValid(int value);
const _emC2S_Faction_Protocol _emC2S_Faction_Protocol_MIN = C2S_Faction_Create;
const _emC2S_Faction_Protocol _emC2S_Faction_Protocol_MAX = C2S_Faction_DrinkWine;
const int _emC2S_Faction_Protocol_ARRAYSIZE = _emC2S_Faction_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Faction_Protocol_descriptor();
inline const ::std::string& _emC2S_Faction_Protocol_Name(_emC2S_Faction_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Faction_Protocol_descriptor(), value);
}
inline bool _emC2S_Faction_Protocol_Parse(
    const ::std::string& name, _emC2S_Faction_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Faction_Protocol>(
    _emC2S_Faction_Protocol_descriptor(), name, value);
}
enum _emS2C_Faction_Protocol {
  S2C_Faction_Create = 0,
  S2C_Faction_Apply = 1,
  S2C_Faction_List = 2,
  S2C_Faction_Quit = 3,
  S2C_Faction_MemberList = 4,
  S2C_Faction_Syn = 5,
  S2C_Faction_Applying = 6,
  S2C_Faction_BeInviteJoin = 7,
  S2C_Faction_AgreeInviteJoin = 8,
  S2C_Faction_RefuseInviteJoin = 9,
  S2C_Faction_InviteJoinResult = 10,
  S2C_Faction_UpgradeSelfSkill = 11,
  S2C_Faction_WatchSelfSkill = 12,
  S2C_Faction_WatchStudyFaction = 13,
  S2C_Faction_WatchOhterSkill = 14,
  S2C_Faction_FlyFactionHome = 15,
  S2C_Faction_AutoApply = 16,
  S2C_Faction_UpdateFactionMoney = 31,
  S2C_Faction_AddEvent_Depot = 32,
  S2C_Faction_AddEvent_Experience = 33,
  S2C_Faction_AddEvent_Member = 34,
  S2C_Faction_EventAll = 35,
  S2C_Faction_DepotInfo = 36,
  S2C_Faction_UpdateItem = 37,
  S2C_Faction_NewItem = 38,
  S2C_Faction_DeleteItem = 39,
  S2C_Faction_UpdateFactionEnergy = 40,
  S2C_Faction_UpdateFactionExperience = 41,
  S2C_Faction_UpdateFactionBoom = 42,
  S2C_Faction_DonateMoney_Broad = 43,
  S2C_Faction_UpdateFactionLevel = 44,
  S2C_Faction_UpdateFactionStone = 45,
  S2C_Faction_UpdateFactionSliver = 46,
  S2C_Faction_UpdateSelfContribution = 47,
  S2C_Faction_UpdateSelfExperience = 48,
  S2C_Faction_OptResult = 49,
  S2C_Faction_Privilege_Opt_Begin = 50,
  S2C_Faction_Edit = 51,
  S2C_Faction_InviteJoin = 52,
  S2C_Faction_ApplyList = 53,
  S2C_Faction_AgreeApply = 54,
  S2C_Faction_RefuseApply = 55,
  S2C_Faction_Remove = 56,
  S2C_Faction_Promote = 57,
  S2C_Faction_Dismiss = 58,
  S2C_Faction_Transfer = 59,
  S2C_Faction_SetElite = 60,
  S2C_Faction_SetBeauty = 61,
  S2C_Faction_Impeach = 62,
  S2C_Faction_SetPrivilege = 63,
  S2C_Faction_BuyEnergy = 64,
  S2C_Faction_UpLevel = 65,
  S2C_Faction_SuspendUpLevel = 66,
  S2C_Faction_UpBuildingLevel = 67,
  S2C_Faction_SuspendUpBuildingLevel = 68,
  S2C_Faction_DevelopSkill = 69,
  S2C_Faction_SuspendDevelopSkill = 70,
  S2C_Faction_StartActivity = 71,
  S2C_Faction_AllotWarehouse = 72,
  S2C_Faction_DeleteWarehouse = 73,
  S2C_Faction_DonateItems = 74,
  S2C_Faction_SetDonateItems = 75,
  S2C_Faction_DonateMoney = 76,
  S2C_Faction_AllotMoney = 77,
  S2C_Faction_AllotItem = 78,
  S2C_Faction_JoinUnion = 79,
  S2C_Faction_QuitUnion = 80,
  S2C_Faction_AddFriendFaction = 81,
  S2C_Faction_DelFriendFaction = 82,
  S2C_Faction_DeclareWar = 83,
  S2C_Faction_InviteWar = 84,
  S2C_Faction_OpenStudy = 85,
  S2C_Faction_CloseStudy = 86,
  S2C_Faction_AddStudyRelation = 87,
  S2C_Faction_DelStudyRelation = 88,
  S2C_Faction_Require = 89,
  S2C_Faction_ClearApply = 90,
  S2C_Faction_CompleteTask = 91,
  S2C_Faction_AgreeImpeach = 92,
  S2C_Faction_DrinkWine = 93,
  S2C_Faction_DrinkWineInfo = 94,
  S2C_Faction_SynElite = 95,
  S2C_Faction_SynBeauty = 96,
  S2C_Faction_ImpeachWindow = 97,
  S2C_Faction_ForbitSpeak = 98
};
bool _emS2C_Faction_Protocol_IsValid(int value);
const _emS2C_Faction_Protocol _emS2C_Faction_Protocol_MIN = S2C_Faction_Create;
const _emS2C_Faction_Protocol _emS2C_Faction_Protocol_MAX = S2C_Faction_ForbitSpeak;
const int _emS2C_Faction_Protocol_ARRAYSIZE = _emS2C_Faction_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Faction_Protocol_descriptor();
inline const ::std::string& _emS2C_Faction_Protocol_Name(_emS2C_Faction_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Faction_Protocol_descriptor(), value);
}
inline bool _emS2C_Faction_Protocol_Parse(
    const ::std::string& name, _emS2C_Faction_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Faction_Protocol>(
    _emS2C_Faction_Protocol_descriptor(), name, value);
}
enum _emC2S_Mail_Protocol {
  C2S_Mail_Read = 0,
  C2S_Mail_Delete = 1,
  C2S_Mail_Reward = 2
};
bool _emC2S_Mail_Protocol_IsValid(int value);
const _emC2S_Mail_Protocol _emC2S_Mail_Protocol_MIN = C2S_Mail_Read;
const _emC2S_Mail_Protocol _emC2S_Mail_Protocol_MAX = C2S_Mail_Reward;
const int _emC2S_Mail_Protocol_ARRAYSIZE = _emC2S_Mail_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Mail_Protocol_descriptor();
inline const ::std::string& _emC2S_Mail_Protocol_Name(_emC2S_Mail_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Mail_Protocol_descriptor(), value);
}
inline bool _emC2S_Mail_Protocol_Parse(
    const ::std::string& name, _emC2S_Mail_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Mail_Protocol>(
    _emC2S_Mail_Protocol_descriptor(), name, value);
}
enum _emC2S_Player_Protocol {
  C2S_Player_CreatPlayer = 0,
  C2S_Player_DelPlayer = 1,
  C2S_Player_SelectPlayer = 2,
  C2S_Player_CheckName = 3
};
bool _emC2S_Player_Protocol_IsValid(int value);
const _emC2S_Player_Protocol _emC2S_Player_Protocol_MIN = C2S_Player_CreatPlayer;
const _emC2S_Player_Protocol _emC2S_Player_Protocol_MAX = C2S_Player_CheckName;
const int _emC2S_Player_Protocol_ARRAYSIZE = _emC2S_Player_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Player_Protocol_descriptor();
inline const ::std::string& _emC2S_Player_Protocol_Name(_emC2S_Player_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Player_Protocol_descriptor(), value);
}
inline bool _emC2S_Player_Protocol_Parse(
    const ::std::string& name, _emC2S_Player_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Player_Protocol>(
    _emC2S_Player_Protocol_descriptor(), name, value);
}
enum _emC2S_Common_Protocol {
  C2S_Common_Go = 0,
  C2S_Common_ClientSave = 1,
  C2S_Common_Move = 2,
  C2S_Common_MoveStop = 3,
  C2S_Common_Turn = 4,
  C2S_Common_GMCmd = 5,
  C2S_Common_Pickup = 6,
  C2S_Common_GetClientData = 7,
  C2S_Common_FindPlayer = 8,
  C2S_Common_Promotion = 9,
  C2S_Common_PlaneEnter = 11,
  C2S_Common_PlaneLeave = 12,
  C2S_Common_BossList = 13,
  C2S_Common_Fly = 14,
  C2S_Common_SearchPlayer = 15,
  C2S_Common_NpcDialogComplete = 16,
  C2S_Common_UnActiveMonster = 17,
  C2S_Common_GetBattleAttrDetail = 18,
  C2S_Common_PKType = 19,
  C2S_Common_TakeASeat = 20,
  C2S_Common_TaskFly = 21,
  C2S_Common_ForbitSpeak = 22,
  C2S_Common_StrongerGetReward = 23,
  C2S_Common_GetSubFightPower = 24,
  C2S_Common_CopymapUnactive = 25
};
bool _emC2S_Common_Protocol_IsValid(int value);
const _emC2S_Common_Protocol _emC2S_Common_Protocol_MIN = C2S_Common_Go;
const _emC2S_Common_Protocol _emC2S_Common_Protocol_MAX = C2S_Common_CopymapUnactive;
const int _emC2S_Common_Protocol_ARRAYSIZE = _emC2S_Common_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Common_Protocol_descriptor();
inline const ::std::string& _emC2S_Common_Protocol_Name(_emC2S_Common_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Common_Protocol_descriptor(), value);
}
inline bool _emC2S_Common_Protocol_Parse(
    const ::std::string& name, _emC2S_Common_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Common_Protocol>(
    _emC2S_Common_Protocol_descriptor(), name, value);
}
enum _emC2S_Skill_Protocol {
  C2S_Skill_Use = 0,
  C2S_Skill_UseCharge = 1,
  C2S_Skill_Break = 2,
  C2S_Skill_Add = 3,
  C2S_Skill_Upgrade = 4
};
bool _emC2S_Skill_Protocol_IsValid(int value);
const _emC2S_Skill_Protocol _emC2S_Skill_Protocol_MIN = C2S_Skill_Use;
const _emC2S_Skill_Protocol _emC2S_Skill_Protocol_MAX = C2S_Skill_Upgrade;
const int _emC2S_Skill_Protocol_ARRAYSIZE = _emC2S_Skill_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Skill_Protocol_descriptor();
inline const ::std::string& _emC2S_Skill_Protocol_Name(_emC2S_Skill_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Skill_Protocol_descriptor(), value);
}
inline bool _emC2S_Skill_Protocol_Parse(
    const ::std::string& name, _emC2S_Skill_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Skill_Protocol>(
    _emC2S_Skill_Protocol_descriptor(), name, value);
}
enum _emC2S_Buff_Protocol {
  C2S_Buff_Del = 0
};
bool _emC2S_Buff_Protocol_IsValid(int value);
const _emC2S_Buff_Protocol _emC2S_Buff_Protocol_MIN = C2S_Buff_Del;
const _emC2S_Buff_Protocol _emC2S_Buff_Protocol_MAX = C2S_Buff_Del;
const int _emC2S_Buff_Protocol_ARRAYSIZE = _emC2S_Buff_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Buff_Protocol_descriptor();
inline const ::std::string& _emC2S_Buff_Protocol_Name(_emC2S_Buff_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Buff_Protocol_descriptor(), value);
}
inline bool _emC2S_Buff_Protocol_Parse(
    const ::std::string& name, _emC2S_Buff_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Buff_Protocol>(
    _emC2S_Buff_Protocol_descriptor(), name, value);
}
enum _emC2S_Team_Protocol {
  C2S_Team_Invite = 0,
  C2S_Team_AcceptInvite = 1,
  C2S_Team_Apply = 2,
  C2S_Team_AcceptApply = 3,
  C2S_Team_Leave = 4,
  C2S_Team_ChangeLeader = 5,
  C2S_Team_Publish_Ask = 6,
  C2S_Team_Publish_Cancel = 7,
  C2S_Team_Publish_Invite = 8,
  C2S_Team_Publish_AcceptInvite = 9,
  C2S_Team_Publish_List = 10,
  C2S_Team_Kick = 11,
  C2S_Team_Kick_Vote = 12,
  C2S_Team_SetAllot = 13,
  C2S_Team_SetAllot_Vote = 14,
  C2S_Team_NearPlayerList = 15,
  C2S_Team_NearTeamList = 16,
  C2S_Team_View = 17,
  C2S_Team_Callup = 18,
  C2S_Team_AcceptIdentity = 19,
  C2S_Team_CheckCondition = 20,
  C2S_Team_Create = 21,
  C2S_Team_SetTarget = 22,
  C2S_Team_SetAutoAccept = 23,
  C2S_Team_SetAutoMatch = 24,
  C2S_Team_SetAutoMatchJoin = 25,
  C2S_Team_SetAutoMatchJobLimit = 26,
  C2S_Team_GetApplicantList = 27,
  C2S_Team_ClearApplicantList = 28,
  C2S_Team_AcceptApplyFromList = 29,
  C2S_Team_SearchTeamByTarget = 30,
  C2S_Team_ApplyTeamByTarget = 31,
  C2S_Team_CancleApplyTeamByTarget = 32,
  C2S_Team_AcceptTeamTask = 33,
  C2S_Team_EnterTeamTaskCopymap = 34,
  C2S_Team_CompleteTeamTask = 35,
  C2S_Team_Follow = 36,
  C2S_Team_RemainConfirm = 37,
  C2S_Team_Confirm = 38
};
bool _emC2S_Team_Protocol_IsValid(int value);
const _emC2S_Team_Protocol _emC2S_Team_Protocol_MIN = C2S_Team_Invite;
const _emC2S_Team_Protocol _emC2S_Team_Protocol_MAX = C2S_Team_Confirm;
const int _emC2S_Team_Protocol_ARRAYSIZE = _emC2S_Team_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Team_Protocol_descriptor();
inline const ::std::string& _emC2S_Team_Protocol_Name(_emC2S_Team_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Team_Protocol_descriptor(), value);
}
inline bool _emC2S_Team_Protocol_Parse(
    const ::std::string& name, _emC2S_Team_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Team_Protocol>(
    _emC2S_Team_Protocol_descriptor(), name, value);
}
enum _emC2S_Item_Protocol {
  C2S_Item_Del = 0,
  C2S_Item_Use = 1,
  C2S_Item_Equip = 2,
  C2S_Item_Sell = 3,
  C2S_Item_BuyBack = 4,
  C2S_Item_Split = 5,
  C2S_Item_Sort = 6,
  C2S_Item_Enhance = 7,
  C2S_Item_Forge = 8,
  C2S_Item_Inherit = 9,
  C2S_Item_Make = 10,
  C2S_Item_Mounting = 11,
  C2S_Item_BingfuSplit = 12,
  C2S_Item_BingfuUpgrade = 13,
  C2S_Item_BingfuUpOneLevel = 14,
  C2S_Item_Compound = 15,
  C2S_Item_OpenEquipMakeDlg = 16,
  C2S_Item_OpenEquipMakeOEMDlg = 17,
  C2S_Item_CommitEquipMakeOEM = 18,
  C2S_Item_VisitEquipMakeOEM = 19,
  C2S_Item_EquipMakeOEM = 20,
  C2S_Item_EquipChangeOEMFee = 21
};
bool _emC2S_Item_Protocol_IsValid(int value);
const _emC2S_Item_Protocol _emC2S_Item_Protocol_MIN = C2S_Item_Del;
const _emC2S_Item_Protocol _emC2S_Item_Protocol_MAX = C2S_Item_EquipChangeOEMFee;
const int _emC2S_Item_Protocol_ARRAYSIZE = _emC2S_Item_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Item_Protocol_descriptor();
inline const ::std::string& _emC2S_Item_Protocol_Name(_emC2S_Item_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Item_Protocol_descriptor(), value);
}
inline bool _emC2S_Item_Protocol_Parse(
    const ::std::string& name, _emC2S_Item_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Item_Protocol>(
    _emC2S_Item_Protocol_descriptor(), name, value);
}
enum _emC2S_Quest_Protocol {
  C2S_Quest_Accept = 0,
  C2S_Quest_Complete = 1,
  C2S_Quest_UpdateItem = 2,
  C2S_Quest_GiveUp = 3
};
bool _emC2S_Quest_Protocol_IsValid(int value);
const _emC2S_Quest_Protocol _emC2S_Quest_Protocol_MIN = C2S_Quest_Accept;
const _emC2S_Quest_Protocol _emC2S_Quest_Protocol_MAX = C2S_Quest_GiveUp;
const int _emC2S_Quest_Protocol_ARRAYSIZE = _emC2S_Quest_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Quest_Protocol_descriptor();
inline const ::std::string& _emC2S_Quest_Protocol_Name(_emC2S_Quest_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Quest_Protocol_descriptor(), value);
}
inline bool _emC2S_Quest_Protocol_Parse(
    const ::std::string& name, _emC2S_Quest_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Quest_Protocol>(
    _emC2S_Quest_Protocol_descriptor(), name, value);
}
enum _emC2S_Store_Protocol {
  C2S_Store_Buy = 0
};
bool _emC2S_Store_Protocol_IsValid(int value);
const _emC2S_Store_Protocol _emC2S_Store_Protocol_MIN = C2S_Store_Buy;
const _emC2S_Store_Protocol _emC2S_Store_Protocol_MAX = C2S_Store_Buy;
const int _emC2S_Store_Protocol_ARRAYSIZE = _emC2S_Store_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Store_Protocol_descriptor();
inline const ::std::string& _emC2S_Store_Protocol_Name(_emC2S_Store_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Store_Protocol_descriptor(), value);
}
inline bool _emC2S_Store_Protocol_Parse(
    const ::std::string& name, _emC2S_Store_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Store_Protocol>(
    _emC2S_Store_Protocol_descriptor(), name, value);
}
enum _emC2S_Prize_Protocol {
  C2S_Prize_Accept = 0,
  C2S_Prize_Abandon = 1
};
bool _emC2S_Prize_Protocol_IsValid(int value);
const _emC2S_Prize_Protocol _emC2S_Prize_Protocol_MIN = C2S_Prize_Accept;
const _emC2S_Prize_Protocol _emC2S_Prize_Protocol_MAX = C2S_Prize_Abandon;
const int _emC2S_Prize_Protocol_ARRAYSIZE = _emC2S_Prize_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Prize_Protocol_descriptor();
inline const ::std::string& _emC2S_Prize_Protocol_Name(_emC2S_Prize_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Prize_Protocol_descriptor(), value);
}
inline bool _emC2S_Prize_Protocol_Parse(
    const ::std::string& name, _emC2S_Prize_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Prize_Protocol>(
    _emC2S_Prize_Protocol_descriptor(), name, value);
}
enum _emC2S_TopList_Protocol {
  C2S_TopList_List = 0,
  C2S_TopList_Player = 1
};
bool _emC2S_TopList_Protocol_IsValid(int value);
const _emC2S_TopList_Protocol _emC2S_TopList_Protocol_MIN = C2S_TopList_List;
const _emC2S_TopList_Protocol _emC2S_TopList_Protocol_MAX = C2S_TopList_Player;
const int _emC2S_TopList_Protocol_ARRAYSIZE = _emC2S_TopList_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_TopList_Protocol_descriptor();
inline const ::std::string& _emC2S_TopList_Protocol_Name(_emC2S_TopList_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_TopList_Protocol_descriptor(), value);
}
inline bool _emC2S_TopList_Protocol_Parse(
    const ::std::string& name, _emC2S_TopList_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_TopList_Protocol>(
    _emC2S_TopList_Protocol_descriptor(), name, value);
}
enum _emC2S_Friend_Protocol {
  C2S_Friend_Add_Ask = 0,
  C2S_Friend_Del_Ask = 1,
  C2S_Friend_Answer = 2,
  C2S_Friend_Find = 3
};
bool _emC2S_Friend_Protocol_IsValid(int value);
const _emC2S_Friend_Protocol _emC2S_Friend_Protocol_MIN = C2S_Friend_Add_Ask;
const _emC2S_Friend_Protocol _emC2S_Friend_Protocol_MAX = C2S_Friend_Find;
const int _emC2S_Friend_Protocol_ARRAYSIZE = _emC2S_Friend_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Friend_Protocol_descriptor();
inline const ::std::string& _emC2S_Friend_Protocol_Name(_emC2S_Friend_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Friend_Protocol_descriptor(), value);
}
inline bool _emC2S_Friend_Protocol_Parse(
    const ::std::string& name, _emC2S_Friend_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Friend_Protocol>(
    _emC2S_Friend_Protocol_descriptor(), name, value);
}
enum _emC2S_Bingfu_Protocol {
  C2S_Bingfu_Upgrade_Ask = 0,
  C2S_Bingfu_Split_Ask = 1
};
bool _emC2S_Bingfu_Protocol_IsValid(int value);
const _emC2S_Bingfu_Protocol _emC2S_Bingfu_Protocol_MIN = C2S_Bingfu_Upgrade_Ask;
const _emC2S_Bingfu_Protocol _emC2S_Bingfu_Protocol_MAX = C2S_Bingfu_Split_Ask;
const int _emC2S_Bingfu_Protocol_ARRAYSIZE = _emC2S_Bingfu_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Bingfu_Protocol_descriptor();
inline const ::std::string& _emC2S_Bingfu_Protocol_Name(_emC2S_Bingfu_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Bingfu_Protocol_descriptor(), value);
}
inline bool _emC2S_Bingfu_Protocol_Parse(
    const ::std::string& name, _emC2S_Bingfu_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Bingfu_Protocol>(
    _emC2S_Bingfu_Protocol_descriptor(), name, value);
}
enum _emC2S_Wulue_Protocol {
  C2S_Wulue_SetScheme_Ask = 0,
  C2S_Wulue_UpZhanlue_Ask = 1,
  C2S_Wulue_SetBingfu_Ask = 2
};
bool _emC2S_Wulue_Protocol_IsValid(int value);
const _emC2S_Wulue_Protocol _emC2S_Wulue_Protocol_MIN = C2S_Wulue_SetScheme_Ask;
const _emC2S_Wulue_Protocol _emC2S_Wulue_Protocol_MAX = C2S_Wulue_SetBingfu_Ask;
const int _emC2S_Wulue_Protocol_ARRAYSIZE = _emC2S_Wulue_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Wulue_Protocol_descriptor();
inline const ::std::string& _emC2S_Wulue_Protocol_Name(_emC2S_Wulue_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Wulue_Protocol_descriptor(), value);
}
inline bool _emC2S_Wulue_Protocol_Parse(
    const ::std::string& name, _emC2S_Wulue_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Wulue_Protocol>(
    _emC2S_Wulue_Protocol_descriptor(), name, value);
}
enum _emC2S_Wentao_Protocol {
  C2S_Wetao_SetScheme_Ask = 0,
  C2S_Wetao_QianXiu_Ask = 1,
  C2S_Wetao_TuPo_Ask = 2,
  C2S_Wetao_Upgrate_Ask = 3,
  C2S_Wetao_SetBingfu_Ask = 4,
  C2S_Wetao_Reset_Ask = 5,
  C2S_Wetao_ActiveScheme_Ask = 6,
  C2S_Wetao_ActiveBingFa_Ask = 7
};
bool _emC2S_Wentao_Protocol_IsValid(int value);
const _emC2S_Wentao_Protocol _emC2S_Wentao_Protocol_MIN = C2S_Wetao_SetScheme_Ask;
const _emC2S_Wentao_Protocol _emC2S_Wentao_Protocol_MAX = C2S_Wetao_ActiveBingFa_Ask;
const int _emC2S_Wentao_Protocol_ARRAYSIZE = _emC2S_Wentao_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Wentao_Protocol_descriptor();
inline const ::std::string& _emC2S_Wentao_Protocol_Name(_emC2S_Wentao_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Wentao_Protocol_descriptor(), value);
}
inline bool _emC2S_Wentao_Protocol_Parse(
    const ::std::string& name, _emC2S_Wentao_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Wentao_Protocol>(
    _emC2S_Wentao_Protocol_descriptor(), name, value);
}
enum _emC2S_DropItem_Protocol {
  C2S_DropItem_Info_Ask = 0,
  C2S_DropItem_Dice_Ask = 1,
  C2S_DropItem_Assign_Ask = 2,
  C2S_DropItem_PickAll_Ask = 3,
  C2S_DropItem_Pickup_Ask = 4,
  C2S_DropItem_Abadon_Ask = 5
};
bool _emC2S_DropItem_Protocol_IsValid(int value);
const _emC2S_DropItem_Protocol _emC2S_DropItem_Protocol_MIN = C2S_DropItem_Info_Ask;
const _emC2S_DropItem_Protocol _emC2S_DropItem_Protocol_MAX = C2S_DropItem_Abadon_Ask;
const int _emC2S_DropItem_Protocol_ARRAYSIZE = _emC2S_DropItem_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_DropItem_Protocol_descriptor();
inline const ::std::string& _emC2S_DropItem_Protocol_Name(_emC2S_DropItem_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_DropItem_Protocol_descriptor(), value);
}
inline bool _emC2S_DropItem_Protocol_Parse(
    const ::std::string& name, _emC2S_DropItem_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_DropItem_Protocol>(
    _emC2S_DropItem_Protocol_descriptor(), name, value);
}
enum _emC2S_Identity_Protocol {
  C2S_Identity_Open_Ask = 0,
  C2S_Identity_Learn_Ask = 1,
  C2S_Identity_Reset_Ask = 2,
  C2S_Identity_UpSkill_Ask = 3
};
bool _emC2S_Identity_Protocol_IsValid(int value);
const _emC2S_Identity_Protocol _emC2S_Identity_Protocol_MIN = C2S_Identity_Open_Ask;
const _emC2S_Identity_Protocol _emC2S_Identity_Protocol_MAX = C2S_Identity_UpSkill_Ask;
const int _emC2S_Identity_Protocol_ARRAYSIZE = _emC2S_Identity_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Identity_Protocol_descriptor();
inline const ::std::string& _emC2S_Identity_Protocol_Name(_emC2S_Identity_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Identity_Protocol_descriptor(), value);
}
inline bool _emC2S_Identity_Protocol_Parse(
    const ::std::string& name, _emC2S_Identity_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Identity_Protocol>(
    _emC2S_Identity_Protocol_descriptor(), name, value);
}
enum _emC2S_Wuxue_Protocol {
  C2S_Wuxue_NewScheme_Ask = 0,
  C2S_Wuxue_DelScheme_Ask = 1,
  C2S_Wuxue_ChangeScheme_Ask = 2,
  C2S_Wuxue_SetSkill_Ask = 3,
  C2S_Wuxue_SetAllSkill_Ask = 4,
  C2S_Wuxue_LearnSkill_Ask = 5
};
bool _emC2S_Wuxue_Protocol_IsValid(int value);
const _emC2S_Wuxue_Protocol _emC2S_Wuxue_Protocol_MIN = C2S_Wuxue_NewScheme_Ask;
const _emC2S_Wuxue_Protocol _emC2S_Wuxue_Protocol_MAX = C2S_Wuxue_LearnSkill_Ask;
const int _emC2S_Wuxue_Protocol_ARRAYSIZE = _emC2S_Wuxue_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Wuxue_Protocol_descriptor();
inline const ::std::string& _emC2S_Wuxue_Protocol_Name(_emC2S_Wuxue_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Wuxue_Protocol_descriptor(), value);
}
inline bool _emC2S_Wuxue_Protocol_Parse(
    const ::std::string& name, _emC2S_Wuxue_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Wuxue_Protocol>(
    _emC2S_Wuxue_Protocol_descriptor(), name, value);
}
enum _emC2S_Dart_Protocol {
  C2S_Dart_Check_Ask = 0,
  C2S_Dart_Start_Ask = 1,
  C2S_Dart_Quit_Ask = 2,
  C2S_Dart_Check_Get_Buff_Ask = 3,
  C2S_Dart_Check_Confirm_Ask = 4,
  C2S_Dart_AddSupply_Ask = 5,
  C2S_Dart_AddSupply_Confirm_Ask = 6,
  C2S_Dart_Back_2_Npc_Ask = 7
};
bool _emC2S_Dart_Protocol_IsValid(int value);
const _emC2S_Dart_Protocol _emC2S_Dart_Protocol_MIN = C2S_Dart_Check_Ask;
const _emC2S_Dart_Protocol _emC2S_Dart_Protocol_MAX = C2S_Dart_Back_2_Npc_Ask;
const int _emC2S_Dart_Protocol_ARRAYSIZE = _emC2S_Dart_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Dart_Protocol_descriptor();
inline const ::std::string& _emC2S_Dart_Protocol_Name(_emC2S_Dart_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Dart_Protocol_descriptor(), value);
}
inline bool _emC2S_Dart_Protocol_Parse(
    const ::std::string& name, _emC2S_Dart_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Dart_Protocol>(
    _emC2S_Dart_Protocol_descriptor(), name, value);
}
enum _emC2S_FactionBoss_Protocol {
  C2S_FactionBoss_PersonalTop_Ask = 0,
  C2S_FactionBoss_FactionTop_Ask = 1,
  C2S_FactionBoss_UnionTop_Ask = 2
};
bool _emC2S_FactionBoss_Protocol_IsValid(int value);
const _emC2S_FactionBoss_Protocol _emC2S_FactionBoss_Protocol_MIN = C2S_FactionBoss_PersonalTop_Ask;
const _emC2S_FactionBoss_Protocol _emC2S_FactionBoss_Protocol_MAX = C2S_FactionBoss_UnionTop_Ask;
const int _emC2S_FactionBoss_Protocol_ARRAYSIZE = _emC2S_FactionBoss_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_FactionBoss_Protocol_descriptor();
inline const ::std::string& _emC2S_FactionBoss_Protocol_Name(_emC2S_FactionBoss_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_FactionBoss_Protocol_descriptor(), value);
}
inline bool _emC2S_FactionBoss_Protocol_Parse(
    const ::std::string& name, _emC2S_FactionBoss_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_FactionBoss_Protocol>(
    _emC2S_FactionBoss_Protocol_descriptor(), name, value);
}
enum _emC2S_ClimbTower_Protocol {
  C2S_ClimbTower_Get_Info_Ask = 0,
  C2S_ClimbTower_ChoosePrize_Ask = 1,
  C2S_ClimbTower_Clear_Ask = 2
};
bool _emC2S_ClimbTower_Protocol_IsValid(int value);
const _emC2S_ClimbTower_Protocol _emC2S_ClimbTower_Protocol_MIN = C2S_ClimbTower_Get_Info_Ask;
const _emC2S_ClimbTower_Protocol _emC2S_ClimbTower_Protocol_MAX = C2S_ClimbTower_Clear_Ask;
const int _emC2S_ClimbTower_Protocol_ARRAYSIZE = _emC2S_ClimbTower_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_ClimbTower_Protocol_descriptor();
inline const ::std::string& _emC2S_ClimbTower_Protocol_Name(_emC2S_ClimbTower_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_ClimbTower_Protocol_descriptor(), value);
}
inline bool _emC2S_ClimbTower_Protocol_Parse(
    const ::std::string& name, _emC2S_ClimbTower_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_ClimbTower_Protocol>(
    _emC2S_ClimbTower_Protocol_descriptor(), name, value);
}
enum _emC2S_AnswerQuestion_Protocol {
  C2S_AnswerQuestion_Answer = 0
};
bool _emC2S_AnswerQuestion_Protocol_IsValid(int value);
const _emC2S_AnswerQuestion_Protocol _emC2S_AnswerQuestion_Protocol_MIN = C2S_AnswerQuestion_Answer;
const _emC2S_AnswerQuestion_Protocol _emC2S_AnswerQuestion_Protocol_MAX = C2S_AnswerQuestion_Answer;
const int _emC2S_AnswerQuestion_Protocol_ARRAYSIZE = _emC2S_AnswerQuestion_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_AnswerQuestion_Protocol_descriptor();
inline const ::std::string& _emC2S_AnswerQuestion_Protocol_Name(_emC2S_AnswerQuestion_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_AnswerQuestion_Protocol_descriptor(), value);
}
inline bool _emC2S_AnswerQuestion_Protocol_Parse(
    const ::std::string& name, _emC2S_AnswerQuestion_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_AnswerQuestion_Protocol>(
    _emC2S_AnswerQuestion_Protocol_descriptor(), name, value);
}
enum _emC2S_WorldBoss_Protocol {
  C2S_WorldBoss_GetInfo_Ask = 0,
  C2S_WorldBoss_Update_BossHurtRank_Ask = 1,
  C2S_WorldBoss_Goto_Boss_Ask = 2
};
bool _emC2S_WorldBoss_Protocol_IsValid(int value);
const _emC2S_WorldBoss_Protocol _emC2S_WorldBoss_Protocol_MIN = C2S_WorldBoss_GetInfo_Ask;
const _emC2S_WorldBoss_Protocol _emC2S_WorldBoss_Protocol_MAX = C2S_WorldBoss_Goto_Boss_Ask;
const int _emC2S_WorldBoss_Protocol_ARRAYSIZE = _emC2S_WorldBoss_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_WorldBoss_Protocol_descriptor();
inline const ::std::string& _emC2S_WorldBoss_Protocol_Name(_emC2S_WorldBoss_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_WorldBoss_Protocol_descriptor(), value);
}
inline bool _emC2S_WorldBoss_Protocol_Parse(
    const ::std::string& name, _emC2S_WorldBoss_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_WorldBoss_Protocol>(
    _emC2S_WorldBoss_Protocol_descriptor(), name, value);
}
enum _emC2S_Activity_Protocol {
  C2S_Activity_GetReward_Ask = 0
};
bool _emC2S_Activity_Protocol_IsValid(int value);
const _emC2S_Activity_Protocol _emC2S_Activity_Protocol_MIN = C2S_Activity_GetReward_Ask;
const _emC2S_Activity_Protocol _emC2S_Activity_Protocol_MAX = C2S_Activity_GetReward_Ask;
const int _emC2S_Activity_Protocol_ARRAYSIZE = _emC2S_Activity_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Activity_Protocol_descriptor();
inline const ::std::string& _emC2S_Activity_Protocol_Name(_emC2S_Activity_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Activity_Protocol_descriptor(), value);
}
inline bool _emC2S_Activity_Protocol_Parse(
    const ::std::string& name, _emC2S_Activity_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Activity_Protocol>(
    _emC2S_Activity_Protocol_descriptor(), name, value);
}
enum _emC2S_Relive_Protocol {
  C2S_Relive_Born_Ack = 10
};
bool _emC2S_Relive_Protocol_IsValid(int value);
const _emC2S_Relive_Protocol _emC2S_Relive_Protocol_MIN = C2S_Relive_Born_Ack;
const _emC2S_Relive_Protocol _emC2S_Relive_Protocol_MAX = C2S_Relive_Born_Ack;
const int _emC2S_Relive_Protocol_ARRAYSIZE = _emC2S_Relive_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Relive_Protocol_descriptor();
inline const ::std::string& _emC2S_Relive_Protocol_Name(_emC2S_Relive_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Relive_Protocol_descriptor(), value);
}
inline bool _emC2S_Relive_Protocol_Parse(
    const ::std::string& name, _emC2S_Relive_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Relive_Protocol>(
    _emC2S_Relive_Protocol_descriptor(), name, value);
}
enum _emC2S_Manor_Protocol {
  C2S_Manor_Get_All_Info_Ask = 0,
  C2S_Manor_Get_Fight_Info_Ask = 1,
  C2S_Manor_Apply_Fight_Ask = 2,
  C2S_Manor_Enter_Lobby_Ask = 3,
  C2S_Manor_MVPVote_Ask = 4,
  G2W_Manor_BattleField_FighterCount_Ask = 5,
  G2W_Manor_BattleField_Enter_Ask = 6,
  G2W_Manor_GM_Set_Activity_Ask = 7
};
bool _emC2S_Manor_Protocol_IsValid(int value);
const _emC2S_Manor_Protocol _emC2S_Manor_Protocol_MIN = C2S_Manor_Get_All_Info_Ask;
const _emC2S_Manor_Protocol _emC2S_Manor_Protocol_MAX = G2W_Manor_GM_Set_Activity_Ask;
const int _emC2S_Manor_Protocol_ARRAYSIZE = _emC2S_Manor_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emC2S_Manor_Protocol_descriptor();
inline const ::std::string& _emC2S_Manor_Protocol_Name(_emC2S_Manor_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emC2S_Manor_Protocol_descriptor(), value);
}
inline bool _emC2S_Manor_Protocol_Parse(
    const ::std::string& name, _emC2S_Manor_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emC2S_Manor_Protocol>(
    _emC2S_Manor_Protocol_descriptor(), name, value);
}
enum _emPS2C_Protocol {
  P_S2C_Protocol_Player = 0,
  P_S2C_Protocol_Common = 1,
  P_S2C_Protocol_Skill = 2,
  P_S2C_Protocol_Buff = 3,
  P_S2C_Protocol_Counter = 4,
  P_S2C_Protocol_Team = 5,
  P_S2C_Protocol_Prize = 6,
  P_S2C_Protocol_Item = 7,
  P_S2C_Protocol_Quest = 8,
  P_S2C_Protocol_Mail = 9,
  P_S2C_Protocol_Copymap = 10,
  P_S2C_Protocol_Trade = 11,
  P_S2C_Protocol_SaleMoney = 12,
  P_S2C_Protocol_Auction = 13,
  P_S2C_Protocol_Store = 14,
  P_S2C_Protocol_Faction = 15,
  P_S2C_Protocol_TopList = 16,
  P_S2C_Protocol_Friend = 17,
  P_S2C_Protocol_PvpWar = 18,
  P_S2C_Protocol_Wulue = 19,
  P_S2C_Protocol_Wentao = 20,
  P_S2C_Protocol_DropItem = 21,
  P_S2C_Protocol_Broadcast = 22,
  P_S2C_Protocol_Identity = 23,
  P_S2C_Protocol_Wuxue = 24,
  P_S2C_Protocol_Dart = 25,
  P_S2C_Protocol_FactionBoss = 26,
  P_S2C_Protocol_Title = 27,
  P_S2C_Protocol_Fashion = 28,
  P_S2C_Protocol_EquipColumn = 29,
  P_S2C_Protocol_ClimbTower = 30,
  P_S2C_Protocol_AnswerQuestion = 31,
  P_S2C_Protocol_GreatWallTrain = 32,
  P_S2C_Protocol_WorldBoss = 33,
  P_S2C_Protocol_Activity = 34,
  P_S2C_Protocol_Relive = 35,
  P_S2C_Protocol_Corps = 36,
  P_S2C_Protocol_Weal = 37,
  P_S2C_Protocol_Manor = 38,
  P_S2C_Protocol_SinglePvp = 39
};
bool _emPS2C_Protocol_IsValid(int value);
const _emPS2C_Protocol _emPS2C_Protocol_MIN = P_S2C_Protocol_Player;
const _emPS2C_Protocol _emPS2C_Protocol_MAX = P_S2C_Protocol_SinglePvp;
const int _emPS2C_Protocol_ARRAYSIZE = _emPS2C_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPS2C_Protocol_descriptor();
inline const ::std::string& _emPS2C_Protocol_Name(_emPS2C_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPS2C_Protocol_descriptor(), value);
}
inline bool _emPS2C_Protocol_Parse(
    const ::std::string& name, _emPS2C_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPS2C_Protocol>(
    _emPS2C_Protocol_descriptor(), name, value);
}
enum _emS2C_EquipColumn_Protocol {
  S2C_EquipColumn_Enhance = 0,
  S2C_EquipColumn_Forge = 1
};
bool _emS2C_EquipColumn_Protocol_IsValid(int value);
const _emS2C_EquipColumn_Protocol _emS2C_EquipColumn_Protocol_MIN = S2C_EquipColumn_Enhance;
const _emS2C_EquipColumn_Protocol _emS2C_EquipColumn_Protocol_MAX = S2C_EquipColumn_Forge;
const int _emS2C_EquipColumn_Protocol_ARRAYSIZE = _emS2C_EquipColumn_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_EquipColumn_Protocol_descriptor();
inline const ::std::string& _emS2C_EquipColumn_Protocol_Name(_emS2C_EquipColumn_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_EquipColumn_Protocol_descriptor(), value);
}
inline bool _emS2C_EquipColumn_Protocol_Parse(
    const ::std::string& name, _emS2C_EquipColumn_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_EquipColumn_Protocol>(
    _emS2C_EquipColumn_Protocol_descriptor(), name, value);
}
enum _emS2C_Fashion_Protocol {
  S2C_Fashion_Add = 0,
  S2C_Fashion_Del = 1,
  S2C_Fashion_Equip_Ack = 2,
  S2C_Fashion_UnEquip_Ack = 3
};
bool _emS2C_Fashion_Protocol_IsValid(int value);
const _emS2C_Fashion_Protocol _emS2C_Fashion_Protocol_MIN = S2C_Fashion_Add;
const _emS2C_Fashion_Protocol _emS2C_Fashion_Protocol_MAX = S2C_Fashion_UnEquip_Ack;
const int _emS2C_Fashion_Protocol_ARRAYSIZE = _emS2C_Fashion_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Fashion_Protocol_descriptor();
inline const ::std::string& _emS2C_Fashion_Protocol_Name(_emS2C_Fashion_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Fashion_Protocol_descriptor(), value);
}
inline bool _emS2C_Fashion_Protocol_Parse(
    const ::std::string& name, _emS2C_Fashion_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Fashion_Protocol>(
    _emS2C_Fashion_Protocol_descriptor(), name, value);
}
enum _emS2C_Title_Protocol {
  S2C_Title_Add = 0,
  S2C_Trade_Del = 1,
  S2C_Trade_Equip = 2,
  S2C_Trade_UnEquip = 3
};
bool _emS2C_Title_Protocol_IsValid(int value);
const _emS2C_Title_Protocol _emS2C_Title_Protocol_MIN = S2C_Title_Add;
const _emS2C_Title_Protocol _emS2C_Title_Protocol_MAX = S2C_Trade_UnEquip;
const int _emS2C_Title_Protocol_ARRAYSIZE = _emS2C_Title_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Title_Protocol_descriptor();
inline const ::std::string& _emS2C_Title_Protocol_Name(_emS2C_Title_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Title_Protocol_descriptor(), value);
}
inline bool _emS2C_Title_Protocol_Parse(
    const ::std::string& name, _emS2C_Title_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Title_Protocol>(
    _emS2C_Title_Protocol_descriptor(), name, value);
}
enum _emS2C_Trade_Protocol {
  S2C_Trade_apply_Ack = 0,
  S2C_Trade_answer_Ack = 1,
  S2C_Trade_addItem_Ack = 2,
  S2C_Trade_delItem_Ack = 3,
  S2C_Trade_setMoney_Ack = 4,
  S2C_Trade_lock_Ack = 5,
  S2C_Trade_unlock_Ack = 6,
  S2C_Trade_confirm_Ack = 7,
  S2C_Trade_cancel_Ack = 8,
  S2C_Trade_beginTrade = 9,
  S2C_Trade_endTrade = 10,
  S2C_Trade_addItem = 11,
  S2C_Trade_delItem = 12,
  S2C_Trade_setMoney = 13,
  S2C_Trade_lock = 14,
  S2C_Trade_unlock = 15,
  S2C_Trade_confirm = 16,
  S2C_Trade_applyTrasfer = 17,
  S2C_Trade_answerTrasfer = 18,
  S2C_Trade_SliverInfo = 19
};
bool _emS2C_Trade_Protocol_IsValid(int value);
const _emS2C_Trade_Protocol _emS2C_Trade_Protocol_MIN = S2C_Trade_apply_Ack;
const _emS2C_Trade_Protocol _emS2C_Trade_Protocol_MAX = S2C_Trade_SliverInfo;
const int _emS2C_Trade_Protocol_ARRAYSIZE = _emS2C_Trade_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Trade_Protocol_descriptor();
inline const ::std::string& _emS2C_Trade_Protocol_Name(_emS2C_Trade_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Trade_Protocol_descriptor(), value);
}
inline bool _emS2C_Trade_Protocol_Parse(
    const ::std::string& name, _emS2C_Trade_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Trade_Protocol>(
    _emS2C_Trade_Protocol_descriptor(), name, value);
}
enum _emS2C_SaleMoney_Protocol {
  S2C_SaleMoney_sale_Ack = 0,
  S2C_SaleMoney_salecancel_Ack = 1,
  S2C_SaleMoney_list_Ack = 2,
  S2C_SaleMoney_sale_New = 3,
  S2C_SaleMoney_sale_Delete = 4,
  S2C_SaleMoney_sale_Update = 5,
  S2C_SaleMoney_log_New = 6,
  S2C_SaleMoney_tradelog = 7
};
bool _emS2C_SaleMoney_Protocol_IsValid(int value);
const _emS2C_SaleMoney_Protocol _emS2C_SaleMoney_Protocol_MIN = S2C_SaleMoney_sale_Ack;
const _emS2C_SaleMoney_Protocol _emS2C_SaleMoney_Protocol_MAX = S2C_SaleMoney_tradelog;
const int _emS2C_SaleMoney_Protocol_ARRAYSIZE = _emS2C_SaleMoney_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_SaleMoney_Protocol_descriptor();
inline const ::std::string& _emS2C_SaleMoney_Protocol_Name(_emS2C_SaleMoney_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_SaleMoney_Protocol_descriptor(), value);
}
inline bool _emS2C_SaleMoney_Protocol_Parse(
    const ::std::string& name, _emS2C_SaleMoney_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_SaleMoney_Protocol>(
    _emS2C_SaleMoney_Protocol_descriptor(), name, value);
}
enum _emS2C_Auction_Protocol {
  S2C_Auction_sale_Ack = 0,
  S2C_Auction_salecancel_Ack = 1,
  S2C_Auction_buy_Ack = 2,
  S2C_Auction_list_Ack = 3,
  S2C_Auction_ave_Ack = 4,
  S2C_Auction_sale_New = 5,
  S2C_Auction_sale_Delete = 6,
  S2C_Auction_sale_Update = 7,
  S2C_Auction_lock_New = 8,
  S2C_Auction_lock_Delete = 9,
  S2C_Auction_log_New = 10
};
bool _emS2C_Auction_Protocol_IsValid(int value);
const _emS2C_Auction_Protocol _emS2C_Auction_Protocol_MIN = S2C_Auction_sale_Ack;
const _emS2C_Auction_Protocol _emS2C_Auction_Protocol_MAX = S2C_Auction_log_New;
const int _emS2C_Auction_Protocol_ARRAYSIZE = _emS2C_Auction_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Auction_Protocol_descriptor();
inline const ::std::string& _emS2C_Auction_Protocol_Name(_emS2C_Auction_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Auction_Protocol_descriptor(), value);
}
inline bool _emS2C_Auction_Protocol_Parse(
    const ::std::string& name, _emS2C_Auction_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Auction_Protocol>(
    _emS2C_Auction_Protocol_descriptor(), name, value);
}
enum _emS2C_Mail_Protocol {
  S2C_Mail_Read = 0,
  S2C_Mail_Delete = 1,
  S2C_Mail_Reward = 2,
  S2C_Mail_Load = 3
};
bool _emS2C_Mail_Protocol_IsValid(int value);
const _emS2C_Mail_Protocol _emS2C_Mail_Protocol_MIN = S2C_Mail_Read;
const _emS2C_Mail_Protocol _emS2C_Mail_Protocol_MAX = S2C_Mail_Load;
const int _emS2C_Mail_Protocol_ARRAYSIZE = _emS2C_Mail_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Mail_Protocol_descriptor();
inline const ::std::string& _emS2C_Mail_Protocol_Name(_emS2C_Mail_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Mail_Protocol_descriptor(), value);
}
inline bool _emS2C_Mail_Protocol_Parse(
    const ::std::string& name, _emS2C_Mail_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Mail_Protocol>(
    _emS2C_Mail_Protocol_descriptor(), name, value);
}
enum _emS2C_Player_Protocol {
  S2C_Player_LoadAccount = 0,
  S2C_Player_CreatPlayer = 1,
  S2C_Player_DelPlayer = 2,
  S2C_Player_SelectPlayer = 3,
  S2C_Player_BaseInfo = 4,
  S2C_Player_SystemInfo = 5,
  S2C_Player_BagInfo = 6,
  S2C_Player_DepotInfo = 7,
  S2C_Player_ClientInfo = 8,
  S2C_Player_QuestInfo = 9,
  S2C_Player_Global = 10,
  S2C_Player_Friend = 11,
  S2C_Player_Mail = 12,
  S2C_Player_Faction = 13,
  S2C_Player_CheckPlayerName = 14
};
bool _emS2C_Player_Protocol_IsValid(int value);
const _emS2C_Player_Protocol _emS2C_Player_Protocol_MIN = S2C_Player_LoadAccount;
const _emS2C_Player_Protocol _emS2C_Player_Protocol_MAX = S2C_Player_CheckPlayerName;
const int _emS2C_Player_Protocol_ARRAYSIZE = _emS2C_Player_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Player_Protocol_descriptor();
inline const ::std::string& _emS2C_Player_Protocol_Name(_emS2C_Player_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Player_Protocol_descriptor(), value);
}
inline bool _emS2C_Player_Protocol_Parse(
    const ::std::string& name, _emS2C_Player_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Player_Protocol>(
    _emS2C_Player_Protocol_descriptor(), name, value);
}
enum _emS2C_Common_Protocol {
  S2C_Common_Ready = 0,
  S2C_Common_Ghost = 1,
  S2C_Common_Unit_Remove = 2,
  S2C_Common_SceneFly_SameGameSvr = 3,
  S2C_Common_SceneFly_JumpGameSvr = 4,
  S2C_Common_Move = 5,
  S2C_Common_MoveStop = 6,
  S2C_Common_Turn = 7,
  S2C_Common_GMCmd = 8,
  S2C_Common_ExpendSyn = 9,
  S2C_Common_Pickup = 10,
  S2C_Common_AddExp = 11,
  S2C_Common_AddLevel = 12,
  S2C_Common_AddHp = 13,
  S2C_Common_GetClientData = 14,
  S2C_Common_ClientDataOver = 15,
  S2C_Common_FindPlayer = 16,
  S2C_Common_Promotion = 17,
  S2C_Common_ReliveAck = 18,
  S2C_Common_TimeEvent = 20,
  S2C_Common_PlaneEnter_Ack = 21,
  S2C_Common_PlaneLeave_Ack = 22,
  S2C_Common_BossInfo = 24,
  S2C_Common_BossList = 25,
  S2C_Common_Fly_Ack = 26,
  S2C_Common_SystemSwitch = 27,
  S2C_Common_SearchPlayer = 28,
  S2C_Common_MonsterTalk = 29,
  S2C_Common_BeFindNotice = 30,
  S2C_Common_SetPosition = 31,
  S2C_Common_SynTypeDayCopymapCount = 32,
  S2C_Common_PlaneUpdate = 33,
  S2C_Common_Area_Syn = 34,
  S2C_Common_Area_Add = 35,
  S2C_Common_Area_Del = 36,
  S2C_Common_QinggongStart_Ntf = 37,
  S2C_Common_GetBattleAttrDetail = 38,
  S2C_Common_RegionTriggerPlane = 39,
  S2C_Common_PKType = 40,
  S2C_Common_TakeASeat = 41,
  S2C_Common_TaskFly = 42,
  S2C_Common_DazuoguajiTotalNtf = 43,
  S2C_Common_SynDayTeamTaskCount = 45,
  S2C_Common_TreasurePrize = 46,
  S2C_Common_BroadcastMsg = 47,
  S2C_Common_SynForbitSpeak = 48,
  S2C_Common_ForbitSpeakAck = 49,
  S2C_Common_SetCorpsJob = 50,
  S2C_Common_StrongerGetReward = 51,
  S2C_Common_GetSubFightPower = 52,
  S2C_Common_BaseExp = 53,
  S2C_Common_ClearData = 54
};
bool _emS2C_Common_Protocol_IsValid(int value);
const _emS2C_Common_Protocol _emS2C_Common_Protocol_MIN = S2C_Common_Ready;
const _emS2C_Common_Protocol _emS2C_Common_Protocol_MAX = S2C_Common_ClearData;
const int _emS2C_Common_Protocol_ARRAYSIZE = _emS2C_Common_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Common_Protocol_descriptor();
inline const ::std::string& _emS2C_Common_Protocol_Name(_emS2C_Common_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Common_Protocol_descriptor(), value);
}
inline bool _emS2C_Common_Protocol_Parse(
    const ::std::string& name, _emS2C_Common_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Common_Protocol>(
    _emS2C_Common_Protocol_descriptor(), name, value);
}
enum _emS2C_Skill_Protocol {
  S2C_Skill_Use = 0,
  S2C_Skill_UseCharge = 1,
  S2C_Skill_SkillBreak = 2,
  S2C_Skill_Add = 3,
  S2C_Skill_Upgrade = 4,
  S2C_Skill_Damage = 5,
  S2C_Skill_Notice = 6,
  S2C_Skill_EnermyList = 7,
  S2C_Skill_EffectBroad = 8,
  S2C_Skill_Del = 9,
  S2C_Skill_UpCoolTime = 10
};
bool _emS2C_Skill_Protocol_IsValid(int value);
const _emS2C_Skill_Protocol _emS2C_Skill_Protocol_MIN = S2C_Skill_Use;
const _emS2C_Skill_Protocol _emS2C_Skill_Protocol_MAX = S2C_Skill_UpCoolTime;
const int _emS2C_Skill_Protocol_ARRAYSIZE = _emS2C_Skill_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Skill_Protocol_descriptor();
inline const ::std::string& _emS2C_Skill_Protocol_Name(_emS2C_Skill_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Skill_Protocol_descriptor(), value);
}
inline bool _emS2C_Skill_Protocol_Parse(
    const ::std::string& name, _emS2C_Skill_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Skill_Protocol>(
    _emS2C_Skill_Protocol_descriptor(), name, value);
}
enum _emS2C_Buff_Protocol {
  S2C_Buff_Add = 0,
  S2C_Buff_Del = 1,
  S2C_Buff_AddMove = 2,
  S2C_Buff_UpdateTick = 3,
  S2C_Buff_AllSyn = 4
};
bool _emS2C_Buff_Protocol_IsValid(int value);
const _emS2C_Buff_Protocol _emS2C_Buff_Protocol_MIN = S2C_Buff_Add;
const _emS2C_Buff_Protocol _emS2C_Buff_Protocol_MAX = S2C_Buff_AllSyn;
const int _emS2C_Buff_Protocol_ARRAYSIZE = _emS2C_Buff_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Buff_Protocol_descriptor();
inline const ::std::string& _emS2C_Buff_Protocol_Name(_emS2C_Buff_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Buff_Protocol_descriptor(), value);
}
inline bool _emS2C_Buff_Protocol_Parse(
    const ::std::string& name, _emS2C_Buff_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Buff_Protocol>(
    _emS2C_Buff_Protocol_descriptor(), name, value);
}
enum _emS2C_Counter_Protocol {
  S2C_Counter_Update = 0
};
bool _emS2C_Counter_Protocol_IsValid(int value);
const _emS2C_Counter_Protocol _emS2C_Counter_Protocol_MIN = S2C_Counter_Update;
const _emS2C_Counter_Protocol _emS2C_Counter_Protocol_MAX = S2C_Counter_Update;
const int _emS2C_Counter_Protocol_ARRAYSIZE = _emS2C_Counter_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Counter_Protocol_descriptor();
inline const ::std::string& _emS2C_Counter_Protocol_Name(_emS2C_Counter_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Counter_Protocol_descriptor(), value);
}
inline bool _emS2C_Counter_Protocol_Parse(
    const ::std::string& name, _emS2C_Counter_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Counter_Protocol>(
    _emS2C_Counter_Protocol_descriptor(), name, value);
}
enum _emS2C_Team_Protocol {
  S2C_Team_Invite_Ack = 0,
  S2C_Team_AcceptInvite_Ack = 1,
  S2C_Team_Apply_Ack = 2,
  S2C_Team_AcceptApply_Ack = 3,
  S2C_Team_Leave_Ack = 4,
  S2C_Team_ChangeLeader_Ack = 5,
  S2C_Team_Publish_Ask_Ack = 6,
  S2C_Team_Publish_Cancel_Ack = 7,
  S2C_Team_Publish_Invite_Ack = 8,
  S2C_Team_Publish_AcceptInvite_Ack = 9,
  S2C_Team_Publish_List_Ack = 10,
  S2C_Team_Kick_Ack = 11,
  S2C_Team_Kick_Vote_Ack = 12,
  S2C_Team_SetAllot_Ack = 13,
  S2C_Team_SetAllot_Vote_Ack = 14,
  S2C_Team_NearPlayerList_Ack = 15,
  S2C_Team_NearTeamList_Ack = 16,
  S2C_Team_View_Ack = 17,
  S2C_Team_Invite_Transfer = 18,
  S2C_Team_AcceptInvite_Transfer = 19,
  S2C_Team_Apply_Transfer = 20,
  S2C_Team_AcceptApply_Transfer = 21,
  S2C_Team_ChangeLeader = 22,
  S2C_Team_Publish_Add = 23,
  S2C_Team_Publish_Del = 24,
  S2C_Team_Publish_Invite_Transfer = 25,
  S2C_Team_Publish_AcceptInvite_Transfer = 26,
  S2C_Team_Publish_List = 27,
  S2C_Team_Kick_Vote = 28,
  S2C_Team_SetAllot = 29,
  S2C_Team_SetAllot_Vote = 30,
  S2C_Team_NearPlayerList = 31,
  S2C_Team_NearTeamList = 32,
  S2C_Team_MyTeamInfo = 33,
  S2C_Team_MemberAdd = 34,
  S2C_Team_MemberDel = 35,
  S2C_Team_Dismiss = 36,
  S2C_Team_MemberUpdate = 37,
  S2C_Team_View = 38,
  S2C_Team_Callup_Ack = 39,
  S2C_Team_AcceptIdentity_Ack = 40,
  S2C_Team_CheckCondition_Ack = 41,
  S2C_Team_Create_Ack = 42,
  S2C_Team_SetTarget_Ack = 43,
  S2C_Team_SetAutoAccept_Ack = 44,
  S2C_Team_SetAutoMatch_Ack = 45,
  S2C_Team_SetAutoMatchJoin_Ack = 46,
  S2C_Team_SetAutoMatchJobLimit_Ack = 47,
  S2C_Team_GetApplicantList_Ack = 48,
  S2C_Team_ClearApplicantList_Ack = 49,
  S2C_Team_AcceptApplyFromList_Ack = 50,
  S2C_Team_SearchTeamByTarget_Ack = 51,
  S2C_Team_ApplyTeamByTarget_Ack = 52,
  S2C_Team_CancleApplyTeamByTarget_Ack = 53,
  S2C_Team_ApplyedTeamIdList_Ntf = 54,
  S2C_Team_AcceptTeamTask_Ack = 55,
  S2C_Team_EnterTeamTaskCopymap_Ack = 56,
  S2C_Team_CompleteTeamTask_Ack = 57,
  S2C_Team_UpdateTeamTask_Ack = 58,
  S2C_Team_Follow_Ack = 59,
  S2C_Team_RemainConfirm = 60,
  S2C_Team_Confirm = 61,
  S2C_Team_MemberHit = 62
};
bool _emS2C_Team_Protocol_IsValid(int value);
const _emS2C_Team_Protocol _emS2C_Team_Protocol_MIN = S2C_Team_Invite_Ack;
const _emS2C_Team_Protocol _emS2C_Team_Protocol_MAX = S2C_Team_MemberHit;
const int _emS2C_Team_Protocol_ARRAYSIZE = _emS2C_Team_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Team_Protocol_descriptor();
inline const ::std::string& _emS2C_Team_Protocol_Name(_emS2C_Team_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Team_Protocol_descriptor(), value);
}
inline bool _emS2C_Team_Protocol_Parse(
    const ::std::string& name, _emS2C_Team_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Team_Protocol>(
    _emS2C_Team_Protocol_descriptor(), name, value);
}
enum _emS2C_Item_Protocol {
  S2C_Item_New = 0,
  S2C_Item_Del = 1,
  S2C_Item_Use = 2,
  S2C_Item_Equip = 3,
  S2C_Item_Sell = 4,
  S2C_Item_BuyBack = 5,
  S2C_Item_Split = 6,
  S2C_Item_UpdateNum = 7,
  S2C_Item_Sort = 8,
  S2C_Item_Enhance = 9,
  S2C_Item_Forge = 10,
  S2C_Item_Inherit = 11,
  S2C_Item_Make = 12,
  S2C_Item_Mounting = 13,
  S2C_Item_UpUseCount = 14,
  S2C_Item_BingfuSplit = 15,
  S2C_Item_BingfuUpgrade = 16,
  S2C_Item_Update = 17,
  S2C_Item_Compound = 18,
  S2C_Item_OpenEquipMakeDlg = 19,
  S2C_Item_OpenEquipMakeOEMDlg = 20,
  S2C_Item_CommitEquipMakeOEM = 21,
  S2C_Item_VisitEquipMakeOEM = 22,
  S2C_Item_EquipMakeOEM = 23,
  S2C_Item_EquipChangeOEMFee = 24
};
bool _emS2C_Item_Protocol_IsValid(int value);
const _emS2C_Item_Protocol _emS2C_Item_Protocol_MIN = S2C_Item_New;
const _emS2C_Item_Protocol _emS2C_Item_Protocol_MAX = S2C_Item_EquipChangeOEMFee;
const int _emS2C_Item_Protocol_ARRAYSIZE = _emS2C_Item_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Item_Protocol_descriptor();
inline const ::std::string& _emS2C_Item_Protocol_Name(_emS2C_Item_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Item_Protocol_descriptor(), value);
}
inline bool _emS2C_Item_Protocol_Parse(
    const ::std::string& name, _emS2C_Item_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Item_Protocol>(
    _emS2C_Item_Protocol_descriptor(), name, value);
}
enum _emS2C_Quest_Protocol {
  S2C_Quest_Accept = 0,
  S2C_Quest_Complete = 1,
  S2C_Quest_UpdateItem = 2,
  S2C_Quest_GiveUp = 3,
  S2C_Quest_Refresh = 4
};
bool _emS2C_Quest_Protocol_IsValid(int value);
const _emS2C_Quest_Protocol _emS2C_Quest_Protocol_MIN = S2C_Quest_Accept;
const _emS2C_Quest_Protocol _emS2C_Quest_Protocol_MAX = S2C_Quest_Refresh;
const int _emS2C_Quest_Protocol_ARRAYSIZE = _emS2C_Quest_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Quest_Protocol_descriptor();
inline const ::std::string& _emS2C_Quest_Protocol_Name(_emS2C_Quest_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Quest_Protocol_descriptor(), value);
}
inline bool _emS2C_Quest_Protocol_Parse(
    const ::std::string& name, _emS2C_Quest_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Quest_Protocol>(
    _emS2C_Quest_Protocol_descriptor(), name, value);
}
enum _emS2C_Store_Protocol {
  S2C_Store_Buy = 0
};
bool _emS2C_Store_Protocol_IsValid(int value);
const _emS2C_Store_Protocol _emS2C_Store_Protocol_MIN = S2C_Store_Buy;
const _emS2C_Store_Protocol _emS2C_Store_Protocol_MAX = S2C_Store_Buy;
const int _emS2C_Store_Protocol_ARRAYSIZE = _emS2C_Store_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Store_Protocol_descriptor();
inline const ::std::string& _emS2C_Store_Protocol_Name(_emS2C_Store_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Store_Protocol_descriptor(), value);
}
inline bool _emS2C_Store_Protocol_Parse(
    const ::std::string& name, _emS2C_Store_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Store_Protocol>(
    _emS2C_Store_Protocol_descriptor(), name, value);
}
enum _emS2C_Prize_Protocol {
  S2C_Prize_Accept_Ack = 0,
  S2C_Prize_Abandon_Ack = 1,
  S2C_Prize_New = 2
};
bool _emS2C_Prize_Protocol_IsValid(int value);
const _emS2C_Prize_Protocol _emS2C_Prize_Protocol_MIN = S2C_Prize_Accept_Ack;
const _emS2C_Prize_Protocol _emS2C_Prize_Protocol_MAX = S2C_Prize_New;
const int _emS2C_Prize_Protocol_ARRAYSIZE = _emS2C_Prize_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Prize_Protocol_descriptor();
inline const ::std::string& _emS2C_Prize_Protocol_Name(_emS2C_Prize_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Prize_Protocol_descriptor(), value);
}
inline bool _emS2C_Prize_Protocol_Parse(
    const ::std::string& name, _emS2C_Prize_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Prize_Protocol>(
    _emS2C_Prize_Protocol_descriptor(), name, value);
}
enum _emS2C_Copymap_Protocol {
  S2C_Copymap_Create_Ack = 0,
  S2C_Copymap_Exit_Ack = 1,
  S2C_Copymap_Invite_Ack = 2,
  S2C_Copymap_AcceptInvite_Ack = 3,
  S2C_Copymap_TeamMemberInfo_Ack = 4,
  S2C_Copymap_Invite_Transfer = 5,
  S2C_Copymap_AssistCount = 6,
  S2C_Copymap_InfoUpdate = 7,
  S2C_Copymap_State = 8,
  S2C_Copymap_QuestItem = 9,
  S2C_Copymap_Quest = 10,
  S2C_Copymap_EnterInfo = 11,
  S2C_Copymap_TeamMemberInfo = 12,
  S2C_Copymap_SysGuardHp = 14,
  S2C_Copymap_SynPoemAcitvePos = 15,
  S2C_Copymap_SynLiangyiNum = 16,
  S2C_Copymap_SynWave = 17,
  S2C_Copymap_SynSixiangMonster = 18,
  S2C_Copymap_HurtInfo = 19,
  S2C_Copymap_ChangeQuest = 20,
  S2C_Copymap_SynBannerScore = 21,
  S2C_Copymap_SynBannerPlayerInfo = 22,
  S2C_Copymap_SynBannerResult = 23,
  S2C_Copymap_SynBannerGodlike = 24,
  S2C_Copymap_SynBannerMegakill = 25,
  S2C_Copymap_SynGetBanner = 26,
  S2C_Copymap_SynBannerKill = 27,
  S2C_Copymap_SynReadStartTime = 28,
  S2C_Copymap_FindAttackMonster = 29,
  S2C_Copymap_Manor_Lobby_LineUp_Ntf = 30,
  S2C_Copymap_Manor_BattleField_Shenfu_Ntf = 31,
  S2C_Copymap_Manor_BattleField_Comrades_Ntf = 32,
  S2C_Copymap_Manor_BattleField_TotalScore_Ntf = 33,
  S2C_Copymap_Unactive = 34,
  S2C_Copymap_Manor_Broadcast_Prompt_Ntf = 35,
  S2C_Copymap_SynSinglePvpResult = 36,
  S2C_Copymap_CloseTip = 37
};
bool _emS2C_Copymap_Protocol_IsValid(int value);
const _emS2C_Copymap_Protocol _emS2C_Copymap_Protocol_MIN = S2C_Copymap_Create_Ack;
const _emS2C_Copymap_Protocol _emS2C_Copymap_Protocol_MAX = S2C_Copymap_CloseTip;
const int _emS2C_Copymap_Protocol_ARRAYSIZE = _emS2C_Copymap_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Copymap_Protocol_descriptor();
inline const ::std::string& _emS2C_Copymap_Protocol_Name(_emS2C_Copymap_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Copymap_Protocol_descriptor(), value);
}
inline bool _emS2C_Copymap_Protocol_Parse(
    const ::std::string& name, _emS2C_Copymap_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Copymap_Protocol>(
    _emS2C_Copymap_Protocol_descriptor(), name, value);
}
enum _emS2C_TopList_Protocol {
  S2C_TopList_List_Ack = 0,
  S2C_TopList_Player_Ack = 1
};
bool _emS2C_TopList_Protocol_IsValid(int value);
const _emS2C_TopList_Protocol _emS2C_TopList_Protocol_MIN = S2C_TopList_List_Ack;
const _emS2C_TopList_Protocol _emS2C_TopList_Protocol_MAX = S2C_TopList_Player_Ack;
const int _emS2C_TopList_Protocol_ARRAYSIZE = _emS2C_TopList_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_TopList_Protocol_descriptor();
inline const ::std::string& _emS2C_TopList_Protocol_Name(_emS2C_TopList_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_TopList_Protocol_descriptor(), value);
}
inline bool _emS2C_TopList_Protocol_Parse(
    const ::std::string& name, _emS2C_TopList_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_TopList_Protocol>(
    _emS2C_TopList_Protocol_descriptor(), name, value);
}
enum _emS2C_Friend_Protocol {
  S2C_Friend_Add_Ack = 0,
  S2C_Friend_Del_Ack = 1,
  S2C_Friend_Answer_Ack = 2,
  S2C_Friend_Find_Ack = 3,
  S2C_Friend_AddAskTrasfer = 4,
  S2C_Friend_Add = 5,
  S2C_Friend_Del = 6,
  S2C_Friend_Update = 7
};
bool _emS2C_Friend_Protocol_IsValid(int value);
const _emS2C_Friend_Protocol _emS2C_Friend_Protocol_MIN = S2C_Friend_Add_Ack;
const _emS2C_Friend_Protocol _emS2C_Friend_Protocol_MAX = S2C_Friend_Update;
const int _emS2C_Friend_Protocol_ARRAYSIZE = _emS2C_Friend_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Friend_Protocol_descriptor();
inline const ::std::string& _emS2C_Friend_Protocol_Name(_emS2C_Friend_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Friend_Protocol_descriptor(), value);
}
inline bool _emS2C_Friend_Protocol_Parse(
    const ::std::string& name, _emS2C_Friend_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Friend_Protocol>(
    _emS2C_Friend_Protocol_descriptor(), name, value);
}
enum _emS2C_Wulue_Protocol {
  S2C_Wulue_SetScheme_Ack = 0,
  S2C_Wulue_UpZhanlue_Ack = 1,
  S2C_Wulue_SetBingfu_Ack = 2
};
bool _emS2C_Wulue_Protocol_IsValid(int value);
const _emS2C_Wulue_Protocol _emS2C_Wulue_Protocol_MIN = S2C_Wulue_SetScheme_Ack;
const _emS2C_Wulue_Protocol _emS2C_Wulue_Protocol_MAX = S2C_Wulue_SetBingfu_Ack;
const int _emS2C_Wulue_Protocol_ARRAYSIZE = _emS2C_Wulue_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Wulue_Protocol_descriptor();
inline const ::std::string& _emS2C_Wulue_Protocol_Name(_emS2C_Wulue_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Wulue_Protocol_descriptor(), value);
}
inline bool _emS2C_Wulue_Protocol_Parse(
    const ::std::string& name, _emS2C_Wulue_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Wulue_Protocol>(
    _emS2C_Wulue_Protocol_descriptor(), name, value);
}
enum _emS2C_Wentao_Protocol {
  S2C_Wetao_SetScheme_Ack = 0,
  S2C_Wetao_QianXiu_Ack = 1,
  S2C_Wetao_TuPo_Ack = 2,
  S2C_Wetao_Upgrate_Ack = 3,
  S2C_Wetao_SetBingfu_Ack = 4,
  S2C_Wetao_Reset_Ack = 5,
  S2C_Wetao_ActiveScheme_Ack = 6,
  S2C_Wetao_ActiveBingFa_Ack = 7,
  S2C_Wetao_Scheme_Update = 8,
  S2C_Wetao_YaoDian_Update = 9,
  S2C_Wetao_QianXiu_Update = 10,
  S2C_Wetao_TuPo_Update = 11,
  S2C_Wetao_Reset = 12,
  S2C_Wetao_ActiveBingFa = 13,
  S2C_Wetao_ActiveScheme = 14,
  S2C_Wetao_Wisdom_Update = 15
};
bool _emS2C_Wentao_Protocol_IsValid(int value);
const _emS2C_Wentao_Protocol _emS2C_Wentao_Protocol_MIN = S2C_Wetao_SetScheme_Ack;
const _emS2C_Wentao_Protocol _emS2C_Wentao_Protocol_MAX = S2C_Wetao_Wisdom_Update;
const int _emS2C_Wentao_Protocol_ARRAYSIZE = _emS2C_Wentao_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Wentao_Protocol_descriptor();
inline const ::std::string& _emS2C_Wentao_Protocol_Name(_emS2C_Wentao_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Wentao_Protocol_descriptor(), value);
}
inline bool _emS2C_Wentao_Protocol_Parse(
    const ::std::string& name, _emS2C_Wentao_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Wentao_Protocol>(
    _emS2C_Wentao_Protocol_descriptor(), name, value);
}
enum _emS2C_DropItem_Protocol {
  S2C_DropItem_Info_Ack = 0,
  S2C_DropItem_Dice_Ack = 1,
  S2C_DropItem_Assign_Ack = 2,
  S2C_DropItem_PickAll_Ack = 3,
  S2C_DropItem_Pickup_Ack = 4,
  S2C_DropItem_Abadon_Ack = 5,
  S2C_DropItem_Info = 6,
  S2C_DropItem_ChangeAllot = 7,
  S2C_DropItem_Dice = 8,
  S2C_DropItem_Assign = 9
};
bool _emS2C_DropItem_Protocol_IsValid(int value);
const _emS2C_DropItem_Protocol _emS2C_DropItem_Protocol_MIN = S2C_DropItem_Info_Ack;
const _emS2C_DropItem_Protocol _emS2C_DropItem_Protocol_MAX = S2C_DropItem_Assign;
const int _emS2C_DropItem_Protocol_ARRAYSIZE = _emS2C_DropItem_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_DropItem_Protocol_descriptor();
inline const ::std::string& _emS2C_DropItem_Protocol_Name(_emS2C_DropItem_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_DropItem_Protocol_descriptor(), value);
}
inline bool _emS2C_DropItem_Protocol_Parse(
    const ::std::string& name, _emS2C_DropItem_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_DropItem_Protocol>(
    _emS2C_DropItem_Protocol_descriptor(), name, value);
}
enum _emS2C_Broadcast_Protocol {
  S2C_Broadcast_CopymapInvite = 0,
  S2C_Broadcast_CreateFaction = 1,
  S2C_BroadCast_TreasurePrize = 2,
  S2C_BroadCast_TreasurePrize_RefreshBoss = 3,
  S2C_BroadCast_GreatWallTrain = 4,
  S2C_BroadCast_WorldBoss = 5
};
bool _emS2C_Broadcast_Protocol_IsValid(int value);
const _emS2C_Broadcast_Protocol _emS2C_Broadcast_Protocol_MIN = S2C_Broadcast_CopymapInvite;
const _emS2C_Broadcast_Protocol _emS2C_Broadcast_Protocol_MAX = S2C_BroadCast_WorldBoss;
const int _emS2C_Broadcast_Protocol_ARRAYSIZE = _emS2C_Broadcast_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Broadcast_Protocol_descriptor();
inline const ::std::string& _emS2C_Broadcast_Protocol_Name(_emS2C_Broadcast_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Broadcast_Protocol_descriptor(), value);
}
inline bool _emS2C_Broadcast_Protocol_Parse(
    const ::std::string& name, _emS2C_Broadcast_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Broadcast_Protocol>(
    _emS2C_Broadcast_Protocol_descriptor(), name, value);
}
enum _emS2C_Identity_Protocol {
  S2C_Identity_Open_Ack = 0,
  S2C_Identity_Learn_Ack = 1,
  S2C_Identity_Reset_Ack = 2,
  S2C_Identity_UpSkill_Ack = 3
};
bool _emS2C_Identity_Protocol_IsValid(int value);
const _emS2C_Identity_Protocol _emS2C_Identity_Protocol_MIN = S2C_Identity_Open_Ack;
const _emS2C_Identity_Protocol _emS2C_Identity_Protocol_MAX = S2C_Identity_UpSkill_Ack;
const int _emS2C_Identity_Protocol_ARRAYSIZE = _emS2C_Identity_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Identity_Protocol_descriptor();
inline const ::std::string& _emS2C_Identity_Protocol_Name(_emS2C_Identity_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Identity_Protocol_descriptor(), value);
}
inline bool _emS2C_Identity_Protocol_Parse(
    const ::std::string& name, _emS2C_Identity_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Identity_Protocol>(
    _emS2C_Identity_Protocol_descriptor(), name, value);
}
enum _emS2C_Wuxue_Protocol {
  S2C_Wuxue_NewScheme_Ack = 0,
  S2C_Wuxue_DelScheme_Ack = 1,
  S2C_Wuxue_ChangeScheme_Ack = 2,
  S2C_Wuxue_SetSkill_Ack = 3,
  S2C_Wuxue_SetAllSkill_Ack = 4,
  S2C_Wuxue_LearnSkill_Ack = 5
};
bool _emS2C_Wuxue_Protocol_IsValid(int value);
const _emS2C_Wuxue_Protocol _emS2C_Wuxue_Protocol_MIN = S2C_Wuxue_NewScheme_Ack;
const _emS2C_Wuxue_Protocol _emS2C_Wuxue_Protocol_MAX = S2C_Wuxue_LearnSkill_Ack;
const int _emS2C_Wuxue_Protocol_ARRAYSIZE = _emS2C_Wuxue_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Wuxue_Protocol_descriptor();
inline const ::std::string& _emS2C_Wuxue_Protocol_Name(_emS2C_Wuxue_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Wuxue_Protocol_descriptor(), value);
}
inline bool _emS2C_Wuxue_Protocol_Parse(
    const ::std::string& name, _emS2C_Wuxue_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Wuxue_Protocol>(
    _emS2C_Wuxue_Protocol_descriptor(), name, value);
}
enum _emS2C_Dart_Protocol {
  S2C_Dart_Check_Ack = 0,
  S2C_Dart_Start_Ack = 1,
  S2C_Dart_Info_Ntf = 2,
  S2C_Dart_Check_Pause_Ntf = 3,
  S2C_Dart_Check_Get_Buff_Ack = 4,
  S2C_Dart_Start_Move_Ntf = 5,
  S2C_Dart_Start_Rob_Ntf = 6,
  S2C_Dart_Finish_And_Prize_Ntf = 7,
  S2C_Dart_Finish_Rob_Ntf = 8,
  S2C_Dart_AddSupply_Ntf = 9,
  S2C_Dart_AddSupply_Ack = 10,
  S2C_Dart_Quit_Ack = 11,
  S2C_Dart_Check_Confirm_Ack = 12,
  S2C_Dart_AddSupply_Confirm_Ack = 13,
  S2C_Dart_Back_2_Npc_Ack = 14,
  S2C_Dart_Change_DartLeader_Ntf = 15
};
bool _emS2C_Dart_Protocol_IsValid(int value);
const _emS2C_Dart_Protocol _emS2C_Dart_Protocol_MIN = S2C_Dart_Check_Ack;
const _emS2C_Dart_Protocol _emS2C_Dart_Protocol_MAX = S2C_Dart_Change_DartLeader_Ntf;
const int _emS2C_Dart_Protocol_ARRAYSIZE = _emS2C_Dart_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Dart_Protocol_descriptor();
inline const ::std::string& _emS2C_Dart_Protocol_Name(_emS2C_Dart_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Dart_Protocol_descriptor(), value);
}
inline bool _emS2C_Dart_Protocol_Parse(
    const ::std::string& name, _emS2C_Dart_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Dart_Protocol>(
    _emS2C_Dart_Protocol_descriptor(), name, value);
}
enum _emS2C_FactionBoss_Protocol {
  S2C_FactionBoss_PersonalTop_Ack = 0,
  S2C_FactionBoss_FactionTop_Ack = 1,
  S2C_FactionBoss_UnionTop_Ack = 2,
  S2C_FactionBoss_SelfInfo = 3
};
bool _emS2C_FactionBoss_Protocol_IsValid(int value);
const _emS2C_FactionBoss_Protocol _emS2C_FactionBoss_Protocol_MIN = S2C_FactionBoss_PersonalTop_Ack;
const _emS2C_FactionBoss_Protocol _emS2C_FactionBoss_Protocol_MAX = S2C_FactionBoss_SelfInfo;
const int _emS2C_FactionBoss_Protocol_ARRAYSIZE = _emS2C_FactionBoss_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_FactionBoss_Protocol_descriptor();
inline const ::std::string& _emS2C_FactionBoss_Protocol_Name(_emS2C_FactionBoss_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_FactionBoss_Protocol_descriptor(), value);
}
inline bool _emS2C_FactionBoss_Protocol_Parse(
    const ::std::string& name, _emS2C_FactionBoss_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_FactionBoss_Protocol>(
    _emS2C_FactionBoss_Protocol_descriptor(), name, value);
}
enum _emS2C_ClimbTower_Protocol {
  S2C_ClimbTower_Get_Info_Ack = 0,
  S2C_ClimbTower_Info_Ntf = 1,
  S2C_ClimbTower_ShowPrize_Ntf = 2,
  S2C_ClimbTower_ChoosePrize_Ack = 3,
  S2C_ClimbTower_Clear_Ack = 4,
  S2C_ClimbTower_Show_Clear_Ntf = 5
};
bool _emS2C_ClimbTower_Protocol_IsValid(int value);
const _emS2C_ClimbTower_Protocol _emS2C_ClimbTower_Protocol_MIN = S2C_ClimbTower_Get_Info_Ack;
const _emS2C_ClimbTower_Protocol _emS2C_ClimbTower_Protocol_MAX = S2C_ClimbTower_Show_Clear_Ntf;
const int _emS2C_ClimbTower_Protocol_ARRAYSIZE = _emS2C_ClimbTower_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_ClimbTower_Protocol_descriptor();
inline const ::std::string& _emS2C_ClimbTower_Protocol_Name(_emS2C_ClimbTower_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_ClimbTower_Protocol_descriptor(), value);
}
inline bool _emS2C_ClimbTower_Protocol_Parse(
    const ::std::string& name, _emS2C_ClimbTower_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_ClimbTower_Protocol>(
    _emS2C_ClimbTower_Protocol_descriptor(), name, value);
}
enum _emS2C_AnswerQuestion_Protocol {
  S2C_AnswerQuestion_QuestionInfo = 0,
  S2C_AnswerQuestion_QuestionResult = 1
};
bool _emS2C_AnswerQuestion_Protocol_IsValid(int value);
const _emS2C_AnswerQuestion_Protocol _emS2C_AnswerQuestion_Protocol_MIN = S2C_AnswerQuestion_QuestionInfo;
const _emS2C_AnswerQuestion_Protocol _emS2C_AnswerQuestion_Protocol_MAX = S2C_AnswerQuestion_QuestionResult;
const int _emS2C_AnswerQuestion_Protocol_ARRAYSIZE = _emS2C_AnswerQuestion_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_AnswerQuestion_Protocol_descriptor();
inline const ::std::string& _emS2C_AnswerQuestion_Protocol_Name(_emS2C_AnswerQuestion_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_AnswerQuestion_Protocol_descriptor(), value);
}
inline bool _emS2C_AnswerQuestion_Protocol_Parse(
    const ::std::string& name, _emS2C_AnswerQuestion_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_AnswerQuestion_Protocol>(
    _emS2C_AnswerQuestion_Protocol_descriptor(), name, value);
}
enum _emS2C_GreatwallTrain_Protocol {
  S2C_GreatwallTrain_Info_Ack = 1
};
bool _emS2C_GreatwallTrain_Protocol_IsValid(int value);
const _emS2C_GreatwallTrain_Protocol _emS2C_GreatwallTrain_Protocol_MIN = S2C_GreatwallTrain_Info_Ack;
const _emS2C_GreatwallTrain_Protocol _emS2C_GreatwallTrain_Protocol_MAX = S2C_GreatwallTrain_Info_Ack;
const int _emS2C_GreatwallTrain_Protocol_ARRAYSIZE = _emS2C_GreatwallTrain_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_GreatwallTrain_Protocol_descriptor();
inline const ::std::string& _emS2C_GreatwallTrain_Protocol_Name(_emS2C_GreatwallTrain_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_GreatwallTrain_Protocol_descriptor(), value);
}
inline bool _emS2C_GreatwallTrain_Protocol_Parse(
    const ::std::string& name, _emS2C_GreatwallTrain_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_GreatwallTrain_Protocol>(
    _emS2C_GreatwallTrain_Protocol_descriptor(), name, value);
}
enum _emS2C_WorldBoss_Protocol {
  S2C_WorldBoss_GetInfo_Ack = 1,
  S2C_WorldBoss_Update_BossHurtRank_Ack = 2,
  S2C_WorldBoss_Update_BossHurtRank_Ntf = 3,
  S2C_WorldBoss_Goto_Boss_Ack = 4
};
bool _emS2C_WorldBoss_Protocol_IsValid(int value);
const _emS2C_WorldBoss_Protocol _emS2C_WorldBoss_Protocol_MIN = S2C_WorldBoss_GetInfo_Ack;
const _emS2C_WorldBoss_Protocol _emS2C_WorldBoss_Protocol_MAX = S2C_WorldBoss_Goto_Boss_Ack;
const int _emS2C_WorldBoss_Protocol_ARRAYSIZE = _emS2C_WorldBoss_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_WorldBoss_Protocol_descriptor();
inline const ::std::string& _emS2C_WorldBoss_Protocol_Name(_emS2C_WorldBoss_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_WorldBoss_Protocol_descriptor(), value);
}
inline bool _emS2C_WorldBoss_Protocol_Parse(
    const ::std::string& name, _emS2C_WorldBoss_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_WorldBoss_Protocol>(
    _emS2C_WorldBoss_Protocol_descriptor(), name, value);
}
enum _emS2C_Activity_Protocol {
  S2C_Activity_GetReward_Ack = 1,
  S2C_Activity_AddLiveness_Ack = 2
};
bool _emS2C_Activity_Protocol_IsValid(int value);
const _emS2C_Activity_Protocol _emS2C_Activity_Protocol_MIN = S2C_Activity_GetReward_Ack;
const _emS2C_Activity_Protocol _emS2C_Activity_Protocol_MAX = S2C_Activity_AddLiveness_Ack;
const int _emS2C_Activity_Protocol_ARRAYSIZE = _emS2C_Activity_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Activity_Protocol_descriptor();
inline const ::std::string& _emS2C_Activity_Protocol_Name(_emS2C_Activity_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Activity_Protocol_descriptor(), value);
}
inline bool _emS2C_Activity_Protocol_Parse(
    const ::std::string& name, _emS2C_Activity_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Activity_Protocol>(
    _emS2C_Activity_Protocol_descriptor(), name, value);
}
enum _emS2C_Relive_Protocol {
  S2C_Relive_Born_Ack = 1
};
bool _emS2C_Relive_Protocol_IsValid(int value);
const _emS2C_Relive_Protocol _emS2C_Relive_Protocol_MIN = S2C_Relive_Born_Ack;
const _emS2C_Relive_Protocol _emS2C_Relive_Protocol_MAX = S2C_Relive_Born_Ack;
const int _emS2C_Relive_Protocol_ARRAYSIZE = _emS2C_Relive_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Relive_Protocol_descriptor();
inline const ::std::string& _emS2C_Relive_Protocol_Name(_emS2C_Relive_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Relive_Protocol_descriptor(), value);
}
inline bool _emS2C_Relive_Protocol_Parse(
    const ::std::string& name, _emS2C_Relive_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Relive_Protocol>(
    _emS2C_Relive_Protocol_descriptor(), name, value);
}
enum _emS2C_Manor_Protocol {
  S2C_Manor_Get_All_Info_Ack = 0,
  S2C_Manor_Get_Fight_Info_Ack = 1,
  S2C_Manor_Apply_Fight_Ack = 2,
  S2C_Manor_Enter_Lobby_Ack = 3,
  S2C_Manor_Start_Fight_Ntf = 4,
  S2C_Manor_MVPVote_Ntf = 5,
  S2C_Manor_Result_Ntf = 6,
  S2C_Manor_MVPVote_Ack = 7
};
bool _emS2C_Manor_Protocol_IsValid(int value);
const _emS2C_Manor_Protocol _emS2C_Manor_Protocol_MIN = S2C_Manor_Get_All_Info_Ack;
const _emS2C_Manor_Protocol _emS2C_Manor_Protocol_MAX = S2C_Manor_MVPVote_Ack;
const int _emS2C_Manor_Protocol_ARRAYSIZE = _emS2C_Manor_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emS2C_Manor_Protocol_descriptor();
inline const ::std::string& _emS2C_Manor_Protocol_Name(_emS2C_Manor_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emS2C_Manor_Protocol_descriptor(), value);
}
inline bool _emS2C_Manor_Protocol_Parse(
    const ::std::string& name, _emS2C_Manor_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emS2C_Manor_Protocol>(
    _emS2C_Manor_Protocol_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPC2S_Protocol>() {
  return _emPC2S_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_SinglePvp_Protocol>() {
  return _emC2S_SinglePvp_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_SinglePvp_Protocol>() {
  return _emS2C_SinglePvp_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Weal_Protocol>() {
  return _emC2S_Weal_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Weal_Protocol>() {
  return _emS2C_Weal_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Corps_Protocol>() {
  return _emC2S_Corps_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Corps_Protocol>() {
  return _emS2C_Corps_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_PvpWar_Protocol>() {
  return _emC2S_PvpWar_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_PvpWar_Protocol>() {
  return _emS2C_PvpWar_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_EquipColumn_Protocol>() {
  return _emC2S_EquipColumn_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Fashion_Protocol>() {
  return _emC2S_Fashion_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Title_Protocol>() {
  return _emC2S_Title_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Trade_Protocol>() {
  return _emC2S_Trade_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_SaleMoney_Protocol>() {
  return _emC2S_SaleMoney_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Auction_Protocol>() {
  return _emC2S_Auction_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Copymap_Protocol>() {
  return _emC2S_Copymap_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Faction_Protocol>() {
  return _emC2S_Faction_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Faction_Protocol>() {
  return _emS2C_Faction_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Mail_Protocol>() {
  return _emC2S_Mail_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Player_Protocol>() {
  return _emC2S_Player_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Common_Protocol>() {
  return _emC2S_Common_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Skill_Protocol>() {
  return _emC2S_Skill_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Buff_Protocol>() {
  return _emC2S_Buff_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Team_Protocol>() {
  return _emC2S_Team_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Item_Protocol>() {
  return _emC2S_Item_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Quest_Protocol>() {
  return _emC2S_Quest_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Store_Protocol>() {
  return _emC2S_Store_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Prize_Protocol>() {
  return _emC2S_Prize_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_TopList_Protocol>() {
  return _emC2S_TopList_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Friend_Protocol>() {
  return _emC2S_Friend_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Bingfu_Protocol>() {
  return _emC2S_Bingfu_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Wulue_Protocol>() {
  return _emC2S_Wulue_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Wentao_Protocol>() {
  return _emC2S_Wentao_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_DropItem_Protocol>() {
  return _emC2S_DropItem_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Identity_Protocol>() {
  return _emC2S_Identity_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Wuxue_Protocol>() {
  return _emC2S_Wuxue_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Dart_Protocol>() {
  return _emC2S_Dart_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_FactionBoss_Protocol>() {
  return _emC2S_FactionBoss_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_ClimbTower_Protocol>() {
  return _emC2S_ClimbTower_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_AnswerQuestion_Protocol>() {
  return _emC2S_AnswerQuestion_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_WorldBoss_Protocol>() {
  return _emC2S_WorldBoss_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Activity_Protocol>() {
  return _emC2S_Activity_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Relive_Protocol>() {
  return _emC2S_Relive_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emC2S_Manor_Protocol>() {
  return _emC2S_Manor_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPS2C_Protocol>() {
  return _emPS2C_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_EquipColumn_Protocol>() {
  return _emS2C_EquipColumn_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Fashion_Protocol>() {
  return _emS2C_Fashion_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Title_Protocol>() {
  return _emS2C_Title_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Trade_Protocol>() {
  return _emS2C_Trade_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_SaleMoney_Protocol>() {
  return _emS2C_SaleMoney_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Auction_Protocol>() {
  return _emS2C_Auction_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Mail_Protocol>() {
  return _emS2C_Mail_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Player_Protocol>() {
  return _emS2C_Player_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Common_Protocol>() {
  return _emS2C_Common_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Skill_Protocol>() {
  return _emS2C_Skill_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Buff_Protocol>() {
  return _emS2C_Buff_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Counter_Protocol>() {
  return _emS2C_Counter_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Team_Protocol>() {
  return _emS2C_Team_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Item_Protocol>() {
  return _emS2C_Item_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Quest_Protocol>() {
  return _emS2C_Quest_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Store_Protocol>() {
  return _emS2C_Store_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Prize_Protocol>() {
  return _emS2C_Prize_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Copymap_Protocol>() {
  return _emS2C_Copymap_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_TopList_Protocol>() {
  return _emS2C_TopList_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Friend_Protocol>() {
  return _emS2C_Friend_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Wulue_Protocol>() {
  return _emS2C_Wulue_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Wentao_Protocol>() {
  return _emS2C_Wentao_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_DropItem_Protocol>() {
  return _emS2C_DropItem_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Broadcast_Protocol>() {
  return _emS2C_Broadcast_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Identity_Protocol>() {
  return _emS2C_Identity_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Wuxue_Protocol>() {
  return _emS2C_Wuxue_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Dart_Protocol>() {
  return _emS2C_Dart_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_FactionBoss_Protocol>() {
  return _emS2C_FactionBoss_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_ClimbTower_Protocol>() {
  return _emS2C_ClimbTower_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_AnswerQuestion_Protocol>() {
  return _emS2C_AnswerQuestion_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_GreatwallTrain_Protocol>() {
  return _emS2C_GreatwallTrain_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_WorldBoss_Protocol>() {
  return _emS2C_WorldBoss_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Activity_Protocol>() {
  return _emS2C_Activity_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Relive_Protocol>() {
  return _emS2C_Relive_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emS2C_Manor_Protocol>() {
  return _emS2C_Manor_Protocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CASProtocol_2eproto__INCLUDED
