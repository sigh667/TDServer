// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WARMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBW2RRegisterPlayerAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBW2RRegisterPlayerAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBR2WRegisterPlayerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBR2WRegisterPlayerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB2WRegisterCheckPlayerNameAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB2WRegisterCheckPlayerNameAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB2WRegisterCheckPlayerNameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB2WRegisterCheckPlayerNameAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WARMsg_2eproto() {
  protobuf_AddDesc_WARMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WARMsg.proto");
  GOOGLE_CHECK(file != NULL);
  PBW2RRegisterPlayerAsk_descriptor_ = file->message_type(0);
  static const int PBW2RRegisterPlayerAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2RRegisterPlayerAsk, playerdisplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2RRegisterPlayerAsk, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2RRegisterPlayerAsk, worldid_),
  };
  PBW2RRegisterPlayerAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBW2RRegisterPlayerAsk_descriptor_,
      PBW2RRegisterPlayerAsk::default_instance_,
      PBW2RRegisterPlayerAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2RRegisterPlayerAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBW2RRegisterPlayerAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBW2RRegisterPlayerAsk));
  PBR2WRegisterPlayerAck_descriptor_ = file->message_type(1);
  static const int PBR2WRegisterPlayerAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBR2WRegisterPlayerAck, playerdisplay_),
  };
  PBR2WRegisterPlayerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBR2WRegisterPlayerAck_descriptor_,
      PBR2WRegisterPlayerAck::default_instance_,
      PBR2WRegisterPlayerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBR2WRegisterPlayerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBR2WRegisterPlayerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBR2WRegisterPlayerAck));
  PB2WRegisterCheckPlayerNameAsk_descriptor_ = file->message_type(2);
  static const int PB2WRegisterCheckPlayerNameAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB2WRegisterCheckPlayerNameAsk, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB2WRegisterCheckPlayerNameAsk, worldid_),
  };
  PB2WRegisterCheckPlayerNameAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB2WRegisterCheckPlayerNameAsk_descriptor_,
      PB2WRegisterCheckPlayerNameAsk::default_instance_,
      PB2WRegisterCheckPlayerNameAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB2WRegisterCheckPlayerNameAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB2WRegisterCheckPlayerNameAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB2WRegisterCheckPlayerNameAsk));
  PB2WRegisterCheckPlayerNameAck_descriptor_ = file->message_type(3);
  static const int PB2WRegisterCheckPlayerNameAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB2WRegisterCheckPlayerNameAck, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB2WRegisterCheckPlayerNameAck, name_),
  };
  PB2WRegisterCheckPlayerNameAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB2WRegisterCheckPlayerNameAck_descriptor_,
      PB2WRegisterCheckPlayerNameAck::default_instance_,
      PB2WRegisterCheckPlayerNameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB2WRegisterCheckPlayerNameAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB2WRegisterCheckPlayerNameAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB2WRegisterCheckPlayerNameAck));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WARMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBW2RRegisterPlayerAsk_descriptor_, &PBW2RRegisterPlayerAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBR2WRegisterPlayerAck_descriptor_, &PBR2WRegisterPlayerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB2WRegisterCheckPlayerNameAsk_descriptor_, &PB2WRegisterCheckPlayerNameAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB2WRegisterCheckPlayerNameAck_descriptor_, &PB2WRegisterCheckPlayerNameAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WARMsg_2eproto() {
  delete PBW2RRegisterPlayerAsk::default_instance_;
  delete PBW2RRegisterPlayerAsk_reflection_;
  delete PBR2WRegisterPlayerAck::default_instance_;
  delete PBR2WRegisterPlayerAck_reflection_;
  delete PB2WRegisterCheckPlayerNameAsk::default_instance_;
  delete PB2WRegisterCheckPlayerNameAsk_reflection_;
  delete PB2WRegisterCheckPlayerNameAck::default_instance_;
  delete PB2WRegisterCheckPlayerNameAck_reflection_;
}

void protobuf_AddDesc_WARMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PlayerStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014WARMsg.proto\032\022PlayerStruct.proto\"e\n\026PB"
    "W2RRegisterPlayerAsk\022\'\n\rplayerdisplay\030\001 "
    "\001(\0132\020.PBPlayerDisplay\022\021\n\taccountid\030\002 \001(\r"
    "\022\017\n\007worldid\030\003 \003(\r\"A\n\026PBR2WRegisterPlayer"
    "Ack\022\'\n\rplayerdisplay\030\001 \001(\0132\020.PBPlayerDis"
    "play\"\?\n\036PB2WRegisterCheckPlayerNameAsk\022\014"
    "\n\004name\030\001 \001(\t\022\017\n\007worldid\030\002 \003(\r\";\n\036PB2WReg"
    "isterCheckPlayerNameAck\022\013\n\003ret\030\001 \001(\005\022\014\n\004"
    "name\030\002 \001(\t", 330);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WARMsg.proto", &protobuf_RegisterTypes);
  PBW2RRegisterPlayerAsk::default_instance_ = new PBW2RRegisterPlayerAsk();
  PBR2WRegisterPlayerAck::default_instance_ = new PBR2WRegisterPlayerAck();
  PB2WRegisterCheckPlayerNameAsk::default_instance_ = new PB2WRegisterCheckPlayerNameAsk();
  PB2WRegisterCheckPlayerNameAck::default_instance_ = new PB2WRegisterCheckPlayerNameAck();
  PBW2RRegisterPlayerAsk::default_instance_->InitAsDefaultInstance();
  PBR2WRegisterPlayerAck::default_instance_->InitAsDefaultInstance();
  PB2WRegisterCheckPlayerNameAsk::default_instance_->InitAsDefaultInstance();
  PB2WRegisterCheckPlayerNameAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WARMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WARMsg_2eproto {
  StaticDescriptorInitializer_WARMsg_2eproto() {
    protobuf_AddDesc_WARMsg_2eproto();
  }
} static_descriptor_initializer_WARMsg_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBW2RRegisterPlayerAsk::kPlayerdisplayFieldNumber;
const int PBW2RRegisterPlayerAsk::kAccountidFieldNumber;
const int PBW2RRegisterPlayerAsk::kWorldidFieldNumber;
#endif  // !_MSC_VER

PBW2RRegisterPlayerAsk::PBW2RRegisterPlayerAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBW2RRegisterPlayerAsk::InitAsDefaultInstance() {
  playerdisplay_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBW2RRegisterPlayerAsk::PBW2RRegisterPlayerAsk(const PBW2RRegisterPlayerAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBW2RRegisterPlayerAsk::SharedCtor() {
  _cached_size_ = 0;
  playerdisplay_ = NULL;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBW2RRegisterPlayerAsk::~PBW2RRegisterPlayerAsk() {
  SharedDtor();
}

void PBW2RRegisterPlayerAsk::SharedDtor() {
  if (this != default_instance_) {
    delete playerdisplay_;
  }
}

void PBW2RRegisterPlayerAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBW2RRegisterPlayerAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBW2RRegisterPlayerAsk_descriptor_;
}

const PBW2RRegisterPlayerAsk& PBW2RRegisterPlayerAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WARMsg_2eproto();  return *default_instance_;
}

PBW2RRegisterPlayerAsk* PBW2RRegisterPlayerAsk::default_instance_ = NULL;

PBW2RRegisterPlayerAsk* PBW2RRegisterPlayerAsk::New() const {
  return new PBW2RRegisterPlayerAsk;
}

void PBW2RRegisterPlayerAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerdisplay()) {
      if (playerdisplay_ != NULL) playerdisplay_->::PBPlayerDisplay::Clear();
    }
    accountid_ = 0u;
  }
  worldid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBW2RRegisterPlayerAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay playerdisplay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdisplay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }
      
      // optional uint32 accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_worldid;
        break;
      }
      
      // repeated uint32 worldid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_worldid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_worldid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_worldid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBW2RRegisterPlayerAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay playerdisplay = 1;
  if (has_playerdisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerdisplay(), output);
  }
  
  // optional uint32 accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }
  
  // repeated uint32 worldid = 3;
  for (int i = 0; i < this->worldid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->worldid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBW2RRegisterPlayerAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay playerdisplay = 1;
  if (has_playerdisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerdisplay(), target);
  }
  
  // optional uint32 accountid = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // repeated uint32 worldid = 3;
  for (int i = 0; i < this->worldid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->worldid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBW2RRegisterPlayerAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay playerdisplay = 1;
    if (has_playerdisplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdisplay());
    }
    
    // optional uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
  }
  // repeated uint32 worldid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->worldid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->worldid(i));
    }
    total_size += 1 * this->worldid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBW2RRegisterPlayerAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBW2RRegisterPlayerAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBW2RRegisterPlayerAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBW2RRegisterPlayerAsk::MergeFrom(const PBW2RRegisterPlayerAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldid_.MergeFrom(from.worldid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerdisplay()) {
      mutable_playerdisplay()->::PBPlayerDisplay::MergeFrom(from.playerdisplay());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBW2RRegisterPlayerAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBW2RRegisterPlayerAsk::CopyFrom(const PBW2RRegisterPlayerAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBW2RRegisterPlayerAsk::IsInitialized() const {
  
  return true;
}

void PBW2RRegisterPlayerAsk::Swap(PBW2RRegisterPlayerAsk* other) {
  if (other != this) {
    std::swap(playerdisplay_, other->playerdisplay_);
    std::swap(accountid_, other->accountid_);
    worldid_.Swap(&other->worldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBW2RRegisterPlayerAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBW2RRegisterPlayerAsk_descriptor_;
  metadata.reflection = PBW2RRegisterPlayerAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBR2WRegisterPlayerAck::kPlayerdisplayFieldNumber;
#endif  // !_MSC_VER

PBR2WRegisterPlayerAck::PBR2WRegisterPlayerAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBR2WRegisterPlayerAck::InitAsDefaultInstance() {
  playerdisplay_ = const_cast< ::PBPlayerDisplay*>(&::PBPlayerDisplay::default_instance());
}

PBR2WRegisterPlayerAck::PBR2WRegisterPlayerAck(const PBR2WRegisterPlayerAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBR2WRegisterPlayerAck::SharedCtor() {
  _cached_size_ = 0;
  playerdisplay_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBR2WRegisterPlayerAck::~PBR2WRegisterPlayerAck() {
  SharedDtor();
}

void PBR2WRegisterPlayerAck::SharedDtor() {
  if (this != default_instance_) {
    delete playerdisplay_;
  }
}

void PBR2WRegisterPlayerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBR2WRegisterPlayerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBR2WRegisterPlayerAck_descriptor_;
}

const PBR2WRegisterPlayerAck& PBR2WRegisterPlayerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WARMsg_2eproto();  return *default_instance_;
}

PBR2WRegisterPlayerAck* PBR2WRegisterPlayerAck::default_instance_ = NULL;

PBR2WRegisterPlayerAck* PBR2WRegisterPlayerAck::New() const {
  return new PBR2WRegisterPlayerAck;
}

void PBR2WRegisterPlayerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerdisplay()) {
      if (playerdisplay_ != NULL) playerdisplay_->::PBPlayerDisplay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBR2WRegisterPlayerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBPlayerDisplay playerdisplay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdisplay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBR2WRegisterPlayerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBPlayerDisplay playerdisplay = 1;
  if (has_playerdisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerdisplay(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBR2WRegisterPlayerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBPlayerDisplay playerdisplay = 1;
  if (has_playerdisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerdisplay(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBR2WRegisterPlayerAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBPlayerDisplay playerdisplay = 1;
    if (has_playerdisplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdisplay());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBR2WRegisterPlayerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBR2WRegisterPlayerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBR2WRegisterPlayerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBR2WRegisterPlayerAck::MergeFrom(const PBR2WRegisterPlayerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerdisplay()) {
      mutable_playerdisplay()->::PBPlayerDisplay::MergeFrom(from.playerdisplay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBR2WRegisterPlayerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBR2WRegisterPlayerAck::CopyFrom(const PBR2WRegisterPlayerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBR2WRegisterPlayerAck::IsInitialized() const {
  
  return true;
}

void PBR2WRegisterPlayerAck::Swap(PBR2WRegisterPlayerAck* other) {
  if (other != this) {
    std::swap(playerdisplay_, other->playerdisplay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBR2WRegisterPlayerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBR2WRegisterPlayerAck_descriptor_;
  metadata.reflection = PBR2WRegisterPlayerAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB2WRegisterCheckPlayerNameAsk::kNameFieldNumber;
const int PB2WRegisterCheckPlayerNameAsk::kWorldidFieldNumber;
#endif  // !_MSC_VER

PB2WRegisterCheckPlayerNameAsk::PB2WRegisterCheckPlayerNameAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB2WRegisterCheckPlayerNameAsk::InitAsDefaultInstance() {
}

PB2WRegisterCheckPlayerNameAsk::PB2WRegisterCheckPlayerNameAsk(const PB2WRegisterCheckPlayerNameAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB2WRegisterCheckPlayerNameAsk::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB2WRegisterCheckPlayerNameAsk::~PB2WRegisterCheckPlayerNameAsk() {
  SharedDtor();
}

void PB2WRegisterCheckPlayerNameAsk::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PB2WRegisterCheckPlayerNameAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB2WRegisterCheckPlayerNameAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB2WRegisterCheckPlayerNameAsk_descriptor_;
}

const PB2WRegisterCheckPlayerNameAsk& PB2WRegisterCheckPlayerNameAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WARMsg_2eproto();  return *default_instance_;
}

PB2WRegisterCheckPlayerNameAsk* PB2WRegisterCheckPlayerNameAsk::default_instance_ = NULL;

PB2WRegisterCheckPlayerNameAsk* PB2WRegisterCheckPlayerNameAsk::New() const {
  return new PB2WRegisterCheckPlayerNameAsk;
}

void PB2WRegisterCheckPlayerNameAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  worldid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB2WRegisterCheckPlayerNameAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_worldid;
        break;
      }
      
      // repeated uint32 worldid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_worldid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_worldid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_worldid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB2WRegisterCheckPlayerNameAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated uint32 worldid = 2;
  for (int i = 0; i < this->worldid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->worldid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB2WRegisterCheckPlayerNameAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated uint32 worldid = 2;
  for (int i = 0; i < this->worldid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->worldid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB2WRegisterCheckPlayerNameAsk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated uint32 worldid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->worldid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->worldid(i));
    }
    total_size += 1 * this->worldid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB2WRegisterCheckPlayerNameAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB2WRegisterCheckPlayerNameAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB2WRegisterCheckPlayerNameAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB2WRegisterCheckPlayerNameAsk::MergeFrom(const PB2WRegisterCheckPlayerNameAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldid_.MergeFrom(from.worldid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB2WRegisterCheckPlayerNameAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB2WRegisterCheckPlayerNameAsk::CopyFrom(const PB2WRegisterCheckPlayerNameAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB2WRegisterCheckPlayerNameAsk::IsInitialized() const {
  
  return true;
}

void PB2WRegisterCheckPlayerNameAsk::Swap(PB2WRegisterCheckPlayerNameAsk* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    worldid_.Swap(&other->worldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB2WRegisterCheckPlayerNameAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB2WRegisterCheckPlayerNameAsk_descriptor_;
  metadata.reflection = PB2WRegisterCheckPlayerNameAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB2WRegisterCheckPlayerNameAck::kRetFieldNumber;
const int PB2WRegisterCheckPlayerNameAck::kNameFieldNumber;
#endif  // !_MSC_VER

PB2WRegisterCheckPlayerNameAck::PB2WRegisterCheckPlayerNameAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB2WRegisterCheckPlayerNameAck::InitAsDefaultInstance() {
}

PB2WRegisterCheckPlayerNameAck::PB2WRegisterCheckPlayerNameAck(const PB2WRegisterCheckPlayerNameAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB2WRegisterCheckPlayerNameAck::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB2WRegisterCheckPlayerNameAck::~PB2WRegisterCheckPlayerNameAck() {
  SharedDtor();
}

void PB2WRegisterCheckPlayerNameAck::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PB2WRegisterCheckPlayerNameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB2WRegisterCheckPlayerNameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB2WRegisterCheckPlayerNameAck_descriptor_;
}

const PB2WRegisterCheckPlayerNameAck& PB2WRegisterCheckPlayerNameAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WARMsg_2eproto();  return *default_instance_;
}

PB2WRegisterCheckPlayerNameAck* PB2WRegisterCheckPlayerNameAck::default_instance_ = NULL;

PB2WRegisterCheckPlayerNameAck* PB2WRegisterCheckPlayerNameAck::New() const {
  return new PB2WRegisterCheckPlayerNameAck;
}

void PB2WRegisterCheckPlayerNameAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB2WRegisterCheckPlayerNameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB2WRegisterCheckPlayerNameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB2WRegisterCheckPlayerNameAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB2WRegisterCheckPlayerNameAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB2WRegisterCheckPlayerNameAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB2WRegisterCheckPlayerNameAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB2WRegisterCheckPlayerNameAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB2WRegisterCheckPlayerNameAck::MergeFrom(const PB2WRegisterCheckPlayerNameAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB2WRegisterCheckPlayerNameAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB2WRegisterCheckPlayerNameAck::CopyFrom(const PB2WRegisterCheckPlayerNameAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB2WRegisterCheckPlayerNameAck::IsInitialized() const {
  
  return true;
}

void PB2WRegisterCheckPlayerNameAck::Swap(PB2WRegisterCheckPlayerNameAck* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB2WRegisterCheckPlayerNameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB2WRegisterCheckPlayerNameAck_descriptor_;
  metadata.reflection = PB2WRegisterCheckPlayerNameAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
