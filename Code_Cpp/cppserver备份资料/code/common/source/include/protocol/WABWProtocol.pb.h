// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WABWProtocol.proto

#ifndef PROTOBUF_WABWProtocol_2eproto__INCLUDED
#define PROTOBUF_WABWProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WABWProtocol_2eproto();
void protobuf_AssignDesc_WABWProtocol_2eproto();
void protobuf_ShutdownFile_WABWProtocol_2eproto();


enum _emPW2BW_Protocol {
  P_W2BW_Protocol_Register = 0,
  P_W2BW_Protocol_GameConnet = 1,
  P_W2BW_Protocol_PvpWar = 2,
  P_W2BW_Protocol_SinglePvp = 3
};
bool _emPW2BW_Protocol_IsValid(int value);
const _emPW2BW_Protocol _emPW2BW_Protocol_MIN = P_W2BW_Protocol_Register;
const _emPW2BW_Protocol _emPW2BW_Protocol_MAX = P_W2BW_Protocol_SinglePvp;
const int _emPW2BW_Protocol_ARRAYSIZE = _emPW2BW_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPW2BW_Protocol_descriptor();
inline const ::std::string& _emPW2BW_Protocol_Name(_emPW2BW_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPW2BW_Protocol_descriptor(), value);
}
inline bool _emPW2BW_Protocol_Parse(
    const ::std::string& name, _emPW2BW_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPW2BW_Protocol>(
    _emPW2BW_Protocol_descriptor(), name, value);
}
enum _emW2BW_Protocol_PvpWar {
  W2BW_Protocol_PvpWar_SingleMatch = 0,
  W2BW_Protocol_PvpWar_TeamMatch = 1,
  W2BW_Protocol_PvpWar_ExitMatch = 2,
  W2BW_Protocol_PvpWar_ReadyEnter = 3,
  W2BW_Protocol_PvpWar_ExitEnter = 4
};
bool _emW2BW_Protocol_PvpWar_IsValid(int value);
const _emW2BW_Protocol_PvpWar _emW2BW_Protocol_PvpWar_MIN = W2BW_Protocol_PvpWar_SingleMatch;
const _emW2BW_Protocol_PvpWar _emW2BW_Protocol_PvpWar_MAX = W2BW_Protocol_PvpWar_ExitEnter;
const int _emW2BW_Protocol_PvpWar_ARRAYSIZE = _emW2BW_Protocol_PvpWar_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emW2BW_Protocol_PvpWar_descriptor();
inline const ::std::string& _emW2BW_Protocol_PvpWar_Name(_emW2BW_Protocol_PvpWar value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emW2BW_Protocol_PvpWar_descriptor(), value);
}
inline bool _emW2BW_Protocol_PvpWar_Parse(
    const ::std::string& name, _emW2BW_Protocol_PvpWar* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emW2BW_Protocol_PvpWar>(
    _emW2BW_Protocol_PvpWar_descriptor(), name, value);
}
enum _emPBW2W_Protocol {
  P_BW2W_Protocol_Scene = 0,
  P_BW2W_Protocol_Common = 1
};
bool _emPBW2W_Protocol_IsValid(int value);
const _emPBW2W_Protocol _emPBW2W_Protocol_MIN = P_BW2W_Protocol_Scene;
const _emPBW2W_Protocol _emPBW2W_Protocol_MAX = P_BW2W_Protocol_Common;
const int _emPBW2W_Protocol_ARRAYSIZE = _emPBW2W_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPBW2W_Protocol_descriptor();
inline const ::std::string& _emPBW2W_Protocol_Name(_emPBW2W_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPBW2W_Protocol_descriptor(), value);
}
inline bool _emPBW2W_Protocol_Parse(
    const ::std::string& name, _emPBW2W_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPBW2W_Protocol>(
    _emPBW2W_Protocol_descriptor(), name, value);
}
enum _emBW2W_Protocol_Common {
  BW2W_Protocol_Common_TransGameMsg = 0
};
bool _emBW2W_Protocol_Common_IsValid(int value);
const _emBW2W_Protocol_Common _emBW2W_Protocol_Common_MIN = BW2W_Protocol_Common_TransGameMsg;
const _emBW2W_Protocol_Common _emBW2W_Protocol_Common_MAX = BW2W_Protocol_Common_TransGameMsg;
const int _emBW2W_Protocol_Common_ARRAYSIZE = _emBW2W_Protocol_Common_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emBW2W_Protocol_Common_descriptor();
inline const ::std::string& _emBW2W_Protocol_Common_Name(_emBW2W_Protocol_Common value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emBW2W_Protocol_Common_descriptor(), value);
}
inline bool _emBW2W_Protocol_Common_Parse(
    const ::std::string& name, _emBW2W_Protocol_Common* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emBW2W_Protocol_Common>(
    _emBW2W_Protocol_Common_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPW2BW_Protocol>() {
  return _emPW2BW_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emW2BW_Protocol_PvpWar>() {
  return _emW2BW_Protocol_PvpWar_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPBW2W_Protocol>() {
  return _emPBW2W_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emBW2W_Protocol_Common>() {
  return _emBW2W_Protocol_Common_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WABWProtocol_2eproto__INCLUDED
