// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConstantDefine.proto

#ifndef PROTOBUF_ConstantDefine_2eproto__INCLUDED
#define PROTOBUF_ConstantDefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ConstantDefine_2eproto();
void protobuf_AssignDesc_ConstantDefine_2eproto();
void protobuf_ShutdownFile_ConstantDefine_2eproto();


enum _emConstantType {
  Constant_Game = 0,
  Constant_Quest = 1,
  Constant_Skill = 2,
  Constant_Trade = 3,
  Constant_SaleMoney = 4,
  Constant_Auction = 5,
  Constant_Friend = 6,
  Constant_WenTao = 7,
  Constant_Team = 8,
  Constant_DropItem = 9,
  Constant_Item = 10,
  Constant_Faction = 11,
  Constant_Dartcar = 12,
  Constant_FactionBoss = 13,
  Constant_Copymap = 14,
  Constant_HorseSpeed = 15,
  Constant_AutoFight = 16,
  Constant_Relive = 17,
  Constant_Pvp = 18,
  Constant_Manor = 19
};
bool _emConstantType_IsValid(int value);
const _emConstantType _emConstantType_MIN = Constant_Game;
const _emConstantType _emConstantType_MAX = Constant_Manor;
const int _emConstantType_ARRAYSIZE = _emConstantType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstantType_descriptor();
inline const ::std::string& _emConstantType_Name(_emConstantType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstantType_descriptor(), value);
}
inline bool _emConstantType_Parse(
    const ::std::string& name, _emConstantType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstantType>(
    _emConstantType_descriptor(), name, value);
}
enum _emConstant_Game {
  C_Game_MaxPlayerNum = 0,
  C_Game_MaxLevel = 1,
  C_Game_LeaveFighting = 2,
  C_Game_RushSpeed = 3,
  C_Game_FlySpeed = 4,
  C_Game_BlackPK = 5,
  C_Game_RedPK = 6,
  C_Game_HatredBuffHurt = 7,
  C_Game_HatredBuffCure = 8,
  C_Game_HatredSkillCure = 9,
  C_Game_HatredSkillGain = 10,
  C_Game_MaxBagItemNum = 11,
  C_Game_EnermyMax = 12,
  C_Game_GloBalCacheLevel = 13,
  C_Game_AIFollowOffset = 14,
  C_Game_RebirthLevel = 15,
  C_Game_KillTime = 16,
  C_Game_KillNotAddPK = 17,
  C_Game_AddPKValue = 18,
  C_Game_ReconnetTime = 19,
  C_Game_BingfuRepeatNum = 20,
  C_Game_FlyByWind = 22,
  C_Game_AutoReliveTime = 23,
  C_Game_WaitAutoReliveTime = 24,
  C_Game_StoreScoreRate = 25,
  C_Game_BingfuBagMaxNum = 26,
  C_Game_ChatJianghuRate = 27,
  C_Game_WuxueMaxSchemeNum = 28,
  C_Game_WuxueMaxSkillNum = 29,
  C_Game_MapShowTime = 30,
  C_Game_MapTweenTime = 31,
  C_Game_TipShowTime = 32,
  C_Game_TipTweenTime = 33,
  C_Game_LanternShowTime = 34,
  C_Game_LanternTweenTime = 35,
  C_Game_FightTimeUseSkill = 36,
  C_Game_FightTimeAttackPlayer = 37,
  C_Game_FightTimeBeAttackPlayer = 38,
  C_Game_FightTimeAttackMonster = 39,
  C_Game_FightTimeBeAttackMonster = 40,
  C_Game_FightTimeHatred = 41,
  C_Game_FightTimeBeHatred = 42,
  C_Game_MountCool = 43,
  C_Game_SaleMoneyScoreRate = 44,
  C_Game_CheckNameNum = 45,
  C_Game_FinalDamageRand_Low = 46,
  C_Game_FinalDamageRand_High = 47,
  C_Game_MailMax_Svr = 48,
  C_Game_MailMax_Cli = 49,
  C_Game_MailExpirationTime = 50,
  C_Game_DazuoBuffId = 51,
  C_Game_DazuoGuajiBuffId = 52,
  C_Game_MaxBingfuBagNum = 53,
  C_Game_LogciDay_Delay = 54,
  C_Game_Activity_Clear_Time = 55,
  C_Game_Corps_DeclarLength = 56,
  C_Game_MailItemMax = 57
};
bool _emConstant_Game_IsValid(int value);
const _emConstant_Game _emConstant_Game_MIN = C_Game_MaxPlayerNum;
const _emConstant_Game _emConstant_Game_MAX = C_Game_MailItemMax;
const int _emConstant_Game_ARRAYSIZE = _emConstant_Game_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Game_descriptor();
inline const ::std::string& _emConstant_Game_Name(_emConstant_Game value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Game_descriptor(), value);
}
inline bool _emConstant_Game_Parse(
    const ::std::string& name, _emConstant_Game* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Game>(
    _emConstant_Game_descriptor(), name, value);
}
enum _emConstant_Quest {
  C_Quest_DailyQueseCount = 0,
  C_Quest_MasterQueseMax = 1
};
bool _emConstant_Quest_IsValid(int value);
const _emConstant_Quest _emConstant_Quest_MIN = C_Quest_DailyQueseCount;
const _emConstant_Quest _emConstant_Quest_MAX = C_Quest_MasterQueseMax;
const int _emConstant_Quest_ARRAYSIZE = _emConstant_Quest_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Quest_descriptor();
inline const ::std::string& _emConstant_Quest_Name(_emConstant_Quest value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Quest_descriptor(), value);
}
inline bool _emConstant_Quest_Parse(
    const ::std::string& name, _emConstant_Quest* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Quest>(
    _emConstant_Quest_descriptor(), name, value);
}
enum _emConstant_Skill {
  C_Skill_MaxBuffCount = 0,
  C_Skill_EnemyClearTime = 1,
  C_Skill_TrapAngleSpeed = 2,
  C_Skill_BeAttackAddBuff = 3,
  C_Skill_SkillSchemeNum = 4
};
bool _emConstant_Skill_IsValid(int value);
const _emConstant_Skill _emConstant_Skill_MIN = C_Skill_MaxBuffCount;
const _emConstant_Skill _emConstant_Skill_MAX = C_Skill_SkillSchemeNum;
const int _emConstant_Skill_ARRAYSIZE = _emConstant_Skill_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Skill_descriptor();
inline const ::std::string& _emConstant_Skill_Name(_emConstant_Skill value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Skill_descriptor(), value);
}
inline bool _emConstant_Skill_Parse(
    const ::std::string& name, _emConstant_Skill* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Skill>(
    _emConstant_Skill_descriptor(), name, value);
}
enum _emConstant_Trade {
  C_Trade_ItemCount = 0,
  C_Trade_RecoverTime = 1,
  C_Trade_LockCoolTime = 2
};
bool _emConstant_Trade_IsValid(int value);
const _emConstant_Trade _emConstant_Trade_MIN = C_Trade_ItemCount;
const _emConstant_Trade _emConstant_Trade_MAX = C_Trade_LockCoolTime;
const int _emConstant_Trade_ARRAYSIZE = _emConstant_Trade_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Trade_descriptor();
inline const ::std::string& _emConstant_Trade_Name(_emConstant_Trade value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Trade_descriptor(), value);
}
inline bool _emConstant_Trade_Parse(
    const ::std::string& name, _emConstant_Trade* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Trade>(
    _emConstant_Trade_descriptor(), name, value);
}
enum _emConstant_SaleMoney {
  C_SaleMoney_UnitCash = 0,
  C_SaleMoney_CancelTime = 1,
  C_SaleMoney_AveDay = 2,
  C_SaleMoney_ListCount = 3,
  C_SaleMoney_DefaultAve = 4,
  C_SaleMoney_TaxCash = 5,
  C_SaleMoney_TaxSliver = 6,
  C_SaleMoney_AveMin = 7,
  C_SaleMoney_AveMax = 8,
  C_SaleMoney_LogCount = 9,
  C_SaleMoney_P1_LimitVaue = 10,
  C_SaleMoney_P2_LimitVaue = 11,
  C_SaleMoney_P1_Weight = 12,
  C_SaleMoney_P2_Weight = 13,
  C_SaleMoney_PriceHours = 14,
  C_SaleMoney_AmountHours = 15,
  C_SaleMoney_IntervalMin = 16,
  C_SaleMoney_IntervalMax = 17,
  C_SaleMoney_IntervalExtra = 18,
  C_SaleMoney_TradeLogCount = 19
};
bool _emConstant_SaleMoney_IsValid(int value);
const _emConstant_SaleMoney _emConstant_SaleMoney_MIN = C_SaleMoney_UnitCash;
const _emConstant_SaleMoney _emConstant_SaleMoney_MAX = C_SaleMoney_TradeLogCount;
const int _emConstant_SaleMoney_ARRAYSIZE = _emConstant_SaleMoney_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_SaleMoney_descriptor();
inline const ::std::string& _emConstant_SaleMoney_Name(_emConstant_SaleMoney value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_SaleMoney_descriptor(), value);
}
inline bool _emConstant_SaleMoney_Parse(
    const ::std::string& name, _emConstant_SaleMoney* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_SaleMoney>(
    _emConstant_SaleMoney_descriptor(), name, value);
}
enum _emConstant_Auction {
  C_Auction_CancelTime = 0,
  C_Auction_LogCount = 1,
  C_Auction_P1_LimitVaue = 2,
  C_Auction_P2_LimitVaue = 3,
  C_Auction_P1_Weight = 4,
  C_Auction_P2_Weight = 5,
  C_Auction_TaxBase = 6,
  C_Auction_TaxExtra = 7
};
bool _emConstant_Auction_IsValid(int value);
const _emConstant_Auction _emConstant_Auction_MIN = C_Auction_CancelTime;
const _emConstant_Auction _emConstant_Auction_MAX = C_Auction_TaxExtra;
const int _emConstant_Auction_ARRAYSIZE = _emConstant_Auction_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Auction_descriptor();
inline const ::std::string& _emConstant_Auction_Name(_emConstant_Auction value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Auction_descriptor(), value);
}
inline bool _emConstant_Auction_Parse(
    const ::std::string& name, _emConstant_Auction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Auction>(
    _emConstant_Auction_descriptor(), name, value);
}
enum _emConstant_Friend {
  C_Friend_FriendApply_Time = 0,
  C_Friend_FriendCountLimit = 1,
  C_Friend_EnemyCountLimit = 2,
  C_Friend_TmpFriendCountLimit = 3,
  C_Friend_BlacklistCountLimit = 4,
  C_Friend_TmpFriendTimeOut = 5
};
bool _emConstant_Friend_IsValid(int value);
const _emConstant_Friend _emConstant_Friend_MIN = C_Friend_FriendApply_Time;
const _emConstant_Friend _emConstant_Friend_MAX = C_Friend_TmpFriendTimeOut;
const int _emConstant_Friend_ARRAYSIZE = _emConstant_Friend_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Friend_descriptor();
inline const ::std::string& _emConstant_Friend_Name(_emConstant_Friend value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Friend_descriptor(), value);
}
inline bool _emConstant_Friend_Parse(
    const ::std::string& name, _emConstant_Friend* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Friend>(
    _emConstant_Friend_descriptor(), name, value);
}
enum _emConstant_WenTao {
  C_WenTao_Scheme_Count = 0
};
bool _emConstant_WenTao_IsValid(int value);
const _emConstant_WenTao _emConstant_WenTao_MIN = C_WenTao_Scheme_Count;
const _emConstant_WenTao _emConstant_WenTao_MAX = C_WenTao_Scheme_Count;
const int _emConstant_WenTao_ARRAYSIZE = _emConstant_WenTao_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_WenTao_descriptor();
inline const ::std::string& _emConstant_WenTao_Name(_emConstant_WenTao value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_WenTao_descriptor(), value);
}
inline bool _emConstant_WenTao_Parse(
    const ::std::string& name, _emConstant_WenTao* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_WenTao>(
    _emConstant_WenTao_descriptor(), name, value);
}
enum _emConstant_Team {
  C_Team_Member_Count = 0,
  C_Team_KickVote_Time = 1,
  C_Team_AllotVote_Time = 2,
  C_Team_Callup_CoolTime = 3,
  C_Team_ShoulieLoopNum = 5,
  C_Team_ShouliePrizeCount = 6,
  C_Team_RemainConfirmTime = 7
};
bool _emConstant_Team_IsValid(int value);
const _emConstant_Team _emConstant_Team_MIN = C_Team_Member_Count;
const _emConstant_Team _emConstant_Team_MAX = C_Team_RemainConfirmTime;
const int _emConstant_Team_ARRAYSIZE = _emConstant_Team_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Team_descriptor();
inline const ::std::string& _emConstant_Team_Name(_emConstant_Team value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Team_descriptor(), value);
}
inline bool _emConstant_Team_Parse(
    const ::std::string& name, _emConstant_Team* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Team>(
    _emConstant_Team_descriptor(), name, value);
}
enum _emConstant_DropItem {
  C_DropItem_Dice_Time = 0,
  C_DropItem_Assign_Time = 1,
  C_DropItem_Pick_Time = 2,
  C_DropItem_Exist_Time = 3
};
bool _emConstant_DropItem_IsValid(int value);
const _emConstant_DropItem _emConstant_DropItem_MIN = C_DropItem_Dice_Time;
const _emConstant_DropItem _emConstant_DropItem_MAX = C_DropItem_Exist_Time;
const int _emConstant_DropItem_ARRAYSIZE = _emConstant_DropItem_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_DropItem_descriptor();
inline const ::std::string& _emConstant_DropItem_Name(_emConstant_DropItem value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_DropItem_descriptor(), value);
}
inline bool _emConstant_DropItem_Parse(
    const ::std::string& name, _emConstant_DropItem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_DropItem>(
    _emConstant_DropItem_descriptor(), name, value);
}
enum _emConstant_Item {
  C_Item_Inherit_Enhance = 0,
  C_Item_Inherit_Forge = 1,
  C_Item_Inherit_Special = 2,
  C_Item_EnhanceMoneyCount = 3,
  C_Item_ForgeMoneyCount = 4,
  C_Item_BingfuSplitAddPercent = 5
};
bool _emConstant_Item_IsValid(int value);
const _emConstant_Item _emConstant_Item_MIN = C_Item_Inherit_Enhance;
const _emConstant_Item _emConstant_Item_MAX = C_Item_BingfuSplitAddPercent;
const int _emConstant_Item_ARRAYSIZE = _emConstant_Item_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Item_descriptor();
inline const ::std::string& _emConstant_Item_Name(_emConstant_Item value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Item_descriptor(), value);
}
inline bool _emConstant_Item_Parse(
    const ::std::string& name, _emConstant_Item* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Item>(
    _emConstant_Item_descriptor(), name, value);
}
enum _emConstant_Faction {
  C_Faction_Create_Money = 0,
  C_Faction_Name_Size = 1,
  C_Faction_Banner_Size = 2,
  C_Faction_Declaration_Size = 3,
  C_Faction_Apply_Max = 4,
  C_Faction_Player_Apply_Max = 5,
  C_Faction_Apply_OutOfTime = 6,
  C_Faction_Apply_CD = 7,
  C_Faction_Leave_CD = 8,
  C_Faction_Invite_Timeout = 9,
  C_Faction_Develop_Count = 10,
  C_Faction_Study_Count = 11,
  C_Faction_Study_Time = 12,
  C_Faction_Skill_DefaultLevel = 13,
  C_Faction_Contribution_Max = 14,
  C_Faction_Task_Count = 15,
  C_Faction_Task_Multi_Award1 = 16,
  C_Faction_Task_Multi_Award2 = 17,
  C_Faction_ItemMax = 18,
  C_Faction_HomeSceneID = 19,
  C_Faction_HomeSceneRegionID = 20,
  C_Faction_EventMemeber = 21,
  C_Faction_EventExperience = 22,
  C_Faction_EventDepot = 23,
  C_Faction_ImpeachOfflineTime = 24,
  C_Faction_ImpeachContinueTime = 25,
  C_Faction_ImpeachAgreeRate = 26,
  C_Faction_FormalMemberTime = 27,
  C_Faction_CorpsBoomLow = 28,
  C_Faction_CorpsBoomMiddle = 29,
  C_Faction_CorpsBoomHigh = 30,
  C_Faction_NewMemberJoinTime = 31,
  C_Faction_ForbitSpeakHourNum = 32,
  C_Faction_ForbitSpeakTime = 33
};
bool _emConstant_Faction_IsValid(int value);
const _emConstant_Faction _emConstant_Faction_MIN = C_Faction_Create_Money;
const _emConstant_Faction _emConstant_Faction_MAX = C_Faction_ForbitSpeakTime;
const int _emConstant_Faction_ARRAYSIZE = _emConstant_Faction_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Faction_descriptor();
inline const ::std::string& _emConstant_Faction_Name(_emConstant_Faction value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Faction_descriptor(), value);
}
inline bool _emConstant_Faction_Parse(
    const ::std::string& name, _emConstant_Faction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Faction>(
    _emConstant_Faction_descriptor(), name, value);
}
enum _emConstant_Dartcar {
  C_Dartcar_Max_Count_Normal = 1,
  C_Dartcar_Max_Count_Tianxia = 2
};
bool _emConstant_Dartcar_IsValid(int value);
const _emConstant_Dartcar _emConstant_Dartcar_MIN = C_Dartcar_Max_Count_Normal;
const _emConstant_Dartcar _emConstant_Dartcar_MAX = C_Dartcar_Max_Count_Tianxia;
const int _emConstant_Dartcar_ARRAYSIZE = _emConstant_Dartcar_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Dartcar_descriptor();
inline const ::std::string& _emConstant_Dartcar_Name(_emConstant_Dartcar value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Dartcar_descriptor(), value);
}
inline bool _emConstant_Dartcar_Parse(
    const ::std::string& name, _emConstant_Dartcar* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Dartcar>(
    _emConstant_Dartcar_descriptor(), name, value);
}
enum _emConstant_FactionBoss {
  C_FactionBoss_CopymapMinTime = 0,
  C_FactionBoss_DelayPrizeTime = 1,
  C_FactionBoss_FactionPrizeMinPercent = 2,
  C_FactionBoss_ScoreParam = 3,
  C_FactionBoss_CoolTime = 4,
  C_FactionBoss_FactionPrizeMinScore = 5
};
bool _emConstant_FactionBoss_IsValid(int value);
const _emConstant_FactionBoss _emConstant_FactionBoss_MIN = C_FactionBoss_CopymapMinTime;
const _emConstant_FactionBoss _emConstant_FactionBoss_MAX = C_FactionBoss_FactionPrizeMinScore;
const int _emConstant_FactionBoss_ARRAYSIZE = _emConstant_FactionBoss_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_FactionBoss_descriptor();
inline const ::std::string& _emConstant_FactionBoss_Name(_emConstant_FactionBoss value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_FactionBoss_descriptor(), value);
}
inline bool _emConstant_FactionBoss_Parse(
    const ::std::string& name, _emConstant_FactionBoss* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_FactionBoss>(
    _emConstant_FactionBoss_descriptor(), name, value);
}
enum _emConstant_Copymap {
  C_Copymap_LiangyiNum = 0,
  C_Copymap_BannerMaxScore = 1,
  C_Copymap_BannerKillAddScore = 2,
  C_Copymap_BannerKillAddContri = 3,
  C_Copymap_BannerAssitKillAddContri = 4,
  C_Copymap_BannerCollectAddContri = 5,
  C_Copymap_BannerAddScoreStepSecond = 6,
  C_Copymap_BannerAddScore = 7,
  C_Copymap_BannerGodlikeKillNum = 8,
  C_Copymap_BannerMegakillKillNum = 9,
  C_Copymap_BannerMegakillStepTime = 10,
  C_Copymap_BannerReliveAddBuff = 11,
  C_Copymap_BannerHookMaxTime = 12,
  C_Copymap_BannerDoorID1 = 13,
  C_Copymap_BannerDoorID2 = 14,
  C_Copymap_CashCount = 15,
  C_Copymap_BannerKillAssitTime = 16
};
bool _emConstant_Copymap_IsValid(int value);
const _emConstant_Copymap _emConstant_Copymap_MIN = C_Copymap_LiangyiNum;
const _emConstant_Copymap _emConstant_Copymap_MAX = C_Copymap_BannerKillAssitTime;
const int _emConstant_Copymap_ARRAYSIZE = _emConstant_Copymap_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Copymap_descriptor();
inline const ::std::string& _emConstant_Copymap_Name(_emConstant_Copymap value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Copymap_descriptor(), value);
}
inline bool _emConstant_Copymap_Parse(
    const ::std::string& name, _emConstant_Copymap* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Copymap>(
    _emConstant_Copymap_descriptor(), name, value);
}
enum _emConstant_Relive {
  C_Relive_Max_Free_Count = 1,
  C_Relive_Item_ID = 2,
  C_Relive_SafePoint_Time = 3,
  C_Relive_Buff_ID = 4
};
bool _emConstant_Relive_IsValid(int value);
const _emConstant_Relive _emConstant_Relive_MIN = C_Relive_Max_Free_Count;
const _emConstant_Relive _emConstant_Relive_MAX = C_Relive_Buff_ID;
const int _emConstant_Relive_ARRAYSIZE = _emConstant_Relive_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Relive_descriptor();
inline const ::std::string& _emConstant_Relive_Name(_emConstant_Relive value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Relive_descriptor(), value);
}
inline bool _emConstant_Relive_Parse(
    const ::std::string& name, _emConstant_Relive* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Relive>(
    _emConstant_Relive_descriptor(), name, value);
}
enum _emConstant_Pvp {
  C_Pvp_SinglePvp_MinScore = 1,
  C_Pvp_SinglePvp_DefaultScore = 2,
  C_Pvp_SinglePvp_RecordNum = 3,
  C_Pvp_SinglePvp_KValue = 4,
  C_Pvp_SinglePvp_WeekCount = 5
};
bool _emConstant_Pvp_IsValid(int value);
const _emConstant_Pvp _emConstant_Pvp_MIN = C_Pvp_SinglePvp_MinScore;
const _emConstant_Pvp _emConstant_Pvp_MAX = C_Pvp_SinglePvp_WeekCount;
const int _emConstant_Pvp_ARRAYSIZE = _emConstant_Pvp_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Pvp_descriptor();
inline const ::std::string& _emConstant_Pvp_Name(_emConstant_Pvp value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Pvp_descriptor(), value);
}
inline bool _emConstant_Pvp_Parse(
    const ::std::string& name, _emConstant_Pvp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Pvp>(
    _emConstant_Pvp_descriptor(), name, value);
}
enum _emConstant_Manor {
  C_Manor_VoteTimeSecond = 1,
  C_Manor_ApplyCDSecond = 2,
  C_Manor_ApplyCostFactionSilver = 3,
  C_Manor_Lobby_Line_CD = 4,
  C_Manor_Lobby_Line_Max_Inside_Count = 5,
  C_Manor_BattleField_P_CD = 6,
  C_Manor_BattleField_F_CD_1 = 7,
  C_Manor_BattleField_F_CD_2 = 8,
  C_Manor_BattleField_FlagScore_1 = 9,
  C_Manor_BattleField_FlagScore_2 = 10,
  C_Manor_BattleField_LostElite_30s = 11,
  C_Manor_BattleField_LostElite_2m = 12,
  C_Manor_BattleField_SafeZone_CD = 13,
  C_Manor_BattleField_Assist_Harmful_CD = 14,
  C_Manor_BattleField_Assist_Useful_CD = 15
};
bool _emConstant_Manor_IsValid(int value);
const _emConstant_Manor _emConstant_Manor_MIN = C_Manor_VoteTimeSecond;
const _emConstant_Manor _emConstant_Manor_MAX = C_Manor_BattleField_Assist_Useful_CD;
const int _emConstant_Manor_ARRAYSIZE = _emConstant_Manor_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emConstant_Manor_descriptor();
inline const ::std::string& _emConstant_Manor_Name(_emConstant_Manor value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emConstant_Manor_descriptor(), value);
}
inline bool _emConstant_Manor_Parse(
    const ::std::string& name, _emConstant_Manor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emConstant_Manor>(
    _emConstant_Manor_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstantType>() {
  return _emConstantType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Game>() {
  return _emConstant_Game_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Quest>() {
  return _emConstant_Quest_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Skill>() {
  return _emConstant_Skill_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Trade>() {
  return _emConstant_Trade_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_SaleMoney>() {
  return _emConstant_SaleMoney_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Auction>() {
  return _emConstant_Auction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Friend>() {
  return _emConstant_Friend_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_WenTao>() {
  return _emConstant_WenTao_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Team>() {
  return _emConstant_Team_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_DropItem>() {
  return _emConstant_DropItem_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Item>() {
  return _emConstant_Item_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Faction>() {
  return _emConstant_Faction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Dartcar>() {
  return _emConstant_Dartcar_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_FactionBoss>() {
  return _emConstant_FactionBoss_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Copymap>() {
  return _emConstant_Copymap_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Relive>() {
  return _emConstant_Relive_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Pvp>() {
  return _emConstant_Pvp_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emConstant_Manor>() {
  return _emConstant_Manor_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ConstantDefine_2eproto__INCLUDED
