// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RCSProtocol.proto

#ifndef PROTOBUF_RCSProtocol_2eproto__INCLUDED
#define PROTOBUF_RCSProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RCSProtocol_2eproto();
void protobuf_AssignDesc_RCSProtocol_2eproto();
void protobuf_ShutdownFile_RCSProtocol_2eproto();


enum _emRCS_Protocol {
  P_CommonProtocol = 0
};
bool _emRCS_Protocol_IsValid(int value);
const _emRCS_Protocol _emRCS_Protocol_MIN = P_CommonProtocol;
const _emRCS_Protocol _emRCS_Protocol_MAX = P_CommonProtocol;
const int _emRCS_Protocol_ARRAYSIZE = _emRCS_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emRCS_Protocol_descriptor();
inline const ::std::string& _emRCS_Protocol_Name(_emRCS_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emRCS_Protocol_descriptor(), value);
}
inline bool _emRCS_Protocol_Parse(
    const ::std::string& name, _emRCS_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emRCS_Protocol>(
    _emRCS_Protocol_descriptor(), name, value);
}
enum _emRCS_CommonProtocol {
  ComP_TextCmd = 0,
  ComP_AccountUpdate = 1,
  ComP_AccountRemove = 2,
  ComP_RobotAIUpdate = 3,
  ComP_MSGStream = 4,
  ComP_MSGPrintf = 5,
  ComP_NetStat = 6,
  ComP_LoadLua = 7
};
bool _emRCS_CommonProtocol_IsValid(int value);
const _emRCS_CommonProtocol _emRCS_CommonProtocol_MIN = ComP_TextCmd;
const _emRCS_CommonProtocol _emRCS_CommonProtocol_MAX = ComP_LoadLua;
const int _emRCS_CommonProtocol_ARRAYSIZE = _emRCS_CommonProtocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emRCS_CommonProtocol_descriptor();
inline const ::std::string& _emRCS_CommonProtocol_Name(_emRCS_CommonProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emRCS_CommonProtocol_descriptor(), value);
}
inline bool _emRCS_CommonProtocol_Parse(
    const ::std::string& name, _emRCS_CommonProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emRCS_CommonProtocol>(
    _emRCS_CommonProtocol_descriptor(), name, value);
}
enum _emResultNormal {
  R_ResultSucceed = 0,
  R_ResultFail = 1
};
bool _emResultNormal_IsValid(int value);
const _emResultNormal _emResultNormal_MIN = R_ResultSucceed;
const _emResultNormal _emResultNormal_MAX = R_ResultFail;
const int _emResultNormal_ARRAYSIZE = _emResultNormal_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultNormal_descriptor();
inline const ::std::string& _emResultNormal_Name(_emResultNormal value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultNormal_descriptor(), value);
}
inline bool _emResultNormal_Parse(
    const ::std::string& name, _emResultNormal* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultNormal>(
    _emResultNormal_descriptor(), name, value);
}
enum _emResultTextCmd {
  R_TextCmd_Succeed = 0,
  R_TextCmd_Fail = 1
};
bool _emResultTextCmd_IsValid(int value);
const _emResultTextCmd _emResultTextCmd_MIN = R_TextCmd_Succeed;
const _emResultTextCmd _emResultTextCmd_MAX = R_TextCmd_Fail;
const int _emResultTextCmd_ARRAYSIZE = _emResultTextCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultTextCmd_descriptor();
inline const ::std::string& _emResultTextCmd_Name(_emResultTextCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultTextCmd_descriptor(), value);
}
inline bool _emResultTextCmd_Parse(
    const ::std::string& name, _emResultTextCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultTextCmd>(
    _emResultTextCmd_descriptor(), name, value);
}
enum _emResultAccountUpdate {
  R_AccountUpdate_Succeed = 0,
  R_AccountUpdate_Fail = 1
};
bool _emResultAccountUpdate_IsValid(int value);
const _emResultAccountUpdate _emResultAccountUpdate_MIN = R_AccountUpdate_Succeed;
const _emResultAccountUpdate _emResultAccountUpdate_MAX = R_AccountUpdate_Fail;
const int _emResultAccountUpdate_ARRAYSIZE = _emResultAccountUpdate_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultAccountUpdate_descriptor();
inline const ::std::string& _emResultAccountUpdate_Name(_emResultAccountUpdate value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultAccountUpdate_descriptor(), value);
}
inline bool _emResultAccountUpdate_Parse(
    const ::std::string& name, _emResultAccountUpdate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultAccountUpdate>(
    _emResultAccountUpdate_descriptor(), name, value);
}
enum _emResultAccountRemove {
  R_AccountRemove_Succeed = 0,
  R_AccountRemove_Fail = 1
};
bool _emResultAccountRemove_IsValid(int value);
const _emResultAccountRemove _emResultAccountRemove_MIN = R_AccountRemove_Succeed;
const _emResultAccountRemove _emResultAccountRemove_MAX = R_AccountRemove_Fail;
const int _emResultAccountRemove_ARRAYSIZE = _emResultAccountRemove_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultAccountRemove_descriptor();
inline const ::std::string& _emResultAccountRemove_Name(_emResultAccountRemove value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultAccountRemove_descriptor(), value);
}
inline bool _emResultAccountRemove_Parse(
    const ::std::string& name, _emResultAccountRemove* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultAccountRemove>(
    _emResultAccountRemove_descriptor(), name, value);
}
enum _emResultRobotAIUpdate {
  R_RobotAIUpdate_Succeed = 0,
  R_RobotAIUpdate_Fail = 1
};
bool _emResultRobotAIUpdate_IsValid(int value);
const _emResultRobotAIUpdate _emResultRobotAIUpdate_MIN = R_RobotAIUpdate_Succeed;
const _emResultRobotAIUpdate _emResultRobotAIUpdate_MAX = R_RobotAIUpdate_Fail;
const int _emResultRobotAIUpdate_ARRAYSIZE = _emResultRobotAIUpdate_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultRobotAIUpdate_descriptor();
inline const ::std::string& _emResultRobotAIUpdate_Name(_emResultRobotAIUpdate value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultRobotAIUpdate_descriptor(), value);
}
inline bool _emResultRobotAIUpdate_Parse(
    const ::std::string& name, _emResultRobotAIUpdate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultRobotAIUpdate>(
    _emResultRobotAIUpdate_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emRCS_Protocol>() {
  return _emRCS_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emRCS_CommonProtocol>() {
  return _emRCS_CommonProtocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultNormal>() {
  return _emResultNormal_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultTextCmd>() {
  return _emResultTextCmd_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultAccountUpdate>() {
  return _emResultAccountUpdate_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultAccountRemove>() {
  return _emResultAccountRemove_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultRobotAIUpdate>() {
  return _emResultRobotAIUpdate_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RCSProtocol_2eproto__INCLUDED
