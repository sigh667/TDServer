// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBConfig.proto

#ifndef PROTOBUF_PBConfig_2eproto__INCLUDED
#define PROTOBUF_PBConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PBConfig_2eproto();
void protobuf_AssignDesc_PBConfig_2eproto();
void protobuf_ShutdownFile_PBConfig_2eproto();

class PBCfg_MysqlDB;
class PBCfg_Res;
class PBCfg_Gamelog;
class PBCfg_Reportlog;
class PBCfg_Switch;
class PBCfg_NetTimeout;
class PBCfg_Net;
class PBCfg_ServerCommon;
class PBCfg_World;
class PBCfg_Game;
class PBCfg_Login;
class PBCfg_Register;
class PBCfg_DB;
class PBCfg_Global;
class PBCfg_Bigworld;
class PBCfg_Rooter;
class PBCfg_Dip;
class PBCfg_RobotServer;
class PBCfg_RobotClient;
class PBCfg_Root;
class PBCfg_Xls2Data;
class PBCfg_Record;

// ===================================================================

class PBCfg_MysqlDB : public ::google::protobuf::Message {
 public:
  PBCfg_MysqlDB();
  virtual ~PBCfg_MysqlDB();
  
  PBCfg_MysqlDB(const PBCfg_MysqlDB& from);
  
  inline PBCfg_MysqlDB& operator=(const PBCfg_MysqlDB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_MysqlDB& default_instance();
  
  void Swap(PBCfg_MysqlDB* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_MysqlDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_MysqlDB& from);
  void MergeFrom(const PBCfg_MysqlDB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // optional string db = 3;
  inline bool has_db() const;
  inline void clear_db();
  static const int kDbFieldNumber = 3;
  inline const ::std::string& db() const;
  inline void set_db(const ::std::string& value);
  inline void set_db(const char* value);
  inline void set_db(const char* value, size_t size);
  inline ::std::string* mutable_db();
  inline ::std::string* release_db();
  
  // optional string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  
  // optional string password = 5;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 5;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // @@protoc_insertion_point(class_scope:PBCfg_MysqlDB)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_db();
  inline void clear_has_db();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_password();
  inline void clear_has_password();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_;
  ::std::string* db_;
  ::std::string* user_;
  ::std::string* password_;
  ::google::protobuf::uint32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_MysqlDB* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Res : public ::google::protobuf::Message {
 public:
  PBCfg_Res();
  virtual ~PBCfg_Res();
  
  PBCfg_Res(const PBCfg_Res& from);
  
  inline PBCfg_Res& operator=(const PBCfg_Res& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Res& default_instance();
  
  void Swap(PBCfg_Res* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Res& from);
  void MergeFrom(const PBCfg_Res& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string datapath = 1;
  inline bool has_datapath() const;
  inline void clear_datapath();
  static const int kDatapathFieldNumber = 1;
  inline const ::std::string& datapath() const;
  inline void set_datapath(const ::std::string& value);
  inline void set_datapath(const char* value);
  inline void set_datapath(const char* value, size_t size);
  inline ::std::string* mutable_datapath();
  inline ::std::string* release_datapath();
  
  // optional string clientdatapath = 2;
  inline bool has_clientdatapath() const;
  inline void clear_clientdatapath();
  static const int kClientdatapathFieldNumber = 2;
  inline const ::std::string& clientdatapath() const;
  inline void set_clientdatapath(const ::std::string& value);
  inline void set_clientdatapath(const char* value);
  inline void set_clientdatapath(const char* value, size_t size);
  inline ::std::string* mutable_clientdatapath();
  inline ::std::string* release_clientdatapath();
  
  // optional string scenepath = 3;
  inline bool has_scenepath() const;
  inline void clear_scenepath();
  static const int kScenepathFieldNumber = 3;
  inline const ::std::string& scenepath() const;
  inline void set_scenepath(const ::std::string& value);
  inline void set_scenepath(const char* value);
  inline void set_scenepath(const char* value, size_t size);
  inline ::std::string* mutable_scenepath();
  inline ::std::string* release_scenepath();
  
  // optional string aipath = 4;
  inline bool has_aipath() const;
  inline void clear_aipath();
  static const int kAipathFieldNumber = 4;
  inline const ::std::string& aipath() const;
  inline void set_aipath(const ::std::string& value);
  inline void set_aipath(const char* value);
  inline void set_aipath(const char* value, size_t size);
  inline ::std::string* mutable_aipath();
  inline ::std::string* release_aipath();
  
  // optional string scriptpath = 5;
  inline bool has_scriptpath() const;
  inline void clear_scriptpath();
  static const int kScriptpathFieldNumber = 5;
  inline const ::std::string& scriptpath() const;
  inline void set_scriptpath(const ::std::string& value);
  inline void set_scriptpath(const char* value);
  inline void set_scriptpath(const char* value, size_t size);
  inline ::std::string* mutable_scriptpath();
  inline ::std::string* release_scriptpath();
  
  // @@protoc_insertion_point(class_scope:PBCfg_Res)
 private:
  inline void set_has_datapath();
  inline void clear_has_datapath();
  inline void set_has_clientdatapath();
  inline void clear_has_clientdatapath();
  inline void set_has_scenepath();
  inline void clear_has_scenepath();
  inline void set_has_aipath();
  inline void clear_has_aipath();
  inline void set_has_scriptpath();
  inline void clear_has_scriptpath();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* datapath_;
  ::std::string* clientdatapath_;
  ::std::string* scenepath_;
  ::std::string* aipath_;
  ::std::string* scriptpath_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Res* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Gamelog : public ::google::protobuf::Message {
 public:
  PBCfg_Gamelog();
  virtual ~PBCfg_Gamelog();
  
  PBCfg_Gamelog(const PBCfg_Gamelog& from);
  
  inline PBCfg_Gamelog& operator=(const PBCfg_Gamelog& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Gamelog& default_instance();
  
  void Swap(PBCfg_Gamelog* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Gamelog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Gamelog& from);
  void MergeFrom(const PBCfg_Gamelog& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool sendgamelog = 5;
  inline bool has_sendgamelog() const;
  inline void clear_sendgamelog();
  static const int kSendgamelogFieldNumber = 5;
  inline bool sendgamelog() const;
  inline void set_sendgamelog(bool value);
  
  // optional string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional uint32 port = 7;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 7;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBCfg_Gamelog)
 private:
  inline void set_has_sendgamelog();
  inline void clear_has_sendgamelog();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_;
  bool sendgamelog_;
  ::google::protobuf::uint32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Gamelog* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Reportlog : public ::google::protobuf::Message {
 public:
  PBCfg_Reportlog();
  virtual ~PBCfg_Reportlog();
  
  PBCfg_Reportlog(const PBCfg_Reportlog& from);
  
  inline PBCfg_Reportlog& operator=(const PBCfg_Reportlog& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Reportlog& default_instance();
  
  void Swap(PBCfg_Reportlog* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Reportlog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Reportlog& from);
  void MergeFrom(const PBCfg_Reportlog& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool sendloadlog = 1;
  inline bool has_sendloadlog() const;
  inline void clear_sendloadlog();
  static const int kSendloadlogFieldNumber = 1;
  inline bool sendloadlog() const;
  inline void set_sendloadlog(bool value);
  
  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // optional string sep = 4;
  inline bool has_sep() const;
  inline void clear_sep();
  static const int kSepFieldNumber = 4;
  inline const ::std::string& sep() const;
  inline void set_sep(const ::std::string& value);
  inline void set_sep(const char* value);
  inline void set_sep(const char* value, size_t size);
  inline ::std::string* mutable_sep();
  inline ::std::string* release_sep();
  
  // @@protoc_insertion_point(class_scope:PBCfg_Reportlog)
 private:
  inline void set_has_sendloadlog();
  inline void clear_has_sendloadlog();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_sep();
  inline void clear_has_sep();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_;
  bool sendloadlog_;
  ::google::protobuf::uint32 port_;
  ::std::string* sep_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Reportlog* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Switch : public ::google::protobuf::Message {
 public:
  PBCfg_Switch();
  virtual ~PBCfg_Switch();
  
  PBCfg_Switch(const PBCfg_Switch& from);
  
  inline PBCfg_Switch& operator=(const PBCfg_Switch& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Switch& default_instance();
  
  void Swap(PBCfg_Switch* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Switch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Switch& from);
  void MergeFrom(const PBCfg_Switch& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool gm = 1;
  inline bool has_gm() const;
  inline void clear_gm();
  static const int kGmFieldNumber = 1;
  inline bool gm() const;
  inline void set_gm(bool value);
  
  // optional bool adult = 2;
  inline bool has_adult() const;
  inline void clear_adult();
  static const int kAdultFieldNumber = 2;
  inline bool adult() const;
  inline void set_adult(bool value);
  
  // optional bool debugmsg = 3;
  inline bool has_debugmsg() const;
  inline void clear_debugmsg();
  static const int kDebugmsgFieldNumber = 3;
  inline bool debugmsg() const;
  inline void set_debugmsg(bool value);
  
  // @@protoc_insertion_point(class_scope:PBCfg_Switch)
 private:
  inline void set_has_gm();
  inline void clear_has_gm();
  inline void set_has_adult();
  inline void clear_has_adult();
  inline void set_has_debugmsg();
  inline void clear_has_debugmsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool gm_;
  bool adult_;
  bool debugmsg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Switch* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_NetTimeout : public ::google::protobuf::Message {
 public:
  PBCfg_NetTimeout();
  virtual ~PBCfg_NetTimeout();
  
  PBCfg_NetTimeout(const PBCfg_NetTimeout& from);
  
  inline PBCfg_NetTimeout& operator=(const PBCfg_NetTimeout& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_NetTimeout& default_instance();
  
  void Swap(PBCfg_NetTimeout* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_NetTimeout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_NetTimeout& from);
  void MergeFrom(const PBCfg_NetTimeout& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 connnecttimeout = 1;
  inline bool has_connnecttimeout() const;
  inline void clear_connnecttimeout();
  static const int kConnnecttimeoutFieldNumber = 1;
  inline ::google::protobuf::uint32 connnecttimeout() const;
  inline void set_connnecttimeout(::google::protobuf::uint32 value);
  
  // optional uint32 readtimeout = 2;
  inline bool has_readtimeout() const;
  inline void clear_readtimeout();
  static const int kReadtimeoutFieldNumber = 2;
  inline ::google::protobuf::uint32 readtimeout() const;
  inline void set_readtimeout(::google::protobuf::uint32 value);
  
  // optional uint32 writetimeout = 3;
  inline bool has_writetimeout() const;
  inline void clear_writetimeout();
  static const int kWritetimeoutFieldNumber = 3;
  inline ::google::protobuf::uint32 writetimeout() const;
  inline void set_writetimeout(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBCfg_NetTimeout)
 private:
  inline void set_has_connnecttimeout();
  inline void clear_has_connnecttimeout();
  inline void set_has_readtimeout();
  inline void clear_has_readtimeout();
  inline void set_has_writetimeout();
  inline void clear_has_writetimeout();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 connnecttimeout_;
  ::google::protobuf::uint32 readtimeout_;
  ::google::protobuf::uint32 writetimeout_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_NetTimeout* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Net : public ::google::protobuf::Message {
 public:
  PBCfg_Net();
  virtual ~PBCfg_Net();
  
  PBCfg_Net(const PBCfg_Net& from);
  
  inline PBCfg_Net& operator=(const PBCfg_Net& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Net& default_instance();
  
  void Swap(PBCfg_Net* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Net* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Net& from);
  void MergeFrom(const PBCfg_Net& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // optional uint32 connnecttimeout = 3;
  inline bool has_connnecttimeout() const;
  inline void clear_connnecttimeout();
  static const int kConnnecttimeoutFieldNumber = 3;
  inline ::google::protobuf::uint32 connnecttimeout() const;
  inline void set_connnecttimeout(::google::protobuf::uint32 value);
  
  // optional uint32 readtimeout = 4;
  inline bool has_readtimeout() const;
  inline void clear_readtimeout();
  static const int kReadtimeoutFieldNumber = 4;
  inline ::google::protobuf::uint32 readtimeout() const;
  inline void set_readtimeout(::google::protobuf::uint32 value);
  
  // optional uint32 writetimeout = 5;
  inline bool has_writetimeout() const;
  inline void clear_writetimeout();
  static const int kWritetimeoutFieldNumber = 5;
  inline ::google::protobuf::uint32 writetimeout() const;
  inline void set_writetimeout(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBCfg_Net)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_connnecttimeout();
  inline void clear_has_connnecttimeout();
  inline void set_has_readtimeout();
  inline void clear_has_readtimeout();
  inline void set_has_writetimeout();
  inline void clear_has_writetimeout();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 connnecttimeout_;
  ::google::protobuf::uint32 readtimeout_;
  ::google::protobuf::uint32 writetimeout_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Net* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_ServerCommon : public ::google::protobuf::Message {
 public:
  PBCfg_ServerCommon();
  virtual ~PBCfg_ServerCommon();
  
  PBCfg_ServerCommon(const PBCfg_ServerCommon& from);
  
  inline PBCfg_ServerCommon& operator=(const PBCfg_ServerCommon& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_ServerCommon& default_instance();
  
  void Swap(PBCfg_ServerCommon* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_ServerCommon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_ServerCommon& from);
  void MergeFrom(const PBCfg_ServerCommon& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_MysqlDB mysql = 1;
  inline bool has_mysql() const;
  inline void clear_mysql();
  static const int kMysqlFieldNumber = 1;
  inline const ::PBCfg_MysqlDB& mysql() const;
  inline ::PBCfg_MysqlDB* mutable_mysql();
  inline ::PBCfg_MysqlDB* release_mysql();
  
  // optional .PBCfg_Net clientnet = 2;
  inline bool has_clientnet() const;
  inline void clear_clientnet();
  static const int kClientnetFieldNumber = 2;
  inline const ::PBCfg_Net& clientnet() const;
  inline ::PBCfg_Net* mutable_clientnet();
  inline ::PBCfg_Net* release_clientnet();
  
  // optional .PBCfg_NetTimeout connectnet = 3;
  inline bool has_connectnet() const;
  inline void clear_connectnet();
  static const int kConnectnetFieldNumber = 3;
  inline const ::PBCfg_NetTimeout& connectnet() const;
  inline ::PBCfg_NetTimeout* mutable_connectnet();
  inline ::PBCfg_NetTimeout* release_connectnet();
  
  // optional .PBCfg_Net servicenet = 4;
  inline bool has_servicenet() const;
  inline void clear_servicenet();
  static const int kServicenetFieldNumber = 4;
  inline const ::PBCfg_Net& servicenet() const;
  inline ::PBCfg_Net* mutable_servicenet();
  inline ::PBCfg_Net* release_servicenet();
  
  // optional .PBCfg_Reportlog reportlog = 5;
  inline bool has_reportlog() const;
  inline void clear_reportlog();
  static const int kReportlogFieldNumber = 5;
  inline const ::PBCfg_Reportlog& reportlog() const;
  inline ::PBCfg_Reportlog* mutable_reportlog();
  inline ::PBCfg_Reportlog* release_reportlog();
  
  // optional .PBCfg_Gamelog gamelog = 6;
  inline bool has_gamelog() const;
  inline void clear_gamelog();
  static const int kGamelogFieldNumber = 6;
  inline const ::PBCfg_Gamelog& gamelog() const;
  inline ::PBCfg_Gamelog* mutable_gamelog();
  inline ::PBCfg_Gamelog* release_gamelog();
  
  // optional .PBCfg_Res res = 7;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 7;
  inline const ::PBCfg_Res& res() const;
  inline ::PBCfg_Res* mutable_res();
  inline ::PBCfg_Res* release_res();
  
  // optional string luaentry = 10;
  inline bool has_luaentry() const;
  inline void clear_luaentry();
  static const int kLuaentryFieldNumber = 10;
  inline const ::std::string& luaentry() const;
  inline void set_luaentry(const ::std::string& value);
  inline void set_luaentry(const char* value);
  inline void set_luaentry(const char* value, size_t size);
  inline ::std::string* mutable_luaentry();
  inline ::std::string* release_luaentry();
  
  // optional uint32 logicworldid = 11;
  inline bool has_logicworldid() const;
  inline void clear_logicworldid();
  static const int kLogicworldidFieldNumber = 11;
  inline ::google::protobuf::uint32 logicworldid() const;
  inline void set_logicworldid(::google::protobuf::uint32 value);
  
  // optional string localname = 12;
  inline bool has_localname() const;
  inline void clear_localname();
  static const int kLocalnameFieldNumber = 12;
  inline const ::std::string& localname() const;
  inline void set_localname(const ::std::string& value);
  inline void set_localname(const char* value);
  inline void set_localname(const char* value, size_t size);
  inline ::std::string* mutable_localname();
  inline ::std::string* release_localname();
  
  // optional bool logprint = 13;
  inline bool has_logprint() const;
  inline void clear_logprint();
  static const int kLogprintFieldNumber = 13;
  inline bool logprint() const;
  inline void set_logprint(bool value);
  
  // optional bool logwarning = 14;
  inline bool has_logwarning() const;
  inline void clear_logwarning();
  static const int kLogwarningFieldNumber = 14;
  inline bool logwarning() const;
  inline void set_logwarning(bool value);
  
  // optional bool logerror = 15;
  inline bool has_logerror() const;
  inline void clear_logerror();
  static const int kLogerrorFieldNumber = 15;
  inline bool logerror() const;
  inline void set_logerror(bool value);
  
  // optional bool dataflux = 16;
  inline bool has_dataflux() const;
  inline void clear_dataflux();
  static const int kDatafluxFieldNumber = 16;
  inline bool dataflux() const;
  inline void set_dataflux(bool value);
  
  // optional string logpath = 17;
  inline bool has_logpath() const;
  inline void clear_logpath();
  static const int kLogpathFieldNumber = 17;
  inline const ::std::string& logpath() const;
  inline void set_logpath(const ::std::string& value);
  inline void set_logpath(const char* value);
  inline void set_logpath(const char* value, size_t size);
  inline ::std::string* mutable_logpath();
  inline ::std::string* release_logpath();
  
  // @@protoc_insertion_point(class_scope:PBCfg_ServerCommon)
 private:
  inline void set_has_mysql();
  inline void clear_has_mysql();
  inline void set_has_clientnet();
  inline void clear_has_clientnet();
  inline void set_has_connectnet();
  inline void clear_has_connectnet();
  inline void set_has_servicenet();
  inline void clear_has_servicenet();
  inline void set_has_reportlog();
  inline void clear_has_reportlog();
  inline void set_has_gamelog();
  inline void clear_has_gamelog();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_luaentry();
  inline void clear_has_luaentry();
  inline void set_has_logicworldid();
  inline void clear_has_logicworldid();
  inline void set_has_localname();
  inline void clear_has_localname();
  inline void set_has_logprint();
  inline void clear_has_logprint();
  inline void set_has_logwarning();
  inline void clear_has_logwarning();
  inline void set_has_logerror();
  inline void clear_has_logerror();
  inline void set_has_dataflux();
  inline void clear_has_dataflux();
  inline void set_has_logpath();
  inline void clear_has_logpath();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_MysqlDB* mysql_;
  ::PBCfg_Net* clientnet_;
  ::PBCfg_NetTimeout* connectnet_;
  ::PBCfg_Net* servicenet_;
  ::PBCfg_Reportlog* reportlog_;
  ::PBCfg_Gamelog* gamelog_;
  ::PBCfg_Res* res_;
  ::std::string* luaentry_;
  ::std::string* localname_;
  ::google::protobuf::uint32 logicworldid_;
  bool logprint_;
  bool logwarning_;
  bool logerror_;
  bool dataflux_;
  ::std::string* logpath_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_ServerCommon* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_World : public ::google::protobuf::Message {
 public:
  PBCfg_World();
  virtual ~PBCfg_World();
  
  PBCfg_World(const PBCfg_World& from);
  
  inline PBCfg_World& operator=(const PBCfg_World& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_World& default_instance();
  
  void Swap(PBCfg_World* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_World* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_World& from);
  void MergeFrom(const PBCfg_World& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_ServerCommon common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline const ::PBCfg_ServerCommon& common() const;
  inline ::PBCfg_ServerCommon* mutable_common();
  inline ::PBCfg_ServerCommon* release_common();
  
  // optional uint32 onlinemax = 2;
  inline bool has_onlinemax() const;
  inline void clear_onlinemax();
  static const int kOnlinemaxFieldNumber = 2;
  inline ::google::protobuf::uint32 onlinemax() const;
  inline void set_onlinemax(::google::protobuf::uint32 value);
  
  // optional uint32 onlinetimeout = 3;
  inline bool has_onlinetimeout() const;
  inline void clear_onlinetimeout();
  static const int kOnlinetimeoutFieldNumber = 3;
  inline ::google::protobuf::uint32 onlinetimeout() const;
  inline void set_onlinetimeout(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBCfg_World)
 private:
  inline void set_has_common();
  inline void clear_has_common();
  inline void set_has_onlinemax();
  inline void clear_has_onlinemax();
  inline void set_has_onlinetimeout();
  inline void clear_has_onlinetimeout();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_ServerCommon* common_;
  ::google::protobuf::uint32 onlinemax_;
  ::google::protobuf::uint32 onlinetimeout_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_World* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Game : public ::google::protobuf::Message {
 public:
  PBCfg_Game();
  virtual ~PBCfg_Game();
  
  PBCfg_Game(const PBCfg_Game& from);
  
  inline PBCfg_Game& operator=(const PBCfg_Game& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Game& default_instance();
  
  void Swap(PBCfg_Game* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Game& from);
  void MergeFrom(const PBCfg_Game& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_ServerCommon common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline const ::PBCfg_ServerCommon& common() const;
  inline ::PBCfg_ServerCommon* mutable_common();
  inline ::PBCfg_ServerCommon* release_common();
  
  // optional uint32 mincount = 2;
  inline bool has_mincount() const;
  inline void clear_mincount();
  static const int kMincountFieldNumber = 2;
  inline ::google::protobuf::uint32 mincount() const;
  inline void set_mincount(::google::protobuf::uint32 value);
  
  // optional uint32 maxcount = 3;
  inline bool has_maxcount() const;
  inline void clear_maxcount();
  static const int kMaxcountFieldNumber = 3;
  inline ::google::protobuf::uint32 maxcount() const;
  inline void set_maxcount(::google::protobuf::uint32 value);
  
  // optional .PBCfg_Switch switch = 4;
  inline bool has_switch_() const;
  inline void clear_switch_();
  static const int kSwitchFieldNumber = 4;
  inline const ::PBCfg_Switch& switch_() const;
  inline ::PBCfg_Switch* mutable_switch_();
  inline ::PBCfg_Switch* release_switch_();
  
  // @@protoc_insertion_point(class_scope:PBCfg_Game)
 private:
  inline void set_has_common();
  inline void clear_has_common();
  inline void set_has_mincount();
  inline void clear_has_mincount();
  inline void set_has_maxcount();
  inline void clear_has_maxcount();
  inline void set_has_switch_();
  inline void clear_has_switch_();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_ServerCommon* common_;
  ::google::protobuf::uint32 mincount_;
  ::google::protobuf::uint32 maxcount_;
  ::PBCfg_Switch* switch__;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Game* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Login : public ::google::protobuf::Message {
 public:
  PBCfg_Login();
  virtual ~PBCfg_Login();
  
  PBCfg_Login(const PBCfg_Login& from);
  
  inline PBCfg_Login& operator=(const PBCfg_Login& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Login& default_instance();
  
  void Swap(PBCfg_Login* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Login& from);
  void MergeFrom(const PBCfg_Login& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_ServerCommon common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline const ::PBCfg_ServerCommon& common() const;
  inline ::PBCfg_ServerCommon* mutable_common();
  inline ::PBCfg_ServerCommon* release_common();
  
  // @@protoc_insertion_point(class_scope:PBCfg_Login)
 private:
  inline void set_has_common();
  inline void clear_has_common();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_ServerCommon* common_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Login* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Register : public ::google::protobuf::Message {
 public:
  PBCfg_Register();
  virtual ~PBCfg_Register();
  
  PBCfg_Register(const PBCfg_Register& from);
  
  inline PBCfg_Register& operator=(const PBCfg_Register& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Register& default_instance();
  
  void Swap(PBCfg_Register* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Register& from);
  void MergeFrom(const PBCfg_Register& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_ServerCommon common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline const ::PBCfg_ServerCommon& common() const;
  inline ::PBCfg_ServerCommon* mutable_common();
  inline ::PBCfg_ServerCommon* release_common();
  
  // @@protoc_insertion_point(class_scope:PBCfg_Register)
 private:
  inline void set_has_common();
  inline void clear_has_common();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_ServerCommon* common_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Register* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_DB : public ::google::protobuf::Message {
 public:
  PBCfg_DB();
  virtual ~PBCfg_DB();
  
  PBCfg_DB(const PBCfg_DB& from);
  
  inline PBCfg_DB& operator=(const PBCfg_DB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_DB& default_instance();
  
  void Swap(PBCfg_DB* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_DB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_DB& from);
  void MergeFrom(const PBCfg_DB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_ServerCommon common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline const ::PBCfg_ServerCommon& common() const;
  inline ::PBCfg_ServerCommon* mutable_common();
  inline ::PBCfg_ServerCommon* release_common();
  
  // @@protoc_insertion_point(class_scope:PBCfg_DB)
 private:
  inline void set_has_common();
  inline void clear_has_common();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_ServerCommon* common_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_DB* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Global : public ::google::protobuf::Message {
 public:
  PBCfg_Global();
  virtual ~PBCfg_Global();
  
  PBCfg_Global(const PBCfg_Global& from);
  
  inline PBCfg_Global& operator=(const PBCfg_Global& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Global& default_instance();
  
  void Swap(PBCfg_Global* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Global* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Global& from);
  void MergeFrom(const PBCfg_Global& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_ServerCommon common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline const ::PBCfg_ServerCommon& common() const;
  inline ::PBCfg_ServerCommon* mutable_common();
  inline ::PBCfg_ServerCommon* release_common();
  
  // @@protoc_insertion_point(class_scope:PBCfg_Global)
 private:
  inline void set_has_common();
  inline void clear_has_common();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_ServerCommon* common_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Global* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Bigworld : public ::google::protobuf::Message {
 public:
  PBCfg_Bigworld();
  virtual ~PBCfg_Bigworld();
  
  PBCfg_Bigworld(const PBCfg_Bigworld& from);
  
  inline PBCfg_Bigworld& operator=(const PBCfg_Bigworld& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Bigworld& default_instance();
  
  void Swap(PBCfg_Bigworld* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Bigworld* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Bigworld& from);
  void MergeFrom(const PBCfg_Bigworld& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_ServerCommon common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline const ::PBCfg_ServerCommon& common() const;
  inline ::PBCfg_ServerCommon* mutable_common();
  inline ::PBCfg_ServerCommon* release_common();
  
  // @@protoc_insertion_point(class_scope:PBCfg_Bigworld)
 private:
  inline void set_has_common();
  inline void clear_has_common();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_ServerCommon* common_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Bigworld* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Rooter : public ::google::protobuf::Message {
 public:
  PBCfg_Rooter();
  virtual ~PBCfg_Rooter();
  
  PBCfg_Rooter(const PBCfg_Rooter& from);
  
  inline PBCfg_Rooter& operator=(const PBCfg_Rooter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Rooter& default_instance();
  
  void Swap(PBCfg_Rooter* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Rooter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Rooter& from);
  void MergeFrom(const PBCfg_Rooter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_ServerCommon common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline const ::PBCfg_ServerCommon& common() const;
  inline ::PBCfg_ServerCommon* mutable_common();
  inline ::PBCfg_ServerCommon* release_common();
  
  // @@protoc_insertion_point(class_scope:PBCfg_Rooter)
 private:
  inline void set_has_common();
  inline void clear_has_common();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_ServerCommon* common_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Rooter* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Dip : public ::google::protobuf::Message {
 public:
  PBCfg_Dip();
  virtual ~PBCfg_Dip();
  
  PBCfg_Dip(const PBCfg_Dip& from);
  
  inline PBCfg_Dip& operator=(const PBCfg_Dip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Dip& default_instance();
  
  void Swap(PBCfg_Dip* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Dip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Dip& from);
  void MergeFrom(const PBCfg_Dip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_ServerCommon common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline const ::PBCfg_ServerCommon& common() const;
  inline ::PBCfg_ServerCommon* mutable_common();
  inline ::PBCfg_ServerCommon* release_common();
  
  // optional .PBCfg_MysqlDB mysql = 2;
  inline bool has_mysql() const;
  inline void clear_mysql();
  static const int kMysqlFieldNumber = 2;
  inline const ::PBCfg_MysqlDB& mysql() const;
  inline ::PBCfg_MysqlDB* mutable_mysql();
  inline ::PBCfg_MysqlDB* release_mysql();
  
  // optional string key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional uint32 timeout = 4;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  inline ::google::protobuf::uint32 timeout() const;
  inline void set_timeout(::google::protobuf::uint32 value);
  
  // optional string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional uint32 httpport = 6;
  inline bool has_httpport() const;
  inline void clear_httpport();
  static const int kHttpportFieldNumber = 6;
  inline ::google::protobuf::uint32 httpport() const;
  inline void set_httpport(::google::protobuf::uint32 value);
  
  // optional uint32 tcpport = 7;
  inline bool has_tcpport() const;
  inline void clear_tcpport();
  static const int kTcpportFieldNumber = 7;
  inline ::google::protobuf::uint32 tcpport() const;
  inline void set_tcpport(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBCfg_Dip)
 private:
  inline void set_has_common();
  inline void clear_has_common();
  inline void set_has_mysql();
  inline void clear_has_mysql();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_httpport();
  inline void clear_has_httpport();
  inline void set_has_tcpport();
  inline void clear_has_tcpport();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_ServerCommon* common_;
  ::PBCfg_MysqlDB* mysql_;
  ::std::string* key_;
  ::std::string* ip_;
  ::google::protobuf::uint32 timeout_;
  ::google::protobuf::uint32 httpport_;
  ::google::protobuf::uint32 tcpport_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Dip* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_RobotServer : public ::google::protobuf::Message {
 public:
  PBCfg_RobotServer();
  virtual ~PBCfg_RobotServer();
  
  PBCfg_RobotServer(const PBCfg_RobotServer& from);
  
  inline PBCfg_RobotServer& operator=(const PBCfg_RobotServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_RobotServer& default_instance();
  
  void Swap(PBCfg_RobotServer* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_RobotServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_RobotServer& from);
  void MergeFrom(const PBCfg_RobotServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_ServerCommon common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline const ::PBCfg_ServerCommon& common() const;
  inline ::PBCfg_ServerCommon* mutable_common();
  inline ::PBCfg_ServerCommon* release_common();
  
  // optional string accprefix = 2;
  inline bool has_accprefix() const;
  inline void clear_accprefix();
  static const int kAccprefixFieldNumber = 2;
  inline const ::std::string& accprefix() const;
  inline void set_accprefix(const ::std::string& value);
  inline void set_accprefix(const char* value);
  inline void set_accprefix(const char* value, size_t size);
  inline ::std::string* mutable_accprefix();
  inline ::std::string* release_accprefix();
  
  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional uint32 accpostfixIdx = 4;
  inline bool has_accpostfixidx() const;
  inline void clear_accpostfixidx();
  static const int kAccpostfixIdxFieldNumber = 4;
  inline ::google::protobuf::uint32 accpostfixidx() const;
  inline void set_accpostfixidx(::google::protobuf::uint32 value);
  
  // optional uint32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // optional uint32 interval = 6;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 6;
  inline ::google::protobuf::uint32 interval() const;
  inline void set_interval(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBCfg_RobotServer)
 private:
  inline void set_has_common();
  inline void clear_has_common();
  inline void set_has_accprefix();
  inline void clear_has_accprefix();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_accpostfixidx();
  inline void clear_has_accpostfixidx();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_interval();
  inline void clear_has_interval();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_ServerCommon* common_;
  ::std::string* accprefix_;
  ::std::string* password_;
  ::google::protobuf::uint32 accpostfixidx_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 interval_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_RobotServer* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_RobotClient : public ::google::protobuf::Message {
 public:
  PBCfg_RobotClient();
  virtual ~PBCfg_RobotClient();
  
  PBCfg_RobotClient(const PBCfg_RobotClient& from);
  
  inline PBCfg_RobotClient& operator=(const PBCfg_RobotClient& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_RobotClient& default_instance();
  
  void Swap(PBCfg_RobotClient* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_RobotClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_RobotClient& from);
  void MergeFrom(const PBCfg_RobotClient& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_ServerCommon common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline const ::PBCfg_ServerCommon& common() const;
  inline ::PBCfg_ServerCommon* mutable_common();
  inline ::PBCfg_ServerCommon* release_common();
  
  // @@protoc_insertion_point(class_scope:PBCfg_RobotClient)
 private:
  inline void set_has_common();
  inline void clear_has_common();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_ServerCommon* common_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_RobotClient* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Root : public ::google::protobuf::Message {
 public:
  PBCfg_Root();
  virtual ~PBCfg_Root();
  
  PBCfg_Root(const PBCfg_Root& from);
  
  inline PBCfg_Root& operator=(const PBCfg_Root& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Root& default_instance();
  
  void Swap(PBCfg_Root* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Root* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Root& from);
  void MergeFrom(const PBCfg_Root& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_ServerCommon defaultcommon = 1;
  inline bool has_defaultcommon() const;
  inline void clear_defaultcommon();
  static const int kDefaultcommonFieldNumber = 1;
  inline const ::PBCfg_ServerCommon& defaultcommon() const;
  inline ::PBCfg_ServerCommon* mutable_defaultcommon();
  inline ::PBCfg_ServerCommon* release_defaultcommon();
  
  // optional .PBCfg_World world = 101;
  inline bool has_world() const;
  inline void clear_world();
  static const int kWorldFieldNumber = 101;
  inline const ::PBCfg_World& world() const;
  inline ::PBCfg_World* mutable_world();
  inline ::PBCfg_World* release_world();
  
  // optional .PBCfg_Game game = 102;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 102;
  inline const ::PBCfg_Game& game() const;
  inline ::PBCfg_Game* mutable_game();
  inline ::PBCfg_Game* release_game();
  
  // optional .PBCfg_Login login = 103;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 103;
  inline const ::PBCfg_Login& login() const;
  inline ::PBCfg_Login* mutable_login();
  inline ::PBCfg_Login* release_login();
  
  // optional .PBCfg_Register register = 104;
  inline bool has_register_() const;
  inline void clear_register_();
  static const int kRegisterFieldNumber = 104;
  inline const ::PBCfg_Register& register_() const;
  inline ::PBCfg_Register* mutable_register_();
  inline ::PBCfg_Register* release_register_();
  
  // optional .PBCfg_DB db = 105;
  inline bool has_db() const;
  inline void clear_db();
  static const int kDbFieldNumber = 105;
  inline const ::PBCfg_DB& db() const;
  inline ::PBCfg_DB* mutable_db();
  inline ::PBCfg_DB* release_db();
  
  // optional .PBCfg_Global global = 106;
  inline bool has_global() const;
  inline void clear_global();
  static const int kGlobalFieldNumber = 106;
  inline const ::PBCfg_Global& global() const;
  inline ::PBCfg_Global* mutable_global();
  inline ::PBCfg_Global* release_global();
  
  // optional .PBCfg_Bigworld bigworld = 107;
  inline bool has_bigworld() const;
  inline void clear_bigworld();
  static const int kBigworldFieldNumber = 107;
  inline const ::PBCfg_Bigworld& bigworld() const;
  inline ::PBCfg_Bigworld* mutable_bigworld();
  inline ::PBCfg_Bigworld* release_bigworld();
  
  // optional .PBCfg_Dip dip = 108;
  inline bool has_dip() const;
  inline void clear_dip();
  static const int kDipFieldNumber = 108;
  inline const ::PBCfg_Dip& dip() const;
  inline ::PBCfg_Dip* mutable_dip();
  inline ::PBCfg_Dip* release_dip();
  
  // optional .PBCfg_Rooter rooter = 109;
  inline bool has_rooter() const;
  inline void clear_rooter();
  static const int kRooterFieldNumber = 109;
  inline const ::PBCfg_Rooter& rooter() const;
  inline ::PBCfg_Rooter* mutable_rooter();
  inline ::PBCfg_Rooter* release_rooter();
  
  // optional .PBCfg_RobotServer robotserver = 110;
  inline bool has_robotserver() const;
  inline void clear_robotserver();
  static const int kRobotserverFieldNumber = 110;
  inline const ::PBCfg_RobotServer& robotserver() const;
  inline ::PBCfg_RobotServer* mutable_robotserver();
  inline ::PBCfg_RobotServer* release_robotserver();
  
  // optional .PBCfg_RobotClient robotclient = 111;
  inline bool has_robotclient() const;
  inline void clear_robotclient();
  static const int kRobotclientFieldNumber = 111;
  inline const ::PBCfg_RobotClient& robotclient() const;
  inline ::PBCfg_RobotClient* mutable_robotclient();
  inline ::PBCfg_RobotClient* release_robotclient();
  
  // @@protoc_insertion_point(class_scope:PBCfg_Root)
 private:
  inline void set_has_defaultcommon();
  inline void clear_has_defaultcommon();
  inline void set_has_world();
  inline void clear_has_world();
  inline void set_has_game();
  inline void clear_has_game();
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_register_();
  inline void clear_has_register_();
  inline void set_has_db();
  inline void clear_has_db();
  inline void set_has_global();
  inline void clear_has_global();
  inline void set_has_bigworld();
  inline void clear_has_bigworld();
  inline void set_has_dip();
  inline void clear_has_dip();
  inline void set_has_rooter();
  inline void clear_has_rooter();
  inline void set_has_robotserver();
  inline void clear_has_robotserver();
  inline void set_has_robotclient();
  inline void clear_has_robotclient();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_ServerCommon* defaultcommon_;
  ::PBCfg_World* world_;
  ::PBCfg_Game* game_;
  ::PBCfg_Login* login_;
  ::PBCfg_Register* register__;
  ::PBCfg_DB* db_;
  ::PBCfg_Global* global_;
  ::PBCfg_Bigworld* bigworld_;
  ::PBCfg_Dip* dip_;
  ::PBCfg_Rooter* rooter_;
  ::PBCfg_RobotServer* robotserver_;
  ::PBCfg_RobotClient* robotclient_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Root* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Xls2Data : public ::google::protobuf::Message {
 public:
  PBCfg_Xls2Data();
  virtual ~PBCfg_Xls2Data();
  
  PBCfg_Xls2Data(const PBCfg_Xls2Data& from);
  
  inline PBCfg_Xls2Data& operator=(const PBCfg_Xls2Data& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Xls2Data& default_instance();
  
  void Swap(PBCfg_Xls2Data* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Xls2Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Xls2Data& from);
  void MergeFrom(const PBCfg_Xls2Data& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string datpath = 1;
  inline bool has_datpath() const;
  inline void clear_datpath();
  static const int kDatpathFieldNumber = 1;
  inline const ::std::string& datpath() const;
  inline void set_datpath(const ::std::string& value);
  inline void set_datpath(const char* value);
  inline void set_datpath(const char* value, size_t size);
  inline ::std::string* mutable_datpath();
  inline ::std::string* release_datpath();
  
  // optional string xlspath = 2;
  inline bool has_xlspath() const;
  inline void clear_xlspath();
  static const int kXlspathFieldNumber = 2;
  inline const ::std::string& xlspath() const;
  inline void set_xlspath(const ::std::string& value);
  inline void set_xlspath(const char* value);
  inline void set_xlspath(const char* value, size_t size);
  inline ::std::string* mutable_xlspath();
  inline ::std::string* release_xlspath();
  
  // optional string binpath = 3;
  inline bool has_binpath() const;
  inline void clear_binpath();
  static const int kBinpathFieldNumber = 3;
  inline const ::std::string& binpath() const;
  inline void set_binpath(const ::std::string& value);
  inline void set_binpath(const char* value);
  inline void set_binpath(const char* value, size_t size);
  inline ::std::string* mutable_binpath();
  inline ::std::string* release_binpath();
  
  // optional bool genxml = 4;
  inline bool has_genxml() const;
  inline void clear_genxml();
  static const int kGenxmlFieldNumber = 4;
  inline bool genxml() const;
  inline void set_genxml(bool value);
  
  // @@protoc_insertion_point(class_scope:PBCfg_Xls2Data)
 private:
  inline void set_has_datpath();
  inline void clear_has_datpath();
  inline void set_has_xlspath();
  inline void clear_has_xlspath();
  inline void set_has_binpath();
  inline void clear_has_binpath();
  inline void set_has_genxml();
  inline void clear_has_genxml();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* datpath_;
  ::std::string* xlspath_;
  ::std::string* binpath_;
  bool genxml_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Xls2Data* default_instance_;
};
// -------------------------------------------------------------------

class PBCfg_Record : public ::google::protobuf::Message {
 public:
  PBCfg_Record();
  virtual ~PBCfg_Record();
  
  PBCfg_Record(const PBCfg_Record& from);
  
  inline PBCfg_Record& operator=(const PBCfg_Record& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCfg_Record& default_instance();
  
  void Swap(PBCfg_Record* other);
  
  // implements Message ----------------------------------------------
  
  PBCfg_Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCfg_Record& from);
  void MergeFrom(const PBCfg_Record& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBCfg_MysqlDB mysql = 1;
  inline bool has_mysql() const;
  inline void clear_mysql();
  static const int kMysqlFieldNumber = 1;
  inline const ::PBCfg_MysqlDB& mysql() const;
  inline ::PBCfg_MysqlDB* mutable_mysql();
  inline ::PBCfg_MysqlDB* release_mysql();
  
  // optional uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // optional bool rundroptable = 3;
  inline bool has_rundroptable() const;
  inline void clear_rundroptable();
  static const int kRundroptableFieldNumber = 3;
  inline bool rundroptable() const;
  inline void set_rundroptable(bool value);
  
  // @@protoc_insertion_point(class_scope:PBCfg_Record)
 private:
  inline void set_has_mysql();
  inline void clear_has_mysql();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_rundroptable();
  inline void clear_has_rundroptable();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCfg_MysqlDB* mysql_;
  ::google::protobuf::uint32 port_;
  bool rundroptable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PBConfig_2eproto();
  friend void protobuf_AssignDesc_PBConfig_2eproto();
  friend void protobuf_ShutdownFile_PBConfig_2eproto();
  
  void InitAsDefaultInstance();
  static PBCfg_Record* default_instance_;
};
// ===================================================================


// ===================================================================

// PBCfg_MysqlDB

// optional string ip = 1;
inline bool PBCfg_MysqlDB::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_MysqlDB::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_MysqlDB::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_MysqlDB::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PBCfg_MysqlDB::ip() const {
  return *ip_;
}
inline void PBCfg_MysqlDB::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBCfg_MysqlDB::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBCfg_MysqlDB::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_MysqlDB::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* PBCfg_MysqlDB::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 port = 2;
inline bool PBCfg_MysqlDB::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_MysqlDB::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_MysqlDB::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_MysqlDB::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 PBCfg_MysqlDB::port() const {
  return port_;
}
inline void PBCfg_MysqlDB::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional string db = 3;
inline bool PBCfg_MysqlDB::has_db() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_MysqlDB::set_has_db() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_MysqlDB::clear_has_db() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_MysqlDB::clear_db() {
  if (db_ != &::google::protobuf::internal::kEmptyString) {
    db_->clear();
  }
  clear_has_db();
}
inline const ::std::string& PBCfg_MysqlDB::db() const {
  return *db_;
}
inline void PBCfg_MysqlDB::set_db(const ::std::string& value) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  db_->assign(value);
}
inline void PBCfg_MysqlDB::set_db(const char* value) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  db_->assign(value);
}
inline void PBCfg_MysqlDB::set_db(const char* value, size_t size) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  db_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_MysqlDB::mutable_db() {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  return db_;
}
inline ::std::string* PBCfg_MysqlDB::release_db() {
  clear_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = db_;
    db_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user = 4;
inline bool PBCfg_MysqlDB::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCfg_MysqlDB::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCfg_MysqlDB::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCfg_MysqlDB::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& PBCfg_MysqlDB::user() const {
  return *user_;
}
inline void PBCfg_MysqlDB::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void PBCfg_MysqlDB::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void PBCfg_MysqlDB::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_MysqlDB::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* PBCfg_MysqlDB::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 5;
inline bool PBCfg_MysqlDB::has_password() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCfg_MysqlDB::set_has_password() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCfg_MysqlDB::clear_has_password() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCfg_MysqlDB::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& PBCfg_MysqlDB::password() const {
  return *password_;
}
inline void PBCfg_MysqlDB::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void PBCfg_MysqlDB::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void PBCfg_MysqlDB::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_MysqlDB::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* PBCfg_MysqlDB::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBCfg_Res

// optional string datapath = 1;
inline bool PBCfg_Res::has_datapath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Res::set_has_datapath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Res::clear_has_datapath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Res::clear_datapath() {
  if (datapath_ != &::google::protobuf::internal::kEmptyString) {
    datapath_->clear();
  }
  clear_has_datapath();
}
inline const ::std::string& PBCfg_Res::datapath() const {
  return *datapath_;
}
inline void PBCfg_Res::set_datapath(const ::std::string& value) {
  set_has_datapath();
  if (datapath_ == &::google::protobuf::internal::kEmptyString) {
    datapath_ = new ::std::string;
  }
  datapath_->assign(value);
}
inline void PBCfg_Res::set_datapath(const char* value) {
  set_has_datapath();
  if (datapath_ == &::google::protobuf::internal::kEmptyString) {
    datapath_ = new ::std::string;
  }
  datapath_->assign(value);
}
inline void PBCfg_Res::set_datapath(const char* value, size_t size) {
  set_has_datapath();
  if (datapath_ == &::google::protobuf::internal::kEmptyString) {
    datapath_ = new ::std::string;
  }
  datapath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Res::mutable_datapath() {
  set_has_datapath();
  if (datapath_ == &::google::protobuf::internal::kEmptyString) {
    datapath_ = new ::std::string;
  }
  return datapath_;
}
inline ::std::string* PBCfg_Res::release_datapath() {
  clear_has_datapath();
  if (datapath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datapath_;
    datapath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string clientdatapath = 2;
inline bool PBCfg_Res::has_clientdatapath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_Res::set_has_clientdatapath() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_Res::clear_has_clientdatapath() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_Res::clear_clientdatapath() {
  if (clientdatapath_ != &::google::protobuf::internal::kEmptyString) {
    clientdatapath_->clear();
  }
  clear_has_clientdatapath();
}
inline const ::std::string& PBCfg_Res::clientdatapath() const {
  return *clientdatapath_;
}
inline void PBCfg_Res::set_clientdatapath(const ::std::string& value) {
  set_has_clientdatapath();
  if (clientdatapath_ == &::google::protobuf::internal::kEmptyString) {
    clientdatapath_ = new ::std::string;
  }
  clientdatapath_->assign(value);
}
inline void PBCfg_Res::set_clientdatapath(const char* value) {
  set_has_clientdatapath();
  if (clientdatapath_ == &::google::protobuf::internal::kEmptyString) {
    clientdatapath_ = new ::std::string;
  }
  clientdatapath_->assign(value);
}
inline void PBCfg_Res::set_clientdatapath(const char* value, size_t size) {
  set_has_clientdatapath();
  if (clientdatapath_ == &::google::protobuf::internal::kEmptyString) {
    clientdatapath_ = new ::std::string;
  }
  clientdatapath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Res::mutable_clientdatapath() {
  set_has_clientdatapath();
  if (clientdatapath_ == &::google::protobuf::internal::kEmptyString) {
    clientdatapath_ = new ::std::string;
  }
  return clientdatapath_;
}
inline ::std::string* PBCfg_Res::release_clientdatapath() {
  clear_has_clientdatapath();
  if (clientdatapath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientdatapath_;
    clientdatapath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string scenepath = 3;
inline bool PBCfg_Res::has_scenepath() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_Res::set_has_scenepath() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_Res::clear_has_scenepath() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_Res::clear_scenepath() {
  if (scenepath_ != &::google::protobuf::internal::kEmptyString) {
    scenepath_->clear();
  }
  clear_has_scenepath();
}
inline const ::std::string& PBCfg_Res::scenepath() const {
  return *scenepath_;
}
inline void PBCfg_Res::set_scenepath(const ::std::string& value) {
  set_has_scenepath();
  if (scenepath_ == &::google::protobuf::internal::kEmptyString) {
    scenepath_ = new ::std::string;
  }
  scenepath_->assign(value);
}
inline void PBCfg_Res::set_scenepath(const char* value) {
  set_has_scenepath();
  if (scenepath_ == &::google::protobuf::internal::kEmptyString) {
    scenepath_ = new ::std::string;
  }
  scenepath_->assign(value);
}
inline void PBCfg_Res::set_scenepath(const char* value, size_t size) {
  set_has_scenepath();
  if (scenepath_ == &::google::protobuf::internal::kEmptyString) {
    scenepath_ = new ::std::string;
  }
  scenepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Res::mutable_scenepath() {
  set_has_scenepath();
  if (scenepath_ == &::google::protobuf::internal::kEmptyString) {
    scenepath_ = new ::std::string;
  }
  return scenepath_;
}
inline ::std::string* PBCfg_Res::release_scenepath() {
  clear_has_scenepath();
  if (scenepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scenepath_;
    scenepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string aipath = 4;
inline bool PBCfg_Res::has_aipath() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCfg_Res::set_has_aipath() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCfg_Res::clear_has_aipath() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCfg_Res::clear_aipath() {
  if (aipath_ != &::google::protobuf::internal::kEmptyString) {
    aipath_->clear();
  }
  clear_has_aipath();
}
inline const ::std::string& PBCfg_Res::aipath() const {
  return *aipath_;
}
inline void PBCfg_Res::set_aipath(const ::std::string& value) {
  set_has_aipath();
  if (aipath_ == &::google::protobuf::internal::kEmptyString) {
    aipath_ = new ::std::string;
  }
  aipath_->assign(value);
}
inline void PBCfg_Res::set_aipath(const char* value) {
  set_has_aipath();
  if (aipath_ == &::google::protobuf::internal::kEmptyString) {
    aipath_ = new ::std::string;
  }
  aipath_->assign(value);
}
inline void PBCfg_Res::set_aipath(const char* value, size_t size) {
  set_has_aipath();
  if (aipath_ == &::google::protobuf::internal::kEmptyString) {
    aipath_ = new ::std::string;
  }
  aipath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Res::mutable_aipath() {
  set_has_aipath();
  if (aipath_ == &::google::protobuf::internal::kEmptyString) {
    aipath_ = new ::std::string;
  }
  return aipath_;
}
inline ::std::string* PBCfg_Res::release_aipath() {
  clear_has_aipath();
  if (aipath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aipath_;
    aipath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string scriptpath = 5;
inline bool PBCfg_Res::has_scriptpath() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCfg_Res::set_has_scriptpath() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCfg_Res::clear_has_scriptpath() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCfg_Res::clear_scriptpath() {
  if (scriptpath_ != &::google::protobuf::internal::kEmptyString) {
    scriptpath_->clear();
  }
  clear_has_scriptpath();
}
inline const ::std::string& PBCfg_Res::scriptpath() const {
  return *scriptpath_;
}
inline void PBCfg_Res::set_scriptpath(const ::std::string& value) {
  set_has_scriptpath();
  if (scriptpath_ == &::google::protobuf::internal::kEmptyString) {
    scriptpath_ = new ::std::string;
  }
  scriptpath_->assign(value);
}
inline void PBCfg_Res::set_scriptpath(const char* value) {
  set_has_scriptpath();
  if (scriptpath_ == &::google::protobuf::internal::kEmptyString) {
    scriptpath_ = new ::std::string;
  }
  scriptpath_->assign(value);
}
inline void PBCfg_Res::set_scriptpath(const char* value, size_t size) {
  set_has_scriptpath();
  if (scriptpath_ == &::google::protobuf::internal::kEmptyString) {
    scriptpath_ = new ::std::string;
  }
  scriptpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Res::mutable_scriptpath() {
  set_has_scriptpath();
  if (scriptpath_ == &::google::protobuf::internal::kEmptyString) {
    scriptpath_ = new ::std::string;
  }
  return scriptpath_;
}
inline ::std::string* PBCfg_Res::release_scriptpath() {
  clear_has_scriptpath();
  if (scriptpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scriptpath_;
    scriptpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBCfg_Gamelog

// optional bool sendgamelog = 5;
inline bool PBCfg_Gamelog::has_sendgamelog() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Gamelog::set_has_sendgamelog() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Gamelog::clear_has_sendgamelog() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Gamelog::clear_sendgamelog() {
  sendgamelog_ = false;
  clear_has_sendgamelog();
}
inline bool PBCfg_Gamelog::sendgamelog() const {
  return sendgamelog_;
}
inline void PBCfg_Gamelog::set_sendgamelog(bool value) {
  set_has_sendgamelog();
  sendgamelog_ = value;
}

// optional string ip = 6;
inline bool PBCfg_Gamelog::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_Gamelog::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_Gamelog::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_Gamelog::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PBCfg_Gamelog::ip() const {
  return *ip_;
}
inline void PBCfg_Gamelog::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBCfg_Gamelog::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBCfg_Gamelog::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Gamelog::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* PBCfg_Gamelog::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 port = 7;
inline bool PBCfg_Gamelog::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_Gamelog::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_Gamelog::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_Gamelog::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 PBCfg_Gamelog::port() const {
  return port_;
}
inline void PBCfg_Gamelog::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// PBCfg_Reportlog

// optional bool sendloadlog = 1;
inline bool PBCfg_Reportlog::has_sendloadlog() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Reportlog::set_has_sendloadlog() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Reportlog::clear_has_sendloadlog() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Reportlog::clear_sendloadlog() {
  sendloadlog_ = false;
  clear_has_sendloadlog();
}
inline bool PBCfg_Reportlog::sendloadlog() const {
  return sendloadlog_;
}
inline void PBCfg_Reportlog::set_sendloadlog(bool value) {
  set_has_sendloadlog();
  sendloadlog_ = value;
}

// optional string ip = 2;
inline bool PBCfg_Reportlog::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_Reportlog::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_Reportlog::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_Reportlog::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PBCfg_Reportlog::ip() const {
  return *ip_;
}
inline void PBCfg_Reportlog::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBCfg_Reportlog::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBCfg_Reportlog::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Reportlog::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* PBCfg_Reportlog::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 port = 3;
inline bool PBCfg_Reportlog::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_Reportlog::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_Reportlog::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_Reportlog::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 PBCfg_Reportlog::port() const {
  return port_;
}
inline void PBCfg_Reportlog::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional string sep = 4;
inline bool PBCfg_Reportlog::has_sep() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCfg_Reportlog::set_has_sep() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCfg_Reportlog::clear_has_sep() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCfg_Reportlog::clear_sep() {
  if (sep_ != &::google::protobuf::internal::kEmptyString) {
    sep_->clear();
  }
  clear_has_sep();
}
inline const ::std::string& PBCfg_Reportlog::sep() const {
  return *sep_;
}
inline void PBCfg_Reportlog::set_sep(const ::std::string& value) {
  set_has_sep();
  if (sep_ == &::google::protobuf::internal::kEmptyString) {
    sep_ = new ::std::string;
  }
  sep_->assign(value);
}
inline void PBCfg_Reportlog::set_sep(const char* value) {
  set_has_sep();
  if (sep_ == &::google::protobuf::internal::kEmptyString) {
    sep_ = new ::std::string;
  }
  sep_->assign(value);
}
inline void PBCfg_Reportlog::set_sep(const char* value, size_t size) {
  set_has_sep();
  if (sep_ == &::google::protobuf::internal::kEmptyString) {
    sep_ = new ::std::string;
  }
  sep_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Reportlog::mutable_sep() {
  set_has_sep();
  if (sep_ == &::google::protobuf::internal::kEmptyString) {
    sep_ = new ::std::string;
  }
  return sep_;
}
inline ::std::string* PBCfg_Reportlog::release_sep() {
  clear_has_sep();
  if (sep_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sep_;
    sep_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBCfg_Switch

// optional bool gm = 1;
inline bool PBCfg_Switch::has_gm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Switch::set_has_gm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Switch::clear_has_gm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Switch::clear_gm() {
  gm_ = false;
  clear_has_gm();
}
inline bool PBCfg_Switch::gm() const {
  return gm_;
}
inline void PBCfg_Switch::set_gm(bool value) {
  set_has_gm();
  gm_ = value;
}

// optional bool adult = 2;
inline bool PBCfg_Switch::has_adult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_Switch::set_has_adult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_Switch::clear_has_adult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_Switch::clear_adult() {
  adult_ = false;
  clear_has_adult();
}
inline bool PBCfg_Switch::adult() const {
  return adult_;
}
inline void PBCfg_Switch::set_adult(bool value) {
  set_has_adult();
  adult_ = value;
}

// optional bool debugmsg = 3;
inline bool PBCfg_Switch::has_debugmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_Switch::set_has_debugmsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_Switch::clear_has_debugmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_Switch::clear_debugmsg() {
  debugmsg_ = false;
  clear_has_debugmsg();
}
inline bool PBCfg_Switch::debugmsg() const {
  return debugmsg_;
}
inline void PBCfg_Switch::set_debugmsg(bool value) {
  set_has_debugmsg();
  debugmsg_ = value;
}

// -------------------------------------------------------------------

// PBCfg_NetTimeout

// optional uint32 connnecttimeout = 1;
inline bool PBCfg_NetTimeout::has_connnecttimeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_NetTimeout::set_has_connnecttimeout() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_NetTimeout::clear_has_connnecttimeout() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_NetTimeout::clear_connnecttimeout() {
  connnecttimeout_ = 0u;
  clear_has_connnecttimeout();
}
inline ::google::protobuf::uint32 PBCfg_NetTimeout::connnecttimeout() const {
  return connnecttimeout_;
}
inline void PBCfg_NetTimeout::set_connnecttimeout(::google::protobuf::uint32 value) {
  set_has_connnecttimeout();
  connnecttimeout_ = value;
}

// optional uint32 readtimeout = 2;
inline bool PBCfg_NetTimeout::has_readtimeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_NetTimeout::set_has_readtimeout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_NetTimeout::clear_has_readtimeout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_NetTimeout::clear_readtimeout() {
  readtimeout_ = 0u;
  clear_has_readtimeout();
}
inline ::google::protobuf::uint32 PBCfg_NetTimeout::readtimeout() const {
  return readtimeout_;
}
inline void PBCfg_NetTimeout::set_readtimeout(::google::protobuf::uint32 value) {
  set_has_readtimeout();
  readtimeout_ = value;
}

// optional uint32 writetimeout = 3;
inline bool PBCfg_NetTimeout::has_writetimeout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_NetTimeout::set_has_writetimeout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_NetTimeout::clear_has_writetimeout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_NetTimeout::clear_writetimeout() {
  writetimeout_ = 0u;
  clear_has_writetimeout();
}
inline ::google::protobuf::uint32 PBCfg_NetTimeout::writetimeout() const {
  return writetimeout_;
}
inline void PBCfg_NetTimeout::set_writetimeout(::google::protobuf::uint32 value) {
  set_has_writetimeout();
  writetimeout_ = value;
}

// -------------------------------------------------------------------

// PBCfg_Net

// optional string ip = 1;
inline bool PBCfg_Net::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Net::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Net::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Net::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PBCfg_Net::ip() const {
  return *ip_;
}
inline void PBCfg_Net::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBCfg_Net::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBCfg_Net::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Net::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* PBCfg_Net::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 port = 2;
inline bool PBCfg_Net::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_Net::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_Net::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_Net::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 PBCfg_Net::port() const {
  return port_;
}
inline void PBCfg_Net::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional uint32 connnecttimeout = 3;
inline bool PBCfg_Net::has_connnecttimeout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_Net::set_has_connnecttimeout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_Net::clear_has_connnecttimeout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_Net::clear_connnecttimeout() {
  connnecttimeout_ = 0u;
  clear_has_connnecttimeout();
}
inline ::google::protobuf::uint32 PBCfg_Net::connnecttimeout() const {
  return connnecttimeout_;
}
inline void PBCfg_Net::set_connnecttimeout(::google::protobuf::uint32 value) {
  set_has_connnecttimeout();
  connnecttimeout_ = value;
}

// optional uint32 readtimeout = 4;
inline bool PBCfg_Net::has_readtimeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCfg_Net::set_has_readtimeout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCfg_Net::clear_has_readtimeout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCfg_Net::clear_readtimeout() {
  readtimeout_ = 0u;
  clear_has_readtimeout();
}
inline ::google::protobuf::uint32 PBCfg_Net::readtimeout() const {
  return readtimeout_;
}
inline void PBCfg_Net::set_readtimeout(::google::protobuf::uint32 value) {
  set_has_readtimeout();
  readtimeout_ = value;
}

// optional uint32 writetimeout = 5;
inline bool PBCfg_Net::has_writetimeout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCfg_Net::set_has_writetimeout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCfg_Net::clear_has_writetimeout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCfg_Net::clear_writetimeout() {
  writetimeout_ = 0u;
  clear_has_writetimeout();
}
inline ::google::protobuf::uint32 PBCfg_Net::writetimeout() const {
  return writetimeout_;
}
inline void PBCfg_Net::set_writetimeout(::google::protobuf::uint32 value) {
  set_has_writetimeout();
  writetimeout_ = value;
}

// -------------------------------------------------------------------

// PBCfg_ServerCommon

// optional .PBCfg_MysqlDB mysql = 1;
inline bool PBCfg_ServerCommon::has_mysql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_ServerCommon::set_has_mysql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_ServerCommon::clear_has_mysql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_ServerCommon::clear_mysql() {
  if (mysql_ != NULL) mysql_->::PBCfg_MysqlDB::Clear();
  clear_has_mysql();
}
inline const ::PBCfg_MysqlDB& PBCfg_ServerCommon::mysql() const {
  return mysql_ != NULL ? *mysql_ : *default_instance_->mysql_;
}
inline ::PBCfg_MysqlDB* PBCfg_ServerCommon::mutable_mysql() {
  set_has_mysql();
  if (mysql_ == NULL) mysql_ = new ::PBCfg_MysqlDB;
  return mysql_;
}
inline ::PBCfg_MysqlDB* PBCfg_ServerCommon::release_mysql() {
  clear_has_mysql();
  ::PBCfg_MysqlDB* temp = mysql_;
  mysql_ = NULL;
  return temp;
}

// optional .PBCfg_Net clientnet = 2;
inline bool PBCfg_ServerCommon::has_clientnet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_ServerCommon::set_has_clientnet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_ServerCommon::clear_has_clientnet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_ServerCommon::clear_clientnet() {
  if (clientnet_ != NULL) clientnet_->::PBCfg_Net::Clear();
  clear_has_clientnet();
}
inline const ::PBCfg_Net& PBCfg_ServerCommon::clientnet() const {
  return clientnet_ != NULL ? *clientnet_ : *default_instance_->clientnet_;
}
inline ::PBCfg_Net* PBCfg_ServerCommon::mutable_clientnet() {
  set_has_clientnet();
  if (clientnet_ == NULL) clientnet_ = new ::PBCfg_Net;
  return clientnet_;
}
inline ::PBCfg_Net* PBCfg_ServerCommon::release_clientnet() {
  clear_has_clientnet();
  ::PBCfg_Net* temp = clientnet_;
  clientnet_ = NULL;
  return temp;
}

// optional .PBCfg_NetTimeout connectnet = 3;
inline bool PBCfg_ServerCommon::has_connectnet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_ServerCommon::set_has_connectnet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_ServerCommon::clear_has_connectnet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_ServerCommon::clear_connectnet() {
  if (connectnet_ != NULL) connectnet_->::PBCfg_NetTimeout::Clear();
  clear_has_connectnet();
}
inline const ::PBCfg_NetTimeout& PBCfg_ServerCommon::connectnet() const {
  return connectnet_ != NULL ? *connectnet_ : *default_instance_->connectnet_;
}
inline ::PBCfg_NetTimeout* PBCfg_ServerCommon::mutable_connectnet() {
  set_has_connectnet();
  if (connectnet_ == NULL) connectnet_ = new ::PBCfg_NetTimeout;
  return connectnet_;
}
inline ::PBCfg_NetTimeout* PBCfg_ServerCommon::release_connectnet() {
  clear_has_connectnet();
  ::PBCfg_NetTimeout* temp = connectnet_;
  connectnet_ = NULL;
  return temp;
}

// optional .PBCfg_Net servicenet = 4;
inline bool PBCfg_ServerCommon::has_servicenet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCfg_ServerCommon::set_has_servicenet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCfg_ServerCommon::clear_has_servicenet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCfg_ServerCommon::clear_servicenet() {
  if (servicenet_ != NULL) servicenet_->::PBCfg_Net::Clear();
  clear_has_servicenet();
}
inline const ::PBCfg_Net& PBCfg_ServerCommon::servicenet() const {
  return servicenet_ != NULL ? *servicenet_ : *default_instance_->servicenet_;
}
inline ::PBCfg_Net* PBCfg_ServerCommon::mutable_servicenet() {
  set_has_servicenet();
  if (servicenet_ == NULL) servicenet_ = new ::PBCfg_Net;
  return servicenet_;
}
inline ::PBCfg_Net* PBCfg_ServerCommon::release_servicenet() {
  clear_has_servicenet();
  ::PBCfg_Net* temp = servicenet_;
  servicenet_ = NULL;
  return temp;
}

// optional .PBCfg_Reportlog reportlog = 5;
inline bool PBCfg_ServerCommon::has_reportlog() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCfg_ServerCommon::set_has_reportlog() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCfg_ServerCommon::clear_has_reportlog() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCfg_ServerCommon::clear_reportlog() {
  if (reportlog_ != NULL) reportlog_->::PBCfg_Reportlog::Clear();
  clear_has_reportlog();
}
inline const ::PBCfg_Reportlog& PBCfg_ServerCommon::reportlog() const {
  return reportlog_ != NULL ? *reportlog_ : *default_instance_->reportlog_;
}
inline ::PBCfg_Reportlog* PBCfg_ServerCommon::mutable_reportlog() {
  set_has_reportlog();
  if (reportlog_ == NULL) reportlog_ = new ::PBCfg_Reportlog;
  return reportlog_;
}
inline ::PBCfg_Reportlog* PBCfg_ServerCommon::release_reportlog() {
  clear_has_reportlog();
  ::PBCfg_Reportlog* temp = reportlog_;
  reportlog_ = NULL;
  return temp;
}

// optional .PBCfg_Gamelog gamelog = 6;
inline bool PBCfg_ServerCommon::has_gamelog() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBCfg_ServerCommon::set_has_gamelog() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBCfg_ServerCommon::clear_has_gamelog() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBCfg_ServerCommon::clear_gamelog() {
  if (gamelog_ != NULL) gamelog_->::PBCfg_Gamelog::Clear();
  clear_has_gamelog();
}
inline const ::PBCfg_Gamelog& PBCfg_ServerCommon::gamelog() const {
  return gamelog_ != NULL ? *gamelog_ : *default_instance_->gamelog_;
}
inline ::PBCfg_Gamelog* PBCfg_ServerCommon::mutable_gamelog() {
  set_has_gamelog();
  if (gamelog_ == NULL) gamelog_ = new ::PBCfg_Gamelog;
  return gamelog_;
}
inline ::PBCfg_Gamelog* PBCfg_ServerCommon::release_gamelog() {
  clear_has_gamelog();
  ::PBCfg_Gamelog* temp = gamelog_;
  gamelog_ = NULL;
  return temp;
}

// optional .PBCfg_Res res = 7;
inline bool PBCfg_ServerCommon::has_res() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBCfg_ServerCommon::set_has_res() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBCfg_ServerCommon::clear_has_res() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBCfg_ServerCommon::clear_res() {
  if (res_ != NULL) res_->::PBCfg_Res::Clear();
  clear_has_res();
}
inline const ::PBCfg_Res& PBCfg_ServerCommon::res() const {
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
inline ::PBCfg_Res* PBCfg_ServerCommon::mutable_res() {
  set_has_res();
  if (res_ == NULL) res_ = new ::PBCfg_Res;
  return res_;
}
inline ::PBCfg_Res* PBCfg_ServerCommon::release_res() {
  clear_has_res();
  ::PBCfg_Res* temp = res_;
  res_ = NULL;
  return temp;
}

// optional string luaentry = 10;
inline bool PBCfg_ServerCommon::has_luaentry() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBCfg_ServerCommon::set_has_luaentry() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBCfg_ServerCommon::clear_has_luaentry() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBCfg_ServerCommon::clear_luaentry() {
  if (luaentry_ != &::google::protobuf::internal::kEmptyString) {
    luaentry_->clear();
  }
  clear_has_luaentry();
}
inline const ::std::string& PBCfg_ServerCommon::luaentry() const {
  return *luaentry_;
}
inline void PBCfg_ServerCommon::set_luaentry(const ::std::string& value) {
  set_has_luaentry();
  if (luaentry_ == &::google::protobuf::internal::kEmptyString) {
    luaentry_ = new ::std::string;
  }
  luaentry_->assign(value);
}
inline void PBCfg_ServerCommon::set_luaentry(const char* value) {
  set_has_luaentry();
  if (luaentry_ == &::google::protobuf::internal::kEmptyString) {
    luaentry_ = new ::std::string;
  }
  luaentry_->assign(value);
}
inline void PBCfg_ServerCommon::set_luaentry(const char* value, size_t size) {
  set_has_luaentry();
  if (luaentry_ == &::google::protobuf::internal::kEmptyString) {
    luaentry_ = new ::std::string;
  }
  luaentry_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_ServerCommon::mutable_luaentry() {
  set_has_luaentry();
  if (luaentry_ == &::google::protobuf::internal::kEmptyString) {
    luaentry_ = new ::std::string;
  }
  return luaentry_;
}
inline ::std::string* PBCfg_ServerCommon::release_luaentry() {
  clear_has_luaentry();
  if (luaentry_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = luaentry_;
    luaentry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 logicworldid = 11;
inline bool PBCfg_ServerCommon::has_logicworldid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBCfg_ServerCommon::set_has_logicworldid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBCfg_ServerCommon::clear_has_logicworldid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBCfg_ServerCommon::clear_logicworldid() {
  logicworldid_ = 0u;
  clear_has_logicworldid();
}
inline ::google::protobuf::uint32 PBCfg_ServerCommon::logicworldid() const {
  return logicworldid_;
}
inline void PBCfg_ServerCommon::set_logicworldid(::google::protobuf::uint32 value) {
  set_has_logicworldid();
  logicworldid_ = value;
}

// optional string localname = 12;
inline bool PBCfg_ServerCommon::has_localname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBCfg_ServerCommon::set_has_localname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBCfg_ServerCommon::clear_has_localname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBCfg_ServerCommon::clear_localname() {
  if (localname_ != &::google::protobuf::internal::kEmptyString) {
    localname_->clear();
  }
  clear_has_localname();
}
inline const ::std::string& PBCfg_ServerCommon::localname() const {
  return *localname_;
}
inline void PBCfg_ServerCommon::set_localname(const ::std::string& value) {
  set_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    localname_ = new ::std::string;
  }
  localname_->assign(value);
}
inline void PBCfg_ServerCommon::set_localname(const char* value) {
  set_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    localname_ = new ::std::string;
  }
  localname_->assign(value);
}
inline void PBCfg_ServerCommon::set_localname(const char* value, size_t size) {
  set_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    localname_ = new ::std::string;
  }
  localname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_ServerCommon::mutable_localname() {
  set_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    localname_ = new ::std::string;
  }
  return localname_;
}
inline ::std::string* PBCfg_ServerCommon::release_localname() {
  clear_has_localname();
  if (localname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = localname_;
    localname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool logprint = 13;
inline bool PBCfg_ServerCommon::has_logprint() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBCfg_ServerCommon::set_has_logprint() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBCfg_ServerCommon::clear_has_logprint() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBCfg_ServerCommon::clear_logprint() {
  logprint_ = false;
  clear_has_logprint();
}
inline bool PBCfg_ServerCommon::logprint() const {
  return logprint_;
}
inline void PBCfg_ServerCommon::set_logprint(bool value) {
  set_has_logprint();
  logprint_ = value;
}

// optional bool logwarning = 14;
inline bool PBCfg_ServerCommon::has_logwarning() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PBCfg_ServerCommon::set_has_logwarning() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PBCfg_ServerCommon::clear_has_logwarning() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PBCfg_ServerCommon::clear_logwarning() {
  logwarning_ = false;
  clear_has_logwarning();
}
inline bool PBCfg_ServerCommon::logwarning() const {
  return logwarning_;
}
inline void PBCfg_ServerCommon::set_logwarning(bool value) {
  set_has_logwarning();
  logwarning_ = value;
}

// optional bool logerror = 15;
inline bool PBCfg_ServerCommon::has_logerror() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PBCfg_ServerCommon::set_has_logerror() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PBCfg_ServerCommon::clear_has_logerror() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PBCfg_ServerCommon::clear_logerror() {
  logerror_ = false;
  clear_has_logerror();
}
inline bool PBCfg_ServerCommon::logerror() const {
  return logerror_;
}
inline void PBCfg_ServerCommon::set_logerror(bool value) {
  set_has_logerror();
  logerror_ = value;
}

// optional bool dataflux = 16;
inline bool PBCfg_ServerCommon::has_dataflux() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PBCfg_ServerCommon::set_has_dataflux() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PBCfg_ServerCommon::clear_has_dataflux() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PBCfg_ServerCommon::clear_dataflux() {
  dataflux_ = false;
  clear_has_dataflux();
}
inline bool PBCfg_ServerCommon::dataflux() const {
  return dataflux_;
}
inline void PBCfg_ServerCommon::set_dataflux(bool value) {
  set_has_dataflux();
  dataflux_ = value;
}

// optional string logpath = 17;
inline bool PBCfg_ServerCommon::has_logpath() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PBCfg_ServerCommon::set_has_logpath() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PBCfg_ServerCommon::clear_has_logpath() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PBCfg_ServerCommon::clear_logpath() {
  if (logpath_ != &::google::protobuf::internal::kEmptyString) {
    logpath_->clear();
  }
  clear_has_logpath();
}
inline const ::std::string& PBCfg_ServerCommon::logpath() const {
  return *logpath_;
}
inline void PBCfg_ServerCommon::set_logpath(const ::std::string& value) {
  set_has_logpath();
  if (logpath_ == &::google::protobuf::internal::kEmptyString) {
    logpath_ = new ::std::string;
  }
  logpath_->assign(value);
}
inline void PBCfg_ServerCommon::set_logpath(const char* value) {
  set_has_logpath();
  if (logpath_ == &::google::protobuf::internal::kEmptyString) {
    logpath_ = new ::std::string;
  }
  logpath_->assign(value);
}
inline void PBCfg_ServerCommon::set_logpath(const char* value, size_t size) {
  set_has_logpath();
  if (logpath_ == &::google::protobuf::internal::kEmptyString) {
    logpath_ = new ::std::string;
  }
  logpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_ServerCommon::mutable_logpath() {
  set_has_logpath();
  if (logpath_ == &::google::protobuf::internal::kEmptyString) {
    logpath_ = new ::std::string;
  }
  return logpath_;
}
inline ::std::string* PBCfg_ServerCommon::release_logpath() {
  clear_has_logpath();
  if (logpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logpath_;
    logpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBCfg_World

// optional .PBCfg_ServerCommon common = 1;
inline bool PBCfg_World::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_World::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_World::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_World::clear_common() {
  if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
  clear_has_common();
}
inline const ::PBCfg_ServerCommon& PBCfg_World::common() const {
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::PBCfg_ServerCommon* PBCfg_World::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::PBCfg_ServerCommon;
  return common_;
}
inline ::PBCfg_ServerCommon* PBCfg_World::release_common() {
  clear_has_common();
  ::PBCfg_ServerCommon* temp = common_;
  common_ = NULL;
  return temp;
}

// optional uint32 onlinemax = 2;
inline bool PBCfg_World::has_onlinemax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_World::set_has_onlinemax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_World::clear_has_onlinemax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_World::clear_onlinemax() {
  onlinemax_ = 0u;
  clear_has_onlinemax();
}
inline ::google::protobuf::uint32 PBCfg_World::onlinemax() const {
  return onlinemax_;
}
inline void PBCfg_World::set_onlinemax(::google::protobuf::uint32 value) {
  set_has_onlinemax();
  onlinemax_ = value;
}

// optional uint32 onlinetimeout = 3;
inline bool PBCfg_World::has_onlinetimeout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_World::set_has_onlinetimeout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_World::clear_has_onlinetimeout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_World::clear_onlinetimeout() {
  onlinetimeout_ = 0u;
  clear_has_onlinetimeout();
}
inline ::google::protobuf::uint32 PBCfg_World::onlinetimeout() const {
  return onlinetimeout_;
}
inline void PBCfg_World::set_onlinetimeout(::google::protobuf::uint32 value) {
  set_has_onlinetimeout();
  onlinetimeout_ = value;
}

// -------------------------------------------------------------------

// PBCfg_Game

// optional .PBCfg_ServerCommon common = 1;
inline bool PBCfg_Game::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Game::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Game::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Game::clear_common() {
  if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
  clear_has_common();
}
inline const ::PBCfg_ServerCommon& PBCfg_Game::common() const {
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Game::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::PBCfg_ServerCommon;
  return common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Game::release_common() {
  clear_has_common();
  ::PBCfg_ServerCommon* temp = common_;
  common_ = NULL;
  return temp;
}

// optional uint32 mincount = 2;
inline bool PBCfg_Game::has_mincount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_Game::set_has_mincount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_Game::clear_has_mincount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_Game::clear_mincount() {
  mincount_ = 0u;
  clear_has_mincount();
}
inline ::google::protobuf::uint32 PBCfg_Game::mincount() const {
  return mincount_;
}
inline void PBCfg_Game::set_mincount(::google::protobuf::uint32 value) {
  set_has_mincount();
  mincount_ = value;
}

// optional uint32 maxcount = 3;
inline bool PBCfg_Game::has_maxcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_Game::set_has_maxcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_Game::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_Game::clear_maxcount() {
  maxcount_ = 0u;
  clear_has_maxcount();
}
inline ::google::protobuf::uint32 PBCfg_Game::maxcount() const {
  return maxcount_;
}
inline void PBCfg_Game::set_maxcount(::google::protobuf::uint32 value) {
  set_has_maxcount();
  maxcount_ = value;
}

// optional .PBCfg_Switch switch = 4;
inline bool PBCfg_Game::has_switch_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCfg_Game::set_has_switch_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCfg_Game::clear_has_switch_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCfg_Game::clear_switch_() {
  if (switch__ != NULL) switch__->::PBCfg_Switch::Clear();
  clear_has_switch_();
}
inline const ::PBCfg_Switch& PBCfg_Game::switch_() const {
  return switch__ != NULL ? *switch__ : *default_instance_->switch__;
}
inline ::PBCfg_Switch* PBCfg_Game::mutable_switch_() {
  set_has_switch_();
  if (switch__ == NULL) switch__ = new ::PBCfg_Switch;
  return switch__;
}
inline ::PBCfg_Switch* PBCfg_Game::release_switch_() {
  clear_has_switch_();
  ::PBCfg_Switch* temp = switch__;
  switch__ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBCfg_Login

// optional .PBCfg_ServerCommon common = 1;
inline bool PBCfg_Login::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Login::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Login::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Login::clear_common() {
  if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
  clear_has_common();
}
inline const ::PBCfg_ServerCommon& PBCfg_Login::common() const {
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Login::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::PBCfg_ServerCommon;
  return common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Login::release_common() {
  clear_has_common();
  ::PBCfg_ServerCommon* temp = common_;
  common_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBCfg_Register

// optional .PBCfg_ServerCommon common = 1;
inline bool PBCfg_Register::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Register::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Register::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Register::clear_common() {
  if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
  clear_has_common();
}
inline const ::PBCfg_ServerCommon& PBCfg_Register::common() const {
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Register::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::PBCfg_ServerCommon;
  return common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Register::release_common() {
  clear_has_common();
  ::PBCfg_ServerCommon* temp = common_;
  common_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBCfg_DB

// optional .PBCfg_ServerCommon common = 1;
inline bool PBCfg_DB::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_DB::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_DB::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_DB::clear_common() {
  if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
  clear_has_common();
}
inline const ::PBCfg_ServerCommon& PBCfg_DB::common() const {
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::PBCfg_ServerCommon* PBCfg_DB::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::PBCfg_ServerCommon;
  return common_;
}
inline ::PBCfg_ServerCommon* PBCfg_DB::release_common() {
  clear_has_common();
  ::PBCfg_ServerCommon* temp = common_;
  common_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBCfg_Global

// optional .PBCfg_ServerCommon common = 1;
inline bool PBCfg_Global::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Global::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Global::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Global::clear_common() {
  if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
  clear_has_common();
}
inline const ::PBCfg_ServerCommon& PBCfg_Global::common() const {
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Global::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::PBCfg_ServerCommon;
  return common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Global::release_common() {
  clear_has_common();
  ::PBCfg_ServerCommon* temp = common_;
  common_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBCfg_Bigworld

// optional .PBCfg_ServerCommon common = 1;
inline bool PBCfg_Bigworld::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Bigworld::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Bigworld::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Bigworld::clear_common() {
  if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
  clear_has_common();
}
inline const ::PBCfg_ServerCommon& PBCfg_Bigworld::common() const {
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Bigworld::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::PBCfg_ServerCommon;
  return common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Bigworld::release_common() {
  clear_has_common();
  ::PBCfg_ServerCommon* temp = common_;
  common_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBCfg_Rooter

// optional .PBCfg_ServerCommon common = 1;
inline bool PBCfg_Rooter::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Rooter::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Rooter::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Rooter::clear_common() {
  if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
  clear_has_common();
}
inline const ::PBCfg_ServerCommon& PBCfg_Rooter::common() const {
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Rooter::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::PBCfg_ServerCommon;
  return common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Rooter::release_common() {
  clear_has_common();
  ::PBCfg_ServerCommon* temp = common_;
  common_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBCfg_Dip

// optional .PBCfg_ServerCommon common = 1;
inline bool PBCfg_Dip::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Dip::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Dip::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Dip::clear_common() {
  if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
  clear_has_common();
}
inline const ::PBCfg_ServerCommon& PBCfg_Dip::common() const {
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Dip::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::PBCfg_ServerCommon;
  return common_;
}
inline ::PBCfg_ServerCommon* PBCfg_Dip::release_common() {
  clear_has_common();
  ::PBCfg_ServerCommon* temp = common_;
  common_ = NULL;
  return temp;
}

// optional .PBCfg_MysqlDB mysql = 2;
inline bool PBCfg_Dip::has_mysql() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_Dip::set_has_mysql() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_Dip::clear_has_mysql() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_Dip::clear_mysql() {
  if (mysql_ != NULL) mysql_->::PBCfg_MysqlDB::Clear();
  clear_has_mysql();
}
inline const ::PBCfg_MysqlDB& PBCfg_Dip::mysql() const {
  return mysql_ != NULL ? *mysql_ : *default_instance_->mysql_;
}
inline ::PBCfg_MysqlDB* PBCfg_Dip::mutable_mysql() {
  set_has_mysql();
  if (mysql_ == NULL) mysql_ = new ::PBCfg_MysqlDB;
  return mysql_;
}
inline ::PBCfg_MysqlDB* PBCfg_Dip::release_mysql() {
  clear_has_mysql();
  ::PBCfg_MysqlDB* temp = mysql_;
  mysql_ = NULL;
  return temp;
}

// optional string key = 3;
inline bool PBCfg_Dip::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_Dip::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_Dip::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_Dip::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PBCfg_Dip::key() const {
  return *key_;
}
inline void PBCfg_Dip::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PBCfg_Dip::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PBCfg_Dip::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Dip::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* PBCfg_Dip::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 timeout = 4;
inline bool PBCfg_Dip::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCfg_Dip::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCfg_Dip::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCfg_Dip::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
inline ::google::protobuf::uint32 PBCfg_Dip::timeout() const {
  return timeout_;
}
inline void PBCfg_Dip::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
}

// optional string ip = 5;
inline bool PBCfg_Dip::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCfg_Dip::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCfg_Dip::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCfg_Dip::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PBCfg_Dip::ip() const {
  return *ip_;
}
inline void PBCfg_Dip::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBCfg_Dip::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PBCfg_Dip::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Dip::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* PBCfg_Dip::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 httpport = 6;
inline bool PBCfg_Dip::has_httpport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBCfg_Dip::set_has_httpport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBCfg_Dip::clear_has_httpport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBCfg_Dip::clear_httpport() {
  httpport_ = 0u;
  clear_has_httpport();
}
inline ::google::protobuf::uint32 PBCfg_Dip::httpport() const {
  return httpport_;
}
inline void PBCfg_Dip::set_httpport(::google::protobuf::uint32 value) {
  set_has_httpport();
  httpport_ = value;
}

// optional uint32 tcpport = 7;
inline bool PBCfg_Dip::has_tcpport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBCfg_Dip::set_has_tcpport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBCfg_Dip::clear_has_tcpport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBCfg_Dip::clear_tcpport() {
  tcpport_ = 0u;
  clear_has_tcpport();
}
inline ::google::protobuf::uint32 PBCfg_Dip::tcpport() const {
  return tcpport_;
}
inline void PBCfg_Dip::set_tcpport(::google::protobuf::uint32 value) {
  set_has_tcpport();
  tcpport_ = value;
}

// -------------------------------------------------------------------

// PBCfg_RobotServer

// optional .PBCfg_ServerCommon common = 1;
inline bool PBCfg_RobotServer::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_RobotServer::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_RobotServer::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_RobotServer::clear_common() {
  if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
  clear_has_common();
}
inline const ::PBCfg_ServerCommon& PBCfg_RobotServer::common() const {
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::PBCfg_ServerCommon* PBCfg_RobotServer::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::PBCfg_ServerCommon;
  return common_;
}
inline ::PBCfg_ServerCommon* PBCfg_RobotServer::release_common() {
  clear_has_common();
  ::PBCfg_ServerCommon* temp = common_;
  common_ = NULL;
  return temp;
}

// optional string accprefix = 2;
inline bool PBCfg_RobotServer::has_accprefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_RobotServer::set_has_accprefix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_RobotServer::clear_has_accprefix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_RobotServer::clear_accprefix() {
  if (accprefix_ != &::google::protobuf::internal::kEmptyString) {
    accprefix_->clear();
  }
  clear_has_accprefix();
}
inline const ::std::string& PBCfg_RobotServer::accprefix() const {
  return *accprefix_;
}
inline void PBCfg_RobotServer::set_accprefix(const ::std::string& value) {
  set_has_accprefix();
  if (accprefix_ == &::google::protobuf::internal::kEmptyString) {
    accprefix_ = new ::std::string;
  }
  accprefix_->assign(value);
}
inline void PBCfg_RobotServer::set_accprefix(const char* value) {
  set_has_accprefix();
  if (accprefix_ == &::google::protobuf::internal::kEmptyString) {
    accprefix_ = new ::std::string;
  }
  accprefix_->assign(value);
}
inline void PBCfg_RobotServer::set_accprefix(const char* value, size_t size) {
  set_has_accprefix();
  if (accprefix_ == &::google::protobuf::internal::kEmptyString) {
    accprefix_ = new ::std::string;
  }
  accprefix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_RobotServer::mutable_accprefix() {
  set_has_accprefix();
  if (accprefix_ == &::google::protobuf::internal::kEmptyString) {
    accprefix_ = new ::std::string;
  }
  return accprefix_;
}
inline ::std::string* PBCfg_RobotServer::release_accprefix() {
  clear_has_accprefix();
  if (accprefix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accprefix_;
    accprefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 3;
inline bool PBCfg_RobotServer::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_RobotServer::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_RobotServer::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_RobotServer::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& PBCfg_RobotServer::password() const {
  return *password_;
}
inline void PBCfg_RobotServer::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void PBCfg_RobotServer::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void PBCfg_RobotServer::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_RobotServer::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* PBCfg_RobotServer::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 accpostfixIdx = 4;
inline bool PBCfg_RobotServer::has_accpostfixidx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCfg_RobotServer::set_has_accpostfixidx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCfg_RobotServer::clear_has_accpostfixidx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCfg_RobotServer::clear_accpostfixidx() {
  accpostfixidx_ = 0u;
  clear_has_accpostfixidx();
}
inline ::google::protobuf::uint32 PBCfg_RobotServer::accpostfixidx() const {
  return accpostfixidx_;
}
inline void PBCfg_RobotServer::set_accpostfixidx(::google::protobuf::uint32 value) {
  set_has_accpostfixidx();
  accpostfixidx_ = value;
}

// optional uint32 count = 5;
inline bool PBCfg_RobotServer::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCfg_RobotServer::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCfg_RobotServer::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCfg_RobotServer::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 PBCfg_RobotServer::count() const {
  return count_;
}
inline void PBCfg_RobotServer::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 interval = 6;
inline bool PBCfg_RobotServer::has_interval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBCfg_RobotServer::set_has_interval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBCfg_RobotServer::clear_has_interval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBCfg_RobotServer::clear_interval() {
  interval_ = 0u;
  clear_has_interval();
}
inline ::google::protobuf::uint32 PBCfg_RobotServer::interval() const {
  return interval_;
}
inline void PBCfg_RobotServer::set_interval(::google::protobuf::uint32 value) {
  set_has_interval();
  interval_ = value;
}

// -------------------------------------------------------------------

// PBCfg_RobotClient

// optional .PBCfg_ServerCommon common = 1;
inline bool PBCfg_RobotClient::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_RobotClient::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_RobotClient::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_RobotClient::clear_common() {
  if (common_ != NULL) common_->::PBCfg_ServerCommon::Clear();
  clear_has_common();
}
inline const ::PBCfg_ServerCommon& PBCfg_RobotClient::common() const {
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::PBCfg_ServerCommon* PBCfg_RobotClient::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::PBCfg_ServerCommon;
  return common_;
}
inline ::PBCfg_ServerCommon* PBCfg_RobotClient::release_common() {
  clear_has_common();
  ::PBCfg_ServerCommon* temp = common_;
  common_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBCfg_Root

// optional .PBCfg_ServerCommon defaultcommon = 1;
inline bool PBCfg_Root::has_defaultcommon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Root::set_has_defaultcommon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Root::clear_has_defaultcommon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Root::clear_defaultcommon() {
  if (defaultcommon_ != NULL) defaultcommon_->::PBCfg_ServerCommon::Clear();
  clear_has_defaultcommon();
}
inline const ::PBCfg_ServerCommon& PBCfg_Root::defaultcommon() const {
  return defaultcommon_ != NULL ? *defaultcommon_ : *default_instance_->defaultcommon_;
}
inline ::PBCfg_ServerCommon* PBCfg_Root::mutable_defaultcommon() {
  set_has_defaultcommon();
  if (defaultcommon_ == NULL) defaultcommon_ = new ::PBCfg_ServerCommon;
  return defaultcommon_;
}
inline ::PBCfg_ServerCommon* PBCfg_Root::release_defaultcommon() {
  clear_has_defaultcommon();
  ::PBCfg_ServerCommon* temp = defaultcommon_;
  defaultcommon_ = NULL;
  return temp;
}

// optional .PBCfg_World world = 101;
inline bool PBCfg_Root::has_world() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_Root::set_has_world() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_Root::clear_has_world() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_Root::clear_world() {
  if (world_ != NULL) world_->::PBCfg_World::Clear();
  clear_has_world();
}
inline const ::PBCfg_World& PBCfg_Root::world() const {
  return world_ != NULL ? *world_ : *default_instance_->world_;
}
inline ::PBCfg_World* PBCfg_Root::mutable_world() {
  set_has_world();
  if (world_ == NULL) world_ = new ::PBCfg_World;
  return world_;
}
inline ::PBCfg_World* PBCfg_Root::release_world() {
  clear_has_world();
  ::PBCfg_World* temp = world_;
  world_ = NULL;
  return temp;
}

// optional .PBCfg_Game game = 102;
inline bool PBCfg_Root::has_game() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_Root::set_has_game() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_Root::clear_has_game() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_Root::clear_game() {
  if (game_ != NULL) game_->::PBCfg_Game::Clear();
  clear_has_game();
}
inline const ::PBCfg_Game& PBCfg_Root::game() const {
  return game_ != NULL ? *game_ : *default_instance_->game_;
}
inline ::PBCfg_Game* PBCfg_Root::mutable_game() {
  set_has_game();
  if (game_ == NULL) game_ = new ::PBCfg_Game;
  return game_;
}
inline ::PBCfg_Game* PBCfg_Root::release_game() {
  clear_has_game();
  ::PBCfg_Game* temp = game_;
  game_ = NULL;
  return temp;
}

// optional .PBCfg_Login login = 103;
inline bool PBCfg_Root::has_login() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCfg_Root::set_has_login() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCfg_Root::clear_has_login() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCfg_Root::clear_login() {
  if (login_ != NULL) login_->::PBCfg_Login::Clear();
  clear_has_login();
}
inline const ::PBCfg_Login& PBCfg_Root::login() const {
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::PBCfg_Login* PBCfg_Root::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::PBCfg_Login;
  return login_;
}
inline ::PBCfg_Login* PBCfg_Root::release_login() {
  clear_has_login();
  ::PBCfg_Login* temp = login_;
  login_ = NULL;
  return temp;
}

// optional .PBCfg_Register register = 104;
inline bool PBCfg_Root::has_register_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCfg_Root::set_has_register_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCfg_Root::clear_has_register_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCfg_Root::clear_register_() {
  if (register__ != NULL) register__->::PBCfg_Register::Clear();
  clear_has_register_();
}
inline const ::PBCfg_Register& PBCfg_Root::register_() const {
  return register__ != NULL ? *register__ : *default_instance_->register__;
}
inline ::PBCfg_Register* PBCfg_Root::mutable_register_() {
  set_has_register_();
  if (register__ == NULL) register__ = new ::PBCfg_Register;
  return register__;
}
inline ::PBCfg_Register* PBCfg_Root::release_register_() {
  clear_has_register_();
  ::PBCfg_Register* temp = register__;
  register__ = NULL;
  return temp;
}

// optional .PBCfg_DB db = 105;
inline bool PBCfg_Root::has_db() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBCfg_Root::set_has_db() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBCfg_Root::clear_has_db() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBCfg_Root::clear_db() {
  if (db_ != NULL) db_->::PBCfg_DB::Clear();
  clear_has_db();
}
inline const ::PBCfg_DB& PBCfg_Root::db() const {
  return db_ != NULL ? *db_ : *default_instance_->db_;
}
inline ::PBCfg_DB* PBCfg_Root::mutable_db() {
  set_has_db();
  if (db_ == NULL) db_ = new ::PBCfg_DB;
  return db_;
}
inline ::PBCfg_DB* PBCfg_Root::release_db() {
  clear_has_db();
  ::PBCfg_DB* temp = db_;
  db_ = NULL;
  return temp;
}

// optional .PBCfg_Global global = 106;
inline bool PBCfg_Root::has_global() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBCfg_Root::set_has_global() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBCfg_Root::clear_has_global() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBCfg_Root::clear_global() {
  if (global_ != NULL) global_->::PBCfg_Global::Clear();
  clear_has_global();
}
inline const ::PBCfg_Global& PBCfg_Root::global() const {
  return global_ != NULL ? *global_ : *default_instance_->global_;
}
inline ::PBCfg_Global* PBCfg_Root::mutable_global() {
  set_has_global();
  if (global_ == NULL) global_ = new ::PBCfg_Global;
  return global_;
}
inline ::PBCfg_Global* PBCfg_Root::release_global() {
  clear_has_global();
  ::PBCfg_Global* temp = global_;
  global_ = NULL;
  return temp;
}

// optional .PBCfg_Bigworld bigworld = 107;
inline bool PBCfg_Root::has_bigworld() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBCfg_Root::set_has_bigworld() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBCfg_Root::clear_has_bigworld() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBCfg_Root::clear_bigworld() {
  if (bigworld_ != NULL) bigworld_->::PBCfg_Bigworld::Clear();
  clear_has_bigworld();
}
inline const ::PBCfg_Bigworld& PBCfg_Root::bigworld() const {
  return bigworld_ != NULL ? *bigworld_ : *default_instance_->bigworld_;
}
inline ::PBCfg_Bigworld* PBCfg_Root::mutable_bigworld() {
  set_has_bigworld();
  if (bigworld_ == NULL) bigworld_ = new ::PBCfg_Bigworld;
  return bigworld_;
}
inline ::PBCfg_Bigworld* PBCfg_Root::release_bigworld() {
  clear_has_bigworld();
  ::PBCfg_Bigworld* temp = bigworld_;
  bigworld_ = NULL;
  return temp;
}

// optional .PBCfg_Dip dip = 108;
inline bool PBCfg_Root::has_dip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBCfg_Root::set_has_dip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBCfg_Root::clear_has_dip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBCfg_Root::clear_dip() {
  if (dip_ != NULL) dip_->::PBCfg_Dip::Clear();
  clear_has_dip();
}
inline const ::PBCfg_Dip& PBCfg_Root::dip() const {
  return dip_ != NULL ? *dip_ : *default_instance_->dip_;
}
inline ::PBCfg_Dip* PBCfg_Root::mutable_dip() {
  set_has_dip();
  if (dip_ == NULL) dip_ = new ::PBCfg_Dip;
  return dip_;
}
inline ::PBCfg_Dip* PBCfg_Root::release_dip() {
  clear_has_dip();
  ::PBCfg_Dip* temp = dip_;
  dip_ = NULL;
  return temp;
}

// optional .PBCfg_Rooter rooter = 109;
inline bool PBCfg_Root::has_rooter() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBCfg_Root::set_has_rooter() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBCfg_Root::clear_has_rooter() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBCfg_Root::clear_rooter() {
  if (rooter_ != NULL) rooter_->::PBCfg_Rooter::Clear();
  clear_has_rooter();
}
inline const ::PBCfg_Rooter& PBCfg_Root::rooter() const {
  return rooter_ != NULL ? *rooter_ : *default_instance_->rooter_;
}
inline ::PBCfg_Rooter* PBCfg_Root::mutable_rooter() {
  set_has_rooter();
  if (rooter_ == NULL) rooter_ = new ::PBCfg_Rooter;
  return rooter_;
}
inline ::PBCfg_Rooter* PBCfg_Root::release_rooter() {
  clear_has_rooter();
  ::PBCfg_Rooter* temp = rooter_;
  rooter_ = NULL;
  return temp;
}

// optional .PBCfg_RobotServer robotserver = 110;
inline bool PBCfg_Root::has_robotserver() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBCfg_Root::set_has_robotserver() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBCfg_Root::clear_has_robotserver() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBCfg_Root::clear_robotserver() {
  if (robotserver_ != NULL) robotserver_->::PBCfg_RobotServer::Clear();
  clear_has_robotserver();
}
inline const ::PBCfg_RobotServer& PBCfg_Root::robotserver() const {
  return robotserver_ != NULL ? *robotserver_ : *default_instance_->robotserver_;
}
inline ::PBCfg_RobotServer* PBCfg_Root::mutable_robotserver() {
  set_has_robotserver();
  if (robotserver_ == NULL) robotserver_ = new ::PBCfg_RobotServer;
  return robotserver_;
}
inline ::PBCfg_RobotServer* PBCfg_Root::release_robotserver() {
  clear_has_robotserver();
  ::PBCfg_RobotServer* temp = robotserver_;
  robotserver_ = NULL;
  return temp;
}

// optional .PBCfg_RobotClient robotclient = 111;
inline bool PBCfg_Root::has_robotclient() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PBCfg_Root::set_has_robotclient() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PBCfg_Root::clear_has_robotclient() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PBCfg_Root::clear_robotclient() {
  if (robotclient_ != NULL) robotclient_->::PBCfg_RobotClient::Clear();
  clear_has_robotclient();
}
inline const ::PBCfg_RobotClient& PBCfg_Root::robotclient() const {
  return robotclient_ != NULL ? *robotclient_ : *default_instance_->robotclient_;
}
inline ::PBCfg_RobotClient* PBCfg_Root::mutable_robotclient() {
  set_has_robotclient();
  if (robotclient_ == NULL) robotclient_ = new ::PBCfg_RobotClient;
  return robotclient_;
}
inline ::PBCfg_RobotClient* PBCfg_Root::release_robotclient() {
  clear_has_robotclient();
  ::PBCfg_RobotClient* temp = robotclient_;
  robotclient_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBCfg_Xls2Data

// optional string datpath = 1;
inline bool PBCfg_Xls2Data::has_datpath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Xls2Data::set_has_datpath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Xls2Data::clear_has_datpath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Xls2Data::clear_datpath() {
  if (datpath_ != &::google::protobuf::internal::kEmptyString) {
    datpath_->clear();
  }
  clear_has_datpath();
}
inline const ::std::string& PBCfg_Xls2Data::datpath() const {
  return *datpath_;
}
inline void PBCfg_Xls2Data::set_datpath(const ::std::string& value) {
  set_has_datpath();
  if (datpath_ == &::google::protobuf::internal::kEmptyString) {
    datpath_ = new ::std::string;
  }
  datpath_->assign(value);
}
inline void PBCfg_Xls2Data::set_datpath(const char* value) {
  set_has_datpath();
  if (datpath_ == &::google::protobuf::internal::kEmptyString) {
    datpath_ = new ::std::string;
  }
  datpath_->assign(value);
}
inline void PBCfg_Xls2Data::set_datpath(const char* value, size_t size) {
  set_has_datpath();
  if (datpath_ == &::google::protobuf::internal::kEmptyString) {
    datpath_ = new ::std::string;
  }
  datpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Xls2Data::mutable_datpath() {
  set_has_datpath();
  if (datpath_ == &::google::protobuf::internal::kEmptyString) {
    datpath_ = new ::std::string;
  }
  return datpath_;
}
inline ::std::string* PBCfg_Xls2Data::release_datpath() {
  clear_has_datpath();
  if (datpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datpath_;
    datpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string xlspath = 2;
inline bool PBCfg_Xls2Data::has_xlspath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_Xls2Data::set_has_xlspath() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_Xls2Data::clear_has_xlspath() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_Xls2Data::clear_xlspath() {
  if (xlspath_ != &::google::protobuf::internal::kEmptyString) {
    xlspath_->clear();
  }
  clear_has_xlspath();
}
inline const ::std::string& PBCfg_Xls2Data::xlspath() const {
  return *xlspath_;
}
inline void PBCfg_Xls2Data::set_xlspath(const ::std::string& value) {
  set_has_xlspath();
  if (xlspath_ == &::google::protobuf::internal::kEmptyString) {
    xlspath_ = new ::std::string;
  }
  xlspath_->assign(value);
}
inline void PBCfg_Xls2Data::set_xlspath(const char* value) {
  set_has_xlspath();
  if (xlspath_ == &::google::protobuf::internal::kEmptyString) {
    xlspath_ = new ::std::string;
  }
  xlspath_->assign(value);
}
inline void PBCfg_Xls2Data::set_xlspath(const char* value, size_t size) {
  set_has_xlspath();
  if (xlspath_ == &::google::protobuf::internal::kEmptyString) {
    xlspath_ = new ::std::string;
  }
  xlspath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Xls2Data::mutable_xlspath() {
  set_has_xlspath();
  if (xlspath_ == &::google::protobuf::internal::kEmptyString) {
    xlspath_ = new ::std::string;
  }
  return xlspath_;
}
inline ::std::string* PBCfg_Xls2Data::release_xlspath() {
  clear_has_xlspath();
  if (xlspath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xlspath_;
    xlspath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string binpath = 3;
inline bool PBCfg_Xls2Data::has_binpath() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_Xls2Data::set_has_binpath() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_Xls2Data::clear_has_binpath() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_Xls2Data::clear_binpath() {
  if (binpath_ != &::google::protobuf::internal::kEmptyString) {
    binpath_->clear();
  }
  clear_has_binpath();
}
inline const ::std::string& PBCfg_Xls2Data::binpath() const {
  return *binpath_;
}
inline void PBCfg_Xls2Data::set_binpath(const ::std::string& value) {
  set_has_binpath();
  if (binpath_ == &::google::protobuf::internal::kEmptyString) {
    binpath_ = new ::std::string;
  }
  binpath_->assign(value);
}
inline void PBCfg_Xls2Data::set_binpath(const char* value) {
  set_has_binpath();
  if (binpath_ == &::google::protobuf::internal::kEmptyString) {
    binpath_ = new ::std::string;
  }
  binpath_->assign(value);
}
inline void PBCfg_Xls2Data::set_binpath(const char* value, size_t size) {
  set_has_binpath();
  if (binpath_ == &::google::protobuf::internal::kEmptyString) {
    binpath_ = new ::std::string;
  }
  binpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCfg_Xls2Data::mutable_binpath() {
  set_has_binpath();
  if (binpath_ == &::google::protobuf::internal::kEmptyString) {
    binpath_ = new ::std::string;
  }
  return binpath_;
}
inline ::std::string* PBCfg_Xls2Data::release_binpath() {
  clear_has_binpath();
  if (binpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = binpath_;
    binpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool genxml = 4;
inline bool PBCfg_Xls2Data::has_genxml() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCfg_Xls2Data::set_has_genxml() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCfg_Xls2Data::clear_has_genxml() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCfg_Xls2Data::clear_genxml() {
  genxml_ = false;
  clear_has_genxml();
}
inline bool PBCfg_Xls2Data::genxml() const {
  return genxml_;
}
inline void PBCfg_Xls2Data::set_genxml(bool value) {
  set_has_genxml();
  genxml_ = value;
}

// -------------------------------------------------------------------

// PBCfg_Record

// optional .PBCfg_MysqlDB mysql = 1;
inline bool PBCfg_Record::has_mysql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCfg_Record::set_has_mysql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCfg_Record::clear_has_mysql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCfg_Record::clear_mysql() {
  if (mysql_ != NULL) mysql_->::PBCfg_MysqlDB::Clear();
  clear_has_mysql();
}
inline const ::PBCfg_MysqlDB& PBCfg_Record::mysql() const {
  return mysql_ != NULL ? *mysql_ : *default_instance_->mysql_;
}
inline ::PBCfg_MysqlDB* PBCfg_Record::mutable_mysql() {
  set_has_mysql();
  if (mysql_ == NULL) mysql_ = new ::PBCfg_MysqlDB;
  return mysql_;
}
inline ::PBCfg_MysqlDB* PBCfg_Record::release_mysql() {
  clear_has_mysql();
  ::PBCfg_MysqlDB* temp = mysql_;
  mysql_ = NULL;
  return temp;
}

// optional uint32 port = 2;
inline bool PBCfg_Record::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCfg_Record::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCfg_Record::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCfg_Record::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 PBCfg_Record::port() const {
  return port_;
}
inline void PBCfg_Record::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional bool rundroptable = 3;
inline bool PBCfg_Record::has_rundroptable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCfg_Record::set_has_rundroptable() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCfg_Record::clear_has_rundroptable() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCfg_Record::clear_rundroptable() {
  rundroptable_ = false;
  clear_has_rundroptable();
}
inline bool PBCfg_Record::rundroptable() const {
  return rundroptable_;
}
inline void PBCfg_Record::set_rundroptable(bool value) {
  set_has_rundroptable();
  rundroptable_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PBConfig_2eproto__INCLUDED
