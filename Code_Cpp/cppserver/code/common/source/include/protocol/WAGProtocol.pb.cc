// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WAGProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::EnumDescriptor* _emPW2G_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_SinglePvp_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2G_Corps_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2G_PvpWar_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Common_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Start_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Player_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Scene_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Team_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Copymap_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_DartCar_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emW2G_Manor_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emPG2W_Protocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_SinglePvp_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_PvpWar_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Common_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Player_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Scene_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Team_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Copymap_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_DartCar_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_FactionBoss_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _emG2W_Protocal_GM_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_WAGProtocol_2eproto() {
  protobuf_AddDesc_WAGProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WAGProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  _emPW2G_Protocol_descriptor_ = file->enum_type(0);
  _emW2G_Protocol_SinglePvp_descriptor_ = file->enum_type(1);
  _emW2G_Corps_Protocol_descriptor_ = file->enum_type(2);
  _emW2G_PvpWar_Protocol_descriptor_ = file->enum_type(3);
  _emW2G_Protocol_Common_descriptor_ = file->enum_type(4);
  _emW2G_Protocol_Start_descriptor_ = file->enum_type(5);
  _emW2G_Protocol_Player_descriptor_ = file->enum_type(6);
  _emW2G_Protocol_Scene_descriptor_ = file->enum_type(7);
  _emW2G_Protocol_Team_descriptor_ = file->enum_type(8);
  _emW2G_Protocol_Copymap_descriptor_ = file->enum_type(9);
  _emW2G_Protocol_DartCar_descriptor_ = file->enum_type(10);
  _emW2G_Manor_Protocol_descriptor_ = file->enum_type(11);
  _emPG2W_Protocol_descriptor_ = file->enum_type(12);
  _emG2W_Protocol_SinglePvp_descriptor_ = file->enum_type(13);
  _emG2W_Protocol_PvpWar_descriptor_ = file->enum_type(14);
  _emG2W_Protocol_Common_descriptor_ = file->enum_type(15);
  _emG2W_Protocol_Player_descriptor_ = file->enum_type(16);
  _emG2W_Protocol_Scene_descriptor_ = file->enum_type(17);
  _emG2W_Protocol_Team_descriptor_ = file->enum_type(18);
  _emG2W_Protocol_Copymap_descriptor_ = file->enum_type(19);
  _emG2W_Protocol_DartCar_descriptor_ = file->enum_type(20);
  _emG2W_Protocol_FactionBoss_descriptor_ = file->enum_type(21);
  _emG2W_Protocal_GM_descriptor_ = file->enum_type(22);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WAGProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_WAGProtocol_2eproto() {
}

void protobuf_AddDesc_WAGProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021WAGProtocol.proto*\227\003\n\020_emPW2G_Protocol"
    "\022\030\n\024P_W2G_Protocol_Start\020\000\022\031\n\025P_W2G_Prot"
    "ocol_Player\020\001\022\030\n\024P_W2G_Protocol_Scene\020\002\022"
    "\027\n\023P_W2G_Protocol_Team\020\003\022\032\n\026P_W2G_Protoc"
    "ol_Copymap\020\004\022\031\n\025P_W2G_Protocol_Common\020\005\022"
    "\032\n\026P_W2G_Protocol_Faction\020\006\022\034\n\030P_W2G_Pro"
    "tocol_Broadcast\020\007\022\032\n\026P_W2G_Protocol_Dart"
    "Car\020\010\022!\n\035P_W2G_Protocol_AnswerQuestion\020\t"
    "\022\031\n\025P_W2G_Protocol_PvpWar\020\n\022\030\n\024P_W2G_Pro"
    "tocol_Corps\020\013\022\030\n\024P_W2G_Protocol_Manor\020\014\022"
    "\034\n\030P_W2G_Protocol_SinglePvp\020\r*h\n\031_emW2G_"
    "Protocol_SinglePvp\022%\n!W2G_Protocol_Singl"
    "ePvp_EnterMatch\020\000\022$\n W2G_Protocol_Single"
    "Pvp_ExitMatch\020\001*0\n\025_emW2G_Corps_Protocol"
    "\022\027\n\023W2G_Corps_ChangeJob\020\000*\240\001\n\026_emW2G_Pvp"
    "War_Protocol\022\031\n\025W2G_PvpWar_EnterMatch\020\000\022"
    "\030\n\024W2G_PvpWar_ExitMatch\020\001\022\031\n\025W2G_PvpWar_"
    "EnterReady\020\002\022\030\n\024W2G_PvpWar_ExitReady\020\003\022\034"
    "\n\030W2G_PvpWar_CompleteMatch\020\004*\301\001\n\026_emW2G_"
    "Protocol_Common\022\033\n\027W2G_Common_GmReloadDa"
    "ta\020\000\022\023\n\017W2G_Common_Mail\020\001\022\032\n\026W2G_Common_"
    "MsgTransfer\020\002\022\037\n\033W2G_Common_GmWorldStart"
    "Time\020\003\022\034\n\030W2G_Common_TreasurePrize\020\004\022\032\n\026"
    "W2G_Common_ForbitSpeak\020\005*I\n\025_emW2G_Proto"
    "col_Start\022\026\n\022W2G_Start_Register\020\000\022\030\n\024W2G"
    "_Start_UnRegister\020\001*\267\001\n\026_emW2G_Protocol_"
    "Player\022\023\n\017W2G_Player_Load\020\000\022\027\n\023W2G_Playe"
    "r_SaveDone\020\001\022\030\n\024W2G_Player_FlyMapAck\020\002\022\026"
    "\n\022W2G_Player_ExitAsk\020\003\022\035\n\031W2G_Player_Off"
    "lineDataAdd\020\004\022\036\n\032W2G_Player_OfflineDataL"
    "oad\020\005*1\n\025_emW2G_Protocol_Scene\022\030\n\024W2G_Sc"
    "ene_CreateCell\020\000*\356\002\n\024_emW2G_Protocol_Tea"
    "m\022\023\n\017W2G_Team_Create\020\000\022\023\n\017W2G_Team_Delet"
    "e\020\001\022\023\n\017W2G_Team_Invite\020\002\022\022\n\016W2G_Team_App"
    "ly\020\003\022\032\n\026W2G_Team_ChangeCaptain\020\004\022\031\n\025W2G_"
    "Team_AcceptInvite\020\005\022\030\n\024W2G_Team_AcceptAp"
    "ply\020\006\022\027\n\023W2G_Team_MyTeamInfo\020\007\022\033\n\027W2G_Te"
    "am_AcceptTeamTask\020\010\022\035\n\031W2G_Team_Complete"
    "TeamTask\020\t\022\027\n\023W2G_Team_AllConfirm\020\n\022\024\n\020W"
    "2G_Team_Confirm\020\013\022\026\n\022W2G_Team_MemberAdd\020"
    "\014\022\026\n\022W2G_Team_MemberDel\020\r*~\n\027_emW2G_Prot"
    "ocol_Copymap\022\025\n\021W2G_Copymap_Enter\020\000\022\024\n\020W"
    "2G_Copymap_Exit\020\001\022\032\n\026W2G_Copymap_PlayerI"
    "nfo\020\002\022\032\n\026W2G_Copymap_KickPlayer\020\003*\265\001\n\027_e"
    "mW2G_Protocol_DartCar\022\027\n\023W2G_DartCar_Fly"
    "_Ack\020\000\022\036\n\032W2G_DartCar_Fly_Create_Ntf\020\001\022\037"
    "\n\033W2G_DartCar_RobFinished_Ack\020\002\022\037\n\033W2G_D"
    "artCar_MemberLeave_Ntf\020\003\022\037\n\033W2G_DartCar_"
    "FindDartcar_Ack\020\004*\203\001\n\025_emW2G_Manor_Proto"
    "col\022*\n&W2G_Manor_BattleField_FighterCoun"
    "t_Ntf\020\000\022#\n\037W2G_Manor_BattleField_Enter_A"
    "ck\020\001\022\031\n\025W2G_Manor_Copymap_Ntf\020\002*\321\003\n\020_emP"
    "G2W_Protocol\022\033\n\027P_G2W_Protocol_Register\020"
    "\000\022\031\n\025P_G2W_Protocol_Player\020\001\022\030\n\024P_G2W_Pr"
    "otocol_Scene\020\002\022\027\n\023P_G2W_Protocol_Team\020\003\022"
    "\032\n\026P_G2W_Protocol_Copymap\020\004\022\031\n\025P_G2W_Pro"
    "tocol_Common\020\005\022\032\n\026P_G2W_Protocol_Faction"
    "\020\006\022\034\n\030P_G2W_Protocol_Broadcast\020\007\022\032\n\026P_G2"
    "W_Protocol_DartCar\020\010\022\036\n\032P_G2W_Protocol_F"
    "actionBoss\020\t\022\025\n\021P_G2W_Protocol_GM\020\n\022!\n\035P"
    "_G2W_Protocol_AnswerQuestion\020\013\022\031\n\025P_G2W_"
    "Protocol_PvpWar\020\014\022\030\n\024P_G2W_Protocol_Corp"
    "s\020\r\022\030\n\024P_G2W_Protocol_Manor\020\016\022\034\n\030P_G2W_P"
    "rotocol_SinglePvp\020\017*h\n\031_emG2W_Protocol_S"
    "inglePvp\022%\n!G2W_Protocol_SinglePvp_Enter"
    "Match\020\000\022$\n G2W_Protocol_SinglePvp_ExitMa"
    "tch\020\001*\254\001\n\026_emG2W_Protocol_PvpWar\022#\n\037G2W_"
    "Protocol_PvpWar_SingleMatch\020\000\022!\n\035G2W_Pro"
    "tocol_PvpWar_ExitMatch\020\001\022\"\n\036G2W_Protocol"
    "_PvpWar_ReadyEnter\020\002\022&\n\"G2W_Protocol_Pvp"
    "War_ExitReadyEnter\020\003*\310\001\n\026_emG2W_Protocol"
    "_Common\022\033\n\027G2W_Common_GmReloadData\020\000\022\037\n\033"
    "G2W_Common_GmWorldStartTime\020\001\022\034\n\030G2W_Com"
    "mon_TreasurePrize\020\002\022\032\n\026G2W_Common_Transf"
    "erMsg\020\003\022\032\n\026G2W_Common_ForbitSpeak\020\004\022\032\n\026G"
    "2W_Common_PlayerReady\020\005*\374\001\n\026_emG2W_Proto"
    "col_Player\022\023\n\017G2W_Player_Save\020\000\022\030\n\024G2W_P"
    "layer_FlyMapAsk\020\001\022\034\n\030G2W_Player_FlyMapSy"
    "nInfo\020\002\022\026\n\022G2W_Player_ExitAck\020\003\022\035\n\031G2W_P"
    "layer_OfflineDataAdd\020\004\022\035\n\031G2W_Player_Off"
    "lineDataDel\020\005\022\025\n\021G2W_Player_Logout\020\006\022\022\n\016"
    "G2W_Player_Syn\020\007\022\024\n\020G2W_Player_Cache\020\010*g"
    "\n\025_emG2W_Protocol_Scene\022\032\n\026G2W_Scene_Reg"
    "isterCell\020\000\022\027\n\023G2W_Scene_CloseCell\020\001\022\031\n\025"
    "G2W_Scene_PlayerCount\020\002*\272\001\n\024_emG2W_Proto"
    "col_Team\022\023\n\017G2W_Team_Create\020\000\022\023\n\017G2W_Tea"
    "m_Delete\020\001\022\023\n\017G2W_Team_Invite\020\002\022\022\n\016G2W_T"
    "eam_Apply\020\003\022\032\n\026G2W_Team_ChangeCaptain\020\004\022"
    "\031\n\025G2W_Team_AcceptInvite\020\005\022\030\n\024G2W_Team_A"
    "cceptApply\020\006*\346\001\n\027_emG2W_Protocol_Copymap"
    "\022\026\n\022G2W_Copymap_Create\020\000\022\026\n\022G2W_Copymap_"
    "Invite\020\001\022\034\n\030G2W_Copymap_AcceptInvite\020\002\022\036"
    "\n\032G2W_Copymap_TeamMemberInfo\020\003\022\037\n\033G2W_Co"
    "pymap_AllCopymapCount\020\004\022\037\n\033G2W_Copymap_O"
    "neCopymapCount\020\005\022\033\n\027G2W_Copymap_UpdateSt"
    "ate\020\006*\312\001\n\027_emG2W_Protocol_DartCar\022\027\n\023G2W"
    "_DartCar_Fly_Ask\020\000\022\032\n\026G2W_DartCar_Update"
    "_Ask\020\001\022\032\n\026G2W_DartCar_Delete_Ask\020\002\022\037\n\033G2"
    "W_DartCar_RobFinished_Ask\020\003\022\034\n\030G2W_DartC"
    "ar_LeaveRob_Ask\020\004\022\037\n\033G2W_DartCar_FindDar"
    "tcar_Ask\020\005*\250\001\n\033_emG2W_Protocol_FactionBo"
    "ss\022#\n\037G2W_FactionBoss_PersonalTop_Ask\020\000\022"
    "\"\n\036G2W_FactionBoss_FactionTop_Ask\020\001\022 \n\034G"
    "2W_FactionBoss_UnionTop_Ask\020\002\022\036\n\032G2W_Fac"
    "tionBoss_UpdateHurt\020\003*,\n\022_emG2W_Protocal"
    "_GM\022\026\n\022G2W_Protocal_GMCmd\020\000", 4227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WAGProtocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WAGProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WAGProtocol_2eproto {
  StaticDescriptorInitializer_WAGProtocol_2eproto() {
    protobuf_AddDesc_WAGProtocol_2eproto();
  }
} static_descriptor_initializer_WAGProtocol_2eproto_;

const ::google::protobuf::EnumDescriptor* _emPW2G_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPW2G_Protocol_descriptor_;
}
bool _emPW2G_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_SinglePvp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2G_Protocol_SinglePvp_descriptor_;
}
bool _emW2G_Protocol_SinglePvp_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2G_Corps_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2G_Corps_Protocol_descriptor_;
}
bool _emW2G_Corps_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2G_PvpWar_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2G_PvpWar_Protocol_descriptor_;
}
bool _emW2G_PvpWar_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Common_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2G_Protocol_Common_descriptor_;
}
bool _emW2G_Protocol_Common_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Start_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2G_Protocol_Start_descriptor_;
}
bool _emW2G_Protocol_Start_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Player_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2G_Protocol_Player_descriptor_;
}
bool _emW2G_Protocol_Player_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Scene_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2G_Protocol_Scene_descriptor_;
}
bool _emW2G_Protocol_Scene_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Team_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2G_Protocol_Team_descriptor_;
}
bool _emW2G_Protocol_Team_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_Copymap_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2G_Protocol_Copymap_descriptor_;
}
bool _emW2G_Protocol_Copymap_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2G_Protocol_DartCar_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2G_Protocol_DartCar_descriptor_;
}
bool _emW2G_Protocol_DartCar_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emW2G_Manor_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emW2G_Manor_Protocol_descriptor_;
}
bool _emW2G_Manor_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emPG2W_Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emPG2W_Protocol_descriptor_;
}
bool _emPG2W_Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_SinglePvp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2W_Protocol_SinglePvp_descriptor_;
}
bool _emG2W_Protocol_SinglePvp_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_PvpWar_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2W_Protocol_PvpWar_descriptor_;
}
bool _emG2W_Protocol_PvpWar_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Common_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2W_Protocol_Common_descriptor_;
}
bool _emG2W_Protocol_Common_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Player_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2W_Protocol_Player_descriptor_;
}
bool _emG2W_Protocol_Player_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Scene_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2W_Protocol_Scene_descriptor_;
}
bool _emG2W_Protocol_Scene_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Team_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2W_Protocol_Team_descriptor_;
}
bool _emG2W_Protocol_Team_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_Copymap_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2W_Protocol_Copymap_descriptor_;
}
bool _emG2W_Protocol_Copymap_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_DartCar_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2W_Protocol_DartCar_descriptor_;
}
bool _emG2W_Protocol_DartCar_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2W_Protocol_FactionBoss_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2W_Protocol_FactionBoss_descriptor_;
}
bool _emG2W_Protocol_FactionBoss_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _emG2W_Protocal_GM_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _emG2W_Protocal_GM_descriptor_;
}
bool _emG2W_Protocal_GM_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
