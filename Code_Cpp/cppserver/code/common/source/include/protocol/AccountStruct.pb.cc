// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AccountStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBAccountFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAccountFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAccount_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AccountStruct_2eproto() {
  protobuf_AddDesc_AccountStruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AccountStruct.proto");
  GOOGLE_CHECK(file != NULL);
  PBAccountFlag_descriptor_ = file->message_type(0);
  static const int PBAccountFlag_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountFlag, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountFlag, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountFlag, acountmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountFlag, loginsn_),
  };
  PBAccountFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAccountFlag_descriptor_,
      PBAccountFlag::default_instance_,
      PBAccountFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccountFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAccountFlag));
  PBAccount_descriptor_ = file->message_type(1);
  static const int PBAccount_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccount, accountflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccount, plattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccount, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccount, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccount, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccount, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccount, netip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccount, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccount, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccount, curplayerid_),
  };
  PBAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAccount_descriptor_,
      PBAccount::default_instance_,
      PBAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAccount));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AccountStruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAccountFlag_descriptor_, &PBAccountFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAccount_descriptor_, &PBAccount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AccountStruct_2eproto() {
  delete PBAccountFlag::default_instance_;
  delete PBAccountFlag_reflection_;
  delete PBAccount::default_instance_;
  delete PBAccount_reflection_;
}

void protobuf_AddDesc_AccountStruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023AccountStruct.proto\"\\\n\rPBAccountFlag\022\023"
    "\n\013accountname\030\001 \001(\t\022\021\n\taccountid\030\002 \001(\r\022\022"
    "\n\nacountmark\030\003 \001(\r\022\017\n\007loginsn\030\004 \001(\004\"\312\001\n\t"
    "PBAccount\022#\n\013accountflag\030\001 \001(\0132\016.PBAccou"
    "ntFlag\022\020\n\010plattype\030\002 \001(\r\022\016\n\006platid\030\003 \001(\r"
    "\022\022\n\ncreateTime\030\004 \001(\r\022\021\n\tloginTime\030\005 \001(\r\022"
    "\n\n\002ip\030\006 \001(\t\022\r\n\005netip\030\007 \001(\004\022\016\n\006passwd\030\010 \001"
    "(\t\022\017\n\007worldID\030\t \001(\r\022\023\n\013curPlayerID\030\n \001(\r", 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AccountStruct.proto", &protobuf_RegisterTypes);
  PBAccountFlag::default_instance_ = new PBAccountFlag();
  PBAccount::default_instance_ = new PBAccount();
  PBAccountFlag::default_instance_->InitAsDefaultInstance();
  PBAccount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AccountStruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AccountStruct_2eproto {
  StaticDescriptorInitializer_AccountStruct_2eproto() {
    protobuf_AddDesc_AccountStruct_2eproto();
  }
} static_descriptor_initializer_AccountStruct_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBAccountFlag::kAccountnameFieldNumber;
const int PBAccountFlag::kAccountidFieldNumber;
const int PBAccountFlag::kAcountmarkFieldNumber;
const int PBAccountFlag::kLoginsnFieldNumber;
#endif  // !_MSC_VER

PBAccountFlag::PBAccountFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAccountFlag::InitAsDefaultInstance() {
}

PBAccountFlag::PBAccountFlag(const PBAccountFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAccountFlag::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = 0u;
  acountmark_ = 0u;
  loginsn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAccountFlag::~PBAccountFlag() {
  SharedDtor();
}

void PBAccountFlag::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (this != default_instance_) {
  }
}

void PBAccountFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAccountFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAccountFlag_descriptor_;
}

const PBAccountFlag& PBAccountFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AccountStruct_2eproto();  return *default_instance_;
}

PBAccountFlag* PBAccountFlag::default_instance_ = NULL;

PBAccountFlag* PBAccountFlag::New() const {
  return new PBAccountFlag;
}

void PBAccountFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    accountid_ = 0u;
    acountmark_ = 0u;
    loginsn_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAccountFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string accountname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }
      
      // optional uint32 accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_acountmark;
        break;
      }
      
      // optional uint32 acountmark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acountmark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acountmark_)));
          set_has_acountmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loginsn;
        break;
      }
      
      // optional uint64 loginsn = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &loginsn_)));
          set_has_loginsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAccountFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string accountname = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }
  
  // optional uint32 accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional uint32 acountmark = 3;
  if (has_acountmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->acountmark(), output);
  }
  
  // optional uint64 loginsn = 4;
  if (has_loginsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->loginsn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAccountFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string accountname = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }
  
  // optional uint32 accountid = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional uint32 acountmark = 3;
  if (has_acountmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->acountmark(), target);
  }
  
  // optional uint64 loginsn = 4;
  if (has_loginsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->loginsn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAccountFlag::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string accountname = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }
    
    // optional uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
    // optional uint32 acountmark = 3;
    if (has_acountmark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acountmark());
    }
    
    // optional uint64 loginsn = 4;
    if (has_loginsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->loginsn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAccountFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAccountFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAccountFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAccountFlag::MergeFrom(const PBAccountFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_acountmark()) {
      set_acountmark(from.acountmark());
    }
    if (from.has_loginsn()) {
      set_loginsn(from.loginsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAccountFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAccountFlag::CopyFrom(const PBAccountFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAccountFlag::IsInitialized() const {
  
  return true;
}

void PBAccountFlag::Swap(PBAccountFlag* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(accountid_, other->accountid_);
    std::swap(acountmark_, other->acountmark_);
    std::swap(loginsn_, other->loginsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAccountFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAccountFlag_descriptor_;
  metadata.reflection = PBAccountFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAccount::kAccountflagFieldNumber;
const int PBAccount::kPlattypeFieldNumber;
const int PBAccount::kPlatidFieldNumber;
const int PBAccount::kCreateTimeFieldNumber;
const int PBAccount::kLoginTimeFieldNumber;
const int PBAccount::kIpFieldNumber;
const int PBAccount::kNetipFieldNumber;
const int PBAccount::kPasswdFieldNumber;
const int PBAccount::kWorldIDFieldNumber;
const int PBAccount::kCurPlayerIDFieldNumber;
#endif  // !_MSC_VER

PBAccount::PBAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAccount::InitAsDefaultInstance() {
  accountflag_ = const_cast< ::PBAccountFlag*>(&::PBAccountFlag::default_instance());
}

PBAccount::PBAccount(const PBAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAccount::SharedCtor() {
  _cached_size_ = 0;
  accountflag_ = NULL;
  plattype_ = 0u;
  platid_ = 0u;
  createtime_ = 0u;
  logintime_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  netip_ = GOOGLE_ULONGLONG(0);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  worldid_ = 0u;
  curplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAccount::~PBAccount() {
  SharedDtor();
}

void PBAccount::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
    delete accountflag_;
  }
}

void PBAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAccount_descriptor_;
}

const PBAccount& PBAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AccountStruct_2eproto();  return *default_instance_;
}

PBAccount* PBAccount::default_instance_ = NULL;

PBAccount* PBAccount::New() const {
  return new PBAccount;
}

void PBAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountflag()) {
      if (accountflag_ != NULL) accountflag_->::PBAccountFlag::Clear();
    }
    plattype_ = 0u;
    platid_ = 0u;
    createtime_ = 0u;
    logintime_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    netip_ = GOOGLE_ULONGLONG(0);
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    worldid_ = 0u;
    curplayerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBAccountFlag accountflag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accountflag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_plattype;
        break;
      }
      
      // optional uint32 plattype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plattype_)));
          set_has_plattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_platid;
        break;
      }
      
      // optional uint32 platid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_createTime;
        break;
      }
      
      // optional uint32 createTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_loginTime;
        break;
      }
      
      // optional uint32 loginTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }
      
      // optional string ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_netip;
        break;
      }
      
      // optional uint64 netip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &netip_)));
          set_has_netip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_passwd;
        break;
      }
      
      // optional string passwd = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_worldID;
        break;
      }
      
      // optional uint32 worldID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_curPlayerID;
        break;
      }
      
      // optional uint32 curPlayerID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curPlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curplayerid_)));
          set_has_curplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBAccountFlag accountflag = 1;
  if (has_accountflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accountflag(), output);
  }
  
  // optional uint32 plattype = 2;
  if (has_plattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->plattype(), output);
  }
  
  // optional uint32 platid = 3;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->platid(), output);
  }
  
  // optional uint32 createTime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createtime(), output);
  }
  
  // optional uint32 loginTime = 5;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->logintime(), output);
  }
  
  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ip(), output);
  }
  
  // optional uint64 netip = 7;
  if (has_netip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->netip(), output);
  }
  
  // optional string passwd = 8;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->passwd(), output);
  }
  
  // optional uint32 worldID = 9;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->worldid(), output);
  }
  
  // optional uint32 curPlayerID = 10;
  if (has_curplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->curplayerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBAccountFlag accountflag = 1;
  if (has_accountflag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accountflag(), target);
  }
  
  // optional uint32 plattype = 2;
  if (has_plattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->plattype(), target);
  }
  
  // optional uint32 platid = 3;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->platid(), target);
  }
  
  // optional uint32 createTime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createtime(), target);
  }
  
  // optional uint32 loginTime = 5;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->logintime(), target);
  }
  
  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }
  
  // optional uint64 netip = 7;
  if (has_netip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->netip(), target);
  }
  
  // optional string passwd = 8;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->passwd(), target);
  }
  
  // optional uint32 worldID = 9;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->worldid(), target);
  }
  
  // optional uint32 curPlayerID = 10;
  if (has_curplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->curplayerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAccount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBAccountFlag accountflag = 1;
    if (has_accountflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accountflag());
    }
    
    // optional uint32 plattype = 2;
    if (has_plattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plattype());
    }
    
    // optional uint32 platid = 3;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platid());
    }
    
    // optional uint32 createTime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }
    
    // optional uint32 loginTime = 5;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logintime());
    }
    
    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional uint64 netip = 7;
    if (has_netip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->netip());
    }
    
    // optional string passwd = 8;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 worldID = 9;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldid());
    }
    
    // optional uint32 curPlayerID = 10;
    if (has_curplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curplayerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAccount::MergeFrom(const PBAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountflag()) {
      mutable_accountflag()->::PBAccountFlag::MergeFrom(from.accountflag());
    }
    if (from.has_plattype()) {
      set_plattype(from.plattype());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_netip()) {
      set_netip(from.netip());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_curplayerid()) {
      set_curplayerid(from.curplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAccount::CopyFrom(const PBAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAccount::IsInitialized() const {
  
  return true;
}

void PBAccount::Swap(PBAccount* other) {
  if (other != this) {
    std::swap(accountflag_, other->accountflag_);
    std::swap(plattype_, other->plattype_);
    std::swap(platid_, other->platid_);
    std::swap(createtime_, other->createtime_);
    std::swap(logintime_, other->logintime_);
    std::swap(ip_, other->ip_);
    std::swap(netip_, other->netip_);
    std::swap(passwd_, other->passwd_);
    std::swap(worldid_, other->worldid_);
    std::swap(curplayerid_, other->curplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAccount_descriptor_;
  metadata.reflection = PBAccount_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
