// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgResult.proto

#ifndef PROTOBUF_MsgResult_2eproto__INCLUDED
#define PROTOBUF_MsgResult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MsgResult_2eproto();
void protobuf_AssignDesc_MsgResult_2eproto();
void protobuf_ShutdownFile_MsgResult_2eproto();


enum _emResultMove {
  R_ResultMove_Succeed = 0,
  R_ResultMove_Fail = 1,
  R_ResultMove_StateLimit = 2,
  R_ResultMove_NotPassable = 3
};
bool _emResultMove_IsValid(int value);
const _emResultMove _emResultMove_MIN = R_ResultMove_Succeed;
const _emResultMove _emResultMove_MAX = R_ResultMove_NotPassable;
const int _emResultMove_ARRAYSIZE = _emResultMove_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultMove_descriptor();
inline const ::std::string& _emResultMove_Name(_emResultMove value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultMove_descriptor(), value);
}
inline bool _emResultMove_Parse(
    const ::std::string& name, _emResultMove* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultMove>(
    _emResultMove_descriptor(), name, value);
}
enum _emResultSkill {
  R_ResultSkill_Succeed = 0,
  R_ResultSkill_Fail = 1,
  R_ResultSkill_NoSkill = 2,
  R_ResultSkill_ActForbid = 3,
  R_ResultSkill_Cooling = 4,
  R_ResultSkill_Consume = 5,
  R_ResultSkill_Part = 6,
  R_ResultSkill_Singing = 7,
  R_ResultSkill_Region = 8,
  R_ResultSkill_Colletion = 9,
  R_ResultSkill_ArrestNoPlayer = 10,
  R_ResultSkill_NoActive = 11,
  R_ResultSkill_NoThug = 12,
  R_ResultSkill_Colletion_Count = 13,
  R_ResultSkill_Colletion_Time = 14
};
bool _emResultSkill_IsValid(int value);
const _emResultSkill _emResultSkill_MIN = R_ResultSkill_Succeed;
const _emResultSkill _emResultSkill_MAX = R_ResultSkill_Colletion_Time;
const int _emResultSkill_ARRAYSIZE = _emResultSkill_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultSkill_descriptor();
inline const ::std::string& _emResultSkill_Name(_emResultSkill value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultSkill_descriptor(), value);
}
inline bool _emResultSkill_Parse(
    const ::std::string& name, _emResultSkill* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultSkill>(
    _emResultSkill_descriptor(), name, value);
}
enum _emResultBuff {
  R_ResultBuff_Succeed = 0,
  R_ResultBuff_Fail = 1,
  R_ResultBuff_NoBuff = 2
};
bool _emResultBuff_IsValid(int value);
const _emResultBuff _emResultBuff_MIN = R_ResultBuff_Succeed;
const _emResultBuff _emResultBuff_MAX = R_ResultBuff_NoBuff;
const int _emResultBuff_ARRAYSIZE = _emResultBuff_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultBuff_descriptor();
inline const ::std::string& _emResultBuff_Name(_emResultBuff value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultBuff_descriptor(), value);
}
inline bool _emResultBuff_Parse(
    const ::std::string& name, _emResultBuff* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultBuff>(
    _emResultBuff_descriptor(), name, value);
}
enum _emResultItem {
  R_ResultItem_Succeed = 0,
  R_ResultItem_Fail = 1,
  R_ResultItem_NoItem = 2,
  R_ResultItem_CannotEquip = 3,
  R_ResultItem_CannotSplit = 4,
  R_ResultItem_CannotUse = 5,
  R_ResultItem_NotEnough = 6,
  R_ResultItem_MaxCount = 7,
  R_ResultItem_PreCondition = 8,
  R_ResultItem_CD = 9,
  R_ResultItem_NeedMoney = 10,
  R_ResultItem_NoTimeLimit = 11,
  R_ResultItem_EnhanceExpFull = 12,
  R_ResultItem_ForgeExpFull = 13,
  R_ResultItem_InheritNeedSame = 14,
  R_ResultItem_InheritOnce = 15,
  R_ResultItem_MakeNeedItem = 16,
  R_ResultItem_MakeNeedLucky = 17,
  R_ResultItem_MakeNeedSpecial = 18,
  R_ResultItem_MountingNoChange = 19,
  R_ResultItem_Mounting = 20,
  R_ResultItem_unMounting = 21,
  R_ResultItem_FightingNoMount = 22,
  R_ResultItem_DeadNoUse = 23,
  R_ResultItem_ExpendFull = 24,
  R_ResultItem_ParamNumError = 25,
  R_ResultItem_RegionNoMount = 26,
  R_ResultItem_ControlNoMount = 27,
  R_ResultItem_DartRobCannotEquip = 28,
  R_ResultItem_Level_Low = 29,
  R_ResultItem_NoDayUseCount = 30,
  R_ResultItem_NoWeekUseCount = 31,
  R_ResultItem_NoMonthUseCount = 32,
  R_ResultItem_ExpBingfuNoUp = 33,
  R_ResultItem_BingfuDayExpFull = 34,
  R_ResultItem_ItemNoInEquipMap = 35,
  R_ResultItem_NotEnoughCompound = 36,
  R_ResultItem_UseNumError = 37,
  R_ResultItem_NotUserHP = 38,
  R_ResultItem_HaveFashion = 39,
  R_ResultItem_NoMakeId = 40,
  R_ResultItem_NoVigour = 41,
  R_ResultItem_NoSkilled = 42,
  R_ResultItem_OEM_Not_Enough = 43,
  R_ResultItem_OEM_Not_Enough_Fee = 44,
  R_ResultItem_OEM_Not_Online = 45,
  R_ResultItem_NotSell = 46
};
bool _emResultItem_IsValid(int value);
const _emResultItem _emResultItem_MIN = R_ResultItem_Succeed;
const _emResultItem _emResultItem_MAX = R_ResultItem_NotSell;
const int _emResultItem_ARRAYSIZE = _emResultItem_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultItem_descriptor();
inline const ::std::string& _emResultItem_Name(_emResultItem value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultItem_descriptor(), value);
}
inline bool _emResultItem_Parse(
    const ::std::string& name, _emResultItem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultItem>(
    _emResultItem_descriptor(), name, value);
}
enum _emResultPickup {
  R_ResultPickup_Succeed = 0,
  R_ResultPickup_Fail = 1
};
bool _emResultPickup_IsValid(int value);
const _emResultPickup _emResultPickup_MIN = R_ResultPickup_Succeed;
const _emResultPickup _emResultPickup_MAX = R_ResultPickup_Fail;
const int _emResultPickup_ARRAYSIZE = _emResultPickup_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultPickup_descriptor();
inline const ::std::string& _emResultPickup_Name(_emResultPickup value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultPickup_descriptor(), value);
}
inline bool _emResultPickup_Parse(
    const ::std::string& name, _emResultPickup* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultPickup>(
    _emResultPickup_descriptor(), name, value);
}
enum _emResultFaction {
  R_ResultFaction_Succeed = 0,
  R_ResultFaction_Fail = 1,
  R_ResultFaction_DBError = 2,
  R_ResultFaction_Money = 3,
  R_ResultFaction_NameLength = 4,
  R_ResultFaction_BannerLength = 5,
  R_ResultFaction_DeclarationLength = 6,
  R_ResultFaction_BadWord = 7,
  R_ResultFaction_BannerDup = 8,
  R_ResultFaction_NameDup = 9,
  R_ResultFaction_InOther = 10,
  R_ResultFaction_YouInOther = 11,
  R_ResultFaction_Full = 12,
  R_ResultFaction_Permission = 13,
  R_ResultFaction_JobFull = 14,
  R_ResultFaction_OtherNotIn = 15,
  R_ResultFaction_YouNotIn = 16,
  R_ResultFaction_NotFound = 17,
  R_ResultFaction_NotInApply = 18,
  R_ResultFaction_ApplyTooMany = 19,
  R_ResultFaction_ApplyCD = 20,
  R_ResultFaction_LeaveCD = 21,
  R_ResultFaction_OtherLevelLimit = 22,
  R_ResultFaction_OtherNotInUnion = 23,
  R_ResultFaction_OtherLeaveCD = 24,
  R_ResultFaction_OtherNotValid = 25,
  R_ResultFaction_IllegalCharacter = 26,
  R_ResultFaction_LeaderQuit = 27,
  R_ResultFaction_AlreadyInApply = 28,
  R_ResultFaction_YouLevelLimit = 29,
  R_ResultFaction_CannotOptSelf = 30,
  R_ResultFaction_OtherNotOnline = 31,
  R_ResultFaction_HasInvite = 32,
  R_ResultFaction_InCreating = 33,
  R_ResultFaction_WrongCorps = 34,
  R_ResultFaction_LearnMax = 35,
  R_ResultFaction_NeedSliver = 36,
  R_ResultFaction_LearnContribution = 37,
  R_ResultFaction_LearnSkillLevel = 38,
  R_ResultFaction_DevelopMax = 39,
  R_ResultFaction_DevelopFactionLevel = 40,
  R_ResultFaction_DevelopNeedStone = 41,
  R_ResultFaction_DevelopNeedSliver = 42,
  R_ResultFaction_AlreadyDevelop = 43,
  R_ResultFaction_DevelopCount = 44,
  R_ResultFaction_StudyCount = 45,
  R_ResultFaction_StudyNotOpen = 46,
  R_ResultFaction_StudyAlreadyHave = 47,
  R_ResultFaction_StudyNeedStone = 48,
  R_ResultFaction_StudyNeedSliver = 49,
  R_ResultFaction_StudyMoneyChange = 50,
  R_ResultFaction_DonateMoneyCount = 51,
  R_ResultFaction_DonateMoneySliver = 52,
  R_ResultFaction_DM_ContributionMax = 53,
  R_ResultFaction_Task_NeedItem = 54,
  R_ResultFaction_SetEliteMaxMember = 55,
  R_ResultFaction_SetBeautyMaxMember = 56,
  R_ResultFaction_LeaderOfflineTime = 57,
  R_ResultFaction_DeputyImpeachLeader = 58,
  R_ResultFaction_Impeaching = 59,
  R_ResultFaction_DepotNeedMoney = 60,
  R_ResultFaction_DepotNeedItem = 61,
  R_ResultFaction_CorpsBoomMax = 62,
  R_ResultFaction_DW_NeedContribution = 63,
  R_ResultFaction_DW_AlreadyHave = 64,
  R_ResultFaction_DW_NotInTime = 65,
  R_ResultFaction_DW_NotInRegion = 66,
  R_ResultFaction_NewMember = 67,
  R_ResultFaction_TargetFull = 68,
  R_ResultFaction_TaskCount = 69,
  R_ResultFaction_SetBeautyNewMember = 70,
  R_ResultFaction_SetBeautyLeader = 71,
  R_ResultFaction_DeputyJobFull = 72,
  R_ResultFaction_ElderJobFull = 73,
  R_ResultFaction_ManagerJobFull = 74,
  R_ResultFaction_PeopleJobFull = 75,
  R_ResultFaction_NameIllegalChar = 76,
  R_ResultFaction_NameBadWord = 77,
  R_ResultFaction_BannerIllegalChar = 78,
  R_ResultFaction_BannerBadWord = 79,
  R_ResultFaction_DeclarIllegalChar = 80,
  R_ResultFaction_DeclarBadWord = 81,
  R_ResultFaction_DW_DayMax = 82,
  R_ResultFaction_ForbitSpeamMaxNum = 83
};
bool _emResultFaction_IsValid(int value);
const _emResultFaction _emResultFaction_MIN = R_ResultFaction_Succeed;
const _emResultFaction _emResultFaction_MAX = R_ResultFaction_ForbitSpeamMaxNum;
const int _emResultFaction_ARRAYSIZE = _emResultFaction_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultFaction_descriptor();
inline const ::std::string& _emResultFaction_Name(_emResultFaction value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultFaction_descriptor(), value);
}
inline bool _emResultFaction_Parse(
    const ::std::string& name, _emResultFaction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultFaction>(
    _emResultFaction_descriptor(), name, value);
}
enum _emResultMail {
  R_ResultMail_Succeed = 0,
  R_ResultMail_Fail = 1,
  R_ResultMail_BagFull = 2,
  R_ResultMail_MoneyLimit = 3
};
bool _emResultMail_IsValid(int value);
const _emResultMail _emResultMail_MIN = R_ResultMail_Succeed;
const _emResultMail _emResultMail_MAX = R_ResultMail_MoneyLimit;
const int _emResultMail_ARRAYSIZE = _emResultMail_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultMail_descriptor();
inline const ::std::string& _emResultMail_Name(_emResultMail value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultMail_descriptor(), value);
}
inline bool _emResultMail_Parse(
    const ::std::string& name, _emResultMail* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultMail>(
    _emResultMail_descriptor(), name, value);
}
enum _emResultQuest {
  R_ResultQuest_Succeed = 0,
  R_ResultQuest_Fail = 1,
  R_ResultQuest_NoQuest = 2,
  R_ResultQuest_NoItem = 3,
  R_ResultQuest_Accepted = 4,
  R_ResultQuest_NoReach = 5,
  R_ResultQuest_NoClientUpdate = 6,
  R_ResultQuest_PreCondition = 7,
  R_ResultQuest_NoGiveUp = 8,
  R_ResultQuest_MasterComplete = 9
};
bool _emResultQuest_IsValid(int value);
const _emResultQuest _emResultQuest_MIN = R_ResultQuest_Succeed;
const _emResultQuest _emResultQuest_MAX = R_ResultQuest_MasterComplete;
const int _emResultQuest_ARRAYSIZE = _emResultQuest_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultQuest_descriptor();
inline const ::std::string& _emResultQuest_Name(_emResultQuest value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultQuest_descriptor(), value);
}
inline bool _emResultQuest_Parse(
    const ::std::string& name, _emResultQuest* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultQuest>(
    _emResultQuest_descriptor(), name, value);
}
enum _emResultStore {
  R_ResultStore_Succeed = 0,
  R_ResultStore_Fail = 1,
  R_ResultStore_MismatchCondition = 2,
  R_ResultStore_NeedMoreMoney = 3,
  R_ResultStore_OverLimit = 4,
  R_ResultStore_Off = 5,
  R_ResultStore_Invalid = 6,
  R_ResultStore_NeedMoreCash = 7,
  R_ResultStore_NeedMoreBindCash = 8,
  R_ResultStore_AddMomey = 9,
  R_ResultStore_MomeyType = 10,
  R_ResultStore_FriendID = 11,
  R_ResultStore_BagFull = 12
};
bool _emResultStore_IsValid(int value);
const _emResultStore _emResultStore_MIN = R_ResultStore_Succeed;
const _emResultStore _emResultStore_MAX = R_ResultStore_BagFull;
const int _emResultStore_ARRAYSIZE = _emResultStore_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultStore_descriptor();
inline const ::std::string& _emResultStore_Name(_emResultStore value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultStore_descriptor(), value);
}
inline bool _emResultStore_Parse(
    const ::std::string& name, _emResultStore* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultStore>(
    _emResultStore_descriptor(), name, value);
}
enum _emResultPrize {
  R_ResultPrize_Succeed = 0,
  R_ResultPrize_Fail = 1,
  R_ResultPrize_NoPrize = 2
};
bool _emResultPrize_IsValid(int value);
const _emResultPrize _emResultPrize_MIN = R_ResultPrize_Succeed;
const _emResultPrize _emResultPrize_MAX = R_ResultPrize_NoPrize;
const int _emResultPrize_ARRAYSIZE = _emResultPrize_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultPrize_descriptor();
inline const ::std::string& _emResultPrize_Name(_emResultPrize value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultPrize_descriptor(), value);
}
inline bool _emResultPrize_Parse(
    const ::std::string& name, _emResultPrize* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultPrize>(
    _emResultPrize_descriptor(), name, value);
}
enum _emResultCopymap {
  R_ResultCopymap_Succeed = 0,
  R_ResultCopymap_Fail = 1,
  R_ResultCopymap_Create_NeedItem = 2,
  R_ResultCopymap_Create_PreCondition = 3,
  R_ResultCopymap_Create_NoTime = 4,
  R_ResultCopymap_Create_Count = 5,
  R_ResultCopymap_Create_NeedLeader = 6,
  R_ResultCopymap_Create_NeedTeam = 7,
  R_ResultCopymap_Create_SceneClose = 8,
  R_ResultCopymap_Create_TeamInCopymap = 9,
  R_ResultCopymap_Create_InCopymap = 10,
  R_ResultCopymap_Invite_NotInCopymap = 11,
  R_ResultCopymap_Invite_EnterType = 12,
  R_ResultCopymap_Invite_NotTeamMember = 13,
  R_ResultCopymap_Invite_NotOnline = 14,
  R_ResultCopymap_Invite_TeamNotInCopymap = 15,
  R_ResultCopymap_AcceptInvite_InCopymap = 16,
  R_ResultCopymap_AcceptInvite_EnterType = 17,
  R_ResultCopymap_AcceptInvite_NotTeamMember = 18,
  R_ResultCopymap_AcceptInvite_TeamNotInCopymap = 19,
  R_ResultCopymap_AcceptInvite_Full = 20,
  R_ResultCopymap_TeamMemberInfo_NoTeam = 21,
  R_ResultCopymap_Invite_InCopymap = 22,
  R_ResultCopymap_FactionBoss_Cooling = 23,
  R_ResultCopymap_FactionBoss_NeedFaction = 24,
  R_ResultCopymap_In_Dartcar = 25,
  R_ResultCopymap_LimitOwner = 26,
  R_ResultCopymap_MemberNotAround = 27,
  R_ResultCopymap_EnterIng = 28,
  R_ResultCopymap_Create_NeedCash = 29,
  R_ResultCopymap_AcceptInvite_CashCount = 30,
  R_ResultCopymap_Create_CashCopymapID = 31,
  R_ResultCopymap_UnaciveNotOwner = 31
};
bool _emResultCopymap_IsValid(int value);
const _emResultCopymap _emResultCopymap_MIN = R_ResultCopymap_Succeed;
const _emResultCopymap _emResultCopymap_MAX = R_ResultCopymap_Create_CashCopymapID;
const int _emResultCopymap_ARRAYSIZE = _emResultCopymap_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultCopymap_descriptor();
inline const ::std::string& _emResultCopymap_Name(_emResultCopymap value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultCopymap_descriptor(), value);
}
inline bool _emResultCopymap_Parse(
    const ::std::string& name, _emResultCopymap* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultCopymap>(
    _emResultCopymap_descriptor(), name, value);
}
enum _emResultTrade {
  R_ResultTrade_Succeed = 0,
  R_ResultTrade_Fail = 1,
  R_ResultTrade_ServerError = 2,
  R_ResultTrade_NoTrade = 3,
  R_ResultTrade_InLock1 = 4,
  R_ResultTrade_InLock2 = 5,
  R_ResultTrade_InLock3 = 6,
  R_ResultTrade_InLock4 = 7,
  R_ResultTrade_NeedLock = 8,
  R_ResultTrade_AlreadyConfirm = 9,
  R_ResultTrade_ItemCount = 10,
  R_ResultTrade_DelNoItem = 11,
  R_ResultTrade_TradeBusy = 12,
  R_ResultTrade_ApplyInTrade1 = 13,
  R_ResultTrade_ApplyInTrade2 = 14,
  R_ResultTrade_TargetOffline1 = 15,
  R_ResultTrade_AnswerInTrade1 = 16,
  R_ResultTrade_AnswerInTrade2 = 17,
  R_ResultTrade_TargetOffline2 = 18,
  R_ResultTrade_AnswerTimeOut = 19,
  R_ResultTrade_ApplyInBattle = 20,
  R_ResultTrade_AnswerInBattle = 21,
  R_ResultTrade_addItemCount = 22,
  R_ResultTrade_addItemBind = 23,
  R_ResultTrade_setMoney = 24,
  R_ResultTrade_NeedLock1 = 25,
  R_ResultTrade_GetSliverLimit = 26,
  R_ResultTrade_GiveSliverLimit = 27,
  R_ResultTrade_LockCool = 28,
  R_ResultTrade_UnLock1 = 29,
  R_ResultTrade_MaxSliver = 30,
  R_ResultTrade_BagLimit = 31
};
bool _emResultTrade_IsValid(int value);
const _emResultTrade _emResultTrade_MIN = R_ResultTrade_Succeed;
const _emResultTrade _emResultTrade_MAX = R_ResultTrade_BagLimit;
const int _emResultTrade_ARRAYSIZE = _emResultTrade_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultTrade_descriptor();
inline const ::std::string& _emResultTrade_Name(_emResultTrade value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultTrade_descriptor(), value);
}
inline bool _emResultTrade_Parse(
    const ::std::string& name, _emResultTrade* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultTrade>(
    _emResultTrade_descriptor(), name, value);
}
enum _emResultSaleMoney {
  R_ResultSaleMoney_Succeed = 0,
  R_ResultSaleMoney_Fail = 1,
  R_ResultSaleMoney_NoCash = 2,
  R_ResultSaleMoney_NoSliver = 3,
  R_ResultSaleMoney_UnitCash = 4,
  R_ResultSaleMoney_NoOrder = 5,
  R_ResultSaleMoney_AveLimit = 6,
  R_ResultSaleMoney_Salecancel1 = 7,
  R_ResultSaleMoney_Salecancel2 = 8
};
bool _emResultSaleMoney_IsValid(int value);
const _emResultSaleMoney _emResultSaleMoney_MIN = R_ResultSaleMoney_Succeed;
const _emResultSaleMoney _emResultSaleMoney_MAX = R_ResultSaleMoney_Salecancel2;
const int _emResultSaleMoney_ARRAYSIZE = _emResultSaleMoney_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultSaleMoney_descriptor();
inline const ::std::string& _emResultSaleMoney_Name(_emResultSaleMoney value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultSaleMoney_descriptor(), value);
}
inline bool _emResultSaleMoney_Parse(
    const ::std::string& name, _emResultSaleMoney* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultSaleMoney>(
    _emResultSaleMoney_descriptor(), name, value);
}
enum _emResultAuction {
  R_ResultAuction_Succeed = 0,
  R_ResultAuction_Fail = 1,
  R_ResultAuction_CancelLocked = 2,
  R_ResultAuction_NoItem = 3,
  R_ResultAuction_NoSale = 4,
  R_ResultAuction_NoCount = 5,
  R_ResultAuction_IsLocked = 6,
  R_ResultAuction_ItemCount = 7,
  R_ResultAuction_ItemBind = 8,
  R_ResultAuction_NeedTax = 9,
  R_ResultAuction_LackMoney = 10
};
bool _emResultAuction_IsValid(int value);
const _emResultAuction _emResultAuction_MIN = R_ResultAuction_Succeed;
const _emResultAuction _emResultAuction_MAX = R_ResultAuction_LackMoney;
const int _emResultAuction_ARRAYSIZE = _emResultAuction_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultAuction_descriptor();
inline const ::std::string& _emResultAuction_Name(_emResultAuction value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultAuction_descriptor(), value);
}
inline bool _emResultAuction_Parse(
    const ::std::string& name, _emResultAuction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultAuction>(
    _emResultAuction_descriptor(), name, value);
}
enum _emResultCommon {
  R_ResultCommon_Succeed = 0,
  R_ResultCommon_Fail = 1,
  R_ResultCommon_NotOnline = 2,
  R_ResultCommon_NoPreCondition = 3,
  R_ResultCommon_NoOpenTime = 4,
  R_ResultCommon_ReliveCountLimit = 5,
  R_ResultCommon_ReliveLackItem = 6,
  R_ResultCommon_PromotionTime = 7,
  R_ResultCommon_PromotionQuest = 8,
  R_ResultCommon_PromotionLevel = 9,
  R_ResultCommon_SystemClose = 10,
  R_ResultCommon_BattleAttrNotFound = 11,
  R_ResultCommon_Cant_SitDown_Fight = 12,
  R_ResultCommon_Cant_SitDown_Collect = 13,
  R_ResultCommon_Cant_SitDown_AutoFight = 14,
  R_ResultCommon_Cant_SitDown_Mount = 15,
  R_ResultCommon_PromotionNeedExp = 16,
  R_ResultCommon_NoRelive_Origin = 17,
  R_ResultCommon_StrongerReward_Exist = 18,
  R_ResultCommon_StrongerReward_PowerLess = 19,
  R_ResultCommon_BigWorldLimit = 20
};
bool _emResultCommon_IsValid(int value);
const _emResultCommon _emResultCommon_MIN = R_ResultCommon_Succeed;
const _emResultCommon _emResultCommon_MAX = R_ResultCommon_BigWorldLimit;
const int _emResultCommon_ARRAYSIZE = _emResultCommon_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultCommon_descriptor();
inline const ::std::string& _emResultCommon_Name(_emResultCommon value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultCommon_descriptor(), value);
}
inline bool _emResultCommon_Parse(
    const ::std::string& name, _emResultCommon* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultCommon>(
    _emResultCommon_descriptor(), name, value);
}
enum _emResultTopList {
  R_ResultTopList_Succeed = 0,
  R_ResultTopList_Fail = 1,
  R_ResultTopList_NoPlayer = 2,
  R_ResultTopList_NoType = 3
};
bool _emResultTopList_IsValid(int value);
const _emResultTopList _emResultTopList_MIN = R_ResultTopList_Succeed;
const _emResultTopList _emResultTopList_MAX = R_ResultTopList_NoType;
const int _emResultTopList_ARRAYSIZE = _emResultTopList_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultTopList_descriptor();
inline const ::std::string& _emResultTopList_Name(_emResultTopList value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultTopList_descriptor(), value);
}
inline bool _emResultTopList_Parse(
    const ::std::string& name, _emResultTopList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultTopList>(
    _emResultTopList_descriptor(), name, value);
}
enum _emResultFriend {
  R_ResultFriend_Succeed = 0,
  R_ResultFriend_Fail = 1,
  R_ResultFriend_NoPlayer = 2,
  R_ResultFriend_ApplyLimit = 3,
  R_ResultFriend_ApplyLimit1 = 4,
  R_ResultFriend_AnswerLimit = 5,
  R_ResultFriend_AnswerLimit1 = 6,
  R_ResultFriend_NoOnline1 = 7,
  R_ResultFriend_NoOnline2 = 8,
  R_ResultFriend_AnswerTimeOut = 9
};
bool _emResultFriend_IsValid(int value);
const _emResultFriend _emResultFriend_MIN = R_ResultFriend_Succeed;
const _emResultFriend _emResultFriend_MAX = R_ResultFriend_AnswerTimeOut;
const int _emResultFriend_ARRAYSIZE = _emResultFriend_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultFriend_descriptor();
inline const ::std::string& _emResultFriend_Name(_emResultFriend value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultFriend_descriptor(), value);
}
inline bool _emResultFriend_Parse(
    const ::std::string& name, _emResultFriend* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultFriend>(
    _emResultFriend_descriptor(), name, value);
}
enum _emResultDip {
  R_ResultDip_Succeed = 0,
  R_ResultDip_Fail = 1
};
bool _emResultDip_IsValid(int value);
const _emResultDip _emResultDip_MIN = R_ResultDip_Succeed;
const _emResultDip _emResultDip_MAX = R_ResultDip_Fail;
const int _emResultDip_ARRAYSIZE = _emResultDip_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultDip_descriptor();
inline const ::std::string& _emResultDip_Name(_emResultDip value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultDip_descriptor(), value);
}
inline bool _emResultDip_Parse(
    const ::std::string& name, _emResultDip* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultDip>(
    _emResultDip_descriptor(), name, value);
}
enum _emResultWentao {
  R_ResultWentao_Succeed = 0,
  R_ResultWentao_Fail = 1,
  R_ResultWentao_NoBingFa = 2,
  R_ResultWentao_NoScheme = 3,
  R_ResultWentao_SchemeLimit = 4,
  R_ResultWentao_SchemeBingFa = 5,
  R_ResultWentao_HaveBingFa = 6,
  R_ResultWentao_BingFaError = 7,
  R_ResultWentao_AcitveNeedItem = 8,
  R_ResultWentao_QianXiuLimit = 9,
  R_ResultWentao_QianXiuNeedItem = 10,
  R_ResultWentao_TuPoLimit = 11,
  R_ResultWentao_TuPoNeedFull = 12,
  R_ResultWentao_YaoDianLimit = 13,
  R_ResultWentao_YaoDianNeedExpend = 14,
  R_ResultWentao_YaoDianNeedActive = 15,
  R_ResultWentao_NoBingFu = 16,
  R_ResultWentao_BingFuCondition = 17,
  R_ResultWentao_HaveBingFu = 18,
  R_ResultWentao_ResetNeedExpend = 19,
  R_ResultWentao_ResetBagFull = 20,
  R_ResultWentao_YaoDianPreYaoDian = 21,
  R_ResultWentao_Scheme_NoHole = 22,
  R_ResultWentao_Scheme_HoleCon = 23,
  R_ResultWentao_YaoDian_NoNormal = 24,
  R_ResultWentao_BingFu_NoBingFu = 25,
  R_ResultWentao_BingFu_NoYaoDian = 26,
  R_ResultWentao_BingFu_PreYaoDian = 27,
  R_ResultWentao_YaoDianNeedItem = 28,
  R_ResultWentao_ResetNeedItem = 29,
  R_ResultWentao_YaoDianNeedBingFu = 30
};
bool _emResultWentao_IsValid(int value);
const _emResultWentao _emResultWentao_MIN = R_ResultWentao_Succeed;
const _emResultWentao _emResultWentao_MAX = R_ResultWentao_YaoDianNeedBingFu;
const int _emResultWentao_ARRAYSIZE = _emResultWentao_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultWentao_descriptor();
inline const ::std::string& _emResultWentao_Name(_emResultWentao value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultWentao_descriptor(), value);
}
inline bool _emResultWentao_Parse(
    const ::std::string& name, _emResultWentao* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultWentao>(
    _emResultWentao_descriptor(), name, value);
}
enum _emResultWulue {
  R_ResultWulue_Succeed = 0,
  R_ResultWulue_Fail = 1,
  R_ResultWulue_NeedPreZhanlue = 3,
  R_ResultWulue_NeedPreBingfu = 4,
  R_ResultWulue_NeedPreCondition = 5,
  R_ResultWulue_NeedZhanlueLevel = 6,
  R_ResultWulue_BingfuHasUsing = 7,
  R_ResultWulue_NoSetSame = 8,
  R_ResultWulue_NeedSameType = 9
};
bool _emResultWulue_IsValid(int value);
const _emResultWulue _emResultWulue_MIN = R_ResultWulue_Succeed;
const _emResultWulue _emResultWulue_MAX = R_ResultWulue_NeedSameType;
const int _emResultWulue_ARRAYSIZE = _emResultWulue_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultWulue_descriptor();
inline const ::std::string& _emResultWulue_Name(_emResultWulue value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultWulue_descriptor(), value);
}
inline bool _emResultWulue_Parse(
    const ::std::string& name, _emResultWulue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultWulue>(
    _emResultWulue_descriptor(), name, value);
}
enum _emResultBingfu {
  R_ResultBingfu_Succeed = 0,
  R_ResultBingfu_Fail = 1,
  R_ResultBingfu_NoFind = 2,
  R_ResultBingfu_NeedPreCondition = 3,
  R_ResultBingfu_Using = 4,
  R_ResultBingfu_DayWisdomFull = 5,
  R_ResultBingfu_ExpNoUpgrade = 6
};
bool _emResultBingfu_IsValid(int value);
const _emResultBingfu _emResultBingfu_MIN = R_ResultBingfu_Succeed;
const _emResultBingfu _emResultBingfu_MAX = R_ResultBingfu_ExpNoUpgrade;
const int _emResultBingfu_ARRAYSIZE = _emResultBingfu_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultBingfu_descriptor();
inline const ::std::string& _emResultBingfu_Name(_emResultBingfu value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultBingfu_descriptor(), value);
}
inline bool _emResultBingfu_Parse(
    const ::std::string& name, _emResultBingfu* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultBingfu>(
    _emResultBingfu_descriptor(), name, value);
}
enum _emResultTeam {
  R_ResultTeam_Succeed = 0,
  R_ResultTeam_Fail = 1,
  R_ResultTeam_Invite_NoPlayer = 2,
  R_ResultTeam_Invite_HaveTeam = 3,
  R_ResultTeam_Invite_NotLeader = 4,
  R_ResultTeam_Invite_Full = 5,
  R_ResultTeam_AcceptInvite_NoPlayer = 6,
  R_ResultTeam_AcceptInvite_HaveTeam = 7,
  R_ResultTeam_AcceptInvite_Full = 8,
  R_ResultTeam_Apply_NoPlayer = 9,
  R_ResultTeam_Apply_HaveTeam = 10,
  R_ResultTeam_Apply_NoTeam = 11,
  R_ResultTeam_Apply_Full = 12,
  R_ResultTeam_AcceptApply_HaveTeam = 13,
  R_ResultTeam_AcceptApply_NoPlayer = 14,
  R_ResultTeam_AcceptApply_NoTeam = 15,
  R_ResultTeam_AcceptApply_NotLeader = 16,
  R_ResultTeam_AcceptApply_Full = 17,
  R_ResultTeam_Leave_NoTeam = 18,
  R_ResultTeam_ChangeLeader_NoTeam = 19,
  R_ResultTeam_ChangeLeader_NotLeader = 20,
  R_ResultTeam_ChangeLeader_NotMember = 21,
  R_ResultTeam_ChangeLeader_NotOnline = 22,
  R_ResultTeam_Publish_Have = 23,
  R_ResultTeam_Publish_Cancel_NoInfo = 24,
  R_ResultTeam_Publish_Invite_NoInfo = 25,
  R_ResultTeam_Publish_Invite_NoPlayer = 26,
  R_ResultTeam_Publish_AcceptInvite_HaveTeam = 27,
  R_ResultTeam_Publish_AcceptInvite_NoPlayer = 28,
  R_ResultTeam_Publish_AcceptInvite_Full = 29,
  R_ResultTeam_Kick_NoTeam = 30,
  R_ResultTeam_Kick_NotLeader = 31,
  R_ResultTeam_Kick_NotMember = 32,
  R_ResultTeam_Kick_Voting = 33,
  R_ResultTeam_KickVote_NoTeam = 34,
  R_ResultTeam_KickVote_NotMember = 35,
  R_ResultTeam_KickVote_NotVoting = 36,
  R_ResultTeam_KickVote_NotTarget = 37,
  R_ResultTeam_SetAllot_NoTeam = 38,
  R_ResultTeam_SetAllot_NotLeader = 39,
  R_ResultTeam_SetAllot_Voting = 40,
  R_ResultTeam_SetAllotVote_NoTeam = 41,
  R_ResultTeam_SetAllotVote_NotVoting = 42,
  R_ResultTeam_SetAllotVote_NotType = 43,
  R_ResultTeam_View_TargetNotOnline = 44,
  R_ResultTeam_Callup_NotLeader = 45,
  R_ResultTeam_Callup_CoolTime = 46,
  R_ResultTeam_ArrestIng = 47,
  R_ResultTeam_Arrest_NoTeam = 48,
  R_ResultTeam_NotLeader = 49,
  R_ResultTeam_NeedExpend = 50,
  R_ResultTeam_NeedItem = 51,
  R_ResultTeam_NeedMember = 52,
  R_ResultTeam_NotNpcAround = 53,
  R_ResultTeam_NeedPreCondition = 54,
  R_ResultTeam_NeedIdentity = 55,
  R_ResultTeam_FullEnterCount = 56,
  R_ResultTeam_LeaderNoDelArrest = 57,
  R_ResultTeam_NotInArrest = 58,
  R_ResultTeam_Publish_CopymapCount = 59,
  R_ResultTeam_Create_HaveTeam = 60,
  R_ResultTeam_SetTarget_NoTeam = 61,
  R_ResultTeam_SetTarget_NotLeader = 62,
  R_ResultTeam_Cannot_SetJobRequire = 63,
  R_ResultTeam_No_Applicant = 64,
  R_ResultTeam_Allready_Applicant = 65,
  R_ResultTeam_LeaveTeam_NotAllowed = 66,
  R_ResultTeam_HaveTeamTask = 67,
  R_ResultTeam_NoTeamTask = 68,
  R_ResultTeam_InCopymap = 69,
  R_ResultTeam_NoCompleteTeamTask = 70,
  R_ResultTeam_Create_NeedCash = 71,
  R_ResultTeam_Settarget_NeedCash = 72,
  R_ResultTeam_Target_LevelErr = 73
};
bool _emResultTeam_IsValid(int value);
const _emResultTeam _emResultTeam_MIN = R_ResultTeam_Succeed;
const _emResultTeam _emResultTeam_MAX = R_ResultTeam_Target_LevelErr;
const int _emResultTeam_ARRAYSIZE = _emResultTeam_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultTeam_descriptor();
inline const ::std::string& _emResultTeam_Name(_emResultTeam value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultTeam_descriptor(), value);
}
inline bool _emResultTeam_Parse(
    const ::std::string& name, _emResultTeam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultTeam>(
    _emResultTeam_descriptor(), name, value);
}
enum _emResultDropItem {
  R_ResultDropItem_Succeed = 0,
  R_ResultDropItem_Fail = 1,
  R_ResultDropItem_info_NoDrop = 2,
  R_ResultDropItem_dice_Fail = 3,
  R_ResultDropItem_dice_NoDrop = 4,
  R_ResultDropItem_dice_NoItem = 5,
  R_ResultDropItem_dice_HaveDice = 6,
  R_ResultDropItem_dice_HaveOwner = 7,
  R_ResultDropItem_dice_NotOwner = 8,
  R_ResultDropItem_dice_NoAllot = 9,
  R_ResultDropItem_assign_NoDrop = 10,
  R_ResultDropItem_assign_NoItem = 11,
  R_ResultDropItem_assign_HaveOwner = 12,
  R_ResultDropItem_assign_NotOwner = 13,
  R_ResultDropItem_assign_NoAllot = 14,
  R_ResultDropItem_assign_NoRight = 15,
  R_ResultDropItem_assign_NotMember = 16,
  R_ResultDropItem_assign_Fail = 17,
  R_ResultDropItem_info_NotOwner = 18,
  R_ResultDropItem_pickup_NoDrop = 19,
  R_ResultDropItem_pickup_NotOwner = 20,
  R_ResultDropItem_pickup_NoItem = 21,
  R_ResultDropItem_pickup_HaveOwner = 22,
  R_ResultDropItem_pickup_Fail = 23,
  R_ResultDropItem_abadon_NoDrop = 24,
  R_ResultDropItem_abadon_NotOwner = 25,
  R_ResultDropItem_abadon_NoItem = 26,
  R_ResultDropItem_abadon_HaveOwner = 27,
  R_ResultDropItem_pickall_NoDrop = 28,
  R_ResultDropItem_pickall_NotOwner = 29,
  R_ResultDropItem_pickall_Fail = 30,
  R_ResultDropItem_info_HaveOpen = 31,
  R_ResultDropItem_info_HaveOther = 32
};
bool _emResultDropItem_IsValid(int value);
const _emResultDropItem _emResultDropItem_MIN = R_ResultDropItem_Succeed;
const _emResultDropItem _emResultDropItem_MAX = R_ResultDropItem_info_HaveOther;
const int _emResultDropItem_ARRAYSIZE = _emResultDropItem_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultDropItem_descriptor();
inline const ::std::string& _emResultDropItem_Name(_emResultDropItem value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultDropItem_descriptor(), value);
}
inline bool _emResultDropItem_Parse(
    const ::std::string& name, _emResultDropItem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultDropItem>(
    _emResultDropItem_descriptor(), name, value);
}
enum _emResultIdentity {
  R_ResultIdentity_Succeed = 0,
  R_ResultIdentity_Fail = 1,
  R_ResultIdentity_NoSetID = 2,
  R_ResultIdentity_HadOpen = 3,
  R_ResultIdentity_NeedPreCondition = 4,
  R_ResultIdentity_NeedExpend = 5,
  R_ResultIdentity_NeedItem = 6,
  R_ResultIdentity_SetNoOpen = 7,
  R_ResultIdentity_SetHasIdentity = 8,
  R_ResultIdentity_NoIdentity = 9,
  R_ResultIdentity_ResetMaxCount = 10,
  R_ResultIdentity_ResetCooling = 11,
  R_ResultIdentity_NoSkillID = 12,
  R_ResultIdentity_SkillMaxLevel = 13,
  R_ResultIdentity_SkillMaxLevelDiff = 14
};
bool _emResultIdentity_IsValid(int value);
const _emResultIdentity _emResultIdentity_MIN = R_ResultIdentity_Succeed;
const _emResultIdentity _emResultIdentity_MAX = R_ResultIdentity_SkillMaxLevelDiff;
const int _emResultIdentity_ARRAYSIZE = _emResultIdentity_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultIdentity_descriptor();
inline const ::std::string& _emResultIdentity_Name(_emResultIdentity value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultIdentity_descriptor(), value);
}
inline bool _emResultIdentity_Parse(
    const ::std::string& name, _emResultIdentity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultIdentity>(
    _emResultIdentity_descriptor(), name, value);
}
enum _emResultWuxue {
  R_ResultWuxue_Succeed = 0,
  R_ResultWuxue_Fail = 1,
  R_ResultWuxue_MaxSchemeNum = 2,
  R_ResultWuxue_NoScheme = 3,
  R_ResultWuxue_NeedOneScheme = 4,
  R_ResultWuxue_NoLearnSkill = 5,
  R_ResultWuxue_NoOugiSkill = 6,
  R_ResultWuxue_FightNoChange = 7,
  R_ResultWuxue_SkillNoIndex = 8,
  R_ResultWuxue_SameSkillID = 9
};
bool _emResultWuxue_IsValid(int value);
const _emResultWuxue _emResultWuxue_MIN = R_ResultWuxue_Succeed;
const _emResultWuxue _emResultWuxue_MAX = R_ResultWuxue_SameSkillID;
const int _emResultWuxue_ARRAYSIZE = _emResultWuxue_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultWuxue_descriptor();
inline const ::std::string& _emResultWuxue_Name(_emResultWuxue value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultWuxue_descriptor(), value);
}
inline bool _emResultWuxue_Parse(
    const ::std::string& name, _emResultWuxue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultWuxue>(
    _emResultWuxue_descriptor(), name, value);
}
enum _emResultFly {
  R_ResultFly_Succeed = 0,
  R_ResultFly_Fail = 1,
  R_ResultFly_Type = 2,
  R_ResultFly_Cooling = 3
};
bool _emResultFly_IsValid(int value);
const _emResultFly _emResultFly_MIN = R_ResultFly_Succeed;
const _emResultFly _emResultFly_MAX = R_ResultFly_Cooling;
const int _emResultFly_ARRAYSIZE = _emResultFly_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultFly_descriptor();
inline const ::std::string& _emResultFly_Name(_emResultFly value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultFly_descriptor(), value);
}
inline bool _emResultFly_Parse(
    const ::std::string& name, _emResultFly* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultFly>(
    _emResultFly_descriptor(), name, value);
}
enum _emResultDart {
  R_ResultDart_Succeed = 0,
  R_ResultDart_Not_Satisfied = 1,
  R_ResultDart_No_DartID = 2,
  R_ResultDart_Not_TeamLeader = 3,
  R_ResultDart_Not_Biaoshi = 4,
  R_ResultDart_No_TargetScene = 5,
  R_ResultDart_Less_Level = 6,
  R_ResultDart_Less_DartCount = 7,
  R_ResultDart_Not_Arround = 8,
  R_ResultDart_Less_ItemCount = 9,
  R_ResultDart_Team_Count_Failed = 10,
  R_ResultDart_Already_Dart = 11,
  R_ResultDart_New_DartLeader = 12
};
bool _emResultDart_IsValid(int value);
const _emResultDart _emResultDart_MIN = R_ResultDart_Succeed;
const _emResultDart _emResultDart_MAX = R_ResultDart_New_DartLeader;
const int _emResultDart_ARRAYSIZE = _emResultDart_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultDart_descriptor();
inline const ::std::string& _emResultDart_Name(_emResultDart value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultDart_descriptor(), value);
}
inline bool _emResultDart_Parse(
    const ::std::string& name, _emResultDart* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultDart>(
    _emResultDart_descriptor(), name, value);
}
enum _emResultFactionBoss {
  R_ResultFactionBoss_Succeed = 0,
  R_ResultFactionBoss_Fail = 1
};
bool _emResultFactionBoss_IsValid(int value);
const _emResultFactionBoss _emResultFactionBoss_MIN = R_ResultFactionBoss_Succeed;
const _emResultFactionBoss _emResultFactionBoss_MAX = R_ResultFactionBoss_Fail;
const int _emResultFactionBoss_ARRAYSIZE = _emResultFactionBoss_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultFactionBoss_descriptor();
inline const ::std::string& _emResultFactionBoss_Name(_emResultFactionBoss value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultFactionBoss_descriptor(), value);
}
inline bool _emResultFactionBoss_Parse(
    const ::std::string& name, _emResultFactionBoss* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultFactionBoss>(
    _emResultFactionBoss_descriptor(), name, value);
}
enum _emResultTitle {
  R_ResultTitle_Succeed = 0,
  R_ResultTitle_Fail = 1,
  R_ResultTitle_NoActive = 2,
  R_ResultTitle_Expire = 3,
  R_ResultTitle_HaveEquip = 4,
  R_ResultTitle_NoEquip = 5
};
bool _emResultTitle_IsValid(int value);
const _emResultTitle _emResultTitle_MIN = R_ResultTitle_Succeed;
const _emResultTitle _emResultTitle_MAX = R_ResultTitle_NoEquip;
const int _emResultTitle_ARRAYSIZE = _emResultTitle_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultTitle_descriptor();
inline const ::std::string& _emResultTitle_Name(_emResultTitle value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultTitle_descriptor(), value);
}
inline bool _emResultTitle_Parse(
    const ::std::string& name, _emResultTitle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultTitle>(
    _emResultTitle_descriptor(), name, value);
}
enum _emResultFashion {
  R_ResultFashion_Succeed = 0,
  R_ResultFashion_Fail = 1,
  R_ResultFashion_NoActive = 2,
  R_ResultFashion_HaveEquip = 3,
  R_ResultFashion_NoEquip = 4
};
bool _emResultFashion_IsValid(int value);
const _emResultFashion _emResultFashion_MIN = R_ResultFashion_Succeed;
const _emResultFashion _emResultFashion_MAX = R_ResultFashion_NoEquip;
const int _emResultFashion_ARRAYSIZE = _emResultFashion_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultFashion_descriptor();
inline const ::std::string& _emResultFashion_Name(_emResultFashion value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultFashion_descriptor(), value);
}
inline bool _emResultFashion_Parse(
    const ::std::string& name, _emResultFashion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultFashion>(
    _emResultFashion_descriptor(), name, value);
}
enum _emResultEquipColumn {
  R_ResultEquipColumn_Succeed = 0,
  R_ResultEquipColumn_Fail = 1,
  R_ResultEquipColumn_NoFind = 2,
  R_ResultEquipColumn_NeedExpend = 3,
  R_ResultEquipColumn_NoItem = 4,
  R_ResultEquipColumn_EnhanceLevelFull = 5,
  R_ResultEquipColumn_PreCondition = 6,
  R_ResultEquipColumn_ItemTypeErr = 7,
  R_ResultEquipColumn_ItemNumErr = 8,
  R_ResultEquipColumn_ForgeLevelFull = 9,
  R_ResultEquipColumn_NeedEnhanceLevel = 10
};
bool _emResultEquipColumn_IsValid(int value);
const _emResultEquipColumn _emResultEquipColumn_MIN = R_ResultEquipColumn_Succeed;
const _emResultEquipColumn _emResultEquipColumn_MAX = R_ResultEquipColumn_NeedEnhanceLevel;
const int _emResultEquipColumn_ARRAYSIZE = _emResultEquipColumn_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultEquipColumn_descriptor();
inline const ::std::string& _emResultEquipColumn_Name(_emResultEquipColumn value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultEquipColumn_descriptor(), value);
}
inline bool _emResultEquipColumn_Parse(
    const ::std::string& name, _emResultEquipColumn* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultEquipColumn>(
    _emResultEquipColumn_descriptor(), name, value);
}
enum _emResultClimbTower {
  R_ResultClimbTowe_Succeed = 0,
  R_ResultClimbTowe_Failed = 1
};
bool _emResultClimbTower_IsValid(int value);
const _emResultClimbTower _emResultClimbTower_MIN = R_ResultClimbTowe_Succeed;
const _emResultClimbTower _emResultClimbTower_MAX = R_ResultClimbTowe_Failed;
const int _emResultClimbTower_ARRAYSIZE = _emResultClimbTower_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultClimbTower_descriptor();
inline const ::std::string& _emResultClimbTower_Name(_emResultClimbTower value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultClimbTower_descriptor(), value);
}
inline bool _emResultClimbTower_Parse(
    const ::std::string& name, _emResultClimbTower* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultClimbTower>(
    _emResultClimbTower_descriptor(), name, value);
}
enum _emResultPvpWar {
  R_ResultPvpWar_Succeed = 0,
  R_ResultPvpWar_Failed = 1,
  R_ResultPvpWar_NotOpenTime = 2,
  R_ResultPvpWar_NeeItem = 3,
  R_ResultPvpWar_NeeExpend = 4,
  R_ResultPvpWar_PreCondition = 5,
  R_ResultPvpWar_NeedEnterCount = 6,
  R_ResultPvpWar_InCopymap = 7,
  R_ResultPvpWar_InPlane = 8,
  R_ResultPvpWar_NoMatch = 9,
  R_ResultPvpWar_InMatch = 10,
  R_ResultPvpWar_InExitMatch = 11,
  R_ResultPvpWar_MatchIsDel = 12,
  R_ResultPvpWar_EnterCoolTime = 13
};
bool _emResultPvpWar_IsValid(int value);
const _emResultPvpWar _emResultPvpWar_MIN = R_ResultPvpWar_Succeed;
const _emResultPvpWar _emResultPvpWar_MAX = R_ResultPvpWar_EnterCoolTime;
const int _emResultPvpWar_ARRAYSIZE = _emResultPvpWar_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultPvpWar_descriptor();
inline const ::std::string& _emResultPvpWar_Name(_emResultPvpWar value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultPvpWar_descriptor(), value);
}
inline bool _emResultPvpWar_Parse(
    const ::std::string& name, _emResultPvpWar* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultPvpWar>(
    _emResultPvpWar_descriptor(), name, value);
}
enum _emResultQuestion {
  R_Question_Succeed = 0,
  R_Question_Failed = 1,
  R_Question_NotTime = 2
};
bool _emResultQuestion_IsValid(int value);
const _emResultQuestion _emResultQuestion_MIN = R_Question_Succeed;
const _emResultQuestion _emResultQuestion_MAX = R_Question_NotTime;
const int _emResultQuestion_ARRAYSIZE = _emResultQuestion_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultQuestion_descriptor();
inline const ::std::string& _emResultQuestion_Name(_emResultQuestion value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultQuestion_descriptor(), value);
}
inline bool _emResultQuestion_Parse(
    const ::std::string& name, _emResultQuestion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultQuestion>(
    _emResultQuestion_descriptor(), name, value);
}
enum _emResultGwTrain {
  R_ResultGwTrain_Succeed = 0,
  R_ResultGwTrain_Failed = 1,
  R_ResultGwTrain_HadPass = 2,
  R_ResultGwTrain_NotOpen = 3
};
bool _emResultGwTrain_IsValid(int value);
const _emResultGwTrain _emResultGwTrain_MIN = R_ResultGwTrain_Succeed;
const _emResultGwTrain _emResultGwTrain_MAX = R_ResultGwTrain_NotOpen;
const int _emResultGwTrain_ARRAYSIZE = _emResultGwTrain_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultGwTrain_descriptor();
inline const ::std::string& _emResultGwTrain_Name(_emResultGwTrain value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultGwTrain_descriptor(), value);
}
inline bool _emResultGwTrain_Parse(
    const ::std::string& name, _emResultGwTrain* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultGwTrain>(
    _emResultGwTrain_descriptor(), name, value);
}
enum _emResultWorldBoss {
  R_ResultWorldBoss_Succeed = 0,
  R_ResultWorldBoss_Failed = 1,
  R_ResultWorldBoss_No_HurtRank = 2
};
bool _emResultWorldBoss_IsValid(int value);
const _emResultWorldBoss _emResultWorldBoss_MIN = R_ResultWorldBoss_Succeed;
const _emResultWorldBoss _emResultWorldBoss_MAX = R_ResultWorldBoss_No_HurtRank;
const int _emResultWorldBoss_ARRAYSIZE = _emResultWorldBoss_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultWorldBoss_descriptor();
inline const ::std::string& _emResultWorldBoss_Name(_emResultWorldBoss value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultWorldBoss_descriptor(), value);
}
inline bool _emResultWorldBoss_Parse(
    const ::std::string& name, _emResultWorldBoss* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultWorldBoss>(
    _emResultWorldBoss_descriptor(), name, value);
}
enum _emResultActivity {
  R_ResultActivity_Succeed = 0,
  R_ResultActivity_Failed = 1,
  R_ResultActivity_NeedLivenee = 2,
  R_ResultActivity_Exist = 3
};
bool _emResultActivity_IsValid(int value);
const _emResultActivity _emResultActivity_MIN = R_ResultActivity_Succeed;
const _emResultActivity _emResultActivity_MAX = R_ResultActivity_Exist;
const int _emResultActivity_ARRAYSIZE = _emResultActivity_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultActivity_descriptor();
inline const ::std::string& _emResultActivity_Name(_emResultActivity value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultActivity_descriptor(), value);
}
inline bool _emResultActivity_Parse(
    const ::std::string& name, _emResultActivity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultActivity>(
    _emResultActivity_descriptor(), name, value);
}
enum _emResultRelive {
  R_ResultRelive_Succeed = 0,
  R_ResultRelive_Failed = 1,
  R_ResultRelive_SceneMark = 2,
  R_ResultRelive_NeedItemNum = 3,
  R_ResultRelive_CountLimit = 4,
  R_ResultRelive_TimeLimit = 5,
  R_ResultRelive_CopyMap = 6
};
bool _emResultRelive_IsValid(int value);
const _emResultRelive _emResultRelive_MIN = R_ResultRelive_Succeed;
const _emResultRelive _emResultRelive_MAX = R_ResultRelive_CopyMap;
const int _emResultRelive_ARRAYSIZE = _emResultRelive_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultRelive_descriptor();
inline const ::std::string& _emResultRelive_Name(_emResultRelive value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultRelive_descriptor(), value);
}
inline bool _emResultRelive_Parse(
    const ::std::string& name, _emResultRelive* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultRelive>(
    _emResultRelive_descriptor(), name, value);
}
enum _emResultCorps {
  R_ResultCorps_Succeed = 0,
  R_ResultCorps_Failed = 1,
  R_ResultCorps_NoCorps = 2,
  R_ResultCorps_NoPrivilege = 3,
  R_ResultCorps_IllegalCharacter = 4,
  R_ResultCorps_LengthError = 5,
  R_ResultCorps_BadWord = 6,
  R_ResultCorps_RepeatMember = 7,
  R_ResultCorps_SetJobCoolTime = 8,
  R_ResultCorps_ForbitSpeamMaxNum = 9,
  R_ResultCorps_PlayerNotOnline = 10,
  R_ResultCorps_PlayerNotInCorps = 11
};
bool _emResultCorps_IsValid(int value);
const _emResultCorps _emResultCorps_MIN = R_ResultCorps_Succeed;
const _emResultCorps _emResultCorps_MAX = R_ResultCorps_PlayerNotInCorps;
const int _emResultCorps_ARRAYSIZE = _emResultCorps_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultCorps_descriptor();
inline const ::std::string& _emResultCorps_Name(_emResultCorps value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultCorps_descriptor(), value);
}
inline bool _emResultCorps_Parse(
    const ::std::string& name, _emResultCorps* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultCorps>(
    _emResultCorps_descriptor(), name, value);
}
enum _emResultWeal {
  R_ResultWeal_Succeed = 0,
  R_ResultWeal_Failed = 1,
  R_ResultWeal_HavePrize = 2,
  R_ResultWeal_CantPrizeTime = 3,
  R_ResultWeal_NoOpenTime = 4,
  R_ResultWeal_PrizeNoSet = 5
};
bool _emResultWeal_IsValid(int value);
const _emResultWeal _emResultWeal_MIN = R_ResultWeal_Succeed;
const _emResultWeal _emResultWeal_MAX = R_ResultWeal_PrizeNoSet;
const int _emResultWeal_ARRAYSIZE = _emResultWeal_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultWeal_descriptor();
inline const ::std::string& _emResultWeal_Name(_emResultWeal value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultWeal_descriptor(), value);
}
inline bool _emResultWeal_Parse(
    const ::std::string& name, _emResultWeal* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultWeal>(
    _emResultWeal_descriptor(), name, value);
}
enum _emResultManor {
  R_ResultManor_Succeed = 0,
  R_ResultManor_Failed = 1,
  R_ResultManor_AlreadApply = 2,
  R_ResultManor_NotApply_Time = 3,
  R_ResultManor_Apply_No_Authority = 4,
  R_ResultManor_Apply_No_Activity = 5,
  R_ResultManor_Apply_No_AlreadyHold = 6,
  R_ResultManor_Apply_Corps_Wrong = 7,
  R_ResultManor_Apply_Cancle_CD = 8,
  R_ResultManor_Apply_No_TIAOZHANLING = 9,
  R_ResultManor_Fighting_No_ActiveTime = 10,
  R_ResultManor_Fighting_No_Lobby = 11,
  R_ResultManor_Fighting_No_BattleField = 12
};
bool _emResultManor_IsValid(int value);
const _emResultManor _emResultManor_MIN = R_ResultManor_Succeed;
const _emResultManor _emResultManor_MAX = R_ResultManor_Fighting_No_BattleField;
const int _emResultManor_ARRAYSIZE = _emResultManor_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultManor_descriptor();
inline const ::std::string& _emResultManor_Name(_emResultManor value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultManor_descriptor(), value);
}
inline bool _emResultManor_Parse(
    const ::std::string& name, _emResultManor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultManor>(
    _emResultManor_descriptor(), name, value);
}
enum _emResultSinglePvp {
  R_ResultSinglePvp_Succeed = 0,
  R_ResultSinglePvp_Failed = 1,
  R_ResultSinglePvp_NotOpenTime = 2,
  R_ResultSinglePvp_NeeItem = 3,
  R_ResultSinglePvp_NeeExpend = 4,
  R_ResultSinglePvp_PreCondition = 5,
  R_ResultSinglePvp_NeedEnterCount = 6,
  R_ResultSinglePvp_InCopymap = 7,
  R_ResultSinglePvp_InPlane = 8,
  R_ResultSinglePvp_NoMatch = 9,
  R_ResultSinglePvp_InMatch = 10,
  R_ResultSinglePvp_InExitMatch = 11,
  R_ResultSinglePvp_MatchIsDel = 12,
  R_ResultSinglePvp_EnterCoolTime = 13,
  R_ResultSinglePvp_NoBigWorld = 14,
  R_ResultSinglePvp_NoDayEnterCount = 15,
  R_ResultSinglePvp_HavePrize = 16,
  R_ResultSinglePvp_NoPrize = 17
};
bool _emResultSinglePvp_IsValid(int value);
const _emResultSinglePvp _emResultSinglePvp_MIN = R_ResultSinglePvp_Succeed;
const _emResultSinglePvp _emResultSinglePvp_MAX = R_ResultSinglePvp_NoPrize;
const int _emResultSinglePvp_ARRAYSIZE = _emResultSinglePvp_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emResultSinglePvp_descriptor();
inline const ::std::string& _emResultSinglePvp_Name(_emResultSinglePvp value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emResultSinglePvp_descriptor(), value);
}
inline bool _emResultSinglePvp_Parse(
    const ::std::string& name, _emResultSinglePvp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emResultSinglePvp>(
    _emResultSinglePvp_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultMove>() {
  return _emResultMove_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultSkill>() {
  return _emResultSkill_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultBuff>() {
  return _emResultBuff_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultItem>() {
  return _emResultItem_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultPickup>() {
  return _emResultPickup_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultFaction>() {
  return _emResultFaction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultMail>() {
  return _emResultMail_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultQuest>() {
  return _emResultQuest_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultStore>() {
  return _emResultStore_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultPrize>() {
  return _emResultPrize_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultCopymap>() {
  return _emResultCopymap_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultTrade>() {
  return _emResultTrade_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultSaleMoney>() {
  return _emResultSaleMoney_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultAuction>() {
  return _emResultAuction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultCommon>() {
  return _emResultCommon_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultTopList>() {
  return _emResultTopList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultFriend>() {
  return _emResultFriend_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultDip>() {
  return _emResultDip_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultWentao>() {
  return _emResultWentao_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultWulue>() {
  return _emResultWulue_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultBingfu>() {
  return _emResultBingfu_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultTeam>() {
  return _emResultTeam_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultDropItem>() {
  return _emResultDropItem_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultIdentity>() {
  return _emResultIdentity_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultWuxue>() {
  return _emResultWuxue_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultFly>() {
  return _emResultFly_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultDart>() {
  return _emResultDart_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultFactionBoss>() {
  return _emResultFactionBoss_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultTitle>() {
  return _emResultTitle_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultFashion>() {
  return _emResultFashion_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultEquipColumn>() {
  return _emResultEquipColumn_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultClimbTower>() {
  return _emResultClimbTower_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultPvpWar>() {
  return _emResultPvpWar_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultQuestion>() {
  return _emResultQuestion_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultGwTrain>() {
  return _emResultGwTrain_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultWorldBoss>() {
  return _emResultWorldBoss_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultActivity>() {
  return _emResultActivity_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultRelive>() {
  return _emResultRelive_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultCorps>() {
  return _emResultCorps_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultWeal>() {
  return _emResultWeal_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultManor>() {
  return _emResultManor_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emResultSinglePvp>() {
  return _emResultSinglePvp_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MsgResult_2eproto__INCLUDED
