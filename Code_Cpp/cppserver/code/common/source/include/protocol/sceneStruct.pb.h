// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sceneStruct.proto

#ifndef PROTOBUF_sceneStruct_2eproto__INCLUDED
#define PROTOBUF_sceneStruct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sceneStruct_2eproto();
void protobuf_AssignDesc_sceneStruct_2eproto();
void protobuf_ShutdownFile_sceneStruct_2eproto();

class PBSceneGrid;
class PBRegionEvent;
class PBGameRegion;
class PBSceneVertex;
class PBSceneTriangle;
class PBScenePath;
class PBSceneArea;
class PBMonsterCount;
class PBMonsterRegion;
class PBRoute;
class PBSceneEvent;
class PBSceneAction;
class PBPlane;
class BloomParam;
class PBSceneQinggongPoint;
class PBQinggongRoute;
class PBSceneInfo;

enum _emRegionMark {
  RegionMark_PlayerCntUseSkill = 0,
  RegionMark_PlayerCntBeHarm = 1,
  RegionMark_CntAddPKValue = 2,
  RegionMark_CntMounting = 3,
  RegionMark_Collection = 4,
  RegionMark_ZaZen = 5,
  RegionMark_CntHP = 6,
  RegionMark_ManorSafe = 7,
  RegionMark_IsSpacialRegion = 8
};
bool _emRegionMark_IsValid(int value);
const _emRegionMark _emRegionMark_MIN = RegionMark_PlayerCntUseSkill;
const _emRegionMark _emRegionMark_MAX = RegionMark_IsSpacialRegion;
const int _emRegionMark_ARRAYSIZE = _emRegionMark_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emRegionMark_descriptor();
inline const ::std::string& _emRegionMark_Name(_emRegionMark value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emRegionMark_descriptor(), value);
}
inline bool _emRegionMark_Parse(
    const ::std::string& name, _emRegionMark* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emRegionMark>(
    _emRegionMark_descriptor(), name, value);
}
enum _emRegionTriggerType {
  RegionTriggerType_Enter = 0,
  RegionTriggerType_Leave = 1
};
bool _emRegionTriggerType_IsValid(int value);
const _emRegionTriggerType _emRegionTriggerType_MIN = RegionTriggerType_Enter;
const _emRegionTriggerType _emRegionTriggerType_MAX = RegionTriggerType_Leave;
const int _emRegionTriggerType_ARRAYSIZE = _emRegionTriggerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emRegionTriggerType_descriptor();
inline const ::std::string& _emRegionTriggerType_Name(_emRegionTriggerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emRegionTriggerType_descriptor(), value);
}
inline bool _emRegionTriggerType_Parse(
    const ::std::string& name, _emRegionTriggerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emRegionTriggerType>(
    _emRegionTriggerType_descriptor(), name, value);
}
enum _emRegionEventType {
  RegionEventType_Transfer = 0,
  RegionEventType_Move = 1,
  RegionEventType_QinggongStart = 2,
  RegionEventType_EnterPlane = 3,
  RegionEventType_ManorEnterLine = 4,
  RegionEventType_ManorLeaveLine = 5,
  RegionEventType_ManorEnterFlag = 6,
  RegionEventType_ManorLeaveFlag = 7,
  RegionEventType_ManorBack2Lobby = 8
};
bool _emRegionEventType_IsValid(int value);
const _emRegionEventType _emRegionEventType_MIN = RegionEventType_Transfer;
const _emRegionEventType _emRegionEventType_MAX = RegionEventType_ManorBack2Lobby;
const int _emRegionEventType_ARRAYSIZE = _emRegionEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emRegionEventType_descriptor();
inline const ::std::string& _emRegionEventType_Name(_emRegionEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emRegionEventType_descriptor(), value);
}
inline bool _emRegionEventType_Parse(
    const ::std::string& name, _emRegionEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emRegionEventType>(
    _emRegionEventType_descriptor(), name, value);
}
enum _emSceneAreaType {
  SceneAreaType_Groud = 0,
  SceneAreaType_Door = 1,
  SceneAreaType_Grass = 2,
  SceneAreaType_Road = 3,
  SceneAreaType_Water = 4
};
bool _emSceneAreaType_IsValid(int value);
const _emSceneAreaType _emSceneAreaType_MIN = SceneAreaType_Groud;
const _emSceneAreaType _emSceneAreaType_MAX = SceneAreaType_Water;
const int _emSceneAreaType_ARRAYSIZE = _emSceneAreaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emSceneAreaType_descriptor();
inline const ::std::string& _emSceneAreaType_Name(_emSceneAreaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emSceneAreaType_descriptor(), value);
}
inline bool _emSceneAreaType_Parse(
    const ::std::string& name, _emSceneAreaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emSceneAreaType>(
    _emSceneAreaType_descriptor(), name, value);
}
enum _emRouteType {
  RouteType_Target = 0,
  RouteType_PingPong = 1,
  RouteType_Circle = 2
};
bool _emRouteType_IsValid(int value);
const _emRouteType _emRouteType_MIN = RouteType_Target;
const _emRouteType _emRouteType_MAX = RouteType_Circle;
const int _emRouteType_ARRAYSIZE = _emRouteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emRouteType_descriptor();
inline const ::std::string& _emRouteType_Name(_emRouteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emRouteType_descriptor(), value);
}
inline bool _emRouteType_Parse(
    const ::std::string& name, _emRouteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emRouteType>(
    _emRouteType_descriptor(), name, value);
}
enum _emMonsterRefreshType {
  MonsterRefreshType_None = 0,
  MonsterRefreshType_IntervalTime = 1,
  MonsterRefreshType_DeathTime = 2,
  MonsterRefreshType_FixedTime = 3,
  MonsterRefreshType_DeathTimeGroup = 4
};
bool _emMonsterRefreshType_IsValid(int value);
const _emMonsterRefreshType _emMonsterRefreshType_MIN = MonsterRefreshType_None;
const _emMonsterRefreshType _emMonsterRefreshType_MAX = MonsterRefreshType_DeathTimeGroup;
const int _emMonsterRefreshType_ARRAYSIZE = _emMonsterRefreshType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emMonsterRefreshType_descriptor();
inline const ::std::string& _emMonsterRefreshType_Name(_emMonsterRefreshType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emMonsterRefreshType_descriptor(), value);
}
inline bool _emMonsterRefreshType_Parse(
    const ::std::string& name, _emMonsterRefreshType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emMonsterRefreshType>(
    _emMonsterRefreshType_descriptor(), name, value);
}
// ===================================================================

class PBSceneGrid : public ::google::protobuf::Message {
 public:
  PBSceneGrid();
  virtual ~PBSceneGrid();
  
  PBSceneGrid(const PBSceneGrid& from);
  
  inline PBSceneGrid& operator=(const PBSceneGrid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSceneGrid& default_instance();
  
  void Swap(PBSceneGrid* other);
  
  // implements Message ----------------------------------------------
  
  PBSceneGrid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSceneGrid& from);
  void MergeFrom(const PBSceneGrid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 gridx = 1;
  inline bool has_gridx() const;
  inline void clear_gridx();
  static const int kGridxFieldNumber = 1;
  inline ::google::protobuf::uint32 gridx() const;
  inline void set_gridx(::google::protobuf::uint32 value);
  
  // optional uint32 gridy = 2;
  inline bool has_gridy() const;
  inline void clear_gridy();
  static const int kGridyFieldNumber = 2;
  inline ::google::protobuf::uint32 gridy() const;
  inline void set_gridy(::google::protobuf::uint32 value);
  
  // repeated uint32 regionid = 3;
  inline int regionid_size() const;
  inline void clear_regionid();
  static const int kRegionidFieldNumber = 3;
  inline ::google::protobuf::uint32 regionid(int index) const;
  inline void set_regionid(int index, ::google::protobuf::uint32 value);
  inline void add_regionid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      regionid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_regionid();
  
  // @@protoc_insertion_point(class_scope:PBSceneGrid)
 private:
  inline void set_has_gridx();
  inline void clear_has_gridx();
  inline void set_has_gridy();
  inline void clear_has_gridy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 gridx_;
  ::google::protobuf::uint32 gridy_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > regionid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBSceneGrid* default_instance_;
};
// -------------------------------------------------------------------

class PBRegionEvent : public ::google::protobuf::Message {
 public:
  PBRegionEvent();
  virtual ~PBRegionEvent();
  
  PBRegionEvent(const PBRegionEvent& from);
  
  inline PBRegionEvent& operator=(const PBRegionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRegionEvent& default_instance();
  
  void Swap(PBRegionEvent* other);
  
  // implements Message ----------------------------------------------
  
  PBRegionEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRegionEvent& from);
  void MergeFrom(const PBRegionEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 triggertype = 1;
  inline bool has_triggertype() const;
  inline void clear_triggertype();
  static const int kTriggertypeFieldNumber = 1;
  inline ::google::protobuf::uint32 triggertype() const;
  inline void set_triggertype(::google::protobuf::uint32 value);
  
  // optional uint32 eventtype = 2;
  inline bool has_eventtype() const;
  inline void clear_eventtype();
  static const int kEventtypeFieldNumber = 2;
  inline ::google::protobuf::uint32 eventtype() const;
  inline void set_eventtype(::google::protobuf::uint32 value);
  
  // repeated int32 paramlist = 3;
  inline int paramlist_size() const;
  inline void clear_paramlist();
  static const int kParamlistFieldNumber = 3;
  inline ::google::protobuf::int32 paramlist(int index) const;
  inline void set_paramlist(int index, ::google::protobuf::int32 value);
  inline void add_paramlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      paramlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_paramlist();
  
  // optional bool disableEffect = 4;
  inline bool has_disableeffect() const;
  inline void clear_disableeffect();
  static const int kDisableEffectFieldNumber = 4;
  inline bool disableeffect() const;
  inline void set_disableeffect(bool value);
  
  // @@protoc_insertion_point(class_scope:PBRegionEvent)
 private:
  inline void set_has_triggertype();
  inline void clear_has_triggertype();
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  inline void set_has_disableeffect();
  inline void clear_has_disableeffect();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 triggertype_;
  ::google::protobuf::uint32 eventtype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > paramlist_;
  bool disableeffect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBRegionEvent* default_instance_;
};
// -------------------------------------------------------------------

class PBGameRegion : public ::google::protobuf::Message {
 public:
  PBGameRegion();
  virtual ~PBGameRegion();
  
  PBGameRegion(const PBGameRegion& from);
  
  inline PBGameRegion& operator=(const PBGameRegion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGameRegion& default_instance();
  
  void Swap(PBGameRegion* other);
  
  // implements Message ----------------------------------------------
  
  PBGameRegion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGameRegion& from);
  void MergeFrom(const PBGameRegion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 regionid = 1;
  inline bool has_regionid() const;
  inline void clear_regionid();
  static const int kRegionidFieldNumber = 1;
  inline ::google::protobuf::uint32 regionid() const;
  inline void set_regionid(::google::protobuf::uint32 value);
  
  // repeated bool mark = 2;
  inline int mark_size() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 2;
  inline bool mark(int index) const;
  inline void set_mark(int index, bool value);
  inline void add_mark(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      mark() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_mark();
  
  // repeated .PBRegionEvent eventlist = 3;
  inline int eventlist_size() const;
  inline void clear_eventlist();
  static const int kEventlistFieldNumber = 3;
  inline const ::PBRegionEvent& eventlist(int index) const;
  inline ::PBRegionEvent* mutable_eventlist(int index);
  inline ::PBRegionEvent* add_eventlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PBRegionEvent >&
      eventlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBRegionEvent >*
      mutable_eventlist();
  
  // repeated string collidername = 4;
  inline int collidername_size() const;
  inline void clear_collidername();
  static const int kCollidernameFieldNumber = 4;
  inline const ::std::string& collidername(int index) const;
  inline ::std::string* mutable_collidername(int index);
  inline void set_collidername(int index, const ::std::string& value);
  inline void set_collidername(int index, const char* value);
  inline void set_collidername(int index, const char* value, size_t size);
  inline ::std::string* add_collidername();
  inline void add_collidername(const ::std::string& value);
  inline void add_collidername(const char* value);
  inline void add_collidername(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& collidername() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_collidername();
  
  // repeated string regioncolor = 5;
  inline int regioncolor_size() const;
  inline void clear_regioncolor();
  static const int kRegioncolorFieldNumber = 5;
  inline const ::std::string& regioncolor(int index) const;
  inline ::std::string* mutable_regioncolor(int index);
  inline void set_regioncolor(int index, const ::std::string& value);
  inline void set_regioncolor(int index, const char* value);
  inline void set_regioncolor(int index, const char* value, size_t size);
  inline ::std::string* add_regioncolor();
  inline void add_regioncolor(const ::std::string& value);
  inline void add_regioncolor(const char* value);
  inline void add_regioncolor(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& regioncolor() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_regioncolor();
  
  // optional float centerx = 6;
  inline bool has_centerx() const;
  inline void clear_centerx();
  static const int kCenterxFieldNumber = 6;
  inline float centerx() const;
  inline void set_centerx(float value);
  
  // optional float centery = 7;
  inline bool has_centery() const;
  inline void clear_centery();
  static const int kCenteryFieldNumber = 7;
  inline float centery() const;
  inline void set_centery(float value);
  
  // optional uint32 regionparam = 8;
  inline bool has_regionparam() const;
  inline void clear_regionparam();
  static const int kRegionparamFieldNumber = 8;
  inline ::google::protobuf::uint32 regionparam() const;
  inline void set_regionparam(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBGameRegion)
 private:
  inline void set_has_regionid();
  inline void clear_has_regionid();
  inline void set_has_centerx();
  inline void clear_has_centerx();
  inline void set_has_centery();
  inline void clear_has_centery();
  inline void set_has_regionparam();
  inline void clear_has_regionparam();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< bool > mark_;
  ::google::protobuf::RepeatedPtrField< ::PBRegionEvent > eventlist_;
  ::google::protobuf::uint32 regionid_;
  float centerx_;
  ::google::protobuf::RepeatedPtrField< ::std::string> collidername_;
  ::google::protobuf::RepeatedPtrField< ::std::string> regioncolor_;
  float centery_;
  ::google::protobuf::uint32 regionparam_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBGameRegion* default_instance_;
};
// -------------------------------------------------------------------

class PBSceneVertex : public ::google::protobuf::Message {
 public:
  PBSceneVertex();
  virtual ~PBSceneVertex();
  
  PBSceneVertex(const PBSceneVertex& from);
  
  inline PBSceneVertex& operator=(const PBSceneVertex& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSceneVertex& default_instance();
  
  void Swap(PBSceneVertex* other);
  
  // implements Message ----------------------------------------------
  
  PBSceneVertex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSceneVertex& from);
  void MergeFrom(const PBSceneVertex& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // @@protoc_insertion_point(class_scope:PBSceneVertex)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBSceneVertex* default_instance_;
};
// -------------------------------------------------------------------

class PBSceneTriangle : public ::google::protobuf::Message {
 public:
  PBSceneTriangle();
  virtual ~PBSceneTriangle();
  
  PBSceneTriangle(const PBSceneTriangle& from);
  
  inline PBSceneTriangle& operator=(const PBSceneTriangle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSceneTriangle& default_instance();
  
  void Swap(PBSceneTriangle* other);
  
  // implements Message ----------------------------------------------
  
  PBSceneTriangle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSceneTriangle& from);
  void MergeFrom(const PBSceneTriangle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 vertexindex1 = 1;
  inline bool has_vertexindex1() const;
  inline void clear_vertexindex1();
  static const int kVertexindex1FieldNumber = 1;
  inline ::google::protobuf::uint32 vertexindex1() const;
  inline void set_vertexindex1(::google::protobuf::uint32 value);
  
  // optional uint32 vertexindex2 = 2;
  inline bool has_vertexindex2() const;
  inline void clear_vertexindex2();
  static const int kVertexindex2FieldNumber = 2;
  inline ::google::protobuf::uint32 vertexindex2() const;
  inline void set_vertexindex2(::google::protobuf::uint32 value);
  
  // optional uint32 vertexindex3 = 3;
  inline bool has_vertexindex3() const;
  inline void clear_vertexindex3();
  static const int kVertexindex3FieldNumber = 3;
  inline ::google::protobuf::uint32 vertexindex3() const;
  inline void set_vertexindex3(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBSceneTriangle)
 private:
  inline void set_has_vertexindex1();
  inline void clear_has_vertexindex1();
  inline void set_has_vertexindex2();
  inline void clear_has_vertexindex2();
  inline void set_has_vertexindex3();
  inline void clear_has_vertexindex3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 vertexindex1_;
  ::google::protobuf::uint32 vertexindex2_;
  ::google::protobuf::uint32 vertexindex3_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBSceneTriangle* default_instance_;
};
// -------------------------------------------------------------------

class PBScenePath : public ::google::protobuf::Message {
 public:
  PBScenePath();
  virtual ~PBScenePath();
  
  PBScenePath(const PBScenePath& from);
  
  inline PBScenePath& operator=(const PBScenePath& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBScenePath& default_instance();
  
  void Swap(PBScenePath* other);
  
  // implements Message ----------------------------------------------
  
  PBScenePath* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBScenePath& from);
  void MergeFrom(const PBScenePath& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBSceneVertex vertexlist = 1;
  inline int vertexlist_size() const;
  inline void clear_vertexlist();
  static const int kVertexlistFieldNumber = 1;
  inline const ::PBSceneVertex& vertexlist(int index) const;
  inline ::PBSceneVertex* mutable_vertexlist(int index);
  inline ::PBSceneVertex* add_vertexlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PBSceneVertex >&
      vertexlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBSceneVertex >*
      mutable_vertexlist();
  
  // repeated .PBSceneTriangle trianglelist = 2;
  inline int trianglelist_size() const;
  inline void clear_trianglelist();
  static const int kTrianglelistFieldNumber = 2;
  inline const ::PBSceneTriangle& trianglelist(int index) const;
  inline ::PBSceneTriangle* mutable_trianglelist(int index);
  inline ::PBSceneTriangle* add_trianglelist();
  inline const ::google::protobuf::RepeatedPtrField< ::PBSceneTriangle >&
      trianglelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBSceneTriangle >*
      mutable_trianglelist();
  
  // @@protoc_insertion_point(class_scope:PBScenePath)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBSceneVertex > vertexlist_;
  ::google::protobuf::RepeatedPtrField< ::PBSceneTriangle > trianglelist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBScenePath* default_instance_;
};
// -------------------------------------------------------------------

class PBSceneArea : public ::google::protobuf::Message {
 public:
  PBSceneArea();
  virtual ~PBSceneArea();
  
  PBSceneArea(const PBSceneArea& from);
  
  inline PBSceneArea& operator=(const PBSceneArea& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSceneArea& default_instance();
  
  void Swap(PBSceneArea* other);
  
  // implements Message ----------------------------------------------
  
  PBSceneArea* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSceneArea& from);
  void MergeFrom(const PBSceneArea& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional bool isdynamic = 3;
  inline bool has_isdynamic() const;
  inline void clear_isdynamic();
  static const int kIsdynamicFieldNumber = 3;
  inline bool isdynamic() const;
  inline void set_isdynamic(bool value);
  
  // repeated .PBSceneVertex vertexlist = 4;
  inline int vertexlist_size() const;
  inline void clear_vertexlist();
  static const int kVertexlistFieldNumber = 4;
  inline const ::PBSceneVertex& vertexlist(int index) const;
  inline ::PBSceneVertex* mutable_vertexlist(int index);
  inline ::PBSceneVertex* add_vertexlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PBSceneVertex >&
      vertexlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBSceneVertex >*
      mutable_vertexlist();
  
  // optional float height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline float height() const;
  inline void set_height(float value);
  
  // optional uint32 adddelaytime = 6;
  inline bool has_adddelaytime() const;
  inline void clear_adddelaytime();
  static const int kAdddelaytimeFieldNumber = 6;
  inline ::google::protobuf::uint32 adddelaytime() const;
  inline void set_adddelaytime(::google::protobuf::uint32 value);
  
  // optional uint32 deldelaytime = 7;
  inline bool has_deldelaytime() const;
  inline void clear_deldelaytime();
  static const int kDeldelaytimeFieldNumber = 7;
  inline ::google::protobuf::uint32 deldelaytime() const;
  inline void set_deldelaytime(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBSceneArea)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_isdynamic();
  inline void clear_has_isdynamic();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_adddelaytime();
  inline void clear_has_adddelaytime();
  inline void set_has_deldelaytime();
  inline void clear_has_deldelaytime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedPtrField< ::PBSceneVertex > vertexlist_;
  bool isdynamic_;
  float height_;
  ::google::protobuf::uint32 adddelaytime_;
  ::google::protobuf::uint32 deldelaytime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBSceneArea* default_instance_;
};
// -------------------------------------------------------------------

class PBMonsterCount : public ::google::protobuf::Message {
 public:
  PBMonsterCount();
  virtual ~PBMonsterCount();
  
  PBMonsterCount(const PBMonsterCount& from);
  
  inline PBMonsterCount& operator=(const PBMonsterCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMonsterCount& default_instance();
  
  void Swap(PBMonsterCount* other);
  
  // implements Message ----------------------------------------------
  
  PBMonsterCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMonsterCount& from);
  void MergeFrom(const PBMonsterCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 monsterid = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsteridFieldNumber = 1;
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);
  
  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // optional uint32 routeid = 3;
  inline bool has_routeid() const;
  inline void clear_routeid();
  static const int kRouteidFieldNumber = 3;
  inline ::google::protobuf::uint32 routeid() const;
  inline void set_routeid(::google::protobuf::uint32 value);
  
  // optional uint32 unittype = 4;
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnittypeFieldNumber = 4;
  inline ::google::protobuf::uint32 unittype() const;
  inline void set_unittype(::google::protobuf::uint32 value);
  
  // optional uint32 groupid = 5;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 5;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);
  
  // optional uint32 areaid = 6;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaidFieldNumber = 6;
  inline ::google::protobuf::uint32 areaid() const;
  inline void set_areaid(::google::protobuf::uint32 value);
  
  // optional float posx = 7;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 7;
  inline float posx() const;
  inline void set_posx(float value);
  
  // optional float posy = 8;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 8;
  inline float posy() const;
  inline void set_posy(float value);
  
  // @@protoc_insertion_point(class_scope:PBMonsterCount)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_routeid();
  inline void clear_has_routeid();
  inline void set_has_unittype();
  inline void clear_has_unittype();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_areaid();
  inline void clear_has_areaid();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 monsterid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 routeid_;
  ::google::protobuf::uint32 unittype_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 areaid_;
  float posx_;
  float posy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBMonsterCount* default_instance_;
};
// -------------------------------------------------------------------

class PBMonsterRegion : public ::google::protobuf::Message {
 public:
  PBMonsterRegion();
  virtual ~PBMonsterRegion();
  
  PBMonsterRegion(const PBMonsterRegion& from);
  
  inline PBMonsterRegion& operator=(const PBMonsterRegion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMonsterRegion& default_instance();
  
  void Swap(PBMonsterRegion* other);
  
  // implements Message ----------------------------------------------
  
  PBMonsterRegion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMonsterRegion& from);
  void MergeFrom(const PBMonsterRegion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 refreshtype = 1;
  inline bool has_refreshtype() const;
  inline void clear_refreshtype();
  static const int kRefreshtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 refreshtype() const;
  inline void set_refreshtype(::google::protobuf::uint32 value);
  
  // optional uint32 interval = 2;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 2;
  inline ::google::protobuf::uint32 interval() const;
  inline void set_interval(::google::protobuf::uint32 value);
  
  // optional string fixtime = 3;
  inline bool has_fixtime() const;
  inline void clear_fixtime();
  static const int kFixtimeFieldNumber = 3;
  inline const ::std::string& fixtime() const;
  inline void set_fixtime(const ::std::string& value);
  inline void set_fixtime(const char* value);
  inline void set_fixtime(const char* value, size_t size);
  inline ::std::string* mutable_fixtime();
  inline ::std::string* release_fixtime();
  
  // optional float x = 4;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline float x() const;
  inline void set_x(float value);
  
  // optional float y = 5;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline float y() const;
  inline void set_y(float value);
  
  // optional float radius = 6;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 6;
  inline float radius() const;
  inline void set_radius(float value);
  
  // optional float dir = 7;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 7;
  inline float dir() const;
  inline void set_dir(float value);
  
  // repeated .PBMonsterCount monsterlist = 8;
  inline int monsterlist_size() const;
  inline void clear_monsterlist();
  static const int kMonsterlistFieldNumber = 8;
  inline const ::PBMonsterCount& monsterlist(int index) const;
  inline ::PBMonsterCount* mutable_monsterlist(int index);
  inline ::PBMonsterCount* add_monsterlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMonsterCount >&
      monsterlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMonsterCount >*
      mutable_monsterlist();
  
  // @@protoc_insertion_point(class_scope:PBMonsterRegion)
 private:
  inline void set_has_refreshtype();
  inline void clear_has_refreshtype();
  inline void set_has_interval();
  inline void clear_has_interval();
  inline void set_has_fixtime();
  inline void clear_has_fixtime();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_dir();
  inline void clear_has_dir();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 refreshtype_;
  ::google::protobuf::uint32 interval_;
  ::std::string* fixtime_;
  float x_;
  float y_;
  float radius_;
  float dir_;
  ::google::protobuf::RepeatedPtrField< ::PBMonsterCount > monsterlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBMonsterRegion* default_instance_;
};
// -------------------------------------------------------------------

class PBRoute : public ::google::protobuf::Message {
 public:
  PBRoute();
  virtual ~PBRoute();
  
  PBRoute(const PBRoute& from);
  
  inline PBRoute& operator=(const PBRoute& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRoute& default_instance();
  
  void Swap(PBRoute* other);
  
  // implements Message ----------------------------------------------
  
  PBRoute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRoute& from);
  void MergeFrom(const PBRoute& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // repeated .PBSceneVertex vertexlist = 3;
  inline int vertexlist_size() const;
  inline void clear_vertexlist();
  static const int kVertexlistFieldNumber = 3;
  inline const ::PBSceneVertex& vertexlist(int index) const;
  inline ::PBSceneVertex* mutable_vertexlist(int index);
  inline ::PBSceneVertex* add_vertexlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PBSceneVertex >&
      vertexlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBSceneVertex >*
      mutable_vertexlist();
  
  // @@protoc_insertion_point(class_scope:PBRoute)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedPtrField< ::PBSceneVertex > vertexlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBRoute* default_instance_;
};
// -------------------------------------------------------------------

class PBSceneEvent : public ::google::protobuf::Message {
 public:
  PBSceneEvent();
  virtual ~PBSceneEvent();
  
  PBSceneEvent(const PBSceneEvent& from);
  
  inline PBSceneEvent& operator=(const PBSceneEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSceneEvent& default_instance();
  
  void Swap(PBSceneEvent* other);
  
  // implements Message ----------------------------------------------
  
  PBSceneEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSceneEvent& from);
  void MergeFrom(const PBSceneEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // repeated .PBSceneAction actionlist = 2;
  inline int actionlist_size() const;
  inline void clear_actionlist();
  static const int kActionlistFieldNumber = 2;
  inline const ::PBSceneAction& actionlist(int index) const;
  inline ::PBSceneAction* mutable_actionlist(int index);
  inline ::PBSceneAction* add_actionlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PBSceneAction >&
      actionlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBSceneAction >*
      mutable_actionlist();
  
  // @@protoc_insertion_point(class_scope:PBSceneEvent)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBSceneAction > actionlist_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBSceneEvent* default_instance_;
};
// -------------------------------------------------------------------

class PBSceneAction : public ::google::protobuf::Message {
 public:
  PBSceneAction();
  virtual ~PBSceneAction();
  
  PBSceneAction(const PBSceneAction& from);
  
  inline PBSceneAction& operator=(const PBSceneAction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSceneAction& default_instance();
  
  void Swap(PBSceneAction* other);
  
  // implements Message ----------------------------------------------
  
  PBSceneAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSceneAction& from);
  void MergeFrom(const PBSceneAction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // repeated string paramlist = 2;
  inline int paramlist_size() const;
  inline void clear_paramlist();
  static const int kParamlistFieldNumber = 2;
  inline const ::std::string& paramlist(int index) const;
  inline ::std::string* mutable_paramlist(int index);
  inline void set_paramlist(int index, const ::std::string& value);
  inline void set_paramlist(int index, const char* value);
  inline void set_paramlist(int index, const char* value, size_t size);
  inline ::std::string* add_paramlist();
  inline void add_paramlist(const ::std::string& value);
  inline void add_paramlist(const char* value);
  inline void add_paramlist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& paramlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_paramlist();
  
  // @@protoc_insertion_point(class_scope:PBSceneAction)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> paramlist_;
  ::google::protobuf::uint32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBSceneAction* default_instance_;
};
// -------------------------------------------------------------------

class PBPlane : public ::google::protobuf::Message {
 public:
  PBPlane();
  virtual ~PBPlane();
  
  PBPlane(const PBPlane& from);
  
  inline PBPlane& operator=(const PBPlane& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBPlane& default_instance();
  
  void Swap(PBPlane* other);
  
  // implements Message ----------------------------------------------
  
  PBPlane* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBPlane& from);
  void MergeFrom(const PBPlane& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 planeid = 1;
  inline bool has_planeid() const;
  inline void clear_planeid();
  static const int kPlaneidFieldNumber = 1;
  inline ::google::protobuf::uint32 planeid() const;
  inline void set_planeid(::google::protobuf::uint32 value);
  
  // optional string gameobjectname = 2;
  inline bool has_gameobjectname() const;
  inline void clear_gameobjectname();
  static const int kGameobjectnameFieldNumber = 2;
  inline const ::std::string& gameobjectname() const;
  inline void set_gameobjectname(const ::std::string& value);
  inline void set_gameobjectname(const char* value);
  inline void set_gameobjectname(const char* value, size_t size);
  inline ::std::string* mutable_gameobjectname();
  inline ::std::string* release_gameobjectname();
  
  // repeated .PBMonsterRegion monsterregion = 3;
  inline int monsterregion_size() const;
  inline void clear_monsterregion();
  static const int kMonsterregionFieldNumber = 3;
  inline const ::PBMonsterRegion& monsterregion(int index) const;
  inline ::PBMonsterRegion* mutable_monsterregion(int index);
  inline ::PBMonsterRegion* add_monsterregion();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMonsterRegion >&
      monsterregion() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMonsterRegion >*
      mutable_monsterregion();
  
  // repeated uint32 sceneAreaIds = 4;
  inline int sceneareaids_size() const;
  inline void clear_sceneareaids();
  static const int kSceneAreaIdsFieldNumber = 4;
  inline ::google::protobuf::uint32 sceneareaids(int index) const;
  inline void set_sceneareaids(int index, ::google::protobuf::uint32 value);
  inline void add_sceneareaids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      sceneareaids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_sceneareaids();
  
  // @@protoc_insertion_point(class_scope:PBPlane)
 private:
  inline void set_has_planeid();
  inline void clear_has_planeid();
  inline void set_has_gameobjectname();
  inline void clear_has_gameobjectname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* gameobjectname_;
  ::google::protobuf::RepeatedPtrField< ::PBMonsterRegion > monsterregion_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > sceneareaids_;
  ::google::protobuf::uint32 planeid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBPlane* default_instance_;
};
// -------------------------------------------------------------------

class BloomParam : public ::google::protobuf::Message {
 public:
  BloomParam();
  virtual ~BloomParam();
  
  BloomParam(const BloomParam& from);
  
  inline BloomParam& operator=(const BloomParam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BloomParam& default_instance();
  
  void Swap(BloomParam* other);
  
  // implements Message ----------------------------------------------
  
  BloomParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BloomParam& from);
  void MergeFrom(const BloomParam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string colorMix = 1;
  inline bool has_colormix() const;
  inline void clear_colormix();
  static const int kColorMixFieldNumber = 1;
  inline const ::std::string& colormix() const;
  inline void set_colormix(const ::std::string& value);
  inline void set_colormix(const char* value);
  inline void set_colormix(const char* value, size_t size);
  inline ::std::string* mutable_colormix();
  inline ::std::string* release_colormix();
  
  // optional float threshold = 2;
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 2;
  inline float threshold() const;
  inline void set_threshold(float value);
  
  // optional float intensity = 3;
  inline bool has_intensity() const;
  inline void clear_intensity();
  static const int kIntensityFieldNumber = 3;
  inline float intensity() const;
  inline void set_intensity(float value);
  
  // optional float blurSize = 4;
  inline bool has_blursize() const;
  inline void clear_blursize();
  static const int kBlurSizeFieldNumber = 4;
  inline float blursize() const;
  inline void set_blursize(float value);
  
  // optional uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 quality = 6;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 6;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:BloomParam)
 private:
  inline void set_has_colormix();
  inline void clear_has_colormix();
  inline void set_has_threshold();
  inline void clear_has_threshold();
  inline void set_has_intensity();
  inline void clear_has_intensity();
  inline void set_has_blursize();
  inline void clear_has_blursize();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_quality();
  inline void clear_has_quality();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* colormix_;
  float threshold_;
  float intensity_;
  float blursize_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 quality_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static BloomParam* default_instance_;
};
// -------------------------------------------------------------------

class PBSceneQinggongPoint : public ::google::protobuf::Message {
 public:
  PBSceneQinggongPoint();
  virtual ~PBSceneQinggongPoint();
  
  PBSceneQinggongPoint(const PBSceneQinggongPoint& from);
  
  inline PBSceneQinggongPoint& operator=(const PBSceneQinggongPoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSceneQinggongPoint& default_instance();
  
  void Swap(PBSceneQinggongPoint* other);
  
  // implements Message ----------------------------------------------
  
  PBSceneQinggongPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSceneQinggongPoint& from);
  void MergeFrom(const PBSceneQinggongPoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 speed = 5;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 5;
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:PBSceneQinggongPoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_speed();
  inline void clear_has_speed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 speed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBSceneQinggongPoint* default_instance_;
};
// -------------------------------------------------------------------

class PBQinggongRoute : public ::google::protobuf::Message {
 public:
  PBQinggongRoute();
  virtual ~PBQinggongRoute();
  
  PBQinggongRoute(const PBQinggongRoute& from);
  
  inline PBQinggongRoute& operator=(const PBQinggongRoute& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBQinggongRoute& default_instance();
  
  void Swap(PBQinggongRoute* other);
  
  // implements Message ----------------------------------------------
  
  PBQinggongRoute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBQinggongRoute& from);
  void MergeFrom(const PBQinggongRoute& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // repeated .PBSceneQinggongPoint vertexlist = 2;
  inline int vertexlist_size() const;
  inline void clear_vertexlist();
  static const int kVertexlistFieldNumber = 2;
  inline const ::PBSceneQinggongPoint& vertexlist(int index) const;
  inline ::PBSceneQinggongPoint* mutable_vertexlist(int index);
  inline ::PBSceneQinggongPoint* add_vertexlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PBSceneQinggongPoint >&
      vertexlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBSceneQinggongPoint >*
      mutable_vertexlist();
  
  // @@protoc_insertion_point(class_scope:PBQinggongRoute)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBSceneQinggongPoint > vertexlist_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBQinggongRoute* default_instance_;
};
// -------------------------------------------------------------------

class PBSceneInfo : public ::google::protobuf::Message {
 public:
  PBSceneInfo();
  virtual ~PBSceneInfo();
  
  PBSceneInfo(const PBSceneInfo& from);
  
  inline PBSceneInfo& operator=(const PBSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSceneInfo& default_instance();
  
  void Swap(PBSceneInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBSceneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSceneInfo& from);
  void MergeFrom(const PBSceneInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 scenewide = 1;
  inline bool has_scenewide() const;
  inline void clear_scenewide();
  static const int kScenewideFieldNumber = 1;
  inline ::google::protobuf::uint32 scenewide() const;
  inline void set_scenewide(::google::protobuf::uint32 value);
  
  // optional uint32 scenehigh = 2;
  inline bool has_scenehigh() const;
  inline void clear_scenehigh();
  static const int kScenehighFieldNumber = 2;
  inline ::google::protobuf::uint32 scenehigh() const;
  inline void set_scenehigh(::google::protobuf::uint32 value);
  
  // optional uint32 gridwide = 3;
  inline bool has_gridwide() const;
  inline void clear_gridwide();
  static const int kGridwideFieldNumber = 3;
  inline ::google::protobuf::uint32 gridwide() const;
  inline void set_gridwide(::google::protobuf::uint32 value);
  
  // optional uint32 gridhigh = 4;
  inline bool has_gridhigh() const;
  inline void clear_gridhigh();
  static const int kGridhighFieldNumber = 4;
  inline ::google::protobuf::uint32 gridhigh() const;
  inline void set_gridhigh(::google::protobuf::uint32 value);
  
  // repeated .PBSceneGrid gridinfo = 5;
  inline int gridinfo_size() const;
  inline void clear_gridinfo();
  static const int kGridinfoFieldNumber = 5;
  inline const ::PBSceneGrid& gridinfo(int index) const;
  inline ::PBSceneGrid* mutable_gridinfo(int index);
  inline ::PBSceneGrid* add_gridinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::PBSceneGrid >&
      gridinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBSceneGrid >*
      mutable_gridinfo();
  
  // repeated .PBGameRegion regionlist = 6;
  inline int regionlist_size() const;
  inline void clear_regionlist();
  static const int kRegionlistFieldNumber = 6;
  inline const ::PBGameRegion& regionlist(int index) const;
  inline ::PBGameRegion* mutable_regionlist(int index);
  inline ::PBGameRegion* add_regionlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PBGameRegion >&
      regionlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBGameRegion >*
      mutable_regionlist();
  
  // optional .PBScenePath path = 7;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 7;
  inline const ::PBScenePath& path() const;
  inline ::PBScenePath* mutable_path();
  inline ::PBScenePath* release_path();
  
  // repeated .PBMonsterRegion monsterregion = 8;
  inline int monsterregion_size() const;
  inline void clear_monsterregion();
  static const int kMonsterregionFieldNumber = 8;
  inline const ::PBMonsterRegion& monsterregion(int index) const;
  inline ::PBMonsterRegion* mutable_monsterregion(int index);
  inline ::PBMonsterRegion* add_monsterregion();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMonsterRegion >&
      monsterregion() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMonsterRegion >*
      mutable_monsterregion();
  
  // repeated .PBSceneArea arealist = 9;
  inline int arealist_size() const;
  inline void clear_arealist();
  static const int kArealistFieldNumber = 9;
  inline const ::PBSceneArea& arealist(int index) const;
  inline ::PBSceneArea* mutable_arealist(int index);
  inline ::PBSceneArea* add_arealist();
  inline const ::google::protobuf::RepeatedPtrField< ::PBSceneArea >&
      arealist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBSceneArea >*
      mutable_arealist();
  
  // repeated .PBRoute routelist = 10;
  inline int routelist_size() const;
  inline void clear_routelist();
  static const int kRoutelistFieldNumber = 10;
  inline const ::PBRoute& routelist(int index) const;
  inline ::PBRoute* mutable_routelist(int index);
  inline ::PBRoute* add_routelist();
  inline const ::google::protobuf::RepeatedPtrField< ::PBRoute >&
      routelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBRoute >*
      mutable_routelist();
  
  // optional float eulerX = 11;
  inline bool has_eulerx() const;
  inline void clear_eulerx();
  static const int kEulerXFieldNumber = 11;
  inline float eulerx() const;
  inline void set_eulerx(float value);
  
  // optional float eulerY = 12;
  inline bool has_eulery() const;
  inline void clear_eulery();
  static const int kEulerYFieldNumber = 12;
  inline float eulery() const;
  inline void set_eulery(float value);
  
  // optional float viewDis = 13;
  inline bool has_viewdis() const;
  inline void clear_viewdis();
  static const int kViewDisFieldNumber = 13;
  inline float viewdis() const;
  inline void set_viewdis(float value);
  
  // repeated .PBPlane planes = 14;
  inline int planes_size() const;
  inline void clear_planes();
  static const int kPlanesFieldNumber = 14;
  inline const ::PBPlane& planes(int index) const;
  inline ::PBPlane* mutable_planes(int index);
  inline ::PBPlane* add_planes();
  inline const ::google::protobuf::RepeatedPtrField< ::PBPlane >&
      planes() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBPlane >*
      mutable_planes();
  
  // repeated .PBSceneEvent sceneEvent = 15;
  inline int sceneevent_size() const;
  inline void clear_sceneevent();
  static const int kSceneEventFieldNumber = 15;
  inline const ::PBSceneEvent& sceneevent(int index) const;
  inline ::PBSceneEvent* mutable_sceneevent(int index);
  inline ::PBSceneEvent* add_sceneevent();
  inline const ::google::protobuf::RepeatedPtrField< ::PBSceneEvent >&
      sceneevent() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBSceneEvent >*
      mutable_sceneevent();
  
  // optional .BloomParam bloomParam = 16;
  inline bool has_bloomparam() const;
  inline void clear_bloomparam();
  static const int kBloomParamFieldNumber = 16;
  inline const ::BloomParam& bloomparam() const;
  inline ::BloomParam* mutable_bloomparam();
  inline ::BloomParam* release_bloomparam();
  
  // optional bool useBloom = 17;
  inline bool has_usebloom() const;
  inline void clear_usebloom();
  static const int kUseBloomFieldNumber = 17;
  inline bool usebloom() const;
  inline void set_usebloom(bool value);
  
  // optional .PBGameRegion defaultregion = 18;
  inline bool has_defaultregion() const;
  inline void clear_defaultregion();
  static const int kDefaultregionFieldNumber = 18;
  inline const ::PBGameRegion& defaultregion() const;
  inline ::PBGameRegion* mutable_defaultregion();
  inline ::PBGameRegion* release_defaultregion();
  
  // repeated .PBQinggongRoute qinggonglist = 19;
  inline int qinggonglist_size() const;
  inline void clear_qinggonglist();
  static const int kQinggonglistFieldNumber = 19;
  inline const ::PBQinggongRoute& qinggonglist(int index) const;
  inline ::PBQinggongRoute* mutable_qinggonglist(int index);
  inline ::PBQinggongRoute* add_qinggonglist();
  inline const ::google::protobuf::RepeatedPtrField< ::PBQinggongRoute >&
      qinggonglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBQinggongRoute >*
      mutable_qinggonglist();
  
  // @@protoc_insertion_point(class_scope:PBSceneInfo)
 private:
  inline void set_has_scenewide();
  inline void clear_has_scenewide();
  inline void set_has_scenehigh();
  inline void clear_has_scenehigh();
  inline void set_has_gridwide();
  inline void clear_has_gridwide();
  inline void set_has_gridhigh();
  inline void clear_has_gridhigh();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_eulerx();
  inline void clear_has_eulerx();
  inline void set_has_eulery();
  inline void clear_has_eulery();
  inline void set_has_viewdis();
  inline void clear_has_viewdis();
  inline void set_has_bloomparam();
  inline void clear_has_bloomparam();
  inline void set_has_usebloom();
  inline void clear_has_usebloom();
  inline void set_has_defaultregion();
  inline void clear_has_defaultregion();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 scenewide_;
  ::google::protobuf::uint32 scenehigh_;
  ::google::protobuf::uint32 gridwide_;
  ::google::protobuf::uint32 gridhigh_;
  ::google::protobuf::RepeatedPtrField< ::PBSceneGrid > gridinfo_;
  ::google::protobuf::RepeatedPtrField< ::PBGameRegion > regionlist_;
  ::PBScenePath* path_;
  ::google::protobuf::RepeatedPtrField< ::PBMonsterRegion > monsterregion_;
  ::google::protobuf::RepeatedPtrField< ::PBSceneArea > arealist_;
  ::google::protobuf::RepeatedPtrField< ::PBRoute > routelist_;
  float eulerx_;
  float eulery_;
  ::google::protobuf::RepeatedPtrField< ::PBPlane > planes_;
  ::google::protobuf::RepeatedPtrField< ::PBSceneEvent > sceneevent_;
  float viewdis_;
  bool usebloom_;
  ::BloomParam* bloomparam_;
  ::PBGameRegion* defaultregion_;
  ::google::protobuf::RepeatedPtrField< ::PBQinggongRoute > qinggonglist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_sceneStruct_2eproto();
  friend void protobuf_AssignDesc_sceneStruct_2eproto();
  friend void protobuf_ShutdownFile_sceneStruct_2eproto();
  
  void InitAsDefaultInstance();
  static PBSceneInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// PBSceneGrid

// optional uint32 gridx = 1;
inline bool PBSceneGrid::has_gridx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSceneGrid::set_has_gridx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSceneGrid::clear_has_gridx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSceneGrid::clear_gridx() {
  gridx_ = 0u;
  clear_has_gridx();
}
inline ::google::protobuf::uint32 PBSceneGrid::gridx() const {
  return gridx_;
}
inline void PBSceneGrid::set_gridx(::google::protobuf::uint32 value) {
  set_has_gridx();
  gridx_ = value;
}

// optional uint32 gridy = 2;
inline bool PBSceneGrid::has_gridy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBSceneGrid::set_has_gridy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBSceneGrid::clear_has_gridy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBSceneGrid::clear_gridy() {
  gridy_ = 0u;
  clear_has_gridy();
}
inline ::google::protobuf::uint32 PBSceneGrid::gridy() const {
  return gridy_;
}
inline void PBSceneGrid::set_gridy(::google::protobuf::uint32 value) {
  set_has_gridy();
  gridy_ = value;
}

// repeated uint32 regionid = 3;
inline int PBSceneGrid::regionid_size() const {
  return regionid_.size();
}
inline void PBSceneGrid::clear_regionid() {
  regionid_.Clear();
}
inline ::google::protobuf::uint32 PBSceneGrid::regionid(int index) const {
  return regionid_.Get(index);
}
inline void PBSceneGrid::set_regionid(int index, ::google::protobuf::uint32 value) {
  regionid_.Set(index, value);
}
inline void PBSceneGrid::add_regionid(::google::protobuf::uint32 value) {
  regionid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PBSceneGrid::regionid() const {
  return regionid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PBSceneGrid::mutable_regionid() {
  return &regionid_;
}

// -------------------------------------------------------------------

// PBRegionEvent

// optional uint32 triggertype = 1;
inline bool PBRegionEvent::has_triggertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRegionEvent::set_has_triggertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRegionEvent::clear_has_triggertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRegionEvent::clear_triggertype() {
  triggertype_ = 0u;
  clear_has_triggertype();
}
inline ::google::protobuf::uint32 PBRegionEvent::triggertype() const {
  return triggertype_;
}
inline void PBRegionEvent::set_triggertype(::google::protobuf::uint32 value) {
  set_has_triggertype();
  triggertype_ = value;
}

// optional uint32 eventtype = 2;
inline bool PBRegionEvent::has_eventtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRegionEvent::set_has_eventtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRegionEvent::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRegionEvent::clear_eventtype() {
  eventtype_ = 0u;
  clear_has_eventtype();
}
inline ::google::protobuf::uint32 PBRegionEvent::eventtype() const {
  return eventtype_;
}
inline void PBRegionEvent::set_eventtype(::google::protobuf::uint32 value) {
  set_has_eventtype();
  eventtype_ = value;
}

// repeated int32 paramlist = 3;
inline int PBRegionEvent::paramlist_size() const {
  return paramlist_.size();
}
inline void PBRegionEvent::clear_paramlist() {
  paramlist_.Clear();
}
inline ::google::protobuf::int32 PBRegionEvent::paramlist(int index) const {
  return paramlist_.Get(index);
}
inline void PBRegionEvent::set_paramlist(int index, ::google::protobuf::int32 value) {
  paramlist_.Set(index, value);
}
inline void PBRegionEvent::add_paramlist(::google::protobuf::int32 value) {
  paramlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBRegionEvent::paramlist() const {
  return paramlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBRegionEvent::mutable_paramlist() {
  return &paramlist_;
}

// optional bool disableEffect = 4;
inline bool PBRegionEvent::has_disableeffect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBRegionEvent::set_has_disableeffect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBRegionEvent::clear_has_disableeffect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBRegionEvent::clear_disableeffect() {
  disableeffect_ = false;
  clear_has_disableeffect();
}
inline bool PBRegionEvent::disableeffect() const {
  return disableeffect_;
}
inline void PBRegionEvent::set_disableeffect(bool value) {
  set_has_disableeffect();
  disableeffect_ = value;
}

// -------------------------------------------------------------------

// PBGameRegion

// optional uint32 regionid = 1;
inline bool PBGameRegion::has_regionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGameRegion::set_has_regionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGameRegion::clear_has_regionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGameRegion::clear_regionid() {
  regionid_ = 0u;
  clear_has_regionid();
}
inline ::google::protobuf::uint32 PBGameRegion::regionid() const {
  return regionid_;
}
inline void PBGameRegion::set_regionid(::google::protobuf::uint32 value) {
  set_has_regionid();
  regionid_ = value;
}

// repeated bool mark = 2;
inline int PBGameRegion::mark_size() const {
  return mark_.size();
}
inline void PBGameRegion::clear_mark() {
  mark_.Clear();
}
inline bool PBGameRegion::mark(int index) const {
  return mark_.Get(index);
}
inline void PBGameRegion::set_mark(int index, bool value) {
  mark_.Set(index, value);
}
inline void PBGameRegion::add_mark(bool value) {
  mark_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
PBGameRegion::mark() const {
  return mark_;
}
inline ::google::protobuf::RepeatedField< bool >*
PBGameRegion::mutable_mark() {
  return &mark_;
}

// repeated .PBRegionEvent eventlist = 3;
inline int PBGameRegion::eventlist_size() const {
  return eventlist_.size();
}
inline void PBGameRegion::clear_eventlist() {
  eventlist_.Clear();
}
inline const ::PBRegionEvent& PBGameRegion::eventlist(int index) const {
  return eventlist_.Get(index);
}
inline ::PBRegionEvent* PBGameRegion::mutable_eventlist(int index) {
  return eventlist_.Mutable(index);
}
inline ::PBRegionEvent* PBGameRegion::add_eventlist() {
  return eventlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBRegionEvent >&
PBGameRegion::eventlist() const {
  return eventlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBRegionEvent >*
PBGameRegion::mutable_eventlist() {
  return &eventlist_;
}

// repeated string collidername = 4;
inline int PBGameRegion::collidername_size() const {
  return collidername_.size();
}
inline void PBGameRegion::clear_collidername() {
  collidername_.Clear();
}
inline const ::std::string& PBGameRegion::collidername(int index) const {
  return collidername_.Get(index);
}
inline ::std::string* PBGameRegion::mutable_collidername(int index) {
  return collidername_.Mutable(index);
}
inline void PBGameRegion::set_collidername(int index, const ::std::string& value) {
  collidername_.Mutable(index)->assign(value);
}
inline void PBGameRegion::set_collidername(int index, const char* value) {
  collidername_.Mutable(index)->assign(value);
}
inline void PBGameRegion::set_collidername(int index, const char* value, size_t size) {
  collidername_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBGameRegion::add_collidername() {
  return collidername_.Add();
}
inline void PBGameRegion::add_collidername(const ::std::string& value) {
  collidername_.Add()->assign(value);
}
inline void PBGameRegion::add_collidername(const char* value) {
  collidername_.Add()->assign(value);
}
inline void PBGameRegion::add_collidername(const char* value, size_t size) {
  collidername_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBGameRegion::collidername() const {
  return collidername_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBGameRegion::mutable_collidername() {
  return &collidername_;
}

// repeated string regioncolor = 5;
inline int PBGameRegion::regioncolor_size() const {
  return regioncolor_.size();
}
inline void PBGameRegion::clear_regioncolor() {
  regioncolor_.Clear();
}
inline const ::std::string& PBGameRegion::regioncolor(int index) const {
  return regioncolor_.Get(index);
}
inline ::std::string* PBGameRegion::mutable_regioncolor(int index) {
  return regioncolor_.Mutable(index);
}
inline void PBGameRegion::set_regioncolor(int index, const ::std::string& value) {
  regioncolor_.Mutable(index)->assign(value);
}
inline void PBGameRegion::set_regioncolor(int index, const char* value) {
  regioncolor_.Mutable(index)->assign(value);
}
inline void PBGameRegion::set_regioncolor(int index, const char* value, size_t size) {
  regioncolor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBGameRegion::add_regioncolor() {
  return regioncolor_.Add();
}
inline void PBGameRegion::add_regioncolor(const ::std::string& value) {
  regioncolor_.Add()->assign(value);
}
inline void PBGameRegion::add_regioncolor(const char* value) {
  regioncolor_.Add()->assign(value);
}
inline void PBGameRegion::add_regioncolor(const char* value, size_t size) {
  regioncolor_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBGameRegion::regioncolor() const {
  return regioncolor_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBGameRegion::mutable_regioncolor() {
  return &regioncolor_;
}

// optional float centerx = 6;
inline bool PBGameRegion::has_centerx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBGameRegion::set_has_centerx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBGameRegion::clear_has_centerx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBGameRegion::clear_centerx() {
  centerx_ = 0;
  clear_has_centerx();
}
inline float PBGameRegion::centerx() const {
  return centerx_;
}
inline void PBGameRegion::set_centerx(float value) {
  set_has_centerx();
  centerx_ = value;
}

// optional float centery = 7;
inline bool PBGameRegion::has_centery() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBGameRegion::set_has_centery() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBGameRegion::clear_has_centery() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBGameRegion::clear_centery() {
  centery_ = 0;
  clear_has_centery();
}
inline float PBGameRegion::centery() const {
  return centery_;
}
inline void PBGameRegion::set_centery(float value) {
  set_has_centery();
  centery_ = value;
}

// optional uint32 regionparam = 8;
inline bool PBGameRegion::has_regionparam() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBGameRegion::set_has_regionparam() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBGameRegion::clear_has_regionparam() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBGameRegion::clear_regionparam() {
  regionparam_ = 0u;
  clear_has_regionparam();
}
inline ::google::protobuf::uint32 PBGameRegion::regionparam() const {
  return regionparam_;
}
inline void PBGameRegion::set_regionparam(::google::protobuf::uint32 value) {
  set_has_regionparam();
  regionparam_ = value;
}

// -------------------------------------------------------------------

// PBSceneVertex

// optional float x = 1;
inline bool PBSceneVertex::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSceneVertex::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSceneVertex::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSceneVertex::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PBSceneVertex::x() const {
  return x_;
}
inline void PBSceneVertex::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool PBSceneVertex::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBSceneVertex::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBSceneVertex::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBSceneVertex::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PBSceneVertex::y() const {
  return y_;
}
inline void PBSceneVertex::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool PBSceneVertex::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBSceneVertex::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBSceneVertex::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBSceneVertex::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float PBSceneVertex::z() const {
  return z_;
}
inline void PBSceneVertex::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// PBSceneTriangle

// optional uint32 vertexindex1 = 1;
inline bool PBSceneTriangle::has_vertexindex1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSceneTriangle::set_has_vertexindex1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSceneTriangle::clear_has_vertexindex1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSceneTriangle::clear_vertexindex1() {
  vertexindex1_ = 0u;
  clear_has_vertexindex1();
}
inline ::google::protobuf::uint32 PBSceneTriangle::vertexindex1() const {
  return vertexindex1_;
}
inline void PBSceneTriangle::set_vertexindex1(::google::protobuf::uint32 value) {
  set_has_vertexindex1();
  vertexindex1_ = value;
}

// optional uint32 vertexindex2 = 2;
inline bool PBSceneTriangle::has_vertexindex2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBSceneTriangle::set_has_vertexindex2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBSceneTriangle::clear_has_vertexindex2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBSceneTriangle::clear_vertexindex2() {
  vertexindex2_ = 0u;
  clear_has_vertexindex2();
}
inline ::google::protobuf::uint32 PBSceneTriangle::vertexindex2() const {
  return vertexindex2_;
}
inline void PBSceneTriangle::set_vertexindex2(::google::protobuf::uint32 value) {
  set_has_vertexindex2();
  vertexindex2_ = value;
}

// optional uint32 vertexindex3 = 3;
inline bool PBSceneTriangle::has_vertexindex3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBSceneTriangle::set_has_vertexindex3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBSceneTriangle::clear_has_vertexindex3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBSceneTriangle::clear_vertexindex3() {
  vertexindex3_ = 0u;
  clear_has_vertexindex3();
}
inline ::google::protobuf::uint32 PBSceneTriangle::vertexindex3() const {
  return vertexindex3_;
}
inline void PBSceneTriangle::set_vertexindex3(::google::protobuf::uint32 value) {
  set_has_vertexindex3();
  vertexindex3_ = value;
}

// -------------------------------------------------------------------

// PBScenePath

// repeated .PBSceneVertex vertexlist = 1;
inline int PBScenePath::vertexlist_size() const {
  return vertexlist_.size();
}
inline void PBScenePath::clear_vertexlist() {
  vertexlist_.Clear();
}
inline const ::PBSceneVertex& PBScenePath::vertexlist(int index) const {
  return vertexlist_.Get(index);
}
inline ::PBSceneVertex* PBScenePath::mutable_vertexlist(int index) {
  return vertexlist_.Mutable(index);
}
inline ::PBSceneVertex* PBScenePath::add_vertexlist() {
  return vertexlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBSceneVertex >&
PBScenePath::vertexlist() const {
  return vertexlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBSceneVertex >*
PBScenePath::mutable_vertexlist() {
  return &vertexlist_;
}

// repeated .PBSceneTriangle trianglelist = 2;
inline int PBScenePath::trianglelist_size() const {
  return trianglelist_.size();
}
inline void PBScenePath::clear_trianglelist() {
  trianglelist_.Clear();
}
inline const ::PBSceneTriangle& PBScenePath::trianglelist(int index) const {
  return trianglelist_.Get(index);
}
inline ::PBSceneTriangle* PBScenePath::mutable_trianglelist(int index) {
  return trianglelist_.Mutable(index);
}
inline ::PBSceneTriangle* PBScenePath::add_trianglelist() {
  return trianglelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBSceneTriangle >&
PBScenePath::trianglelist() const {
  return trianglelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBSceneTriangle >*
PBScenePath::mutable_trianglelist() {
  return &trianglelist_;
}

// -------------------------------------------------------------------

// PBSceneArea

// optional uint32 id = 1;
inline bool PBSceneArea::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSceneArea::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSceneArea::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSceneArea::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PBSceneArea::id() const {
  return id_;
}
inline void PBSceneArea::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 type = 2;
inline bool PBSceneArea::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBSceneArea::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBSceneArea::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBSceneArea::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PBSceneArea::type() const {
  return type_;
}
inline void PBSceneArea::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional bool isdynamic = 3;
inline bool PBSceneArea::has_isdynamic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBSceneArea::set_has_isdynamic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBSceneArea::clear_has_isdynamic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBSceneArea::clear_isdynamic() {
  isdynamic_ = false;
  clear_has_isdynamic();
}
inline bool PBSceneArea::isdynamic() const {
  return isdynamic_;
}
inline void PBSceneArea::set_isdynamic(bool value) {
  set_has_isdynamic();
  isdynamic_ = value;
}

// repeated .PBSceneVertex vertexlist = 4;
inline int PBSceneArea::vertexlist_size() const {
  return vertexlist_.size();
}
inline void PBSceneArea::clear_vertexlist() {
  vertexlist_.Clear();
}
inline const ::PBSceneVertex& PBSceneArea::vertexlist(int index) const {
  return vertexlist_.Get(index);
}
inline ::PBSceneVertex* PBSceneArea::mutable_vertexlist(int index) {
  return vertexlist_.Mutable(index);
}
inline ::PBSceneVertex* PBSceneArea::add_vertexlist() {
  return vertexlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBSceneVertex >&
PBSceneArea::vertexlist() const {
  return vertexlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBSceneVertex >*
PBSceneArea::mutable_vertexlist() {
  return &vertexlist_;
}

// optional float height = 5;
inline bool PBSceneArea::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBSceneArea::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBSceneArea::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBSceneArea::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float PBSceneArea::height() const {
  return height_;
}
inline void PBSceneArea::set_height(float value) {
  set_has_height();
  height_ = value;
}

// optional uint32 adddelaytime = 6;
inline bool PBSceneArea::has_adddelaytime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBSceneArea::set_has_adddelaytime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBSceneArea::clear_has_adddelaytime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBSceneArea::clear_adddelaytime() {
  adddelaytime_ = 0u;
  clear_has_adddelaytime();
}
inline ::google::protobuf::uint32 PBSceneArea::adddelaytime() const {
  return adddelaytime_;
}
inline void PBSceneArea::set_adddelaytime(::google::protobuf::uint32 value) {
  set_has_adddelaytime();
  adddelaytime_ = value;
}

// optional uint32 deldelaytime = 7;
inline bool PBSceneArea::has_deldelaytime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBSceneArea::set_has_deldelaytime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBSceneArea::clear_has_deldelaytime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBSceneArea::clear_deldelaytime() {
  deldelaytime_ = 0u;
  clear_has_deldelaytime();
}
inline ::google::protobuf::uint32 PBSceneArea::deldelaytime() const {
  return deldelaytime_;
}
inline void PBSceneArea::set_deldelaytime(::google::protobuf::uint32 value) {
  set_has_deldelaytime();
  deldelaytime_ = value;
}

// -------------------------------------------------------------------

// PBMonsterCount

// optional uint32 monsterid = 1;
inline bool PBMonsterCount::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMonsterCount::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMonsterCount::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMonsterCount::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 PBMonsterCount::monsterid() const {
  return monsterid_;
}
inline void PBMonsterCount::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// optional uint32 count = 2;
inline bool PBMonsterCount::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMonsterCount::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMonsterCount::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMonsterCount::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 PBMonsterCount::count() const {
  return count_;
}
inline void PBMonsterCount::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 routeid = 3;
inline bool PBMonsterCount::has_routeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBMonsterCount::set_has_routeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBMonsterCount::clear_has_routeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBMonsterCount::clear_routeid() {
  routeid_ = 0u;
  clear_has_routeid();
}
inline ::google::protobuf::uint32 PBMonsterCount::routeid() const {
  return routeid_;
}
inline void PBMonsterCount::set_routeid(::google::protobuf::uint32 value) {
  set_has_routeid();
  routeid_ = value;
}

// optional uint32 unittype = 4;
inline bool PBMonsterCount::has_unittype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBMonsterCount::set_has_unittype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBMonsterCount::clear_has_unittype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBMonsterCount::clear_unittype() {
  unittype_ = 0u;
  clear_has_unittype();
}
inline ::google::protobuf::uint32 PBMonsterCount::unittype() const {
  return unittype_;
}
inline void PBMonsterCount::set_unittype(::google::protobuf::uint32 value) {
  set_has_unittype();
  unittype_ = value;
}

// optional uint32 groupid = 5;
inline bool PBMonsterCount::has_groupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBMonsterCount::set_has_groupid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBMonsterCount::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBMonsterCount::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 PBMonsterCount::groupid() const {
  return groupid_;
}
inline void PBMonsterCount::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional uint32 areaid = 6;
inline bool PBMonsterCount::has_areaid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBMonsterCount::set_has_areaid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBMonsterCount::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBMonsterCount::clear_areaid() {
  areaid_ = 0u;
  clear_has_areaid();
}
inline ::google::protobuf::uint32 PBMonsterCount::areaid() const {
  return areaid_;
}
inline void PBMonsterCount::set_areaid(::google::protobuf::uint32 value) {
  set_has_areaid();
  areaid_ = value;
}

// optional float posx = 7;
inline bool PBMonsterCount::has_posx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBMonsterCount::set_has_posx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBMonsterCount::clear_has_posx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBMonsterCount::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline float PBMonsterCount::posx() const {
  return posx_;
}
inline void PBMonsterCount::set_posx(float value) {
  set_has_posx();
  posx_ = value;
}

// optional float posy = 8;
inline bool PBMonsterCount::has_posy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBMonsterCount::set_has_posy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBMonsterCount::clear_has_posy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBMonsterCount::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline float PBMonsterCount::posy() const {
  return posy_;
}
inline void PBMonsterCount::set_posy(float value) {
  set_has_posy();
  posy_ = value;
}

// -------------------------------------------------------------------

// PBMonsterRegion

// optional uint32 refreshtype = 1;
inline bool PBMonsterRegion::has_refreshtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMonsterRegion::set_has_refreshtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMonsterRegion::clear_has_refreshtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMonsterRegion::clear_refreshtype() {
  refreshtype_ = 0u;
  clear_has_refreshtype();
}
inline ::google::protobuf::uint32 PBMonsterRegion::refreshtype() const {
  return refreshtype_;
}
inline void PBMonsterRegion::set_refreshtype(::google::protobuf::uint32 value) {
  set_has_refreshtype();
  refreshtype_ = value;
}

// optional uint32 interval = 2;
inline bool PBMonsterRegion::has_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMonsterRegion::set_has_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMonsterRegion::clear_has_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMonsterRegion::clear_interval() {
  interval_ = 0u;
  clear_has_interval();
}
inline ::google::protobuf::uint32 PBMonsterRegion::interval() const {
  return interval_;
}
inline void PBMonsterRegion::set_interval(::google::protobuf::uint32 value) {
  set_has_interval();
  interval_ = value;
}

// optional string fixtime = 3;
inline bool PBMonsterRegion::has_fixtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBMonsterRegion::set_has_fixtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBMonsterRegion::clear_has_fixtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBMonsterRegion::clear_fixtime() {
  if (fixtime_ != &::google::protobuf::internal::kEmptyString) {
    fixtime_->clear();
  }
  clear_has_fixtime();
}
inline const ::std::string& PBMonsterRegion::fixtime() const {
  return *fixtime_;
}
inline void PBMonsterRegion::set_fixtime(const ::std::string& value) {
  set_has_fixtime();
  if (fixtime_ == &::google::protobuf::internal::kEmptyString) {
    fixtime_ = new ::std::string;
  }
  fixtime_->assign(value);
}
inline void PBMonsterRegion::set_fixtime(const char* value) {
  set_has_fixtime();
  if (fixtime_ == &::google::protobuf::internal::kEmptyString) {
    fixtime_ = new ::std::string;
  }
  fixtime_->assign(value);
}
inline void PBMonsterRegion::set_fixtime(const char* value, size_t size) {
  set_has_fixtime();
  if (fixtime_ == &::google::protobuf::internal::kEmptyString) {
    fixtime_ = new ::std::string;
  }
  fixtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBMonsterRegion::mutable_fixtime() {
  set_has_fixtime();
  if (fixtime_ == &::google::protobuf::internal::kEmptyString) {
    fixtime_ = new ::std::string;
  }
  return fixtime_;
}
inline ::std::string* PBMonsterRegion::release_fixtime() {
  clear_has_fixtime();
  if (fixtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fixtime_;
    fixtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float x = 4;
inline bool PBMonsterRegion::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBMonsterRegion::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBMonsterRegion::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBMonsterRegion::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PBMonsterRegion::x() const {
  return x_;
}
inline void PBMonsterRegion::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 5;
inline bool PBMonsterRegion::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBMonsterRegion::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBMonsterRegion::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBMonsterRegion::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PBMonsterRegion::y() const {
  return y_;
}
inline void PBMonsterRegion::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float radius = 6;
inline bool PBMonsterRegion::has_radius() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBMonsterRegion::set_has_radius() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBMonsterRegion::clear_has_radius() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBMonsterRegion::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float PBMonsterRegion::radius() const {
  return radius_;
}
inline void PBMonsterRegion::set_radius(float value) {
  set_has_radius();
  radius_ = value;
}

// optional float dir = 7;
inline bool PBMonsterRegion::has_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBMonsterRegion::set_has_dir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBMonsterRegion::clear_has_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBMonsterRegion::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float PBMonsterRegion::dir() const {
  return dir_;
}
inline void PBMonsterRegion::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// repeated .PBMonsterCount monsterlist = 8;
inline int PBMonsterRegion::monsterlist_size() const {
  return monsterlist_.size();
}
inline void PBMonsterRegion::clear_monsterlist() {
  monsterlist_.Clear();
}
inline const ::PBMonsterCount& PBMonsterRegion::monsterlist(int index) const {
  return monsterlist_.Get(index);
}
inline ::PBMonsterCount* PBMonsterRegion::mutable_monsterlist(int index) {
  return monsterlist_.Mutable(index);
}
inline ::PBMonsterCount* PBMonsterRegion::add_monsterlist() {
  return monsterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMonsterCount >&
PBMonsterRegion::monsterlist() const {
  return monsterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMonsterCount >*
PBMonsterRegion::mutable_monsterlist() {
  return &monsterlist_;
}

// -------------------------------------------------------------------

// PBRoute

// optional uint32 id = 1;
inline bool PBRoute::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRoute::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRoute::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRoute::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PBRoute::id() const {
  return id_;
}
inline void PBRoute::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 type = 2;
inline bool PBRoute::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRoute::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRoute::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRoute::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PBRoute::type() const {
  return type_;
}
inline void PBRoute::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// repeated .PBSceneVertex vertexlist = 3;
inline int PBRoute::vertexlist_size() const {
  return vertexlist_.size();
}
inline void PBRoute::clear_vertexlist() {
  vertexlist_.Clear();
}
inline const ::PBSceneVertex& PBRoute::vertexlist(int index) const {
  return vertexlist_.Get(index);
}
inline ::PBSceneVertex* PBRoute::mutable_vertexlist(int index) {
  return vertexlist_.Mutable(index);
}
inline ::PBSceneVertex* PBRoute::add_vertexlist() {
  return vertexlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBSceneVertex >&
PBRoute::vertexlist() const {
  return vertexlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBSceneVertex >*
PBRoute::mutable_vertexlist() {
  return &vertexlist_;
}

// -------------------------------------------------------------------

// PBSceneEvent

// optional uint32 id = 1;
inline bool PBSceneEvent::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSceneEvent::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSceneEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSceneEvent::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PBSceneEvent::id() const {
  return id_;
}
inline void PBSceneEvent::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated .PBSceneAction actionlist = 2;
inline int PBSceneEvent::actionlist_size() const {
  return actionlist_.size();
}
inline void PBSceneEvent::clear_actionlist() {
  actionlist_.Clear();
}
inline const ::PBSceneAction& PBSceneEvent::actionlist(int index) const {
  return actionlist_.Get(index);
}
inline ::PBSceneAction* PBSceneEvent::mutable_actionlist(int index) {
  return actionlist_.Mutable(index);
}
inline ::PBSceneAction* PBSceneEvent::add_actionlist() {
  return actionlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBSceneAction >&
PBSceneEvent::actionlist() const {
  return actionlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBSceneAction >*
PBSceneEvent::mutable_actionlist() {
  return &actionlist_;
}

// -------------------------------------------------------------------

// PBSceneAction

// optional uint32 type = 1;
inline bool PBSceneAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSceneAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSceneAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSceneAction::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PBSceneAction::type() const {
  return type_;
}
inline void PBSceneAction::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// repeated string paramlist = 2;
inline int PBSceneAction::paramlist_size() const {
  return paramlist_.size();
}
inline void PBSceneAction::clear_paramlist() {
  paramlist_.Clear();
}
inline const ::std::string& PBSceneAction::paramlist(int index) const {
  return paramlist_.Get(index);
}
inline ::std::string* PBSceneAction::mutable_paramlist(int index) {
  return paramlist_.Mutable(index);
}
inline void PBSceneAction::set_paramlist(int index, const ::std::string& value) {
  paramlist_.Mutable(index)->assign(value);
}
inline void PBSceneAction::set_paramlist(int index, const char* value) {
  paramlist_.Mutable(index)->assign(value);
}
inline void PBSceneAction::set_paramlist(int index, const char* value, size_t size) {
  paramlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBSceneAction::add_paramlist() {
  return paramlist_.Add();
}
inline void PBSceneAction::add_paramlist(const ::std::string& value) {
  paramlist_.Add()->assign(value);
}
inline void PBSceneAction::add_paramlist(const char* value) {
  paramlist_.Add()->assign(value);
}
inline void PBSceneAction::add_paramlist(const char* value, size_t size) {
  paramlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBSceneAction::paramlist() const {
  return paramlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBSceneAction::mutable_paramlist() {
  return &paramlist_;
}

// -------------------------------------------------------------------

// PBPlane

// optional uint32 planeid = 1;
inline bool PBPlane::has_planeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBPlane::set_has_planeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBPlane::clear_has_planeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBPlane::clear_planeid() {
  planeid_ = 0u;
  clear_has_planeid();
}
inline ::google::protobuf::uint32 PBPlane::planeid() const {
  return planeid_;
}
inline void PBPlane::set_planeid(::google::protobuf::uint32 value) {
  set_has_planeid();
  planeid_ = value;
}

// optional string gameobjectname = 2;
inline bool PBPlane::has_gameobjectname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBPlane::set_has_gameobjectname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBPlane::clear_has_gameobjectname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBPlane::clear_gameobjectname() {
  if (gameobjectname_ != &::google::protobuf::internal::kEmptyString) {
    gameobjectname_->clear();
  }
  clear_has_gameobjectname();
}
inline const ::std::string& PBPlane::gameobjectname() const {
  return *gameobjectname_;
}
inline void PBPlane::set_gameobjectname(const ::std::string& value) {
  set_has_gameobjectname();
  if (gameobjectname_ == &::google::protobuf::internal::kEmptyString) {
    gameobjectname_ = new ::std::string;
  }
  gameobjectname_->assign(value);
}
inline void PBPlane::set_gameobjectname(const char* value) {
  set_has_gameobjectname();
  if (gameobjectname_ == &::google::protobuf::internal::kEmptyString) {
    gameobjectname_ = new ::std::string;
  }
  gameobjectname_->assign(value);
}
inline void PBPlane::set_gameobjectname(const char* value, size_t size) {
  set_has_gameobjectname();
  if (gameobjectname_ == &::google::protobuf::internal::kEmptyString) {
    gameobjectname_ = new ::std::string;
  }
  gameobjectname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBPlane::mutable_gameobjectname() {
  set_has_gameobjectname();
  if (gameobjectname_ == &::google::protobuf::internal::kEmptyString) {
    gameobjectname_ = new ::std::string;
  }
  return gameobjectname_;
}
inline ::std::string* PBPlane::release_gameobjectname() {
  clear_has_gameobjectname();
  if (gameobjectname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameobjectname_;
    gameobjectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .PBMonsterRegion monsterregion = 3;
inline int PBPlane::monsterregion_size() const {
  return monsterregion_.size();
}
inline void PBPlane::clear_monsterregion() {
  monsterregion_.Clear();
}
inline const ::PBMonsterRegion& PBPlane::monsterregion(int index) const {
  return monsterregion_.Get(index);
}
inline ::PBMonsterRegion* PBPlane::mutable_monsterregion(int index) {
  return monsterregion_.Mutable(index);
}
inline ::PBMonsterRegion* PBPlane::add_monsterregion() {
  return monsterregion_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMonsterRegion >&
PBPlane::monsterregion() const {
  return monsterregion_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMonsterRegion >*
PBPlane::mutable_monsterregion() {
  return &monsterregion_;
}

// repeated uint32 sceneAreaIds = 4;
inline int PBPlane::sceneareaids_size() const {
  return sceneareaids_.size();
}
inline void PBPlane::clear_sceneareaids() {
  sceneareaids_.Clear();
}
inline ::google::protobuf::uint32 PBPlane::sceneareaids(int index) const {
  return sceneareaids_.Get(index);
}
inline void PBPlane::set_sceneareaids(int index, ::google::protobuf::uint32 value) {
  sceneareaids_.Set(index, value);
}
inline void PBPlane::add_sceneareaids(::google::protobuf::uint32 value) {
  sceneareaids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PBPlane::sceneareaids() const {
  return sceneareaids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PBPlane::mutable_sceneareaids() {
  return &sceneareaids_;
}

// -------------------------------------------------------------------

// BloomParam

// optional string colorMix = 1;
inline bool BloomParam::has_colormix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BloomParam::set_has_colormix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BloomParam::clear_has_colormix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BloomParam::clear_colormix() {
  if (colormix_ != &::google::protobuf::internal::kEmptyString) {
    colormix_->clear();
  }
  clear_has_colormix();
}
inline const ::std::string& BloomParam::colormix() const {
  return *colormix_;
}
inline void BloomParam::set_colormix(const ::std::string& value) {
  set_has_colormix();
  if (colormix_ == &::google::protobuf::internal::kEmptyString) {
    colormix_ = new ::std::string;
  }
  colormix_->assign(value);
}
inline void BloomParam::set_colormix(const char* value) {
  set_has_colormix();
  if (colormix_ == &::google::protobuf::internal::kEmptyString) {
    colormix_ = new ::std::string;
  }
  colormix_->assign(value);
}
inline void BloomParam::set_colormix(const char* value, size_t size) {
  set_has_colormix();
  if (colormix_ == &::google::protobuf::internal::kEmptyString) {
    colormix_ = new ::std::string;
  }
  colormix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BloomParam::mutable_colormix() {
  set_has_colormix();
  if (colormix_ == &::google::protobuf::internal::kEmptyString) {
    colormix_ = new ::std::string;
  }
  return colormix_;
}
inline ::std::string* BloomParam::release_colormix() {
  clear_has_colormix();
  if (colormix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = colormix_;
    colormix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float threshold = 2;
inline bool BloomParam::has_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BloomParam::set_has_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BloomParam::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BloomParam::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float BloomParam::threshold() const {
  return threshold_;
}
inline void BloomParam::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
}

// optional float intensity = 3;
inline bool BloomParam::has_intensity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BloomParam::set_has_intensity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BloomParam::clear_has_intensity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BloomParam::clear_intensity() {
  intensity_ = 0;
  clear_has_intensity();
}
inline float BloomParam::intensity() const {
  return intensity_;
}
inline void BloomParam::set_intensity(float value) {
  set_has_intensity();
  intensity_ = value;
}

// optional float blurSize = 4;
inline bool BloomParam::has_blursize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BloomParam::set_has_blursize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BloomParam::clear_has_blursize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BloomParam::clear_blursize() {
  blursize_ = 0;
  clear_has_blursize();
}
inline float BloomParam::blursize() const {
  return blursize_;
}
inline void BloomParam::set_blursize(float value) {
  set_has_blursize();
  blursize_ = value;
}

// optional uint32 type = 5;
inline bool BloomParam::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BloomParam::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BloomParam::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BloomParam::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 BloomParam::type() const {
  return type_;
}
inline void BloomParam::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 quality = 6;
inline bool BloomParam::has_quality() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BloomParam::set_has_quality() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BloomParam::clear_has_quality() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BloomParam::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 BloomParam::quality() const {
  return quality_;
}
inline void BloomParam::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// -------------------------------------------------------------------

// PBSceneQinggongPoint

// optional float x = 1;
inline bool PBSceneQinggongPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSceneQinggongPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSceneQinggongPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSceneQinggongPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PBSceneQinggongPoint::x() const {
  return x_;
}
inline void PBSceneQinggongPoint::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool PBSceneQinggongPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBSceneQinggongPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBSceneQinggongPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBSceneQinggongPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PBSceneQinggongPoint::y() const {
  return y_;
}
inline void PBSceneQinggongPoint::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool PBSceneQinggongPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBSceneQinggongPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBSceneQinggongPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBSceneQinggongPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float PBSceneQinggongPoint::z() const {
  return z_;
}
inline void PBSceneQinggongPoint::set_z(float value) {
  set_has_z();
  z_ = value;
}

// optional uint32 type = 4;
inline bool PBSceneQinggongPoint::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBSceneQinggongPoint::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBSceneQinggongPoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBSceneQinggongPoint::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PBSceneQinggongPoint::type() const {
  return type_;
}
inline void PBSceneQinggongPoint::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 speed = 5;
inline bool PBSceneQinggongPoint::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBSceneQinggongPoint::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBSceneQinggongPoint::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBSceneQinggongPoint::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 PBSceneQinggongPoint::speed() const {
  return speed_;
}
inline void PBSceneQinggongPoint::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
}

// -------------------------------------------------------------------

// PBQinggongRoute

// optional uint32 id = 1;
inline bool PBQinggongRoute::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBQinggongRoute::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBQinggongRoute::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBQinggongRoute::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PBQinggongRoute::id() const {
  return id_;
}
inline void PBQinggongRoute::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated .PBSceneQinggongPoint vertexlist = 2;
inline int PBQinggongRoute::vertexlist_size() const {
  return vertexlist_.size();
}
inline void PBQinggongRoute::clear_vertexlist() {
  vertexlist_.Clear();
}
inline const ::PBSceneQinggongPoint& PBQinggongRoute::vertexlist(int index) const {
  return vertexlist_.Get(index);
}
inline ::PBSceneQinggongPoint* PBQinggongRoute::mutable_vertexlist(int index) {
  return vertexlist_.Mutable(index);
}
inline ::PBSceneQinggongPoint* PBQinggongRoute::add_vertexlist() {
  return vertexlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBSceneQinggongPoint >&
PBQinggongRoute::vertexlist() const {
  return vertexlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBSceneQinggongPoint >*
PBQinggongRoute::mutable_vertexlist() {
  return &vertexlist_;
}

// -------------------------------------------------------------------

// PBSceneInfo

// optional uint32 scenewide = 1;
inline bool PBSceneInfo::has_scenewide() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSceneInfo::set_has_scenewide() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSceneInfo::clear_has_scenewide() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSceneInfo::clear_scenewide() {
  scenewide_ = 0u;
  clear_has_scenewide();
}
inline ::google::protobuf::uint32 PBSceneInfo::scenewide() const {
  return scenewide_;
}
inline void PBSceneInfo::set_scenewide(::google::protobuf::uint32 value) {
  set_has_scenewide();
  scenewide_ = value;
}

// optional uint32 scenehigh = 2;
inline bool PBSceneInfo::has_scenehigh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBSceneInfo::set_has_scenehigh() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBSceneInfo::clear_has_scenehigh() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBSceneInfo::clear_scenehigh() {
  scenehigh_ = 0u;
  clear_has_scenehigh();
}
inline ::google::protobuf::uint32 PBSceneInfo::scenehigh() const {
  return scenehigh_;
}
inline void PBSceneInfo::set_scenehigh(::google::protobuf::uint32 value) {
  set_has_scenehigh();
  scenehigh_ = value;
}

// optional uint32 gridwide = 3;
inline bool PBSceneInfo::has_gridwide() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBSceneInfo::set_has_gridwide() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBSceneInfo::clear_has_gridwide() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBSceneInfo::clear_gridwide() {
  gridwide_ = 0u;
  clear_has_gridwide();
}
inline ::google::protobuf::uint32 PBSceneInfo::gridwide() const {
  return gridwide_;
}
inline void PBSceneInfo::set_gridwide(::google::protobuf::uint32 value) {
  set_has_gridwide();
  gridwide_ = value;
}

// optional uint32 gridhigh = 4;
inline bool PBSceneInfo::has_gridhigh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBSceneInfo::set_has_gridhigh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBSceneInfo::clear_has_gridhigh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBSceneInfo::clear_gridhigh() {
  gridhigh_ = 0u;
  clear_has_gridhigh();
}
inline ::google::protobuf::uint32 PBSceneInfo::gridhigh() const {
  return gridhigh_;
}
inline void PBSceneInfo::set_gridhigh(::google::protobuf::uint32 value) {
  set_has_gridhigh();
  gridhigh_ = value;
}

// repeated .PBSceneGrid gridinfo = 5;
inline int PBSceneInfo::gridinfo_size() const {
  return gridinfo_.size();
}
inline void PBSceneInfo::clear_gridinfo() {
  gridinfo_.Clear();
}
inline const ::PBSceneGrid& PBSceneInfo::gridinfo(int index) const {
  return gridinfo_.Get(index);
}
inline ::PBSceneGrid* PBSceneInfo::mutable_gridinfo(int index) {
  return gridinfo_.Mutable(index);
}
inline ::PBSceneGrid* PBSceneInfo::add_gridinfo() {
  return gridinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBSceneGrid >&
PBSceneInfo::gridinfo() const {
  return gridinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBSceneGrid >*
PBSceneInfo::mutable_gridinfo() {
  return &gridinfo_;
}

// repeated .PBGameRegion regionlist = 6;
inline int PBSceneInfo::regionlist_size() const {
  return regionlist_.size();
}
inline void PBSceneInfo::clear_regionlist() {
  regionlist_.Clear();
}
inline const ::PBGameRegion& PBSceneInfo::regionlist(int index) const {
  return regionlist_.Get(index);
}
inline ::PBGameRegion* PBSceneInfo::mutable_regionlist(int index) {
  return regionlist_.Mutable(index);
}
inline ::PBGameRegion* PBSceneInfo::add_regionlist() {
  return regionlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBGameRegion >&
PBSceneInfo::regionlist() const {
  return regionlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBGameRegion >*
PBSceneInfo::mutable_regionlist() {
  return &regionlist_;
}

// optional .PBScenePath path = 7;
inline bool PBSceneInfo::has_path() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBSceneInfo::set_has_path() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBSceneInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBSceneInfo::clear_path() {
  if (path_ != NULL) path_->::PBScenePath::Clear();
  clear_has_path();
}
inline const ::PBScenePath& PBSceneInfo::path() const {
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
inline ::PBScenePath* PBSceneInfo::mutable_path() {
  set_has_path();
  if (path_ == NULL) path_ = new ::PBScenePath;
  return path_;
}
inline ::PBScenePath* PBSceneInfo::release_path() {
  clear_has_path();
  ::PBScenePath* temp = path_;
  path_ = NULL;
  return temp;
}

// repeated .PBMonsterRegion monsterregion = 8;
inline int PBSceneInfo::monsterregion_size() const {
  return monsterregion_.size();
}
inline void PBSceneInfo::clear_monsterregion() {
  monsterregion_.Clear();
}
inline const ::PBMonsterRegion& PBSceneInfo::monsterregion(int index) const {
  return monsterregion_.Get(index);
}
inline ::PBMonsterRegion* PBSceneInfo::mutable_monsterregion(int index) {
  return monsterregion_.Mutable(index);
}
inline ::PBMonsterRegion* PBSceneInfo::add_monsterregion() {
  return monsterregion_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMonsterRegion >&
PBSceneInfo::monsterregion() const {
  return monsterregion_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMonsterRegion >*
PBSceneInfo::mutable_monsterregion() {
  return &monsterregion_;
}

// repeated .PBSceneArea arealist = 9;
inline int PBSceneInfo::arealist_size() const {
  return arealist_.size();
}
inline void PBSceneInfo::clear_arealist() {
  arealist_.Clear();
}
inline const ::PBSceneArea& PBSceneInfo::arealist(int index) const {
  return arealist_.Get(index);
}
inline ::PBSceneArea* PBSceneInfo::mutable_arealist(int index) {
  return arealist_.Mutable(index);
}
inline ::PBSceneArea* PBSceneInfo::add_arealist() {
  return arealist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBSceneArea >&
PBSceneInfo::arealist() const {
  return arealist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBSceneArea >*
PBSceneInfo::mutable_arealist() {
  return &arealist_;
}

// repeated .PBRoute routelist = 10;
inline int PBSceneInfo::routelist_size() const {
  return routelist_.size();
}
inline void PBSceneInfo::clear_routelist() {
  routelist_.Clear();
}
inline const ::PBRoute& PBSceneInfo::routelist(int index) const {
  return routelist_.Get(index);
}
inline ::PBRoute* PBSceneInfo::mutable_routelist(int index) {
  return routelist_.Mutable(index);
}
inline ::PBRoute* PBSceneInfo::add_routelist() {
  return routelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBRoute >&
PBSceneInfo::routelist() const {
  return routelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBRoute >*
PBSceneInfo::mutable_routelist() {
  return &routelist_;
}

// optional float eulerX = 11;
inline bool PBSceneInfo::has_eulerx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBSceneInfo::set_has_eulerx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBSceneInfo::clear_has_eulerx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBSceneInfo::clear_eulerx() {
  eulerx_ = 0;
  clear_has_eulerx();
}
inline float PBSceneInfo::eulerx() const {
  return eulerx_;
}
inline void PBSceneInfo::set_eulerx(float value) {
  set_has_eulerx();
  eulerx_ = value;
}

// optional float eulerY = 12;
inline bool PBSceneInfo::has_eulery() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PBSceneInfo::set_has_eulery() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PBSceneInfo::clear_has_eulery() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PBSceneInfo::clear_eulery() {
  eulery_ = 0;
  clear_has_eulery();
}
inline float PBSceneInfo::eulery() const {
  return eulery_;
}
inline void PBSceneInfo::set_eulery(float value) {
  set_has_eulery();
  eulery_ = value;
}

// optional float viewDis = 13;
inline bool PBSceneInfo::has_viewdis() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PBSceneInfo::set_has_viewdis() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PBSceneInfo::clear_has_viewdis() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PBSceneInfo::clear_viewdis() {
  viewdis_ = 0;
  clear_has_viewdis();
}
inline float PBSceneInfo::viewdis() const {
  return viewdis_;
}
inline void PBSceneInfo::set_viewdis(float value) {
  set_has_viewdis();
  viewdis_ = value;
}

// repeated .PBPlane planes = 14;
inline int PBSceneInfo::planes_size() const {
  return planes_.size();
}
inline void PBSceneInfo::clear_planes() {
  planes_.Clear();
}
inline const ::PBPlane& PBSceneInfo::planes(int index) const {
  return planes_.Get(index);
}
inline ::PBPlane* PBSceneInfo::mutable_planes(int index) {
  return planes_.Mutable(index);
}
inline ::PBPlane* PBSceneInfo::add_planes() {
  return planes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBPlane >&
PBSceneInfo::planes() const {
  return planes_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBPlane >*
PBSceneInfo::mutable_planes() {
  return &planes_;
}

// repeated .PBSceneEvent sceneEvent = 15;
inline int PBSceneInfo::sceneevent_size() const {
  return sceneevent_.size();
}
inline void PBSceneInfo::clear_sceneevent() {
  sceneevent_.Clear();
}
inline const ::PBSceneEvent& PBSceneInfo::sceneevent(int index) const {
  return sceneevent_.Get(index);
}
inline ::PBSceneEvent* PBSceneInfo::mutable_sceneevent(int index) {
  return sceneevent_.Mutable(index);
}
inline ::PBSceneEvent* PBSceneInfo::add_sceneevent() {
  return sceneevent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBSceneEvent >&
PBSceneInfo::sceneevent() const {
  return sceneevent_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBSceneEvent >*
PBSceneInfo::mutable_sceneevent() {
  return &sceneevent_;
}

// optional .BloomParam bloomParam = 16;
inline bool PBSceneInfo::has_bloomparam() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PBSceneInfo::set_has_bloomparam() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PBSceneInfo::clear_has_bloomparam() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PBSceneInfo::clear_bloomparam() {
  if (bloomparam_ != NULL) bloomparam_->::BloomParam::Clear();
  clear_has_bloomparam();
}
inline const ::BloomParam& PBSceneInfo::bloomparam() const {
  return bloomparam_ != NULL ? *bloomparam_ : *default_instance_->bloomparam_;
}
inline ::BloomParam* PBSceneInfo::mutable_bloomparam() {
  set_has_bloomparam();
  if (bloomparam_ == NULL) bloomparam_ = new ::BloomParam;
  return bloomparam_;
}
inline ::BloomParam* PBSceneInfo::release_bloomparam() {
  clear_has_bloomparam();
  ::BloomParam* temp = bloomparam_;
  bloomparam_ = NULL;
  return temp;
}

// optional bool useBloom = 17;
inline bool PBSceneInfo::has_usebloom() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PBSceneInfo::set_has_usebloom() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PBSceneInfo::clear_has_usebloom() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PBSceneInfo::clear_usebloom() {
  usebloom_ = false;
  clear_has_usebloom();
}
inline bool PBSceneInfo::usebloom() const {
  return usebloom_;
}
inline void PBSceneInfo::set_usebloom(bool value) {
  set_has_usebloom();
  usebloom_ = value;
}

// optional .PBGameRegion defaultregion = 18;
inline bool PBSceneInfo::has_defaultregion() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PBSceneInfo::set_has_defaultregion() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PBSceneInfo::clear_has_defaultregion() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PBSceneInfo::clear_defaultregion() {
  if (defaultregion_ != NULL) defaultregion_->::PBGameRegion::Clear();
  clear_has_defaultregion();
}
inline const ::PBGameRegion& PBSceneInfo::defaultregion() const {
  return defaultregion_ != NULL ? *defaultregion_ : *default_instance_->defaultregion_;
}
inline ::PBGameRegion* PBSceneInfo::mutable_defaultregion() {
  set_has_defaultregion();
  if (defaultregion_ == NULL) defaultregion_ = new ::PBGameRegion;
  return defaultregion_;
}
inline ::PBGameRegion* PBSceneInfo::release_defaultregion() {
  clear_has_defaultregion();
  ::PBGameRegion* temp = defaultregion_;
  defaultregion_ = NULL;
  return temp;
}

// repeated .PBQinggongRoute qinggonglist = 19;
inline int PBSceneInfo::qinggonglist_size() const {
  return qinggonglist_.size();
}
inline void PBSceneInfo::clear_qinggonglist() {
  qinggonglist_.Clear();
}
inline const ::PBQinggongRoute& PBSceneInfo::qinggonglist(int index) const {
  return qinggonglist_.Get(index);
}
inline ::PBQinggongRoute* PBSceneInfo::mutable_qinggonglist(int index) {
  return qinggonglist_.Mutable(index);
}
inline ::PBQinggongRoute* PBSceneInfo::add_qinggonglist() {
  return qinggonglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBQinggongRoute >&
PBSceneInfo::qinggonglist() const {
  return qinggonglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBQinggongRoute >*
PBSceneInfo::mutable_qinggonglist() {
  return &qinggonglist_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emRegionMark>() {
  return _emRegionMark_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emRegionTriggerType>() {
  return _emRegionTriggerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emRegionEventType>() {
  return _emRegionEventType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emSceneAreaType>() {
  return _emSceneAreaType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emRouteType>() {
  return _emRouteType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emMonsterRefreshType>() {
  return _emMonsterRefreshType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sceneStruct_2eproto__INCLUDED
