// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBWorldSvrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWorldSvrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCounter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCounter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBVerClientData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBVerClientData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerAnimData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerAnimData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerSkillAnimCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerSkillAnimCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnimAttackFrameParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnimAttackFrameParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerAvatarAnimCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerAvatarAnimCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemSortData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemSortData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBingfuNumData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBingfuNumData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDelItemata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDelItemata_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBColletionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBColletionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWuxueSetSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWuxueSetSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBIDStamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBIDStamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMoneyConsume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMoneyConsume_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSixiangMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSixiangMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemSnNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemSnNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBExpendNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBExpendNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItemAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItemAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTopListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTopListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTopListSortType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTopListSortType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTopListOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTopListOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTopListData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTopListData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTopListUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTopListUpdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameStruct_2eproto() {
  protobuf_AddDesc_GameStruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameStruct.proto");
  GOOGLE_CHECK(file != NULL);
  PBWorldSvrInfo_descriptor_ = file->message_type(0);
  static const int PBWorldSvrInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldSvrInfo, logicworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldSvrInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldSvrInfo, worldid_),
  };
  PBWorldSvrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWorldSvrInfo_descriptor_,
      PBWorldSvrInfo::default_instance_,
      PBWorldSvrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldSvrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWorldSvrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWorldSvrInfo));
  PBServerInfo_descriptor_ = file->message_type(1);
  static const int PBServerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServerInfo, logicworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServerInfo, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServerInfo, serverid_),
  };
  PBServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBServerInfo_descriptor_,
      PBServerInfo::default_instance_,
      PBServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBServerInfo));
  PBPoint_descriptor_ = file->message_type(2);
  static const int PBPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPoint, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPoint, posy_),
  };
  PBPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPoint_descriptor_,
      PBPoint::default_instance_,
      PBPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPoint));
  PBSkill_descriptor_ = file->message_type(3);
  static const int PBSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, level_),
  };
  PBSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkill_descriptor_,
      PBSkill::default_instance_,
      PBSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkill));
  PBBuff_descriptor_ = file->message_type(4);
  static const int PBBuff_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, lefttick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, skillid_),
  };
  PBBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBuff_descriptor_,
      PBBuff::default_instance_,
      PBBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBuff));
  PBMoney_descriptor_ = file->message_type(5);
  static const int PBMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMoney, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMoney, money_),
  };
  PBMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMoney_descriptor_,
      PBMoney::default_instance_,
      PBMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMoney));
  PBCounter_descriptor_ = file->message_type(6);
  static const int PBCounter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCounter, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCounter, count_),
  };
  PBCounter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCounter_descriptor_,
      PBCounter::default_instance_,
      PBCounter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCounter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCounter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCounter));
  PBVerClientData_descriptor_ = file->message_type(7);
  static const int PBVerClientData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVerClientData, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVerClientData, crc_),
  };
  PBVerClientData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBVerClientData_descriptor_,
      PBVerClientData::default_instance_,
      PBVerClientData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVerClientData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVerClientData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBVerClientData));
  ServerAnimData_descriptor_ = file->message_type(8);
  static const int ServerAnimData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAnimData, animlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAnimData, vataranimlist_),
  };
  ServerAnimData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerAnimData_descriptor_,
      ServerAnimData::default_instance_,
      ServerAnimData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAnimData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAnimData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerAnimData));
  ServerSkillAnimCfg_descriptor_ = file->message_type(9);
  static const int ServerSkillAnimCfg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSkillAnimCfg, skillcfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSkillAnimCfg, length_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSkillAnimCfg, attackframe_server_),
  };
  ServerSkillAnimCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerSkillAnimCfg_descriptor_,
      ServerSkillAnimCfg::default_instance_,
      ServerSkillAnimCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSkillAnimCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSkillAnimCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerSkillAnimCfg));
  AnimAttackFrameParams_descriptor_ = file->message_type(10);
  static const int AnimAttackFrameParams_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAttackFrameParams, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAttackFrameParams, calmotionrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAttackFrameParams, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAttackFrameParams, offsetangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAttackFrameParams, offsetlength_),
  };
  AnimAttackFrameParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnimAttackFrameParams_descriptor_,
      AnimAttackFrameParams::default_instance_,
      AnimAttackFrameParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAttackFrameParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAttackFrameParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnimAttackFrameParams));
  ServerAvatarAnimCfg_descriptor_ = file->message_type(11);
  static const int ServerAvatarAnimCfg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAvatarAnimCfg, modelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAvatarAnimCfg, modelradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAvatarAnimCfg, landanimlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAvatarAnimCfg, climbanimlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAvatarAnimCfg, beattackanimlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAvatarAnimCfg, birthanimlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAvatarAnimCfg, deadanimlen_),
  };
  ServerAvatarAnimCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerAvatarAnimCfg_descriptor_,
      ServerAvatarAnimCfg::default_instance_,
      ServerAvatarAnimCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAvatarAnimCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAvatarAnimCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerAvatarAnimCfg));
  PBItemSortData_descriptor_ = file->message_type(12);
  static const int PBItemSortData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSortData, fromitemsnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSortData, toitemsnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSortData, itemnum_),
  };
  PBItemSortData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemSortData_descriptor_,
      PBItemSortData::default_instance_,
      PBItemSortData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSortData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSortData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemSortData));
  PBBingfuNumData_descriptor_ = file->message_type(13);
  static const int PBBingfuNumData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBingfuNumData, bingfusn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBingfuNumData, num_),
  };
  PBBingfuNumData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBingfuNumData_descriptor_,
      PBBingfuNumData::default_instance_,
      PBBingfuNumData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBingfuNumData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBingfuNumData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBingfuNumData));
  PBDelItemata_descriptor_ = file->message_type(14);
  static const int PBDelItemata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDelItemata, itemsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDelItemata, num_),
  };
  PBDelItemata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDelItemata_descriptor_,
      PBDelItemata::default_instance_,
      PBDelItemata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDelItemata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDelItemata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDelItemata));
  PBColletionData_descriptor_ = file->message_type(15);
  static const int PBColletionData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBColletionData, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBColletionData, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBColletionData, time_),
  };
  PBColletionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBColletionData_descriptor_,
      PBColletionData::default_instance_,
      PBColletionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBColletionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBColletionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBColletionData));
  PBWuxueSetSkillData_descriptor_ = file->message_type(16);
  static const int PBWuxueSetSkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWuxueSetSkillData, skillindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWuxueSetSkillData, skillid_),
  };
  PBWuxueSetSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWuxueSetSkillData_descriptor_,
      PBWuxueSetSkillData::default_instance_,
      PBWuxueSetSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWuxueSetSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWuxueSetSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWuxueSetSkillData));
  PBIDStamp_descriptor_ = file->message_type(17);
  static const int PBIDStamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIDStamp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIDStamp, stamp_),
  };
  PBIDStamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBIDStamp_descriptor_,
      PBIDStamp::default_instance_,
      PBIDStamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIDStamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIDStamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBIDStamp));
  PBMoneyConsume_descriptor_ = file->message_type(18);
  static const int PBMoneyConsume_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMoneyConsume, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMoneyConsume, bindsilver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMoneyConsume, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMoneyConsume, bindcash_),
  };
  PBMoneyConsume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMoneyConsume_descriptor_,
      PBMoneyConsume::default_instance_,
      PBMoneyConsume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMoneyConsume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMoneyConsume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMoneyConsume));
  PBSixiangMonsterInfo_descriptor_ = file->message_type(19);
  static const int PBSixiangMonsterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSixiangMonsterInfo, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSixiangMonsterInfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSixiangMonsterInfo, active_),
  };
  PBSixiangMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSixiangMonsterInfo_descriptor_,
      PBSixiangMonsterInfo::default_instance_,
      PBSixiangMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSixiangMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSixiangMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSixiangMonsterInfo));
  PBItemNum_descriptor_ = file->message_type(20);
  static const int PBItemNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemNum, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemNum, itemnum_),
  };
  PBItemNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemNum_descriptor_,
      PBItemNum::default_instance_,
      PBItemNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemNum));
  PBItemSnNum_descriptor_ = file->message_type(21);
  static const int PBItemSnNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSnNum, itemsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSnNum, itemnum_),
  };
  PBItemSnNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemSnNum_descriptor_,
      PBItemSnNum::default_instance_,
      PBItemSnNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSnNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemSnNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemSnNum));
  PBExpendNum_descriptor_ = file->message_type(22);
  static const int PBExpendNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExpendNum, expendtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExpendNum, value_),
  };
  PBExpendNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBExpendNum_descriptor_,
      PBExpendNum::default_instance_,
      PBExpendNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExpendNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExpendNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBExpendNum));
  PBItemAttr_descriptor_ = file->message_type(23);
  static const int PBItemAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAttr, attrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAttr, attrvalue_),
  };
  PBItemAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItemAttr_descriptor_,
      PBItemAttr::default_instance_,
      PBItemAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItemAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItemAttr));
  PBItem_descriptor_ = file->message_type(24);
  static const int PBItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, itemsn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, enhanceexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, forgeexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, specialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, bingfuexp_),
  };
  PBItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBItem_descriptor_,
      PBItem::default_instance_,
      PBItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBItem));
  PBTopListInfo_descriptor_ = file->message_type(25);
  static const int PBTopListInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListInfo, subvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListInfo, time_),
  };
  PBTopListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTopListInfo_descriptor_,
      PBTopListInfo::default_instance_,
      PBTopListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTopListInfo));
  PBTopListSortType_descriptor_ = file->message_type(26);
  static const int PBTopListSortType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListSortType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListSortType, job_),
  };
  PBTopListSortType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTopListSortType_descriptor_,
      PBTopListSortType::default_instance_,
      PBTopListSortType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListSortType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListSortType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTopListSortType));
  PBTopListOrder_descriptor_ = file->message_type(27);
  static const int PBTopListOrder_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListOrder, sorttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListOrder, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListOrder, oldorder_),
  };
  PBTopListOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTopListOrder_descriptor_,
      PBTopListOrder::default_instance_,
      PBTopListOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTopListOrder));
  PBTopListData_descriptor_ = file->message_type(28);
  static const int PBTopListData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListData, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListData, order_),
  };
  PBTopListData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTopListData_descriptor_,
      PBTopListData::default_instance_,
      PBTopListData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTopListData));
  PBTopListUpdate_descriptor_ = file->message_type(29);
  static const int PBTopListUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListUpdate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListUpdate, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListUpdate, subvalue_),
  };
  PBTopListUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTopListUpdate_descriptor_,
      PBTopListUpdate::default_instance_,
      PBTopListUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTopListUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTopListUpdate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameStruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWorldSvrInfo_descriptor_, &PBWorldSvrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBServerInfo_descriptor_, &PBServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPoint_descriptor_, &PBPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkill_descriptor_, &PBSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBuff_descriptor_, &PBBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMoney_descriptor_, &PBMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCounter_descriptor_, &PBCounter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBVerClientData_descriptor_, &PBVerClientData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerAnimData_descriptor_, &ServerAnimData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerSkillAnimCfg_descriptor_, &ServerSkillAnimCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnimAttackFrameParams_descriptor_, &AnimAttackFrameParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerAvatarAnimCfg_descriptor_, &ServerAvatarAnimCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemSortData_descriptor_, &PBItemSortData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBingfuNumData_descriptor_, &PBBingfuNumData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDelItemata_descriptor_, &PBDelItemata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBColletionData_descriptor_, &PBColletionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWuxueSetSkillData_descriptor_, &PBWuxueSetSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBIDStamp_descriptor_, &PBIDStamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMoneyConsume_descriptor_, &PBMoneyConsume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSixiangMonsterInfo_descriptor_, &PBSixiangMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemNum_descriptor_, &PBItemNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemSnNum_descriptor_, &PBItemSnNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBExpendNum_descriptor_, &PBExpendNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItemAttr_descriptor_, &PBItemAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBItem_descriptor_, &PBItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTopListInfo_descriptor_, &PBTopListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTopListSortType_descriptor_, &PBTopListSortType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTopListOrder_descriptor_, &PBTopListOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTopListData_descriptor_, &PBTopListData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTopListUpdate_descriptor_, &PBTopListUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameStruct_2eproto() {
  delete PBWorldSvrInfo::default_instance_;
  delete PBWorldSvrInfo_reflection_;
  delete PBServerInfo::default_instance_;
  delete PBServerInfo_reflection_;
  delete PBPoint::default_instance_;
  delete PBPoint_reflection_;
  delete PBSkill::default_instance_;
  delete PBSkill_reflection_;
  delete PBBuff::default_instance_;
  delete PBBuff_reflection_;
  delete PBMoney::default_instance_;
  delete PBMoney_reflection_;
  delete PBCounter::default_instance_;
  delete PBCounter_reflection_;
  delete PBVerClientData::default_instance_;
  delete PBVerClientData_reflection_;
  delete ServerAnimData::default_instance_;
  delete ServerAnimData_reflection_;
  delete ServerSkillAnimCfg::default_instance_;
  delete ServerSkillAnimCfg_reflection_;
  delete AnimAttackFrameParams::default_instance_;
  delete AnimAttackFrameParams_reflection_;
  delete ServerAvatarAnimCfg::default_instance_;
  delete ServerAvatarAnimCfg_reflection_;
  delete PBItemSortData::default_instance_;
  delete PBItemSortData_reflection_;
  delete PBBingfuNumData::default_instance_;
  delete PBBingfuNumData_reflection_;
  delete PBDelItemata::default_instance_;
  delete PBDelItemata_reflection_;
  delete PBColletionData::default_instance_;
  delete PBColletionData_reflection_;
  delete PBWuxueSetSkillData::default_instance_;
  delete PBWuxueSetSkillData_reflection_;
  delete PBIDStamp::default_instance_;
  delete PBIDStamp_reflection_;
  delete PBMoneyConsume::default_instance_;
  delete PBMoneyConsume_reflection_;
  delete PBSixiangMonsterInfo::default_instance_;
  delete PBSixiangMonsterInfo_reflection_;
  delete PBItemNum::default_instance_;
  delete PBItemNum_reflection_;
  delete PBItemSnNum::default_instance_;
  delete PBItemSnNum_reflection_;
  delete PBExpendNum::default_instance_;
  delete PBExpendNum_reflection_;
  delete PBItemAttr::default_instance_;
  delete PBItemAttr_reflection_;
  delete PBItem::default_instance_;
  delete PBItem_reflection_;
  delete PBTopListInfo::default_instance_;
  delete PBTopListInfo_reflection_;
  delete PBTopListSortType::default_instance_;
  delete PBTopListSortType_reflection_;
  delete PBTopListOrder::default_instance_;
  delete PBTopListOrder_reflection_;
  delete PBTopListData::default_instance_;
  delete PBTopListData_reflection_;
  delete PBTopListUpdate::default_instance_;
  delete PBTopListUpdate_reflection_;
}

void protobuf_AddDesc_GameStruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GameStruct.proto\"J\n\016PBWorldSvrInfo\022\024\n\014"
    "logicworldid\030\001 \001(\r\022\021\n\tstartTime\030\002 \001(\r\022\017\n"
    "\007worldid\030\003 \003(\r\"J\n\014PBServerInfo\022\024\n\014logicW"
    "orldID\030\001 \001(\r\022\022\n\nserverType\030\002 \001(\r\022\020\n\010serv"
    "erID\030\003 \001(\r\"%\n\007PBPoint\022\014\n\004posx\030\001 \001(\002\022\014\n\004p"
    "osy\030\002 \001(\002\")\n\007PBSkill\022\017\n\007skillid\030\001 \001(\r\022\r\n"
    "\005level\030\002 \001(\r\"k\n\006PBBuff\022\016\n\006buffid\030\001 \001(\r\022\020"
    "\n\010lefttick\030\002 \001(\004\022\017\n\007endtime\030\003 \001(\004\022\r\n\005lev"
    "el\030\004 \001(\r\022\016\n\006unitid\030\005 \001(\r\022\017\n\007skillid\030\006 \001("
    "\r\"+\n\007PBMoney\022\021\n\tmoneytype\030\001 \001(\r\022\r\n\005money"
    "\030\002 \001(\004\"&\n\tPBCounter\022\n\n\002id\030\001 \001(\r\022\r\n\005count"
    "\030\002 \001(\004\"0\n\017PBVerClientData\022\020\n\010filename\030\001 "
    "\001(\t\022\013\n\003crc\030\002 \001(\r\"d\n\016ServerAnimData\022%\n\010an"
    "imlist\030\001 \003(\0132\023.ServerSkillAnimCfg\022+\n\rvat"
    "aranimlist\030\002 \003(\0132\024.ServerAvatarAnimCfg\"s"
    "\n\022ServerSkillAnimCfg\022\022\n\nskillcfgid\030\001 \001(\r"
    "\022\025\n\rlength_server\030\002 \001(\r\0222\n\022attackFrame_s"
    "erver\030\003 \003(\0132\026.AnimAttackFrameParams\"w\n\025A"
    "nimAttackFrameParams\022\r\n\005frame\030\001 \001(\r\022\026\n\016c"
    "alMotionRange\030\002 \001(\010\022\014\n\004time\030\003 \001(\r\022\023\n\013off"
    "setAngle\030\004 \001(\002\022\024\n\014offsetLength\030\005 \001(\002\"\254\001\n"
    "\023ServerAvatarAnimCfg\022\021\n\tmodelname\030\001 \001(\t\022"
    "\023\n\013modelRadius\030\002 \001(\002\022\023\n\013landanimlen\030\003 \001("
    "\r\022\024\n\014climbanimlen\030\004 \001(\r\022\027\n\017beattackaniml"
    "en\030\005 \001(\r\022\024\n\014birthanimlen\030\006 \001(\r\022\023\n\013deadan"
    "imlen\030\007 \001(\r\"K\n\016PBItemSortData\022\024\n\014fromite"
    "msnid\030\001 \001(\004\022\022\n\ntoitemsnid\030\002 \001(\004\022\017\n\007itemn"
    "um\030\003 \001(\r\"0\n\017PBBingfuNumData\022\020\n\010bingfusn\030"
    "\001 \001(\004\022\013\n\003num\030\002 \001(\r\"+\n\014PBDelItemata\022\016\n\006it"
    "emsn\030\001 \001(\004\022\013\n\003num\030\002 \001(\r\"A\n\017PBColletionDa"
    "ta\022\021\n\tMonsterID\030\001 \001(\r\022\r\n\005Count\030\002 \001(\r\022\014\n\004"
    "Time\030\003 \001(\r\":\n\023PBWuxueSetSkillData\022\022\n\nski"
    "llindex\030\001 \001(\r\022\017\n\007skillid\030\002 \001(\r\"&\n\tPBIDSt"
    "amp\022\n\n\002id\030\001 \001(\r\022\r\n\005stamp\030\002 \001(\r\"T\n\016PBMone"
    "yConsume\022\016\n\006silver\030\001 \001(\r\022\022\n\nbindsilver\030\002"
    " \001(\r\022\014\n\004cash\030\003 \001(\r\022\020\n\010bindcash\030\004 \001(\r\"O\n\024"
    "PBSixiangMonsterInfo\022\016\n\006unitid\030\001 \001(\r\022\027\n\005"
    "point\030\002 \001(\0132\010.PBPoint\022\016\n\006active\030\003 \001(\r\",\n"
    "\tPBItemNum\022\016\n\006itemid\030\001 \001(\r\022\017\n\007itemnum\030\002 "
    "\001(\r\".\n\013PBItemSnNum\022\016\n\006itemsn\030\001 \001(\004\022\017\n\007it"
    "emnum\030\002 \001(\r\"0\n\013PBExpendNum\022\022\n\nexpendtype"
    "\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\"1\n\nPBItemAttr\022\020\n\010a"
    "ttrType\030\001 \001(\r\022\021\n\tattrValue\030\002 \001(\r\"\266\001\n\006PBI"
    "tem\022\016\n\006itemId\030\001 \001(\r\022\016\n\006itemSN\030\002 \001(\004\022\017\n\007i"
    "temNum\030\003 \001(\r\022\014\n\004flag\030\004 \001(\r\022\020\n\010lefttime\030\005"
    " \001(\r\022\017\n\007endtime\030\006 \001(\r\022\022\n\nenhanceexp\030\007 \001("
    "\r\022\020\n\010forgeexp\030\010 \001(\r\022\021\n\tspecialid\030\t \003(\r\022\021"
    "\n\tbingfuexp\030\n \001(\r\"L\n\rPBTopListInfo\022\014\n\004ty"
    "pe\030\001 \001(\r\022\r\n\005value\030\002 \001(\004\022\020\n\010subvalue\030\003 \001("
    "\004\022\014\n\004time\030\004 \001(\r\".\n\021PBTopListSortType\022\014\n\004"
    "type\030\001 \001(\r\022\013\n\003job\030\002 \001(\r\"W\n\016PBTopListOrde"
    "r\022$\n\010sorttype\030\001 \001(\0132\022.PBTopListSortType\022"
    "\r\n\005order\030\002 \001(\r\022\020\n\010oldorder\030\003 \001(\r\"M\n\rPBTo"
    "pListData\022\034\n\004info\030\001 \003(\0132\016.PBTopListInfo\022"
    "\036\n\005order\030\002 \003(\0132\017.PBTopListOrder\"@\n\017PBTop"
    "ListUpdate\022\014\n\004type\030\001 \001(\r\022\r\n\005value\030\002 \001(\004\022"
    "\020\n\010subvalue\030\003 \001(\004", 2257);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameStruct.proto", &protobuf_RegisterTypes);
  PBWorldSvrInfo::default_instance_ = new PBWorldSvrInfo();
  PBServerInfo::default_instance_ = new PBServerInfo();
  PBPoint::default_instance_ = new PBPoint();
  PBSkill::default_instance_ = new PBSkill();
  PBBuff::default_instance_ = new PBBuff();
  PBMoney::default_instance_ = new PBMoney();
  PBCounter::default_instance_ = new PBCounter();
  PBVerClientData::default_instance_ = new PBVerClientData();
  ServerAnimData::default_instance_ = new ServerAnimData();
  ServerSkillAnimCfg::default_instance_ = new ServerSkillAnimCfg();
  AnimAttackFrameParams::default_instance_ = new AnimAttackFrameParams();
  ServerAvatarAnimCfg::default_instance_ = new ServerAvatarAnimCfg();
  PBItemSortData::default_instance_ = new PBItemSortData();
  PBBingfuNumData::default_instance_ = new PBBingfuNumData();
  PBDelItemata::default_instance_ = new PBDelItemata();
  PBColletionData::default_instance_ = new PBColletionData();
  PBWuxueSetSkillData::default_instance_ = new PBWuxueSetSkillData();
  PBIDStamp::default_instance_ = new PBIDStamp();
  PBMoneyConsume::default_instance_ = new PBMoneyConsume();
  PBSixiangMonsterInfo::default_instance_ = new PBSixiangMonsterInfo();
  PBItemNum::default_instance_ = new PBItemNum();
  PBItemSnNum::default_instance_ = new PBItemSnNum();
  PBExpendNum::default_instance_ = new PBExpendNum();
  PBItemAttr::default_instance_ = new PBItemAttr();
  PBItem::default_instance_ = new PBItem();
  PBTopListInfo::default_instance_ = new PBTopListInfo();
  PBTopListSortType::default_instance_ = new PBTopListSortType();
  PBTopListOrder::default_instance_ = new PBTopListOrder();
  PBTopListData::default_instance_ = new PBTopListData();
  PBTopListUpdate::default_instance_ = new PBTopListUpdate();
  PBWorldSvrInfo::default_instance_->InitAsDefaultInstance();
  PBServerInfo::default_instance_->InitAsDefaultInstance();
  PBPoint::default_instance_->InitAsDefaultInstance();
  PBSkill::default_instance_->InitAsDefaultInstance();
  PBBuff::default_instance_->InitAsDefaultInstance();
  PBMoney::default_instance_->InitAsDefaultInstance();
  PBCounter::default_instance_->InitAsDefaultInstance();
  PBVerClientData::default_instance_->InitAsDefaultInstance();
  ServerAnimData::default_instance_->InitAsDefaultInstance();
  ServerSkillAnimCfg::default_instance_->InitAsDefaultInstance();
  AnimAttackFrameParams::default_instance_->InitAsDefaultInstance();
  ServerAvatarAnimCfg::default_instance_->InitAsDefaultInstance();
  PBItemSortData::default_instance_->InitAsDefaultInstance();
  PBBingfuNumData::default_instance_->InitAsDefaultInstance();
  PBDelItemata::default_instance_->InitAsDefaultInstance();
  PBColletionData::default_instance_->InitAsDefaultInstance();
  PBWuxueSetSkillData::default_instance_->InitAsDefaultInstance();
  PBIDStamp::default_instance_->InitAsDefaultInstance();
  PBMoneyConsume::default_instance_->InitAsDefaultInstance();
  PBSixiangMonsterInfo::default_instance_->InitAsDefaultInstance();
  PBItemNum::default_instance_->InitAsDefaultInstance();
  PBItemSnNum::default_instance_->InitAsDefaultInstance();
  PBExpendNum::default_instance_->InitAsDefaultInstance();
  PBItemAttr::default_instance_->InitAsDefaultInstance();
  PBItem::default_instance_->InitAsDefaultInstance();
  PBTopListInfo::default_instance_->InitAsDefaultInstance();
  PBTopListSortType::default_instance_->InitAsDefaultInstance();
  PBTopListOrder::default_instance_->InitAsDefaultInstance();
  PBTopListData::default_instance_->InitAsDefaultInstance();
  PBTopListUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameStruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameStruct_2eproto {
  StaticDescriptorInitializer_GameStruct_2eproto() {
    protobuf_AddDesc_GameStruct_2eproto();
  }
} static_descriptor_initializer_GameStruct_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBWorldSvrInfo::kLogicworldidFieldNumber;
const int PBWorldSvrInfo::kStartTimeFieldNumber;
const int PBWorldSvrInfo::kWorldidFieldNumber;
#endif  // !_MSC_VER

PBWorldSvrInfo::PBWorldSvrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWorldSvrInfo::InitAsDefaultInstance() {
}

PBWorldSvrInfo::PBWorldSvrInfo(const PBWorldSvrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWorldSvrInfo::SharedCtor() {
  _cached_size_ = 0;
  logicworldid_ = 0u;
  starttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWorldSvrInfo::~PBWorldSvrInfo() {
  SharedDtor();
}

void PBWorldSvrInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWorldSvrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWorldSvrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWorldSvrInfo_descriptor_;
}

const PBWorldSvrInfo& PBWorldSvrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBWorldSvrInfo* PBWorldSvrInfo::default_instance_ = NULL;

PBWorldSvrInfo* PBWorldSvrInfo::New() const {
  return new PBWorldSvrInfo;
}

void PBWorldSvrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logicworldid_ = 0u;
    starttime_ = 0u;
  }
  worldid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWorldSvrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 logicworldid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicworldid_)));
          set_has_logicworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startTime;
        break;
      }
      
      // optional uint32 startTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_worldid;
        break;
      }
      
      // repeated uint32 worldid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_worldid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_worldid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_worldid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWorldSvrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 logicworldid = 1;
  if (has_logicworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logicworldid(), output);
  }
  
  // optional uint32 startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starttime(), output);
  }
  
  // repeated uint32 worldid = 3;
  for (int i = 0; i < this->worldid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->worldid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWorldSvrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 logicworldid = 1;
  if (has_logicworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logicworldid(), target);
  }
  
  // optional uint32 startTime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starttime(), target);
  }
  
  // repeated uint32 worldid = 3;
  for (int i = 0; i < this->worldid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->worldid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWorldSvrInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 logicworldid = 1;
    if (has_logicworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicworldid());
    }
    
    // optional uint32 startTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }
    
  }
  // repeated uint32 worldid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->worldid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->worldid(i));
    }
    total_size += 1 * this->worldid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWorldSvrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWorldSvrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWorldSvrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWorldSvrInfo::MergeFrom(const PBWorldSvrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldid_.MergeFrom(from.worldid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logicworldid()) {
      set_logicworldid(from.logicworldid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWorldSvrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWorldSvrInfo::CopyFrom(const PBWorldSvrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWorldSvrInfo::IsInitialized() const {
  
  return true;
}

void PBWorldSvrInfo::Swap(PBWorldSvrInfo* other) {
  if (other != this) {
    std::swap(logicworldid_, other->logicworldid_);
    std::swap(starttime_, other->starttime_);
    worldid_.Swap(&other->worldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWorldSvrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWorldSvrInfo_descriptor_;
  metadata.reflection = PBWorldSvrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBServerInfo::kLogicWorldIDFieldNumber;
const int PBServerInfo::kServerTypeFieldNumber;
const int PBServerInfo::kServerIDFieldNumber;
#endif  // !_MSC_VER

PBServerInfo::PBServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBServerInfo::InitAsDefaultInstance() {
}

PBServerInfo::PBServerInfo(const PBServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBServerInfo::SharedCtor() {
  _cached_size_ = 0;
  logicworldid_ = 0u;
  servertype_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBServerInfo::~PBServerInfo() {
  SharedDtor();
}

void PBServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBServerInfo_descriptor_;
}

const PBServerInfo& PBServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBServerInfo* PBServerInfo::default_instance_ = NULL;

PBServerInfo* PBServerInfo::New() const {
  return new PBServerInfo;
}

void PBServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logicworldid_ = 0u;
    servertype_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 logicWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicworldid_)));
          set_has_logicworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverType;
        break;
      }
      
      // optional uint32 serverType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverID;
        break;
      }
      
      // optional uint32 serverID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 logicWorldID = 1;
  if (has_logicworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logicworldid(), output);
  }
  
  // optional uint32 serverType = 2;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->servertype(), output);
  }
  
  // optional uint32 serverID = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 logicWorldID = 1;
  if (has_logicworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logicworldid(), target);
  }
  
  // optional uint32 serverType = 2;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->servertype(), target);
  }
  
  // optional uint32 serverID = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBServerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 logicWorldID = 1;
    if (has_logicworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicworldid());
    }
    
    // optional uint32 serverType = 2;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }
    
    // optional uint32 serverID = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBServerInfo::MergeFrom(const PBServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logicworldid()) {
      set_logicworldid(from.logicworldid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBServerInfo::CopyFrom(const PBServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBServerInfo::IsInitialized() const {
  
  return true;
}

void PBServerInfo::Swap(PBServerInfo* other) {
  if (other != this) {
    std::swap(logicworldid_, other->logicworldid_);
    std::swap(servertype_, other->servertype_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBServerInfo_descriptor_;
  metadata.reflection = PBServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPoint::kPosxFieldNumber;
const int PBPoint::kPosyFieldNumber;
#endif  // !_MSC_VER

PBPoint::PBPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPoint::InitAsDefaultInstance() {
}

PBPoint::PBPoint(const PBPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPoint::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPoint::~PBPoint() {
  SharedDtor();
}

void PBPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPoint_descriptor_;
}

const PBPoint& PBPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBPoint* PBPoint::default_instance_ = NULL;

PBPoint* PBPoint::New() const {
  return new PBPoint;
}

void PBPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posx_ = 0;
    posy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float posx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_posy;
        break;
      }
      
      // optional float posy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float posx = 1;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->posx(), output);
  }
  
  // optional float posy = 2;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->posy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float posx = 1;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->posx(), target);
  }
  
  // optional float posy = 2;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->posy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float posx = 1;
    if (has_posx()) {
      total_size += 1 + 4;
    }
    
    // optional float posy = 2;
    if (has_posy()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPoint::MergeFrom(const PBPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPoint::CopyFrom(const PBPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPoint::IsInitialized() const {
  
  return true;
}

void PBPoint::Swap(PBPoint* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPoint_descriptor_;
  metadata.reflection = PBPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSkill::kSkillidFieldNumber;
const int PBSkill::kLevelFieldNumber;
#endif  // !_MSC_VER

PBSkill::PBSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkill::InitAsDefaultInstance() {
}

PBSkill::PBSkill(const PBSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkill::~PBSkill() {
  SharedDtor();
}

void PBSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkill_descriptor_;
}

const PBSkill& PBSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBSkill* PBSkill::default_instance_ = NULL;

PBSkill* PBSkill::New() const {
  return new PBSkill;
}

void PBSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }
  
  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkill::MergeFrom(const PBSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkill::CopyFrom(const PBSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSkill::IsInitialized() const {
  
  return true;
}

void PBSkill::Swap(PBSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSkill_descriptor_;
  metadata.reflection = PBSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBuff::kBuffidFieldNumber;
const int PBBuff::kLefttickFieldNumber;
const int PBBuff::kEndtimeFieldNumber;
const int PBBuff::kLevelFieldNumber;
const int PBBuff::kUnitidFieldNumber;
const int PBBuff::kSkillidFieldNumber;
#endif  // !_MSC_VER

PBBuff::PBBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBuff::InitAsDefaultInstance() {
}

PBBuff::PBBuff(const PBBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBuff::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = 0u;
  lefttick_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  unitid_ = 0u;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBuff::~PBBuff() {
  SharedDtor();
}

void PBBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBuff_descriptor_;
}

const PBBuff& PBBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBBuff* PBBuff::default_instance_ = NULL;

PBBuff* PBBuff::New() const {
  return new PBBuff;
}

void PBBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = 0u;
    lefttick_ = GOOGLE_ULONGLONG(0);
    endtime_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
    unitid_ = 0u;
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buffid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lefttick;
        break;
      }
      
      // optional uint64 lefttick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lefttick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lefttick_)));
          set_has_lefttick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }
      
      // optional uint64 endtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unitid;
        break;
      }
      
      // optional uint32 unitid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skillid;
        break;
      }
      
      // optional uint32 skillid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 buffid = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buffid(), output);
  }
  
  // optional uint64 lefttick = 2;
  if (has_lefttick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lefttick(), output);
  }
  
  // optional uint64 endtime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }
  
  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }
  
  // optional uint32 unitid = 5;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unitid(), output);
  }
  
  // optional uint32 skillid = 6;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skillid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 buffid = 1;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buffid(), target);
  }
  
  // optional uint64 lefttick = 2;
  if (has_lefttick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lefttick(), target);
  }
  
  // optional uint64 endtime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }
  
  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }
  
  // optional uint32 unitid = 5;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->unitid(), target);
  }
  
  // optional uint32 skillid = 6;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skillid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBuff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buffid = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }
    
    // optional uint64 lefttick = 2;
    if (has_lefttick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lefttick());
    }
    
    // optional uint64 endtime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }
    
    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 unitid = 5;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
    // optional uint32 skillid = 6;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBuff::MergeFrom(const PBBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_lefttick()) {
      set_lefttick(from.lefttick());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBuff::CopyFrom(const PBBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBuff::IsInitialized() const {
  
  return true;
}

void PBBuff::Swap(PBBuff* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(lefttick_, other->lefttick_);
    std::swap(endtime_, other->endtime_);
    std::swap(level_, other->level_);
    std::swap(unitid_, other->unitid_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBuff_descriptor_;
  metadata.reflection = PBBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMoney::kMoneytypeFieldNumber;
const int PBMoney::kMoneyFieldNumber;
#endif  // !_MSC_VER

PBMoney::PBMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMoney::InitAsDefaultInstance() {
}

PBMoney::PBMoney(const PBMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMoney::SharedCtor() {
  _cached_size_ = 0;
  moneytype_ = 0u;
  money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMoney::~PBMoney() {
  SharedDtor();
}

void PBMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMoney_descriptor_;
}

const PBMoney& PBMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBMoney* PBMoney::default_instance_ = NULL;

PBMoney* PBMoney::New() const {
  return new PBMoney;
}

void PBMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moneytype_ = 0u;
    money_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moneytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }
      
      // optional uint64 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moneytype = 1;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moneytype(), output);
  }
  
  // optional uint64 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moneytype = 1;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->moneytype(), target);
  }
  
  // optional uint64 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moneytype = 1;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneytype());
    }
    
    // optional uint64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMoney::MergeFrom(const PBMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMoney::CopyFrom(const PBMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMoney::IsInitialized() const {
  
  return true;
}

void PBMoney::Swap(PBMoney* other) {
  if (other != this) {
    std::swap(moneytype_, other->moneytype_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMoney_descriptor_;
  metadata.reflection = PBMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCounter::kIdFieldNumber;
const int PBCounter::kCountFieldNumber;
#endif  // !_MSC_VER

PBCounter::PBCounter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCounter::InitAsDefaultInstance() {
}

PBCounter::PBCounter(const PBCounter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCounter::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCounter::~PBCounter() {
  SharedDtor();
}

void PBCounter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCounter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCounter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCounter_descriptor_;
}

const PBCounter& PBCounter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBCounter* PBCounter::default_instance_ = NULL;

PBCounter* PBCounter::New() const {
  return new PBCounter;
}

void PBCounter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint64 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint64 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCounter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint64 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCounter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCounter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCounter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCounter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCounter::MergeFrom(const PBCounter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCounter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCounter::CopyFrom(const PBCounter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCounter::IsInitialized() const {
  
  return true;
}

void PBCounter::Swap(PBCounter* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCounter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCounter_descriptor_;
  metadata.reflection = PBCounter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBVerClientData::kFilenameFieldNumber;
const int PBVerClientData::kCrcFieldNumber;
#endif  // !_MSC_VER

PBVerClientData::PBVerClientData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBVerClientData::InitAsDefaultInstance() {
}

PBVerClientData::PBVerClientData(const PBVerClientData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBVerClientData::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBVerClientData::~PBVerClientData() {
  SharedDtor();
}

void PBVerClientData::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void PBVerClientData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBVerClientData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBVerClientData_descriptor_;
}

const PBVerClientData& PBVerClientData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBVerClientData* PBVerClientData::default_instance_ = NULL;

PBVerClientData* PBVerClientData::New() const {
  return new PBVerClientData;
}

void PBVerClientData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    crc_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBVerClientData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crc;
        break;
      }
      
      // optional uint32 crc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBVerClientData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }
  
  // optional uint32 crc = 2;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBVerClientData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }
  
  // optional uint32 crc = 2;
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBVerClientData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
    // optional uint32 crc = 2;
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBVerClientData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBVerClientData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBVerClientData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBVerClientData::MergeFrom(const PBVerClientData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBVerClientData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBVerClientData::CopyFrom(const PBVerClientData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBVerClientData::IsInitialized() const {
  
  return true;
}

void PBVerClientData::Swap(PBVerClientData* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(crc_, other->crc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBVerClientData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBVerClientData_descriptor_;
  metadata.reflection = PBVerClientData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerAnimData::kAnimlistFieldNumber;
const int ServerAnimData::kVataranimlistFieldNumber;
#endif  // !_MSC_VER

ServerAnimData::ServerAnimData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerAnimData::InitAsDefaultInstance() {
}

ServerAnimData::ServerAnimData(const ServerAnimData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerAnimData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerAnimData::~ServerAnimData() {
  SharedDtor();
}

void ServerAnimData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerAnimData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerAnimData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerAnimData_descriptor_;
}

const ServerAnimData& ServerAnimData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

ServerAnimData* ServerAnimData::default_instance_ = NULL;

ServerAnimData* ServerAnimData::New() const {
  return new ServerAnimData;
}

void ServerAnimData::Clear() {
  animlist_.Clear();
  vataranimlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerAnimData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerSkillAnimCfg animlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_animlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_animlist;
        if (input->ExpectTag(18)) goto parse_vataranimlist;
        break;
      }
      
      // repeated .ServerAvatarAnimCfg vataranimlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vataranimlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vataranimlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vataranimlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerAnimData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ServerSkillAnimCfg animlist = 1;
  for (int i = 0; i < this->animlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->animlist(i), output);
  }
  
  // repeated .ServerAvatarAnimCfg vataranimlist = 2;
  for (int i = 0; i < this->vataranimlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vataranimlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerAnimData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ServerSkillAnimCfg animlist = 1;
  for (int i = 0; i < this->animlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->animlist(i), target);
  }
  
  // repeated .ServerAvatarAnimCfg vataranimlist = 2;
  for (int i = 0; i < this->vataranimlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vataranimlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerAnimData::ByteSize() const {
  int total_size = 0;
  
  // repeated .ServerSkillAnimCfg animlist = 1;
  total_size += 1 * this->animlist_size();
  for (int i = 0; i < this->animlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animlist(i));
  }
  
  // repeated .ServerAvatarAnimCfg vataranimlist = 2;
  total_size += 1 * this->vataranimlist_size();
  for (int i = 0; i < this->vataranimlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vataranimlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerAnimData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerAnimData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerAnimData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerAnimData::MergeFrom(const ServerAnimData& from) {
  GOOGLE_CHECK_NE(&from, this);
  animlist_.MergeFrom(from.animlist_);
  vataranimlist_.MergeFrom(from.vataranimlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerAnimData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerAnimData::CopyFrom(const ServerAnimData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerAnimData::IsInitialized() const {
  
  return true;
}

void ServerAnimData::Swap(ServerAnimData* other) {
  if (other != this) {
    animlist_.Swap(&other->animlist_);
    vataranimlist_.Swap(&other->vataranimlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerAnimData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerAnimData_descriptor_;
  metadata.reflection = ServerAnimData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerSkillAnimCfg::kSkillcfgidFieldNumber;
const int ServerSkillAnimCfg::kLengthServerFieldNumber;
const int ServerSkillAnimCfg::kAttackFrameServerFieldNumber;
#endif  // !_MSC_VER

ServerSkillAnimCfg::ServerSkillAnimCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerSkillAnimCfg::InitAsDefaultInstance() {
}

ServerSkillAnimCfg::ServerSkillAnimCfg(const ServerSkillAnimCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerSkillAnimCfg::SharedCtor() {
  _cached_size_ = 0;
  skillcfgid_ = 0u;
  length_server_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerSkillAnimCfg::~ServerSkillAnimCfg() {
  SharedDtor();
}

void ServerSkillAnimCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerSkillAnimCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerSkillAnimCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerSkillAnimCfg_descriptor_;
}

const ServerSkillAnimCfg& ServerSkillAnimCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

ServerSkillAnimCfg* ServerSkillAnimCfg::default_instance_ = NULL;

ServerSkillAnimCfg* ServerSkillAnimCfg::New() const {
  return new ServerSkillAnimCfg;
}

void ServerSkillAnimCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillcfgid_ = 0u;
    length_server_ = 0u;
  }
  attackframe_server_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerSkillAnimCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillcfgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillcfgid_)));
          set_has_skillcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length_server;
        break;
      }
      
      // optional uint32 length_server = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_server_)));
          set_has_length_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attackFrame_server;
        break;
      }
      
      // repeated .AnimAttackFrameParams attackFrame_server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackFrame_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackframe_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attackFrame_server;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerSkillAnimCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillcfgid = 1;
  if (has_skillcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillcfgid(), output);
  }
  
  // optional uint32 length_server = 2;
  if (has_length_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length_server(), output);
  }
  
  // repeated .AnimAttackFrameParams attackFrame_server = 3;
  for (int i = 0; i < this->attackframe_server_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attackframe_server(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerSkillAnimCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillcfgid = 1;
  if (has_skillcfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillcfgid(), target);
  }
  
  // optional uint32 length_server = 2;
  if (has_length_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length_server(), target);
  }
  
  // repeated .AnimAttackFrameParams attackFrame_server = 3;
  for (int i = 0; i < this->attackframe_server_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attackframe_server(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerSkillAnimCfg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillcfgid = 1;
    if (has_skillcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillcfgid());
    }
    
    // optional uint32 length_server = 2;
    if (has_length_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length_server());
    }
    
  }
  // repeated .AnimAttackFrameParams attackFrame_server = 3;
  total_size += 1 * this->attackframe_server_size();
  for (int i = 0; i < this->attackframe_server_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackframe_server(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerSkillAnimCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerSkillAnimCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerSkillAnimCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerSkillAnimCfg::MergeFrom(const ServerSkillAnimCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackframe_server_.MergeFrom(from.attackframe_server_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillcfgid()) {
      set_skillcfgid(from.skillcfgid());
    }
    if (from.has_length_server()) {
      set_length_server(from.length_server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerSkillAnimCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerSkillAnimCfg::CopyFrom(const ServerSkillAnimCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSkillAnimCfg::IsInitialized() const {
  
  return true;
}

void ServerSkillAnimCfg::Swap(ServerSkillAnimCfg* other) {
  if (other != this) {
    std::swap(skillcfgid_, other->skillcfgid_);
    std::swap(length_server_, other->length_server_);
    attackframe_server_.Swap(&other->attackframe_server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerSkillAnimCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerSkillAnimCfg_descriptor_;
  metadata.reflection = ServerSkillAnimCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnimAttackFrameParams::kFrameFieldNumber;
const int AnimAttackFrameParams::kCalMotionRangeFieldNumber;
const int AnimAttackFrameParams::kTimeFieldNumber;
const int AnimAttackFrameParams::kOffsetAngleFieldNumber;
const int AnimAttackFrameParams::kOffsetLengthFieldNumber;
#endif  // !_MSC_VER

AnimAttackFrameParams::AnimAttackFrameParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnimAttackFrameParams::InitAsDefaultInstance() {
}

AnimAttackFrameParams::AnimAttackFrameParams(const AnimAttackFrameParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnimAttackFrameParams::SharedCtor() {
  _cached_size_ = 0;
  frame_ = 0u;
  calmotionrange_ = false;
  time_ = 0u;
  offsetangle_ = 0;
  offsetlength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnimAttackFrameParams::~AnimAttackFrameParams() {
  SharedDtor();
}

void AnimAttackFrameParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnimAttackFrameParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnimAttackFrameParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnimAttackFrameParams_descriptor_;
}

const AnimAttackFrameParams& AnimAttackFrameParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

AnimAttackFrameParams* AnimAttackFrameParams::default_instance_ = NULL;

AnimAttackFrameParams* AnimAttackFrameParams::New() const {
  return new AnimAttackFrameParams;
}

void AnimAttackFrameParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frame_ = 0u;
    calmotionrange_ = false;
    time_ = 0u;
    offsetangle_ = 0;
    offsetlength_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnimAttackFrameParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 frame = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_calMotionRange;
        break;
      }
      
      // optional bool calMotionRange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calMotionRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calmotionrange_)));
          set_has_calmotionrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_offsetAngle;
        break;
      }
      
      // optional float offsetAngle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetangle_)));
          set_has_offsetangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_offsetLength;
        break;
      }
      
      // optional float offsetLength = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetlength_)));
          set_has_offsetlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnimAttackFrameParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 frame = 1;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame(), output);
  }
  
  // optional bool calMotionRange = 2;
  if (has_calmotionrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->calmotionrange(), output);
  }
  
  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }
  
  // optional float offsetAngle = 4;
  if (has_offsetangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->offsetangle(), output);
  }
  
  // optional float offsetLength = 5;
  if (has_offsetlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->offsetlength(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnimAttackFrameParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 frame = 1;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame(), target);
  }
  
  // optional bool calMotionRange = 2;
  if (has_calmotionrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->calmotionrange(), target);
  }
  
  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }
  
  // optional float offsetAngle = 4;
  if (has_offsetangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->offsetangle(), target);
  }
  
  // optional float offsetLength = 5;
  if (has_offsetlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->offsetlength(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnimAttackFrameParams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 frame = 1;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame());
    }
    
    // optional bool calMotionRange = 2;
    if (has_calmotionrange()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // optional float offsetAngle = 4;
    if (has_offsetangle()) {
      total_size += 1 + 4;
    }
    
    // optional float offsetLength = 5;
    if (has_offsetlength()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnimAttackFrameParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnimAttackFrameParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnimAttackFrameParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnimAttackFrameParams::MergeFrom(const AnimAttackFrameParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_calmotionrange()) {
      set_calmotionrange(from.calmotionrange());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_offsetangle()) {
      set_offsetangle(from.offsetangle());
    }
    if (from.has_offsetlength()) {
      set_offsetlength(from.offsetlength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnimAttackFrameParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimAttackFrameParams::CopyFrom(const AnimAttackFrameParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimAttackFrameParams::IsInitialized() const {
  
  return true;
}

void AnimAttackFrameParams::Swap(AnimAttackFrameParams* other) {
  if (other != this) {
    std::swap(frame_, other->frame_);
    std::swap(calmotionrange_, other->calmotionrange_);
    std::swap(time_, other->time_);
    std::swap(offsetangle_, other->offsetangle_);
    std::swap(offsetlength_, other->offsetlength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnimAttackFrameParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnimAttackFrameParams_descriptor_;
  metadata.reflection = AnimAttackFrameParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerAvatarAnimCfg::kModelnameFieldNumber;
const int ServerAvatarAnimCfg::kModelRadiusFieldNumber;
const int ServerAvatarAnimCfg::kLandanimlenFieldNumber;
const int ServerAvatarAnimCfg::kClimbanimlenFieldNumber;
const int ServerAvatarAnimCfg::kBeattackanimlenFieldNumber;
const int ServerAvatarAnimCfg::kBirthanimlenFieldNumber;
const int ServerAvatarAnimCfg::kDeadanimlenFieldNumber;
#endif  // !_MSC_VER

ServerAvatarAnimCfg::ServerAvatarAnimCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerAvatarAnimCfg::InitAsDefaultInstance() {
}

ServerAvatarAnimCfg::ServerAvatarAnimCfg(const ServerAvatarAnimCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerAvatarAnimCfg::SharedCtor() {
  _cached_size_ = 0;
  modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modelradius_ = 0;
  landanimlen_ = 0u;
  climbanimlen_ = 0u;
  beattackanimlen_ = 0u;
  birthanimlen_ = 0u;
  deadanimlen_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerAvatarAnimCfg::~ServerAvatarAnimCfg() {
  SharedDtor();
}

void ServerAvatarAnimCfg::SharedDtor() {
  if (modelname_ != &::google::protobuf::internal::kEmptyString) {
    delete modelname_;
  }
  if (this != default_instance_) {
  }
}

void ServerAvatarAnimCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerAvatarAnimCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerAvatarAnimCfg_descriptor_;
}

const ServerAvatarAnimCfg& ServerAvatarAnimCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

ServerAvatarAnimCfg* ServerAvatarAnimCfg::default_instance_ = NULL;

ServerAvatarAnimCfg* ServerAvatarAnimCfg::New() const {
  return new ServerAvatarAnimCfg;
}

void ServerAvatarAnimCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_modelname()) {
      if (modelname_ != &::google::protobuf::internal::kEmptyString) {
        modelname_->clear();
      }
    }
    modelradius_ = 0;
    landanimlen_ = 0u;
    climbanimlen_ = 0u;
    beattackanimlen_ = 0u;
    birthanimlen_ = 0u;
    deadanimlen_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerAvatarAnimCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string modelname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelname().data(), this->modelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_modelRadius;
        break;
      }
      
      // optional float modelRadius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_modelRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &modelradius_)));
          set_has_modelradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_landanimlen;
        break;
      }
      
      // optional uint32 landanimlen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landanimlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &landanimlen_)));
          set_has_landanimlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_climbanimlen;
        break;
      }
      
      // optional uint32 climbanimlen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_climbanimlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &climbanimlen_)));
          set_has_climbanimlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_beattackanimlen;
        break;
      }
      
      // optional uint32 beattackanimlen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beattackanimlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beattackanimlen_)));
          set_has_beattackanimlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_birthanimlen;
        break;
      }
      
      // optional uint32 birthanimlen = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_birthanimlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &birthanimlen_)));
          set_has_birthanimlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_deadanimlen;
        break;
      }
      
      // optional uint32 deadanimlen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadanimlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadanimlen_)));
          set_has_deadanimlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerAvatarAnimCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string modelname = 1;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->modelname(), output);
  }
  
  // optional float modelRadius = 2;
  if (has_modelradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->modelradius(), output);
  }
  
  // optional uint32 landanimlen = 3;
  if (has_landanimlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->landanimlen(), output);
  }
  
  // optional uint32 climbanimlen = 4;
  if (has_climbanimlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->climbanimlen(), output);
  }
  
  // optional uint32 beattackanimlen = 5;
  if (has_beattackanimlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->beattackanimlen(), output);
  }
  
  // optional uint32 birthanimlen = 6;
  if (has_birthanimlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->birthanimlen(), output);
  }
  
  // optional uint32 deadanimlen = 7;
  if (has_deadanimlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deadanimlen(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerAvatarAnimCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string modelname = 1;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->modelname(), target);
  }
  
  // optional float modelRadius = 2;
  if (has_modelradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->modelradius(), target);
  }
  
  // optional uint32 landanimlen = 3;
  if (has_landanimlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->landanimlen(), target);
  }
  
  // optional uint32 climbanimlen = 4;
  if (has_climbanimlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->climbanimlen(), target);
  }
  
  // optional uint32 beattackanimlen = 5;
  if (has_beattackanimlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->beattackanimlen(), target);
  }
  
  // optional uint32 birthanimlen = 6;
  if (has_birthanimlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->birthanimlen(), target);
  }
  
  // optional uint32 deadanimlen = 7;
  if (has_deadanimlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->deadanimlen(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerAvatarAnimCfg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string modelname = 1;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelname());
    }
    
    // optional float modelRadius = 2;
    if (has_modelradius()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 landanimlen = 3;
    if (has_landanimlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->landanimlen());
    }
    
    // optional uint32 climbanimlen = 4;
    if (has_climbanimlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->climbanimlen());
    }
    
    // optional uint32 beattackanimlen = 5;
    if (has_beattackanimlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beattackanimlen());
    }
    
    // optional uint32 birthanimlen = 6;
    if (has_birthanimlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->birthanimlen());
    }
    
    // optional uint32 deadanimlen = 7;
    if (has_deadanimlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadanimlen());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerAvatarAnimCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerAvatarAnimCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerAvatarAnimCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerAvatarAnimCfg::MergeFrom(const ServerAvatarAnimCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modelname()) {
      set_modelname(from.modelname());
    }
    if (from.has_modelradius()) {
      set_modelradius(from.modelradius());
    }
    if (from.has_landanimlen()) {
      set_landanimlen(from.landanimlen());
    }
    if (from.has_climbanimlen()) {
      set_climbanimlen(from.climbanimlen());
    }
    if (from.has_beattackanimlen()) {
      set_beattackanimlen(from.beattackanimlen());
    }
    if (from.has_birthanimlen()) {
      set_birthanimlen(from.birthanimlen());
    }
    if (from.has_deadanimlen()) {
      set_deadanimlen(from.deadanimlen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerAvatarAnimCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerAvatarAnimCfg::CopyFrom(const ServerAvatarAnimCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerAvatarAnimCfg::IsInitialized() const {
  
  return true;
}

void ServerAvatarAnimCfg::Swap(ServerAvatarAnimCfg* other) {
  if (other != this) {
    std::swap(modelname_, other->modelname_);
    std::swap(modelradius_, other->modelradius_);
    std::swap(landanimlen_, other->landanimlen_);
    std::swap(climbanimlen_, other->climbanimlen_);
    std::swap(beattackanimlen_, other->beattackanimlen_);
    std::swap(birthanimlen_, other->birthanimlen_);
    std::swap(deadanimlen_, other->deadanimlen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerAvatarAnimCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerAvatarAnimCfg_descriptor_;
  metadata.reflection = ServerAvatarAnimCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBItemSortData::kFromitemsnidFieldNumber;
const int PBItemSortData::kToitemsnidFieldNumber;
const int PBItemSortData::kItemnumFieldNumber;
#endif  // !_MSC_VER

PBItemSortData::PBItemSortData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemSortData::InitAsDefaultInstance() {
}

PBItemSortData::PBItemSortData(const PBItemSortData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemSortData::SharedCtor() {
  _cached_size_ = 0;
  fromitemsnid_ = GOOGLE_ULONGLONG(0);
  toitemsnid_ = GOOGLE_ULONGLONG(0);
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemSortData::~PBItemSortData() {
  SharedDtor();
}

void PBItemSortData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBItemSortData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBItemSortData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemSortData_descriptor_;
}

const PBItemSortData& PBItemSortData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBItemSortData* PBItemSortData::default_instance_ = NULL;

PBItemSortData* PBItemSortData::New() const {
  return new PBItemSortData;
}

void PBItemSortData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromitemsnid_ = GOOGLE_ULONGLONG(0);
    toitemsnid_ = GOOGLE_ULONGLONG(0);
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemSortData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fromitemsnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromitemsnid_)));
          set_has_fromitemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_toitemsnid;
        break;
      }
      
      // optional uint64 toitemsnid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toitemsnid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &toitemsnid_)));
          set_has_toitemsnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemnum;
        break;
      }
      
      // optional uint32 itemnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemSortData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fromitemsnid = 1;
  if (has_fromitemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fromitemsnid(), output);
  }
  
  // optional uint64 toitemsnid = 2;
  if (has_toitemsnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->toitemsnid(), output);
  }
  
  // optional uint32 itemnum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemSortData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fromitemsnid = 1;
  if (has_fromitemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fromitemsnid(), target);
  }
  
  // optional uint64 toitemsnid = 2;
  if (has_toitemsnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->toitemsnid(), target);
  }
  
  // optional uint32 itemnum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemSortData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fromitemsnid = 1;
    if (has_fromitemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromitemsnid());
    }
    
    // optional uint64 toitemsnid = 2;
    if (has_toitemsnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->toitemsnid());
    }
    
    // optional uint32 itemnum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBItemSortData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemSortData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemSortData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemSortData::MergeFrom(const PBItemSortData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromitemsnid()) {
      set_fromitemsnid(from.fromitemsnid());
    }
    if (from.has_toitemsnid()) {
      set_toitemsnid(from.toitemsnid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemSortData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemSortData::CopyFrom(const PBItemSortData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBItemSortData::IsInitialized() const {
  
  return true;
}

void PBItemSortData::Swap(PBItemSortData* other) {
  if (other != this) {
    std::swap(fromitemsnid_, other->fromitemsnid_);
    std::swap(toitemsnid_, other->toitemsnid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBItemSortData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBItemSortData_descriptor_;
  metadata.reflection = PBItemSortData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBingfuNumData::kBingfusnFieldNumber;
const int PBBingfuNumData::kNumFieldNumber;
#endif  // !_MSC_VER

PBBingfuNumData::PBBingfuNumData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBingfuNumData::InitAsDefaultInstance() {
}

PBBingfuNumData::PBBingfuNumData(const PBBingfuNumData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBingfuNumData::SharedCtor() {
  _cached_size_ = 0;
  bingfusn_ = GOOGLE_ULONGLONG(0);
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBingfuNumData::~PBBingfuNumData() {
  SharedDtor();
}

void PBBingfuNumData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBingfuNumData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBingfuNumData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBingfuNumData_descriptor_;
}

const PBBingfuNumData& PBBingfuNumData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBBingfuNumData* PBBingfuNumData::default_instance_ = NULL;

PBBingfuNumData* PBBingfuNumData::New() const {
  return new PBBingfuNumData;
}

void PBBingfuNumData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bingfusn_ = GOOGLE_ULONGLONG(0);
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBingfuNumData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 bingfusn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bingfusn_)));
          set_has_bingfusn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBingfuNumData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 bingfusn = 1;
  if (has_bingfusn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bingfusn(), output);
  }
  
  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBingfuNumData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 bingfusn = 1;
  if (has_bingfusn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->bingfusn(), target);
  }
  
  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBingfuNumData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 bingfusn = 1;
    if (has_bingfusn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bingfusn());
    }
    
    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBingfuNumData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBingfuNumData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBingfuNumData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBingfuNumData::MergeFrom(const PBBingfuNumData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bingfusn()) {
      set_bingfusn(from.bingfusn());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBingfuNumData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBingfuNumData::CopyFrom(const PBBingfuNumData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBingfuNumData::IsInitialized() const {
  
  return true;
}

void PBBingfuNumData::Swap(PBBingfuNumData* other) {
  if (other != this) {
    std::swap(bingfusn_, other->bingfusn_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBingfuNumData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBingfuNumData_descriptor_;
  metadata.reflection = PBBingfuNumData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDelItemata::kItemsnFieldNumber;
const int PBDelItemata::kNumFieldNumber;
#endif  // !_MSC_VER

PBDelItemata::PBDelItemata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDelItemata::InitAsDefaultInstance() {
}

PBDelItemata::PBDelItemata(const PBDelItemata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDelItemata::SharedCtor() {
  _cached_size_ = 0;
  itemsn_ = GOOGLE_ULONGLONG(0);
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDelItemata::~PBDelItemata() {
  SharedDtor();
}

void PBDelItemata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDelItemata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDelItemata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDelItemata_descriptor_;
}

const PBDelItemata& PBDelItemata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBDelItemata* PBDelItemata::default_instance_ = NULL;

PBDelItemata* PBDelItemata::New() const {
  return new PBDelItemata;
}

void PBDelItemata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsn_ = GOOGLE_ULONGLONG(0);
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDelItemata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsn_)));
          set_has_itemsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDelItemata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsn = 1;
  if (has_itemsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsn(), output);
  }
  
  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDelItemata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsn = 1;
  if (has_itemsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsn(), target);
  }
  
  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDelItemata::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsn = 1;
    if (has_itemsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsn());
    }
    
    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDelItemata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDelItemata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDelItemata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDelItemata::MergeFrom(const PBDelItemata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsn()) {
      set_itemsn(from.itemsn());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDelItemata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDelItemata::CopyFrom(const PBDelItemata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDelItemata::IsInitialized() const {
  
  return true;
}

void PBDelItemata::Swap(PBDelItemata* other) {
  if (other != this) {
    std::swap(itemsn_, other->itemsn_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDelItemata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDelItemata_descriptor_;
  metadata.reflection = PBDelItemata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBColletionData::kMonsterIDFieldNumber;
const int PBColletionData::kCountFieldNumber;
const int PBColletionData::kTimeFieldNumber;
#endif  // !_MSC_VER

PBColletionData::PBColletionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBColletionData::InitAsDefaultInstance() {
}

PBColletionData::PBColletionData(const PBColletionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBColletionData::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  count_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBColletionData::~PBColletionData() {
  SharedDtor();
}

void PBColletionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBColletionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBColletionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBColletionData_descriptor_;
}

const PBColletionData& PBColletionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBColletionData* PBColletionData::default_instance_ = NULL;

PBColletionData* PBColletionData::New() const {
  return new PBColletionData;
}

void PBColletionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    count_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBColletionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MonsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }
      
      // optional uint32 Count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Time;
        break;
      }
      
      // optional uint32 Time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBColletionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 MonsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }
  
  // optional uint32 Count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // optional uint32 Time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBColletionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 MonsterID = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }
  
  // optional uint32 Count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // optional uint32 Time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBColletionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MonsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }
    
    // optional uint32 Count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 Time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBColletionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBColletionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBColletionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBColletionData::MergeFrom(const PBColletionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBColletionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBColletionData::CopyFrom(const PBColletionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBColletionData::IsInitialized() const {
  
  return true;
}

void PBColletionData::Swap(PBColletionData* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(count_, other->count_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBColletionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBColletionData_descriptor_;
  metadata.reflection = PBColletionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWuxueSetSkillData::kSkillindexFieldNumber;
const int PBWuxueSetSkillData::kSkillidFieldNumber;
#endif  // !_MSC_VER

PBWuxueSetSkillData::PBWuxueSetSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWuxueSetSkillData::InitAsDefaultInstance() {
}

PBWuxueSetSkillData::PBWuxueSetSkillData(const PBWuxueSetSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWuxueSetSkillData::SharedCtor() {
  _cached_size_ = 0;
  skillindex_ = 0u;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWuxueSetSkillData::~PBWuxueSetSkillData() {
  SharedDtor();
}

void PBWuxueSetSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWuxueSetSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWuxueSetSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWuxueSetSkillData_descriptor_;
}

const PBWuxueSetSkillData& PBWuxueSetSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBWuxueSetSkillData* PBWuxueSetSkillData::default_instance_ = NULL;

PBWuxueSetSkillData* PBWuxueSetSkillData::New() const {
  return new PBWuxueSetSkillData;
}

void PBWuxueSetSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillindex_ = 0u;
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWuxueSetSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillindex_)));
          set_has_skillindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillid;
        break;
      }
      
      // optional uint32 skillid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWuxueSetSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillindex = 1;
  if (has_skillindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillindex(), output);
  }
  
  // optional uint32 skillid = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWuxueSetSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillindex = 1;
  if (has_skillindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillindex(), target);
  }
  
  // optional uint32 skillid = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWuxueSetSkillData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillindex = 1;
    if (has_skillindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillindex());
    }
    
    // optional uint32 skillid = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWuxueSetSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWuxueSetSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWuxueSetSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWuxueSetSkillData::MergeFrom(const PBWuxueSetSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillindex()) {
      set_skillindex(from.skillindex());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWuxueSetSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWuxueSetSkillData::CopyFrom(const PBWuxueSetSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWuxueSetSkillData::IsInitialized() const {
  
  return true;
}

void PBWuxueSetSkillData::Swap(PBWuxueSetSkillData* other) {
  if (other != this) {
    std::swap(skillindex_, other->skillindex_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWuxueSetSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWuxueSetSkillData_descriptor_;
  metadata.reflection = PBWuxueSetSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBIDStamp::kIdFieldNumber;
const int PBIDStamp::kStampFieldNumber;
#endif  // !_MSC_VER

PBIDStamp::PBIDStamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBIDStamp::InitAsDefaultInstance() {
}

PBIDStamp::PBIDStamp(const PBIDStamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBIDStamp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBIDStamp::~PBIDStamp() {
  SharedDtor();
}

void PBIDStamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBIDStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBIDStamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBIDStamp_descriptor_;
}

const PBIDStamp& PBIDStamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBIDStamp* PBIDStamp::default_instance_ = NULL;

PBIDStamp* PBIDStamp::New() const {
  return new PBIDStamp;
}

void PBIDStamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    stamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBIDStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stamp;
        break;
      }
      
      // optional uint32 stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBIDStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 stamp = 2;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBIDStamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 stamp = 2;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBIDStamp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 stamp = 2;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBIDStamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBIDStamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBIDStamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBIDStamp::MergeFrom(const PBIDStamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBIDStamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBIDStamp::CopyFrom(const PBIDStamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBIDStamp::IsInitialized() const {
  
  return true;
}

void PBIDStamp::Swap(PBIDStamp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(stamp_, other->stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBIDStamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBIDStamp_descriptor_;
  metadata.reflection = PBIDStamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMoneyConsume::kSilverFieldNumber;
const int PBMoneyConsume::kBindsilverFieldNumber;
const int PBMoneyConsume::kCashFieldNumber;
const int PBMoneyConsume::kBindcashFieldNumber;
#endif  // !_MSC_VER

PBMoneyConsume::PBMoneyConsume()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMoneyConsume::InitAsDefaultInstance() {
}

PBMoneyConsume::PBMoneyConsume(const PBMoneyConsume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMoneyConsume::SharedCtor() {
  _cached_size_ = 0;
  silver_ = 0u;
  bindsilver_ = 0u;
  cash_ = 0u;
  bindcash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMoneyConsume::~PBMoneyConsume() {
  SharedDtor();
}

void PBMoneyConsume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMoneyConsume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMoneyConsume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMoneyConsume_descriptor_;
}

const PBMoneyConsume& PBMoneyConsume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBMoneyConsume* PBMoneyConsume::default_instance_ = NULL;

PBMoneyConsume* PBMoneyConsume::New() const {
  return new PBMoneyConsume;
}

void PBMoneyConsume::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    silver_ = 0u;
    bindsilver_ = 0u;
    cash_ = 0u;
    bindcash_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMoneyConsume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 silver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bindsilver;
        break;
      }
      
      // optional uint32 bindsilver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindsilver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bindsilver_)));
          set_has_bindsilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cash;
        break;
      }
      
      // optional uint32 cash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bindcash;
        break;
      }
      
      // optional uint32 bindcash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindcash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bindcash_)));
          set_has_bindcash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMoneyConsume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 silver = 1;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->silver(), output);
  }
  
  // optional uint32 bindsilver = 2;
  if (has_bindsilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bindsilver(), output);
  }
  
  // optional uint32 cash = 3;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cash(), output);
  }
  
  // optional uint32 bindcash = 4;
  if (has_bindcash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bindcash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMoneyConsume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 silver = 1;
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->silver(), target);
  }
  
  // optional uint32 bindsilver = 2;
  if (has_bindsilver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bindsilver(), target);
  }
  
  // optional uint32 cash = 3;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cash(), target);
  }
  
  // optional uint32 bindcash = 4;
  if (has_bindcash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bindcash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMoneyConsume::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 silver = 1;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->silver());
    }
    
    // optional uint32 bindsilver = 2;
    if (has_bindsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bindsilver());
    }
    
    // optional uint32 cash = 3;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
    // optional uint32 bindcash = 4;
    if (has_bindcash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bindcash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMoneyConsume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMoneyConsume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMoneyConsume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMoneyConsume::MergeFrom(const PBMoneyConsume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_bindsilver()) {
      set_bindsilver(from.bindsilver());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_bindcash()) {
      set_bindcash(from.bindcash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMoneyConsume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMoneyConsume::CopyFrom(const PBMoneyConsume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMoneyConsume::IsInitialized() const {
  
  return true;
}

void PBMoneyConsume::Swap(PBMoneyConsume* other) {
  if (other != this) {
    std::swap(silver_, other->silver_);
    std::swap(bindsilver_, other->bindsilver_);
    std::swap(cash_, other->cash_);
    std::swap(bindcash_, other->bindcash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMoneyConsume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMoneyConsume_descriptor_;
  metadata.reflection = PBMoneyConsume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSixiangMonsterInfo::kUnitidFieldNumber;
const int PBSixiangMonsterInfo::kPointFieldNumber;
const int PBSixiangMonsterInfo::kActiveFieldNumber;
#endif  // !_MSC_VER

PBSixiangMonsterInfo::PBSixiangMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSixiangMonsterInfo::InitAsDefaultInstance() {
  point_ = const_cast< ::PBPoint*>(&::PBPoint::default_instance());
}

PBSixiangMonsterInfo::PBSixiangMonsterInfo(const PBSixiangMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSixiangMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = 0u;
  point_ = NULL;
  active_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSixiangMonsterInfo::~PBSixiangMonsterInfo() {
  SharedDtor();
}

void PBSixiangMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void PBSixiangMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSixiangMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSixiangMonsterInfo_descriptor_;
}

const PBSixiangMonsterInfo& PBSixiangMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBSixiangMonsterInfo* PBSixiangMonsterInfo::default_instance_ = NULL;

PBSixiangMonsterInfo* PBSixiangMonsterInfo::New() const {
  return new PBSixiangMonsterInfo;
}

void PBSixiangMonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unitid_ = 0u;
    if (has_point()) {
      if (point_ != NULL) point_->::PBPoint::Clear();
    }
    active_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSixiangMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point;
        break;
      }
      
      // optional .PBPoint point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }
      
      // optional uint32 active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSixiangMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unitid(), output);
  }
  
  // optional .PBPoint point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(), output);
  }
  
  // optional uint32 active = 3;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->active(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSixiangMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unitid = 1;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unitid(), target);
  }
  
  // optional .PBPoint point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point(), target);
  }
  
  // optional uint32 active = 3;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->active(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSixiangMonsterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unitid = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitid());
    }
    
    // optional .PBPoint point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }
    
    // optional uint32 active = 3;
    if (has_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSixiangMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSixiangMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSixiangMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSixiangMonsterInfo::MergeFrom(const PBSixiangMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_point()) {
      mutable_point()->::PBPoint::MergeFrom(from.point());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSixiangMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSixiangMonsterInfo::CopyFrom(const PBSixiangMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSixiangMonsterInfo::IsInitialized() const {
  
  return true;
}

void PBSixiangMonsterInfo::Swap(PBSixiangMonsterInfo* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(point_, other->point_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSixiangMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSixiangMonsterInfo_descriptor_;
  metadata.reflection = PBSixiangMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBItemNum::kItemidFieldNumber;
const int PBItemNum::kItemnumFieldNumber;
#endif  // !_MSC_VER

PBItemNum::PBItemNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemNum::InitAsDefaultInstance() {
}

PBItemNum::PBItemNum(const PBItemNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemNum::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemNum::~PBItemNum() {
  SharedDtor();
}

void PBItemNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBItemNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBItemNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemNum_descriptor_;
}

const PBItemNum& PBItemNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBItemNum* PBItemNum::default_instance_ = NULL;

PBItemNum* PBItemNum::New() const {
  return new PBItemNum;
}

void PBItemNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemnum;
        break;
      }
      
      // optional uint32 itemnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint32 itemnum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint32 itemnum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemNum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }
    
    // optional uint32 itemnum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBItemNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemNum::MergeFrom(const PBItemNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemNum::CopyFrom(const PBItemNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBItemNum::IsInitialized() const {
  
  return true;
}

void PBItemNum::Swap(PBItemNum* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBItemNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBItemNum_descriptor_;
  metadata.reflection = PBItemNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBItemSnNum::kItemsnFieldNumber;
const int PBItemSnNum::kItemnumFieldNumber;
#endif  // !_MSC_VER

PBItemSnNum::PBItemSnNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemSnNum::InitAsDefaultInstance() {
}

PBItemSnNum::PBItemSnNum(const PBItemSnNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemSnNum::SharedCtor() {
  _cached_size_ = 0;
  itemsn_ = GOOGLE_ULONGLONG(0);
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemSnNum::~PBItemSnNum() {
  SharedDtor();
}

void PBItemSnNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBItemSnNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBItemSnNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemSnNum_descriptor_;
}

const PBItemSnNum& PBItemSnNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBItemSnNum* PBItemSnNum::default_instance_ = NULL;

PBItemSnNum* PBItemSnNum::New() const {
  return new PBItemSnNum;
}

void PBItemSnNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemsn_ = GOOGLE_ULONGLONG(0);
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemSnNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemsn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsn_)));
          set_has_itemsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemnum;
        break;
      }
      
      // optional uint32 itemnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemSnNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemsn = 1;
  if (has_itemsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemsn(), output);
  }
  
  // optional uint32 itemnum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemSnNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemsn = 1;
  if (has_itemsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemsn(), target);
  }
  
  // optional uint32 itemnum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemSnNum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemsn = 1;
    if (has_itemsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsn());
    }
    
    // optional uint32 itemnum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBItemSnNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemSnNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemSnNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemSnNum::MergeFrom(const PBItemSnNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemsn()) {
      set_itemsn(from.itemsn());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemSnNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemSnNum::CopyFrom(const PBItemSnNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBItemSnNum::IsInitialized() const {
  
  return true;
}

void PBItemSnNum::Swap(PBItemSnNum* other) {
  if (other != this) {
    std::swap(itemsn_, other->itemsn_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBItemSnNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBItemSnNum_descriptor_;
  metadata.reflection = PBItemSnNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBExpendNum::kExpendtypeFieldNumber;
const int PBExpendNum::kValueFieldNumber;
#endif  // !_MSC_VER

PBExpendNum::PBExpendNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBExpendNum::InitAsDefaultInstance() {
}

PBExpendNum::PBExpendNum(const PBExpendNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBExpendNum::SharedCtor() {
  _cached_size_ = 0;
  expendtype_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBExpendNum::~PBExpendNum() {
  SharedDtor();
}

void PBExpendNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBExpendNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBExpendNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBExpendNum_descriptor_;
}

const PBExpendNum& PBExpendNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBExpendNum* PBExpendNum::default_instance_ = NULL;

PBExpendNum* PBExpendNum::New() const {
  return new PBExpendNum;
}

void PBExpendNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expendtype_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBExpendNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expendtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expendtype_)));
          set_has_expendtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBExpendNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expendtype = 1;
  if (has_expendtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expendtype(), output);
  }
  
  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBExpendNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expendtype = 1;
  if (has_expendtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expendtype(), target);
  }
  
  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBExpendNum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expendtype = 1;
    if (has_expendtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expendtype());
    }
    
    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBExpendNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBExpendNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBExpendNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBExpendNum::MergeFrom(const PBExpendNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expendtype()) {
      set_expendtype(from.expendtype());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBExpendNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBExpendNum::CopyFrom(const PBExpendNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBExpendNum::IsInitialized() const {
  
  return true;
}

void PBExpendNum::Swap(PBExpendNum* other) {
  if (other != this) {
    std::swap(expendtype_, other->expendtype_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBExpendNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBExpendNum_descriptor_;
  metadata.reflection = PBExpendNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBItemAttr::kAttrTypeFieldNumber;
const int PBItemAttr::kAttrValueFieldNumber;
#endif  // !_MSC_VER

PBItemAttr::PBItemAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItemAttr::InitAsDefaultInstance() {
}

PBItemAttr::PBItemAttr(const PBItemAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItemAttr::SharedCtor() {
  _cached_size_ = 0;
  attrtype_ = 0u;
  attrvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItemAttr::~PBItemAttr() {
  SharedDtor();
}

void PBItemAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBItemAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBItemAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItemAttr_descriptor_;
}

const PBItemAttr& PBItemAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBItemAttr* PBItemAttr::default_instance_ = NULL;

PBItemAttr* PBItemAttr::New() const {
  return new PBItemAttr;
}

void PBItemAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attrtype_ = 0u;
    attrvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItemAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attrType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrtype_)));
          set_has_attrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attrValue;
        break;
      }
      
      // optional uint32 attrValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrvalue_)));
          set_has_attrvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItemAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attrType = 1;
  if (has_attrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attrtype(), output);
  }
  
  // optional uint32 attrValue = 2;
  if (has_attrvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attrvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItemAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attrType = 1;
  if (has_attrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attrtype(), target);
  }
  
  // optional uint32 attrValue = 2;
  if (has_attrvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attrvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItemAttr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attrType = 1;
    if (has_attrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrtype());
    }
    
    // optional uint32 attrValue = 2;
    if (has_attrvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBItemAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItemAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItemAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItemAttr::MergeFrom(const PBItemAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrtype()) {
      set_attrtype(from.attrtype());
    }
    if (from.has_attrvalue()) {
      set_attrvalue(from.attrvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItemAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItemAttr::CopyFrom(const PBItemAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBItemAttr::IsInitialized() const {
  
  return true;
}

void PBItemAttr::Swap(PBItemAttr* other) {
  if (other != this) {
    std::swap(attrtype_, other->attrtype_);
    std::swap(attrvalue_, other->attrvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBItemAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBItemAttr_descriptor_;
  metadata.reflection = PBItemAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBItem::kItemIdFieldNumber;
const int PBItem::kItemSNFieldNumber;
const int PBItem::kItemNumFieldNumber;
const int PBItem::kFlagFieldNumber;
const int PBItem::kLefttimeFieldNumber;
const int PBItem::kEndtimeFieldNumber;
const int PBItem::kEnhanceexpFieldNumber;
const int PBItem::kForgeexpFieldNumber;
const int PBItem::kSpecialidFieldNumber;
const int PBItem::kBingfuexpFieldNumber;
#endif  // !_MSC_VER

PBItem::PBItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBItem::InitAsDefaultInstance() {
}

PBItem::PBItem(const PBItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemsn_ = GOOGLE_ULONGLONG(0);
  itemnum_ = 0u;
  flag_ = 0u;
  lefttime_ = 0u;
  endtime_ = 0u;
  enhanceexp_ = 0u;
  forgeexp_ = 0u;
  bingfuexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBItem::~PBItem() {
  SharedDtor();
}

void PBItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBItem_descriptor_;
}

const PBItem& PBItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBItem* PBItem::default_instance_ = NULL;

PBItem* PBItem::New() const {
  return new PBItem;
}

void PBItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemsn_ = GOOGLE_ULONGLONG(0);
    itemnum_ = 0u;
    flag_ = 0u;
    lefttime_ = 0u;
    endtime_ = 0u;
    enhanceexp_ = 0u;
    forgeexp_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    bingfuexp_ = 0u;
  }
  specialid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemSN;
        break;
      }
      
      // optional uint64 itemSN = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemsn_)));
          set_has_itemsn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }
      
      // optional uint32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }
      
      // optional uint32 flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lefttime;
        break;
      }
      
      // optional uint32 lefttime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_endtime;
        break;
      }
      
      // optional uint32 endtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_enhanceexp;
        break;
      }
      
      // optional uint32 enhanceexp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhanceexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhanceexp_)));
          set_has_enhanceexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_forgeexp;
        break;
      }
      
      // optional uint32 forgeexp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forgeexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forgeexp_)));
          set_has_forgeexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_specialid;
        break;
      }
      
      // repeated uint32 specialid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_specialid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_specialid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_specialid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_specialid;
        if (input->ExpectTag(80)) goto parse_bingfuexp;
        break;
      }
      
      // optional uint32 bingfuexp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bingfuexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bingfuexp_)));
          set_has_bingfuexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }
  
  // optional uint64 itemSN = 2;
  if (has_itemsn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemsn(), output);
  }
  
  // optional uint32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemnum(), output);
  }
  
  // optional uint32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }
  
  // optional uint32 lefttime = 5;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lefttime(), output);
  }
  
  // optional uint32 endtime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->endtime(), output);
  }
  
  // optional uint32 enhanceexp = 7;
  if (has_enhanceexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->enhanceexp(), output);
  }
  
  // optional uint32 forgeexp = 8;
  if (has_forgeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->forgeexp(), output);
  }
  
  // repeated uint32 specialid = 9;
  for (int i = 0; i < this->specialid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->specialid(i), output);
  }
  
  // optional uint32 bingfuexp = 10;
  if (has_bingfuexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bingfuexp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }
  
  // optional uint64 itemSN = 2;
  if (has_itemsn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemsn(), target);
  }
  
  // optional uint32 itemNum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemnum(), target);
  }
  
  // optional uint32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }
  
  // optional uint32 lefttime = 5;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lefttime(), target);
  }
  
  // optional uint32 endtime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->endtime(), target);
  }
  
  // optional uint32 enhanceexp = 7;
  if (has_enhanceexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->enhanceexp(), target);
  }
  
  // optional uint32 forgeexp = 8;
  if (has_forgeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->forgeexp(), target);
  }
  
  // repeated uint32 specialid = 9;
  for (int i = 0; i < this->specialid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->specialid(i), target);
  }
  
  // optional uint32 bingfuexp = 10;
  if (has_bingfuexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bingfuexp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }
    
    // optional uint64 itemSN = 2;
    if (has_itemsn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemsn());
    }
    
    // optional uint32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }
    
    // optional uint32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }
    
    // optional uint32 lefttime = 5;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefttime());
    }
    
    // optional uint32 endtime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }
    
    // optional uint32 enhanceexp = 7;
    if (has_enhanceexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhanceexp());
    }
    
    // optional uint32 forgeexp = 8;
    if (has_forgeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forgeexp());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 bingfuexp = 10;
    if (has_bingfuexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bingfuexp());
    }
    
  }
  // repeated uint32 specialid = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->specialid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->specialid(i));
    }
    total_size += 1 * this->specialid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBItem::MergeFrom(const PBItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  specialid_.MergeFrom(from.specialid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemsn()) {
      set_itemsn(from.itemsn());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_enhanceexp()) {
      set_enhanceexp(from.enhanceexp());
    }
    if (from.has_forgeexp()) {
      set_forgeexp(from.forgeexp());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_bingfuexp()) {
      set_bingfuexp(from.bingfuexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBItem::CopyFrom(const PBItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBItem::IsInitialized() const {
  
  return true;
}

void PBItem::Swap(PBItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemsn_, other->itemsn_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(flag_, other->flag_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(enhanceexp_, other->enhanceexp_);
    std::swap(forgeexp_, other->forgeexp_);
    specialid_.Swap(&other->specialid_);
    std::swap(bingfuexp_, other->bingfuexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBItem_descriptor_;
  metadata.reflection = PBItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTopListInfo::kTypeFieldNumber;
const int PBTopListInfo::kValueFieldNumber;
const int PBTopListInfo::kSubvalueFieldNumber;
const int PBTopListInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

PBTopListInfo::PBTopListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTopListInfo::InitAsDefaultInstance() {
}

PBTopListInfo::PBTopListInfo(const PBTopListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTopListInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = GOOGLE_ULONGLONG(0);
  subvalue_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTopListInfo::~PBTopListInfo() {
  SharedDtor();
}

void PBTopListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTopListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTopListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTopListInfo_descriptor_;
}

const PBTopListInfo& PBTopListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBTopListInfo* PBTopListInfo::default_instance_ = NULL;

PBTopListInfo* PBTopListInfo::New() const {
  return new PBTopListInfo;
}

void PBTopListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = GOOGLE_ULONGLONG(0);
    subvalue_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTopListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subvalue;
        break;
      }
      
      // optional uint64 subvalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subvalue_)));
          set_has_subvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTopListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }
  
  // optional uint64 subvalue = 3;
  if (has_subvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->subvalue(), output);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTopListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }
  
  // optional uint64 subvalue = 3;
  if (has_subvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->subvalue(), target);
  }
  
  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTopListInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
    // optional uint64 subvalue = 3;
    if (has_subvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subvalue());
    }
    
    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTopListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTopListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTopListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTopListInfo::MergeFrom(const PBTopListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_subvalue()) {
      set_subvalue(from.subvalue());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTopListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTopListInfo::CopyFrom(const PBTopListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTopListInfo::IsInitialized() const {
  
  return true;
}

void PBTopListInfo::Swap(PBTopListInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(subvalue_, other->subvalue_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTopListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTopListInfo_descriptor_;
  metadata.reflection = PBTopListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTopListSortType::kTypeFieldNumber;
const int PBTopListSortType::kJobFieldNumber;
#endif  // !_MSC_VER

PBTopListSortType::PBTopListSortType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTopListSortType::InitAsDefaultInstance() {
}

PBTopListSortType::PBTopListSortType(const PBTopListSortType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTopListSortType::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  job_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTopListSortType::~PBTopListSortType() {
  SharedDtor();
}

void PBTopListSortType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTopListSortType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTopListSortType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTopListSortType_descriptor_;
}

const PBTopListSortType& PBTopListSortType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBTopListSortType* PBTopListSortType::default_instance_ = NULL;

PBTopListSortType* PBTopListSortType::New() const {
  return new PBTopListSortType;
}

void PBTopListSortType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    job_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTopListSortType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }
      
      // optional uint32 job = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTopListSortType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 job = 2;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->job(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTopListSortType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 job = 2;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->job(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTopListSortType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 job = 2;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTopListSortType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTopListSortType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTopListSortType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTopListSortType::MergeFrom(const PBTopListSortType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTopListSortType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTopListSortType::CopyFrom(const PBTopListSortType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTopListSortType::IsInitialized() const {
  
  return true;
}

void PBTopListSortType::Swap(PBTopListSortType* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTopListSortType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTopListSortType_descriptor_;
  metadata.reflection = PBTopListSortType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTopListOrder::kSorttypeFieldNumber;
const int PBTopListOrder::kOrderFieldNumber;
const int PBTopListOrder::kOldorderFieldNumber;
#endif  // !_MSC_VER

PBTopListOrder::PBTopListOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTopListOrder::InitAsDefaultInstance() {
  sorttype_ = const_cast< ::PBTopListSortType*>(&::PBTopListSortType::default_instance());
}

PBTopListOrder::PBTopListOrder(const PBTopListOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTopListOrder::SharedCtor() {
  _cached_size_ = 0;
  sorttype_ = NULL;
  order_ = 0u;
  oldorder_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTopListOrder::~PBTopListOrder() {
  SharedDtor();
}

void PBTopListOrder::SharedDtor() {
  if (this != default_instance_) {
    delete sorttype_;
  }
}

void PBTopListOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTopListOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTopListOrder_descriptor_;
}

const PBTopListOrder& PBTopListOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBTopListOrder* PBTopListOrder::default_instance_ = NULL;

PBTopListOrder* PBTopListOrder::New() const {
  return new PBTopListOrder;
}

void PBTopListOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sorttype()) {
      if (sorttype_ != NULL) sorttype_->::PBTopListSortType::Clear();
    }
    order_ = 0u;
    oldorder_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTopListOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBTopListSortType sorttype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sorttype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }
      
      // optional uint32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldorder;
        break;
      }
      
      // optional uint32 oldorder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldorder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldorder_)));
          set_has_oldorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTopListOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBTopListSortType sorttype = 1;
  if (has_sorttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sorttype(), output);
  }
  
  // optional uint32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order(), output);
  }
  
  // optional uint32 oldorder = 3;
  if (has_oldorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oldorder(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTopListOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBTopListSortType sorttype = 1;
  if (has_sorttype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sorttype(), target);
  }
  
  // optional uint32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->order(), target);
  }
  
  // optional uint32 oldorder = 3;
  if (has_oldorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oldorder(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTopListOrder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBTopListSortType sorttype = 1;
    if (has_sorttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sorttype());
    }
    
    // optional uint32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }
    
    // optional uint32 oldorder = 3;
    if (has_oldorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldorder());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTopListOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTopListOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTopListOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTopListOrder::MergeFrom(const PBTopListOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sorttype()) {
      mutable_sorttype()->::PBTopListSortType::MergeFrom(from.sorttype());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_oldorder()) {
      set_oldorder(from.oldorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTopListOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTopListOrder::CopyFrom(const PBTopListOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTopListOrder::IsInitialized() const {
  
  return true;
}

void PBTopListOrder::Swap(PBTopListOrder* other) {
  if (other != this) {
    std::swap(sorttype_, other->sorttype_);
    std::swap(order_, other->order_);
    std::swap(oldorder_, other->oldorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTopListOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTopListOrder_descriptor_;
  metadata.reflection = PBTopListOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTopListData::kInfoFieldNumber;
const int PBTopListData::kOrderFieldNumber;
#endif  // !_MSC_VER

PBTopListData::PBTopListData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTopListData::InitAsDefaultInstance() {
}

PBTopListData::PBTopListData(const PBTopListData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTopListData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTopListData::~PBTopListData() {
  SharedDtor();
}

void PBTopListData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTopListData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTopListData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTopListData_descriptor_;
}

const PBTopListData& PBTopListData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBTopListData* PBTopListData::default_instance_ = NULL;

PBTopListData* PBTopListData::New() const {
  return new PBTopListData;
}

void PBTopListData::Clear() {
  info_.Clear();
  order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTopListData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBTopListInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_order;
        break;
      }
      
      // repeated .PBTopListOrder order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTopListData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBTopListInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  // repeated .PBTopListOrder order = 2;
  for (int i = 0; i < this->order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->order(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTopListData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBTopListInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  // repeated .PBTopListOrder order = 2;
  for (int i = 0; i < this->order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->order(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTopListData::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBTopListInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  // repeated .PBTopListOrder order = 2;
  total_size += 1 * this->order_size();
  for (int i = 0; i < this->order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->order(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTopListData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTopListData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTopListData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTopListData::MergeFrom(const PBTopListData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  order_.MergeFrom(from.order_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTopListData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTopListData::CopyFrom(const PBTopListData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTopListData::IsInitialized() const {
  
  return true;
}

void PBTopListData::Swap(PBTopListData* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    order_.Swap(&other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTopListData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTopListData_descriptor_;
  metadata.reflection = PBTopListData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTopListUpdate::kTypeFieldNumber;
const int PBTopListUpdate::kValueFieldNumber;
const int PBTopListUpdate::kSubvalueFieldNumber;
#endif  // !_MSC_VER

PBTopListUpdate::PBTopListUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTopListUpdate::InitAsDefaultInstance() {
}

PBTopListUpdate::PBTopListUpdate(const PBTopListUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTopListUpdate::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = GOOGLE_ULONGLONG(0);
  subvalue_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTopListUpdate::~PBTopListUpdate() {
  SharedDtor();
}

void PBTopListUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTopListUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTopListUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTopListUpdate_descriptor_;
}

const PBTopListUpdate& PBTopListUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameStruct_2eproto();  return *default_instance_;
}

PBTopListUpdate* PBTopListUpdate::default_instance_ = NULL;

PBTopListUpdate* PBTopListUpdate::New() const {
  return new PBTopListUpdate;
}

void PBTopListUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = GOOGLE_ULONGLONG(0);
    subvalue_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTopListUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subvalue;
        break;
      }
      
      // optional uint64 subvalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subvalue_)));
          set_has_subvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTopListUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }
  
  // optional uint64 subvalue = 3;
  if (has_subvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->subvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTopListUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }
  
  // optional uint64 subvalue = 3;
  if (has_subvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->subvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTopListUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
    // optional uint64 subvalue = 3;
    if (has_subvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTopListUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTopListUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTopListUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTopListUpdate::MergeFrom(const PBTopListUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_subvalue()) {
      set_subvalue(from.subvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTopListUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTopListUpdate::CopyFrom(const PBTopListUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTopListUpdate::IsInitialized() const {
  
  return true;
}

void PBTopListUpdate::Swap(PBTopListUpdate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(subvalue_, other->subvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTopListUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTopListUpdate_descriptor_;
  metadata.reflection = PBTopListUpdate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
