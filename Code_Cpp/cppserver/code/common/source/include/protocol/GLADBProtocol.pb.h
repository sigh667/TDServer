// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GLADBProtocol.proto

#ifndef PROTOBUF_GLADBProtocol_2eproto__INCLUDED
#define PROTOBUF_GLADBProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GLADBProtocol_2eproto();
void protobuf_AssignDesc_GLADBProtocol_2eproto();
void protobuf_ShutdownFile_GLADBProtocol_2eproto();


enum _emPGL2DB_Protocol {
  P_GL2DB_Operator = 0
};
bool _emPGL2DB_Protocol_IsValid(int value);
const _emPGL2DB_Protocol _emPGL2DB_Protocol_MIN = P_GL2DB_Operator;
const _emPGL2DB_Protocol _emPGL2DB_Protocol_MAX = P_GL2DB_Operator;
const int _emPGL2DB_Protocol_ARRAYSIZE = _emPGL2DB_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPGL2DB_Protocol_descriptor();
inline const ::std::string& _emPGL2DB_Protocol_Name(_emPGL2DB_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPGL2DB_Protocol_descriptor(), value);
}
inline bool _emPGL2DB_Protocol_Parse(
    const ::std::string& name, _emPGL2DB_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPGL2DB_Protocol>(
    _emPGL2DB_Protocol_descriptor(), name, value);
}
enum _emGL2DB_Operator_Protocol {
  GL2DB_Operator_StartLoad_Ask = 0,
  GL2DB_Operator_DBBlock_Ask = 1
};
bool _emGL2DB_Operator_Protocol_IsValid(int value);
const _emGL2DB_Operator_Protocol _emGL2DB_Operator_Protocol_MIN = GL2DB_Operator_StartLoad_Ask;
const _emGL2DB_Operator_Protocol _emGL2DB_Operator_Protocol_MAX = GL2DB_Operator_DBBlock_Ask;
const int _emGL2DB_Operator_Protocol_ARRAYSIZE = _emGL2DB_Operator_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emGL2DB_Operator_Protocol_descriptor();
inline const ::std::string& _emGL2DB_Operator_Protocol_Name(_emGL2DB_Operator_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emGL2DB_Operator_Protocol_descriptor(), value);
}
inline bool _emGL2DB_Operator_Protocol_Parse(
    const ::std::string& name, _emGL2DB_Operator_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emGL2DB_Operator_Protocol>(
    _emGL2DB_Operator_Protocol_descriptor(), name, value);
}
enum _em_GL2DB_Event {
  GL2DB_Event_Global_Load = 0,
  GL2DB_Event_Global_Save = 1,
  GL2DB_Event_DataPlayer_Load = 2,
  GL2DB_Event_DataPlayer_Save = 3,
  GL2DB_Event_AuctionItem_Load = 4,
  GL2DB_Event_AuctionItem_Save = 5,
  GL2DB_Event_AuctionItem_Delete = 6,
  GL2DB_Event_SaleMoney_Load = 7,
  GL2DB_Event_SaleMoney_Save = 8,
  GL2DB_Event_SaleMoney_Delete = 9
};
bool _em_GL2DB_Event_IsValid(int value);
const _em_GL2DB_Event _em_GL2DB_Event_MIN = GL2DB_Event_Global_Load;
const _em_GL2DB_Event _em_GL2DB_Event_MAX = GL2DB_Event_SaleMoney_Delete;
const int _em_GL2DB_Event_ARRAYSIZE = _em_GL2DB_Event_MAX + 1;

const ::google::protobuf::EnumDescriptor* _em_GL2DB_Event_descriptor();
inline const ::std::string& _em_GL2DB_Event_Name(_em_GL2DB_Event value) {
  return ::google::protobuf::internal::NameOfEnum(
    _em_GL2DB_Event_descriptor(), value);
}
inline bool _em_GL2DB_Event_Parse(
    const ::std::string& name, _em_GL2DB_Event* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_em_GL2DB_Event>(
    _em_GL2DB_Event_descriptor(), name, value);
}
enum _emPDB2GL_Protocol {
  P_DB2GL_Operator = 0
};
bool _emPDB2GL_Protocol_IsValid(int value);
const _emPDB2GL_Protocol _emPDB2GL_Protocol_MIN = P_DB2GL_Operator;
const _emPDB2GL_Protocol _emPDB2GL_Protocol_MAX = P_DB2GL_Operator;
const int _emPDB2GL_Protocol_ARRAYSIZE = _emPDB2GL_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emPDB2GL_Protocol_descriptor();
inline const ::std::string& _emPDB2GL_Protocol_Name(_emPDB2GL_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emPDB2GL_Protocol_descriptor(), value);
}
inline bool _emPDB2GL_Protocol_Parse(
    const ::std::string& name, _emPDB2GL_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emPDB2GL_Protocol>(
    _emPDB2GL_Protocol_descriptor(), name, value);
}
enum _emDB2GL_Operator_Protocol {
  DB2GL_Operator_DBRecv_Ack = 0,
  DB2GL_Operator_Global_Load = 1,
  DB2GL_Operator_DataPlayer_Load = 2,
  DB2GL_Operator_AuctionItem_Load = 3,
  DB2GL_Operator_SaleMoney_Load = 4
};
bool _emDB2GL_Operator_Protocol_IsValid(int value);
const _emDB2GL_Operator_Protocol _emDB2GL_Operator_Protocol_MIN = DB2GL_Operator_DBRecv_Ack;
const _emDB2GL_Operator_Protocol _emDB2GL_Operator_Protocol_MAX = DB2GL_Operator_SaleMoney_Load;
const int _emDB2GL_Operator_Protocol_ARRAYSIZE = _emDB2GL_Operator_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* _emDB2GL_Operator_Protocol_descriptor();
inline const ::std::string& _emDB2GL_Operator_Protocol_Name(_emDB2GL_Operator_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    _emDB2GL_Operator_Protocol_descriptor(), value);
}
inline bool _emDB2GL_Operator_Protocol_Parse(
    const ::std::string& name, _emDB2GL_Operator_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_emDB2GL_Operator_Protocol>(
    _emDB2GL_Operator_Protocol_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPGL2DB_Protocol>() {
  return _emPGL2DB_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emGL2DB_Operator_Protocol>() {
  return _emGL2DB_Operator_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _em_GL2DB_Event>() {
  return _em_GL2DB_Event_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emPDB2GL_Protocol>() {
  return _emPDB2GL_Protocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< _emDB2GL_Operator_Protocol>() {
  return _emDB2GL_Operator_Protocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GLADBProtocol_2eproto__INCLUDED
